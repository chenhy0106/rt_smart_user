
root/bin/lwIPKit.elf:     file format elf32-littlearm


Disassembly of section .text:

00100000 <_start>:
  100000:	e1a0d003 	mov	sp, r3
  100004:	ebffffff 	bl	100008 <_start_c>

00100008 <_start_c>:
  100008:	e3a0c000 	mov	ip, #0
  10000c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  100010:	e59f3018 	ldr	r3, [pc, #24]	; 100030 <_start_c+0x28>
  100014:	e24dd00c 	sub	sp, sp, #12
  100018:	e5901000 	ldr	r1, [r0]
  10001c:	e2802004 	add	r2, r0, #4
  100020:	e88d1008 	stm	sp, {r3, ip}
  100024:	e59f0008 	ldr	r0, [pc, #8]	; 100034 <_start_c+0x2c>
  100028:	e59f3008 	ldr	r3, [pc, #8]	; 100038 <_start_c+0x30>
  10002c:	eb00e414 	bl	139084 <__libc_start_main>
  100030:	00145560 	.word	0x00145560
  100034:	00103c5c 	.word	0x00103c5c
  100038:	00145554 	.word	0x00145554

0010003c <deregister_tm_clones>:
  10003c:	e59f0018 	ldr	r0, [pc, #24]	; 10005c <deregister_tm_clones+0x20>
  100040:	e59f3018 	ldr	r3, [pc, #24]	; 100060 <deregister_tm_clones+0x24>
  100044:	e1530000 	cmp	r3, r0
  100048:	012fff1e 	bxeq	lr
  10004c:	e59f3010 	ldr	r3, [pc, #16]	; 100064 <deregister_tm_clones+0x28>
  100050:	e3530000 	cmp	r3, #0
  100054:	012fff1e 	bxeq	lr
  100058:	e12fff13 	bx	r3
  10005c:	0014e3f0 	.word	0x0014e3f0
  100060:	0014e3f0 	.word	0x0014e3f0
  100064:	00000000 	.word	0x00000000

00100068 <register_tm_clones>:
  100068:	e59f0024 	ldr	r0, [pc, #36]	; 100094 <register_tm_clones+0x2c>
  10006c:	e59f1024 	ldr	r1, [pc, #36]	; 100098 <register_tm_clones+0x30>
  100070:	e0411000 	sub	r1, r1, r0
  100074:	e1a01141 	asr	r1, r1, #2
  100078:	e0811fa1 	add	r1, r1, r1, lsr #31
  10007c:	e1b010c1 	asrs	r1, r1, #1
  100080:	012fff1e 	bxeq	lr
  100084:	e59f3010 	ldr	r3, [pc, #16]	; 10009c <register_tm_clones+0x34>
  100088:	e3530000 	cmp	r3, #0
  10008c:	012fff1e 	bxeq	lr
  100090:	e12fff13 	bx	r3
  100094:	0014e3f0 	.word	0x0014e3f0
  100098:	0014e3f0 	.word	0x0014e3f0
  10009c:	00000000 	.word	0x00000000

001000a0 <__do_global_dtors_aux>:
  1000a0:	e92d4010 	push	{r4, lr}
  1000a4:	e59f402c 	ldr	r4, [pc, #44]	; 1000d8 <__do_global_dtors_aux+0x38>
  1000a8:	e5d43000 	ldrb	r3, [r4]
  1000ac:	e3530000 	cmp	r3, #0
  1000b0:	18bd8010 	popne	{r4, pc}
  1000b4:	ebffffe0 	bl	10003c <deregister_tm_clones>
  1000b8:	e59f301c 	ldr	r3, [pc, #28]	; 1000dc <__do_global_dtors_aux+0x3c>
  1000bc:	e3530000 	cmp	r3, #0
  1000c0:	0a000001 	beq	1000cc <__do_global_dtors_aux+0x2c>
  1000c4:	e59f0014 	ldr	r0, [pc, #20]	; 1000e0 <__do_global_dtors_aux+0x40>
  1000c8:	e320f000 	nop	{0}
  1000cc:	e3a03001 	mov	r3, #1
  1000d0:	e5c43000 	strb	r3, [r4]
  1000d4:	e8bd8010 	pop	{r4, pc}
  1000d8:	0014e3f0 	.word	0x0014e3f0
  1000dc:	00000000 	.word	0x00000000
  1000e0:	0014d190 	.word	0x0014d190

001000e4 <frame_dummy>:
  1000e4:	e59f3020 	ldr	r3, [pc, #32]	; 10010c <frame_dummy+0x28>
  1000e8:	e3530000 	cmp	r3, #0
  1000ec:	0a000005 	beq	100108 <frame_dummy+0x24>
  1000f0:	e92d4010 	push	{r4, lr}
  1000f4:	e59f1014 	ldr	r1, [pc, #20]	; 100110 <frame_dummy+0x2c>
  1000f8:	e59f0014 	ldr	r0, [pc, #20]	; 100114 <frame_dummy+0x30>
  1000fc:	e320f000 	nop	{0}
  100100:	e8bd4010 	pop	{r4, lr}
  100104:	eaffffd7 	b	100068 <register_tm_clones>
  100108:	eaffffd6 	b	100068 <register_tm_clones>
  10010c:	00000000 	.word	0x00000000
  100110:	0014e3f4 	.word	0x0014e3f4
  100114:	0014d190 	.word	0x0014d190

00100118 <rt_channel_open>:

#include <sys/rtt_syscall.h>
#include <rtthread.h>

int rt_channel_open(const char *name, int flags)
{
  100118:	e92d4800 	push	{fp, lr}
  10011c:	e28db004 	add	fp, sp, #4
  100120:	e24dd008 	sub	sp, sp, #8
  100124:	e50b0008 	str	r0, [fp, #-8]
  100128:	e50b100c 	str	r1, [fp, #-12]
    return syscall(_NRSYS_channel_open, name, flags);
  10012c:	e51b200c 	ldr	r2, [fp, #-12]
  100130:	e51b1008 	ldr	r1, [fp, #-8]
  100134:	e3a0002c 	mov	r0, #44	; 0x2c
  100138:	eb00f141 	bl	13c644 <syscall>
  10013c:	e1a03000 	mov	r3, r0
}
  100140:	e1a00003 	mov	r0, r3
  100144:	e24bd004 	sub	sp, fp, #4
  100148:	e8bd8800 	pop	{fp, pc}

0010014c <rt_channel_close>:

rt_err_t rt_channel_close(int fd)
{
  10014c:	e92d4800 	push	{fp, lr}
  100150:	e28db004 	add	fp, sp, #4
  100154:	e24dd008 	sub	sp, sp, #8
  100158:	e50b0008 	str	r0, [fp, #-8]
    return syscall(_NRSYS_channel_close, fd);
  10015c:	e51b1008 	ldr	r1, [fp, #-8]
  100160:	e3a0002d 	mov	r0, #45	; 0x2d
  100164:	eb00f136 	bl	13c644 <syscall>
  100168:	e1a03000 	mov	r3, r0
}
  10016c:	e1a00003 	mov	r0, r3
  100170:	e24bd004 	sub	sp, fp, #4
  100174:	e8bd8800 	pop	{fp, pc}

00100178 <rt_channel_send_recv>:

rt_err_t rt_channel_send_recv(int fd, rt_channel_msg_t data, rt_channel_msg_t data_ret)
{
  100178:	e92d4800 	push	{fp, lr}
  10017c:	e28db004 	add	fp, sp, #4
  100180:	e24dd018 	sub	sp, sp, #24
  100184:	e50b0008 	str	r0, [fp, #-8]
  100188:	e50b100c 	str	r1, [fp, #-12]
  10018c:	e50b2010 	str	r2, [fp, #-16]
    return syscall(_NRSYS_channel_send_recv_timeout, fd, data, data_ret, RT_WAITING_FOREVER);
  100190:	e3e03000 	mvn	r3, #0
  100194:	e58d3000 	str	r3, [sp]
  100198:	e51b3010 	ldr	r3, [fp, #-16]
  10019c:	e51b200c 	ldr	r2, [fp, #-12]
  1001a0:	e51b1008 	ldr	r1, [fp, #-8]
  1001a4:	e3a0002f 	mov	r0, #47	; 0x2f
  1001a8:	eb00f125 	bl	13c644 <syscall>
  1001ac:	e1a03000 	mov	r3, r0
}
  1001b0:	e1a00003 	mov	r0, r3
  1001b4:	e24bd004 	sub	sp, fp, #4
  1001b8:	e8bd8800 	pop	{fp, pc}

001001bc <rt_channel_send_recv_timeout>:

rt_err_t rt_channel_send_recv_timeout(int fd, rt_channel_msg_t data, rt_channel_msg_t data_ret, rt_int32_t time)
{
  1001bc:	e92d4800 	push	{fp, lr}
  1001c0:	e28db004 	add	fp, sp, #4
  1001c4:	e24dd018 	sub	sp, sp, #24
  1001c8:	e50b0008 	str	r0, [fp, #-8]
  1001cc:	e50b100c 	str	r1, [fp, #-12]
  1001d0:	e50b2010 	str	r2, [fp, #-16]
  1001d4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return syscall(_NRSYS_channel_send_recv_timeout, fd, data, data_ret, time);
  1001d8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1001dc:	e58d3000 	str	r3, [sp]
  1001e0:	e51b3010 	ldr	r3, [fp, #-16]
  1001e4:	e51b200c 	ldr	r2, [fp, #-12]
  1001e8:	e51b1008 	ldr	r1, [fp, #-8]
  1001ec:	e3a0002f 	mov	r0, #47	; 0x2f
  1001f0:	eb00f113 	bl	13c644 <syscall>
  1001f4:	e1a03000 	mov	r3, r0
}
  1001f8:	e1a00003 	mov	r0, r3
  1001fc:	e24bd004 	sub	sp, fp, #4
  100200:	e8bd8800 	pop	{fp, pc}

00100204 <rt_channel_send>:

rt_err_t rt_channel_send(int fd, rt_channel_msg_t data)
{
  100204:	e92d4800 	push	{fp, lr}
  100208:	e28db004 	add	fp, sp, #4
  10020c:	e24dd008 	sub	sp, sp, #8
  100210:	e50b0008 	str	r0, [fp, #-8]
  100214:	e50b100c 	str	r1, [fp, #-12]
    return syscall(_NRSYS_channel_send, fd, data);
  100218:	e51b200c 	ldr	r2, [fp, #-12]
  10021c:	e51b1008 	ldr	r1, [fp, #-8]
  100220:	e3a0002e 	mov	r0, #46	; 0x2e
  100224:	eb00f106 	bl	13c644 <syscall>
  100228:	e1a03000 	mov	r3, r0
}
  10022c:	e1a00003 	mov	r0, r3
  100230:	e24bd004 	sub	sp, fp, #4
  100234:	e8bd8800 	pop	{fp, pc}

00100238 <rt_channel_reply>:

rt_err_t rt_channel_reply(int fd, rt_channel_msg_t data)
{
  100238:	e92d4800 	push	{fp, lr}
  10023c:	e28db004 	add	fp, sp, #4
  100240:	e24dd008 	sub	sp, sp, #8
  100244:	e50b0008 	str	r0, [fp, #-8]
  100248:	e50b100c 	str	r1, [fp, #-12]
    return syscall(_NRSYS_channel_reply, fd, data);
  10024c:	e51b200c 	ldr	r2, [fp, #-12]
  100250:	e51b1008 	ldr	r1, [fp, #-8]
  100254:	e3a00030 	mov	r0, #48	; 0x30
  100258:	eb00f0f9 	bl	13c644 <syscall>
  10025c:	e1a03000 	mov	r3, r0
}
  100260:	e1a00003 	mov	r0, r3
  100264:	e24bd004 	sub	sp, fp, #4
  100268:	e8bd8800 	pop	{fp, pc}

0010026c <rt_channel_recv>:

rt_err_t rt_channel_recv(int fd, rt_channel_msg_t data)
{
  10026c:	e92d4800 	push	{fp, lr}
  100270:	e28db004 	add	fp, sp, #4
  100274:	e24dd008 	sub	sp, sp, #8
  100278:	e50b0008 	str	r0, [fp, #-8]
  10027c:	e50b100c 	str	r1, [fp, #-12]
    return syscall(_NRSYS_channel_recv_timeout, fd, data, RT_WAITING_FOREVER);
  100280:	e3e03000 	mvn	r3, #0
  100284:	e51b200c 	ldr	r2, [fp, #-12]
  100288:	e51b1008 	ldr	r1, [fp, #-8]
  10028c:	e3a00031 	mov	r0, #49	; 0x31
  100290:	eb00f0eb 	bl	13c644 <syscall>
  100294:	e1a03000 	mov	r3, r0
}
  100298:	e1a00003 	mov	r0, r3
  10029c:	e24bd004 	sub	sp, fp, #4
  1002a0:	e8bd8800 	pop	{fp, pc}

001002a4 <rt_channel_recv_timeout>:

rt_err_t rt_channel_recv_timeout(int fd, rt_channel_msg_t data, rt_int32_t time)
{
  1002a4:	e92d4800 	push	{fp, lr}
  1002a8:	e28db004 	add	fp, sp, #4
  1002ac:	e24dd010 	sub	sp, sp, #16
  1002b0:	e50b0008 	str	r0, [fp, #-8]
  1002b4:	e50b100c 	str	r1, [fp, #-12]
  1002b8:	e50b2010 	str	r2, [fp, #-16]
    return syscall(_NRSYS_channel_recv_timeout, fd, data, time);
  1002bc:	e51b3010 	ldr	r3, [fp, #-16]
  1002c0:	e51b200c 	ldr	r2, [fp, #-12]
  1002c4:	e51b1008 	ldr	r1, [fp, #-8]
  1002c8:	e3a00031 	mov	r0, #49	; 0x31
  1002cc:	eb00f0dc 	bl	13c644 <syscall>
  1002d0:	e1a03000 	mov	r3, r0
}
  1002d4:	e1a00003 	mov	r0, r3
  1002d8:	e24bd004 	sub	sp, fp, #4
  1002dc:	e8bd8800 	pop	{fp, pc}

001002e0 <rt_channel_peek>:

rt_err_t rt_channel_peek(int fd, rt_channel_msg_t data)
{
  1002e0:	e92d4800 	push	{fp, lr}
  1002e4:	e28db004 	add	fp, sp, #4
  1002e8:	e24dd008 	sub	sp, sp, #8
  1002ec:	e50b0008 	str	r0, [fp, #-8]
  1002f0:	e50b100c 	str	r1, [fp, #-12]
    return syscall(_NRSYS_channel_recv_timeout, fd, data, 0);
  1002f4:	e3a03000 	mov	r3, #0
  1002f8:	e51b200c 	ldr	r2, [fp, #-12]
  1002fc:	e51b1008 	ldr	r1, [fp, #-8]
  100300:	e3a00031 	mov	r0, #49	; 0x31
  100304:	eb00f0ce 	bl	13c644 <syscall>
  100308:	e1a03000 	mov	r3, r0
}
  10030c:	e1a00003 	mov	r0, r3
  100310:	e24bd004 	sub	sp, fp, #4
  100314:	e8bd8800 	pop	{fp, pc}

00100318 <rt_completion_init>:
 * 2019-10-01     Bernard      code cleanup
 */
#include <rtdevice.h>

void rt_completion_init(struct rt_completion *completion)
{
  100318:	e92d4800 	push	{fp, lr}
  10031c:	e28db004 	add	fp, sp, #4
  100320:	e24dd008 	sub	sp, sp, #8
  100324:	e50b0008 	str	r0, [fp, #-8]
    if (completion && completion->flag == 0)
  100328:	e51b3008 	ldr	r3, [fp, #-8]
  10032c:	e3530000 	cmp	r3, #0
  100330:	0a00000d 	beq	10036c <rt_completion_init+0x54>
  100334:	e51b3008 	ldr	r3, [fp, #-8]
  100338:	e5933000 	ldr	r3, [r3]
  10033c:	e3530000 	cmp	r3, #0
  100340:	1a000009 	bne	10036c <rt_completion_init+0x54>
    {
        completion->flag = 0x5A5A;
  100344:	e51b3008 	ldr	r3, [fp, #-8]
  100348:	e3052a5a 	movw	r2, #23130	; 0x5a5a
  10034c:	e5832000 	str	r2, [r3]
        completion->wait_event = rt_event_create("completion", RT_IPC_FLAG_FIFO);
  100350:	e3a01000 	mov	r1, #0
  100354:	e305056c 	movw	r0, #21868	; 0x556c
  100358:	e3400014 	movt	r0, #20
  10035c:	eb0005e5 	bl	101af8 <rt_event_create>
  100360:	e1a02000 	mov	r2, r0
  100364:	e51b3008 	ldr	r3, [fp, #-8]
  100368:	e5832004 	str	r2, [r3, #4]
    }
}
  10036c:	e320f000 	nop	{0}
  100370:	e24bd004 	sub	sp, fp, #4
  100374:	e8bd8800 	pop	{fp, pc}

00100378 <rt_completion_wait>:

rt_err_t rt_completion_wait(struct rt_completion *completion,
    rt_int32_t timeout)
{
  100378:	e92d4800 	push	{fp, lr}
  10037c:	e28db004 	add	fp, sp, #4
  100380:	e24dd018 	sub	sp, sp, #24
  100384:	e50b0010 	str	r0, [fp, #-16]
  100388:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    rt_err_t ret;
    rt_uint32_t recv = 0;
  10038c:	e3a03000 	mov	r3, #0
  100390:	e50b300c 	str	r3, [fp, #-12]

    ret = rt_event_recv(completion->wait_event, 0x01, RT_EVENT_FLAG_OR | RT_EVENT_FLAG_CLEAR, timeout, &recv);
  100394:	e51b3010 	ldr	r3, [fp, #-16]
  100398:	e5930004 	ldr	r0, [r3, #4]
  10039c:	e24b300c 	sub	r3, fp, #12
  1003a0:	e58d3000 	str	r3, [sp]
  1003a4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1003a8:	e3a02006 	mov	r2, #6
  1003ac:	e3a01001 	mov	r1, #1
  1003b0:	eb000684 	bl	101dc8 <rt_event_recv>
  1003b4:	e50b0008 	str	r0, [fp, #-8]

    return ret;
  1003b8:	e51b3008 	ldr	r3, [fp, #-8]
}
  1003bc:	e1a00003 	mov	r0, r3
  1003c0:	e24bd004 	sub	sp, fp, #4
  1003c4:	e8bd8800 	pop	{fp, pc}

001003c8 <rt_completion_done>:

void rt_completion_done(struct rt_completion *completion)
{
  1003c8:	e92d4800 	push	{fp, lr}
  1003cc:	e28db004 	add	fp, sp, #4
  1003d0:	e24dd008 	sub	sp, sp, #8
  1003d4:	e50b0008 	str	r0, [fp, #-8]
    rt_event_send(completion->wait_event, 0x01);
  1003d8:	e51b3008 	ldr	r3, [fp, #-8]
  1003dc:	e5933004 	ldr	r3, [r3, #4]
  1003e0:	e3a01001 	mov	r1, #1
  1003e4:	e1a00003 	mov	r0, r3
  1003e8:	eb000658 	bl	101d50 <rt_event_send>
}
  1003ec:	e320f000 	nop	{0}
  1003f0:	e24bd004 	sub	sp, fp, #4
  1003f4:	e8bd8800 	pop	{fp, pc}

001003f8 <rt_device_init>:

#include <sys/rtt_syscall.h>
#include <rtthread.h>

rt_err_t rt_device_init(rt_device_t dev)
{
  1003f8:	e92d4800 	push	{fp, lr}
  1003fc:	e28db004 	add	fp, sp, #4
  100400:	e24dd008 	sub	sp, sp, #8
  100404:	e50b0008 	str	r0, [fp, #-8]
    return syscall(_NRSYS_rt_device_init, dev);
  100408:	e51b1008 	ldr	r1, [fp, #-8]
  10040c:	e3a0003b 	mov	r0, #59	; 0x3b
  100410:	eb00f08b 	bl	13c644 <syscall>
  100414:	e1a03000 	mov	r3, r0
}
  100418:	e1a00003 	mov	r0, r3
  10041c:	e24bd004 	sub	sp, fp, #4
  100420:	e8bd8800 	pop	{fp, pc}

00100424 <rt_device_register>:

rt_err_t rt_device_register(rt_device_t dev,
        const char *name,
        rt_uint16_t flags)
{
  100424:	e92d4800 	push	{fp, lr}
  100428:	e28db004 	add	fp, sp, #4
  10042c:	e24dd010 	sub	sp, sp, #16
  100430:	e50b0008 	str	r0, [fp, #-8]
  100434:	e50b100c 	str	r1, [fp, #-12]
  100438:	e1a03002 	mov	r3, r2
  10043c:	e14b30be 	strh	r3, [fp, #-14]
    return syscall(_NRSYS_rt_device_register, dev, name, flags);
  100440:	e15b30be 	ldrh	r3, [fp, #-14]
  100444:	e51b200c 	ldr	r2, [fp, #-12]
  100448:	e51b1008 	ldr	r1, [fp, #-8]
  10044c:	e3a0003c 	mov	r0, #60	; 0x3c
  100450:	eb00f07b 	bl	13c644 <syscall>
  100454:	e1a03000 	mov	r3, r0
}
  100458:	e1a00003 	mov	r0, r3
  10045c:	e24bd004 	sub	sp, fp, #4
  100460:	e8bd8800 	pop	{fp, pc}

00100464 <rt_device_control>:

rt_err_t rt_device_control(rt_device_t dev, int cmd, void *arg)
{
  100464:	e92d4800 	push	{fp, lr}
  100468:	e28db004 	add	fp, sp, #4
  10046c:	e24dd010 	sub	sp, sp, #16
  100470:	e50b0008 	str	r0, [fp, #-8]
  100474:	e50b100c 	str	r1, [fp, #-12]
  100478:	e50b2010 	str	r2, [fp, #-16]
    return syscall(_NRSYS_rt_device_control, dev, cmd, arg);
  10047c:	e51b3010 	ldr	r3, [fp, #-16]
  100480:	e51b200c 	ldr	r2, [fp, #-12]
  100484:	e51b1008 	ldr	r1, [fp, #-8]
  100488:	e3a0003d 	mov	r0, #61	; 0x3d
  10048c:	eb00f06c 	bl	13c644 <syscall>
  100490:	e1a03000 	mov	r3, r0
}
  100494:	e1a00003 	mov	r0, r3
  100498:	e24bd004 	sub	sp, fp, #4
  10049c:	e8bd8800 	pop	{fp, pc}

001004a0 <rt_device_find>:

rt_device_t rt_device_find(const char *name)
{
  1004a0:	e92d4800 	push	{fp, lr}
  1004a4:	e28db004 	add	fp, sp, #4
  1004a8:	e24dd008 	sub	sp, sp, #8
  1004ac:	e50b0008 	str	r0, [fp, #-8]
    return (rt_device_t)syscall(_NRSYS_rt_device_find, name);
  1004b0:	e51b1008 	ldr	r1, [fp, #-8]
  1004b4:	e3a0003e 	mov	r0, #62	; 0x3e
  1004b8:	eb00f061 	bl	13c644 <syscall>
  1004bc:	e1a03000 	mov	r3, r0
}
  1004c0:	e1a00003 	mov	r0, r3
  1004c4:	e24bd004 	sub	sp, fp, #4
  1004c8:	e8bd8800 	pop	{fp, pc}

001004cc <rt_device_open>:

rt_err_t rt_device_open(rt_device_t dev, rt_uint16_t oflag)
{
  1004cc:	e92d4800 	push	{fp, lr}
  1004d0:	e28db004 	add	fp, sp, #4
  1004d4:	e24dd008 	sub	sp, sp, #8
  1004d8:	e50b0008 	str	r0, [fp, #-8]
  1004dc:	e1a03001 	mov	r3, r1
  1004e0:	e14b30ba 	strh	r3, [fp, #-10]
    return syscall(_NRSYS_rt_device_open, dev, oflag);
  1004e4:	e15b30ba 	ldrh	r3, [fp, #-10]
  1004e8:	e1a02003 	mov	r2, r3
  1004ec:	e51b1008 	ldr	r1, [fp, #-8]
  1004f0:	e3a0003f 	mov	r0, #63	; 0x3f
  1004f4:	eb00f052 	bl	13c644 <syscall>
  1004f8:	e1a03000 	mov	r3, r0
}
  1004fc:	e1a00003 	mov	r0, r3
  100500:	e24bd004 	sub	sp, fp, #4
  100504:	e8bd8800 	pop	{fp, pc}

00100508 <rt_device_close>:

rt_err_t rt_device_close(rt_device_t dev)
{
  100508:	e92d4800 	push	{fp, lr}
  10050c:	e28db004 	add	fp, sp, #4
  100510:	e24dd008 	sub	sp, sp, #8
  100514:	e50b0008 	str	r0, [fp, #-8]
    return syscall(_NRSYS_rt_device_close, dev);
  100518:	e51b1008 	ldr	r1, [fp, #-8]
  10051c:	e3a00040 	mov	r0, #64	; 0x40
  100520:	eb00f047 	bl	13c644 <syscall>
  100524:	e1a03000 	mov	r3, r0
}
  100528:	e1a00003 	mov	r0, r3
  10052c:	e24bd004 	sub	sp, fp, #4
  100530:	e8bd8800 	pop	{fp, pc}

00100534 <rt_device_read>:

rt_size_t rt_device_read(rt_device_t dev,
        rt_off_t    pos,
        void       *buffer,
        rt_size_t   size)
{
  100534:	e92d4800 	push	{fp, lr}
  100538:	e28db004 	add	fp, sp, #4
  10053c:	e24dd018 	sub	sp, sp, #24
  100540:	e50b0008 	str	r0, [fp, #-8]
  100544:	e50b100c 	str	r1, [fp, #-12]
  100548:	e50b2010 	str	r2, [fp, #-16]
  10054c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return syscall(_NRSYS_rt_device_read, dev, pos, buffer, size);
  100550:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  100554:	e58d3000 	str	r3, [sp]
  100558:	e51b3010 	ldr	r3, [fp, #-16]
  10055c:	e51b200c 	ldr	r2, [fp, #-12]
  100560:	e51b1008 	ldr	r1, [fp, #-8]
  100564:	e3a00041 	mov	r0, #65	; 0x41
  100568:	eb00f035 	bl	13c644 <syscall>
  10056c:	e1a03000 	mov	r3, r0
}
  100570:	e1a00003 	mov	r0, r3
  100574:	e24bd004 	sub	sp, fp, #4
  100578:	e8bd8800 	pop	{fp, pc}

0010057c <rt_device_write>:

rt_size_t rt_device_write(rt_device_t dev,
        rt_off_t    pos,
        const void *buffer,
        rt_size_t   size)
{
  10057c:	e92d4800 	push	{fp, lr}
  100580:	e28db004 	add	fp, sp, #4
  100584:	e24dd018 	sub	sp, sp, #24
  100588:	e50b0008 	str	r0, [fp, #-8]
  10058c:	e50b100c 	str	r1, [fp, #-12]
  100590:	e50b2010 	str	r2, [fp, #-16]
  100594:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return syscall(_NRSYS_rt_device_write, dev, pos, buffer, size);;
  100598:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10059c:	e58d3000 	str	r3, [sp]
  1005a0:	e51b3010 	ldr	r3, [fp, #-16]
  1005a4:	e51b200c 	ldr	r2, [fp, #-12]
  1005a8:	e51b1008 	ldr	r1, [fp, #-8]
  1005ac:	e3a00042 	mov	r0, #66	; 0x42
  1005b0:	eb00f023 	bl	13c644 <syscall>
  1005b4:	e1a03000 	mov	r3, r0
}
  1005b8:	e1a00003 	mov	r0, r3
  1005bc:	e24bd004 	sub	sp, fp, #4
  1005c0:	e8bd8800 	pop	{fp, pc}

001005c4 <closesocket>:
#include <netinet/in.h>
#include <fcntl.h>
#include <time.h>

int closesocket(int s)
{
  1005c4:	e92d4800 	push	{fp, lr}
  1005c8:	e28db004 	add	fp, sp, #4
  1005cc:	e24dd008 	sub	sp, sp, #8
  1005d0:	e50b0008 	str	r0, [fp, #-8]
    return (int)syscall(_NRSYS_closesocket, s);
  1005d4:	e51b1008 	ldr	r1, [fp, #-8]
  1005d8:	e3a00053 	mov	r0, #83	; 0x53
  1005dc:	eb00f018 	bl	13c644 <syscall>
  1005e0:	e1a03000 	mov	r3, r0
}
  1005e4:	e1a00003 	mov	r0, r3
  1005e8:	e24bd004 	sub	sp, fp, #4
  1005ec:	e8bd8800 	pop	{fp, pc}

001005f0 <getaddrinfo>:

int getaddrinfo(const char *restrict host, const char *restrict serv, const struct addrinfo *restrict hint, struct addrinfo **restrict res)
{
  1005f0:	e92d4800 	push	{fp, lr}
  1005f4:	e28db004 	add	fp, sp, #4
  1005f8:	e24dd020 	sub	sp, sp, #32
  1005fc:	e50b0010 	str	r0, [fp, #-16]
  100600:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  100604:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  100608:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    struct addrinfo *ret = NULL;
  10060c:	e3a03000 	mov	r3, #0
  100610:	e50b3008 	str	r3, [fp, #-8]

    ret = (struct addrinfo *) malloc(sizeof(struct addrinfo) + sizeof(struct sockaddr));
  100614:	e3a00030 	mov	r0, #48	; 0x30
  100618:	eb00f3c6 	bl	13d538 <malloc>
  10061c:	e1a03000 	mov	r3, r0
  100620:	e50b3008 	str	r3, [fp, #-8]
    if (ret)
  100624:	e51b3008 	ldr	r3, [fp, #-8]
  100628:	e3530000 	cmp	r3, #0
  10062c:	0a000011 	beq	100678 <getaddrinfo+0x88>
    {
        ret->ai_addr = (struct sockaddr *)(ret + 1);
  100630:	e51b3008 	ldr	r3, [fp, #-8]
  100634:	e2832020 	add	r2, r3, #32
  100638:	e51b3008 	ldr	r3, [fp, #-8]
  10063c:	e5832014 	str	r2, [r3, #20]

        /* invoke syscall */
        int result = syscall(_NRSYS_getaddrinfo, host, serv, hint, ret);
  100640:	e51b3008 	ldr	r3, [fp, #-8]
  100644:	e58d3000 	str	r3, [sp]
  100648:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10064c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  100650:	e51b1010 	ldr	r1, [fp, #-16]
  100654:	e3a00054 	mov	r0, #84	; 0x54
  100658:	eb00eff9 	bl	13c644 <syscall>
  10065c:	e50b000c 	str	r0, [fp, #-12]
        if (result == 0)
  100660:	e51b300c 	ldr	r3, [fp, #-12]
  100664:	e3530000 	cmp	r3, #0
  100668:	1a000002 	bne	100678 <getaddrinfo+0x88>
        {
            *res = ret;
  10066c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  100670:	e51b2008 	ldr	r2, [fp, #-8]
  100674:	e5832000 	str	r2, [r3]
        }
    }

    return 0;
  100678:	e3a03000 	mov	r3, #0
}
  10067c:	e1a00003 	mov	r0, r3
  100680:	e24bd004 	sub	sp, fp, #4
  100684:	e8bd8800 	pop	{fp, pc}

00100688 <freeaddrinfo>:

void freeaddrinfo(struct addrinfo *p)
{
  100688:	e92d4800 	push	{fp, lr}
  10068c:	e28db004 	add	fp, sp, #4
  100690:	e24dd008 	sub	sp, sp, #8
  100694:	e50b0008 	str	r0, [fp, #-8]
    /* p->ai_canonname, p->ai_next should be NULL. */
    free(p);
  100698:	e51b0008 	ldr	r0, [fp, #-8]
  10069c:	eb00f561 	bl	13dc28 <free>
}
  1006a0:	e320f000 	nop	{0}
  1006a4:	e24bd004 	sub	sp, fp, #4
  1006a8:	e8bd8800 	pop	{fp, pc}

001006ac <gethostbyname2_r>:

int gethostbyname2_r(const char *name, int af, struct hostent *ret,
                    char *buf, size_t buflen,
                    struct hostent **result, int *err)
{
  1006ac:	e92d4800 	push	{fp, lr}
  1006b0:	e28db004 	add	fp, sp, #4
  1006b4:	e24dd020 	sub	sp, sp, #32
  1006b8:	e50b0008 	str	r0, [fp, #-8]
  1006bc:	e50b100c 	str	r1, [fp, #-12]
  1006c0:	e50b2010 	str	r2, [fp, #-16]
  1006c4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return syscall(_NRSYS_gethostbyname2_r, name, af, ret, buf, buflen, result, err);
  1006c8:	e59b300c 	ldr	r3, [fp, #12]
  1006cc:	e58d300c 	str	r3, [sp, #12]
  1006d0:	e59b3008 	ldr	r3, [fp, #8]
  1006d4:	e58d3008 	str	r3, [sp, #8]
  1006d8:	e59b3004 	ldr	r3, [fp, #4]
  1006dc:	e58d3004 	str	r3, [sp, #4]
  1006e0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1006e4:	e58d3000 	str	r3, [sp]
  1006e8:	e51b3010 	ldr	r3, [fp, #-16]
  1006ec:	e51b200c 	ldr	r2, [fp, #-12]
  1006f0:	e51b1008 	ldr	r1, [fp, #-8]
  1006f4:	e3a00055 	mov	r0, #85	; 0x55
  1006f8:	eb00efd1 	bl	13c644 <syscall>
  1006fc:	e1a03000 	mov	r3, r0
}
  100700:	e1a00003 	mov	r0, r3
  100704:	e24bd004 	sub	sp, fp, #4
  100708:	e8bd8800 	pop	{fp, pc}

0010070c <setnonblocking>:

/* set non-blocking */
int setnonblocking(int fd)
{
  10070c:	e92d4800 	push	{fp, lr}
  100710:	e28db004 	add	fp, sp, #4
  100714:	e24dd010 	sub	sp, sp, #16
  100718:	e50b0010 	str	r0, [fp, #-16]
    int old_option = fcntl( fd, F_GETFL, 0);
  10071c:	e3a02000 	mov	r2, #0
  100720:	e3a01003 	mov	r1, #3
  100724:	e51b0010 	ldr	r0, [fp, #-16]
  100728:	eb00e2b3 	bl	1391fc <fcntl>
  10072c:	e50b0008 	str	r0, [fp, #-8]
    int new_option = old_option | O_NONBLOCK;
  100730:	e51b3008 	ldr	r3, [fp, #-8]
  100734:	e3833b02 	orr	r3, r3, #2048	; 0x800
  100738:	e50b300c 	str	r3, [fp, #-12]
    if (fcntl(fd, F_SETFL, new_option) == -1)
  10073c:	e51b200c 	ldr	r2, [fp, #-12]
  100740:	e3a01004 	mov	r1, #4
  100744:	e51b0010 	ldr	r0, [fp, #-16]
  100748:	eb00e2ab 	bl	1391fc <fcntl>
  10074c:	e1a03000 	mov	r3, r0
  100750:	e3730001 	cmn	r3, #1
  100754:	1a000004 	bne	10076c <setnonblocking+0x60>
    {
        printf("Set noblocking error!\n");
  100758:	e3050578 	movw	r0, #21880	; 0x5578
  10075c:	e3400014 	movt	r0, #20
  100760:	eb00f81c 	bl	13e7d8 <puts>
        return 1;
  100764:	e3a03001 	mov	r3, #1
  100768:	ea000000 	b	100770 <setnonblocking+0x64>
    }
    return old_option;
  10076c:	e51b3008 	ldr	r3, [fp, #-8]
}
  100770:	e1a00003 	mov	r0, r3
  100774:	e24bd004 	sub	sp, fp, #4
  100778:	e8bd8800 	pop	{fp, pc}

0010077c <socketpair>:

int socketpair(int domain, int type, int protocol, int sv[2])
{
  10077c:	e92d4810 	push	{r4, fp, lr}
  100780:	e28db008 	add	fp, sp, #8
  100784:	e24ddf43 	sub	sp, sp, #268	; 0x10c
  100788:	e50b0100 	str	r0, [fp, #-256]	; 0xffffff00
  10078c:	e50b1104 	str	r1, [fp, #-260]	; 0xfffffefc
  100790:	e50b2108 	str	r2, [fp, #-264]	; 0xfffffef8
  100794:	e50b310c 	str	r3, [fp, #-268]	; 0xfffffef4
    int listenfd = -1, acceptfd = -1, clientfd = -1;
  100798:	e3e03000 	mvn	r3, #0
  10079c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  1007a0:	e3e03000 	mvn	r3, #0
  1007a4:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  1007a8:	e3e03000 	mvn	r3, #0
  1007ac:	e50b3010 	str	r3, [fp, #-16]
    /* for server, accept, client */
    struct sockaddr_in saddr, aaddr, caddr;
    socklen_t len = sizeof(struct sockaddr_in);
  1007b0:	e3a03010 	mov	r3, #16
  1007b4:	e50b3064 	str	r3, [fp, #-100]	; 0xffffff9c
    int on = 1;
  1007b8:	e3a03001 	mov	r3, #1
  1007bc:	e50b3068 	str	r3, [fp, #-104]	; 0xffffff98
    int fdopt;
    int rt_port;

    /* for select */
    int maxfdp = 0;
  1007c0:	e3a03000 	mov	r3, #0
  1007c4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    int rst;
    fd_set rfd;
    struct timeval timeout = {0, 1000};
  1007c8:	e3a02000 	mov	r2, #0
  1007cc:	e3a03000 	mov	r3, #0
  1007d0:	e14b2ffc 	strd	r2, [fp, #-252]	; 0xffffff04
  1007d4:	e3a03ffa 	mov	r3, #1000	; 0x3e8
  1007d8:	e50b30f4 	str	r3, [fp, #-244]	; 0xffffff0c

    /* server socket */
    if ((listenfd = socket(domain, type, protocol)) < 0)
  1007dc:	e51b2108 	ldr	r2, [fp, #-264]	; 0xfffffef8
  1007e0:	e51b1104 	ldr	r1, [fp, #-260]	; 0xfffffefc
  1007e4:	e51b0100 	ldr	r0, [fp, #-256]	; 0xffffff00
  1007e8:	eb00f68e 	bl	13e228 <socket>
  1007ec:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
  1007f0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1007f4:	e3530000 	cmp	r3, #0
  1007f8:	aa00000f 	bge	10083c <socketpair+0xc0>
    {
        printf("Create listenfd socket error: %s(errno: %d)\n", strerror(errno), errno);
  1007fc:	eb00e22f 	bl	1390c0 <__errno_location>
  100800:	e1a03000 	mov	r3, r0
  100804:	e5933000 	ldr	r3, [r3]
  100808:	e1a00003 	mov	r0, r3
  10080c:	eb00e24d 	bl	139148 <strerror>
  100810:	e1a04000 	mov	r4, r0
  100814:	eb00e229 	bl	1390c0 <__errno_location>
  100818:	e1a03000 	mov	r3, r0
  10081c:	e5933000 	ldr	r3, [r3]
  100820:	e1a02003 	mov	r2, r3
  100824:	e1a01004 	mov	r1, r4
  100828:	e3050590 	movw	r0, #21904	; 0x5590
  10082c:	e3400014 	movt	r0, #20
  100830:	eb00f7da 	bl	13e7a0 <printf>
        return -1;
  100834:	e3e03000 	mvn	r3, #0
  100838:	ea000117 	b	100c9c <socketpair+0x520>
    }
    /* non-blocking */
    setnonblocking(listenfd);
  10083c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  100840:	ebffffb1 	bl	10070c <setnonblocking>

    /* get random port: 5001~65001 */
    srand((unsigned)time(NULL));
  100844:	e3a00000 	mov	r0, #0
  100848:	eb0109b8 	bl	142f30 <time>
  10084c:	e1a02000 	mov	r2, r0
  100850:	e1a03001 	mov	r3, r1
  100854:	e1a03002 	mov	r3, r2
  100858:	e1a00003 	mov	r0, r3
  10085c:	eb00f6be 	bl	13e35c <srand>
    rt_port = rand() % 60000 + 5001;
  100860:	eb00f6c3 	bl	13e374 <rand>
  100864:	e1a02000 	mov	r2, r0
  100868:	e30b3273 	movw	r3, #45683	; 0xb273
  10086c:	e34435e7 	movt	r3, #17895	; 0x45e7
  100870:	e0c10392 	smull	r0, r1, r2, r3
  100874:	e1a01741 	asr	r1, r1, #14
  100878:	e1a03fc2 	asr	r3, r2, #31
  10087c:	e0413003 	sub	r3, r1, r3
  100880:	e30e1a60 	movw	r1, #60000	; 0xea60
  100884:	e0030391 	mul	r3, r1, r3
  100888:	e0423003 	sub	r3, r2, r3
  10088c:	e2833d4e 	add	r3, r3, #4992	; 0x1380
  100890:	e2833009 	add	r3, r3, #9
  100894:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8

    /* bind and listen */
    memset(&saddr, 0, sizeof(saddr));
  100898:	e24b3040 	sub	r3, fp, #64	; 0x40
  10089c:	e3a02010 	mov	r2, #16
  1008a0:	e3a01000 	mov	r1, #0
  1008a4:	e1a00003 	mov	r0, r3
  1008a8:	eb0102eb 	bl	14145c <memset>
    memset(&aaddr, 0, sizeof(aaddr));
  1008ac:	e24b3050 	sub	r3, fp, #80	; 0x50
  1008b0:	e3a02010 	mov	r2, #16
  1008b4:	e3a01000 	mov	r1, #0
  1008b8:	e1a00003 	mov	r0, r3
  1008bc:	eb0102e6 	bl	14145c <memset>
    saddr.sin_family = domain;
  1008c0:	e51b3100 	ldr	r3, [fp, #-256]	; 0xffffff00
  1008c4:	e6ff3073 	uxth	r3, r3
  1008c8:	e14b34b0 	strh	r3, [fp, #-64]	; 0xffffffc0
    saddr.sin_port = htons(rt_port);
  1008cc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1008d0:	e6ff3073 	uxth	r3, r3
  1008d4:	e1a00003 	mov	r0, r3
  1008d8:	eb00f620 	bl	13e160 <htons>
  1008dc:	e1a03000 	mov	r3, r0
  1008e0:	e14b33be 	strh	r3, [fp, #-62]	; 0xffffffc2
    saddr.sin_addr.s_addr = htonl(INADDR_ANY);
  1008e4:	e3a00000 	mov	r0, #0
  1008e8:	eb00f617 	bl	13e14c <htonl>
  1008ec:	e1a03000 	mov	r3, r0
  1008f0:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4

    if (setsockopt(listenfd, SOL_SOCKET, SO_REUSEADDR, (const char*)&on, sizeof(int)) < 0)
  1008f4:	e24b2068 	sub	r2, fp, #104	; 0x68
  1008f8:	e3a03004 	mov	r3, #4
  1008fc:	e58d3000 	str	r3, [sp]
  100900:	e1a03002 	mov	r3, r2
  100904:	e3a02002 	mov	r2, #2
  100908:	e3a01001 	mov	r1, #1
  10090c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  100910:	eb00f62b 	bl	13e1c4 <setsockopt>
  100914:	e1a03000 	mov	r3, r0
  100918:	e3530000 	cmp	r3, #0
  10091c:	aa000003 	bge	100930 <socketpair+0x1b4>
    {
        perror("Setsockopt reuseadd failed");
  100920:	e30505c0 	movw	r0, #21952	; 0x55c0
  100924:	e3400014 	movt	r0, #20
  100928:	eb00f753 	bl	13e67c <perror>
        goto __exit;
  10092c:	ea0000cf 	b	100c70 <socketpair+0x4f4>
    }

    if (bind(listenfd, (struct sockaddr*)&saddr, sizeof(saddr)) == -1)
  100930:	e24b3040 	sub	r3, fp, #64	; 0x40
  100934:	e3a02010 	mov	r2, #16
  100938:	e1a01003 	mov	r1, r3
  10093c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  100940:	eb00f5dc 	bl	13e0b8 <bind>
  100944:	e1a03000 	mov	r3, r0
  100948:	e3730001 	cmn	r3, #1
  10094c:	1a00000e 	bne	10098c <socketpair+0x210>
    {
        printf("Bind socket error: %s(errno: %d), fd=%d\n", strerror(errno), errno, listenfd);
  100950:	eb00e1da 	bl	1390c0 <__errno_location>
  100954:	e1a03000 	mov	r3, r0
  100958:	e5933000 	ldr	r3, [r3]
  10095c:	e1a00003 	mov	r0, r3
  100960:	eb00e1f8 	bl	139148 <strerror>
  100964:	e1a04000 	mov	r4, r0
  100968:	eb00e1d4 	bl	1390c0 <__errno_location>
  10096c:	e1a03000 	mov	r3, r0
  100970:	e5932000 	ldr	r2, [r3]
  100974:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  100978:	e1a01004 	mov	r1, r4
  10097c:	e30505dc 	movw	r0, #21980	; 0x55dc
  100980:	e3400014 	movt	r0, #20
  100984:	eb00f785 	bl	13e7a0 <printf>
        goto __exit;
  100988:	ea0000b8 	b	100c70 <socketpair+0x4f4>
    }

    if (listen(listenfd, 10) == -1)
  10098c:	e3a0100a 	mov	r1, #10
  100990:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  100994:	eb00f5f6 	bl	13e174 <listen>
  100998:	e1a03000 	mov	r3, r0
  10099c:	e3730001 	cmn	r3, #1
  1009a0:	1a00000e 	bne	1009e0 <socketpair+0x264>
    {
        printf("Listen socket error: %s(errno: %d)\n", strerror(errno), errno);
  1009a4:	eb00e1c5 	bl	1390c0 <__errno_location>
  1009a8:	e1a03000 	mov	r3, r0
  1009ac:	e5933000 	ldr	r3, [r3]
  1009b0:	e1a00003 	mov	r0, r3
  1009b4:	eb00e1e3 	bl	139148 <strerror>
  1009b8:	e1a04000 	mov	r4, r0
  1009bc:	eb00e1bf 	bl	1390c0 <__errno_location>
  1009c0:	e1a03000 	mov	r3, r0
  1009c4:	e5933000 	ldr	r3, [r3]
  1009c8:	e1a02003 	mov	r2, r3
  1009cc:	e1a01004 	mov	r1, r4
  1009d0:	e3050608 	movw	r0, #22024	; 0x5608
  1009d4:	e3400014 	movt	r0, #20
  1009d8:	eb00f770 	bl	13e7a0 <printf>
        goto __exit;
  1009dc:	ea0000a3 	b	100c70 <socketpair+0x4f4>
    }

    /* client socket */
    if ((clientfd = socket(domain, type, protocol)) < 0)
  1009e0:	e51b2108 	ldr	r2, [fp, #-264]	; 0xfffffef8
  1009e4:	e51b1104 	ldr	r1, [fp, #-260]	; 0xfffffefc
  1009e8:	e51b0100 	ldr	r0, [fp, #-256]	; 0xffffff00
  1009ec:	eb00f60d 	bl	13e228 <socket>
  1009f0:	e50b0010 	str	r0, [fp, #-16]
  1009f4:	e51b3010 	ldr	r3, [fp, #-16]
  1009f8:	e3530000 	cmp	r3, #0
  1009fc:	aa00000e 	bge	100a3c <socketpair+0x2c0>
    {
        printf("Create clientfd socket error: %s(errno: %d)\n", strerror(errno), errno);
  100a00:	eb00e1ae 	bl	1390c0 <__errno_location>
  100a04:	e1a03000 	mov	r3, r0
  100a08:	e5933000 	ldr	r3, [r3]
  100a0c:	e1a00003 	mov	r0, r3
  100a10:	eb00e1cc 	bl	139148 <strerror>
  100a14:	e1a04000 	mov	r4, r0
  100a18:	eb00e1a8 	bl	1390c0 <__errno_location>
  100a1c:	e1a03000 	mov	r3, r0
  100a20:	e5933000 	ldr	r3, [r3]
  100a24:	e1a02003 	mov	r2, r3
  100a28:	e1a01004 	mov	r1, r4
  100a2c:	e305062c 	movw	r0, #22060	; 0x562c
  100a30:	e3400014 	movt	r0, #20
  100a34:	eb00f759 	bl	13e7a0 <printf>
        goto __exit;
  100a38:	ea00008c 	b	100c70 <socketpair+0x4f4>
    }

    /* non-blocking */
    fdopt = setnonblocking(clientfd);
  100a3c:	e51b0010 	ldr	r0, [fp, #-16]
  100a40:	ebffff31 	bl	10070c <setnonblocking>
  100a44:	e50b002c 	str	r0, [fp, #-44]	; 0xffffffd4
    /* client connect */
    memset(&caddr, 0, sizeof(caddr));
  100a48:	e24b3060 	sub	r3, fp, #96	; 0x60
  100a4c:	e3a02010 	mov	r2, #16
  100a50:	e3a01000 	mov	r1, #0
  100a54:	e1a00003 	mov	r0, r3
  100a58:	eb01027f 	bl	14145c <memset>
    caddr.sin_family = domain;
  100a5c:	e51b3100 	ldr	r3, [fp, #-256]	; 0xffffff00
  100a60:	e6ff3073 	uxth	r3, r3
  100a64:	e14b36b0 	strh	r3, [fp, #-96]	; 0xffffffa0
    caddr.sin_port =htons(rt_port);
  100a68:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  100a6c:	e6ff3073 	uxth	r3, r3
  100a70:	e1a00003 	mov	r0, r3
  100a74:	eb00f5b9 	bl	13e160 <htons>
  100a78:	e1a03000 	mov	r3, r0
  100a7c:	e14b35be 	strh	r3, [fp, #-94]	; 0xffffffa2
    caddr.sin_addr.s_addr=htonl(INADDR_ANY);
  100a80:	e3a00000 	mov	r0, #0
  100a84:	eb00f5b0 	bl	13e14c <htonl>
  100a88:	e1a03000 	mov	r3, r0
  100a8c:	e50b305c 	str	r3, [fp, #-92]	; 0xffffffa4
    connect(clientfd, (struct sockaddr*)&caddr, sizeof(caddr));
  100a90:	e24b3060 	sub	r3, fp, #96	; 0x60
  100a94:	e3a02010 	mov	r2, #16
  100a98:	e1a01003 	mov	r1, r3
  100a9c:	e51b0010 	ldr	r0, [fp, #-16]
  100aa0:	eb00f59a 	bl	13e110 <connect>

    /* do select */
    FD_ZERO(&rfd);
  100aa4:	e24b30e8 	sub	r3, fp, #232	; 0xe8
  100aa8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  100aac:	e3a03020 	mov	r3, #32
  100ab0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  100ab4:	ea000007 	b	100ad8 <socketpair+0x35c>
  100ab8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  100abc:	e2832004 	add	r2, r3, #4
  100ac0:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  100ac4:	e3a02000 	mov	r2, #0
  100ac8:	e5832000 	str	r2, [r3]
  100acc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  100ad0:	e2433001 	sub	r3, r3, #1
  100ad4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  100ad8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  100adc:	e3530000 	cmp	r3, #0
  100ae0:	1afffff4 	bne	100ab8 <socketpair+0x33c>
    FD_SET(listenfd, &rfd);
  100ae4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  100ae8:	e1a022a3 	lsr	r2, r3, #5
  100aec:	e1a03102 	lsl	r3, r2, #2
  100af0:	e24b100c 	sub	r1, fp, #12
  100af4:	e0813003 	add	r3, r1, r3
  100af8:	e51310dc 	ldr	r1, [r3, #-220]	; 0xffffff24
  100afc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  100b00:	e203301f 	and	r3, r3, #31
  100b04:	e3a00001 	mov	r0, #1
  100b08:	e1a03310 	lsl	r3, r0, r3
  100b0c:	e1811003 	orr	r1, r1, r3
  100b10:	e1a03102 	lsl	r3, r2, #2
  100b14:	e24b200c 	sub	r2, fp, #12
  100b18:	e0823003 	add	r3, r2, r3
  100b1c:	e50310dc 	str	r1, [r3, #-220]	; 0xffffff24
    FD_SET(clientfd, &rfd);
  100b20:	e51b3010 	ldr	r3, [fp, #-16]
  100b24:	e1a022a3 	lsr	r2, r3, #5
  100b28:	e1a03102 	lsl	r3, r2, #2
  100b2c:	e24b100c 	sub	r1, fp, #12
  100b30:	e0813003 	add	r3, r1, r3
  100b34:	e51310dc 	ldr	r1, [r3, #-220]	; 0xffffff24
  100b38:	e51b3010 	ldr	r3, [fp, #-16]
  100b3c:	e203301f 	and	r3, r3, #31
  100b40:	e3a00001 	mov	r0, #1
  100b44:	e1a03310 	lsl	r3, r0, r3
  100b48:	e1811003 	orr	r1, r1, r3
  100b4c:	e1a03102 	lsl	r3, r2, #2
  100b50:	e24b200c 	sub	r2, fp, #12
  100b54:	e0823003 	add	r3, r2, r3
  100b58:	e50310dc 	str	r1, [r3, #-220]	; 0xffffff24
    maxfdp = listenfd > clientfd ? listenfd+1 : clientfd+1;
  100b5c:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  100b60:	e51b3010 	ldr	r3, [fp, #-16]
  100b64:	e1520003 	cmp	r2, r3
  100b68:	da000002 	ble	100b78 <socketpair+0x3fc>
  100b6c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  100b70:	e2833001 	add	r3, r3, #1
  100b74:	ea000001 	b	100b80 <socketpair+0x404>
  100b78:	e51b3010 	ldr	r3, [fp, #-16]
  100b7c:	e2833001 	add	r3, r3, #1
  100b80:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    rst = select(maxfdp, &rfd, NULL, NULL, &timeout);
  100b84:	e24b10e8 	sub	r1, fp, #232	; 0xe8
  100b88:	e24b30fc 	sub	r3, fp, #252	; 0xfc
  100b8c:	e58d3000 	str	r3, [sp]
  100b90:	e3a03000 	mov	r3, #0
  100b94:	e3a02000 	mov	r2, #0
  100b98:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  100b9c:	eb00f606 	bl	13e3bc <select>
  100ba0:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
    switch(rst)
  100ba4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  100ba8:	e3730001 	cmn	r3, #1
  100bac:	0a000002 	beq	100bbc <socketpair+0x440>
  100bb0:	e3530000 	cmp	r3, #0
  100bb4:	0a000004 	beq	100bcc <socketpair+0x450>
  100bb8:	ea000007 	b	100bdc <socketpair+0x460>
    {
    case -1:
        perror("select error");
  100bbc:	e305065c 	movw	r0, #22108	; 0x565c
  100bc0:	e3400014 	movt	r0, #20
  100bc4:	eb00f6ac 	bl	13e67c <perror>
        goto __exit;
  100bc8:	ea000028 	b	100c70 <socketpair+0x4f4>
        break;
    case 0:
        perror("continue");
  100bcc:	e305066c 	movw	r0, #22124	; 0x566c
  100bd0:	e3400014 	movt	r0, #20
  100bd4:	eb00f6a8 	bl	13e67c <perror>
        break;
  100bd8:	ea000024 	b	100c70 <socketpair+0x4f4>
    default:
        if (FD_ISSET(listenfd, &rfd))
  100bdc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  100be0:	e1a032a3 	lsr	r3, r3, #5
  100be4:	e1a03103 	lsl	r3, r3, #2
  100be8:	e24b200c 	sub	r2, fp, #12
  100bec:	e0823003 	add	r3, r2, r3
  100bf0:	e51320dc 	ldr	r2, [r3, #-220]	; 0xffffff24
  100bf4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  100bf8:	e203301f 	and	r3, r3, #31
  100bfc:	e1a03332 	lsr	r3, r2, r3
  100c00:	e2033001 	and	r3, r3, #1
  100c04:	e3530000 	cmp	r3, #0
  100c08:	0a000017 	beq	100c6c <socketpair+0x4f0>
        {
            if ((acceptfd = accept(listenfd, (struct sockaddr*)&caddr, &len)) > 0)
  100c0c:	e24b2064 	sub	r2, fp, #100	; 0x64
  100c10:	e24b3060 	sub	r3, fp, #96	; 0x60
  100c14:	e1a01003 	mov	r1, r3
  100c18:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  100c1c:	eb00f516 	bl	13e07c <accept>
  100c20:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  100c24:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  100c28:	e3530000 	cmp	r3, #0
  100c2c:	da00000c 	ble	100c64 <socketpair+0x4e8>
            {
                close(listenfd);
  100c30:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  100c34:	eb0108c9 	bl	142f60 <close>
                /* set old optional back */
                fcntl(clientfd, F_SETFL, fdopt);
  100c38:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  100c3c:	e3a01004 	mov	r1, #4
  100c40:	e51b0010 	ldr	r0, [fp, #-16]
  100c44:	eb00e16c 	bl	1391fc <fcntl>
                sv[0] = clientfd;
  100c48:	e51b310c 	ldr	r3, [fp, #-268]	; 0xfffffef4
  100c4c:	e51b2010 	ldr	r2, [fp, #-16]
  100c50:	e5832000 	str	r2, [r3]
                sv[1] = acceptfd;
  100c54:	e51b310c 	ldr	r3, [fp, #-268]	; 0xfffffef4
  100c58:	e2833004 	add	r3, r3, #4
  100c5c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  100c60:	e5832000 	str	r2, [r3]
            }

            return 0;
  100c64:	e3a03000 	mov	r3, #0
  100c68:	ea00000b 	b	100c9c <socketpair+0x520>
        }
    }

__exit:
  100c6c:	e320f000 	nop	{0}
    if (listenfd >= 0) close(listenfd);
  100c70:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  100c74:	e3530000 	cmp	r3, #0
  100c78:	ba000001 	blt	100c84 <socketpair+0x508>
  100c7c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  100c80:	eb0108b6 	bl	142f60 <close>
    if (clientfd >= 0) close(clientfd);
  100c84:	e51b3010 	ldr	r3, [fp, #-16]
  100c88:	e3530000 	cmp	r3, #0
  100c8c:	ba000001 	blt	100c98 <socketpair+0x51c>
  100c90:	e51b0010 	ldr	r0, [fp, #-16]
  100c94:	eb0108b1 	bl	142f60 <close>

    return -1;
  100c98:	e3e03000 	mvn	r3, #0
}
  100c9c:	e1a00003 	mov	r0, r3
  100ca0:	e24bd008 	sub	sp, fp, #8
  100ca4:	e8bd8810 	pop	{r4, fp, pc}

00100ca8 <rt_mutex_create>:
            return RT_EIO;\
        }\
    } while (0)

rt_mutex_t rt_mutex_create(const char *name, rt_uint8_t flag)
{
  100ca8:	e92d4800 	push	{fp, lr}
  100cac:	e28db004 	add	fp, sp, #4
  100cb0:	e24dd010 	sub	sp, sp, #16
  100cb4:	e50b0010 	str	r0, [fp, #-16]
  100cb8:	e1a03001 	mov	r3, r1
  100cbc:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    RT_USER_IPC_CREATE(RT_Object_Class_Mutex, _NRSYS_mutex_create, name, flag);
  100cc0:	e3a00008 	mov	r0, #8
  100cc4:	eb00f21b 	bl	13d538 <malloc>
  100cc8:	e1a03000 	mov	r3, r0
  100ccc:	e50b3008 	str	r3, [fp, #-8]
  100cd0:	e51b3008 	ldr	r3, [fp, #-8]
  100cd4:	e3530000 	cmp	r3, #0
  100cd8:	1a000001 	bne	100ce4 <rt_mutex_create+0x3c>
  100cdc:	e3a03000 	mov	r3, #0
  100ce0:	ea000015 	b	100d3c <rt_mutex_create+0x94>
  100ce4:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  100ce8:	e1a02003 	mov	r2, r3
  100cec:	e51b1010 	ldr	r1, [fp, #-16]
  100cf0:	e3a00016 	mov	r0, #22
  100cf4:	eb00ee52 	bl	13c644 <syscall>
  100cf8:	e1a03000 	mov	r3, r0
  100cfc:	e1a02003 	mov	r2, r3
  100d00:	e51b3008 	ldr	r3, [fp, #-8]
  100d04:	e5832004 	str	r2, [r3, #4]
  100d08:	e51b3008 	ldr	r3, [fp, #-8]
  100d0c:	e5933004 	ldr	r3, [r3, #4]
  100d10:	e3530000 	cmp	r3, #0
  100d14:	0a000003 	beq	100d28 <rt_mutex_create+0x80>
  100d18:	e51b3008 	ldr	r3, [fp, #-8]
  100d1c:	e3a02003 	mov	r2, #3
  100d20:	e5832000 	str	r2, [r3]
  100d24:	ea000003 	b	100d38 <rt_mutex_create+0x90>
  100d28:	e51b0008 	ldr	r0, [fp, #-8]
  100d2c:	eb00f3bd 	bl	13dc28 <free>
  100d30:	e3a03000 	mov	r3, #0
  100d34:	e50b3008 	str	r3, [fp, #-8]
  100d38:	e51b3008 	ldr	r3, [fp, #-8]
}
  100d3c:	e1a00003 	mov	r0, r3
  100d40:	e24bd004 	sub	sp, fp, #4
  100d44:	e8bd8800 	pop	{fp, pc}

00100d48 <rt_mutex_init>:

rt_err_t rt_mutex_init(rt_mutex_t mutex, const char *name, rt_uint8_t flag)
{
  100d48:	e92d4800 	push	{fp, lr}
  100d4c:	e28db004 	add	fp, sp, #4
  100d50:	e24dd010 	sub	sp, sp, #16
  100d54:	e50b0008 	str	r0, [fp, #-8]
  100d58:	e50b100c 	str	r1, [fp, #-12]
  100d5c:	e1a03002 	mov	r3, r2
  100d60:	e54b300d 	strb	r3, [fp, #-13]
    RT_USER_IPC_INIT(mutex, RT_Object_Class_Mutex, _NRSYS_mutex_create, name, flag);
  100d64:	e51b3008 	ldr	r3, [fp, #-8]
  100d68:	e3530000 	cmp	r3, #0
  100d6c:	1a000001 	bne	100d78 <rt_mutex_init+0x30>
  100d70:	e3a03008 	mov	r3, #8
  100d74:	ea000012 	b	100dc4 <rt_mutex_init+0x7c>
  100d78:	e55b300d 	ldrb	r3, [fp, #-13]
  100d7c:	e1a02003 	mov	r2, r3
  100d80:	e51b100c 	ldr	r1, [fp, #-12]
  100d84:	e3a00016 	mov	r0, #22
  100d88:	eb00ee2d 	bl	13c644 <syscall>
  100d8c:	e1a03000 	mov	r3, r0
  100d90:	e1a02003 	mov	r2, r3
  100d94:	e51b3008 	ldr	r3, [fp, #-8]
  100d98:	e5832004 	str	r2, [r3, #4]
  100d9c:	e51b3008 	ldr	r3, [fp, #-8]
  100da0:	e5933004 	ldr	r3, [r3, #4]
  100da4:	e3530000 	cmp	r3, #0
  100da8:	0a000004 	beq	100dc0 <rt_mutex_init+0x78>
  100dac:	e51b3008 	ldr	r3, [fp, #-8]
  100db0:	e3a02003 	mov	r2, #3
  100db4:	e5832000 	str	r2, [r3]
  100db8:	e3a03000 	mov	r3, #0
  100dbc:	ea000000 	b	100dc4 <rt_mutex_init+0x7c>
  100dc0:	e3a03001 	mov	r3, #1
}
  100dc4:	e1a00003 	mov	r0, r3
  100dc8:	e24bd004 	sub	sp, fp, #4
  100dcc:	e8bd8800 	pop	{fp, pc}

00100dd0 <rt_mutex_delete>:

rt_err_t rt_mutex_delete(rt_mutex_t mutex)
{
  100dd0:	e92d4800 	push	{fp, lr}
  100dd4:	e28db004 	add	fp, sp, #4
  100dd8:	e24dd010 	sub	sp, sp, #16
  100ddc:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DELETE(mutex, RT_Object_Class_Mutex, _NRSYS_mutex_delete);
  100de0:	e51b3010 	ldr	r3, [fp, #-16]
  100de4:	e3530000 	cmp	r3, #0
  100de8:	0a000003 	beq	100dfc <rt_mutex_delete+0x2c>
  100dec:	e51b3010 	ldr	r3, [fp, #-16]
  100df0:	e5933004 	ldr	r3, [r3, #4]
  100df4:	e3530000 	cmp	r3, #0
  100df8:	1a000001 	bne	100e04 <rt_mutex_delete+0x34>
  100dfc:	e3a03008 	mov	r3, #8
  100e00:	ea000013 	b	100e54 <rt_mutex_delete+0x84>
  100e04:	e51b3010 	ldr	r3, [fp, #-16]
  100e08:	e5933000 	ldr	r3, [r3]
  100e0c:	e3530003 	cmp	r3, #3
  100e10:	0a000001 	beq	100e1c <rt_mutex_delete+0x4c>
  100e14:	e3a03008 	mov	r3, #8
  100e18:	ea00000d 	b	100e54 <rt_mutex_delete+0x84>
  100e1c:	e51b3010 	ldr	r3, [fp, #-16]
  100e20:	e5933004 	ldr	r3, [r3, #4]
  100e24:	e1a01003 	mov	r1, r3
  100e28:	e3a00017 	mov	r0, #23
  100e2c:	eb00ee04 	bl	13c644 <syscall>
  100e30:	e50b0008 	str	r0, [fp, #-8]
  100e34:	e51b3008 	ldr	r3, [fp, #-8]
  100e38:	e3530000 	cmp	r3, #0
  100e3c:	0a000001 	beq	100e48 <rt_mutex_delete+0x78>
  100e40:	e51b3008 	ldr	r3, [fp, #-8]
  100e44:	ea000002 	b	100e54 <rt_mutex_delete+0x84>
  100e48:	e51b0010 	ldr	r0, [fp, #-16]
  100e4c:	eb00f375 	bl	13dc28 <free>
  100e50:	e3a03000 	mov	r3, #0
}
  100e54:	e1a00003 	mov	r0, r3
  100e58:	e24bd004 	sub	sp, fp, #4
  100e5c:	e8bd8800 	pop	{fp, pc}

00100e60 <rt_mutex_detach>:

rt_err_t rt_mutex_detach(rt_mutex_t mutex)
{
  100e60:	e92d4800 	push	{fp, lr}
  100e64:	e28db004 	add	fp, sp, #4
  100e68:	e24dd010 	sub	sp, sp, #16
  100e6c:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DETACH(mutex, RT_Object_Class_Mutex, _NRSYS_mutex_delete);
  100e70:	e51b3010 	ldr	r3, [fp, #-16]
  100e74:	e3530000 	cmp	r3, #0
  100e78:	0a000003 	beq	100e8c <rt_mutex_detach+0x2c>
  100e7c:	e51b3010 	ldr	r3, [fp, #-16]
  100e80:	e5933004 	ldr	r3, [r3, #4]
  100e84:	e3530000 	cmp	r3, #0
  100e88:	1a000001 	bne	100e94 <rt_mutex_detach+0x34>
  100e8c:	e3a03008 	mov	r3, #8
  100e90:	ea000017 	b	100ef4 <rt_mutex_detach+0x94>
  100e94:	e51b3010 	ldr	r3, [fp, #-16]
  100e98:	e5933000 	ldr	r3, [r3]
  100e9c:	e3530003 	cmp	r3, #3
  100ea0:	0a000001 	beq	100eac <rt_mutex_detach+0x4c>
  100ea4:	e3a03008 	mov	r3, #8
  100ea8:	ea000011 	b	100ef4 <rt_mutex_detach+0x94>
  100eac:	e51b3010 	ldr	r3, [fp, #-16]
  100eb0:	e5933004 	ldr	r3, [r3, #4]
  100eb4:	e1a01003 	mov	r1, r3
  100eb8:	e3a00017 	mov	r0, #23
  100ebc:	eb00ede0 	bl	13c644 <syscall>
  100ec0:	e50b0008 	str	r0, [fp, #-8]
  100ec4:	e51b3008 	ldr	r3, [fp, #-8]
  100ec8:	e3530000 	cmp	r3, #0
  100ecc:	0a000001 	beq	100ed8 <rt_mutex_detach+0x78>
  100ed0:	e51b3008 	ldr	r3, [fp, #-8]
  100ed4:	ea000006 	b	100ef4 <rt_mutex_detach+0x94>
  100ed8:	e51b3010 	ldr	r3, [fp, #-16]
  100edc:	e3a02000 	mov	r2, #0
  100ee0:	e5832000 	str	r2, [r3]
  100ee4:	e51b3010 	ldr	r3, [fp, #-16]
  100ee8:	e3a02000 	mov	r2, #0
  100eec:	e5832004 	str	r2, [r3, #4]
  100ef0:	e3a03000 	mov	r3, #0
}
  100ef4:	e1a00003 	mov	r0, r3
  100ef8:	e24bd004 	sub	sp, fp, #4
  100efc:	e8bd8800 	pop	{fp, pc}

00100f00 <rt_mutex_take>:

rt_err_t rt_mutex_take(rt_mutex_t mutex, rt_int32_t time)
{
  100f00:	e92d4800 	push	{fp, lr}
  100f04:	e28db004 	add	fp, sp, #4
  100f08:	e24dd008 	sub	sp, sp, #8
  100f0c:	e50b0008 	str	r0, [fp, #-8]
  100f10:	e50b100c 	str	r1, [fp, #-12]
    RT_USER_IPC_CHECK(mutex, RT_Object_Class_Mutex);
  100f14:	e51b3008 	ldr	r3, [fp, #-8]
  100f18:	e3530000 	cmp	r3, #0
  100f1c:	0a000003 	beq	100f30 <rt_mutex_take+0x30>
  100f20:	e51b3008 	ldr	r3, [fp, #-8]
  100f24:	e5933004 	ldr	r3, [r3, #4]
  100f28:	e3530000 	cmp	r3, #0
  100f2c:	1a000001 	bne	100f38 <rt_mutex_take+0x38>
  100f30:	e3a03008 	mov	r3, #8
  100f34:	ea00000c 	b	100f6c <rt_mutex_take+0x6c>
  100f38:	e51b3008 	ldr	r3, [fp, #-8]
  100f3c:	e5933000 	ldr	r3, [r3]
  100f40:	e3530003 	cmp	r3, #3
  100f44:	0a000001 	beq	100f50 <rt_mutex_take+0x50>
  100f48:	e3a03008 	mov	r3, #8
  100f4c:	ea000006 	b	100f6c <rt_mutex_take+0x6c>
    return syscall(_NRSYS_mutex_take, mutex->data, time);
  100f50:	e51b3008 	ldr	r3, [fp, #-8]
  100f54:	e5933004 	ldr	r3, [r3, #4]
  100f58:	e51b200c 	ldr	r2, [fp, #-12]
  100f5c:	e1a01003 	mov	r1, r3
  100f60:	e3a00018 	mov	r0, #24
  100f64:	eb00edb6 	bl	13c644 <syscall>
  100f68:	e1a03000 	mov	r3, r0
}
  100f6c:	e1a00003 	mov	r0, r3
  100f70:	e24bd004 	sub	sp, fp, #4
  100f74:	e8bd8800 	pop	{fp, pc}

00100f78 <rt_mutex_release>:

rt_err_t rt_mutex_release(rt_mutex_t mutex)
{
  100f78:	e92d4800 	push	{fp, lr}
  100f7c:	e28db004 	add	fp, sp, #4
  100f80:	e24dd008 	sub	sp, sp, #8
  100f84:	e50b0008 	str	r0, [fp, #-8]
    RT_USER_IPC_CHECK(mutex, RT_Object_Class_Mutex);
  100f88:	e51b3008 	ldr	r3, [fp, #-8]
  100f8c:	e3530000 	cmp	r3, #0
  100f90:	0a000003 	beq	100fa4 <rt_mutex_release+0x2c>
  100f94:	e51b3008 	ldr	r3, [fp, #-8]
  100f98:	e5933004 	ldr	r3, [r3, #4]
  100f9c:	e3530000 	cmp	r3, #0
  100fa0:	1a000001 	bne	100fac <rt_mutex_release+0x34>
  100fa4:	e3a03008 	mov	r3, #8
  100fa8:	ea00000b 	b	100fdc <rt_mutex_release+0x64>
  100fac:	e51b3008 	ldr	r3, [fp, #-8]
  100fb0:	e5933000 	ldr	r3, [r3]
  100fb4:	e3530003 	cmp	r3, #3
  100fb8:	0a000001 	beq	100fc4 <rt_mutex_release+0x4c>
  100fbc:	e3a03008 	mov	r3, #8
  100fc0:	ea000005 	b	100fdc <rt_mutex_release+0x64>
    return syscall(_NRSYS_mutex_release, mutex->data);
  100fc4:	e51b3008 	ldr	r3, [fp, #-8]
  100fc8:	e5933004 	ldr	r3, [r3, #4]
  100fcc:	e1a01003 	mov	r1, r3
  100fd0:	e3a00019 	mov	r0, #25
  100fd4:	eb00ed9a 	bl	13c644 <syscall>
  100fd8:	e1a03000 	mov	r3, r0
}
  100fdc:	e1a00003 	mov	r0, r3
  100fe0:	e24bd004 	sub	sp, fp, #4
  100fe4:	e8bd8800 	pop	{fp, pc}

00100fe8 <rt_sem_create>:

rt_sem_t rt_sem_create(const char *name, rt_uint32_t value, rt_uint8_t flag)
{
  100fe8:	e92d4800 	push	{fp, lr}
  100fec:	e28db004 	add	fp, sp, #4
  100ff0:	e24dd018 	sub	sp, sp, #24
  100ff4:	e50b0010 	str	r0, [fp, #-16]
  100ff8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  100ffc:	e1a03002 	mov	r3, r2
  101000:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
    RT_USER_IPC_CREATE(RT_Object_Class_Semaphore, _NRSYS_sem_create, name, value, flag);
  101004:	e3a00008 	mov	r0, #8
  101008:	eb00f14a 	bl	13d538 <malloc>
  10100c:	e1a03000 	mov	r3, r0
  101010:	e50b3008 	str	r3, [fp, #-8]
  101014:	e51b3008 	ldr	r3, [fp, #-8]
  101018:	e3530000 	cmp	r3, #0
  10101c:	1a000001 	bne	101028 <rt_sem_create+0x40>
  101020:	e3a03000 	mov	r3, #0
  101024:	ea000015 	b	101080 <rt_sem_create+0x98>
  101028:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  10102c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  101030:	e51b1010 	ldr	r1, [fp, #-16]
  101034:	e3a00012 	mov	r0, #18
  101038:	eb00ed81 	bl	13c644 <syscall>
  10103c:	e1a03000 	mov	r3, r0
  101040:	e1a02003 	mov	r2, r3
  101044:	e51b3008 	ldr	r3, [fp, #-8]
  101048:	e5832004 	str	r2, [r3, #4]
  10104c:	e51b3008 	ldr	r3, [fp, #-8]
  101050:	e5933004 	ldr	r3, [r3, #4]
  101054:	e3530000 	cmp	r3, #0
  101058:	0a000003 	beq	10106c <rt_sem_create+0x84>
  10105c:	e51b3008 	ldr	r3, [fp, #-8]
  101060:	e3a02002 	mov	r2, #2
  101064:	e5832000 	str	r2, [r3]
  101068:	ea000003 	b	10107c <rt_sem_create+0x94>
  10106c:	e51b0008 	ldr	r0, [fp, #-8]
  101070:	eb00f2ec 	bl	13dc28 <free>
  101074:	e3a03000 	mov	r3, #0
  101078:	e50b3008 	str	r3, [fp, #-8]
  10107c:	e51b3008 	ldr	r3, [fp, #-8]
}
  101080:	e1a00003 	mov	r0, r3
  101084:	e24bd004 	sub	sp, fp, #4
  101088:	e8bd8800 	pop	{fp, pc}

0010108c <rt_sem_init>:

rt_err_t rt_sem_init(rt_sem_t sem,
                     const char *name,
                     rt_uint32_t value,
                     rt_uint8_t  flag)
{
  10108c:	e92d4800 	push	{fp, lr}
  101090:	e28db004 	add	fp, sp, #4
  101094:	e24dd010 	sub	sp, sp, #16
  101098:	e50b0008 	str	r0, [fp, #-8]
  10109c:	e50b100c 	str	r1, [fp, #-12]
  1010a0:	e50b2010 	str	r2, [fp, #-16]
  1010a4:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    RT_USER_IPC_INIT(sem, RT_Object_Class_Semaphore, _NRSYS_sem_create, name, value, flag);
  1010a8:	e51b3008 	ldr	r3, [fp, #-8]
  1010ac:	e3530000 	cmp	r3, #0
  1010b0:	1a000001 	bne	1010bc <rt_sem_init+0x30>
  1010b4:	e3a03008 	mov	r3, #8
  1010b8:	ea000012 	b	101108 <rt_sem_init+0x7c>
  1010bc:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  1010c0:	e51b2010 	ldr	r2, [fp, #-16]
  1010c4:	e51b100c 	ldr	r1, [fp, #-12]
  1010c8:	e3a00012 	mov	r0, #18
  1010cc:	eb00ed5c 	bl	13c644 <syscall>
  1010d0:	e1a03000 	mov	r3, r0
  1010d4:	e1a02003 	mov	r2, r3
  1010d8:	e51b3008 	ldr	r3, [fp, #-8]
  1010dc:	e5832004 	str	r2, [r3, #4]
  1010e0:	e51b3008 	ldr	r3, [fp, #-8]
  1010e4:	e5933004 	ldr	r3, [r3, #4]
  1010e8:	e3530000 	cmp	r3, #0
  1010ec:	0a000004 	beq	101104 <rt_sem_init+0x78>
  1010f0:	e51b3008 	ldr	r3, [fp, #-8]
  1010f4:	e3a02002 	mov	r2, #2
  1010f8:	e5832000 	str	r2, [r3]
  1010fc:	e3a03000 	mov	r3, #0
  101100:	ea000000 	b	101108 <rt_sem_init+0x7c>
  101104:	e3a03001 	mov	r3, #1
}
  101108:	e1a00003 	mov	r0, r3
  10110c:	e24bd004 	sub	sp, fp, #4
  101110:	e8bd8800 	pop	{fp, pc}

00101114 <rt_sem_delete>:

rt_err_t rt_sem_delete(rt_sem_t sem)
{
  101114:	e92d4800 	push	{fp, lr}
  101118:	e28db004 	add	fp, sp, #4
  10111c:	e24dd010 	sub	sp, sp, #16
  101120:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DELETE(sem, RT_Object_Class_Semaphore, _NRSYS_sem_delete);
  101124:	e51b3010 	ldr	r3, [fp, #-16]
  101128:	e3530000 	cmp	r3, #0
  10112c:	0a000003 	beq	101140 <rt_sem_delete+0x2c>
  101130:	e51b3010 	ldr	r3, [fp, #-16]
  101134:	e5933004 	ldr	r3, [r3, #4]
  101138:	e3530000 	cmp	r3, #0
  10113c:	1a000001 	bne	101148 <rt_sem_delete+0x34>
  101140:	e3a03008 	mov	r3, #8
  101144:	ea000013 	b	101198 <rt_sem_delete+0x84>
  101148:	e51b3010 	ldr	r3, [fp, #-16]
  10114c:	e5933000 	ldr	r3, [r3]
  101150:	e3530002 	cmp	r3, #2
  101154:	0a000001 	beq	101160 <rt_sem_delete+0x4c>
  101158:	e3a03008 	mov	r3, #8
  10115c:	ea00000d 	b	101198 <rt_sem_delete+0x84>
  101160:	e51b3010 	ldr	r3, [fp, #-16]
  101164:	e5933004 	ldr	r3, [r3, #4]
  101168:	e1a01003 	mov	r1, r3
  10116c:	e3a00013 	mov	r0, #19
  101170:	eb00ed33 	bl	13c644 <syscall>
  101174:	e50b0008 	str	r0, [fp, #-8]
  101178:	e51b3008 	ldr	r3, [fp, #-8]
  10117c:	e3530000 	cmp	r3, #0
  101180:	0a000001 	beq	10118c <rt_sem_delete+0x78>
  101184:	e51b3008 	ldr	r3, [fp, #-8]
  101188:	ea000002 	b	101198 <rt_sem_delete+0x84>
  10118c:	e51b0010 	ldr	r0, [fp, #-16]
  101190:	eb00f2a4 	bl	13dc28 <free>
  101194:	e3a03000 	mov	r3, #0
}
  101198:	e1a00003 	mov	r0, r3
  10119c:	e24bd004 	sub	sp, fp, #4
  1011a0:	e8bd8800 	pop	{fp, pc}

001011a4 <rt_sem_detach>:

rt_err_t rt_sem_detach(rt_sem_t sem)
{
  1011a4:	e92d4800 	push	{fp, lr}
  1011a8:	e28db004 	add	fp, sp, #4
  1011ac:	e24dd010 	sub	sp, sp, #16
  1011b0:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DETACH(sem, RT_Object_Class_Semaphore, _NRSYS_sem_delete);
  1011b4:	e51b3010 	ldr	r3, [fp, #-16]
  1011b8:	e3530000 	cmp	r3, #0
  1011bc:	0a000003 	beq	1011d0 <rt_sem_detach+0x2c>
  1011c0:	e51b3010 	ldr	r3, [fp, #-16]
  1011c4:	e5933004 	ldr	r3, [r3, #4]
  1011c8:	e3530000 	cmp	r3, #0
  1011cc:	1a000001 	bne	1011d8 <rt_sem_detach+0x34>
  1011d0:	e3a03008 	mov	r3, #8
  1011d4:	ea000017 	b	101238 <rt_sem_detach+0x94>
  1011d8:	e51b3010 	ldr	r3, [fp, #-16]
  1011dc:	e5933000 	ldr	r3, [r3]
  1011e0:	e3530002 	cmp	r3, #2
  1011e4:	0a000001 	beq	1011f0 <rt_sem_detach+0x4c>
  1011e8:	e3a03008 	mov	r3, #8
  1011ec:	ea000011 	b	101238 <rt_sem_detach+0x94>
  1011f0:	e51b3010 	ldr	r3, [fp, #-16]
  1011f4:	e5933004 	ldr	r3, [r3, #4]
  1011f8:	e1a01003 	mov	r1, r3
  1011fc:	e3a00013 	mov	r0, #19
  101200:	eb00ed0f 	bl	13c644 <syscall>
  101204:	e50b0008 	str	r0, [fp, #-8]
  101208:	e51b3008 	ldr	r3, [fp, #-8]
  10120c:	e3530000 	cmp	r3, #0
  101210:	0a000001 	beq	10121c <rt_sem_detach+0x78>
  101214:	e51b3008 	ldr	r3, [fp, #-8]
  101218:	ea000006 	b	101238 <rt_sem_detach+0x94>
  10121c:	e51b3010 	ldr	r3, [fp, #-16]
  101220:	e3a02000 	mov	r2, #0
  101224:	e5832000 	str	r2, [r3]
  101228:	e51b3010 	ldr	r3, [fp, #-16]
  10122c:	e3a02000 	mov	r2, #0
  101230:	e5832004 	str	r2, [r3, #4]
  101234:	e3a03000 	mov	r3, #0
}
  101238:	e1a00003 	mov	r0, r3
  10123c:	e24bd004 	sub	sp, fp, #4
  101240:	e8bd8800 	pop	{fp, pc}

00101244 <rt_sem_release>:

rt_err_t rt_sem_release(rt_sem_t sem)
{
  101244:	e92d4800 	push	{fp, lr}
  101248:	e28db004 	add	fp, sp, #4
  10124c:	e24dd008 	sub	sp, sp, #8
  101250:	e50b0008 	str	r0, [fp, #-8]
    RT_USER_IPC_CHECK(sem, RT_Object_Class_Semaphore);
  101254:	e51b3008 	ldr	r3, [fp, #-8]
  101258:	e3530000 	cmp	r3, #0
  10125c:	0a000003 	beq	101270 <rt_sem_release+0x2c>
  101260:	e51b3008 	ldr	r3, [fp, #-8]
  101264:	e5933004 	ldr	r3, [r3, #4]
  101268:	e3530000 	cmp	r3, #0
  10126c:	1a000001 	bne	101278 <rt_sem_release+0x34>
  101270:	e3a03008 	mov	r3, #8
  101274:	ea00000b 	b	1012a8 <rt_sem_release+0x64>
  101278:	e51b3008 	ldr	r3, [fp, #-8]
  10127c:	e5933000 	ldr	r3, [r3]
  101280:	e3530002 	cmp	r3, #2
  101284:	0a000001 	beq	101290 <rt_sem_release+0x4c>
  101288:	e3a03008 	mov	r3, #8
  10128c:	ea000005 	b	1012a8 <rt_sem_release+0x64>
    return syscall(_NRSYS_sem_release, sem->data);
  101290:	e51b3008 	ldr	r3, [fp, #-8]
  101294:	e5933004 	ldr	r3, [r3, #4]
  101298:	e1a01003 	mov	r1, r3
  10129c:	e3a00015 	mov	r0, #21
  1012a0:	eb00ece7 	bl	13c644 <syscall>
  1012a4:	e1a03000 	mov	r3, r0
}
  1012a8:	e1a00003 	mov	r0, r3
  1012ac:	e24bd004 	sub	sp, fp, #4
  1012b0:	e8bd8800 	pop	{fp, pc}

001012b4 <rt_sem_take>:

rt_err_t rt_sem_take(rt_sem_t sem, rt_int32_t time)
{
  1012b4:	e92d4800 	push	{fp, lr}
  1012b8:	e28db004 	add	fp, sp, #4
  1012bc:	e24dd008 	sub	sp, sp, #8
  1012c0:	e50b0008 	str	r0, [fp, #-8]
  1012c4:	e50b100c 	str	r1, [fp, #-12]
    RT_USER_IPC_CHECK(sem, RT_Object_Class_Semaphore);
  1012c8:	e51b3008 	ldr	r3, [fp, #-8]
  1012cc:	e3530000 	cmp	r3, #0
  1012d0:	0a000003 	beq	1012e4 <rt_sem_take+0x30>
  1012d4:	e51b3008 	ldr	r3, [fp, #-8]
  1012d8:	e5933004 	ldr	r3, [r3, #4]
  1012dc:	e3530000 	cmp	r3, #0
  1012e0:	1a000001 	bne	1012ec <rt_sem_take+0x38>
  1012e4:	e3a03008 	mov	r3, #8
  1012e8:	ea00000c 	b	101320 <rt_sem_take+0x6c>
  1012ec:	e51b3008 	ldr	r3, [fp, #-8]
  1012f0:	e5933000 	ldr	r3, [r3]
  1012f4:	e3530002 	cmp	r3, #2
  1012f8:	0a000001 	beq	101304 <rt_sem_take+0x50>
  1012fc:	e3a03008 	mov	r3, #8
  101300:	ea000006 	b	101320 <rt_sem_take+0x6c>
    return syscall(_NRSYS_sem_take, sem->data, time);
  101304:	e51b3008 	ldr	r3, [fp, #-8]
  101308:	e5933004 	ldr	r3, [r3, #4]
  10130c:	e51b200c 	ldr	r2, [fp, #-12]
  101310:	e1a01003 	mov	r1, r3
  101314:	e3a00014 	mov	r0, #20
  101318:	eb00ecc9 	bl	13c644 <syscall>
  10131c:	e1a03000 	mov	r3, r0
}
  101320:	e1a00003 	mov	r0, r3
  101324:	e24bd004 	sub	sp, fp, #4
  101328:	e8bd8800 	pop	{fp, pc}

0010132c <rt_mb_create>:

rt_mailbox_t rt_mb_create(const char *name, rt_size_t size, rt_uint8_t flag)
{
  10132c:	e92d4800 	push	{fp, lr}
  101330:	e28db004 	add	fp, sp, #4
  101334:	e24dd018 	sub	sp, sp, #24
  101338:	e50b0010 	str	r0, [fp, #-16]
  10133c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  101340:	e1a03002 	mov	r3, r2
  101344:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
    RT_USER_IPC_CREATE(RT_Object_Class_MailBox, _NRSYS_mb_create, name, size, flag);
  101348:	e3a00008 	mov	r0, #8
  10134c:	eb00f079 	bl	13d538 <malloc>
  101350:	e1a03000 	mov	r3, r0
  101354:	e50b3008 	str	r3, [fp, #-8]
  101358:	e51b3008 	ldr	r3, [fp, #-8]
  10135c:	e3530000 	cmp	r3, #0
  101360:	1a000001 	bne	10136c <rt_mb_create+0x40>
  101364:	e3a03000 	mov	r3, #0
  101368:	ea000015 	b	1013c4 <rt_mb_create+0x98>
  10136c:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  101370:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  101374:	e51b1010 	ldr	r1, [fp, #-16]
  101378:	e3a0001e 	mov	r0, #30
  10137c:	eb00ecb0 	bl	13c644 <syscall>
  101380:	e1a03000 	mov	r3, r0
  101384:	e1a02003 	mov	r2, r3
  101388:	e51b3008 	ldr	r3, [fp, #-8]
  10138c:	e5832004 	str	r2, [r3, #4]
  101390:	e51b3008 	ldr	r3, [fp, #-8]
  101394:	e5933004 	ldr	r3, [r3, #4]
  101398:	e3530000 	cmp	r3, #0
  10139c:	0a000003 	beq	1013b0 <rt_mb_create+0x84>
  1013a0:	e51b3008 	ldr	r3, [fp, #-8]
  1013a4:	e3a02005 	mov	r2, #5
  1013a8:	e5832000 	str	r2, [r3]
  1013ac:	ea000003 	b	1013c0 <rt_mb_create+0x94>
  1013b0:	e51b0008 	ldr	r0, [fp, #-8]
  1013b4:	eb00f21b 	bl	13dc28 <free>
  1013b8:	e3a03000 	mov	r3, #0
  1013bc:	e50b3008 	str	r3, [fp, #-8]
  1013c0:	e51b3008 	ldr	r3, [fp, #-8]
}
  1013c4:	e1a00003 	mov	r0, r3
  1013c8:	e24bd004 	sub	sp, fp, #4
  1013cc:	e8bd8800 	pop	{fp, pc}

001013d0 <rt_mb_init>:
rt_err_t rt_mb_init(rt_mailbox_t mb,
                    const char  *name,
                    void        *msgpool,
                    rt_size_t    size,
                    rt_uint8_t   flag)
{
  1013d0:	e92d4800 	push	{fp, lr}
  1013d4:	e28db004 	add	fp, sp, #4
  1013d8:	e24dd010 	sub	sp, sp, #16
  1013dc:	e50b0008 	str	r0, [fp, #-8]
  1013e0:	e50b100c 	str	r1, [fp, #-12]
  1013e4:	e50b2010 	str	r2, [fp, #-16]
  1013e8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    RT_USER_IPC_INIT(mb, RT_Object_Class_MailBox, _NRSYS_mb_create, name, size, flag);
  1013ec:	e51b3008 	ldr	r3, [fp, #-8]
  1013f0:	e3530000 	cmp	r3, #0
  1013f4:	1a000001 	bne	101400 <rt_mb_init+0x30>
  1013f8:	e3a03008 	mov	r3, #8
  1013fc:	ea000012 	b	10144c <rt_mb_init+0x7c>
  101400:	e5db3004 	ldrb	r3, [fp, #4]
  101404:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  101408:	e51b100c 	ldr	r1, [fp, #-12]
  10140c:	e3a0001e 	mov	r0, #30
  101410:	eb00ec8b 	bl	13c644 <syscall>
  101414:	e1a03000 	mov	r3, r0
  101418:	e1a02003 	mov	r2, r3
  10141c:	e51b3008 	ldr	r3, [fp, #-8]
  101420:	e5832004 	str	r2, [r3, #4]
  101424:	e51b3008 	ldr	r3, [fp, #-8]
  101428:	e5933004 	ldr	r3, [r3, #4]
  10142c:	e3530000 	cmp	r3, #0
  101430:	0a000004 	beq	101448 <rt_mb_init+0x78>
  101434:	e51b3008 	ldr	r3, [fp, #-8]
  101438:	e3a02005 	mov	r2, #5
  10143c:	e5832000 	str	r2, [r3]
  101440:	e3a03000 	mov	r3, #0
  101444:	ea000000 	b	10144c <rt_mb_init+0x7c>
  101448:	e3a03001 	mov	r3, #1
}
  10144c:	e1a00003 	mov	r0, r3
  101450:	e24bd004 	sub	sp, fp, #4
  101454:	e8bd8800 	pop	{fp, pc}

00101458 <rt_mb_delete>:


rt_err_t rt_mb_delete(rt_mailbox_t mb)
{
  101458:	e92d4800 	push	{fp, lr}
  10145c:	e28db004 	add	fp, sp, #4
  101460:	e24dd010 	sub	sp, sp, #16
  101464:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DELETE(mb, RT_Object_Class_MailBox, _NRSYS_mb_delete);
  101468:	e51b3010 	ldr	r3, [fp, #-16]
  10146c:	e3530000 	cmp	r3, #0
  101470:	0a000003 	beq	101484 <rt_mb_delete+0x2c>
  101474:	e51b3010 	ldr	r3, [fp, #-16]
  101478:	e5933004 	ldr	r3, [r3, #4]
  10147c:	e3530000 	cmp	r3, #0
  101480:	1a000001 	bne	10148c <rt_mb_delete+0x34>
  101484:	e3a03008 	mov	r3, #8
  101488:	ea000013 	b	1014dc <rt_mb_delete+0x84>
  10148c:	e51b3010 	ldr	r3, [fp, #-16]
  101490:	e5933000 	ldr	r3, [r3]
  101494:	e3530005 	cmp	r3, #5
  101498:	0a000001 	beq	1014a4 <rt_mb_delete+0x4c>
  10149c:	e3a03008 	mov	r3, #8
  1014a0:	ea00000d 	b	1014dc <rt_mb_delete+0x84>
  1014a4:	e51b3010 	ldr	r3, [fp, #-16]
  1014a8:	e5933004 	ldr	r3, [r3, #4]
  1014ac:	e1a01003 	mov	r1, r3
  1014b0:	e3a0001f 	mov	r0, #31
  1014b4:	eb00ec62 	bl	13c644 <syscall>
  1014b8:	e50b0008 	str	r0, [fp, #-8]
  1014bc:	e51b3008 	ldr	r3, [fp, #-8]
  1014c0:	e3530000 	cmp	r3, #0
  1014c4:	0a000001 	beq	1014d0 <rt_mb_delete+0x78>
  1014c8:	e51b3008 	ldr	r3, [fp, #-8]
  1014cc:	ea000002 	b	1014dc <rt_mb_delete+0x84>
  1014d0:	e51b0010 	ldr	r0, [fp, #-16]
  1014d4:	eb00f1d3 	bl	13dc28 <free>
  1014d8:	e3a03000 	mov	r3, #0
}
  1014dc:	e1a00003 	mov	r0, r3
  1014e0:	e24bd004 	sub	sp, fp, #4
  1014e4:	e8bd8800 	pop	{fp, pc}

001014e8 <rt_mb_detach>:

rt_err_t rt_mb_detach(rt_mailbox_t mb)
{
  1014e8:	e92d4800 	push	{fp, lr}
  1014ec:	e28db004 	add	fp, sp, #4
  1014f0:	e24dd010 	sub	sp, sp, #16
  1014f4:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DETACH(mb, RT_Object_Class_MailBox, _NRSYS_mb_delete);
  1014f8:	e51b3010 	ldr	r3, [fp, #-16]
  1014fc:	e3530000 	cmp	r3, #0
  101500:	0a000003 	beq	101514 <rt_mb_detach+0x2c>
  101504:	e51b3010 	ldr	r3, [fp, #-16]
  101508:	e5933004 	ldr	r3, [r3, #4]
  10150c:	e3530000 	cmp	r3, #0
  101510:	1a000001 	bne	10151c <rt_mb_detach+0x34>
  101514:	e3a03008 	mov	r3, #8
  101518:	ea000017 	b	10157c <rt_mb_detach+0x94>
  10151c:	e51b3010 	ldr	r3, [fp, #-16]
  101520:	e5933000 	ldr	r3, [r3]
  101524:	e3530005 	cmp	r3, #5
  101528:	0a000001 	beq	101534 <rt_mb_detach+0x4c>
  10152c:	e3a03008 	mov	r3, #8
  101530:	ea000011 	b	10157c <rt_mb_detach+0x94>
  101534:	e51b3010 	ldr	r3, [fp, #-16]
  101538:	e5933004 	ldr	r3, [r3, #4]
  10153c:	e1a01003 	mov	r1, r3
  101540:	e3a0001f 	mov	r0, #31
  101544:	eb00ec3e 	bl	13c644 <syscall>
  101548:	e50b0008 	str	r0, [fp, #-8]
  10154c:	e51b3008 	ldr	r3, [fp, #-8]
  101550:	e3530000 	cmp	r3, #0
  101554:	0a000001 	beq	101560 <rt_mb_detach+0x78>
  101558:	e51b3008 	ldr	r3, [fp, #-8]
  10155c:	ea000006 	b	10157c <rt_mb_detach+0x94>
  101560:	e51b3010 	ldr	r3, [fp, #-16]
  101564:	e3a02000 	mov	r2, #0
  101568:	e5832000 	str	r2, [r3]
  10156c:	e51b3010 	ldr	r3, [fp, #-16]
  101570:	e3a02000 	mov	r2, #0
  101574:	e5832004 	str	r2, [r3, #4]
  101578:	e3a03000 	mov	r3, #0
}
  10157c:	e1a00003 	mov	r0, r3
  101580:	e24bd004 	sub	sp, fp, #4
  101584:	e8bd8800 	pop	{fp, pc}

00101588 <rt_mb_send_wait>:

rt_err_t rt_mb_send_wait(rt_mailbox_t mb,
        rt_ubase_t   value,
        rt_int32_t   timeout)
{
  101588:	e92d4800 	push	{fp, lr}
  10158c:	e28db004 	add	fp, sp, #4
  101590:	e24dd010 	sub	sp, sp, #16
  101594:	e50b0008 	str	r0, [fp, #-8]
  101598:	e50b100c 	str	r1, [fp, #-12]
  10159c:	e50b2010 	str	r2, [fp, #-16]
    RT_USER_IPC_CHECK(mb, RT_Object_Class_MailBox);
  1015a0:	e51b3008 	ldr	r3, [fp, #-8]
  1015a4:	e3530000 	cmp	r3, #0
  1015a8:	0a000003 	beq	1015bc <rt_mb_send_wait+0x34>
  1015ac:	e51b3008 	ldr	r3, [fp, #-8]
  1015b0:	e5933004 	ldr	r3, [r3, #4]
  1015b4:	e3530000 	cmp	r3, #0
  1015b8:	1a000001 	bne	1015c4 <rt_mb_send_wait+0x3c>
  1015bc:	e3a03008 	mov	r3, #8
  1015c0:	ea00000c 	b	1015f8 <rt_mb_send_wait+0x70>
  1015c4:	e51b3008 	ldr	r3, [fp, #-8]
  1015c8:	e5933000 	ldr	r3, [r3]
  1015cc:	e3530005 	cmp	r3, #5
  1015d0:	0a000001 	beq	1015dc <rt_mb_send_wait+0x54>
  1015d4:	e3a03008 	mov	r3, #8
  1015d8:	ea000006 	b	1015f8 <rt_mb_send_wait+0x70>
    return syscall(_NRSYS_mb_send_wait, mb->data, value, timeout);
  1015dc:	e51b3008 	ldr	r3, [fp, #-8]
  1015e0:	e5931004 	ldr	r1, [r3, #4]
  1015e4:	e51b3010 	ldr	r3, [fp, #-16]
  1015e8:	e51b200c 	ldr	r2, [fp, #-12]
  1015ec:	e3a00021 	mov	r0, #33	; 0x21
  1015f0:	eb00ec13 	bl	13c644 <syscall>
  1015f4:	e1a03000 	mov	r3, r0
}
  1015f8:	e1a00003 	mov	r0, r3
  1015fc:	e24bd004 	sub	sp, fp, #4
  101600:	e8bd8800 	pop	{fp, pc}

00101604 <rt_mb_send>:

rt_err_t rt_mb_send(rt_mailbox_t mb, rt_ubase_t value)
{
  101604:	e92d4800 	push	{fp, lr}
  101608:	e28db004 	add	fp, sp, #4
  10160c:	e24dd008 	sub	sp, sp, #8
  101610:	e50b0008 	str	r0, [fp, #-8]
  101614:	e50b100c 	str	r1, [fp, #-12]
    RT_USER_IPC_CHECK(mb, RT_Object_Class_MailBox);
  101618:	e51b3008 	ldr	r3, [fp, #-8]
  10161c:	e3530000 	cmp	r3, #0
  101620:	0a000003 	beq	101634 <rt_mb_send+0x30>
  101624:	e51b3008 	ldr	r3, [fp, #-8]
  101628:	e5933004 	ldr	r3, [r3, #4]
  10162c:	e3530000 	cmp	r3, #0
  101630:	1a000001 	bne	10163c <rt_mb_send+0x38>
  101634:	e3a03008 	mov	r3, #8
  101638:	ea00000c 	b	101670 <rt_mb_send+0x6c>
  10163c:	e51b3008 	ldr	r3, [fp, #-8]
  101640:	e5933000 	ldr	r3, [r3]
  101644:	e3530005 	cmp	r3, #5
  101648:	0a000001 	beq	101654 <rt_mb_send+0x50>
  10164c:	e3a03008 	mov	r3, #8
  101650:	ea000006 	b	101670 <rt_mb_send+0x6c>
    return syscall(_NRSYS_mb_send, mb->data, value);
  101654:	e51b3008 	ldr	r3, [fp, #-8]
  101658:	e5933004 	ldr	r3, [r3, #4]
  10165c:	e51b200c 	ldr	r2, [fp, #-12]
  101660:	e1a01003 	mov	r1, r3
  101664:	e3a00020 	mov	r0, #32
  101668:	eb00ebf5 	bl	13c644 <syscall>
  10166c:	e1a03000 	mov	r3, r0
}
  101670:	e1a00003 	mov	r0, r3
  101674:	e24bd004 	sub	sp, fp, #4
  101678:	e8bd8800 	pop	{fp, pc}

0010167c <rt_mb_recv>:

rt_err_t rt_mb_recv(rt_mailbox_t mb, rt_ubase_t *value, rt_int32_t timeout)
{
  10167c:	e92d4800 	push	{fp, lr}
  101680:	e28db004 	add	fp, sp, #4
  101684:	e24dd010 	sub	sp, sp, #16
  101688:	e50b0008 	str	r0, [fp, #-8]
  10168c:	e50b100c 	str	r1, [fp, #-12]
  101690:	e50b2010 	str	r2, [fp, #-16]
    RT_USER_IPC_CHECK(mb, RT_Object_Class_MailBox);
  101694:	e51b3008 	ldr	r3, [fp, #-8]
  101698:	e3530000 	cmp	r3, #0
  10169c:	0a000003 	beq	1016b0 <rt_mb_recv+0x34>
  1016a0:	e51b3008 	ldr	r3, [fp, #-8]
  1016a4:	e5933004 	ldr	r3, [r3, #4]
  1016a8:	e3530000 	cmp	r3, #0
  1016ac:	1a000001 	bne	1016b8 <rt_mb_recv+0x3c>
  1016b0:	e3a03008 	mov	r3, #8
  1016b4:	ea00000c 	b	1016ec <rt_mb_recv+0x70>
  1016b8:	e51b3008 	ldr	r3, [fp, #-8]
  1016bc:	e5933000 	ldr	r3, [r3]
  1016c0:	e3530005 	cmp	r3, #5
  1016c4:	0a000001 	beq	1016d0 <rt_mb_recv+0x54>
  1016c8:	e3a03008 	mov	r3, #8
  1016cc:	ea000006 	b	1016ec <rt_mb_recv+0x70>
    return syscall(_NRSYS_mb_recv, mb->data, value, timeout);
  1016d0:	e51b3008 	ldr	r3, [fp, #-8]
  1016d4:	e5931004 	ldr	r1, [r3, #4]
  1016d8:	e51b3010 	ldr	r3, [fp, #-16]
  1016dc:	e51b200c 	ldr	r2, [fp, #-12]
  1016e0:	e3a00022 	mov	r0, #34	; 0x22
  1016e4:	eb00ebd6 	bl	13c644 <syscall>
  1016e8:	e1a03000 	mov	r3, r0
}
  1016ec:	e1a00003 	mov	r0, r3
  1016f0:	e24bd004 	sub	sp, fp, #4
  1016f4:	e8bd8800 	pop	{fp, pc}

001016f8 <rt_mq_create>:

rt_mq_t rt_mq_create(const char *name,
                     rt_size_t   msg_size,
                     rt_size_t   max_msgs,
                     rt_uint8_t  flag)
{
  1016f8:	e92d4800 	push	{fp, lr}
  1016fc:	e28db004 	add	fp, sp, #4
  101700:	e24dd020 	sub	sp, sp, #32
  101704:	e50b0010 	str	r0, [fp, #-16]
  101708:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10170c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  101710:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
    RT_USER_IPC_CREATE(RT_Object_Class_MessageQueue, _NRSYS_mq_create, name, msg_size, max_msgs, flag);
  101714:	e3a00008 	mov	r0, #8
  101718:	eb00ef86 	bl	13d538 <malloc>
  10171c:	e1a03000 	mov	r3, r0
  101720:	e50b3008 	str	r3, [fp, #-8]
  101724:	e51b3008 	ldr	r3, [fp, #-8]
  101728:	e3530000 	cmp	r3, #0
  10172c:	1a000001 	bne	101738 <rt_mq_create+0x40>
  101730:	e3a03000 	mov	r3, #0
  101734:	ea000017 	b	101798 <rt_mq_create+0xa0>
  101738:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
  10173c:	e58d3000 	str	r3, [sp]
  101740:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  101744:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  101748:	e51b1010 	ldr	r1, [fp, #-16]
  10174c:	e3a00023 	mov	r0, #35	; 0x23
  101750:	eb00ebbb 	bl	13c644 <syscall>
  101754:	e1a03000 	mov	r3, r0
  101758:	e1a02003 	mov	r2, r3
  10175c:	e51b3008 	ldr	r3, [fp, #-8]
  101760:	e5832004 	str	r2, [r3, #4]
  101764:	e51b3008 	ldr	r3, [fp, #-8]
  101768:	e5933004 	ldr	r3, [r3, #4]
  10176c:	e3530000 	cmp	r3, #0
  101770:	0a000003 	beq	101784 <rt_mq_create+0x8c>
  101774:	e51b3008 	ldr	r3, [fp, #-8]
  101778:	e3a02006 	mov	r2, #6
  10177c:	e5832000 	str	r2, [r3]
  101780:	ea000003 	b	101794 <rt_mq_create+0x9c>
  101784:	e51b0008 	ldr	r0, [fp, #-8]
  101788:	eb00f126 	bl	13dc28 <free>
  10178c:	e3a03000 	mov	r3, #0
  101790:	e50b3008 	str	r3, [fp, #-8]
  101794:	e51b3008 	ldr	r3, [fp, #-8]
}
  101798:	e1a00003 	mov	r0, r3
  10179c:	e24bd004 	sub	sp, fp, #4
  1017a0:	e8bd8800 	pop	{fp, pc}

001017a4 <rt_mq_init>:
                    const char *name,
                    void       *msgpool,
                    rt_size_t   msg_size,
                    rt_size_t   pool_size,
                    rt_uint8_t  flag)
{
  1017a4:	e92d4800 	push	{fp, lr}
  1017a8:	e28db004 	add	fp, sp, #4
  1017ac:	e24dd018 	sub	sp, sp, #24
  1017b0:	e50b0008 	str	r0, [fp, #-8]
  1017b4:	e50b100c 	str	r1, [fp, #-12]
  1017b8:	e50b2010 	str	r2, [fp, #-16]
  1017bc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    RT_USER_IPC_INIT(mq, RT_Object_Class_MessageQueue, _NRSYS_mq_create, name, msg_size, pool_size/msg_size, flag);
  1017c0:	e51b3008 	ldr	r3, [fp, #-8]
  1017c4:	e3530000 	cmp	r3, #0
  1017c8:	1a000001 	bne	1017d4 <rt_mq_init+0x30>
  1017cc:	e3a03008 	mov	r3, #8
  1017d0:	ea000019 	b	10183c <rt_mq_init+0x98>
  1017d4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1017d8:	e59b0004 	ldr	r0, [fp, #4]
  1017dc:	eb00dc9e 	bl	138a5c <__udivsi3>
  1017e0:	e1a03000 	mov	r3, r0
  1017e4:	e1a02003 	mov	r2, r3
  1017e8:	e5db3008 	ldrb	r3, [fp, #8]
  1017ec:	e58d3000 	str	r3, [sp]
  1017f0:	e1a03002 	mov	r3, r2
  1017f4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1017f8:	e51b100c 	ldr	r1, [fp, #-12]
  1017fc:	e3a00023 	mov	r0, #35	; 0x23
  101800:	eb00eb8f 	bl	13c644 <syscall>
  101804:	e1a03000 	mov	r3, r0
  101808:	e1a02003 	mov	r2, r3
  10180c:	e51b3008 	ldr	r3, [fp, #-8]
  101810:	e5832004 	str	r2, [r3, #4]
  101814:	e51b3008 	ldr	r3, [fp, #-8]
  101818:	e5933004 	ldr	r3, [r3, #4]
  10181c:	e3530000 	cmp	r3, #0
  101820:	0a000004 	beq	101838 <rt_mq_init+0x94>
  101824:	e51b3008 	ldr	r3, [fp, #-8]
  101828:	e3a02006 	mov	r2, #6
  10182c:	e5832000 	str	r2, [r3]
  101830:	e3a03000 	mov	r3, #0
  101834:	ea000000 	b	10183c <rt_mq_init+0x98>
  101838:	e3a03001 	mov	r3, #1
}
  10183c:	e1a00003 	mov	r0, r3
  101840:	e24bd004 	sub	sp, fp, #4
  101844:	e8bd8800 	pop	{fp, pc}

00101848 <rt_mq_delete>:

rt_err_t rt_mq_delete(rt_mq_t mq)
{
  101848:	e92d4800 	push	{fp, lr}
  10184c:	e28db004 	add	fp, sp, #4
  101850:	e24dd010 	sub	sp, sp, #16
  101854:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DELETE(mq, RT_Object_Class_MessageQueue, _NRSYS_mq_delete);
  101858:	e51b3010 	ldr	r3, [fp, #-16]
  10185c:	e3530000 	cmp	r3, #0
  101860:	0a000003 	beq	101874 <rt_mq_delete+0x2c>
  101864:	e51b3010 	ldr	r3, [fp, #-16]
  101868:	e5933004 	ldr	r3, [r3, #4]
  10186c:	e3530000 	cmp	r3, #0
  101870:	1a000001 	bne	10187c <rt_mq_delete+0x34>
  101874:	e3a03008 	mov	r3, #8
  101878:	ea000013 	b	1018cc <rt_mq_delete+0x84>
  10187c:	e51b3010 	ldr	r3, [fp, #-16]
  101880:	e5933000 	ldr	r3, [r3]
  101884:	e3530006 	cmp	r3, #6
  101888:	0a000001 	beq	101894 <rt_mq_delete+0x4c>
  10188c:	e3a03008 	mov	r3, #8
  101890:	ea00000d 	b	1018cc <rt_mq_delete+0x84>
  101894:	e51b3010 	ldr	r3, [fp, #-16]
  101898:	e5933004 	ldr	r3, [r3, #4]
  10189c:	e1a01003 	mov	r1, r3
  1018a0:	e3a00024 	mov	r0, #36	; 0x24
  1018a4:	eb00eb66 	bl	13c644 <syscall>
  1018a8:	e50b0008 	str	r0, [fp, #-8]
  1018ac:	e51b3008 	ldr	r3, [fp, #-8]
  1018b0:	e3530000 	cmp	r3, #0
  1018b4:	0a000001 	beq	1018c0 <rt_mq_delete+0x78>
  1018b8:	e51b3008 	ldr	r3, [fp, #-8]
  1018bc:	ea000002 	b	1018cc <rt_mq_delete+0x84>
  1018c0:	e51b0010 	ldr	r0, [fp, #-16]
  1018c4:	eb00f0d7 	bl	13dc28 <free>
  1018c8:	e3a03000 	mov	r3, #0
}
  1018cc:	e1a00003 	mov	r0, r3
  1018d0:	e24bd004 	sub	sp, fp, #4
  1018d4:	e8bd8800 	pop	{fp, pc}

001018d8 <rt_mq_detach>:

rt_err_t rt_mq_detach(rt_mq_t mq)
{
  1018d8:	e92d4800 	push	{fp, lr}
  1018dc:	e28db004 	add	fp, sp, #4
  1018e0:	e24dd010 	sub	sp, sp, #16
  1018e4:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DETACH(mq, RT_Object_Class_MessageQueue, _NRSYS_mq_delete);
  1018e8:	e51b3010 	ldr	r3, [fp, #-16]
  1018ec:	e3530000 	cmp	r3, #0
  1018f0:	0a000003 	beq	101904 <rt_mq_detach+0x2c>
  1018f4:	e51b3010 	ldr	r3, [fp, #-16]
  1018f8:	e5933004 	ldr	r3, [r3, #4]
  1018fc:	e3530000 	cmp	r3, #0
  101900:	1a000001 	bne	10190c <rt_mq_detach+0x34>
  101904:	e3a03008 	mov	r3, #8
  101908:	ea000017 	b	10196c <rt_mq_detach+0x94>
  10190c:	e51b3010 	ldr	r3, [fp, #-16]
  101910:	e5933000 	ldr	r3, [r3]
  101914:	e3530006 	cmp	r3, #6
  101918:	0a000001 	beq	101924 <rt_mq_detach+0x4c>
  10191c:	e3a03008 	mov	r3, #8
  101920:	ea000011 	b	10196c <rt_mq_detach+0x94>
  101924:	e51b3010 	ldr	r3, [fp, #-16]
  101928:	e5933004 	ldr	r3, [r3, #4]
  10192c:	e1a01003 	mov	r1, r3
  101930:	e3a00024 	mov	r0, #36	; 0x24
  101934:	eb00eb42 	bl	13c644 <syscall>
  101938:	e50b0008 	str	r0, [fp, #-8]
  10193c:	e51b3008 	ldr	r3, [fp, #-8]
  101940:	e3530000 	cmp	r3, #0
  101944:	0a000001 	beq	101950 <rt_mq_detach+0x78>
  101948:	e51b3008 	ldr	r3, [fp, #-8]
  10194c:	ea000006 	b	10196c <rt_mq_detach+0x94>
  101950:	e51b3010 	ldr	r3, [fp, #-16]
  101954:	e3a02000 	mov	r2, #0
  101958:	e5832000 	str	r2, [r3]
  10195c:	e51b3010 	ldr	r3, [fp, #-16]
  101960:	e3a02000 	mov	r2, #0
  101964:	e5832004 	str	r2, [r3, #4]
  101968:	e3a03000 	mov	r3, #0
}
  10196c:	e1a00003 	mov	r0, r3
  101970:	e24bd004 	sub	sp, fp, #4
  101974:	e8bd8800 	pop	{fp, pc}

00101978 <rt_mq_send>:

rt_err_t rt_mq_send(rt_mq_t mq, const void *buffer, rt_size_t size)
{
  101978:	e92d4800 	push	{fp, lr}
  10197c:	e28db004 	add	fp, sp, #4
  101980:	e24dd010 	sub	sp, sp, #16
  101984:	e50b0008 	str	r0, [fp, #-8]
  101988:	e50b100c 	str	r1, [fp, #-12]
  10198c:	e50b2010 	str	r2, [fp, #-16]
    RT_USER_IPC_CHECK(mq, RT_Object_Class_MessageQueue);
  101990:	e51b3008 	ldr	r3, [fp, #-8]
  101994:	e3530000 	cmp	r3, #0
  101998:	0a000003 	beq	1019ac <rt_mq_send+0x34>
  10199c:	e51b3008 	ldr	r3, [fp, #-8]
  1019a0:	e5933004 	ldr	r3, [r3, #4]
  1019a4:	e3530000 	cmp	r3, #0
  1019a8:	1a000001 	bne	1019b4 <rt_mq_send+0x3c>
  1019ac:	e3a03008 	mov	r3, #8
  1019b0:	ea00000c 	b	1019e8 <rt_mq_send+0x70>
  1019b4:	e51b3008 	ldr	r3, [fp, #-8]
  1019b8:	e5933000 	ldr	r3, [r3]
  1019bc:	e3530006 	cmp	r3, #6
  1019c0:	0a000001 	beq	1019cc <rt_mq_send+0x54>
  1019c4:	e3a03008 	mov	r3, #8
  1019c8:	ea000006 	b	1019e8 <rt_mq_send+0x70>
    return syscall(_NRSYS_mq_send, mq->data, buffer, size);
  1019cc:	e51b3008 	ldr	r3, [fp, #-8]
  1019d0:	e5931004 	ldr	r1, [r3, #4]
  1019d4:	e51b3010 	ldr	r3, [fp, #-16]
  1019d8:	e51b200c 	ldr	r2, [fp, #-12]
  1019dc:	e3a00025 	mov	r0, #37	; 0x25
  1019e0:	eb00eb17 	bl	13c644 <syscall>
  1019e4:	e1a03000 	mov	r3, r0
}
  1019e8:	e1a00003 	mov	r0, r3
  1019ec:	e24bd004 	sub	sp, fp, #4
  1019f0:	e8bd8800 	pop	{fp, pc}

001019f4 <rt_mq_urgent>:

rt_err_t rt_mq_urgent(rt_mq_t mq, const void *buffer, rt_size_t size)
{
  1019f4:	e92d4800 	push	{fp, lr}
  1019f8:	e28db004 	add	fp, sp, #4
  1019fc:	e24dd010 	sub	sp, sp, #16
  101a00:	e50b0008 	str	r0, [fp, #-8]
  101a04:	e50b100c 	str	r1, [fp, #-12]
  101a08:	e50b2010 	str	r2, [fp, #-16]
    RT_USER_IPC_CHECK(mq, RT_Object_Class_MessageQueue);
  101a0c:	e51b3008 	ldr	r3, [fp, #-8]
  101a10:	e3530000 	cmp	r3, #0
  101a14:	0a000003 	beq	101a28 <rt_mq_urgent+0x34>
  101a18:	e51b3008 	ldr	r3, [fp, #-8]
  101a1c:	e5933004 	ldr	r3, [r3, #4]
  101a20:	e3530000 	cmp	r3, #0
  101a24:	1a000001 	bne	101a30 <rt_mq_urgent+0x3c>
  101a28:	e3a03008 	mov	r3, #8
  101a2c:	ea00000c 	b	101a64 <rt_mq_urgent+0x70>
  101a30:	e51b3008 	ldr	r3, [fp, #-8]
  101a34:	e5933000 	ldr	r3, [r3]
  101a38:	e3530006 	cmp	r3, #6
  101a3c:	0a000001 	beq	101a48 <rt_mq_urgent+0x54>
  101a40:	e3a03008 	mov	r3, #8
  101a44:	ea000006 	b	101a64 <rt_mq_urgent+0x70>
    return syscall(_NRSYS_mq_urgent, mq->data, buffer, size);
  101a48:	e51b3008 	ldr	r3, [fp, #-8]
  101a4c:	e5931004 	ldr	r1, [r3, #4]
  101a50:	e51b3010 	ldr	r3, [fp, #-16]
  101a54:	e51b200c 	ldr	r2, [fp, #-12]
  101a58:	e3a00026 	mov	r0, #38	; 0x26
  101a5c:	eb00eaf8 	bl	13c644 <syscall>
  101a60:	e1a03000 	mov	r3, r0
}
  101a64:	e1a00003 	mov	r0, r3
  101a68:	e24bd004 	sub	sp, fp, #4
  101a6c:	e8bd8800 	pop	{fp, pc}

00101a70 <rt_mq_recv>:

rt_err_t rt_mq_recv(rt_mq_t    mq,
                    void      *buffer,
                    rt_size_t  size,
                    rt_int32_t timeout)
{
  101a70:	e92d4800 	push	{fp, lr}
  101a74:	e28db004 	add	fp, sp, #4
  101a78:	e24dd018 	sub	sp, sp, #24
  101a7c:	e50b0008 	str	r0, [fp, #-8]
  101a80:	e50b100c 	str	r1, [fp, #-12]
  101a84:	e50b2010 	str	r2, [fp, #-16]
  101a88:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    RT_USER_IPC_CHECK(mq, RT_Object_Class_MessageQueue);
  101a8c:	e51b3008 	ldr	r3, [fp, #-8]
  101a90:	e3530000 	cmp	r3, #0
  101a94:	0a000003 	beq	101aa8 <rt_mq_recv+0x38>
  101a98:	e51b3008 	ldr	r3, [fp, #-8]
  101a9c:	e5933004 	ldr	r3, [r3, #4]
  101aa0:	e3530000 	cmp	r3, #0
  101aa4:	1a000001 	bne	101ab0 <rt_mq_recv+0x40>
  101aa8:	e3a03008 	mov	r3, #8
  101aac:	ea00000e 	b	101aec <rt_mq_recv+0x7c>
  101ab0:	e51b3008 	ldr	r3, [fp, #-8]
  101ab4:	e5933000 	ldr	r3, [r3]
  101ab8:	e3530006 	cmp	r3, #6
  101abc:	0a000001 	beq	101ac8 <rt_mq_recv+0x58>
  101ac0:	e3a03008 	mov	r3, #8
  101ac4:	ea000008 	b	101aec <rt_mq_recv+0x7c>
    return syscall(_NRSYS_mq_recv, mq->data, buffer, size, timeout);
  101ac8:	e51b3008 	ldr	r3, [fp, #-8]
  101acc:	e5931004 	ldr	r1, [r3, #4]
  101ad0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  101ad4:	e58d3000 	str	r3, [sp]
  101ad8:	e51b3010 	ldr	r3, [fp, #-16]
  101adc:	e51b200c 	ldr	r2, [fp, #-12]
  101ae0:	e3a00027 	mov	r0, #39	; 0x27
  101ae4:	eb00ead6 	bl	13c644 <syscall>
  101ae8:	e1a03000 	mov	r3, r0
}
  101aec:	e1a00003 	mov	r0, r3
  101af0:	e24bd004 	sub	sp, fp, #4
  101af4:	e8bd8800 	pop	{fp, pc}

00101af8 <rt_event_create>:

rt_event_t rt_event_create(const char *name, rt_uint8_t flag)
{
  101af8:	e92d4800 	push	{fp, lr}
  101afc:	e28db004 	add	fp, sp, #4
  101b00:	e24dd010 	sub	sp, sp, #16
  101b04:	e50b0010 	str	r0, [fp, #-16]
  101b08:	e1a03001 	mov	r3, r1
  101b0c:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    RT_USER_IPC_CREATE(RT_Object_Class_Event, _NRSYS_event_create, name, flag);
  101b10:	e3a00008 	mov	r0, #8
  101b14:	eb00ee87 	bl	13d538 <malloc>
  101b18:	e1a03000 	mov	r3, r0
  101b1c:	e50b3008 	str	r3, [fp, #-8]
  101b20:	e51b3008 	ldr	r3, [fp, #-8]
  101b24:	e3530000 	cmp	r3, #0
  101b28:	1a000001 	bne	101b34 <rt_event_create+0x3c>
  101b2c:	e3a03000 	mov	r3, #0
  101b30:	ea000015 	b	101b8c <rt_event_create+0x94>
  101b34:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  101b38:	e1a02003 	mov	r2, r3
  101b3c:	e51b1010 	ldr	r1, [fp, #-16]
  101b40:	e3a0001a 	mov	r0, #26
  101b44:	eb00eabe 	bl	13c644 <syscall>
  101b48:	e1a03000 	mov	r3, r0
  101b4c:	e1a02003 	mov	r2, r3
  101b50:	e51b3008 	ldr	r3, [fp, #-8]
  101b54:	e5832004 	str	r2, [r3, #4]
  101b58:	e51b3008 	ldr	r3, [fp, #-8]
  101b5c:	e5933004 	ldr	r3, [r3, #4]
  101b60:	e3530000 	cmp	r3, #0
  101b64:	0a000003 	beq	101b78 <rt_event_create+0x80>
  101b68:	e51b3008 	ldr	r3, [fp, #-8]
  101b6c:	e3a02004 	mov	r2, #4
  101b70:	e5832000 	str	r2, [r3]
  101b74:	ea000003 	b	101b88 <rt_event_create+0x90>
  101b78:	e51b0008 	ldr	r0, [fp, #-8]
  101b7c:	eb00f029 	bl	13dc28 <free>
  101b80:	e3a03000 	mov	r3, #0
  101b84:	e50b3008 	str	r3, [fp, #-8]
  101b88:	e51b3008 	ldr	r3, [fp, #-8]
}
  101b8c:	e1a00003 	mov	r0, r3
  101b90:	e24bd004 	sub	sp, fp, #4
  101b94:	e8bd8800 	pop	{fp, pc}

00101b98 <rt_event_init>:

rt_err_t rt_event_init(rt_event_t event, const char *name, rt_uint8_t flag)
{
  101b98:	e92d4800 	push	{fp, lr}
  101b9c:	e28db004 	add	fp, sp, #4
  101ba0:	e24dd010 	sub	sp, sp, #16
  101ba4:	e50b0008 	str	r0, [fp, #-8]
  101ba8:	e50b100c 	str	r1, [fp, #-12]
  101bac:	e1a03002 	mov	r3, r2
  101bb0:	e54b300d 	strb	r3, [fp, #-13]
    RT_USER_IPC_INIT(event, RT_Object_Class_Event, _NRSYS_event_create, name, flag);
  101bb4:	e51b3008 	ldr	r3, [fp, #-8]
  101bb8:	e3530000 	cmp	r3, #0
  101bbc:	1a000001 	bne	101bc8 <rt_event_init+0x30>
  101bc0:	e3a03008 	mov	r3, #8
  101bc4:	ea000012 	b	101c14 <rt_event_init+0x7c>
  101bc8:	e55b300d 	ldrb	r3, [fp, #-13]
  101bcc:	e1a02003 	mov	r2, r3
  101bd0:	e51b100c 	ldr	r1, [fp, #-12]
  101bd4:	e3a0001a 	mov	r0, #26
  101bd8:	eb00ea99 	bl	13c644 <syscall>
  101bdc:	e1a03000 	mov	r3, r0
  101be0:	e1a02003 	mov	r2, r3
  101be4:	e51b3008 	ldr	r3, [fp, #-8]
  101be8:	e5832004 	str	r2, [r3, #4]
  101bec:	e51b3008 	ldr	r3, [fp, #-8]
  101bf0:	e5933004 	ldr	r3, [r3, #4]
  101bf4:	e3530000 	cmp	r3, #0
  101bf8:	0a000004 	beq	101c10 <rt_event_init+0x78>
  101bfc:	e51b3008 	ldr	r3, [fp, #-8]
  101c00:	e3a02004 	mov	r2, #4
  101c04:	e5832000 	str	r2, [r3]
  101c08:	e3a03000 	mov	r3, #0
  101c0c:	ea000000 	b	101c14 <rt_event_init+0x7c>
  101c10:	e3a03001 	mov	r3, #1
}
  101c14:	e1a00003 	mov	r0, r3
  101c18:	e24bd004 	sub	sp, fp, #4
  101c1c:	e8bd8800 	pop	{fp, pc}

00101c20 <rt_event_delete>:

rt_err_t rt_event_delete(rt_event_t event)
{
  101c20:	e92d4800 	push	{fp, lr}
  101c24:	e28db004 	add	fp, sp, #4
  101c28:	e24dd010 	sub	sp, sp, #16
  101c2c:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DELETE(event, RT_Object_Class_Event, _NRSYS_event_delete);
  101c30:	e51b3010 	ldr	r3, [fp, #-16]
  101c34:	e3530000 	cmp	r3, #0
  101c38:	0a000003 	beq	101c4c <rt_event_delete+0x2c>
  101c3c:	e51b3010 	ldr	r3, [fp, #-16]
  101c40:	e5933004 	ldr	r3, [r3, #4]
  101c44:	e3530000 	cmp	r3, #0
  101c48:	1a000001 	bne	101c54 <rt_event_delete+0x34>
  101c4c:	e3a03008 	mov	r3, #8
  101c50:	ea000013 	b	101ca4 <rt_event_delete+0x84>
  101c54:	e51b3010 	ldr	r3, [fp, #-16]
  101c58:	e5933000 	ldr	r3, [r3]
  101c5c:	e3530004 	cmp	r3, #4
  101c60:	0a000001 	beq	101c6c <rt_event_delete+0x4c>
  101c64:	e3a03008 	mov	r3, #8
  101c68:	ea00000d 	b	101ca4 <rt_event_delete+0x84>
  101c6c:	e51b3010 	ldr	r3, [fp, #-16]
  101c70:	e5933004 	ldr	r3, [r3, #4]
  101c74:	e1a01003 	mov	r1, r3
  101c78:	e3a0001b 	mov	r0, #27
  101c7c:	eb00ea70 	bl	13c644 <syscall>
  101c80:	e50b0008 	str	r0, [fp, #-8]
  101c84:	e51b3008 	ldr	r3, [fp, #-8]
  101c88:	e3530000 	cmp	r3, #0
  101c8c:	0a000001 	beq	101c98 <rt_event_delete+0x78>
  101c90:	e51b3008 	ldr	r3, [fp, #-8]
  101c94:	ea000002 	b	101ca4 <rt_event_delete+0x84>
  101c98:	e51b0010 	ldr	r0, [fp, #-16]
  101c9c:	eb00efe1 	bl	13dc28 <free>
  101ca0:	e3a03000 	mov	r3, #0
}
  101ca4:	e1a00003 	mov	r0, r3
  101ca8:	e24bd004 	sub	sp, fp, #4
  101cac:	e8bd8800 	pop	{fp, pc}

00101cb0 <rt_event_detach>:

rt_err_t rt_event_detach(rt_event_t event)
{
  101cb0:	e92d4800 	push	{fp, lr}
  101cb4:	e28db004 	add	fp, sp, #4
  101cb8:	e24dd010 	sub	sp, sp, #16
  101cbc:	e50b0010 	str	r0, [fp, #-16]
    RT_USER_IPC_DETACH(event, RT_Object_Class_Event, _NRSYS_event_delete);
  101cc0:	e51b3010 	ldr	r3, [fp, #-16]
  101cc4:	e3530000 	cmp	r3, #0
  101cc8:	0a000003 	beq	101cdc <rt_event_detach+0x2c>
  101ccc:	e51b3010 	ldr	r3, [fp, #-16]
  101cd0:	e5933004 	ldr	r3, [r3, #4]
  101cd4:	e3530000 	cmp	r3, #0
  101cd8:	1a000001 	bne	101ce4 <rt_event_detach+0x34>
  101cdc:	e3a03008 	mov	r3, #8
  101ce0:	ea000017 	b	101d44 <rt_event_detach+0x94>
  101ce4:	e51b3010 	ldr	r3, [fp, #-16]
  101ce8:	e5933000 	ldr	r3, [r3]
  101cec:	e3530004 	cmp	r3, #4
  101cf0:	0a000001 	beq	101cfc <rt_event_detach+0x4c>
  101cf4:	e3a03008 	mov	r3, #8
  101cf8:	ea000011 	b	101d44 <rt_event_detach+0x94>
  101cfc:	e51b3010 	ldr	r3, [fp, #-16]
  101d00:	e5933004 	ldr	r3, [r3, #4]
  101d04:	e1a01003 	mov	r1, r3
  101d08:	e3a0001b 	mov	r0, #27
  101d0c:	eb00ea4c 	bl	13c644 <syscall>
  101d10:	e50b0008 	str	r0, [fp, #-8]
  101d14:	e51b3008 	ldr	r3, [fp, #-8]
  101d18:	e3530000 	cmp	r3, #0
  101d1c:	0a000001 	beq	101d28 <rt_event_detach+0x78>
  101d20:	e51b3008 	ldr	r3, [fp, #-8]
  101d24:	ea000006 	b	101d44 <rt_event_detach+0x94>
  101d28:	e51b3010 	ldr	r3, [fp, #-16]
  101d2c:	e3a02000 	mov	r2, #0
  101d30:	e5832000 	str	r2, [r3]
  101d34:	e51b3010 	ldr	r3, [fp, #-16]
  101d38:	e3a02000 	mov	r2, #0
  101d3c:	e5832004 	str	r2, [r3, #4]
  101d40:	e3a03000 	mov	r3, #0
}
  101d44:	e1a00003 	mov	r0, r3
  101d48:	e24bd004 	sub	sp, fp, #4
  101d4c:	e8bd8800 	pop	{fp, pc}

00101d50 <rt_event_send>:

rt_err_t rt_event_send(rt_event_t event, rt_uint32_t set)
{
  101d50:	e92d4800 	push	{fp, lr}
  101d54:	e28db004 	add	fp, sp, #4
  101d58:	e24dd008 	sub	sp, sp, #8
  101d5c:	e50b0008 	str	r0, [fp, #-8]
  101d60:	e50b100c 	str	r1, [fp, #-12]
    RT_USER_IPC_CHECK(event, RT_Object_Class_Event);
  101d64:	e51b3008 	ldr	r3, [fp, #-8]
  101d68:	e3530000 	cmp	r3, #0
  101d6c:	0a000003 	beq	101d80 <rt_event_send+0x30>
  101d70:	e51b3008 	ldr	r3, [fp, #-8]
  101d74:	e5933004 	ldr	r3, [r3, #4]
  101d78:	e3530000 	cmp	r3, #0
  101d7c:	1a000001 	bne	101d88 <rt_event_send+0x38>
  101d80:	e3a03008 	mov	r3, #8
  101d84:	ea00000c 	b	101dbc <rt_event_send+0x6c>
  101d88:	e51b3008 	ldr	r3, [fp, #-8]
  101d8c:	e5933000 	ldr	r3, [r3]
  101d90:	e3530004 	cmp	r3, #4
  101d94:	0a000001 	beq	101da0 <rt_event_send+0x50>
  101d98:	e3a03008 	mov	r3, #8
  101d9c:	ea000006 	b	101dbc <rt_event_send+0x6c>
    return syscall(_NRSYS_event_send, event->data, set);
  101da0:	e51b3008 	ldr	r3, [fp, #-8]
  101da4:	e5933004 	ldr	r3, [r3, #4]
  101da8:	e51b200c 	ldr	r2, [fp, #-12]
  101dac:	e1a01003 	mov	r1, r3
  101db0:	e3a0001c 	mov	r0, #28
  101db4:	eb00ea22 	bl	13c644 <syscall>
  101db8:	e1a03000 	mov	r3, r0
}
  101dbc:	e1a00003 	mov	r0, r3
  101dc0:	e24bd004 	sub	sp, fp, #4
  101dc4:	e8bd8800 	pop	{fp, pc}

00101dc8 <rt_event_recv>:
rt_err_t rt_event_recv(rt_event_t   event,
                       rt_uint32_t  set,
                       rt_uint8_t   opt,
                       rt_int32_t   timeout,
                       rt_uint32_t *recved)
{
  101dc8:	e92d4800 	push	{fp, lr}
  101dcc:	e28db004 	add	fp, sp, #4
  101dd0:	e24dd018 	sub	sp, sp, #24
  101dd4:	e50b0008 	str	r0, [fp, #-8]
  101dd8:	e50b100c 	str	r1, [fp, #-12]
  101ddc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  101de0:	e1a03002 	mov	r3, r2
  101de4:	e54b300d 	strb	r3, [fp, #-13]
    RT_USER_IPC_CHECK(event, RT_Object_Class_Event);
  101de8:	e51b3008 	ldr	r3, [fp, #-8]
  101dec:	e3530000 	cmp	r3, #0
  101df0:	0a000003 	beq	101e04 <rt_event_recv+0x3c>
  101df4:	e51b3008 	ldr	r3, [fp, #-8]
  101df8:	e5933004 	ldr	r3, [r3, #4]
  101dfc:	e3530000 	cmp	r3, #0
  101e00:	1a000001 	bne	101e0c <rt_event_recv+0x44>
  101e04:	e3a03008 	mov	r3, #8
  101e08:	ea000011 	b	101e54 <rt_event_recv+0x8c>
  101e0c:	e51b3008 	ldr	r3, [fp, #-8]
  101e10:	e5933000 	ldr	r3, [r3]
  101e14:	e3530004 	cmp	r3, #4
  101e18:	0a000001 	beq	101e24 <rt_event_recv+0x5c>
  101e1c:	e3a03008 	mov	r3, #8
  101e20:	ea00000b 	b	101e54 <rt_event_recv+0x8c>
    return syscall(_NRSYS_event_recv, event->data, set, opt, timeout, recved);
  101e24:	e51b3008 	ldr	r3, [fp, #-8]
  101e28:	e5931004 	ldr	r1, [r3, #4]
  101e2c:	e55b200d 	ldrb	r2, [fp, #-13]
  101e30:	e59b3004 	ldr	r3, [fp, #4]
  101e34:	e58d3004 	str	r3, [sp, #4]
  101e38:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  101e3c:	e58d3000 	str	r3, [sp]
  101e40:	e1a03002 	mov	r3, r2
  101e44:	e51b200c 	ldr	r2, [fp, #-12]
  101e48:	e3a0001d 	mov	r0, #29
  101e4c:	eb00e9fc 	bl	13c644 <syscall>
  101e50:	e1a03000 	mov	r3, r0
}
  101e54:	e1a00003 	mov	r0, r3
  101e58:	e24bd004 	sub	sp, fp, #4
  101e5c:	e8bd8800 	pop	{fp, pc}

00101e60 <rt_tick_get>:

rt_tick_t rt_tick_get(void)
{
  101e60:	e92d4800 	push	{fp, lr}
  101e64:	e28db004 	add	fp, sp, #4
    return (rt_tick_t)syscall(_NRSYS_rt_tick_get);
  101e68:	e3a00061 	mov	r0, #97	; 0x61
  101e6c:	eb00e9f4 	bl	13c644 <syscall>
  101e70:	e1a03000 	mov	r3, r0
}
  101e74:	e1a00003 	mov	r0, r3
  101e78:	e8bd8800 	pop	{fp, pc}

00101e7c <rt_thread_mdelay>:

rt_err_t rt_thread_mdelay(rt_int32_t ms)
{
  101e7c:	e92d4800 	push	{fp, lr}
  101e80:	e28db004 	add	fp, sp, #4
  101e84:	e24dd008 	sub	sp, sp, #8
  101e88:	e50b0008 	str	r0, [fp, #-8]
    return (rt_err_t)syscall(_NRSYS_rt_thread_mdelay, ms);
  101e8c:	e51b1008 	ldr	r1, [fp, #-8]
  101e90:	e3a00066 	mov	r0, #102	; 0x66
  101e94:	eb00e9ea 	bl	13c644 <syscall>
  101e98:	e1a03000 	mov	r3, r0
}
  101e9c:	e1a00003 	mov	r0, r3
  101ea0:	e24bd004 	sub	sp, fp, #4
  101ea4:	e8bd8800 	pop	{fp, pc}

00101ea8 <lwp_shmget>:

int lwp_shmget(size_t key, size_t size, int create)
{
  101ea8:	e92d4800 	push	{fp, lr}
  101eac:	e28db004 	add	fp, sp, #4
  101eb0:	e24dd010 	sub	sp, sp, #16
  101eb4:	e50b0008 	str	r0, [fp, #-8]
  101eb8:	e50b100c 	str	r1, [fp, #-12]
  101ebc:	e50b2010 	str	r2, [fp, #-16]
    return (int)syscall(_NRSYS_shmget, key, size, create);
  101ec0:	e51b3010 	ldr	r3, [fp, #-16]
  101ec4:	e51b200c 	ldr	r2, [fp, #-12]
  101ec8:	e51b1008 	ldr	r1, [fp, #-8]
  101ecc:	e3a00037 	mov	r0, #55	; 0x37
  101ed0:	eb00e9db 	bl	13c644 <syscall>
  101ed4:	e1a03000 	mov	r3, r0
}
  101ed8:	e1a00003 	mov	r0, r3
  101edc:	e24bd004 	sub	sp, fp, #4
  101ee0:	e8bd8800 	pop	{fp, pc}

00101ee4 <lwp_shmrm>:

int lwp_shmrm(int id)
{
  101ee4:	e92d4800 	push	{fp, lr}
  101ee8:	e28db004 	add	fp, sp, #4
  101eec:	e24dd008 	sub	sp, sp, #8
  101ef0:	e50b0008 	str	r0, [fp, #-8]
    return (int)syscall(_NRSYS_shmrm, id);
  101ef4:	e51b1008 	ldr	r1, [fp, #-8]
  101ef8:	e3a00038 	mov	r0, #56	; 0x38
  101efc:	eb00e9d0 	bl	13c644 <syscall>
  101f00:	e1a03000 	mov	r3, r0
}
  101f04:	e1a00003 	mov	r0, r3
  101f08:	e24bd004 	sub	sp, fp, #4
  101f0c:	e8bd8800 	pop	{fp, pc}

00101f10 <lwp_shmat>:

void* lwp_shmat(int id, void* shm_vaddr)
{
  101f10:	e92d4800 	push	{fp, lr}
  101f14:	e28db004 	add	fp, sp, #4
  101f18:	e24dd008 	sub	sp, sp, #8
  101f1c:	e50b0008 	str	r0, [fp, #-8]
  101f20:	e50b100c 	str	r1, [fp, #-12]
    return (void*)syscall(_NRSYS_shmat, id, shm_vaddr);
  101f24:	e51b200c 	ldr	r2, [fp, #-12]
  101f28:	e51b1008 	ldr	r1, [fp, #-8]
  101f2c:	e3a00039 	mov	r0, #57	; 0x39
  101f30:	eb00e9c3 	bl	13c644 <syscall>
  101f34:	e1a03000 	mov	r3, r0
}
  101f38:	e1a00003 	mov	r0, r3
  101f3c:	e24bd004 	sub	sp, fp, #4
  101f40:	e8bd8800 	pop	{fp, pc}

00101f44 <lwp_shmdt>:

int lwp_shmdt(void* shm_vaddr)
{
  101f44:	e92d4800 	push	{fp, lr}
  101f48:	e28db004 	add	fp, sp, #4
  101f4c:	e24dd008 	sub	sp, sp, #8
  101f50:	e50b0008 	str	r0, [fp, #-8]
    return (int)syscall(_NRSYS_shmdt, shm_vaddr);
  101f54:	e51b1008 	ldr	r1, [fp, #-8]
  101f58:	e3a0003a 	mov	r0, #58	; 0x3a
  101f5c:	eb00e9b8 	bl	13c644 <syscall>
  101f60:	e1a03000 	mov	r3, r0
}
  101f64:	e1a00003 	mov	r0, r3
  101f68:	e24bd004 	sub	sp, fp, #4
  101f6c:	e8bd8800 	pop	{fp, pc}

00101f70 <exec>:

int exec(char *filename, int argc, char **argv, char **envp)
{
  101f70:	e92d4800 	push	{fp, lr}
  101f74:	e28db004 	add	fp, sp, #4
  101f78:	e24dd018 	sub	sp, sp, #24
  101f7c:	e50b0008 	str	r0, [fp, #-8]
  101f80:	e50b100c 	str	r1, [fp, #-12]
  101f84:	e50b2010 	str	r2, [fp, #-16]
  101f88:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return (int)syscall(_NRSYS_exec, filename, argc, argv, envp);
  101f8c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  101f90:	e58d3000 	str	r3, [sp]
  101f94:	e51b3010 	ldr	r3, [fp, #-16]
  101f98:	e51b200c 	ldr	r2, [fp, #-12]
  101f9c:	e51b1008 	ldr	r1, [fp, #-8]
  101fa0:	e3a0000d 	mov	r0, #13
  101fa4:	eb00e9a6 	bl	13c644 <syscall>
  101fa8:	e1a03000 	mov	r3, r0
}
  101fac:	e1a00003 	mov	r0, r3
  101fb0:	e24bd004 	sub	sp, fp, #4
  101fb4:	e8bd8800 	pop	{fp, pc}

00101fb8 <lwp_kill>:

int lwp_kill(pid_t pid, int sig)
{
  101fb8:	e92d4800 	push	{fp, lr}
  101fbc:	e28db004 	add	fp, sp, #4
  101fc0:	e24dd008 	sub	sp, sp, #8
  101fc4:	e50b0008 	str	r0, [fp, #-8]
  101fc8:	e50b100c 	str	r1, [fp, #-12]
    return (int)syscall(_NRSYS_kill, pid, sig);
  101fcc:	e51b200c 	ldr	r2, [fp, #-12]
  101fd0:	e51b1008 	ldr	r1, [fp, #-8]
  101fd4:	e3a0000e 	mov	r0, #14
  101fd8:	eb00e999 	bl	13c644 <syscall>
  101fdc:	e1a03000 	mov	r3, r0
}
  101fe0:	e1a00003 	mov	r0, r3
  101fe4:	e24bd004 	sub	sp, fp, #4
  101fe8:	e8bd8800 	pop	{fp, pc}

00101fec <lwp_tkill>:

int lwp_tkill(int tid, int sig)
{
  101fec:	e92d4800 	push	{fp, lr}
  101ff0:	e28db004 	add	fp, sp, #4
  101ff4:	e24dd008 	sub	sp, sp, #8
  101ff8:	e50b0008 	str	r0, [fp, #-8]
  101ffc:	e50b100c 	str	r1, [fp, #-12]
    return (int)syscall(_NRSYS_tkill, tid, sig);
  102000:	e51b200c 	ldr	r2, [fp, #-12]
  102004:	e51b1008 	ldr	r1, [fp, #-8]
  102008:	e3a00069 	mov	r0, #105	; 0x69
  10200c:	eb00e98c 	bl	13c644 <syscall>
  102010:	e1a03000 	mov	r3, r0
}
  102014:	e1a00003 	mov	r0, r3
  102018:	e24bd004 	sub	sp, fp, #4
  10201c:	e8bd8800 	pop	{fp, pc}

00102020 <waitpid>:

pid_t waitpid(pid_t pid, int *status, int options)
{
  102020:	e92d4800 	push	{fp, lr}
  102024:	e28db004 	add	fp, sp, #4
  102028:	e24dd010 	sub	sp, sp, #16
  10202c:	e50b0008 	str	r0, [fp, #-8]
  102030:	e50b100c 	str	r1, [fp, #-12]
  102034:	e50b2010 	str	r2, [fp, #-16]
    return (int)syscall(_NRSYS_waitpid, pid, status, options);
  102038:	e51b3010 	ldr	r3, [fp, #-16]
  10203c:	e51b200c 	ldr	r2, [fp, #-12]
  102040:	e51b1008 	ldr	r1, [fp, #-8]
  102044:	e3a0006e 	mov	r0, #110	; 0x6e
  102048:	eb00e97d 	bl	13c644 <syscall>
  10204c:	e1a03000 	mov	r3, r0
}
  102050:	e1a00003 	mov	r0, r3
  102054:	e24bd004 	sub	sp, fp, #4
  102058:	e8bd8800 	pop	{fp, pc}

0010205c <rt_get_errno>:

rt_err_t rt_get_errno(void)
{
  10205c:	e92d4800 	push	{fp, lr}
  102060:	e28db004 	add	fp, sp, #4
    return (rt_err_t)syscall(_NRSYS_rt_get_errno);
  102064:	e3a0007a 	mov	r0, #122	; 0x7a
  102068:	eb00e975 	bl	13c644 <syscall>
  10206c:	e1a03000 	mov	r3, r0
}
  102070:	e1a00003 	mov	r0, r3
  102074:	e8bd8800 	pop	{fp, pc}

00102078 <rt_thread_find>:
#include <pthread.h>

void __pthread_init_run(void (*enter)(void *parameter), void *parameter);

rt_thread_t rt_thread_find(char *name)
{
  102078:	e92d4800 	push	{fp, lr}
  10207c:	e28db004 	add	fp, sp, #4
  102080:	e24dd008 	sub	sp, sp, #8
  102084:	e50b0008 	str	r0, [fp, #-8]
    return (rt_thread_t)syscall(_NRSYS_rt_thread_find, name);
  102088:	e51b1008 	ldr	r1, [fp, #-8]
  10208c:	e3a00044 	mov	r0, #68	; 0x44
  102090:	eb00e96b 	bl	13c644 <syscall>
  102094:	e1a03000 	mov	r3, r0
}
  102098:	e1a00003 	mov	r0, r3
  10209c:	e24bd004 	sub	sp, fp, #4
  1020a0:	e8bd8800 	pop	{fp, pc}

001020a4 <rt_thread_user_entry>:
    void (*entry)(void *parameter);
    void *parameter;
};

static void rt_thread_user_entry(void *arg)
{
  1020a4:	e92d4800 	push	{fp, lr}
  1020a8:	e28db004 	add	fp, sp, #4
  1020ac:	e24dd018 	sub	sp, sp, #24
  1020b0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    struct rt_thread_startup_ucontext *ucontext;
    void (*entry)(void *parameter);
    void *parameter;

    ucontext = (struct rt_thread_startup_ucontext *)arg;
  1020b4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1020b8:	e50b3008 	str	r3, [fp, #-8]
    entry = ucontext->entry;
  1020bc:	e51b3008 	ldr	r3, [fp, #-8]
  1020c0:	e5933000 	ldr	r3, [r3]
  1020c4:	e50b300c 	str	r3, [fp, #-12]
    parameter = ucontext->parameter;
  1020c8:	e51b3008 	ldr	r3, [fp, #-8]
  1020cc:	e5933004 	ldr	r3, [r3, #4]
  1020d0:	e50b3010 	str	r3, [fp, #-16]
    rt_free(ucontext);
  1020d4:	e51b0008 	ldr	r0, [fp, #-8]
  1020d8:	eb0003b7 	bl	102fbc <rt_free>

    __pthread_init_run(entry, parameter);
  1020dc:	e51b1010 	ldr	r1, [fp, #-16]
  1020e0:	e51b000c 	ldr	r0, [fp, #-12]
  1020e4:	eb010332 	bl	142db4 <__pthread_init_run>
}
  1020e8:	e320f000 	nop	{0}
  1020ec:	e24bd004 	sub	sp, fp, #4
  1020f0:	e8bd8800 	pop	{fp, pc}

001020f4 <rt_thread_create>:
        void (*entry)(void *parameter),
        void       *parameter,
        rt_uint32_t stack_size,
        rt_uint8_t  priority,
        rt_uint32_t tick)
{
  1020f4:	e92d4800 	push	{fp, lr}
  1020f8:	e28db004 	add	fp, sp, #4
  1020fc:	e24dd030 	sub	sp, sp, #48	; 0x30
  102100:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  102104:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  102108:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
  10210c:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
    rt_thread_t thread;
    void * arg[] = {(void *)name, (void*)entry, (void*)parameter, (void*)(size_t)stack_size, (void*)(size_t)priority, (void*)(size_t)tick};
  102110:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  102114:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  102118:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10211c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  102120:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  102124:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  102128:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  10212c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  102130:	e5db3004 	ldrb	r3, [fp, #4]
  102134:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  102138:	e59b3008 	ldr	r3, [fp, #8]
  10213c:	e50b3010 	str	r3, [fp, #-16]
    struct rt_thread_startup_ucontext *ucontext;

    ucontext = rt_malloc(sizeof *ucontext);
  102140:	e3a00008 	mov	r0, #8
  102144:	eb000392 	bl	102f94 <rt_malloc>
  102148:	e50b0008 	str	r0, [fp, #-8]
    if (!ucontext)
  10214c:	e51b3008 	ldr	r3, [fp, #-8]
  102150:	e3530000 	cmp	r3, #0
  102154:	1a000001 	bne	102160 <rt_thread_create+0x6c>
    {
        return RT_NULL;
  102158:	e3a03000 	mov	r3, #0
  10215c:	ea000016 	b	1021bc <rt_thread_create+0xc8>
    }
    ucontext->entry = entry;
  102160:	e51b3008 	ldr	r3, [fp, #-8]
  102164:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  102168:	e5832000 	str	r2, [r3]
    ucontext->parameter = parameter;
  10216c:	e51b3008 	ldr	r3, [fp, #-8]
  102170:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  102174:	e5832004 	str	r2, [r3, #4]
    arg[1] = rt_thread_user_entry;
  102178:	e30230a4 	movw	r3, #8356	; 0x20a4
  10217c:	e3403010 	movt	r3, #16
  102180:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
    arg[2] = ucontext;
  102184:	e51b3008 	ldr	r3, [fp, #-8]
  102188:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

    thread = (rt_thread_t)syscall(_NRSYS_thread_create, arg);
  10218c:	e24b3024 	sub	r3, fp, #36	; 0x24
  102190:	e1a01003 	mov	r1, r3
  102194:	e3a00028 	mov	r0, #40	; 0x28
  102198:	eb00e929 	bl	13c644 <syscall>
  10219c:	e1a03000 	mov	r3, r0
  1021a0:	e50b300c 	str	r3, [fp, #-12]
    if (!thread)
  1021a4:	e51b300c 	ldr	r3, [fp, #-12]
  1021a8:	e3530000 	cmp	r3, #0
  1021ac:	1a000001 	bne	1021b8 <rt_thread_create+0xc4>
    {
        rt_free(ucontext);
  1021b0:	e51b0008 	ldr	r0, [fp, #-8]
  1021b4:	eb000380 	bl	102fbc <rt_free>
    }
    return thread;
  1021b8:	e51b300c 	ldr	r3, [fp, #-12]
}
  1021bc:	e1a00003 	mov	r0, r3
  1021c0:	e24bd004 	sub	sp, fp, #4
  1021c4:	e8bd8800 	pop	{fp, pc}

001021c8 <rt_thread_startup>:

rt_err_t rt_thread_startup(rt_thread_t thread)
{
  1021c8:	e92d4800 	push	{fp, lr}
  1021cc:	e28db004 	add	fp, sp, #4
  1021d0:	e24dd008 	sub	sp, sp, #8
  1021d4:	e50b0008 	str	r0, [fp, #-8]
    return syscall(_NRSYS_thread_startup, thread);
  1021d8:	e51b1008 	ldr	r1, [fp, #-8]
  1021dc:	e3a0002a 	mov	r0, #42	; 0x2a
  1021e0:	eb00e917 	bl	13c644 <syscall>
  1021e4:	e1a03000 	mov	r3, r0
}
  1021e8:	e1a00003 	mov	r0, r3
  1021ec:	e24bd004 	sub	sp, fp, #4
  1021f0:	e8bd8800 	pop	{fp, pc}

001021f4 <rt_thread_self>:

rt_thread_t rt_thread_self(void)
{
  1021f4:	e92d4800 	push	{fp, lr}
  1021f8:	e28db004 	add	fp, sp, #4
    return (rt_thread_t)syscall(_NRSYS_thread_self);
  1021fc:	e3a0002b 	mov	r0, #43	; 0x2b
  102200:	eb00e90f 	bl	13c644 <syscall>
  102204:	e1a03000 	mov	r3, r0
}
  102208:	e1a00003 	mov	r0, r3
  10220c:	e8bd8800 	pop	{fp, pc}

00102210 <rt_thread_delete>:

rt_err_t rt_thread_delete(rt_thread_t thread)
{
  102210:	e92d4800 	push	{fp, lr}
  102214:	e28db004 	add	fp, sp, #4
  102218:	e24dd008 	sub	sp, sp, #8
  10221c:	e50b0008 	str	r0, [fp, #-8]
    return syscall(_NRSYS_thread_delete, thread);
  102220:	e51b1008 	ldr	r1, [fp, #-8]
  102224:	e3a00029 	mov	r0, #41	; 0x29
  102228:	eb00e905 	bl	13c644 <syscall>
  10222c:	e1a03000 	mov	r3, r0
}
  102230:	e1a00003 	mov	r0, r3
  102234:	e24bd004 	sub	sp, fp, #4
  102238:	e8bd8800 	pop	{fp, pc}

0010223c <rt_enter_critical>:

void rt_enter_critical(void)
{
  10223c:	e92d4800 	push	{fp, lr}
  102240:	e28db004 	add	fp, sp, #4
    syscall(_NRSYS_enter_critical);
  102244:	e3a00032 	mov	r0, #50	; 0x32
  102248:	eb00e8fd 	bl	13c644 <syscall>
}
  10224c:	e320f000 	nop	{0}
  102250:	e8bd8800 	pop	{fp, pc}

00102254 <rt_exit_critical>:

void rt_exit_critical(void)
{
  102254:	e92d4800 	push	{fp, lr}
  102258:	e28db004 	add	fp, sp, #4
    syscall(_NRSYS_exit_critical);
  10225c:	e3a00033 	mov	r0, #51	; 0x33
  102260:	eb00e8f7 	bl	13c644 <syscall>
}
  102264:	e320f000 	nop	{0}
  102268:	e8bd8800 	pop	{fp, pc}

0010226c <cacheflush>:

int cacheflush(void *addr, int size, int cache)
{
  10226c:	e92d4800 	push	{fp, lr}
  102270:	e28db004 	add	fp, sp, #4
  102274:	e24dd010 	sub	sp, sp, #16
  102278:	e50b0008 	str	r0, [fp, #-8]
  10227c:	e50b100c 	str	r1, [fp, #-12]
  102280:	e50b2010 	str	r2, [fp, #-16]
    return syscall(_NRSYS_cacheflush, addr, size, cache);
  102284:	e51b3010 	ldr	r3, [fp, #-16]
  102288:	e51b200c 	ldr	r2, [fp, #-12]
  10228c:	e51b1008 	ldr	r1, [fp, #-8]
  102290:	e3a0006b 	mov	r0, #107	; 0x6b
  102294:	eb00e8ea 	bl	13c644 <syscall>
  102298:	e1a03000 	mov	r3, r0
}
  10229c:	e1a00003 	mov	r0, r3
  1022a0:	e24bd004 	sub	sp, fp, #4
  1022a4:	e8bd8800 	pop	{fp, pc}

001022a8 <rt_list_init>:
 * @brief initialize a list
 *
 * @param l list to be initialized
 */
rt_inline void rt_list_init(rt_list_t *l)
{
  1022a8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1022ac:	e28db000 	add	fp, sp, #0
  1022b0:	e24dd00c 	sub	sp, sp, #12
  1022b4:	e50b0008 	str	r0, [fp, #-8]
    l->next = l->prev = l;
  1022b8:	e51b3008 	ldr	r3, [fp, #-8]
  1022bc:	e51b2008 	ldr	r2, [fp, #-8]
  1022c0:	e5832004 	str	r2, [r3, #4]
  1022c4:	e51b3008 	ldr	r3, [fp, #-8]
  1022c8:	e5932004 	ldr	r2, [r3, #4]
  1022cc:	e51b3008 	ldr	r3, [fp, #-8]
  1022d0:	e5832000 	str	r2, [r3]
}
  1022d4:	e320f000 	nop	{0}
  1022d8:	e28bd000 	add	sp, fp, #0
  1022dc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1022e0:	e12fff1e 	bx	lr

001022e4 <rt_list_insert_after>:
 *
 * @param l list to insert it
 * @param n new node to be inserted
 */
rt_inline void rt_list_insert_after(rt_list_t *l, rt_list_t *n)
{
  1022e4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1022e8:	e28db000 	add	fp, sp, #0
  1022ec:	e24dd00c 	sub	sp, sp, #12
  1022f0:	e50b0008 	str	r0, [fp, #-8]
  1022f4:	e50b100c 	str	r1, [fp, #-12]
    l->next->prev = n;
  1022f8:	e51b3008 	ldr	r3, [fp, #-8]
  1022fc:	e5933000 	ldr	r3, [r3]
  102300:	e51b200c 	ldr	r2, [fp, #-12]
  102304:	e5832004 	str	r2, [r3, #4]
    n->next = l->next;
  102308:	e51b3008 	ldr	r3, [fp, #-8]
  10230c:	e5932000 	ldr	r2, [r3]
  102310:	e51b300c 	ldr	r3, [fp, #-12]
  102314:	e5832000 	str	r2, [r3]

    l->next = n;
  102318:	e51b3008 	ldr	r3, [fp, #-8]
  10231c:	e51b200c 	ldr	r2, [fp, #-12]
  102320:	e5832000 	str	r2, [r3]
    n->prev = l;
  102324:	e51b300c 	ldr	r3, [fp, #-12]
  102328:	e51b2008 	ldr	r2, [fp, #-8]
  10232c:	e5832004 	str	r2, [r3, #4]
}
  102330:	e320f000 	nop	{0}
  102334:	e28bd000 	add	sp, fp, #0
  102338:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10233c:	e12fff1e 	bx	lr

00102340 <rt_list_remove>:
/**
 * @brief remove node from list.
 * @param n the node to remove from the list.
 */
rt_inline void rt_list_remove(rt_list_t *n)
{
  102340:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  102344:	e28db000 	add	fp, sp, #0
  102348:	e24dd00c 	sub	sp, sp, #12
  10234c:	e50b0008 	str	r0, [fp, #-8]
    n->next->prev = n->prev;
  102350:	e51b3008 	ldr	r3, [fp, #-8]
  102354:	e5933000 	ldr	r3, [r3]
  102358:	e51b2008 	ldr	r2, [fp, #-8]
  10235c:	e5922004 	ldr	r2, [r2, #4]
  102360:	e5832004 	str	r2, [r3, #4]
    n->prev->next = n->next;
  102364:	e51b3008 	ldr	r3, [fp, #-8]
  102368:	e5933004 	ldr	r3, [r3, #4]
  10236c:	e51b2008 	ldr	r2, [fp, #-8]
  102370:	e5922000 	ldr	r2, [r2]
  102374:	e5832000 	str	r2, [r3]

    n->next = n->prev = n;
  102378:	e51b3008 	ldr	r3, [fp, #-8]
  10237c:	e51b2008 	ldr	r2, [fp, #-8]
  102380:	e5832004 	str	r2, [r3, #4]
  102384:	e51b3008 	ldr	r3, [fp, #-8]
  102388:	e5932004 	ldr	r2, [r3, #4]
  10238c:	e51b3008 	ldr	r3, [fp, #-8]
  102390:	e5832000 	str	r2, [r3]
}
  102394:	e320f000 	nop	{0}
  102398:	e28bd000 	add	sp, fp, #0
  10239c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1023a0:	e12fff1e 	bx	lr

001023a4 <rt_list_isempty>:
/**
 * @brief tests whether a list is empty
 * @param l the list to test.
 */
rt_inline int rt_list_isempty(const rt_list_t *l)
{
  1023a4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1023a8:	e28db000 	add	fp, sp, #0
  1023ac:	e24dd00c 	sub	sp, sp, #12
  1023b0:	e50b0008 	str	r0, [fp, #-8]
    return l->next == l;
  1023b4:	e51b3008 	ldr	r3, [fp, #-8]
  1023b8:	e5933000 	ldr	r3, [r3]
  1023bc:	e51b2008 	ldr	r2, [fp, #-8]
  1023c0:	e1520003 	cmp	r2, r3
  1023c4:	03a03001 	moveq	r3, #1
  1023c8:	13a03000 	movne	r3, #0
  1023cc:	e6ef3073 	uxtb	r3, r3
}
  1023d0:	e1a00003 	mov	r0, r3
  1023d4:	e28bd000 	add	sp, fp, #0
  1023d8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1023dc:	e12fff1e 	bx	lr

001023e0 <_rt_timer_init>:
static void _rt_timer_init(rt_timer_t timer,
                           void (*timeout)(void *parameter),
                           void      *parameter,
                           rt_tick_t  time,
                           rt_uint8_t flag)
{
  1023e0:	e92d4800 	push	{fp, lr}
  1023e4:	e28db004 	add	fp, sp, #4
  1023e8:	e24dd018 	sub	sp, sp, #24
  1023ec:	e50b0010 	str	r0, [fp, #-16]
  1023f0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1023f4:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  1023f8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    int i;

    /* set flag */
    timer->parent.flag  = flag;
  1023fc:	e51b3010 	ldr	r3, [fp, #-16]
  102400:	e5db2004 	ldrb	r2, [fp, #4]
  102404:	e5c32009 	strb	r2, [r3, #9]

    /* set deactivated */
    timer->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
  102408:	e51b3010 	ldr	r3, [fp, #-16]
  10240c:	e5d33009 	ldrb	r3, [r3, #9]
  102410:	e3c33001 	bic	r3, r3, #1
  102414:	e6ef2073 	uxtb	r2, r3
  102418:	e51b3010 	ldr	r3, [fp, #-16]
  10241c:	e5c32009 	strb	r2, [r3, #9]

    timer->timeout_func = timeout;
  102420:	e51b3010 	ldr	r3, [fp, #-16]
  102424:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  102428:	e583201c 	str	r2, [r3, #28]
    timer->parameter    = parameter;
  10242c:	e51b3010 	ldr	r3, [fp, #-16]
  102430:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  102434:	e5832020 	str	r2, [r3, #32]

    timer->timeout_tick = 0;
  102438:	e51b3010 	ldr	r3, [fp, #-16]
  10243c:	e3a02000 	mov	r2, #0
  102440:	e5832028 	str	r2, [r3, #40]	; 0x28
    timer->init_tick    = time;
  102444:	e51b3010 	ldr	r3, [fp, #-16]
  102448:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  10244c:	e5832024 	str	r2, [r3, #36]	; 0x24

    /* initialize timer list */
    for (i = 0; i < RT_TIMER_SKIP_LIST_LEVEL; i++)
  102450:	e3a03000 	mov	r3, #0
  102454:	e50b3008 	str	r3, [fp, #-8]
  102458:	ea00000a 	b	102488 <_rt_timer_init+0xa8>
    {
        rt_list_init(&(timer->row[i]));
  10245c:	e51b3008 	ldr	r3, [fp, #-8]
  102460:	e2833002 	add	r3, r3, #2
  102464:	e1a03183 	lsl	r3, r3, #3
  102468:	e51b2010 	ldr	r2, [fp, #-16]
  10246c:	e0823003 	add	r3, r2, r3
  102470:	e2833004 	add	r3, r3, #4
  102474:	e1a00003 	mov	r0, r3
  102478:	ebffff8a 	bl	1022a8 <rt_list_init>
    for (i = 0; i < RT_TIMER_SKIP_LIST_LEVEL; i++)
  10247c:	e51b3008 	ldr	r3, [fp, #-8]
  102480:	e2833001 	add	r3, r3, #1
  102484:	e50b3008 	str	r3, [fp, #-8]
  102488:	e51b3008 	ldr	r3, [fp, #-8]
  10248c:	e3530000 	cmp	r3, #0
  102490:	dafffff1 	ble	10245c <_rt_timer_init+0x7c>
    }
}
  102494:	e320f000 	nop	{0}
  102498:	e24bd004 	sub	sp, fp, #4
  10249c:	e8bd8800 	pop	{fp, pc}

001024a0 <rt_timer_list_next_timeout>:

/* the fist timer always in the last row */
static rt_tick_t rt_timer_list_next_timeout(rt_list_t timer_list[])
{
  1024a0:	e92d4800 	push	{fp, lr}
  1024a4:	e28db004 	add	fp, sp, #4
  1024a8:	e24dd010 	sub	sp, sp, #16
  1024ac:	e50b0010 	str	r0, [fp, #-16]
    struct rt_timer *timer;

    if (rt_list_isempty(&timer_list[RT_TIMER_SKIP_LIST_LEVEL - 1]))
  1024b0:	e51b0010 	ldr	r0, [fp, #-16]
  1024b4:	ebffffba 	bl	1023a4 <rt_list_isempty>
  1024b8:	e1a03000 	mov	r3, r0
  1024bc:	e3530000 	cmp	r3, #0
  1024c0:	0a000001 	beq	1024cc <rt_timer_list_next_timeout+0x2c>
        return RT_TICK_MAX;
  1024c4:	e3e03000 	mvn	r3, #0
  1024c8:	ea000005 	b	1024e4 <rt_timer_list_next_timeout+0x44>

    timer = rt_list_entry(timer_list[RT_TIMER_SKIP_LIST_LEVEL - 1].next,
  1024cc:	e51b3010 	ldr	r3, [fp, #-16]
  1024d0:	e5933000 	ldr	r3, [r3]
  1024d4:	e2433014 	sub	r3, r3, #20
  1024d8:	e50b3008 	str	r3, [fp, #-8]
                          struct rt_timer, row[RT_TIMER_SKIP_LIST_LEVEL - 1]);

    return timer->timeout_tick;
  1024dc:	e51b3008 	ldr	r3, [fp, #-8]
  1024e0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
}
  1024e4:	e1a00003 	mov	r0, r3
  1024e8:	e24bd004 	sub	sp, fp, #4
  1024ec:	e8bd8800 	pop	{fp, pc}

001024f0 <_rt_timer_remove>:

rt_inline void _rt_timer_remove(rt_timer_t timer)
{
  1024f0:	e92d4800 	push	{fp, lr}
  1024f4:	e28db004 	add	fp, sp, #4
  1024f8:	e24dd010 	sub	sp, sp, #16
  1024fc:	e50b0010 	str	r0, [fp, #-16]
    int i;

    for (i = 0; i < RT_TIMER_SKIP_LIST_LEVEL; i++)
  102500:	e3a03000 	mov	r3, #0
  102504:	e50b3008 	str	r3, [fp, #-8]
  102508:	ea00000a 	b	102538 <_rt_timer_remove+0x48>
    {
        rt_list_remove(&timer->row[i]);
  10250c:	e51b3008 	ldr	r3, [fp, #-8]
  102510:	e2833002 	add	r3, r3, #2
  102514:	e1a03183 	lsl	r3, r3, #3
  102518:	e51b2010 	ldr	r2, [fp, #-16]
  10251c:	e0823003 	add	r3, r2, r3
  102520:	e2833004 	add	r3, r3, #4
  102524:	e1a00003 	mov	r0, r3
  102528:	ebffff84 	bl	102340 <rt_list_remove>
    for (i = 0; i < RT_TIMER_SKIP_LIST_LEVEL; i++)
  10252c:	e51b3008 	ldr	r3, [fp, #-8]
  102530:	e2833001 	add	r3, r3, #1
  102534:	e50b3008 	str	r3, [fp, #-8]
  102538:	e51b3008 	ldr	r3, [fp, #-8]
  10253c:	e3530000 	cmp	r3, #0
  102540:	dafffff1 	ble	10250c <_rt_timer_remove+0x1c>
    }
}
  102544:	e320f000 	nop	{0}
  102548:	e24bd004 	sub	sp, fp, #4
  10254c:	e8bd8800 	pop	{fp, pc}

00102550 <rt_timer_init>:
                   const char *name,
                   void (*timeout)(void *parameter),
                   void       *parameter,
                   rt_tick_t   time,
                   rt_uint8_t  flag)
{
  102550:	e92d4800 	push	{fp, lr}
  102554:	e28db004 	add	fp, sp, #4
  102558:	e24dd018 	sub	sp, sp, #24
  10255c:	e50b0008 	str	r0, [fp, #-8]
  102560:	e50b100c 	str	r1, [fp, #-12]
  102564:	e50b2010 	str	r2, [fp, #-16]
  102568:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    _rt_timer_init(timer, timeout, parameter, time, flag);
  10256c:	e5db3008 	ldrb	r3, [fp, #8]
  102570:	e58d3000 	str	r3, [sp]
  102574:	e59b3004 	ldr	r3, [fp, #4]
  102578:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  10257c:	e51b1010 	ldr	r1, [fp, #-16]
  102580:	e51b0008 	ldr	r0, [fp, #-8]
  102584:	ebffff95 	bl	1023e0 <_rt_timer_init>
}
  102588:	e320f000 	nop	{0}
  10258c:	e24bd004 	sub	sp, fp, #4
  102590:	e8bd8800 	pop	{fp, pc}

00102594 <rt_timer_detach>:
 * @param timer the static timer object
 *
 * @return the operation status, RT_EOK on OK; RT_ERROR on error
 */
rt_err_t rt_timer_detach(rt_timer_t timer)
{
  102594:	e92d4800 	push	{fp, lr}
  102598:	e28db004 	add	fp, sp, #4
  10259c:	e24dd008 	sub	sp, sp, #8
  1025a0:	e50b0008 	str	r0, [fp, #-8]

    /* make sure take mutex */
    while(rt_mutex_take(mutex, RT_WAITING_FOREVER) != RT_EOK);
  1025a4:	e320f000 	nop	{0}
  1025a8:	e30e3410 	movw	r3, #58384	; 0xe410
  1025ac:	e3403014 	movt	r3, #20
  1025b0:	e5933000 	ldr	r3, [r3]
  1025b4:	e3e01000 	mvn	r1, #0
  1025b8:	e1a00003 	mov	r0, r3
  1025bc:	ebfffa4f 	bl	100f00 <rt_mutex_take>
  1025c0:	e1a03000 	mov	r3, r0
  1025c4:	e3530000 	cmp	r3, #0
  1025c8:	1afffff6 	bne	1025a8 <rt_timer_detach+0x14>

    _rt_timer_remove(timer);
  1025cc:	e51b0008 	ldr	r0, [fp, #-8]
  1025d0:	ebffffc6 	bl	1024f0 <_rt_timer_remove>

    /* release mutex */
    rt_mutex_release(mutex);
  1025d4:	e30e3410 	movw	r3, #58384	; 0xe410
  1025d8:	e3403014 	movt	r3, #20
  1025dc:	e5933000 	ldr	r3, [r3]
  1025e0:	e1a00003 	mov	r0, r3
  1025e4:	ebfffa63 	bl	100f78 <rt_mutex_release>

    return RT_EOK;
  1025e8:	e3a03000 	mov	r3, #0
}
  1025ec:	e1a00003 	mov	r0, r3
  1025f0:	e24bd004 	sub	sp, fp, #4
  1025f4:	e8bd8800 	pop	{fp, pc}

001025f8 <rt_timer_create>:
rt_timer_t rt_timer_create(const char *name,
                           void (*timeout)(void *parameter),
                           void       *parameter,
                           rt_tick_t   time,
                           rt_uint8_t  flag)
{
  1025f8:	e92d4800 	push	{fp, lr}
  1025fc:	e28db004 	add	fp, sp, #4
  102600:	e24dd020 	sub	sp, sp, #32
  102604:	e50b0010 	str	r0, [fp, #-16]
  102608:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10260c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  102610:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    struct rt_timer *timer;

    /* allocate a timer object */
    timer = (struct rt_timer *)malloc(sizeof(struct rt_timer));
  102614:	e3a0002c 	mov	r0, #44	; 0x2c
  102618:	eb00ebc6 	bl	13d538 <malloc>
  10261c:	e1a03000 	mov	r3, r0
  102620:	e50b3008 	str	r3, [fp, #-8]
    if (timer == RT_NULL)
  102624:	e51b3008 	ldr	r3, [fp, #-8]
  102628:	e3530000 	cmp	r3, #0
  10262c:	1a000001 	bne	102638 <rt_timer_create+0x40>
    {
        return RT_NULL;
  102630:	e3a03000 	mov	r3, #0
  102634:	ea000007 	b	102658 <rt_timer_create+0x60>
    }

    _rt_timer_init(timer, timeout, parameter, time, flag);
  102638:	e5db3004 	ldrb	r3, [fp, #4]
  10263c:	e58d3000 	str	r3, [sp]
  102640:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  102644:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  102648:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10264c:	e51b0008 	ldr	r0, [fp, #-8]
  102650:	ebffff62 	bl	1023e0 <_rt_timer_init>

    return timer;
  102654:	e51b3008 	ldr	r3, [fp, #-8]
}
  102658:	e1a00003 	mov	r0, r3
  10265c:	e24bd004 	sub	sp, fp, #4
  102660:	e8bd8800 	pop	{fp, pc}

00102664 <rt_timer_delete>:
 * @param timer the timer to be deleted
 *
 * @return the operation status, RT_EOK on OK; RT_ERROR on error
 */
rt_err_t rt_timer_delete(rt_timer_t timer)
{
  102664:	e92d4800 	push	{fp, lr}
  102668:	e28db004 	add	fp, sp, #4
  10266c:	e24dd008 	sub	sp, sp, #8
  102670:	e50b0008 	str	r0, [fp, #-8]

    /* make sure take mutex */
    while(rt_mutex_take(mutex, RT_WAITING_FOREVER) != RT_EOK);
  102674:	e320f000 	nop	{0}
  102678:	e30e3410 	movw	r3, #58384	; 0xe410
  10267c:	e3403014 	movt	r3, #20
  102680:	e5933000 	ldr	r3, [r3]
  102684:	e3e01000 	mvn	r1, #0
  102688:	e1a00003 	mov	r0, r3
  10268c:	ebfffa1b 	bl	100f00 <rt_mutex_take>
  102690:	e1a03000 	mov	r3, r0
  102694:	e3530000 	cmp	r3, #0
  102698:	1afffff6 	bne	102678 <rt_timer_delete+0x14>

    _rt_timer_remove(timer);
  10269c:	e51b0008 	ldr	r0, [fp, #-8]
  1026a0:	ebffff92 	bl	1024f0 <_rt_timer_remove>

    /*free timer object */
    free(timer);
  1026a4:	e51b0008 	ldr	r0, [fp, #-8]
  1026a8:	eb00ed5e 	bl	13dc28 <free>

    /* release mutex */
    rt_mutex_release(mutex);
  1026ac:	e30e3410 	movw	r3, #58384	; 0xe410
  1026b0:	e3403014 	movt	r3, #20
  1026b4:	e5933000 	ldr	r3, [r3]
  1026b8:	e1a00003 	mov	r0, r3
  1026bc:	ebfffa2d 	bl	100f78 <rt_mutex_release>

    return RT_EOK;
  1026c0:	e3a03000 	mov	r3, #0
}
  1026c4:	e1a00003 	mov	r0, r3
  1026c8:	e24bd004 	sub	sp, fp, #4
  1026cc:	e8bd8800 	pop	{fp, pc}

001026d0 <rt_timer_start>:
 * @param timer the timer to be started
 *
 * @return the operation status, RT_EOK on OK, -RT_ERROR on error
 */
rt_err_t rt_timer_start(rt_timer_t timer)
{
  1026d0:	e92d4800 	push	{fp, lr}
  1026d4:	e28db004 	add	fp, sp, #4
  1026d8:	e24dd020 	sub	sp, sp, #32
  1026dc:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
    rt_list_t *row_head[RT_TIMER_SKIP_LIST_LEVEL];
    unsigned int tst_nr;
    static unsigned int random_nr;

    /* make sure take mutex */
    while(rt_mutex_take(mutex, RT_WAITING_FOREVER) != RT_EOK);
  1026e0:	e320f000 	nop	{0}
  1026e4:	e30e3410 	movw	r3, #58384	; 0xe410
  1026e8:	e3403014 	movt	r3, #20
  1026ec:	e5933000 	ldr	r3, [r3]
  1026f0:	e3e01000 	mvn	r1, #0
  1026f4:	e1a00003 	mov	r0, r3
  1026f8:	ebfffa00 	bl	100f00 <rt_mutex_take>
  1026fc:	e1a03000 	mov	r3, r0
  102700:	e3530000 	cmp	r3, #0
  102704:	1afffff6 	bne	1026e4 <rt_timer_start+0x14>
    /* remove timer from list */
    _rt_timer_remove(timer);
  102708:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  10270c:	ebffff77 	bl	1024f0 <_rt_timer_remove>
    /* change status of timer */
    timer->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
  102710:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  102714:	e5d33009 	ldrb	r3, [r3, #9]
  102718:	e3c33001 	bic	r3, r3, #1
  10271c:	e6ef2073 	uxtb	r2, r3
  102720:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  102724:	e5c32009 	strb	r2, [r3, #9]
    /* release mutex */
    rt_mutex_release(mutex);
  102728:	e30e3410 	movw	r3, #58384	; 0xe410
  10272c:	e3403014 	movt	r3, #20
  102730:	e5933000 	ldr	r3, [r3]
  102734:	e1a00003 	mov	r0, r3
  102738:	ebfffa0e 	bl	100f78 <rt_mutex_release>

    /*
     * get timeout tick,
     * the max timeout tick shall not great than RT_TICK_MAX/2
     */
    timer->timeout_tick = rt_tick_get() + timer->init_tick;
  10273c:	ebfffdc7 	bl	101e60 <rt_tick_get>
  102740:	e1a02000 	mov	r2, r0
  102744:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  102748:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  10274c:	e0822003 	add	r2, r2, r3
  102750:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  102754:	e5832028 	str	r2, [r3, #40]	; 0x28

    /* make sure take mutex */
    while(rt_mutex_take(mutex, RT_WAITING_FOREVER) != RT_EOK);
  102758:	e320f000 	nop	{0}
  10275c:	e30e3410 	movw	r3, #58384	; 0xe410
  102760:	e3403014 	movt	r3, #20
  102764:	e5933000 	ldr	r3, [r3]
  102768:	e3e01000 	mvn	r1, #0
  10276c:	e1a00003 	mov	r0, r3
  102770:	ebfff9e2 	bl	100f00 <rt_mutex_take>
  102774:	e1a03000 	mov	r3, r0
  102778:	e3530000 	cmp	r3, #0
  10277c:	1afffff6 	bne	10275c <rt_timer_start+0x8c>

    /* insert timer to soft timer list */
    timer_list = rt_soft_timer_list;
  102780:	e30e3418 	movw	r3, #58392	; 0xe418
  102784:	e3403014 	movt	r3, #20
  102788:	e50b3010 	str	r3, [fp, #-16]

    row_head[0]  = &timer_list[0];
  10278c:	e51b3010 	ldr	r3, [fp, #-16]
  102790:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    for (row_lvl = 0; row_lvl < RT_TIMER_SKIP_LIST_LEVEL; row_lvl++)
  102794:	e3a03000 	mov	r3, #0
  102798:	e50b3008 	str	r3, [fp, #-8]
  10279c:	ea000047 	b	1028c0 <rt_timer_start+0x1f0>
    {
        for (; row_head[row_lvl] != timer_list[row_lvl].prev;
             row_head[row_lvl]  = row_head[row_lvl]->next)
        {
            struct rt_timer *t;
            rt_list_t *p = row_head[row_lvl]->next;
  1027a0:	e51b3008 	ldr	r3, [fp, #-8]
  1027a4:	e1a03103 	lsl	r3, r3, #2
  1027a8:	e24b2004 	sub	r2, fp, #4
  1027ac:	e0823003 	add	r3, r2, r3
  1027b0:	e5133018 	ldr	r3, [r3, #-24]	; 0xffffffe8
  1027b4:	e5933000 	ldr	r3, [r3]
  1027b8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

            /* fix up the entry pointer */
            t = rt_list_entry(p, struct rt_timer, row[row_lvl]);
  1027bc:	e51b3008 	ldr	r3, [fp, #-8]
  1027c0:	e1a03183 	lsl	r3, r3, #3
  1027c4:	e2833014 	add	r3, r3, #20
  1027c8:	e2633000 	rsb	r3, r3, #0
  1027cc:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1027d0:	e0823003 	add	r3, r2, r3
  1027d4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
            /* If we have two timers that timeout at the same time, it's
             * preferred that the timer inserted early get called early.
             * So insert the new timer to the end the the some-timeout timer
             * list.
             */
            if ((t->timeout_tick - timer->timeout_tick) == 0)
  1027d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1027dc:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  1027e0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1027e4:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  1027e8:	e1520003 	cmp	r2, r3
  1027ec:	0a000007 	beq	102810 <rt_timer_start+0x140>
            {
                continue;
            }
            else if ((t->timeout_tick - timer->timeout_tick) < RT_TICK_MAX / 2)
  1027f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1027f4:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  1027f8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1027fc:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  102800:	e0423003 	sub	r3, r2, r3
  102804:	e373010a 	cmn	r3, #-2147483646	; 0x80000002
  102808:	9a000019 	bls	102874 <rt_timer_start+0x1a4>
  10280c:	ea000000 	b	102814 <rt_timer_start+0x144>
                continue;
  102810:	e320f000 	nop	{0}
             row_head[row_lvl]  = row_head[row_lvl]->next)
  102814:	e51b3008 	ldr	r3, [fp, #-8]
  102818:	e1a03103 	lsl	r3, r3, #2
  10281c:	e24b2004 	sub	r2, fp, #4
  102820:	e0823003 	add	r3, r2, r3
  102824:	e5133018 	ldr	r3, [r3, #-24]	; 0xffffffe8
  102828:	e5932000 	ldr	r2, [r3]
  10282c:	e51b3008 	ldr	r3, [fp, #-8]
  102830:	e1a03103 	lsl	r3, r3, #2
  102834:	e24b1004 	sub	r1, fp, #4
  102838:	e0813003 	add	r3, r1, r3
  10283c:	e5032018 	str	r2, [r3, #-24]	; 0xffffffe8
        for (; row_head[row_lvl] != timer_list[row_lvl].prev;
  102840:	e51b3008 	ldr	r3, [fp, #-8]
  102844:	e1a03103 	lsl	r3, r3, #2
  102848:	e24b2004 	sub	r2, fp, #4
  10284c:	e0823003 	add	r3, r2, r3
  102850:	e5132018 	ldr	r2, [r3, #-24]	; 0xffffffe8
  102854:	e51b3008 	ldr	r3, [fp, #-8]
  102858:	e1a03183 	lsl	r3, r3, #3
  10285c:	e51b1010 	ldr	r1, [fp, #-16]
  102860:	e0813003 	add	r3, r1, r3
  102864:	e5933004 	ldr	r3, [r3, #4]
  102868:	e1520003 	cmp	r2, r3
  10286c:	1affffcb 	bne	1027a0 <rt_timer_start+0xd0>
  102870:	ea000000 	b	102878 <rt_timer_start+0x1a8>
            {
                break;
  102874:	e320f000 	nop	{0}
            }
        }
        if (row_lvl != RT_TIMER_SKIP_LIST_LEVEL - 1)
  102878:	e51b3008 	ldr	r3, [fp, #-8]
  10287c:	e3530000 	cmp	r3, #0
  102880:	0a00000b 	beq	1028b4 <rt_timer_start+0x1e4>
            row_head[row_lvl + 1] = row_head[row_lvl] + 1;
  102884:	e51b3008 	ldr	r3, [fp, #-8]
  102888:	e1a03103 	lsl	r3, r3, #2
  10288c:	e24b2004 	sub	r2, fp, #4
  102890:	e0823003 	add	r3, r2, r3
  102894:	e5132018 	ldr	r2, [r3, #-24]	; 0xffffffe8
  102898:	e51b3008 	ldr	r3, [fp, #-8]
  10289c:	e2833001 	add	r3, r3, #1
  1028a0:	e2822008 	add	r2, r2, #8
  1028a4:	e1a03103 	lsl	r3, r3, #2
  1028a8:	e24b1004 	sub	r1, fp, #4
  1028ac:	e0813003 	add	r3, r1, r3
  1028b0:	e5032018 	str	r2, [r3, #-24]	; 0xffffffe8
    for (row_lvl = 0; row_lvl < RT_TIMER_SKIP_LIST_LEVEL; row_lvl++)
  1028b4:	e51b3008 	ldr	r3, [fp, #-8]
  1028b8:	e2833001 	add	r3, r3, #1
  1028bc:	e50b3008 	str	r3, [fp, #-8]
  1028c0:	e51b3008 	ldr	r3, [fp, #-8]
  1028c4:	e3530000 	cmp	r3, #0
  1028c8:	0affffdc 	beq	102840 <rt_timer_start+0x170>

    /* Interestingly, this super simple timer insert counter works very very
     * well on distributing the list height uniformly. By means of "very very
     * well", I mean it beats the randomness of timer->timeout_tick very easily
     * (actually, the timeout_tick is not random and easy to be attacked). */
    random_nr++;
  1028cc:	e30e3420 	movw	r3, #58400	; 0xe420
  1028d0:	e3403014 	movt	r3, #20
  1028d4:	e5933000 	ldr	r3, [r3]
  1028d8:	e2832001 	add	r2, r3, #1
  1028dc:	e30e3420 	movw	r3, #58400	; 0xe420
  1028e0:	e3403014 	movt	r3, #20
  1028e4:	e5832000 	str	r2, [r3]
    tst_nr = random_nr;
  1028e8:	e30e3420 	movw	r3, #58400	; 0xe420
  1028ec:	e3403014 	movt	r3, #20
  1028f0:	e5933000 	ldr	r3, [r3]
  1028f4:	e50b300c 	str	r3, [fp, #-12]

    rt_list_insert_after(row_head[RT_TIMER_SKIP_LIST_LEVEL - 1],
  1028f8:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1028fc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  102900:	e2833014 	add	r3, r3, #20
  102904:	e1a01003 	mov	r1, r3
  102908:	e1a00002 	mov	r0, r2
  10290c:	ebfffe74 	bl	1022e4 <rt_list_insert_after>
                         &(timer->row[RT_TIMER_SKIP_LIST_LEVEL - 1]));
    for (row_lvl = 2; row_lvl <= RT_TIMER_SKIP_LIST_LEVEL; row_lvl++)
  102910:	e3a03002 	mov	r3, #2
  102914:	e50b3008 	str	r3, [fp, #-8]
  102918:	ea000018 	b	102980 <rt_timer_start+0x2b0>
    {
        if (!(tst_nr & RT_TIMER_SKIP_LIST_MASK))
  10291c:	e51b300c 	ldr	r3, [fp, #-12]
  102920:	e2033003 	and	r3, r3, #3
  102924:	e3530000 	cmp	r3, #0
  102928:	1a000018 	bne	102990 <rt_timer_start+0x2c0>
            rt_list_insert_after(row_head[RT_TIMER_SKIP_LIST_LEVEL - row_lvl],
  10292c:	e51b3008 	ldr	r3, [fp, #-8]
  102930:	e2633001 	rsb	r3, r3, #1
  102934:	e1a03103 	lsl	r3, r3, #2
  102938:	e24b2004 	sub	r2, fp, #4
  10293c:	e0823003 	add	r3, r2, r3
  102940:	e5130018 	ldr	r0, [r3, #-24]	; 0xffffffe8
                                 &(timer->row[RT_TIMER_SKIP_LIST_LEVEL - row_lvl]));
  102944:	e51b3008 	ldr	r3, [fp, #-8]
  102948:	e2633001 	rsb	r3, r3, #1
            rt_list_insert_after(row_head[RT_TIMER_SKIP_LIST_LEVEL - row_lvl],
  10294c:	e2833002 	add	r3, r3, #2
  102950:	e1a03183 	lsl	r3, r3, #3
  102954:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  102958:	e0823003 	add	r3, r2, r3
  10295c:	e2833004 	add	r3, r3, #4
  102960:	e1a01003 	mov	r1, r3
  102964:	ebfffe5e 	bl	1022e4 <rt_list_insert_after>
        else
            break;
        /* Shift over the bits we have tested. Works well with 1 bit and 2
         * bits. */
        tst_nr >>= (RT_TIMER_SKIP_LIST_MASK + 1) >> 1;
  102968:	e51b300c 	ldr	r3, [fp, #-12]
  10296c:	e1a03123 	lsr	r3, r3, #2
  102970:	e50b300c 	str	r3, [fp, #-12]
    for (row_lvl = 2; row_lvl <= RT_TIMER_SKIP_LIST_LEVEL; row_lvl++)
  102974:	e51b3008 	ldr	r3, [fp, #-8]
  102978:	e2833001 	add	r3, r3, #1
  10297c:	e50b3008 	str	r3, [fp, #-8]
  102980:	e51b3008 	ldr	r3, [fp, #-8]
  102984:	e3530001 	cmp	r3, #1
  102988:	9affffe3 	bls	10291c <rt_timer_start+0x24c>
  10298c:	ea000000 	b	102994 <rt_timer_start+0x2c4>
            break;
  102990:	e320f000 	nop	{0}
    }

    timer->parent.flag |= RT_TIMER_FLAG_ACTIVATED;
  102994:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  102998:	e5d33009 	ldrb	r3, [r3, #9]
  10299c:	e3833001 	orr	r3, r3, #1
  1029a0:	e6ef2073 	uxtb	r2, r3
  1029a4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1029a8:	e5c32009 	strb	r2, [r3, #9]

    /* release mutex */
    rt_mutex_release(mutex);
  1029ac:	e30e3410 	movw	r3, #58384	; 0xe410
  1029b0:	e3403014 	movt	r3, #20
  1029b4:	e5933000 	ldr	r3, [r3]
  1029b8:	e1a00003 	mov	r0, r3
  1029bc:	ebfff96d 	bl	100f78 <rt_mutex_release>

    /* update hardware timer */
    rt_hw_timer_update();
  1029c0:	eb0000cc 	bl	102cf8 <rt_hw_timer_update>

    return RT_EOK;
  1029c4:	e3a03000 	mov	r3, #0
}
  1029c8:	e1a00003 	mov	r0, r3
  1029cc:	e24bd004 	sub	sp, fp, #4
  1029d0:	e8bd8800 	pop	{fp, pc}

001029d4 <rt_timer_stop>:
 * @param timer the timer to be stopped
 *
 * @return the operation status, RT_EOK on OK, -RT_ERROR on error
 */
rt_err_t rt_timer_stop(rt_timer_t timer)
{
  1029d4:	e92d4800 	push	{fp, lr}
  1029d8:	e28db004 	add	fp, sp, #4
  1029dc:	e24dd008 	sub	sp, sp, #8
  1029e0:	e50b0008 	str	r0, [fp, #-8]
    if (!(timer->parent.flag & RT_TIMER_FLAG_ACTIVATED))
  1029e4:	e51b3008 	ldr	r3, [fp, #-8]
  1029e8:	e5d33009 	ldrb	r3, [r3, #9]
  1029ec:	e2033001 	and	r3, r3, #1
  1029f0:	e3530000 	cmp	r3, #0
  1029f4:	1a000001 	bne	102a00 <rt_timer_stop+0x2c>
        return -RT_ERROR;
  1029f8:	e3e03000 	mvn	r3, #0
  1029fc:	ea000017 	b	102a60 <rt_timer_stop+0x8c>

    /* make sure take mutex */
    while(rt_mutex_take(mutex, RT_WAITING_FOREVER) != RT_EOK);
  102a00:	e320f000 	nop	{0}
  102a04:	e30e3410 	movw	r3, #58384	; 0xe410
  102a08:	e3403014 	movt	r3, #20
  102a0c:	e5933000 	ldr	r3, [r3]
  102a10:	e3e01000 	mvn	r1, #0
  102a14:	e1a00003 	mov	r0, r3
  102a18:	ebfff938 	bl	100f00 <rt_mutex_take>
  102a1c:	e1a03000 	mov	r3, r0
  102a20:	e3530000 	cmp	r3, #0
  102a24:	1afffff6 	bne	102a04 <rt_timer_stop+0x30>

    _rt_timer_remove(timer);
  102a28:	e51b0008 	ldr	r0, [fp, #-8]
  102a2c:	ebfffeaf 	bl	1024f0 <_rt_timer_remove>

    /* release mutex */
    rt_mutex_release(mutex);
  102a30:	e30e3410 	movw	r3, #58384	; 0xe410
  102a34:	e3403014 	movt	r3, #20
  102a38:	e5933000 	ldr	r3, [r3]
  102a3c:	e1a00003 	mov	r0, r3
  102a40:	ebfff94c 	bl	100f78 <rt_mutex_release>

    /* change stat */
    timer->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
  102a44:	e51b3008 	ldr	r3, [fp, #-8]
  102a48:	e5d33009 	ldrb	r3, [r3, #9]
  102a4c:	e3c33001 	bic	r3, r3, #1
  102a50:	e6ef2073 	uxtb	r2, r3
  102a54:	e51b3008 	ldr	r3, [fp, #-8]
  102a58:	e5c32009 	strb	r2, [r3, #9]

    return RT_EOK;
  102a5c:	e3a03000 	mov	r3, #0
}
  102a60:	e1a00003 	mov	r0, r3
  102a64:	e24bd004 	sub	sp, fp, #4
  102a68:	e8bd8800 	pop	{fp, pc}

00102a6c <rt_timer_control>:
 * @param arg the argument
 *
 * @return RT_EOK
 */
rt_err_t rt_timer_control(rt_timer_t timer, int cmd, void *arg)
{
  102a6c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  102a70:	e28db000 	add	fp, sp, #0
  102a74:	e24dd014 	sub	sp, sp, #20
  102a78:	e50b0008 	str	r0, [fp, #-8]
  102a7c:	e50b100c 	str	r1, [fp, #-12]
  102a80:	e50b2010 	str	r2, [fp, #-16]
    switch (cmd)
  102a84:	e51b300c 	ldr	r3, [fp, #-12]
  102a88:	e3530008 	cmp	r3, #8
  102a8c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  102a90:	ea000032 	b	102b60 <rt_timer_control+0xf4>
  102a94:	00102acc 	.word	0x00102acc
  102a98:	00102ab8 	.word	0x00102ab8
  102a9c:	00102ae0 	.word	0x00102ae0
  102aa0:	00102afc 	.word	0x00102afc
  102aa4:	00102b60 	.word	0x00102b60
  102aa8:	00102b18 	.word	0x00102b18
  102aac:	00102b2c 	.word	0x00102b2c
  102ab0:	00102b3c 	.word	0x00102b3c
  102ab4:	00102b50 	.word	0x00102b50
    {
    case RT_TIMER_CTRL_GET_TIME:
        *(rt_tick_t *)arg = timer->init_tick;
  102ab8:	e51b3008 	ldr	r3, [fp, #-8]
  102abc:	e5932024 	ldr	r2, [r3, #36]	; 0x24
  102ac0:	e51b3010 	ldr	r3, [fp, #-16]
  102ac4:	e5832000 	str	r2, [r3]
        break;
  102ac8:	ea000024 	b	102b60 <rt_timer_control+0xf4>

    case RT_TIMER_CTRL_SET_TIME:
        timer->init_tick = *(rt_tick_t *)arg;
  102acc:	e51b3010 	ldr	r3, [fp, #-16]
  102ad0:	e5932000 	ldr	r2, [r3]
  102ad4:	e51b3008 	ldr	r3, [fp, #-8]
  102ad8:	e5832024 	str	r2, [r3, #36]	; 0x24
        break;
  102adc:	ea00001f 	b	102b60 <rt_timer_control+0xf4>

    case RT_TIMER_CTRL_SET_ONESHOT:
        timer->parent.flag &= ~RT_TIMER_FLAG_PERIODIC;
  102ae0:	e51b3008 	ldr	r3, [fp, #-8]
  102ae4:	e5d33009 	ldrb	r3, [r3, #9]
  102ae8:	e3c33002 	bic	r3, r3, #2
  102aec:	e6ef2073 	uxtb	r2, r3
  102af0:	e51b3008 	ldr	r3, [fp, #-8]
  102af4:	e5c32009 	strb	r2, [r3, #9]
        break;
  102af8:	ea000018 	b	102b60 <rt_timer_control+0xf4>

    case RT_TIMER_CTRL_SET_PERIODIC:
        timer->parent.flag |= RT_TIMER_FLAG_PERIODIC;
  102afc:	e51b3008 	ldr	r3, [fp, #-8]
  102b00:	e5d33009 	ldrb	r3, [r3, #9]
  102b04:	e3833002 	orr	r3, r3, #2
  102b08:	e6ef2073 	uxtb	r2, r3
  102b0c:	e51b3008 	ldr	r3, [fp, #-8]
  102b10:	e5c32009 	strb	r2, [r3, #9]
        break;
  102b14:	ea000011 	b	102b60 <rt_timer_control+0xf4>

    case RT_TIMER_CTRL_GET_FUNC:
        *(void **)arg = timer->timeout_func;
  102b18:	e51b3008 	ldr	r3, [fp, #-8]
  102b1c:	e593201c 	ldr	r2, [r3, #28]
  102b20:	e51b3010 	ldr	r3, [fp, #-16]
  102b24:	e5832000 	str	r2, [r3]
        break;
  102b28:	ea00000c 	b	102b60 <rt_timer_control+0xf4>

    case RT_TIMER_CTRL_SET_FUNC:
        timer->timeout_func = (void (*)(void*))arg;
  102b2c:	e51b2010 	ldr	r2, [fp, #-16]
  102b30:	e51b3008 	ldr	r3, [fp, #-8]
  102b34:	e583201c 	str	r2, [r3, #28]
        break;
  102b38:	ea000008 	b	102b60 <rt_timer_control+0xf4>

    case RT_TIMER_CTRL_GET_PARM:
        *(void **)arg = timer->parameter;
  102b3c:	e51b3008 	ldr	r3, [fp, #-8]
  102b40:	e5932020 	ldr	r2, [r3, #32]
  102b44:	e51b3010 	ldr	r3, [fp, #-16]
  102b48:	e5832000 	str	r2, [r3]
        break;
  102b4c:	ea000003 	b	102b60 <rt_timer_control+0xf4>

    case RT_TIMER_CTRL_SET_PARM:
        timer->parameter = arg;
  102b50:	e51b3008 	ldr	r3, [fp, #-8]
  102b54:	e51b2010 	ldr	r2, [fp, #-16]
  102b58:	e5832020 	str	r2, [r3, #32]
        break;
  102b5c:	e320f000 	nop	{0}
    }

    return RT_EOK;
  102b60:	e3a03000 	mov	r3, #0
}
  102b64:	e1a00003 	mov	r0, r3
  102b68:	e28bd000 	add	sp, fp, #0
  102b6c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  102b70:	e12fff1e 	bx	lr

00102b74 <rt_soft_timer_check>:
/**
 * This function will check timer list, if a timeout event happens, the
 * corresponding timeout function will be invoked.
 */
void rt_soft_timer_check(void)
{
  102b74:	e92d4800 	push	{fp, lr}
  102b78:	e28db004 	add	fp, sp, #4
  102b7c:	e24dd010 	sub	sp, sp, #16
    rt_list_t *n;
    struct rt_timer *t;

    RT_DEBUG_LOG(RT_DEBUG_TIMER, ("software timer check enter\n"));

    current_tick = rt_tick_get();
  102b80:	ebfffcb6 	bl	101e60 <rt_tick_get>
  102b84:	e50b0008 	str	r0, [fp, #-8]

    /* make sure take mutex */
    while(rt_mutex_take(mutex, RT_WAITING_FOREVER) != RT_EOK);
  102b88:	e320f000 	nop	{0}
  102b8c:	e30e3410 	movw	r3, #58384	; 0xe410
  102b90:	e3403014 	movt	r3, #20
  102b94:	e5933000 	ldr	r3, [r3]
  102b98:	e3e01000 	mvn	r1, #0
  102b9c:	e1a00003 	mov	r0, r3
  102ba0:	ebfff8d6 	bl	100f00 <rt_mutex_take>
  102ba4:	e1a03000 	mov	r3, r0
  102ba8:	e3530000 	cmp	r3, #0
  102bac:	1afffff6 	bne	102b8c <rt_soft_timer_check+0x18>

    for (n = rt_soft_timer_list[RT_TIMER_SKIP_LIST_LEVEL - 1].next;
  102bb0:	e30e3418 	movw	r3, #58392	; 0xe418
  102bb4:	e3403014 	movt	r3, #20
  102bb8:	e5933000 	ldr	r3, [r3]
  102bbc:	e50b300c 	str	r3, [fp, #-12]
  102bc0:	ea00003d 	b	102cbc <rt_soft_timer_check+0x148>
         n != &(rt_soft_timer_list[RT_TIMER_SKIP_LIST_LEVEL - 1]);)
    {
        t = rt_list_entry(n, struct rt_timer, row[RT_TIMER_SKIP_LIST_LEVEL - 1]);
  102bc4:	e51b300c 	ldr	r3, [fp, #-12]
  102bc8:	e2433014 	sub	r3, r3, #20
  102bcc:	e50b3010 	str	r3, [fp, #-16]

        /*
         * It supposes that the new tick shall less than the half duration of
         * tick max.
         */
        if ((current_tick - t->timeout_tick) < RT_TICK_MAX / 2)
  102bd0:	e51b3010 	ldr	r3, [fp, #-16]
  102bd4:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  102bd8:	e51b2008 	ldr	r2, [fp, #-8]
  102bdc:	e0423003 	sub	r3, r2, r3
  102be0:	e373010a 	cmn	r3, #-2147483646	; 0x80000002
  102be4:	8a00003a 	bhi	102cd4 <rt_soft_timer_check+0x160>
        {
            /* move node to the next */
            n = n->next;
  102be8:	e51b300c 	ldr	r3, [fp, #-12]
  102bec:	e5933000 	ldr	r3, [r3]
  102bf0:	e50b300c 	str	r3, [fp, #-12]

            /* remove timer from timer list firstly */
            _rt_timer_remove(t);
  102bf4:	e51b0010 	ldr	r0, [fp, #-16]
  102bf8:	ebfffe3c 	bl	1024f0 <_rt_timer_remove>

            /* release mutex */
            rt_mutex_release(mutex);
  102bfc:	e30e3410 	movw	r3, #58384	; 0xe410
  102c00:	e3403014 	movt	r3, #20
  102c04:	e5933000 	ldr	r3, [r3]
  102c08:	e1a00003 	mov	r0, r3
  102c0c:	ebfff8d9 	bl	100f78 <rt_mutex_release>
            /* call timeout function */
            t->timeout_func(t->parameter);
  102c10:	e51b3010 	ldr	r3, [fp, #-16]
  102c14:	e593301c 	ldr	r3, [r3, #28]
  102c18:	e51b2010 	ldr	r2, [fp, #-16]
  102c1c:	e5922020 	ldr	r2, [r2, #32]
  102c20:	e1a00002 	mov	r0, r2
  102c24:	e12fff33 	blx	r3

            /* re-get tick */
            current_tick = rt_tick_get();
  102c28:	ebfffc8c 	bl	101e60 <rt_tick_get>
  102c2c:	e50b0008 	str	r0, [fp, #-8]

            RT_DEBUG_LOG(RT_DEBUG_TIMER, ("current tick: %d\n", current_tick));

            /* make sure take mutex */
            while(rt_mutex_take(mutex, RT_WAITING_FOREVER) != RT_EOK);
  102c30:	e320f000 	nop	{0}
  102c34:	e30e3410 	movw	r3, #58384	; 0xe410
  102c38:	e3403014 	movt	r3, #20
  102c3c:	e5933000 	ldr	r3, [r3]
  102c40:	e3e01000 	mvn	r1, #0
  102c44:	e1a00003 	mov	r0, r3
  102c48:	ebfff8ac 	bl	100f00 <rt_mutex_take>
  102c4c:	e1a03000 	mov	r3, r0
  102c50:	e3530000 	cmp	r3, #0
  102c54:	1afffff6 	bne	102c34 <rt_soft_timer_check+0xc0>


            if ((t->parent.flag & RT_TIMER_FLAG_PERIODIC) &&
  102c58:	e51b3010 	ldr	r3, [fp, #-16]
  102c5c:	e5d33009 	ldrb	r3, [r3, #9]
  102c60:	e2033002 	and	r3, r3, #2
  102c64:	e3530000 	cmp	r3, #0
  102c68:	0a00000d 	beq	102ca4 <rt_soft_timer_check+0x130>
                    (t->parent.flag & RT_TIMER_FLAG_ACTIVATED))
  102c6c:	e51b3010 	ldr	r3, [fp, #-16]
  102c70:	e5d33009 	ldrb	r3, [r3, #9]
  102c74:	e2033001 	and	r3, r3, #1
            if ((t->parent.flag & RT_TIMER_FLAG_PERIODIC) &&
  102c78:	e3530000 	cmp	r3, #0
  102c7c:	0a000008 	beq	102ca4 <rt_soft_timer_check+0x130>
            {
                /* start it */
                t->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
  102c80:	e51b3010 	ldr	r3, [fp, #-16]
  102c84:	e5d33009 	ldrb	r3, [r3, #9]
  102c88:	e3c33001 	bic	r3, r3, #1
  102c8c:	e6ef2073 	uxtb	r2, r3
  102c90:	e51b3010 	ldr	r3, [fp, #-16]
  102c94:	e5c32009 	strb	r2, [r3, #9]
                rt_timer_start(t);
  102c98:	e51b0010 	ldr	r0, [fp, #-16]
  102c9c:	ebfffe8b 	bl	1026d0 <rt_timer_start>
  102ca0:	ea000005 	b	102cbc <rt_soft_timer_check+0x148>
            }
            else
            {
                /* stop timer */
                t->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
  102ca4:	e51b3010 	ldr	r3, [fp, #-16]
  102ca8:	e5d33009 	ldrb	r3, [r3, #9]
  102cac:	e3c33001 	bic	r3, r3, #1
  102cb0:	e6ef2073 	uxtb	r2, r3
  102cb4:	e51b3010 	ldr	r3, [fp, #-16]
  102cb8:	e5c32009 	strb	r2, [r3, #9]
    for (n = rt_soft_timer_list[RT_TIMER_SKIP_LIST_LEVEL - 1].next;
  102cbc:	e51b200c 	ldr	r2, [fp, #-12]
  102cc0:	e30e3418 	movw	r3, #58392	; 0xe418
  102cc4:	e3403014 	movt	r3, #20
  102cc8:	e1520003 	cmp	r2, r3
  102ccc:	1affffbc 	bne	102bc4 <rt_soft_timer_check+0x50>
  102cd0:	ea000000 	b	102cd8 <rt_soft_timer_check+0x164>
            }
        }
        else break; /* not check anymore */
  102cd4:	e320f000 	nop	{0}
    }

    /* release mutex */
    rt_mutex_release(mutex);
  102cd8:	e30e3410 	movw	r3, #58384	; 0xe410
  102cdc:	e3403014 	movt	r3, #20
  102ce0:	e5933000 	ldr	r3, [r3]
  102ce4:	e1a00003 	mov	r0, r3
  102ce8:	ebfff8a2 	bl	100f78 <rt_mutex_release>

    RT_DEBUG_LOG(RT_DEBUG_TIMER, ("software timer check leave\n"));
}
  102cec:	e320f000 	nop	{0}
  102cf0:	e24bd004 	sub	sp, fp, #4
  102cf4:	e8bd8800 	pop	{fp, pc}

00102cf8 <rt_hw_timer_update>:

/* update hardware timer */
static void rt_hw_timer_update(void)
{
  102cf8:	e92d4800 	push	{fp, lr}
  102cfc:	e28db004 	add	fp, sp, #4
  102d00:	e24dd008 	sub	sp, sp, #8
    rt_tick_t next_timeout;
    rt_tick_t current_tick;

    /* get the next timeout tick */
    next_timeout = rt_timer_list_next_timeout(rt_soft_timer_list);
  102d04:	e30e0418 	movw	r0, #58392	; 0xe418
  102d08:	e3400014 	movt	r0, #20
  102d0c:	ebfffde3 	bl	1024a0 <rt_timer_list_next_timeout>
  102d10:	e1a03000 	mov	r3, r0
  102d14:	e50b300c 	str	r3, [fp, #-12]
    if (next_timeout == RT_TICK_MAX)
  102d18:	e51b300c 	ldr	r3, [fp, #-12]
  102d1c:	e3730001 	cmn	r3, #1
  102d20:	0a00001f 	beq	102da4 <rt_hw_timer_update+0xac>
        /* no software timer exist, return. */
        return;
    }

    /* get current tick */
    current_tick = rt_tick_get();
  102d24:	ebfffc4d 	bl	101e60 <rt_tick_get>
  102d28:	e50b0008 	str	r0, [fp, #-8]

    if ((next_timeout - current_tick) < RT_TICK_MAX / 2)
  102d2c:	e51b200c 	ldr	r2, [fp, #-12]
  102d30:	e51b3008 	ldr	r3, [fp, #-8]
  102d34:	e0423003 	sub	r3, r2, r3
  102d38:	e373010a 	cmn	r3, #-2147483646	; 0x80000002
  102d3c:	8a00001a 	bhi	102dac <rt_hw_timer_update+0xb4>
    {
        syscall(_NRSYS_timer_stop, hw_timer);
  102d40:	e30e340c 	movw	r3, #58380	; 0xe40c
  102d44:	e3403014 	movt	r3, #20
  102d48:	e5933000 	ldr	r3, [r3]
  102d4c:	e1a01003 	mov	r1, r3
  102d50:	e3a00072 	mov	r0, #114	; 0x72
  102d54:	eb00e63a 	bl	13c644 <syscall>
        /* get the delta timeout tick */
        next_timeout = next_timeout - current_tick;
  102d58:	e51b200c 	ldr	r2, [fp, #-12]
  102d5c:	e51b3008 	ldr	r3, [fp, #-8]
  102d60:	e0423003 	sub	r3, r2, r3
  102d64:	e50b300c 	str	r3, [fp, #-12]
        syscall(_NRSYS_timer_control,
  102d68:	e30e340c 	movw	r3, #58380	; 0xe40c
  102d6c:	e3403014 	movt	r3, #20
  102d70:	e5931000 	ldr	r1, [r3]
  102d74:	e24b300c 	sub	r3, fp, #12
  102d78:	e3a02000 	mov	r2, #0
  102d7c:	e3a00073 	mov	r0, #115	; 0x73
  102d80:	eb00e62f 	bl	13c644 <syscall>
                hw_timer,
                RT_TIMER_CTRL_SET_TIME,
                &next_timeout);
        syscall(_NRSYS_timer_start, hw_timer);
  102d84:	e30e340c 	movw	r3, #58380	; 0xe40c
  102d88:	e3403014 	movt	r3, #20
  102d8c:	e5933000 	ldr	r3, [r3]
  102d90:	e1a01003 	mov	r1, r3
  102d94:	e3a00071 	mov	r0, #113	; 0x71
  102d98:	eb00e629 	bl	13c644 <syscall>
    }
    return;
  102d9c:	e320f000 	nop	{0}
  102da0:	ea000001 	b	102dac <rt_hw_timer_update+0xb4>
        return;
  102da4:	e320f000 	nop	{0}
  102da8:	ea000000 	b	102db0 <rt_hw_timer_update+0xb8>
    return;
  102dac:	e320f000 	nop	{0}
}
  102db0:	e24bd004 	sub	sp, fp, #4
  102db4:	e8bd8800 	pop	{fp, pc}

00102db8 <rt_thread_timer_handler>:

/* timer signal handler */
static void rt_thread_timer_handler(void)
{
  102db8:	e92d4800 	push	{fp, lr}
  102dbc:	e28db004 	add	fp, sp, #4
    /* update hardware timer */
    rt_hw_timer_update();
  102dc0:	ebffffcc 	bl	102cf8 <rt_hw_timer_update>
    /* check software timer */
    rt_soft_timer_check();
  102dc4:	ebffff6a 	bl	102b74 <rt_soft_timer_check>
}
  102dc8:	e320f000 	nop	{0}
  102dcc:	e8bd8800 	pop	{fp, pc}

00102dd0 <timer_thread_entry>:

static void timer_thread_entry(void* parameter)
{
  102dd0:	e92d4800 	push	{fp, lr}
  102dd4:	e28db004 	add	fp, sp, #4
  102dd8:	e24dd010 	sub	sp, sp, #16
  102ddc:	e50b0010 	str	r0, [fp, #-16]
    while (1)
    {
        rt_err_t ret;
        ret = rt_sem_take(sem, RT_WAITING_FOREVER);
  102de0:	e30e3414 	movw	r3, #58388	; 0xe414
  102de4:	e3403014 	movt	r3, #20
  102de8:	e5933000 	ldr	r3, [r3]
  102dec:	e3e01000 	mvn	r1, #0
  102df0:	e1a00003 	mov	r0, r3
  102df4:	ebfff92e 	bl	1012b4 <rt_sem_take>
  102df8:	e50b0008 	str	r0, [fp, #-8]
        if (ret != RT_EOK)
  102dfc:	e51b3008 	ldr	r3, [fp, #-8]
  102e00:	e3530000 	cmp	r3, #0
  102e04:	1a000001 	bne	102e10 <timer_thread_entry+0x40>
        {
            break;
        }
        rt_thread_timer_handler();
  102e08:	ebffffea 	bl	102db8 <rt_thread_timer_handler>
    {
  102e0c:	eafffff3 	b	102de0 <timer_thread_entry+0x10>
            break;
  102e10:	e320f000 	nop	{0}
    }
}
  102e14:	e320f000 	nop	{0}
  102e18:	e24bd004 	sub	sp, fp, #4
  102e1c:	e8bd8800 	pop	{fp, pc}

00102e20 <rt_system_timer_init>:

void rt_system_timer_init(rt_uint32_t timer_stack_size)
{
  102e20:	e92d4800 	push	{fp, lr}
  102e24:	e28db004 	add	fp, sp, #4
  102e28:	e24dd018 	sub	sp, sp, #24
  102e2c:	e50b0010 	str	r0, [fp, #-16]
    int i;
    rt_thread_t tid;

    if (!sem)
  102e30:	e30e3414 	movw	r3, #58388	; 0xe414
  102e34:	e3403014 	movt	r3, #20
  102e38:	e5933000 	ldr	r3, [r3]
  102e3c:	e3530000 	cmp	r3, #0
  102e40:	1a000008 	bne	102e68 <rt_system_timer_init+0x48>
    {
        sem = rt_sem_create("u_timer", 0, RT_IPC_FLAG_FIFO);
  102e44:	e3a02000 	mov	r2, #0
  102e48:	e3a01000 	mov	r1, #0
  102e4c:	e3050678 	movw	r0, #22136	; 0x5678
  102e50:	e3400014 	movt	r0, #20
  102e54:	ebfff863 	bl	100fe8 <rt_sem_create>
  102e58:	e1a02000 	mov	r2, r0
  102e5c:	e30e3414 	movw	r3, #58388	; 0xe414
  102e60:	e3403014 	movt	r3, #20
  102e64:	e5832000 	str	r2, [r3]
    }

    if (!mutex)
  102e68:	e30e3410 	movw	r3, #58384	; 0xe410
  102e6c:	e3403014 	movt	r3, #20
  102e70:	e5933000 	ldr	r3, [r3]
  102e74:	e3530000 	cmp	r3, #0
  102e78:	1a000007 	bne	102e9c <rt_system_timer_init+0x7c>
    {
        mutex = rt_mutex_create("utm_mutex", RT_IPC_FLAG_FIFO);
  102e7c:	e3a01000 	mov	r1, #0
  102e80:	e3050680 	movw	r0, #22144	; 0x5680
  102e84:	e3400014 	movt	r0, #20
  102e88:	ebfff786 	bl	100ca8 <rt_mutex_create>
  102e8c:	e1a02000 	mov	r2, r0
  102e90:	e30e3410 	movw	r3, #58384	; 0xe410
  102e94:	e3403014 	movt	r3, #20
  102e98:	e5832000 	str	r2, [r3]
    }

    for (i = 0;
  102e9c:	e3a03000 	mov	r3, #0
  102ea0:	e50b3008 	str	r3, [fp, #-8]
  102ea4:	ea000009 	b	102ed0 <rt_system_timer_init+0xb0>
         i < sizeof(rt_soft_timer_list) / sizeof(rt_soft_timer_list[0]);
         i++)
    {
        rt_list_init(rt_soft_timer_list + i);
  102ea8:	e51b3008 	ldr	r3, [fp, #-8]
  102eac:	e1a02183 	lsl	r2, r3, #3
  102eb0:	e30e3418 	movw	r3, #58392	; 0xe418
  102eb4:	e3403014 	movt	r3, #20
  102eb8:	e0823003 	add	r3, r2, r3
  102ebc:	e1a00003 	mov	r0, r3
  102ec0:	ebfffcf8 	bl	1022a8 <rt_list_init>
         i++)
  102ec4:	e51b3008 	ldr	r3, [fp, #-8]
  102ec8:	e2833001 	add	r3, r3, #1
  102ecc:	e50b3008 	str	r3, [fp, #-8]
    for (i = 0;
  102ed0:	e51b3008 	ldr	r3, [fp, #-8]
  102ed4:	e3530000 	cmp	r3, #0
  102ed8:	0afffff2 	beq	102ea8 <rt_system_timer_init+0x88>
    }

    /* initial hardware timer */
    if (!hw_timer)
  102edc:	e30e340c 	movw	r3, #58380	; 0xe40c
  102ee0:	e3403014 	movt	r3, #20
  102ee4:	e5933000 	ldr	r3, [r3]
  102ee8:	e3530000 	cmp	r3, #0
  102eec:	1a00000f 	bne	102f30 <rt_system_timer_init+0x110>
    {
        hw_timer = (rt_timer_t)syscall(_NRSYS_timer_create,
                "u_timer",
                sem->data, //SIG_HW_TIMER,
  102ef0:	e30e3414 	movw	r3, #58388	; 0xe414
  102ef4:	e3403014 	movt	r3, #20
  102ef8:	e5933000 	ldr	r3, [r3]
        hw_timer = (rt_timer_t)syscall(_NRSYS_timer_create,
  102efc:	e5932004 	ldr	r2, [r3, #4]
  102f00:	e3a03000 	mov	r3, #0
  102f04:	e58d3000 	str	r3, [sp]
  102f08:	e3a03000 	mov	r3, #0
  102f0c:	e3051678 	movw	r1, #22136	; 0x5678
  102f10:	e3401014 	movt	r1, #20
  102f14:	e3a0006f 	mov	r0, #111	; 0x6f
  102f18:	eb00e5c9 	bl	13c644 <syscall>
  102f1c:	e1a03000 	mov	r3, r0
  102f20:	e1a02003 	mov	r2, r3
  102f24:	e30e340c 	movw	r3, #58380	; 0xe40c
  102f28:	e3403014 	movt	r3, #20
  102f2c:	e5832000 	str	r2, [r3]
                0,
                RT_TIMER_FLAG_ONE_SHOT|RT_TIMER_FLAG_HARD_TIMER);
    }

    if (timer_stack_size < 4096)
  102f30:	e51b3010 	ldr	r3, [fp, #-16]
  102f34:	e3530a01 	cmp	r3, #4096	; 0x1000
  102f38:	2a000001 	bcs	102f44 <rt_system_timer_init+0x124>
    {
        timer_stack_size = 4096;
  102f3c:	e3a03a01 	mov	r3, #4096	; 0x1000
  102f40:	e50b3010 	str	r3, [fp, #-16]
    }

    tid = rt_thread_create("u_timer", timer_thread_entry, RT_NULL,
  102f44:	e3a0300a 	mov	r3, #10
  102f48:	e58d3004 	str	r3, [sp, #4]
  102f4c:	e3a03002 	mov	r3, #2
  102f50:	e58d3000 	str	r3, [sp]
  102f54:	e51b3010 	ldr	r3, [fp, #-16]
  102f58:	e3a02000 	mov	r2, #0
  102f5c:	e3021dd0 	movw	r1, #11728	; 0x2dd0
  102f60:	e3401010 	movt	r1, #16
  102f64:	e3050678 	movw	r0, #22136	; 0x5678
  102f68:	e3400014 	movt	r0, #20
  102f6c:	ebfffc60 	bl	1020f4 <rt_thread_create>
  102f70:	e50b000c 	str	r0, [fp, #-12]
            timer_stack_size, 2, 10);
    if (tid)
  102f74:	e51b300c 	ldr	r3, [fp, #-12]
  102f78:	e3530000 	cmp	r3, #0
  102f7c:	0a000001 	beq	102f88 <rt_system_timer_init+0x168>
    {
        rt_thread_startup(tid);
  102f80:	e51b000c 	ldr	r0, [fp, #-12]
  102f84:	ebfffc8f 	bl	1021c8 <rt_thread_startup>
    }
}
  102f88:	e320f000 	nop	{0}
  102f8c:	e24bd004 	sub	sp, fp, #4
  102f90:	e8bd8800 	pop	{fp, pc}

00102f94 <rt_malloc>:
#include <stdarg.h>

#include <rtthread.h>

void *rt_malloc(rt_size_t nbytes)
{
  102f94:	e92d4800 	push	{fp, lr}
  102f98:	e28db004 	add	fp, sp, #4
  102f9c:	e24dd008 	sub	sp, sp, #8
  102fa0:	e50b0008 	str	r0, [fp, #-8]
    return malloc(nbytes);
  102fa4:	e51b0008 	ldr	r0, [fp, #-8]
  102fa8:	eb00e962 	bl	13d538 <malloc>
  102fac:	e1a03000 	mov	r3, r0
}
  102fb0:	e1a00003 	mov	r0, r3
  102fb4:	e24bd004 	sub	sp, fp, #4
  102fb8:	e8bd8800 	pop	{fp, pc}

00102fbc <rt_free>:

void rt_free(void *ptr)
{
  102fbc:	e92d4800 	push	{fp, lr}
  102fc0:	e28db004 	add	fp, sp, #4
  102fc4:	e24dd008 	sub	sp, sp, #8
  102fc8:	e50b0008 	str	r0, [fp, #-8]
    return free(ptr);
  102fcc:	e51b0008 	ldr	r0, [fp, #-8]
  102fd0:	eb00eb14 	bl	13dc28 <free>
}
  102fd4:	e24bd004 	sub	sp, fp, #4
  102fd8:	e8bd8800 	pop	{fp, pc}

00102fdc <rt_realloc>:

void *rt_realloc(void *ptr, rt_size_t nbytes)
{
  102fdc:	e92d4800 	push	{fp, lr}
  102fe0:	e28db004 	add	fp, sp, #4
  102fe4:	e24dd008 	sub	sp, sp, #8
  102fe8:	e50b0008 	str	r0, [fp, #-8]
  102fec:	e50b100c 	str	r1, [fp, #-12]
    return realloc(ptr, nbytes);
  102ff0:	e51b100c 	ldr	r1, [fp, #-12]
  102ff4:	e51b0008 	ldr	r0, [fp, #-8]
  102ff8:	eb00eb19 	bl	13dc64 <realloc>
  102ffc:	e1a03000 	mov	r3, r0
}
  103000:	e1a00003 	mov	r0, r3
  103004:	e24bd004 	sub	sp, fp, #4
  103008:	e8bd8800 	pop	{fp, pc}

0010300c <rt_calloc>:

void *rt_calloc(rt_size_t count, rt_size_t size)
{
  10300c:	e92d4800 	push	{fp, lr}
  103010:	e28db004 	add	fp, sp, #4
  103014:	e24dd008 	sub	sp, sp, #8
  103018:	e50b0008 	str	r0, [fp, #-8]
  10301c:	e50b100c 	str	r1, [fp, #-12]
    return calloc(count, size);
  103020:	e51b100c 	ldr	r1, [fp, #-12]
  103024:	e51b0008 	ldr	r0, [fp, #-8]
  103028:	eb00eac7 	bl	13db4c <calloc>
  10302c:	e1a03000 	mov	r3, r0
}
  103030:	e1a00003 	mov	r0, r3
  103034:	e24bd004 	sub	sp, fp, #4
  103038:	e8bd8800 	pop	{fp, pc}

0010303c <rt_snprintf>:

rt_int32_t rt_snprintf(char *buf, rt_size_t size, const char *format, ...)
{
  10303c:	e92d000c 	push	{r2, r3}
  103040:	e92d4800 	push	{fp, lr}
  103044:	e28db004 	add	fp, sp, #4
  103048:	e24dd010 	sub	sp, sp, #16
  10304c:	e50b0010 	str	r0, [fp, #-16]
  103050:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    int ret;
    va_list ap;
    va_start(ap, format);
  103054:	e28b3008 	add	r3, fp, #8
  103058:	e50b300c 	str	r3, [fp, #-12]
    ret = vsnprintf(buf, size, format, ap);
  10305c:	e51b300c 	ldr	r3, [fp, #-12]
  103060:	e59b2004 	ldr	r2, [fp, #4]
  103064:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  103068:	e51b0010 	ldr	r0, [fp, #-16]
  10306c:	eb00f75b 	bl	140de0 <vsnprintf>
  103070:	e50b0008 	str	r0, [fp, #-8]
    va_end(ap);
    return ret;
  103074:	e51b3008 	ldr	r3, [fp, #-8]
}
  103078:	e1a00003 	mov	r0, r3
  10307c:	e24bd004 	sub	sp, fp, #4
  103080:	e8bd4800 	pop	{fp, lr}
  103084:	e28dd008 	add	sp, sp, #8
  103088:	e12fff1e 	bx	lr

0010308c <rt_sprintf>:

rt_int32_t rt_sprintf(char *buf, const char *format, ...)
{
  10308c:	e92d000e 	push	{r1, r2, r3}
  103090:	e92d4800 	push	{fp, lr}
  103094:	e28db004 	add	fp, sp, #4
  103098:	e24dd014 	sub	sp, sp, #20
  10309c:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
    int ret;
    va_list ap;
    va_start(ap, format);
  1030a0:	e28b3008 	add	r3, fp, #8
  1030a4:	e50b3010 	str	r3, [fp, #-16]
    ret = vsprintf(buf, format, ap);
  1030a8:	e51b2010 	ldr	r2, [fp, #-16]
  1030ac:	e59b1004 	ldr	r1, [fp, #4]
  1030b0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1030b4:	eb00f780 	bl	140ebc <vsprintf>
  1030b8:	e50b000c 	str	r0, [fp, #-12]
    va_end(ap);
    return ret;
  1030bc:	e51b300c 	ldr	r3, [fp, #-12]
}
  1030c0:	e1a00003 	mov	r0, r3
  1030c4:	e24bd004 	sub	sp, fp, #4
  1030c8:	e8bd4800 	pop	{fp, lr}
  1030cc:	e28dd00c 	add	sp, sp, #12
  1030d0:	e12fff1e 	bx	lr

001030d4 <rt_vsnprintf>:

rt_int32_t rt_vsnprintf(char *buf,
    rt_size_t size,
    const char *fmt,
    va_list args)
{
  1030d4:	e92d4800 	push	{fp, lr}
  1030d8:	e28db004 	add	fp, sp, #4
  1030dc:	e24dd010 	sub	sp, sp, #16
  1030e0:	e50b0008 	str	r0, [fp, #-8]
  1030e4:	e50b100c 	str	r1, [fp, #-12]
  1030e8:	e50b2010 	str	r2, [fp, #-16]
  1030ec:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return (rt_int32_t)vsnprintf(buf, size, fmt, args);
  1030f0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1030f4:	e51b2010 	ldr	r2, [fp, #-16]
  1030f8:	e51b100c 	ldr	r1, [fp, #-12]
  1030fc:	e51b0008 	ldr	r0, [fp, #-8]
  103100:	eb00f736 	bl	140de0 <vsnprintf>
  103104:	e1a03000 	mov	r3, r0
}
  103108:	e1a00003 	mov	r0, r3
  10310c:	e24bd004 	sub	sp, fp, #4
  103110:	e8bd8800 	pop	{fp, pc}

00103114 <rt_kprintf>:

void rt_kprintf(const char *fmt, ...)
{
  103114:	e92d000f 	push	{r0, r1, r2, r3}
  103118:	e92d4800 	push	{fp, lr}
  10311c:	e28db004 	add	fp, sp, #4
  103120:	e24dd060 	sub	sp, sp, #96	; 0x60
    int ret;
    va_list ap;
    char buf[81];

    va_start(ap, fmt);
  103124:	e28b3008 	add	r3, fp, #8
  103128:	e50b300c 	str	r3, [fp, #-12]
    ret = vsnprintf(buf, 81, fmt, ap);
  10312c:	e24b0060 	sub	r0, fp, #96	; 0x60
  103130:	e51b300c 	ldr	r3, [fp, #-12]
  103134:	e59b2004 	ldr	r2, [fp, #4]
  103138:	e3a01051 	mov	r1, #81	; 0x51
  10313c:	eb00f727 	bl	140de0 <vsnprintf>
  103140:	e50b0008 	str	r0, [fp, #-8]
    va_end(ap);
    if (ret > 0)
  103144:	e51b3008 	ldr	r3, [fp, #-8]
  103148:	e3530000 	cmp	r3, #0
  10314c:	da000004 	ble	103164 <rt_kprintf+0x50>
        printf("%s", buf);
  103150:	e24b3060 	sub	r3, fp, #96	; 0x60
  103154:	e1a01003 	mov	r1, r3
  103158:	e305068c 	movw	r0, #22156	; 0x568c
  10315c:	e3400014 	movt	r0, #20
  103160:	eb00ed8e 	bl	13e7a0 <printf>
}
  103164:	e320f000 	nop	{0}
  103168:	e24bd004 	sub	sp, fp, #4
  10316c:	e8bd4800 	pop	{fp, lr}
  103170:	e28dd010 	add	sp, sp, #16
  103174:	e12fff1e 	bx	lr

00103178 <rt_strdup>:

char *rt_strdup(const char* s)
{
  103178:	e92d4800 	push	{fp, lr}
  10317c:	e28db004 	add	fp, sp, #4
  103180:	e24dd008 	sub	sp, sp, #8
  103184:	e50b0008 	str	r0, [fp, #-8]
    return strdup(s);
  103188:	e51b0008 	ldr	r0, [fp, #-8]
  10318c:	eb00f937 	bl	141670 <strdup>
  103190:	e1a03000 	mov	r3, r0
}
  103194:	e1a00003 	mov	r0, r3
  103198:	e24bd004 	sub	sp, fp, #4
  10319c:	e8bd8800 	pop	{fp, pc}

001031a0 <rt_strstr>:

char *rt_strstr(const char *s1, const char *s2)
{
  1031a0:	e92d4800 	push	{fp, lr}
  1031a4:	e28db004 	add	fp, sp, #4
  1031a8:	e24dd008 	sub	sp, sp, #8
  1031ac:	e50b0008 	str	r0, [fp, #-8]
  1031b0:	e50b100c 	str	r1, [fp, #-12]
    return strstr(s1, s2);
  1031b4:	e51b100c 	ldr	r1, [fp, #-12]
  1031b8:	e51b0008 	ldr	r0, [fp, #-8]
  1031bc:	eb00fa72 	bl	141b8c <strstr>
  1031c0:	e1a03000 	mov	r3, r0
}
  1031c4:	e1a00003 	mov	r0, r3
  1031c8:	e24bd004 	sub	sp, fp, #4
  1031cc:	e8bd8800 	pop	{fp, pc}

001031d0 <rt_strcmp>:

rt_int32_t rt_strcmp(const char *cs, const char *ct)
{
  1031d0:	e92d4800 	push	{fp, lr}
  1031d4:	e28db004 	add	fp, sp, #4
  1031d8:	e24dd008 	sub	sp, sp, #8
  1031dc:	e50b0008 	str	r0, [fp, #-8]
  1031e0:	e50b100c 	str	r1, [fp, #-12]
    return (rt_int32_t)strcmp(cs, ct);
  1031e4:	e51b100c 	ldr	r1, [fp, #-12]
  1031e8:	e51b0008 	ldr	r0, [fp, #-8]
  1031ec:	eb00f909 	bl	141618 <strcmp>
  1031f0:	e1a03000 	mov	r3, r0
}
  1031f4:	e1a00003 	mov	r0, r3
  1031f8:	e24bd004 	sub	sp, fp, #4
  1031fc:	e8bd8800 	pop	{fp, pc}

00103200 <rt_strlen>:

rt_size_t rt_strlen(const char *src)
{
  103200:	e92d4800 	push	{fp, lr}
  103204:	e28db004 	add	fp, sp, #4
  103208:	e24dd008 	sub	sp, sp, #8
  10320c:	e50b0008 	str	r0, [fp, #-8]
    return strlen(src);
  103210:	e51b0008 	ldr	r0, [fp, #-8]
  103214:	eb00f921 	bl	1416a0 <strlen>
  103218:	e1a03000 	mov	r3, r0
}
  10321c:	e1a00003 	mov	r0, r3
  103220:	e24bd004 	sub	sp, fp, #4
  103224:	e8bd8800 	pop	{fp, pc}

00103228 <rt_strncmp>:

rt_int32_t rt_strncmp(const char *cs, const char *ct, rt_ubase_t count)
{
  103228:	e92d4800 	push	{fp, lr}
  10322c:	e28db004 	add	fp, sp, #4
  103230:	e24dd010 	sub	sp, sp, #16
  103234:	e50b0008 	str	r0, [fp, #-8]
  103238:	e50b100c 	str	r1, [fp, #-12]
  10323c:	e50b2010 	str	r2, [fp, #-16]
    return strncmp(cs, ct, count);
  103240:	e51b2010 	ldr	r2, [fp, #-16]
  103244:	e51b100c 	ldr	r1, [fp, #-12]
  103248:	e51b0008 	ldr	r0, [fp, #-8]
  10324c:	eb00f93f 	bl	141750 <strncmp>
  103250:	e1a03000 	mov	r3, r0
}
  103254:	e1a00003 	mov	r0, r3
  103258:	e24bd004 	sub	sp, fp, #4
  10325c:	e8bd8800 	pop	{fp, pc}

00103260 <rt_strncpy>:

char *rt_strncpy(char *dest, const char *src, rt_ubase_t n)
{
  103260:	e92d4800 	push	{fp, lr}
  103264:	e28db004 	add	fp, sp, #4
  103268:	e24dd010 	sub	sp, sp, #16
  10326c:	e50b0008 	str	r0, [fp, #-8]
  103270:	e50b100c 	str	r1, [fp, #-12]
  103274:	e50b2010 	str	r2, [fp, #-16]
    return strncpy(dest, src, n);
  103278:	e51b2010 	ldr	r2, [fp, #-16]
  10327c:	e51b100c 	ldr	r1, [fp, #-12]
  103280:	e51b0008 	ldr	r0, [fp, #-8]
  103284:	eb00f956 	bl	1417e4 <strncpy>
  103288:	e1a03000 	mov	r3, r0
}
  10328c:	e1a00003 	mov	r0, r3
  103290:	e24bd004 	sub	sp, fp, #4
  103294:	e8bd8800 	pop	{fp, pc}

00103298 <rt_strcasecmp>:

rt_uint32_t rt_strcasecmp(const char *a, const char *b)
{
  103298:	e92d4800 	push	{fp, lr}
  10329c:	e28db004 	add	fp, sp, #4
  1032a0:	e24dd008 	sub	sp, sp, #8
  1032a4:	e50b0008 	str	r0, [fp, #-8]
  1032a8:	e50b100c 	str	r1, [fp, #-12]
    return strcasecmp(a, b);
  1032ac:	e51b100c 	ldr	r1, [fp, #-12]
  1032b0:	e51b0008 	ldr	r0, [fp, #-8]
  1032b4:	eb00f8af 	bl	141578 <strcasecmp>
  1032b8:	e1a03000 	mov	r3, r0
}
  1032bc:	e1a00003 	mov	r0, r3
  1032c0:	e24bd004 	sub	sp, fp, #4
  1032c4:	e8bd8800 	pop	{fp, pc}

001032c8 <rt_memset>:

void *rt_memset(void *src, int c, rt_ubase_t n)
{
  1032c8:	e92d4800 	push	{fp, lr}
  1032cc:	e28db004 	add	fp, sp, #4
  1032d0:	e24dd010 	sub	sp, sp, #16
  1032d4:	e50b0008 	str	r0, [fp, #-8]
  1032d8:	e50b100c 	str	r1, [fp, #-12]
  1032dc:	e50b2010 	str	r2, [fp, #-16]
    return memset(src, c, n);
  1032e0:	e51b2010 	ldr	r2, [fp, #-16]
  1032e4:	e51b100c 	ldr	r1, [fp, #-12]
  1032e8:	e51b0008 	ldr	r0, [fp, #-8]
  1032ec:	eb00f85a 	bl	14145c <memset>
  1032f0:	e1a03000 	mov	r3, r0
}
  1032f4:	e1a00003 	mov	r0, r3
  1032f8:	e24bd004 	sub	sp, fp, #4
  1032fc:	e8bd8800 	pop	{fp, pc}

00103300 <rt_memcpy>:

void *rt_memcpy(void *dest, const void *src, rt_ubase_t n)
{
  103300:	e92d4800 	push	{fp, lr}
  103304:	e28db004 	add	fp, sp, #4
  103308:	e24dd010 	sub	sp, sp, #16
  10330c:	e50b0008 	str	r0, [fp, #-8]
  103310:	e50b100c 	str	r1, [fp, #-12]
  103314:	e50b2010 	str	r2, [fp, #-16]
    return memcpy(dest, src, n);
  103318:	e51b2010 	ldr	r2, [fp, #-16]
  10331c:	e51b100c 	ldr	r1, [fp, #-12]
  103320:	e51b0008 	ldr	r0, [fp, #-8]
  103324:	eb00f714 	bl	140f7c <memcpy>
  103328:	e1a03000 	mov	r3, r0
}
  10332c:	e1a00003 	mov	r0, r3
  103330:	e24bd004 	sub	sp, fp, #4
  103334:	e8bd8800 	pop	{fp, pc}

00103338 <rt_memcmp>:

rt_int32_t rt_memcmp(const void *cs, const void *ct, rt_ubase_t count)
{
  103338:	e92d4800 	push	{fp, lr}
  10333c:	e28db004 	add	fp, sp, #4
  103340:	e24dd010 	sub	sp, sp, #16
  103344:	e50b0008 	str	r0, [fp, #-8]
  103348:	e50b100c 	str	r1, [fp, #-12]
  10334c:	e50b2010 	str	r2, [fp, #-16]
    return memcmp(cs, ct, count);
  103350:	e51b2010 	ldr	r2, [fp, #-16]
  103354:	e51b100c 	ldr	r1, [fp, #-12]
  103358:	e51b0008 	ldr	r0, [fp, #-8]
  10335c:	eb00f7c5 	bl	141278 <memcmp>
  103360:	e1a03000 	mov	r3, r0
}
  103364:	e1a00003 	mov	r0, r3
  103368:	e24bd004 	sub	sp, fp, #4
  10336c:	e8bd8800 	pop	{fp, pc}

00103370 <rt_memmove>:

void *rt_memmove(void *dest, const void *src, rt_ubase_t n)
{
  103370:	e92d4800 	push	{fp, lr}
  103374:	e28db004 	add	fp, sp, #4
  103378:	e24dd010 	sub	sp, sp, #16
  10337c:	e50b0008 	str	r0, [fp, #-8]
  103380:	e50b100c 	str	r1, [fp, #-12]
  103384:	e50b2010 	str	r2, [fp, #-16]
    return memmove(dest, src, n);
  103388:	e51b2010 	ldr	r2, [fp, #-16]
  10338c:	e51b100c 	ldr	r1, [fp, #-12]
  103390:	e51b0008 	ldr	r0, [fp, #-8]
  103394:	eb00f7ca 	bl	1412c4 <memmove>
  103398:	e1a03000 	mov	r3, r0
}
  10339c:	e1a00003 	mov	r0, r3
  1033a0:	e24bd004 	sub	sp, fp, #4
  1033a4:	e8bd8800 	pop	{fp, pc}

001033a8 <rt_tick_from_millisecond>:

rt_tick_t rt_tick_from_millisecond(rt_int32_t ms)
{
  1033a8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1033ac:	e28db000 	add	fp, sp, #0
  1033b0:	e24dd014 	sub	sp, sp, #20
  1033b4:	e50b0010 	str	r0, [fp, #-16]
    rt_tick_t tick;

    if (ms < 0)
  1033b8:	e51b3010 	ldr	r3, [fp, #-16]
  1033bc:	e3530000 	cmp	r3, #0
  1033c0:	aa000002 	bge	1033d0 <rt_tick_from_millisecond+0x28>
    {
        tick = (rt_tick_t)RT_WAITING_FOREVER;
  1033c4:	e3e03000 	mvn	r3, #0
  1033c8:	e50b3008 	str	r3, [fp, #-8]
  1033cc:	ea000021 	b	103458 <rt_tick_from_millisecond+0xb0>
    }
    else
    {
        tick = RT_TICK_PER_SECOND * (ms / 1000);
  1033d0:	e51b1010 	ldr	r1, [fp, #-16]
  1033d4:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  1033d8:	e3413062 	movt	r3, #4194	; 0x1062
  1033dc:	e0c32391 	smull	r2, r3, r1, r3
  1033e0:	e1a02343 	asr	r2, r3, #6
  1033e4:	e1a03fc1 	asr	r3, r1, #31
  1033e8:	e0423003 	sub	r3, r2, r3
  1033ec:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  1033f0:	e0030392 	mul	r3, r2, r3
  1033f4:	e50b3008 	str	r3, [fp, #-8]
        tick += (RT_TICK_PER_SECOND * (ms % 1000) + 999) / 1000;
  1033f8:	e51b2010 	ldr	r2, [fp, #-16]
  1033fc:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  103400:	e3413062 	movt	r3, #4194	; 0x1062
  103404:	e0c10392 	smull	r0, r1, r2, r3
  103408:	e1a01341 	asr	r1, r1, #6
  10340c:	e1a03fc2 	asr	r3, r2, #31
  103410:	e0413003 	sub	r3, r1, r3
  103414:	e3a01ffa 	mov	r1, #1000	; 0x3e8
  103418:	e0030391 	mul	r3, r1, r3
  10341c:	e0423003 	sub	r3, r2, r3
  103420:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  103424:	e0030392 	mul	r3, r2, r3
  103428:	e2833ff9 	add	r3, r3, #996	; 0x3e4
  10342c:	e2833003 	add	r3, r3, #3
  103430:	e3042dd3 	movw	r2, #19923	; 0x4dd3
  103434:	e3412062 	movt	r2, #4194	; 0x1062
  103438:	e0c10293 	smull	r0, r1, r3, r2
  10343c:	e1a02341 	asr	r2, r1, #6
  103440:	e1a03fc3 	asr	r3, r3, #31
  103444:	e0423003 	sub	r3, r2, r3
  103448:	e1a02003 	mov	r2, r3
  10344c:	e51b3008 	ldr	r3, [fp, #-8]
  103450:	e0833002 	add	r3, r3, r2
  103454:	e50b3008 	str	r3, [fp, #-8]
    }

    /* return the calculated tick */
    return tick;
  103458:	e51b3008 	ldr	r3, [fp, #-8]
}
  10345c:	e1a00003 	mov	r0, r3
  103460:	e28bd000 	add	sp, fp, #0
  103464:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  103468:	e12fff1e 	bx	lr

0010346c <rt_malloc_align>:
 * @param align the alignment size
 *
 * @return the allocated memory block on successful, otherwise returns RT_NULL
 */
void *rt_malloc_align(rt_size_t size, rt_size_t align)
{
  10346c:	e92d4800 	push	{fp, lr}
  103470:	e28db004 	add	fp, sp, #4
  103474:	e24dd018 	sub	sp, sp, #24
  103478:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10347c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    void *align_ptr;
    int uintptr_size;
    rt_size_t align_size;

    /* sizeof pointer */
    uintptr_size = sizeof(void*);
  103480:	e3a03004 	mov	r3, #4
  103484:	e50b3010 	str	r3, [fp, #-16]
    uintptr_size -= 1;
  103488:	e51b3010 	ldr	r3, [fp, #-16]
  10348c:	e2433001 	sub	r3, r3, #1
  103490:	e50b3010 	str	r3, [fp, #-16]

    /* align the alignment size to uintptr size byte */
    align = ((align + uintptr_size) & ~uintptr_size);
  103494:	e51b2010 	ldr	r2, [fp, #-16]
  103498:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10349c:	e0823003 	add	r3, r2, r3
  1034a0:	e51b2010 	ldr	r2, [fp, #-16]
  1034a4:	e1e02002 	mvn	r2, r2
  1034a8:	e0033002 	and	r3, r3, r2
  1034ac:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

    /* get total aligned size */
    align_size = ((size + uintptr_size) & ~uintptr_size) + align;
  1034b0:	e51b2010 	ldr	r2, [fp, #-16]
  1034b4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1034b8:	e0823003 	add	r3, r2, r3
  1034bc:	e51b2010 	ldr	r2, [fp, #-16]
  1034c0:	e1e02002 	mvn	r2, r2
  1034c4:	e0033002 	and	r3, r3, r2
  1034c8:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1034cc:	e0823003 	add	r3, r2, r3
  1034d0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    /* allocate memory block from heap */
    ptr = rt_malloc(align_size);
  1034d4:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1034d8:	ebfffead 	bl	102f94 <rt_malloc>
  1034dc:	e50b0008 	str	r0, [fp, #-8]
    if (ptr != RT_NULL)
  1034e0:	e51b3008 	ldr	r3, [fp, #-8]
  1034e4:	e3530000 	cmp	r3, #0
  1034e8:	0a000019 	beq	103554 <rt_malloc_align+0xe8>
    {
        /* the allocated memory block is aligned */
        if (((rt_ubase_t)ptr & (align - 1)) == 0)
  1034ec:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1034f0:	e2432001 	sub	r2, r3, #1
  1034f4:	e51b3008 	ldr	r3, [fp, #-8]
  1034f8:	e0033002 	and	r3, r3, r2
  1034fc:	e3530000 	cmp	r3, #0
  103500:	1a000004 	bne	103518 <rt_malloc_align+0xac>
        {
            align_ptr = (void *)((rt_ubase_t)ptr + align);
  103504:	e51b2008 	ldr	r2, [fp, #-8]
  103508:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10350c:	e0823003 	add	r3, r2, r3
  103510:	e50b300c 	str	r3, [fp, #-12]
  103514:	ea000007 	b	103538 <rt_malloc_align+0xcc>
        }
        else
        {
            align_ptr = (void *)(((rt_ubase_t)ptr + (align - 1)) & ~(align - 1));
  103518:	e51b2008 	ldr	r2, [fp, #-8]
  10351c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  103520:	e0823003 	add	r3, r2, r3
  103524:	e2432001 	sub	r2, r3, #1
  103528:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10352c:	e2633000 	rsb	r3, r3, #0
  103530:	e0033002 	and	r3, r3, r2
  103534:	e50b300c 	str	r3, [fp, #-12]
        }

        /* set the pointer before alignment pointer to the real pointer */
        *((rt_ubase_t *)((rt_ubase_t)align_ptr - sizeof(void *))) = (rt_ubase_t)ptr;
  103538:	e51b300c 	ldr	r3, [fp, #-12]
  10353c:	e2433004 	sub	r3, r3, #4
  103540:	e1a02003 	mov	r2, r3
  103544:	e51b3008 	ldr	r3, [fp, #-8]
  103548:	e5823000 	str	r3, [r2]

        ptr = align_ptr;
  10354c:	e51b300c 	ldr	r3, [fp, #-12]
  103550:	e50b3008 	str	r3, [fp, #-8]
    }

    return ptr;
  103554:	e51b3008 	ldr	r3, [fp, #-8]
}
  103558:	e1a00003 	mov	r0, r3
  10355c:	e24bd004 	sub	sp, fp, #4
  103560:	e8bd8800 	pop	{fp, pc}

00103564 <rt_free_align>:
 * rt_malloc_align function and address is aligned.
 *
 * @param ptr the memory block pointer
 */
void rt_free_align(void *ptr)
{
  103564:	e92d4800 	push	{fp, lr}
  103568:	e28db004 	add	fp, sp, #4
  10356c:	e24dd010 	sub	sp, sp, #16
  103570:	e50b0010 	str	r0, [fp, #-16]
    void *real_ptr;

    real_ptr = (void *) * (rt_ubase_t *)((rt_ubase_t)ptr - sizeof(void *));
  103574:	e51b3010 	ldr	r3, [fp, #-16]
  103578:	e2433004 	sub	r3, r3, #4
  10357c:	e5933000 	ldr	r3, [r3]
  103580:	e50b3008 	str	r3, [fp, #-8]
    rt_free(real_ptr);
  103584:	e51b0008 	ldr	r0, [fp, #-8]
  103588:	ebfffe8b 	bl	102fbc <rt_free>
}
  10358c:	e320f000 	nop	{0}
  103590:	e24bd004 	sub	sp, fp, #4
  103594:	e8bd8800 	pop	{fp, pc}

00103598 <rt_assert_handler>:

void rt_assert_handler(const char *ex_string, const char *func, rt_size_t line)
{
  103598:	e92d4800 	push	{fp, lr}
  10359c:	e28db004 	add	fp, sp, #4
  1035a0:	e24dd010 	sub	sp, sp, #16
  1035a4:	e50b0008 	str	r0, [fp, #-8]
  1035a8:	e50b100c 	str	r1, [fp, #-12]
  1035ac:	e50b2010 	str	r2, [fp, #-16]
    printf("UserAPP: (%s) assertion failed at function:%s, line number:%d \n", ex_string, func, (int)line);
  1035b0:	e51b3010 	ldr	r3, [fp, #-16]
  1035b4:	e51b200c 	ldr	r2, [fp, #-12]
  1035b8:	e51b1008 	ldr	r1, [fp, #-8]
  1035bc:	e3050690 	movw	r0, #22160	; 0x5690
  1035c0:	e3400014 	movt	r0, #20
  1035c4:	eb00ec75 	bl	13e7a0 <printf>
    exit(-1);
  1035c8:	e3e00000 	mvn	r0, #0
  1035cc:	eb00d703 	bl	1391e0 <exit>

001035d0 <channel_cmd_send>:
    /* Watch this, we use a void pointer to transfer the returned value. */
    return chn_msg.u.d;
}

rt_inline void channel_cmd_send(int channel, void *cmd)
{
  1035d0:	e92d4800 	push	{fp, lr}
  1035d4:	e28db004 	add	fp, sp, #4
  1035d8:	e24dd018 	sub	sp, sp, #24
  1035dc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1035e0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(channel >= 0);
  1035e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1035e8:	e3530000 	cmp	r3, #0
  1035ec:	aa000005 	bge	103608 <channel_cmd_send+0x38>
  1035f0:	e3a0201a 	mov	r2, #26
  1035f4:	e3051a1c 	movw	r1, #23068	; 0x5a1c
  1035f8:	e3401014 	movt	r1, #20
  1035fc:	e30506d0 	movw	r0, #22224	; 0x56d0
  103600:	e3400014 	movt	r0, #20
  103604:	ebffffe3 	bl	103598 <rt_assert_handler>

    /* wrap the command and data into an IPC message */
    struct rt_channel_msg chn_msg;
    chn_msg.type   = RT_CHANNEL_RAW;
  103608:	e3a03000 	mov	r3, #0
  10360c:	e50b3010 	str	r3, [fp, #-16]
    chn_msg.u.d    = cmd;
  103610:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  103614:	e50b300c 	str	r3, [fp, #-12]

    /* send the command and not wait for the result */
    rt_channel_send(channel, &chn_msg);
  103618:	e24b3014 	sub	r3, fp, #20
  10361c:	e1a01003 	mov	r1, r3
  103620:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  103624:	ebfff2f6 	bl	100204 <rt_channel_send>
}
  103628:	e320f000 	nop	{0}
  10362c:	e24bd004 	sub	sp, fp, #4
  103630:	e8bd8800 	pop	{fp, pc}

00103634 <channel_cmd_recv>:

rt_inline void *channel_cmd_recv(int channel)
{
  103634:	e92d4800 	push	{fp, lr}
  103638:	e28db004 	add	fp, sp, #4
  10363c:	e24dd018 	sub	sp, sp, #24
  103640:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    RT_ASSERT(channel >= 0);
  103644:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  103648:	e3530000 	cmp	r3, #0
  10364c:	aa000005 	bge	103668 <channel_cmd_recv+0x34>
  103650:	e3a02027 	mov	r2, #39	; 0x27
  103654:	e30519f4 	movw	r1, #23028	; 0x59f4
  103658:	e3401014 	movt	r1, #20
  10365c:	e30506d0 	movw	r0, #22224	; 0x56d0
  103660:	e3400014 	movt	r0, #20
  103664:	ebffffcb 	bl	103598 <rt_assert_handler>

    struct rt_channel_msg chn_msg;
    chn_msg.type = RT_CHANNEL_RAW;
  103668:	e3a03000 	mov	r3, #0
  10366c:	e50b3010 	str	r3, [fp, #-16]
    rt_channel_recv(channel, &chn_msg);
  103670:	e24b3014 	sub	r3, fp, #20
  103674:	e1a01003 	mov	r1, r3
  103678:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  10367c:	ebfff2fa 	bl	10026c <rt_channel_recv>

    return chn_msg.u.d;
  103680:	e51b300c 	ldr	r3, [fp, #-12]
}
  103684:	e1a00003 	mov	r0, r3
  103688:	e24bd004 	sub	sp, fp, #4
  10368c:	e8bd8800 	pop	{fp, pc}

00103690 <channel_cmd_reply>:

rt_inline void channel_cmd_reply(int channel, void *cmd)
{
  103690:	e92d4800 	push	{fp, lr}
  103694:	e28db004 	add	fp, sp, #4
  103698:	e24dd018 	sub	sp, sp, #24
  10369c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1036a0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(channel >= 0);
  1036a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1036a8:	e3530000 	cmp	r3, #0
  1036ac:	aa000005 	bge	1036c8 <channel_cmd_reply+0x38>
  1036b0:	e3a02032 	mov	r2, #50	; 0x32
  1036b4:	e3051a08 	movw	r1, #23048	; 0x5a08
  1036b8:	e3401014 	movt	r1, #20
  1036bc:	e30506d0 	movw	r0, #22224	; 0x56d0
  1036c0:	e3400014 	movt	r0, #20
  1036c4:	ebffffb3 	bl	103598 <rt_assert_handler>

    struct rt_channel_msg chn_msg;
    chn_msg.type = RT_CHANNEL_RAW;
  1036c8:	e3a03000 	mov	r3, #0
  1036cc:	e50b3010 	str	r3, [fp, #-16]
    chn_msg.u.d = cmd;
  1036d0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1036d4:	e50b300c 	str	r3, [fp, #-12]

    rt_channel_reply(channel, &chn_msg);
  1036d8:	e24b3014 	sub	r3, fp, #20
  1036dc:	e1a01003 	mov	r1, r3
  1036e0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1036e4:	ebfff2d3 	bl	100238 <rt_channel_reply>
}
  1036e8:	e320f000 	nop	{0}
  1036ec:	e24bd004 	sub	sp, fp, #4
  1036f0:	e8bd8800 	pop	{fp, pc}

001036f4 <stack_init>:
 *  0: initialization completes successfully, further actions can be carried on
 *  1: initialization has been done before, we could do anything but another
 *  initialization
 */
int stack_init(void)
{
  1036f4:	e92d4800 	push	{fp, lr}
  1036f8:	e28db004 	add	fp, sp, #4
    /* stack channel as a flag whether the stack has been initialized */
    stack_channel = rt_channel_open(chn_name, O_CREAT);
  1036fc:	e30e3014 	movw	r3, #57364	; 0xe014
  103700:	e3403014 	movt	r3, #20
  103704:	e5933000 	ldr	r3, [r3]
  103708:	e3a01040 	mov	r1, #64	; 0x40
  10370c:	e1a00003 	mov	r0, r3
  103710:	ebfff280 	bl	100118 <rt_channel_open>
  103714:	e1a02000 	mov	r2, r0
  103718:	e30e3010 	movw	r3, #57360	; 0xe010
  10371c:	e3403014 	movt	r3, #20
  103720:	e5832000 	str	r2, [r3]
    if (stack_channel < 0) return 1;    /* initialization has been done */
  103724:	e30e3010 	movw	r3, #57360	; 0xe010
  103728:	e3403014 	movt	r3, #20
  10372c:	e5933000 	ldr	r3, [r3]
  103730:	e3530000 	cmp	r3, #0
  103734:	aa000001 	bge	103740 <stack_init+0x4c>
  103738:	e3a03001 	mov	r3, #1
  10373c:	ea000001 	b	103748 <stack_init+0x54>
    //     printf("attach stack failed!\n");
    //     goto close_unet_channel;
    // }

    /* start the TCPIP thread */
    lwip_system_init();
  103740:	eb001b5d 	bl	10a4bc <lwip_system_init>
    return 0;
  103744:	e3a03000 	mov	r3, #0
//     data_channel = -1;
// close_stack_channel:
//     rt_channel_close(stack_channel);
//     stack_channel = -1;
//     return -1;      /* initialization fails */
}
  103748:	e1a00003 	mov	r0, r3
  10374c:	e8bd8800 	pop	{fp, pc}

00103750 <stack_run>:
};
extern struct lwip_sock *lwip_tryget_socket(int s);
extern struct lwip_sock * get_socket(int s);
extern int access_is_blocking(u32_t flags, struct lwip_sock *sock);
int stack_run(void)
{
  103750:	e92d4800 	push	{fp, lr}
  103754:	e28db004 	add	fp, sp, #4
  103758:	e24dd050 	sub	sp, sp, #80	; 0x50
    // struct lwip_sock *sock = RT_NULL;

    /* run stack event loop */
    while (1)
    {
        int shmid = (int)(size_t)channel_cmd_recv(stack_channel);
  10375c:	e30e3010 	movw	r3, #57360	; 0xe010
  103760:	e3403014 	movt	r3, #20
  103764:	e5933000 	ldr	r3, [r3]
  103768:	e1a00003 	mov	r0, r3
  10376c:	ebffffb0 	bl	103634 <channel_cmd_recv>
  103770:	e1a03000 	mov	r3, r0
  103774:	e50b300c 	str	r3, [fp, #-12]
        if (shmid >= 0)
  103778:	e51b300c 	ldr	r3, [fp, #-12]
  10377c:	e3530000 	cmp	r3, #0
  103780:	ba000124 	blt	103c18 <stack_run+0x4c8>
        {
            cmd = lwp_shmat(shmid, NULL);
  103784:	e3a01000 	mov	r1, #0
  103788:	e51b000c 	ldr	r0, [fp, #-12]
  10378c:	ebfff9df 	bl	101f10 <lwp_shmat>
  103790:	e50b0010 	str	r0, [fp, #-16]
            if (!cmd)
  103794:	e51b3010 	ldr	r3, [fp, #-16]
  103798:	e3530000 	cmp	r3, #0
  10379c:	1a000002 	bne	1037ac <stack_run+0x5c>
            {
                lwp_shmrm(shmid);
  1037a0:	e51b000c 	ldr	r0, [fp, #-12]
  1037a4:	ebfff9ce 	bl	101ee4 <lwp_shmrm>
                continue;
  1037a8:	ea00011d 	b	103c24 <stack_run+0x4d4>
            }

            switch (cmd->cmd)
  1037ac:	e51b3010 	ldr	r3, [fp, #-16]
  1037b0:	e5933000 	ldr	r3, [r3]
  1037b4:	e2433014 	sub	r3, r3, #20
  1037b8:	e3530009 	cmp	r3, #9
  1037bc:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  1037c0:	ea000116 	b	103c20 <stack_run+0x4d0>
  1037c4:	001037ec 	.word	0x001037ec
  1037c8:	00103c20 	.word	0x00103c20
  1037cc:	0010384c 	.word	0x0010384c
  1037d0:	001038b0 	.word	0x001038b0
  1037d4:	001038fc 	.word	0x001038fc
  1037d8:	00103960 	.word	0x00103960
  1037dc:	001039bc 	.word	0x001039bc
  1037e0:	00103ac8 	.word	0x00103ac8
  1037e4:	00103c20 	.word	0x00103c20
  1037e8:	00103b94 	.word	0x00103b94
            {
            /* handle socket requests */
            case UNET_SRV_CMD_SOCKET:
                domain = (int)(size_t)cmd->argv[0];
  1037ec:	e51b3010 	ldr	r3, [fp, #-16]
  1037f0:	e5933004 	ldr	r3, [r3, #4]
  1037f4:	e50b3044 	str	r3, [fp, #-68]	; 0xffffffbc
                type = (int)(size_t)cmd->argv[1];
  1037f8:	e51b3010 	ldr	r3, [fp, #-16]
  1037fc:	e5933008 	ldr	r3, [r3, #8]
  103800:	e50b3048 	str	r3, [fp, #-72]	; 0xffffffb8
                protocol = (int)(size_t)cmd->argv[2];
  103804:	e51b3010 	ldr	r3, [fp, #-16]
  103808:	e593300c 	ldr	r3, [r3, #12]
  10380c:	e50b304c 	str	r3, [fp, #-76]	; 0xffffffb4
                socket = socket_internal(domain, type, protocol);
  103810:	e51b204c 	ldr	r2, [fp, #-76]	; 0xffffffb4
  103814:	e51b1048 	ldr	r1, [fp, #-72]	; 0xffffffb8
  103818:	e51b0044 	ldr	r0, [fp, #-68]	; 0xffffffbc
  10381c:	eb001823 	bl	1098b0 <socket_internal>
  103820:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
                lwp_shmdt(cmd);
  103824:	e51b0010 	ldr	r0, [fp, #-16]
  103828:	ebfff9c5 	bl	101f44 <lwp_shmdt>
                channel_cmd_reply(stack_channel, (void *)(size_t)socket);
  10382c:	e30e3010 	movw	r3, #57360	; 0xe010
  103830:	e3403014 	movt	r3, #20
  103834:	e5933000 	ldr	r3, [r3]
  103838:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  10383c:	e1a01002 	mov	r1, r2
  103840:	e1a00003 	mov	r0, r3
  103844:	ebffff91 	bl	103690 <channel_cmd_reply>
                break;
  103848:	ea0000f5 	b	103c24 <stack_run+0x4d4>
            //     lwp_shmdt(cmd);
            //     channel_cmd_reply(stack_channel, (void *)(size_t)result);
            //     break;

            case UNET_SRV_CMD_BIND:
                socket = (int)(size_t)cmd->argv[0];
  10384c:	e51b3010 	ldr	r3, [fp, #-16]
  103850:	e5933004 	ldr	r3, [r3, #4]
  103854:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                psockaddr = (void *)(size_t)cmd + UNET_CMD_OFFSET;
  103858:	e51b3010 	ldr	r3, [fp, #-16]
  10385c:	e283301c 	add	r3, r3, #28
  103860:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
                len = (int)(size_t)cmd->argv[1];
  103864:	e51b3010 	ldr	r3, [fp, #-16]
  103868:	e5933008 	ldr	r3, [r3, #8]
  10386c:	e50b3040 	str	r3, [fp, #-64]	; 0xffffffc0

                result = bind_internal(socket, psockaddr, len);
  103870:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  103874:	e1a02003 	mov	r2, r3
  103878:	e51b1038 	ldr	r1, [fp, #-56]	; 0xffffffc8
  10387c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103880:	eb001768 	bl	109628 <bind_internal>
  103884:	e50b0008 	str	r0, [fp, #-8]

                lwp_shmdt(cmd);
  103888:	e51b0010 	ldr	r0, [fp, #-16]
  10388c:	ebfff9ac 	bl	101f44 <lwp_shmdt>
                channel_cmd_reply(stack_channel, (void *)(size_t)result);
  103890:	e30e3010 	movw	r3, #57360	; 0xe010
  103894:	e3403014 	movt	r3, #20
  103898:	e5933000 	ldr	r3, [r3]
  10389c:	e51b2008 	ldr	r2, [fp, #-8]
  1038a0:	e1a01002 	mov	r1, r2
  1038a4:	e1a00003 	mov	r0, r3
  1038a8:	ebffff78 	bl	103690 <channel_cmd_reply>
                break;
  1038ac:	ea0000dc 	b	103c24 <stack_run+0x4d4>

            case UNET_SRV_CMD_LISTEN:
                socket = (int)(size_t)cmd->argv[0];
  1038b0:	e51b3010 	ldr	r3, [fp, #-16]
  1038b4:	e5933004 	ldr	r3, [r3, #4]
  1038b8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

                result = listen_internal(socket, (int)(size_t)cmd->argv[1]);
  1038bc:	e51b3010 	ldr	r3, [fp, #-16]
  1038c0:	e5933008 	ldr	r3, [r3, #8]
  1038c4:	e1a01003 	mov	r1, r3
  1038c8:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1038cc:	eb00178c 	bl	109704 <listen_internal>
  1038d0:	e50b0008 	str	r0, [fp, #-8]

                lwp_shmdt(cmd);
  1038d4:	e51b0010 	ldr	r0, [fp, #-16]
  1038d8:	ebfff999 	bl	101f44 <lwp_shmdt>
                channel_cmd_reply(stack_channel, (void *)(size_t)result);
  1038dc:	e30e3010 	movw	r3, #57360	; 0xe010
  1038e0:	e3403014 	movt	r3, #20
  1038e4:	e5933000 	ldr	r3, [r3]
  1038e8:	e51b2008 	ldr	r2, [fp, #-8]
  1038ec:	e1a01002 	mov	r1, r2
  1038f0:	e1a00003 	mov	r0, r3
  1038f4:	ebffff65 	bl	103690 <channel_cmd_reply>
                break;
  1038f8:	ea0000c9 	b	103c24 <stack_run+0x4d4>

            case UNET_SRV_CMD_CONNECT:
                socket = (int)(size_t)cmd->argv[0];
  1038fc:	e51b3010 	ldr	r3, [fp, #-16]
  103900:	e5933004 	ldr	r3, [r3, #4]
  103904:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                psockaddr = (void *)(size_t)cmd + UNET_CMD_OFFSET;
  103908:	e51b3010 	ldr	r3, [fp, #-16]
  10390c:	e283301c 	add	r3, r3, #28
  103910:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
                len = (int)(size_t)cmd->argv[1];
  103914:	e51b3010 	ldr	r3, [fp, #-16]
  103918:	e5933008 	ldr	r3, [r3, #8]
  10391c:	e50b3040 	str	r3, [fp, #-64]	; 0xffffffc0

                result = connect_internal(socket, psockaddr, len);
  103920:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  103924:	e1a02003 	mov	r2, r3
  103928:	e51b1038 	ldr	r1, [fp, #-56]	; 0xffffffc8
  10392c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103930:	eb00174d 	bl	10966c <connect_internal>
  103934:	e50b0008 	str	r0, [fp, #-8]

                lwp_shmdt(cmd);
  103938:	e51b0010 	ldr	r0, [fp, #-16]
  10393c:	ebfff980 	bl	101f44 <lwp_shmdt>
                channel_cmd_reply(stack_channel, (void *)(size_t)result);
  103940:	e30e3010 	movw	r3, #57360	; 0xe010
  103944:	e3403014 	movt	r3, #20
  103948:	e5933000 	ldr	r3, [r3]
  10394c:	e51b2008 	ldr	r2, [fp, #-8]
  103950:	e1a01002 	mov	r1, r2
  103954:	e1a00003 	mov	r0, r3
  103958:	ebffff4c 	bl	103690 <channel_cmd_reply>
                break;
  10395c:	ea0000b0 	b	103c24 <stack_run+0x4d4>

            case UNET_SRV_CMD_ACCEPT:
                socket = (int)(size_t)cmd->argv[0];
  103960:	e51b3010 	ldr	r3, [fp, #-16]
  103964:	e5933004 	ldr	r3, [r3, #4]
  103968:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                psockaddr = (void *)(size_t)cmd + UNET_CMD_OFFSET;
  10396c:	e51b3010 	ldr	r3, [fp, #-16]
  103970:	e283301c 	add	r3, r3, #28
  103974:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
                result = accept_internal(socket, psockaddr, (socklen_t *)&cmd->argv[1]);
  103978:	e51b3010 	ldr	r3, [fp, #-16]
  10397c:	e2833008 	add	r3, r3, #8
  103980:	e1a02003 	mov	r2, r3
  103984:	e51b1038 	ldr	r1, [fp, #-56]	; 0xffffffc8
  103988:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  10398c:	eb0016bd 	bl	109488 <accept_internal>
  103990:	e50b0008 	str	r0, [fp, #-8]
                lwp_shmdt(cmd);
  103994:	e51b0010 	ldr	r0, [fp, #-16]
  103998:	ebfff969 	bl	101f44 <lwp_shmdt>
                channel_cmd_reply(stack_channel, (void *)(size_t)result);
  10399c:	e30e3010 	movw	r3, #57360	; 0xe010
  1039a0:	e3403014 	movt	r3, #20
  1039a4:	e5933000 	ldr	r3, [r3]
  1039a8:	e51b2008 	ldr	r2, [fp, #-8]
  1039ac:	e1a01002 	mov	r1, r2
  1039b0:	e1a00003 	mov	r0, r3
  1039b4:	ebffff35 	bl	103690 <channel_cmd_reply>
                break;
  1039b8:	ea000099 	b	103c24 <stack_run+0x4d4>

            case UNET_SRV_CMD_SENDTO:
                socket = (int)(size_t)cmd->argv[0];
  1039bc:	e51b3010 	ldr	r3, [fp, #-16]
  1039c0:	e5933004 	ldr	r3, [r3, #4]
  1039c4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                size = (size_t)cmd->argv[1];
  1039c8:	e51b3010 	ldr	r3, [fp, #-16]
  1039cc:	e5933008 	ldr	r3, [r3, #8]
  1039d0:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
                flags = (int)(size_t)cmd->argv[2];
  1039d4:	e51b3010 	ldr	r3, [fp, #-16]
  1039d8:	e593300c 	ldr	r3, [r3, #12]
  1039dc:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
                tolen = (int)(size_t)cmd->argv[3];
  1039e0:	e51b3010 	ldr	r3, [fp, #-16]
  1039e4:	e5933010 	ldr	r3, [r3, #16]
  1039e8:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
                data = (void *)(size_t)cmd + UNET_CMD_OFFSET;
  1039ec:	e51b3010 	ldr	r3, [fp, #-16]
  1039f0:	e283301c 	add	r3, r3, #28
  1039f4:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc

                lwip_send_count++;
  1039f8:	e30e3424 	movw	r3, #58404	; 0xe424
  1039fc:	e3403014 	movt	r3, #20
  103a00:	e5933000 	ldr	r3, [r3]
  103a04:	e2832001 	add	r2, r3, #1
  103a08:	e30e3424 	movw	r3, #58404	; 0xe424
  103a0c:	e3403014 	movt	r3, #20
  103a10:	e5832000 	str	r2, [r3]
                if(tolen  == 0)
  103a14:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  103a18:	e3530000 	cmp	r3, #0
  103a1c:	1a000006 	bne	103a3c <stack_run+0x2ec>
                {
                    result = send_internal(socket, data, size, flags);
  103a20:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  103a24:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  103a28:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  103a2c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103a30:	eb001770 	bl	1097f8 <send_internal>
  103a34:	e50b0008 	str	r0, [fp, #-8]
  103a38:	ea00000f 	b	103a7c <stack_run+0x32c>
                }
                else
                {
                    psockaddr = (void *)(size_t)cmd + UNET_CMD_OFFSET + size;
  103a3c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  103a40:	e283301c 	add	r3, r3, #28
  103a44:	e51b2010 	ldr	r2, [fp, #-16]
  103a48:	e0823003 	add	r3, r2, r3
  103a4c:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
                    result = sendto_internal(socket, data, size, flags, psockaddr, tolen);
  103a50:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  103a54:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  103a58:	e58d3004 	str	r3, [sp, #4]
  103a5c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  103a60:	e58d3000 	str	r3, [sp]
  103a64:	e1a03002 	mov	r3, r2
  103a68:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  103a6c:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  103a70:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103a74:	eb001776 	bl	109854 <sendto_internal>
  103a78:	e50b0008 	str	r0, [fp, #-8]
                }
                if(result <= 0)
  103a7c:	e51b3008 	ldr	r3, [fp, #-8]
  103a80:	e3530000 	cmp	r3, #0
  103a84:	ca000005 	bgt	103aa0 <stack_run+0x350>
                {
                    rt_kprintf("%s line %d sendto error\n",__func__,__LINE__);
  103a88:	e3a02f53 	mov	r2, #332	; 0x14c
  103a8c:	e30519e8 	movw	r1, #23016	; 0x59e8
  103a90:	e3401014 	movt	r1, #20
  103a94:	e30506f0 	movw	r0, #22256	; 0x56f0
  103a98:	e3400014 	movt	r0, #20
  103a9c:	ebfffd9c 	bl	103114 <rt_kprintf>
                }
                lwp_shmdt(cmd);
  103aa0:	e51b0010 	ldr	r0, [fp, #-16]
  103aa4:	ebfff926 	bl	101f44 <lwp_shmdt>
                channel_cmd_reply(stack_channel, (void *)(size_t)result);
  103aa8:	e30e3010 	movw	r3, #57360	; 0xe010
  103aac:	e3403014 	movt	r3, #20
  103ab0:	e5933000 	ldr	r3, [r3]
  103ab4:	e51b2008 	ldr	r2, [fp, #-8]
  103ab8:	e1a01002 	mov	r1, r2
  103abc:	e1a00003 	mov	r0, r3
  103ac0:	ebfffef2 	bl	103690 <channel_cmd_reply>
                break;
  103ac4:	ea000056 	b	103c24 <stack_run+0x4d4>

            case UNET_SRV_CMD_RECVFROM:
                socket = (int)(size_t)cmd->argv[0];
  103ac8:	e51b3010 	ldr	r3, [fp, #-16]
  103acc:	e5933004 	ldr	r3, [r3, #4]
  103ad0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                size = (size_t)cmd->argv[1];
  103ad4:	e51b3010 	ldr	r3, [fp, #-16]
  103ad8:	e5933008 	ldr	r3, [r3, #8]
  103adc:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
                flags = (int)(size_t)cmd->argv[2];
  103ae0:	e51b3010 	ldr	r3, [fp, #-16]
  103ae4:	e593300c 	ldr	r3, [r3, #12]
  103ae8:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
                fromlen = (socklen_t*)cmd->argv[3];
  103aec:	e51b3010 	ldr	r3, [fp, #-16]
  103af0:	e5933010 	ldr	r3, [r3, #16]
  103af4:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
                data = (void *)(size_t)cmd + UNET_CMD_OFFSET;
  103af8:	e51b3010 	ldr	r3, [fp, #-16]
  103afc:	e283301c 	add	r3, r3, #28
  103b00:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc

                if(fromlen == RT_NULL)
  103b04:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  103b08:	e3530000 	cmp	r3, #0
  103b0c:	1a000006 	bne	103b2c <stack_run+0x3dc>
                {
                    result = recv_internal(socket, data, size, flags);
  103b10:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  103b14:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  103b18:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  103b1c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103b20:	eb001706 	bl	109740 <recv_internal>
  103b24:	e50b0008 	str	r0, [fp, #-8]
  103b28:	ea00000f 	b	103b6c <stack_run+0x41c>
                }
                else
                {
                    psockaddr =  (void *)(size_t)cmd + UNET_CMD_OFFSET + size;
  103b2c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  103b30:	e283301c 	add	r3, r3, #28
  103b34:	e51b2010 	ldr	r2, [fp, #-16]
  103b38:	e0823003 	add	r3, r2, r3
  103b3c:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
                    result = recvfrom_internal(socket, data, size, flags , psockaddr, fromlen);
  103b40:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  103b44:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  103b48:	e58d3004 	str	r3, [sp, #4]
  103b4c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  103b50:	e58d3000 	str	r3, [sp]
  103b54:	e1a03002 	mov	r3, r2
  103b58:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  103b5c:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  103b60:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103b64:	eb00170c 	bl	10979c <recvfrom_internal>
  103b68:	e50b0008 	str	r0, [fp, #-8]
                }

                lwp_shmdt(cmd);
  103b6c:	e51b0010 	ldr	r0, [fp, #-16]
  103b70:	ebfff8f3 	bl	101f44 <lwp_shmdt>
                channel_cmd_reply(stack_channel, (void *)(size_t)result);
  103b74:	e30e3010 	movw	r3, #57360	; 0xe010
  103b78:	e3403014 	movt	r3, #20
  103b7c:	e5933000 	ldr	r3, [r3]
  103b80:	e51b2008 	ldr	r2, [fp, #-8]
  103b84:	e1a01002 	mov	r1, r2
  103b88:	e1a00003 	mov	r0, r3
  103b8c:	ebfffebf 	bl	103690 <channel_cmd_reply>
                break;
  103b90:	ea000023 	b	103c24 <stack_run+0x4d4>
            //     channel_cmd_reply(stack_channel, (void *)(size_t)result);
            //     break;

            case UNET_SRV_CMD_SETSOCKOPT:
            {
                socket = (int)(size_t)cmd->argv[0];
  103b94:	e51b3010 	ldr	r3, [fp, #-16]
  103b98:	e5933004 	ldr	r3, [r3, #4]
  103b9c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
                int level = (int)(size_t)cmd->argv[1];
  103ba0:	e51b3010 	ldr	r3, [fp, #-16]
  103ba4:	e5933008 	ldr	r3, [r3, #8]
  103ba8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
                int opt = (int)(size_t)cmd->argv[2];
  103bac:	e51b3010 	ldr	r3, [fp, #-16]
  103bb0:	e593300c 	ldr	r3, [r3, #12]
  103bb4:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
                socklen = (socklen_t)(size_t)cmd->argv[3];
  103bb8:	e51b3010 	ldr	r3, [fp, #-16]
  103bbc:	e5933010 	ldr	r3, [r3, #16]
  103bc0:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
                void *optval =  (void *)(size_t)cmd + UNET_CMD_OFFSET;
  103bc4:	e51b3010 	ldr	r3, [fp, #-16]
  103bc8:	e283301c 	add	r3, r3, #28
  103bcc:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc

                result = setsockopt_internal(socket, level, opt, optval, socklen);
  103bd0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  103bd4:	e58d3000 	str	r3, [sp]
  103bd8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  103bdc:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  103be0:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  103be4:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103be8:	eb0016b0 	bl	1096b0 <setsockopt_internal>
  103bec:	e50b0008 	str	r0, [fp, #-8]

                lwp_shmdt(cmd);
  103bf0:	e51b0010 	ldr	r0, [fp, #-16]
  103bf4:	ebfff8d2 	bl	101f44 <lwp_shmdt>
                channel_cmd_reply(stack_channel, (void *)(size_t)result);
  103bf8:	e30e3010 	movw	r3, #57360	; 0xe010
  103bfc:	e3403014 	movt	r3, #20
  103c00:	e5933000 	ldr	r3, [r3]
  103c04:	e51b2008 	ldr	r2, [fp, #-8]
  103c08:	e1a01002 	mov	r1, r2
  103c0c:	e1a00003 	mov	r0, r3
  103c10:	ebfffe9e 	bl	103690 <channel_cmd_reply>
                break;
  103c14:	ea000002 	b	103c24 <stack_run+0x4d4>
    //             break;

            default :
                break;
            }
        }
  103c18:	e320f000 	nop	{0}
  103c1c:	eafffece 	b	10375c <stack_run+0xc>
                break;
  103c20:	e320f000 	nop	{0}
    {
  103c24:	eafffecc 	b	10375c <stack_run+0xc>

00103c28 <lwipkit_status>:

    return 0;
}

static void lwipkit_status(void)
{
  103c28:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  103c2c:	e28db000 	add	fp, sp, #0
}
  103c30:	e320f000 	nop	{0}
  103c34:	e28bd000 	add	sp, fp, #0
  103c38:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  103c3c:	e12fff1e 	bx	lr

00103c40 <lwipkit_usage>:

/* lwIPKit initialization should be done once at most */
static void lwipkit_usage(void)
{
  103c40:	e92d4800 	push	{fp, lr}
  103c44:	e28db004 	add	fp, sp, #4
    printf("lwIPKit Usage:\n"
  103c48:	e305070c 	movw	r0, #22284	; 0x570c
  103c4c:	e3400014 	movt	r0, #20
  103c50:	eb00eae0 	bl	13e7d8 <puts>
            "\tlwIPKit               :  run lwIPKit, wait for ethdev to attach\n"
            "\tlwIPKit attach   <eth>:  attach the device <eth> to lwIPKit\n"
            "\tlwIPKit deattach <eth>:  de-attach the device <eth> from lwIPKit\n"
            "\tlwIPKit default  <eth>:  set <eth> as the default device\n"
            "\tlwIPKit status        :  show the status of running lwIPKIt\n");
}
  103c54:	e320f000 	nop	{0}
  103c58:	e8bd8800 	pop	{fp, pc}

00103c5c <main>:

/* entry point */
extern void sal_init(void);
extern int dfs_init(void);
int main(int argc, char **argv)
{
  103c5c:	e92d4810 	push	{r4, fp, lr}
  103c60:	e28db008 	add	fp, sp, #8
  103c64:	e24dd034 	sub	sp, sp, #52	; 0x34
  103c68:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  103c6c:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
    int initialized = 0;
  103c70:	e3a03000 	mov	r3, #0
  103c74:	e50b3010 	str	r3, [fp, #-16]

    int data_channel = -1;  /* local variable, not the global one */
  103c78:	e3e03000 	mvn	r3, #0
  103c7c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    int shmid = -1;
  103c80:	e3e03000 	mvn	r3, #0
  103c84:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    struct channel_cmd *cmd = NULL;
  103c88:	e3a03000 	mov	r3, #0
  103c8c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

    /* no arguments, we want to run lwIPKit as a server */
    if (argc < 2)
  103c90:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  103c94:	e3530001 	cmp	r3, #1
  103c98:	ca000035 	bgt	103d74 <main+0x118>
    {        
        printf("lwIPKit: starts to run as the server");
  103c9c:	e3050854 	movw	r0, #22612	; 0x5854
  103ca0:	e3400014 	movt	r0, #20
  103ca4:	eb00eabd 	bl	13e7a0 <printf>
        initialized = stack_init();
  103ca8:	ebfffe91 	bl	1036f4 <stack_init>
  103cac:	e50b0010 	str	r0, [fp, #-16]
        if (initialized < 0)
  103cb0:	e51b3010 	ldr	r3, [fp, #-16]
  103cb4:	e3530000 	cmp	r3, #0
  103cb8:	aa000004 	bge	103cd0 <main+0x74>
        {
            printf(" ...failed!\n");
  103cbc:	e305087c 	movw	r0, #22652	; 0x587c
  103cc0:	e3400014 	movt	r0, #20
  103cc4:	eb00eac3 	bl	13e7d8 <puts>
            return -1;
  103cc8:	e3e03000 	mvn	r3, #0
  103ccc:	ea0000f7 	b	1040b0 <main+0x454>
        }
        else if (initialized > 0)   /* valid lwIPKit process exists */
  103cd0:	e51b3010 	ldr	r3, [fp, #-16]
  103cd4:	e3530000 	cmp	r3, #0
  103cd8:	da000004 	ble	103cf0 <main+0x94>
        {
            printf(" ...skipped! Already initialized\n");
  103cdc:	e3050888 	movw	r0, #22664	; 0x5888
  103ce0:	e3400014 	movt	r0, #20
  103ce4:	eb00eabb 	bl	13e7d8 <puts>
            return 0;
  103ce8:	e3a03000 	mov	r3, #0
  103cec:	ea0000ef 	b	1040b0 <main+0x454>
        }
        else
        {
            // netdev_list_init();
            printf(" ...succeeded!\n");
  103cf0:	e30508ac 	movw	r0, #22700	; 0x58ac
  103cf4:	e3400014 	movt	r0, #20
  103cf8:	eb00eab6 	bl	13e7d8 <puts>

            // rt_thread_t tid = rt_thread_create("ipdata", stack_data_input, NULL, 8192,
            //     25, 10);            /* handle the input data */
            // if (tid) rt_thread_startup(tid);

            printf("lwIPKit: init eth dev...");
  103cfc:	e30508bc 	movw	r0, #22716	; 0x58bc
  103d00:	e3400014 	movt	r0, #20
  103d04:	eb00eaa5 	bl	13e7a0 <printf>
            const char * eth_name;
            initialized = imx6ul_eth_init(0, &eth_name);
  103d08:	e24b3024 	sub	r3, fp, #36	; 0x24
  103d0c:	e1a01003 	mov	r1, r3
  103d10:	e3a00000 	mov	r0, #0
  103d14:	eb00c72a 	bl	1359c4 <imx6ul_eth_init>
  103d18:	e50b0010 	str	r0, [fp, #-16]
            if (initialized < 0)
  103d1c:	e51b3010 	ldr	r3, [fp, #-16]
  103d20:	e3530000 	cmp	r3, #0
  103d24:	aa000004 	bge	103d3c <main+0xe0>
            {
                printf(" ...failed!\n");
  103d28:	e305087c 	movw	r0, #22652	; 0x587c
  103d2c:	e3400014 	movt	r0, #20
  103d30:	eb00eaa8 	bl	13e7d8 <puts>
                return -1;
  103d34:	e3e03000 	mvn	r3, #0
  103d38:	ea0000dc 	b	1040b0 <main+0x454>
            }
            else if (initialized > 0)   /* valid lwIPKit process exists */
  103d3c:	e51b3010 	ldr	r3, [fp, #-16]
  103d40:	e3530000 	cmp	r3, #0
  103d44:	da000004 	ble	103d5c <main+0x100>
            {
                printf(" ...skipped! Already initialized\n");
  103d48:	e3050888 	movw	r0, #22664	; 0x5888
  103d4c:	e3400014 	movt	r0, #20
  103d50:	eb00eaa0 	bl	13e7d8 <puts>
                return 0;
  103d54:	e3a03000 	mov	r3, #0
  103d58:	ea0000d4 	b	1040b0 <main+0x454>
            } 
            else 
            {
                printf("succeeded\n");
  103d5c:	e30508d8 	movw	r0, #22744	; 0x58d8
  103d60:	e3400014 	movt	r0, #20
  103d64:	eb00ea9b 	bl	13e7d8 <puts>
                dfs_init();
  103d68:	eb001730 	bl	109a30 <dfs_init>
                sal_init();
  103d6c:	eb000c20 	bl	106df4 <sal_init>
                // netdev_init(eth_name);
            }

            stack_run();            /* handle network requests, never return */
  103d70:	ebfffe76 	bl	103750 <stack_run>
        }
    }

    /* attach the device */
    if (argc >= 3 && strncmp(argv[1], "attach", 6) == 0)
  103d74:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  103d78:	e3530002 	cmp	r3, #2
  103d7c:	da000050 	ble	103ec4 <main+0x268>
  103d80:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  103d84:	e2833004 	add	r3, r3, #4
  103d88:	e5933000 	ldr	r3, [r3]
  103d8c:	e3a02006 	mov	r2, #6
  103d90:	e30518e4 	movw	r1, #22756	; 0x58e4
  103d94:	e3401014 	movt	r1, #20
  103d98:	e1a00003 	mov	r0, r3
  103d9c:	eb00f66b 	bl	141750 <strncmp>
  103da0:	e1a03000 	mov	r3, r0
  103da4:	e3530000 	cmp	r3, #0
  103da8:	1a000045 	bne	103ec4 <main+0x268>
    {
        int static_ip = 0;
  103dac:	e3a03000 	mov	r3, #0
  103db0:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
        printf("lwIPKit: attach device %s\n", argv[2]);
  103db4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  103db8:	e2833008 	add	r3, r3, #8
  103dbc:	e5933000 	ldr	r3, [r3]
  103dc0:	e1a01003 	mov	r1, r3
  103dc4:	e30508ec 	movw	r0, #22764	; 0x58ec
  103dc8:	e3400014 	movt	r0, #20
  103dcc:	eb00ea73 	bl	13e7a0 <printf>

        data_channel = rt_channel_open(data_name, O_RDWR);
  103dd0:	e30e3018 	movw	r3, #57368	; 0xe018
  103dd4:	e3403014 	movt	r3, #20
  103dd8:	e5933000 	ldr	r3, [r3]
  103ddc:	e3a01002 	mov	r1, #2
  103de0:	e1a00003 	mov	r0, r3
  103de4:	ebfff0cb 	bl	100118 <rt_channel_open>
  103de8:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
        if (data_channel < 0)
  103dec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  103df0:	e3530000 	cmp	r3, #0
  103df4:	aa000004 	bge	103e0c <main+0x1b0>
        {
            printf("cannot open data_channel, please make sure lwIPKit server is running!\n");
  103df8:	e3050908 	movw	r0, #22792	; 0x5908
  103dfc:	e3400014 	movt	r0, #20
  103e00:	eb00ea74 	bl	13e7d8 <puts>
            return -1;
  103e04:	e3e03000 	mvn	r3, #0
  103e08:	ea0000a8 	b	1040b0 <main+0x454>
        }

        shmid = channel_compose_cmd1(UNET_NETDEV_REQ_ATTACH, (void *)(size_t)static_ip, strlen(argv[2]) + 1);
  103e0c:	e51b4020 	ldr	r4, [fp, #-32]	; 0xffffffe0
  103e10:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  103e14:	e2833008 	add	r3, r3, #8
  103e18:	e5933000 	ldr	r3, [r3]
  103e1c:	e1a00003 	mov	r0, r3
  103e20:	eb00f61e 	bl	1416a0 <strlen>
  103e24:	e1a03000 	mov	r3, r0
  103e28:	e2833001 	add	r3, r3, #1
  103e2c:	e58d300c 	str	r3, [sp, #12]
  103e30:	e3a03000 	mov	r3, #0
  103e34:	e58d3008 	str	r3, [sp, #8]
  103e38:	e3a03000 	mov	r3, #0
  103e3c:	e58d3004 	str	r3, [sp, #4]
  103e40:	e3a03000 	mov	r3, #0
  103e44:	e58d3000 	str	r3, [sp]
  103e48:	e3a03000 	mov	r3, #0
  103e4c:	e3a02000 	mov	r2, #0
  103e50:	e1a01004 	mov	r1, r4
  103e54:	e3a00065 	mov	r0, #101	; 0x65
  103e58:	eb000097 	bl	1040bc <channel_compose_cmd>
  103e5c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
        cmd = (struct channel_cmd*)lwp_shmat(shmid, NULL);
  103e60:	e3a01000 	mov	r1, #0
  103e64:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  103e68:	ebfff828 	bl	101f10 <lwp_shmat>
  103e6c:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
        if (cmd)
  103e70:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  103e74:	e3530000 	cmp	r3, #0
  103e78:	0a000009 	beq	103ea4 <main+0x248>
        {
            strcpy(CHANNEL_CMD_DATA(cmd), argv[2]);
  103e7c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  103e80:	e283201c 	add	r2, r3, #28
  103e84:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  103e88:	e2833008 	add	r3, r3, #8
  103e8c:	e5933000 	ldr	r3, [r3]
  103e90:	e1a01003 	mov	r1, r3
  103e94:	e1a00002 	mov	r0, r2
  103e98:	eb00f5ef 	bl	14165c <strcpy>
            lwp_shmdt(cmd);
  103e9c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  103ea0:	ebfff827 	bl	101f44 <lwp_shmdt>
        }
        channel_cmd_send(data_channel, (void *)(size_t)shmid);
  103ea4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  103ea8:	e1a01003 	mov	r1, r3
  103eac:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103eb0:	ebfffdc6 	bl	1035d0 <channel_cmd_send>
        rt_channel_close(data_channel);
  103eb4:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103eb8:	ebfff0a3 	bl	10014c <rt_channel_close>

        return 0;
  103ebc:	e3a03000 	mov	r3, #0
  103ec0:	ea00007a 	b	1040b0 <main+0x454>
    }

    /* deattach the device and restore it to the uninitialized state */
    if (argc == 3)
  103ec4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  103ec8:	e3530003 	cmp	r3, #3
  103ecc:	1a000061 	bne	104058 <main+0x3fc>
    {
        if (strncmp(argv[1], "deattach", 8) == 0)
  103ed0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  103ed4:	e2833004 	add	r3, r3, #4
  103ed8:	e5933000 	ldr	r3, [r3]
  103edc:	e3a02008 	mov	r2, #8
  103ee0:	e3051950 	movw	r1, #22864	; 0x5950
  103ee4:	e3401014 	movt	r1, #20
  103ee8:	e1a00003 	mov	r0, r3
  103eec:	eb00f617 	bl	141750 <strncmp>
  103ef0:	e1a03000 	mov	r3, r0
  103ef4:	e3530000 	cmp	r3, #0
  103ef8:	1a000042 	bne	104008 <main+0x3ac>
        {
            printf("lwIPKit: de-attach device %s\n", argv[2]);
  103efc:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  103f00:	e2833008 	add	r3, r3, #8
  103f04:	e5933000 	ldr	r3, [r3]
  103f08:	e1a01003 	mov	r1, r3
  103f0c:	e305095c 	movw	r0, #22876	; 0x595c
  103f10:	e3400014 	movt	r0, #20
  103f14:	eb00ea21 	bl	13e7a0 <printf>

            data_channel = rt_channel_open(data_name, O_RDWR);
  103f18:	e30e3018 	movw	r3, #57368	; 0xe018
  103f1c:	e3403014 	movt	r3, #20
  103f20:	e5933000 	ldr	r3, [r3]
  103f24:	e3a01002 	mov	r1, #2
  103f28:	e1a00003 	mov	r0, r3
  103f2c:	ebfff079 	bl	100118 <rt_channel_open>
  103f30:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
            if (data_channel < 0)
  103f34:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  103f38:	e3530000 	cmp	r3, #0
  103f3c:	aa000004 	bge	103f54 <main+0x2f8>
            {
                printf("cannot open data_channel, please make sure lwIPKit server is running!\n");
  103f40:	e3050908 	movw	r0, #22792	; 0x5908
  103f44:	e3400014 	movt	r0, #20
  103f48:	eb00ea22 	bl	13e7d8 <puts>
                return -1;
  103f4c:	e3e03000 	mvn	r3, #0
  103f50:	ea000056 	b	1040b0 <main+0x454>
            }

            shmid = channel_compose_cmd0(UNET_NETDEV_REQ_DETACH, strlen(argv[2]) + 1);
  103f54:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  103f58:	e2833008 	add	r3, r3, #8
  103f5c:	e5933000 	ldr	r3, [r3]
  103f60:	e1a00003 	mov	r0, r3
  103f64:	eb00f5cd 	bl	1416a0 <strlen>
  103f68:	e1a03000 	mov	r3, r0
  103f6c:	e2833001 	add	r3, r3, #1
  103f70:	e58d300c 	str	r3, [sp, #12]
  103f74:	e3a03000 	mov	r3, #0
  103f78:	e58d3008 	str	r3, [sp, #8]
  103f7c:	e3a03000 	mov	r3, #0
  103f80:	e58d3004 	str	r3, [sp, #4]
  103f84:	e3a03000 	mov	r3, #0
  103f88:	e58d3000 	str	r3, [sp]
  103f8c:	e3a03000 	mov	r3, #0
  103f90:	e3a02000 	mov	r2, #0
  103f94:	e3a01000 	mov	r1, #0
  103f98:	e3a00066 	mov	r0, #102	; 0x66
  103f9c:	eb000046 	bl	1040bc <channel_compose_cmd>
  103fa0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
            cmd = (struct channel_cmd*)lwp_shmat(shmid, NULL);
  103fa4:	e3a01000 	mov	r1, #0
  103fa8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  103fac:	ebfff7d7 	bl	101f10 <lwp_shmat>
  103fb0:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
            if (cmd)
  103fb4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  103fb8:	e3530000 	cmp	r3, #0
  103fbc:	0a000009 	beq	103fe8 <main+0x38c>
            {
                strcpy(CHANNEL_CMD_DATA(cmd), argv[2]);
  103fc0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  103fc4:	e283201c 	add	r2, r3, #28
  103fc8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  103fcc:	e2833008 	add	r3, r3, #8
  103fd0:	e5933000 	ldr	r3, [r3]
  103fd4:	e1a01003 	mov	r1, r3
  103fd8:	e1a00002 	mov	r0, r2
  103fdc:	eb00f59e 	bl	14165c <strcpy>
                lwp_shmdt(cmd);
  103fe0:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  103fe4:	ebfff7d6 	bl	101f44 <lwp_shmdt>
            }
            channel_cmd_send(data_channel, (void *)(size_t)shmid);
  103fe8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  103fec:	e1a01003 	mov	r1, r3
  103ff0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103ff4:	ebfffd75 	bl	1035d0 <channel_cmd_send>
            rt_channel_close(data_channel);
  103ff8:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  103ffc:	ebfff052 	bl	10014c <rt_channel_close>

            return 0;
  104000:	e3a03000 	mov	r3, #0
  104004:	ea000029 	b	1040b0 <main+0x454>
        }


        if (strncmp(argv[1], "default", 8) == 0)
  104008:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10400c:	e2833004 	add	r3, r3, #4
  104010:	e5933000 	ldr	r3, [r3]
  104014:	e3a02008 	mov	r2, #8
  104018:	e305197c 	movw	r1, #22908	; 0x597c
  10401c:	e3401014 	movt	r1, #20
  104020:	e1a00003 	mov	r0, r3
  104024:	eb00f5c9 	bl	141750 <strncmp>
  104028:	e1a03000 	mov	r3, r0
  10402c:	e3530000 	cmp	r3, #0
  104030:	1a000008 	bne	104058 <main+0x3fc>
        {
            printf("lwIPKit: set the default device %s", argv[2]);
  104034:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  104038:	e2833008 	add	r3, r3, #8
  10403c:	e5933000 	ldr	r3, [r3]
  104040:	e1a01003 	mov	r1, r3
  104044:	e3050984 	movw	r0, #22916	; 0x5984
  104048:	e3400014 	movt	r0, #20
  10404c:	eb00e9d3 	bl	13e7a0 <printf>
            //eth_set_default(argv[2]);
            return 0;
  104050:	e3a03000 	mov	r3, #0
  104054:	ea000015 	b	1040b0 <main+0x454>
        }
    }

    /* show the status */
    if (argc == 2 && strncmp(argv[1], "status", 6) == 0)
  104058:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10405c:	e3530002 	cmp	r3, #2
  104060:	1a000010 	bne	1040a8 <main+0x44c>
  104064:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  104068:	e2833004 	add	r3, r3, #4
  10406c:	e5933000 	ldr	r3, [r3]
  104070:	e3a02006 	mov	r2, #6
  104074:	e30519a8 	movw	r1, #22952	; 0x59a8
  104078:	e3401014 	movt	r1, #20
  10407c:	e1a00003 	mov	r0, r3
  104080:	eb00f5b2 	bl	141750 <strncmp>
  104084:	e1a03000 	mov	r3, r0
  104088:	e3530000 	cmp	r3, #0
  10408c:	1a000005 	bne	1040a8 <main+0x44c>
    {
        printf("lwIPKit: the status of the attached devices as follows\n");
  104090:	e30509b0 	movw	r0, #22960	; 0x59b0
  104094:	e3400014 	movt	r0, #20
  104098:	eb00e9ce 	bl	13e7d8 <puts>
        lwipkit_status();
  10409c:	ebfffee1 	bl	103c28 <lwipkit_status>
        return 0;
  1040a0:	e3a03000 	mov	r3, #0
  1040a4:	ea000001 	b	1040b0 <main+0x454>
    }

    lwipkit_usage();
  1040a8:	ebfffee4 	bl	103c40 <lwipkit_usage>
    return -1;
  1040ac:	e3e03000 	mvn	r3, #0
}
  1040b0:	e1a00003 	mov	r0, r3
  1040b4:	e24bd008 	sub	sp, fp, #8
  1040b8:	e8bd8810 	pop	{r4, fp, pc}

001040bc <channel_compose_cmd>:
#include "channel.h"

static int _shm_key = -1;
int channel_compose_cmd(uint32_t cmd, void *arg0, void *arg1, void *arg2,
    void *arg3, void *arg4, void *arg5, size_t datalen)
{
  1040bc:	e92d4800 	push	{fp, lr}
  1040c0:	e28db004 	add	fp, sp, #4
  1040c4:	e24dd020 	sub	sp, sp, #32
  1040c8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1040cc:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  1040d0:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  1040d4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    int shmid;
    void *shm_vaddr = NULL;
  1040d8:	e3a03000 	mov	r3, #0
  1040dc:	e50b3008 	str	r3, [fp, #-8]
    struct channel_cmd *pcmd = NULL;
  1040e0:	e3a03000 	mov	r3, #0
  1040e4:	e50b300c 	str	r3, [fp, #-12]

    /* the shared memory includes the command and the possible data */
    size_t len = datalen + CHANNEL_CMD_OFFSET;
  1040e8:	e59b3010 	ldr	r3, [fp, #16]
  1040ec:	e283301c 	add	r3, r3, #28
  1040f0:	e50b3010 	str	r3, [fp, #-16]

    /* use the current thread ID to label the shared memory */
    if (_shm_key == -1)_shm_key = (int)(unsigned long)rt_thread_self();
  1040f4:	e30e301c 	movw	r3, #57372	; 0xe01c
  1040f8:	e3403014 	movt	r3, #20
  1040fc:	e5933000 	ldr	r3, [r3]
  104100:	e3730001 	cmn	r3, #1
  104104:	1a000005 	bne	104120 <channel_compose_cmd+0x64>
  104108:	ebfff839 	bl	1021f4 <rt_thread_self>
  10410c:	e1a03000 	mov	r3, r0
  104110:	e1a02003 	mov	r2, r3
  104114:	e30e301c 	movw	r3, #57372	; 0xe01c
  104118:	e3403014 	movt	r3, #20
  10411c:	e5832000 	str	r2, [r3]
    _shm_key = _shm_key + 2;
  104120:	e30e301c 	movw	r3, #57372	; 0xe01c
  104124:	e3403014 	movt	r3, #20
  104128:	e5933000 	ldr	r3, [r3]
  10412c:	e2832002 	add	r2, r3, #2
  104130:	e30e301c 	movw	r3, #57372	; 0xe01c
  104134:	e3403014 	movt	r3, #20
  104138:	e5832000 	str	r2, [r3]

    shmid = lwp_shmget(_shm_key, len, 1);    /* create a new shared-memory */
  10413c:	e30e301c 	movw	r3, #57372	; 0xe01c
  104140:	e3403014 	movt	r3, #20
  104144:	e5933000 	ldr	r3, [r3]
  104148:	e3a02001 	mov	r2, #1
  10414c:	e51b1010 	ldr	r1, [fp, #-16]
  104150:	e1a00003 	mov	r0, r3
  104154:	ebfff753 	bl	101ea8 <lwp_shmget>
  104158:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
    if (shmid == -1)
  10415c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  104160:	e3730001 	cmn	r3, #1
  104164:	1a00000a 	bne	104194 <channel_compose_cmd+0xd8>
    {
        rt_kprintf("%s :Fail to allocate a shared memory! _shm_key %ld\n",__func__,_shm_key);
  104168:	e30e301c 	movw	r3, #57372	; 0xe01c
  10416c:	e3403014 	movt	r3, #20
  104170:	e5933000 	ldr	r3, [r3]
  104174:	e1a02003 	mov	r2, r3
  104178:	e3051aa0 	movw	r1, #23200	; 0x5aa0
  10417c:	e3401014 	movt	r1, #20
  104180:	e3050a30 	movw	r0, #23088	; 0x5a30
  104184:	e3400014 	movt	r0, #20
  104188:	ebfffbe1 	bl	103114 <rt_kprintf>
        return -1;
  10418c:	e3e03000 	mvn	r3, #0
  104190:	ea000027 	b	104234 <channel_compose_cmd+0x178>
    }

    /* get the start address of the shared memory */
    shm_vaddr = lwp_shmat(shmid, NULL);
  104194:	e3a01000 	mov	r1, #0
  104198:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  10419c:	ebfff75b 	bl	101f10 <lwp_shmat>
  1041a0:	e50b0008 	str	r0, [fp, #-8]
    if (shm_vaddr == NULL)
  1041a4:	e51b3008 	ldr	r3, [fp, #-8]
  1041a8:	e3530000 	cmp	r3, #0
  1041ac:	1a000006 	bne	1041cc <channel_compose_cmd+0x110>
    {
        printf("The allocated shared memory doesn't have a valid address!\n");
  1041b0:	e3050a64 	movw	r0, #23140	; 0x5a64
  1041b4:	e3400014 	movt	r0, #20
  1041b8:	eb00e986 	bl	13e7d8 <puts>
        lwp_shmrm(shmid);
  1041bc:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1041c0:	ebfff747 	bl	101ee4 <lwp_shmrm>
        return -1;
  1041c4:	e3e03000 	mvn	r3, #0
  1041c8:	ea000019 	b	104234 <channel_compose_cmd+0x178>
    }

    /* prepare the command structure */
    pcmd = (struct channel_cmd *) shm_vaddr;
  1041cc:	e51b3008 	ldr	r3, [fp, #-8]
  1041d0:	e50b300c 	str	r3, [fp, #-12]

    pcmd->cmd = cmd;
  1041d4:	e51b300c 	ldr	r3, [fp, #-12]
  1041d8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1041dc:	e5832000 	str	r2, [r3]
    pcmd->argv[0] = arg0;
  1041e0:	e51b300c 	ldr	r3, [fp, #-12]
  1041e4:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1041e8:	e5832004 	str	r2, [r3, #4]
    pcmd->argv[1] = arg1;
  1041ec:	e51b300c 	ldr	r3, [fp, #-12]
  1041f0:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1041f4:	e5832008 	str	r2, [r3, #8]
    pcmd->argv[2] = arg2;
  1041f8:	e51b300c 	ldr	r3, [fp, #-12]
  1041fc:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  104200:	e583200c 	str	r2, [r3, #12]
    pcmd->argv[3] = arg3;
  104204:	e51b300c 	ldr	r3, [fp, #-12]
  104208:	e59b2004 	ldr	r2, [fp, #4]
  10420c:	e5832010 	str	r2, [r3, #16]
    pcmd->argv[4] = arg4;
  104210:	e51b300c 	ldr	r3, [fp, #-12]
  104214:	e59b2008 	ldr	r2, [fp, #8]
  104218:	e5832014 	str	r2, [r3, #20]
    pcmd->argv[5] = arg5;
  10421c:	e51b300c 	ldr	r3, [fp, #-12]
  104220:	e59b200c 	ldr	r2, [fp, #12]
  104224:	e5832018 	str	r2, [r3, #24]

    lwp_shmdt(shm_vaddr);
  104228:	e51b0008 	ldr	r0, [fp, #-8]
  10422c:	ebfff744 	bl	101f44 <lwp_shmdt>

    return shmid;
  104230:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
}
  104234:	e1a00003 	mov	r0, r3
  104238:	e24bd004 	sub	sp, fp, #4
  10423c:	e8bd8800 	pop	{fp, pc}

00104240 <channel_cmd_send_recv>:
{
  104240:	e92d4800 	push	{fp, lr}
  104244:	e28db004 	add	fp, sp, #4
  104248:	e24dd018 	sub	sp, sp, #24
  10424c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  104250:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(channel >= 0);
  104254:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  104258:	e3530000 	cmp	r3, #0
  10425c:	aa000005 	bge	104278 <channel_cmd_send_recv+0x38>
  104260:	e3a0200a 	mov	r2, #10
  104264:	e3051b00 	movw	r1, #23296	; 0x5b00
  104268:	e3401014 	movt	r1, #20
  10426c:	e3050ab4 	movw	r0, #23220	; 0x5ab4
  104270:	e3400014 	movt	r0, #20
  104274:	ebfffcc7 	bl	103598 <rt_assert_handler>
    chn_msg.type   = RT_CHANNEL_RAW;
  104278:	e3a03000 	mov	r3, #0
  10427c:	e50b3010 	str	r3, [fp, #-16]
    chn_msg.u.d    = cmd;
  104280:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  104284:	e50b300c 	str	r3, [fp, #-12]
    rt_channel_send_recv(channel, &chn_msg, &chn_msg);
  104288:	e24b2014 	sub	r2, fp, #20
  10428c:	e24b3014 	sub	r3, fp, #20
  104290:	e1a01003 	mov	r1, r3
  104294:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  104298:	ebffefb6 	bl	100178 <rt_channel_send_recv>
    return chn_msg.u.d;
  10429c:	e51b300c 	ldr	r3, [fp, #-12]
}
  1042a0:	e1a00003 	mov	r0, r3
  1042a4:	e24bd004 	sub	sp, fp, #4
  1042a8:	e8bd8800 	pop	{fp, pc}

001042ac <channel_cmd_recv>:
{
  1042ac:	e92d4800 	push	{fp, lr}
  1042b0:	e28db004 	add	fp, sp, #4
  1042b4:	e24dd018 	sub	sp, sp, #24
  1042b8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    RT_ASSERT(channel >= 0);
  1042bc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1042c0:	e3530000 	cmp	r3, #0
  1042c4:	aa000005 	bge	1042e0 <channel_cmd_recv+0x34>
  1042c8:	e3a02027 	mov	r2, #39	; 0x27
  1042cc:	e3051aec 	movw	r1, #23276	; 0x5aec
  1042d0:	e3401014 	movt	r1, #20
  1042d4:	e3050ab4 	movw	r0, #23220	; 0x5ab4
  1042d8:	e3400014 	movt	r0, #20
  1042dc:	ebfffcad 	bl	103598 <rt_assert_handler>
    chn_msg.type = RT_CHANNEL_RAW;
  1042e0:	e3a03000 	mov	r3, #0
  1042e4:	e50b3010 	str	r3, [fp, #-16]
    rt_channel_recv(channel, &chn_msg);
  1042e8:	e24b3014 	sub	r3, fp, #20
  1042ec:	e1a01003 	mov	r1, r3
  1042f0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1042f4:	ebffefdc 	bl	10026c <rt_channel_recv>
    return chn_msg.u.d;
  1042f8:	e51b300c 	ldr	r3, [fp, #-12]
}
  1042fc:	e1a00003 	mov	r0, r3
  104300:	e24bd004 	sub	sp, fp, #4
  104304:	e8bd8800 	pop	{fp, pc}

00104308 <ipc_service_init>:
const char *ueth_srv_name = "ueth_srv";
static int ueth_int_channel = -1;
const char *ueth_int_name = "ueth_int";

rt_err_t ipc_service_init()
{
  104308:	e92d4800 	push	{fp, lr}
  10430c:	e28db004 	add	fp, sp, #4
    ueth_ueth_srv_channel = rt_channel_open(ueth_srv_name, O_RDWR);
  104310:	e30e3024 	movw	r3, #57380	; 0xe024
  104314:	e3403014 	movt	r3, #20
  104318:	e5933000 	ldr	r3, [r3]
  10431c:	e3a01002 	mov	r1, #2
  104320:	e1a00003 	mov	r0, r3
  104324:	ebffef7b 	bl	100118 <rt_channel_open>
  104328:	e1a02000 	mov	r2, r0
  10432c:	e30e3020 	movw	r3, #57376	; 0xe020
  104330:	e3403014 	movt	r3, #20
  104334:	e5832000 	str	r2, [r3]
    if (ueth_ueth_srv_channel < 0)
  104338:	e30e3020 	movw	r3, #57376	; 0xe020
  10433c:	e3403014 	movt	r3, #20
  104340:	e5933000 	ldr	r3, [r3]
  104344:	e3530000 	cmp	r3, #0
  104348:	aa000008 	bge	104370 <ipc_service_init+0x68>
    {
        printf("open %s failed\n", ueth_srv_name);
  10434c:	e30e3024 	movw	r3, #57380	; 0xe024
  104350:	e3403014 	movt	r3, #20
  104354:	e5933000 	ldr	r3, [r3]
  104358:	e1a01003 	mov	r1, r3
  10435c:	e3050adc 	movw	r0, #23260	; 0x5adc
  104360:	e3400014 	movt	r0, #20
  104364:	eb00e90d 	bl	13e7a0 <printf>
        return RT_ERROR;
  104368:	e3a03001 	mov	r3, #1
  10436c:	ea000018 	b	1043d4 <ipc_service_init+0xcc>
    }

    ueth_int_channel = rt_channel_open(ueth_int_name, O_RDWR);
  104370:	e30e302c 	movw	r3, #57388	; 0xe02c
  104374:	e3403014 	movt	r3, #20
  104378:	e5933000 	ldr	r3, [r3]
  10437c:	e3a01002 	mov	r1, #2
  104380:	e1a00003 	mov	r0, r3
  104384:	ebffef63 	bl	100118 <rt_channel_open>
  104388:	e1a02000 	mov	r2, r0
  10438c:	e30e3028 	movw	r3, #57384	; 0xe028
  104390:	e3403014 	movt	r3, #20
  104394:	e5832000 	str	r2, [r3]
    if (ueth_int_channel < 0)
  104398:	e30e3028 	movw	r3, #57384	; 0xe028
  10439c:	e3403014 	movt	r3, #20
  1043a0:	e5933000 	ldr	r3, [r3]
  1043a4:	e3530000 	cmp	r3, #0
  1043a8:	aa000008 	bge	1043d0 <ipc_service_init+0xc8>
    {
        printf("open %s failed\n", ueth_int_name);
  1043ac:	e30e302c 	movw	r3, #57388	; 0xe02c
  1043b0:	e3403014 	movt	r3, #20
  1043b4:	e5933000 	ldr	r3, [r3]
  1043b8:	e1a01003 	mov	r1, r3
  1043bc:	e3050adc 	movw	r0, #23260	; 0x5adc
  1043c0:	e3400014 	movt	r0, #20
  1043c4:	eb00e8f5 	bl	13e7a0 <printf>
        return RT_ERROR;
  1043c8:	e3a03001 	mov	r3, #1
  1043cc:	ea000000 	b	1043d4 <ipc_service_init+0xcc>
    }

    return RT_EOK;
  1043d0:	e3a03000 	mov	r3, #0
}
  1043d4:	e1a00003 	mov	r0, r3
  1043d8:	e8bd8800 	pop	{fp, pc}

001043dc <ueth_int_recv>:

void ueth_int_recv(void)
{
  1043dc:	e92d4800 	push	{fp, lr}
  1043e0:	e28db004 	add	fp, sp, #4
    channel_cmd_recv(ueth_int_channel);
  1043e4:	e30e3028 	movw	r3, #57384	; 0xe028
  1043e8:	e3403014 	movt	r3, #20
  1043ec:	e5933000 	ldr	r3, [r3]
  1043f0:	e1a00003 	mov	r0, r3
  1043f4:	ebffffac 	bl	1042ac <channel_cmd_recv>
}
  1043f8:	e320f000 	nop	{0}
  1043fc:	e8bd8800 	pop	{fp, pc}

00104400 <ueth_v2p>:

void *ueth_v2p(void * addr)
{
  104400:	e92d4800 	push	{fp, lr}
  104404:	e28db004 	add	fp, sp, #4
  104408:	e24dd028 	sub	sp, sp, #40	; 0x28
  10440c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    void* thread_self = rt_thread_self();
  104410:	ebfff777 	bl	1021f4 <rt_thread_self>
  104414:	e50b000c 	str	r0, [fp, #-12]
    int shmid = channel_compose_cmd3(UETH_V2P_REQ, (void*)0, thread_self, addr, 0);
  104418:	e3a03000 	mov	r3, #0
  10441c:	e58d300c 	str	r3, [sp, #12]
  104420:	e3a03000 	mov	r3, #0
  104424:	e58d3008 	str	r3, [sp, #8]
  104428:	e3a03000 	mov	r3, #0
  10442c:	e58d3004 	str	r3, [sp, #4]
  104430:	e3a03000 	mov	r3, #0
  104434:	e58d3000 	str	r3, [sp]
  104438:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10443c:	e51b200c 	ldr	r2, [fp, #-12]
  104440:	e3a01000 	mov	r1, #0
  104444:	e3a00005 	mov	r0, #5
  104448:	ebffff1b 	bl	1040bc <channel_compose_cmd>
  10444c:	e50b0010 	str	r0, [fp, #-16]
    void *res = RT_NULL;
  104450:	e3a03000 	mov	r3, #0
  104454:	e50b3008 	str	r3, [fp, #-8]
    struct channel_cmd *cmd  = (struct channel_cmd *)lwp_shmat(shmid, NULL);
  104458:	e3a01000 	mov	r1, #0
  10445c:	e51b0010 	ldr	r0, [fp, #-16]
  104460:	ebfff6aa 	bl	101f10 <lwp_shmat>
  104464:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
    if (cmd) 
  104468:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10446c:	e3530000 	cmp	r3, #0
  104470:	0a000009 	beq	10449c <ueth_v2p+0x9c>
    {
        res = channel_cmd_send_recv(ueth_ueth_srv_channel, (void*)(size_t)shmid);
  104474:	e30e3020 	movw	r3, #57376	; 0xe020
  104478:	e3403014 	movt	r3, #20
  10447c:	e5933000 	ldr	r3, [r3]
  104480:	e51b2010 	ldr	r2, [fp, #-16]
  104484:	e1a01002 	mov	r1, r2
  104488:	e1a00003 	mov	r0, r3
  10448c:	ebffff6b 	bl	104240 <channel_cmd_send_recv>
  104490:	e50b0008 	str	r0, [fp, #-8]
        lwp_shmdt(cmd);
  104494:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  104498:	ebfff6a9 	bl	101f44 <lwp_shmdt>
    }

    lwp_shmrm(shmid);
  10449c:	e51b0010 	ldr	r0, [fp, #-16]
  1044a0:	ebfff68f 	bl	101ee4 <lwp_shmrm>
    return res;
  1044a4:	e51b3008 	ldr	r3, [fp, #-8]

}
  1044a8:	e1a00003 	mov	r0, r3
  1044ac:	e24bd004 	sub	sp, fp, #4
  1044b0:	e8bd8800 	pop	{fp, pc}

001044b4 <ueth_remap>:

void *ueth_remap(void * addr, int type, size_t size) 
{
  1044b4:	e92d4800 	push	{fp, lr}
  1044b8:	e28db004 	add	fp, sp, #4
  1044bc:	e24dd030 	sub	sp, sp, #48	; 0x30
  1044c0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1044c4:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  1044c8:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
    void* thread_self = rt_thread_self();
  1044cc:	ebfff748 	bl	1021f4 <rt_thread_self>
  1044d0:	e50b000c 	str	r0, [fp, #-12]
    int shmid = channel_compose_cmd4(UETH_REMAP_REQ, (void*)0, thread_self, (void*)type, addr, sizeof(size_t));
  1044d4:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1044d8:	e3a03004 	mov	r3, #4
  1044dc:	e58d300c 	str	r3, [sp, #12]
  1044e0:	e3a03000 	mov	r3, #0
  1044e4:	e58d3008 	str	r3, [sp, #8]
  1044e8:	e3a03000 	mov	r3, #0
  1044ec:	e58d3004 	str	r3, [sp, #4]
  1044f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1044f4:	e58d3000 	str	r3, [sp]
  1044f8:	e1a03002 	mov	r3, r2
  1044fc:	e51b200c 	ldr	r2, [fp, #-12]
  104500:	e3a01000 	mov	r1, #0
  104504:	e3a00001 	mov	r0, #1
  104508:	ebfffeeb 	bl	1040bc <channel_compose_cmd>
  10450c:	e50b0010 	str	r0, [fp, #-16]
    void *res = RT_NULL;
  104510:	e3a03000 	mov	r3, #0
  104514:	e50b3008 	str	r3, [fp, #-8]
    struct channel_cmd *cmd  = (struct channel_cmd *)lwp_shmat(shmid, NULL);
  104518:	e3a01000 	mov	r1, #0
  10451c:	e51b0010 	ldr	r0, [fp, #-16]
  104520:	ebfff67a 	bl	101f10 <lwp_shmat>
  104524:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
    if (cmd) 
  104528:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10452c:	e3530000 	cmp	r3, #0
  104530:	0a00000d 	beq	10456c <ueth_remap+0xb8>
    {
        memcpy(CHANNEL_CMD_DATA(cmd), (void*)&size, sizeof(size_t));
  104534:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  104538:	e283301c 	add	r3, r3, #28
  10453c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  104540:	e5832000 	str	r2, [r3]
        res = channel_cmd_send_recv(ueth_ueth_srv_channel, (void*)(size_t)shmid);
  104544:	e30e3020 	movw	r3, #57376	; 0xe020
  104548:	e3403014 	movt	r3, #20
  10454c:	e5933000 	ldr	r3, [r3]
  104550:	e51b2010 	ldr	r2, [fp, #-16]
  104554:	e1a01002 	mov	r1, r2
  104558:	e1a00003 	mov	r0, r3
  10455c:	ebffff37 	bl	104240 <channel_cmd_send_recv>
  104560:	e50b0008 	str	r0, [fp, #-8]
        lwp_shmdt(cmd);
  104564:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  104568:	ebfff675 	bl	101f44 <lwp_shmdt>
    }

    lwp_shmrm(shmid);
  10456c:	e51b0010 	ldr	r0, [fp, #-16]
  104570:	ebfff65b 	bl	101ee4 <lwp_shmrm>
    return res;
  104574:	e51b3008 	ldr	r3, [fp, #-8]
}
  104578:	e1a00003 	mov	r0, r3
  10457c:	e24bd004 	sub	sp, fp, #4
  104580:	e8bd8800 	pop	{fp, pc}

00104584 <ueth_gpioinit>:

void ueth_gpioinit(void *gpio, size_t size) 
{
  104584:	e92d4800 	push	{fp, lr}
  104588:	e28db004 	add	fp, sp, #4
  10458c:	e24dd020 	sub	sp, sp, #32
  104590:	e50b0010 	str	r0, [fp, #-16]
  104594:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    int shmid = channel_compose_cmd1(UETH_GPIOINIT_REQ, (void*)0, size);
  104598:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10459c:	e58d300c 	str	r3, [sp, #12]
  1045a0:	e3a03000 	mov	r3, #0
  1045a4:	e58d3008 	str	r3, [sp, #8]
  1045a8:	e3a03000 	mov	r3, #0
  1045ac:	e58d3004 	str	r3, [sp, #4]
  1045b0:	e3a03000 	mov	r3, #0
  1045b4:	e58d3000 	str	r3, [sp]
  1045b8:	e3a03000 	mov	r3, #0
  1045bc:	e3a02000 	mov	r2, #0
  1045c0:	e3a01000 	mov	r1, #0
  1045c4:	e3a00002 	mov	r0, #2
  1045c8:	ebfffebb 	bl	1040bc <channel_compose_cmd>
  1045cc:	e50b0008 	str	r0, [fp, #-8]
    struct channel_cmd *cmd = (struct channel_cmd*)lwp_shmat(shmid, NULL);
  1045d0:	e3a01000 	mov	r1, #0
  1045d4:	e51b0008 	ldr	r0, [fp, #-8]
  1045d8:	ebfff64c 	bl	101f10 <lwp_shmat>
  1045dc:	e50b000c 	str	r0, [fp, #-12]
    if (cmd)
  1045e0:	e51b300c 	ldr	r3, [fp, #-12]
  1045e4:	e3530000 	cmp	r3, #0
  1045e8:	0a00000e 	beq	104628 <ueth_gpioinit+0xa4>
    {
        memcpy(CHANNEL_CMD_DATA(cmd), gpio, size);
  1045ec:	e51b300c 	ldr	r3, [fp, #-12]
  1045f0:	e283301c 	add	r3, r3, #28
  1045f4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1045f8:	e51b1010 	ldr	r1, [fp, #-16]
  1045fc:	e1a00003 	mov	r0, r3
  104600:	eb00f25d 	bl	140f7c <memcpy>
        channel_cmd_send_recv(ueth_ueth_srv_channel, (void *)(size_t)shmid);
  104604:	e30e3020 	movw	r3, #57376	; 0xe020
  104608:	e3403014 	movt	r3, #20
  10460c:	e5933000 	ldr	r3, [r3]
  104610:	e51b2008 	ldr	r2, [fp, #-8]
  104614:	e1a01002 	mov	r1, r2
  104618:	e1a00003 	mov	r0, r3
  10461c:	ebffff07 	bl	104240 <channel_cmd_send_recv>
        lwp_shmdt(cmd);
  104620:	e51b000c 	ldr	r0, [fp, #-12]
  104624:	ebfff646 	bl	101f44 <lwp_shmdt>
    }

    lwp_shmrm(shmid);
  104628:	e51b0008 	ldr	r0, [fp, #-8]
  10462c:	ebfff62c 	bl	101ee4 <lwp_shmrm>
}
  104630:	e320f000 	nop	{0}
  104634:	e24bd004 	sub	sp, fp, #4
  104638:	e8bd8800 	pop	{fp, pc}

0010463c <ueth_init_clock>:

void ueth_init_clock() 
{
  10463c:	e92d4800 	push	{fp, lr}
  104640:	e28db004 	add	fp, sp, #4
  104644:	e24dd018 	sub	sp, sp, #24
    int shmid = channel_compose_cmd1(UETH_CLOCKINIT_REQ, (void*)0, 0);
  104648:	e3a03000 	mov	r3, #0
  10464c:	e58d300c 	str	r3, [sp, #12]
  104650:	e3a03000 	mov	r3, #0
  104654:	e58d3008 	str	r3, [sp, #8]
  104658:	e3a03000 	mov	r3, #0
  10465c:	e58d3004 	str	r3, [sp, #4]
  104660:	e3a03000 	mov	r3, #0
  104664:	e58d3000 	str	r3, [sp]
  104668:	e3a03000 	mov	r3, #0
  10466c:	e3a02000 	mov	r2, #0
  104670:	e3a01000 	mov	r1, #0
  104674:	e3a00003 	mov	r0, #3
  104678:	ebfffe8f 	bl	1040bc <channel_compose_cmd>
  10467c:	e50b0008 	str	r0, [fp, #-8]
    struct channel_cmd *cmd = (struct channel_cmd*)lwp_shmat(shmid, NULL);
  104680:	e3a01000 	mov	r1, #0
  104684:	e51b0008 	ldr	r0, [fp, #-8]
  104688:	ebfff620 	bl	101f10 <lwp_shmat>
  10468c:	e50b000c 	str	r0, [fp, #-12]
    if (cmd)
  104690:	e51b300c 	ldr	r3, [fp, #-12]
  104694:	e3530000 	cmp	r3, #0
  104698:	0a000008 	beq	1046c0 <ueth_init_clock+0x84>
    {
        channel_cmd_send_recv(ueth_ueth_srv_channel, (void *)(size_t)shmid);
  10469c:	e30e3020 	movw	r3, #57376	; 0xe020
  1046a0:	e3403014 	movt	r3, #20
  1046a4:	e5933000 	ldr	r3, [r3]
  1046a8:	e51b2008 	ldr	r2, [fp, #-8]
  1046ac:	e1a01002 	mov	r1, r2
  1046b0:	e1a00003 	mov	r0, r3
  1046b4:	ebfffee1 	bl	104240 <channel_cmd_send_recv>
        lwp_shmdt(cmd);
  1046b8:	e51b000c 	ldr	r0, [fp, #-12]
  1046bc:	ebfff620 	bl	101f44 <lwp_shmdt>
    }

    lwp_shmrm(shmid);
  1046c0:	e51b0008 	ldr	r0, [fp, #-8]
  1046c4:	ebfff606 	bl	101ee4 <lwp_shmrm>
}
  1046c8:	e320f000 	nop	{0}
  1046cc:	e24bd004 	sub	sp, fp, #4
  1046d0:	e8bd8800 	pop	{fp, pc}

001046d4 <ueth_dcache_clean>:

void ueth_dcache_clean(void *paddr, size_t size)
{
  1046d4:	e92d4800 	push	{fp, lr}
  1046d8:	e28db004 	add	fp, sp, #4
  1046dc:	e24dd020 	sub	sp, sp, #32
  1046e0:	e50b0010 	str	r0, [fp, #-16]
  1046e4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    int shmid = channel_compose_cmd3(UETH_DCACHE_REQ, (void*)0, (void*)UETH_DCACHE_CLEAN, paddr, sizeof(size_t));
  1046e8:	e3a03004 	mov	r3, #4
  1046ec:	e58d300c 	str	r3, [sp, #12]
  1046f0:	e3a03000 	mov	r3, #0
  1046f4:	e58d3008 	str	r3, [sp, #8]
  1046f8:	e3a03000 	mov	r3, #0
  1046fc:	e58d3004 	str	r3, [sp, #4]
  104700:	e3a03000 	mov	r3, #0
  104704:	e58d3000 	str	r3, [sp]
  104708:	e51b3010 	ldr	r3, [fp, #-16]
  10470c:	e3a02001 	mov	r2, #1
  104710:	e3a01000 	mov	r1, #0
  104714:	e3a00004 	mov	r0, #4
  104718:	ebfffe67 	bl	1040bc <channel_compose_cmd>
  10471c:	e50b0008 	str	r0, [fp, #-8]
    struct channel_cmd *cmd = (struct channel_cmd*)lwp_shmat(shmid, NULL);
  104720:	e3a01000 	mov	r1, #0
  104724:	e51b0008 	ldr	r0, [fp, #-8]
  104728:	ebfff5f8 	bl	101f10 <lwp_shmat>
  10472c:	e50b000c 	str	r0, [fp, #-12]
    if (cmd)
  104730:	e51b300c 	ldr	r3, [fp, #-12]
  104734:	e3530000 	cmp	r3, #0
  104738:	0a00000c 	beq	104770 <ueth_dcache_clean+0x9c>
    {
        memcpy(CHANNEL_CMD_DATA(cmd), (void*)&size, sizeof(size_t));
  10473c:	e51b300c 	ldr	r3, [fp, #-12]
  104740:	e283301c 	add	r3, r3, #28
  104744:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  104748:	e5832000 	str	r2, [r3]
        channel_cmd_send_recv(ueth_ueth_srv_channel, (void *)(size_t)shmid);
  10474c:	e30e3020 	movw	r3, #57376	; 0xe020
  104750:	e3403014 	movt	r3, #20
  104754:	e5933000 	ldr	r3, [r3]
  104758:	e51b2008 	ldr	r2, [fp, #-8]
  10475c:	e1a01002 	mov	r1, r2
  104760:	e1a00003 	mov	r0, r3
  104764:	ebfffeb5 	bl	104240 <channel_cmd_send_recv>
        lwp_shmdt(cmd);
  104768:	e51b000c 	ldr	r0, [fp, #-12]
  10476c:	ebfff5f4 	bl	101f44 <lwp_shmdt>
    }

    lwp_shmrm(shmid);
  104770:	e51b0008 	ldr	r0, [fp, #-8]
  104774:	ebfff5da 	bl	101ee4 <lwp_shmrm>
    return;
  104778:	e320f000 	nop	{0}
}
  10477c:	e24bd004 	sub	sp, fp, #4
  104780:	e8bd8800 	pop	{fp, pc}

00104784 <ueth_dcache_invalid>:

void ueth_dcache_invalid(void *paddr, size_t size)
{
  104784:	e92d4800 	push	{fp, lr}
  104788:	e28db004 	add	fp, sp, #4
  10478c:	e24dd020 	sub	sp, sp, #32
  104790:	e50b0010 	str	r0, [fp, #-16]
  104794:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    int shmid = channel_compose_cmd3(UETH_DCACHE_REQ, (void*)0, (void*)UETH_DCACHE_INVALID, paddr, sizeof(size_t));
  104798:	e3a03004 	mov	r3, #4
  10479c:	e58d300c 	str	r3, [sp, #12]
  1047a0:	e3a03000 	mov	r3, #0
  1047a4:	e58d3008 	str	r3, [sp, #8]
  1047a8:	e3a03000 	mov	r3, #0
  1047ac:	e58d3004 	str	r3, [sp, #4]
  1047b0:	e3a03000 	mov	r3, #0
  1047b4:	e58d3000 	str	r3, [sp]
  1047b8:	e51b3010 	ldr	r3, [fp, #-16]
  1047bc:	e3a02002 	mov	r2, #2
  1047c0:	e3a01000 	mov	r1, #0
  1047c4:	e3a00004 	mov	r0, #4
  1047c8:	ebfffe3b 	bl	1040bc <channel_compose_cmd>
  1047cc:	e50b0008 	str	r0, [fp, #-8]
    struct channel_cmd *cmd = (struct channel_cmd*)lwp_shmat(shmid, NULL);
  1047d0:	e3a01000 	mov	r1, #0
  1047d4:	e51b0008 	ldr	r0, [fp, #-8]
  1047d8:	ebfff5cc 	bl	101f10 <lwp_shmat>
  1047dc:	e50b000c 	str	r0, [fp, #-12]
    if (cmd)
  1047e0:	e51b300c 	ldr	r3, [fp, #-12]
  1047e4:	e3530000 	cmp	r3, #0
  1047e8:	0a00000c 	beq	104820 <ueth_dcache_invalid+0x9c>
    {
        memcpy(CHANNEL_CMD_DATA(cmd), (void*)&size, sizeof(size_t));
  1047ec:	e51b300c 	ldr	r3, [fp, #-12]
  1047f0:	e283301c 	add	r3, r3, #28
  1047f4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1047f8:	e5832000 	str	r2, [r3]
        channel_cmd_send_recv(ueth_ueth_srv_channel, (void *)(size_t)shmid);
  1047fc:	e30e3020 	movw	r3, #57376	; 0xe020
  104800:	e3403014 	movt	r3, #20
  104804:	e5933000 	ldr	r3, [r3]
  104808:	e51b2008 	ldr	r2, [fp, #-8]
  10480c:	e1a01002 	mov	r1, r2
  104810:	e1a00003 	mov	r0, r3
  104814:	ebfffe89 	bl	104240 <channel_cmd_send_recv>
        lwp_shmdt(cmd);
  104818:	e51b000c 	ldr	r0, [fp, #-12]
  10481c:	ebfff5c8 	bl	101f44 <lwp_shmdt>
    }

    lwp_shmrm(shmid);
  104820:	e51b0008 	ldr	r0, [fp, #-8]
  104824:	ebfff5ae 	bl	101ee4 <lwp_shmrm>
    return;
  104828:	e320f000 	nop	{0}
}
  10482c:	e24bd004 	sub	sp, fp, #4
  104830:	e8bd8800 	pop	{fp, pc}

00104834 <ueth_hw_interrupt_install>:

void ueth_hw_interrupt_install(int vector, void * param) {
  104834:	e92d4800 	push	{fp, lr}
  104838:	e28db004 	add	fp, sp, #4
  10483c:	e24dd020 	sub	sp, sp, #32
  104840:	e50b0010 	str	r0, [fp, #-16]
  104844:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    int shmid = channel_compose_cmd3(UETH_INSTALL_INTERRUPT_REQ, (void*)0, (void*)vector, param, 0);
  104848:	e51b2010 	ldr	r2, [fp, #-16]
  10484c:	e3a03000 	mov	r3, #0
  104850:	e58d300c 	str	r3, [sp, #12]
  104854:	e3a03000 	mov	r3, #0
  104858:	e58d3008 	str	r3, [sp, #8]
  10485c:	e3a03000 	mov	r3, #0
  104860:	e58d3004 	str	r3, [sp, #4]
  104864:	e3a03000 	mov	r3, #0
  104868:	e58d3000 	str	r3, [sp]
  10486c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  104870:	e3a01000 	mov	r1, #0
  104874:	e3a00006 	mov	r0, #6
  104878:	ebfffe0f 	bl	1040bc <channel_compose_cmd>
  10487c:	e50b0008 	str	r0, [fp, #-8]
    struct channel_cmd *cmd = (struct channel_cmd*)lwp_shmat(shmid, NULL);
  104880:	e3a01000 	mov	r1, #0
  104884:	e51b0008 	ldr	r0, [fp, #-8]
  104888:	ebfff5a0 	bl	101f10 <lwp_shmat>
  10488c:	e50b000c 	str	r0, [fp, #-12]
    if (cmd)
  104890:	e51b300c 	ldr	r3, [fp, #-12]
  104894:	e3530000 	cmp	r3, #0
  104898:	0a000008 	beq	1048c0 <ueth_hw_interrupt_install+0x8c>
    {
        channel_cmd_send_recv(ueth_ueth_srv_channel, (void *)(size_t)shmid);
  10489c:	e30e3020 	movw	r3, #57376	; 0xe020
  1048a0:	e3403014 	movt	r3, #20
  1048a4:	e5933000 	ldr	r3, [r3]
  1048a8:	e51b2008 	ldr	r2, [fp, #-8]
  1048ac:	e1a01002 	mov	r1, r2
  1048b0:	e1a00003 	mov	r0, r3
  1048b4:	ebfffe61 	bl	104240 <channel_cmd_send_recv>
        lwp_shmdt(cmd);
  1048b8:	e51b000c 	ldr	r0, [fp, #-12]
  1048bc:	ebfff5a0 	bl	101f44 <lwp_shmdt>
        
    }
    
    lwp_shmrm(shmid);
  1048c0:	e51b0008 	ldr	r0, [fp, #-8]
  1048c4:	ebfff586 	bl	101ee4 <lwp_shmrm>
  1048c8:	e320f000 	nop	{0}
  1048cc:	e24bd004 	sub	sp, fp, #4
  1048d0:	e8bd8800 	pop	{fp, pc}

001048d4 <inet_ioctlsocket>:
// #include "af_inet.h"

#include "netdev.h"

int inet_ioctlsocket(int socket, long cmd, void *arg)
{
  1048d4:	e92d4800 	push	{fp, lr}
  1048d8:	e28db004 	add	fp, sp, #4
  1048dc:	e24dd010 	sub	sp, sp, #16
  1048e0:	e50b0008 	str	r0, [fp, #-8]
  1048e4:	e50b100c 	str	r1, [fp, #-12]
  1048e8:	e50b2010 	str	r2, [fp, #-16]
    switch (cmd)
  1048ec:	e51b300c 	ldr	r3, [fp, #-12]
  1048f0:	e2433003 	sub	r3, r3, #3
  1048f4:	e3530001 	cmp	r3, #1
  1048f8:	8a000006 	bhi	104918 <inet_ioctlsocket+0x44>
    {
    case F_GETFL:
    case F_SETFL:
        return unet_fcntl(socket, cmd, (int)(unsigned long) arg);
  1048fc:	e51b3010 	ldr	r3, [fp, #-16]
  104900:	e1a02003 	mov	r2, r3
  104904:	e51b100c 	ldr	r1, [fp, #-12]
  104908:	e51b0008 	ldr	r0, [fp, #-8]
  10490c:	eb00123d 	bl	109208 <unet_fcntl>
  104910:	e1a03000 	mov	r3, r0
  104914:	ea000004 	b	10492c <inet_ioctlsocket+0x58>

    default:
        return unet_ioctl(socket, cmd, arg);
  104918:	e51b2010 	ldr	r2, [fp, #-16]
  10491c:	e51b100c 	ldr	r1, [fp, #-12]
  104920:	e51b0008 	ldr	r0, [fp, #-8]
  104924:	eb001245 	bl	109240 <unet_ioctl>
  104928:	e1a03000 	mov	r3, r0
    }
}
  10492c:	e1a00003 	mov	r0, r3
  104930:	e24bd004 	sub	sp, fp, #4
  104934:	e8bd8800 	pop	{fp, pc}

00104938 <sal_unet_netdev_set_pf_info>:
    &unet_netdb_ops,
};

/* Set lwIP network interface device protocol family information */
int sal_unet_netdev_set_pf_info(struct netdev *netdev)
{
  104938:	e92d4800 	push	{fp, lr}
  10493c:	e28db004 	add	fp, sp, #4
  104940:	e24dd008 	sub	sp, sp, #8
  104944:	e50b0008 	str	r0, [fp, #-8]
    RT_ASSERT(netdev);
  104948:	e51b3008 	ldr	r3, [fp, #-8]
  10494c:	e3530000 	cmp	r3, #0
  104950:	1a000005 	bne	10496c <sal_unet_netdev_set_pf_info+0x34>
  104954:	e3a02086 	mov	r2, #134	; 0x86
  104958:	e3051b7c 	movw	r1, #23420	; 0x5b7c
  10495c:	e3401014 	movt	r1, #20
  104960:	e3050b74 	movw	r0, #23412	; 0x5b74
  104964:	e3400014 	movt	r0, #20
  104968:	ebfffb0a 	bl	103598 <rt_assert_handler>

    netdev->sal_user_data = (void *)(unsigned long) &unet_inet_family;
  10496c:	e51b2008 	ldr	r2, [fp, #-8]
  104970:	e3053b64 	movw	r3, #23396	; 0x5b64
  104974:	e3403014 	movt	r3, #20
  104978:	e582303c 	str	r3, [r2, #60]	; 0x3c
    return 0;
  10497c:	e3a03000 	mov	r3, #0
}
  104980:	e1a00003 	mov	r0, r3
  104984:	e24bd004 	sub	sp, fp, #4
  104988:	e8bd8800 	pop	{fp, pc}

0010498c <ueth_device_find>:
#define MAX_DEV_NUM 3
static eth_device_node ueth_dev_list[MAX_DEV_NUM];
static char ueth_dev_list_valid[MAX_DEV_NUM];

rt_device_t ueth_device_find(const char *name)
{
  10498c:	e92d4800 	push	{fp, lr}
  104990:	e28db004 	add	fp, sp, #4
  104994:	e24dd010 	sub	sp, sp, #16
  104998:	e50b0010 	str	r0, [fp, #-16]
    for (int i = 0; i < MAX_DEV_NUM; i++)
  10499c:	e3a03000 	mov	r3, #0
  1049a0:	e50b3008 	str	r3, [fp, #-8]
  1049a4:	ea00001f 	b	104a28 <ueth_device_find+0x9c>
    {
        if (ueth_dev_list_valid[i])
  1049a8:	e30e344c 	movw	r3, #58444	; 0xe44c
  1049ac:	e3403014 	movt	r3, #20
  1049b0:	e51b2008 	ldr	r2, [fp, #-8]
  1049b4:	e0833002 	add	r3, r3, r2
  1049b8:	e5d33000 	ldrb	r3, [r3]
  1049bc:	e3530000 	cmp	r3, #0
  1049c0:	0a000015 	beq	104a1c <ueth_device_find+0x90>
        {
            if (strncmp(ueth_dev_list[i].name, name, 8) == 0)
  1049c4:	e51b3008 	ldr	r3, [fp, #-8]
  1049c8:	e3a0200c 	mov	r2, #12
  1049cc:	e0020392 	mul	r2, r2, r3
  1049d0:	e30e3428 	movw	r3, #58408	; 0xe428
  1049d4:	e3403014 	movt	r3, #20
  1049d8:	e0823003 	add	r3, r2, r3
  1049dc:	e2833004 	add	r3, r3, #4
  1049e0:	e3a02008 	mov	r2, #8
  1049e4:	e51b1010 	ldr	r1, [fp, #-16]
  1049e8:	e1a00003 	mov	r0, r3
  1049ec:	eb00f357 	bl	141750 <strncmp>
  1049f0:	e1a03000 	mov	r3, r0
  1049f4:	e3530000 	cmp	r3, #0
  1049f8:	1a000007 	bne	104a1c <ueth_device_find+0x90>
            {  
                return ueth_dev_list[i].dev;
  1049fc:	e30e3428 	movw	r3, #58408	; 0xe428
  104a00:	e3403014 	movt	r3, #20
  104a04:	e51b2008 	ldr	r2, [fp, #-8]
  104a08:	e3a0100c 	mov	r1, #12
  104a0c:	e0020291 	mul	r2, r1, r2
  104a10:	e0833002 	add	r3, r3, r2
  104a14:	e5933000 	ldr	r3, [r3]
  104a18:	ea000006 	b	104a38 <ueth_device_find+0xac>
    for (int i = 0; i < MAX_DEV_NUM; i++)
  104a1c:	e51b3008 	ldr	r3, [fp, #-8]
  104a20:	e2833001 	add	r3, r3, #1
  104a24:	e50b3008 	str	r3, [fp, #-8]
  104a28:	e51b3008 	ldr	r3, [fp, #-8]
  104a2c:	e3530002 	cmp	r3, #2
  104a30:	daffffdc 	ble	1049a8 <ueth_device_find+0x1c>
            }
        }
    }

    return RT_NULL;
  104a34:	e3a03000 	mov	r3, #0
}
  104a38:	e1a00003 	mov	r0, r3
  104a3c:	e24bd004 	sub	sp, fp, #4
  104a40:	e8bd8800 	pop	{fp, pc}

00104a44 <ueth_device_register>:

rt_err_t ueth_device_register(rt_device_t dev, const char *name, rt_uint16_t flags)
{
  104a44:	e92d4800 	push	{fp, lr}
  104a48:	e28db004 	add	fp, sp, #4
  104a4c:	e24dd018 	sub	sp, sp, #24
  104a50:	e50b0010 	str	r0, [fp, #-16]
  104a54:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  104a58:	e1a03002 	mov	r3, r2
  104a5c:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
    if (dev == RT_NULL)
  104a60:	e51b3010 	ldr	r3, [fp, #-16]
  104a64:	e3530000 	cmp	r3, #0
  104a68:	1a000001 	bne	104a74 <ueth_device_register+0x30>
        return -RT_ERROR;
  104a6c:	e3e03000 	mvn	r3, #0
  104a70:	ea000042 	b	104b80 <ueth_device_register+0x13c>

    if (ueth_device_find(name) != RT_NULL)
  104a74:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  104a78:	ebffffc3 	bl	10498c <ueth_device_find>
  104a7c:	e1a03000 	mov	r3, r0
  104a80:	e3530000 	cmp	r3, #0
  104a84:	0a000001 	beq	104a90 <ueth_device_register+0x4c>
        return -RT_ERROR;
  104a88:	e3e03000 	mvn	r3, #0
  104a8c:	ea00003b 	b	104b80 <ueth_device_register+0x13c>

    int ueth_dev_list_index = 0;
  104a90:	e3a03000 	mov	r3, #0
  104a94:	e50b3008 	str	r3, [fp, #-8]
    while (ueth_dev_list_index < MAX_DEV_NUM)
  104a98:	ea000009 	b	104ac4 <ueth_device_register+0x80>
    {
        if (!ueth_dev_list_valid[ueth_dev_list_index])
  104a9c:	e30e344c 	movw	r3, #58444	; 0xe44c
  104aa0:	e3403014 	movt	r3, #20
  104aa4:	e51b2008 	ldr	r2, [fp, #-8]
  104aa8:	e0833002 	add	r3, r3, r2
  104aac:	e5d33000 	ldrb	r3, [r3]
  104ab0:	e3530000 	cmp	r3, #0
  104ab4:	0a000006 	beq	104ad4 <ueth_device_register+0x90>
        {
            break;
        }
        ueth_dev_list_index++;
  104ab8:	e51b3008 	ldr	r3, [fp, #-8]
  104abc:	e2833001 	add	r3, r3, #1
  104ac0:	e50b3008 	str	r3, [fp, #-8]
    while (ueth_dev_list_index < MAX_DEV_NUM)
  104ac4:	e51b3008 	ldr	r3, [fp, #-8]
  104ac8:	e3530002 	cmp	r3, #2
  104acc:	dafffff2 	ble	104a9c <ueth_device_register+0x58>
  104ad0:	ea000000 	b	104ad8 <ueth_device_register+0x94>
            break;
  104ad4:	e320f000 	nop	{0}
    }

    if (ueth_dev_list_index == MAX_DEV_NUM)
  104ad8:	e51b3008 	ldr	r3, [fp, #-8]
  104adc:	e3530003 	cmp	r3, #3
  104ae0:	1a000001 	bne	104aec <ueth_device_register+0xa8>
    {
        return -RT_ERROR;
  104ae4:	e3e03000 	mvn	r3, #0
  104ae8:	ea000024 	b	104b80 <ueth_device_register+0x13c>
    }
    
    strcpy(ueth_dev_list[ueth_dev_list_index].name, name);
  104aec:	e51b3008 	ldr	r3, [fp, #-8]
  104af0:	e3a0200c 	mov	r2, #12
  104af4:	e0020392 	mul	r2, r2, r3
  104af8:	e30e3428 	movw	r3, #58408	; 0xe428
  104afc:	e3403014 	movt	r3, #20
  104b00:	e0823003 	add	r3, r2, r3
  104b04:	e2833004 	add	r3, r3, #4
  104b08:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  104b0c:	e1a00003 	mov	r0, r3
  104b10:	eb00f2d1 	bl	14165c <strcpy>
    ueth_dev_list[ueth_dev_list_index].dev = dev;
  104b14:	e30e3428 	movw	r3, #58408	; 0xe428
  104b18:	e3403014 	movt	r3, #20
  104b1c:	e51b2008 	ldr	r2, [fp, #-8]
  104b20:	e3a0100c 	mov	r1, #12
  104b24:	e0020291 	mul	r2, r1, r2
  104b28:	e0833002 	add	r3, r3, r2
  104b2c:	e51b2010 	ldr	r2, [fp, #-16]
  104b30:	e5832000 	str	r2, [r3]
    ueth_dev_list_valid[ueth_dev_list_index] = 1;
  104b34:	e30e344c 	movw	r3, #58444	; 0xe44c
  104b38:	e3403014 	movt	r3, #20
  104b3c:	e51b2008 	ldr	r2, [fp, #-8]
  104b40:	e0833002 	add	r3, r3, r2
  104b44:	e3a02001 	mov	r2, #1
  104b48:	e5c32000 	strb	r2, [r3]
    dev->flag = flags;
  104b4c:	e51b3010 	ldr	r3, [fp, #-16]
  104b50:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  104b54:	e1c321bc 	strh	r2, [r3, #28]
    dev->ref_count = 0;
  104b58:	e51b3010 	ldr	r3, [fp, #-16]
  104b5c:	e3a02000 	mov	r2, #0
  104b60:	e5c32020 	strb	r2, [r3, #32]
    dev->open_flag = 0;
  104b64:	e51b3010 	ldr	r3, [fp, #-16]
  104b68:	e3a02000 	mov	r2, #0
  104b6c:	e1c321be 	strh	r2, [r3, #30]

    dev->parent.type = RT_Object_Class_Device;
  104b70:	e51b3010 	ldr	r3, [fp, #-16]
  104b74:	e3a02009 	mov	r2, #9
  104b78:	e5c32008 	strb	r2, [r3, #8]

    return RT_EOK;
  104b7c:	e3a03000 	mov	r3, #0
}
  104b80:	e1a00003 	mov	r0, r3
  104b84:	e24bd004 	sub	sp, fp, #4
  104b88:	e8bd8800 	pop	{fp, pc}

00104b8c <ueth_device_unregister>:

rt_err_t ueth_device_unregister(rt_device_t dev)
{
  104b8c:	e92d4800 	push	{fp, lr}
  104b90:	e28db004 	add	fp, sp, #4
  104b94:	e24dd010 	sub	sp, sp, #16
  104b98:	e50b0010 	str	r0, [fp, #-16]
    RT_ASSERT(dev != RT_NULL);
  104b9c:	e51b3010 	ldr	r3, [fp, #-16]
  104ba0:	e3530000 	cmp	r3, #0
  104ba4:	1a000005 	bne	104bc0 <ueth_device_unregister+0x34>
  104ba8:	e3a02048 	mov	r2, #72	; 0x48
  104bac:	e3051c0c 	movw	r1, #23564	; 0x5c0c
  104bb0:	e3401014 	movt	r1, #20
  104bb4:	e3050b98 	movw	r0, #23448	; 0x5b98
  104bb8:	e3400014 	movt	r0, #20
  104bbc:	ebfffa75 	bl	103598 <rt_assert_handler>
    RT_ASSERT(dev->parent.type == RT_Object_Class_Device);
  104bc0:	e51b3010 	ldr	r3, [fp, #-16]
  104bc4:	e5d33008 	ldrb	r3, [r3, #8]
  104bc8:	e3530009 	cmp	r3, #9
  104bcc:	0a000005 	beq	104be8 <ueth_device_unregister+0x5c>
  104bd0:	e3a02049 	mov	r2, #73	; 0x49
  104bd4:	e3051c0c 	movw	r1, #23564	; 0x5c0c
  104bd8:	e3401014 	movt	r1, #20
  104bdc:	e3050ba8 	movw	r0, #23464	; 0x5ba8
  104be0:	e3400014 	movt	r0, #20
  104be4:	ebfffa6b 	bl	103598 <rt_assert_handler>

    for (int i = 0; i < MAX_DEV_NUM; i++)
  104be8:	e3a03000 	mov	r3, #0
  104bec:	e50b3008 	str	r3, [fp, #-8]
  104bf0:	ea000019 	b	104c5c <ueth_device_unregister+0xd0>
    {
        if (ueth_dev_list_valid[i] && dev == ueth_dev_list[i].dev)
  104bf4:	e30e344c 	movw	r3, #58444	; 0xe44c
  104bf8:	e3403014 	movt	r3, #20
  104bfc:	e51b2008 	ldr	r2, [fp, #-8]
  104c00:	e0833002 	add	r3, r3, r2
  104c04:	e5d33000 	ldrb	r3, [r3]
  104c08:	e3530000 	cmp	r3, #0
  104c0c:	0a00000f 	beq	104c50 <ueth_device_unregister+0xc4>
  104c10:	e30e3428 	movw	r3, #58408	; 0xe428
  104c14:	e3403014 	movt	r3, #20
  104c18:	e51b2008 	ldr	r2, [fp, #-8]
  104c1c:	e3a0100c 	mov	r1, #12
  104c20:	e0020291 	mul	r2, r1, r2
  104c24:	e0833002 	add	r3, r3, r2
  104c28:	e5933000 	ldr	r3, [r3]
  104c2c:	e51b2010 	ldr	r2, [fp, #-16]
  104c30:	e1520003 	cmp	r2, r3
  104c34:	1a000005 	bne	104c50 <ueth_device_unregister+0xc4>
        {
            ueth_dev_list_valid[i] = 0;
  104c38:	e30e344c 	movw	r3, #58444	; 0xe44c
  104c3c:	e3403014 	movt	r3, #20
  104c40:	e51b2008 	ldr	r2, [fp, #-8]
  104c44:	e0833002 	add	r3, r3, r2
  104c48:	e3a02000 	mov	r2, #0
  104c4c:	e5c32000 	strb	r2, [r3]
    for (int i = 0; i < MAX_DEV_NUM; i++)
  104c50:	e51b3008 	ldr	r3, [fp, #-8]
  104c54:	e2833001 	add	r3, r3, #1
  104c58:	e50b3008 	str	r3, [fp, #-8]
  104c5c:	e51b3008 	ldr	r3, [fp, #-8]
  104c60:	e3530002 	cmp	r3, #2
  104c64:	daffffe2 	ble	104bf4 <ueth_device_unregister+0x68>
        }
    }

    return RT_EOK;
  104c68:	e3a03000 	mov	r3, #0
}
  104c6c:	e1a00003 	mov	r0, r3
  104c70:	e24bd004 	sub	sp, fp, #4
  104c74:	e8bd8800 	pop	{fp, pc}

00104c78 <ueth_device_init>:

rt_err_t ueth_device_init(rt_device_t dev)
{
  104c78:	e92d4800 	push	{fp, lr}
  104c7c:	e28db004 	add	fp, sp, #4
  104c80:	e24dd010 	sub	sp, sp, #16
  104c84:	e50b0010 	str	r0, [fp, #-16]
    rt_err_t result = RT_EOK;
  104c88:	e3a03000 	mov	r3, #0
  104c8c:	e50b3008 	str	r3, [fp, #-8]

    RT_ASSERT(dev != RT_NULL);
  104c90:	e51b3010 	ldr	r3, [fp, #-16]
  104c94:	e3530000 	cmp	r3, #0
  104c98:	1a000005 	bne	104cb4 <ueth_device_init+0x3c>
  104c9c:	e3a0205a 	mov	r2, #90	; 0x5a
  104ca0:	e3051c24 	movw	r1, #23588	; 0x5c24
  104ca4:	e3401014 	movt	r1, #20
  104ca8:	e3050b98 	movw	r0, #23448	; 0x5b98
  104cac:	e3400014 	movt	r0, #20
  104cb0:	ebfffa38 	bl	103598 <rt_assert_handler>
    RT_ASSERT(dev->parent.type == RT_Object_Class_Device);
  104cb4:	e51b3010 	ldr	r3, [fp, #-16]
  104cb8:	e5d33008 	ldrb	r3, [r3, #8]
  104cbc:	e3530009 	cmp	r3, #9
  104cc0:	0a000005 	beq	104cdc <ueth_device_init+0x64>
  104cc4:	e3a0205b 	mov	r2, #91	; 0x5b
  104cc8:	e3051c24 	movw	r1, #23588	; 0x5c24
  104ccc:	e3401014 	movt	r1, #20
  104cd0:	e3050ba8 	movw	r0, #23464	; 0x5ba8
  104cd4:	e3400014 	movt	r0, #20
  104cd8:	ebfffa2e 	bl	103598 <rt_assert_handler>

    /* get device_init handler */
    if (DEV_INIT != RT_NULL)
  104cdc:	e51b3010 	ldr	r3, [fp, #-16]
  104ce0:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  104ce4:	e5933000 	ldr	r3, [r3]
  104ce8:	e3530000 	cmp	r3, #0
  104cec:	0a00001a 	beq	104d5c <ueth_device_init+0xe4>
    {
        if (!(dev->flag & RT_DEVICE_FLAG_ACTIVATED))
  104cf0:	e51b3010 	ldr	r3, [fp, #-16]
  104cf4:	e1d331bc 	ldrh	r3, [r3, #28]
  104cf8:	e2033010 	and	r3, r3, #16
  104cfc:	e3530000 	cmp	r3, #0
  104d00:	1a000015 	bne	104d5c <ueth_device_init+0xe4>
        {
            result = DEV_INIT(dev);
  104d04:	e51b3010 	ldr	r3, [fp, #-16]
  104d08:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  104d0c:	e5933000 	ldr	r3, [r3]
  104d10:	e51b0010 	ldr	r0, [fp, #-16]
  104d14:	e12fff33 	blx	r3
  104d18:	e50b0008 	str	r0, [fp, #-8]
            if (result != RT_EOK)
  104d1c:	e51b3008 	ldr	r3, [fp, #-8]
  104d20:	e3530000 	cmp	r3, #0
  104d24:	0a000006 	beq	104d44 <ueth_device_init+0xcc>
            {
                printf("To initialize device:%s failed. The error code is %ld\n",
                           dev->parent.name, result);
  104d28:	e51b3010 	ldr	r3, [fp, #-16]
                printf("To initialize device:%s failed. The error code is %ld\n",
  104d2c:	e51b2008 	ldr	r2, [fp, #-8]
  104d30:	e1a01003 	mov	r1, r3
  104d34:	e3050bd4 	movw	r0, #23508	; 0x5bd4
  104d38:	e3400014 	movt	r0, #20
  104d3c:	eb00e697 	bl	13e7a0 <printf>
  104d40:	ea000005 	b	104d5c <ueth_device_init+0xe4>
            }
            else
            {
                dev->flag |= RT_DEVICE_FLAG_ACTIVATED;
  104d44:	e51b3010 	ldr	r3, [fp, #-16]
  104d48:	e1d331bc 	ldrh	r3, [r3, #28]
  104d4c:	e3833010 	orr	r3, r3, #16
  104d50:	e6ff2073 	uxth	r2, r3
  104d54:	e51b3010 	ldr	r3, [fp, #-16]
  104d58:	e1c321bc 	strh	r2, [r3, #28]
            }
        }
    }

    return result;
  104d5c:	e51b3008 	ldr	r3, [fp, #-8]
}
  104d60:	e1a00003 	mov	r0, r3
  104d64:	e24bd004 	sub	sp, fp, #4
  104d68:	e8bd8800 	pop	{fp, pc}

00104d6c <ueth_device_close>:

rt_err_t ueth_device_close(rt_device_t dev)
{
  104d6c:	e92d4800 	push	{fp, lr}
  104d70:	e28db004 	add	fp, sp, #4
  104d74:	e24dd010 	sub	sp, sp, #16
  104d78:	e50b0010 	str	r0, [fp, #-16]
    rt_err_t result = RT_EOK;
  104d7c:	e3a03000 	mov	r3, #0
  104d80:	e50b3008 	str	r3, [fp, #-8]

    RT_ASSERT(dev != RT_NULL);
  104d84:	e51b3010 	ldr	r3, [fp, #-16]
  104d88:	e3530000 	cmp	r3, #0
  104d8c:	1a000005 	bne	104da8 <ueth_device_close+0x3c>
  104d90:	e3a02076 	mov	r2, #118	; 0x76
  104d94:	e3051c38 	movw	r1, #23608	; 0x5c38
  104d98:	e3401014 	movt	r1, #20
  104d9c:	e3050b98 	movw	r0, #23448	; 0x5b98
  104da0:	e3400014 	movt	r0, #20
  104da4:	ebfff9fb 	bl	103598 <rt_assert_handler>
    RT_ASSERT(dev->parent.type == RT_Object_Class_Device);
  104da8:	e51b3010 	ldr	r3, [fp, #-16]
  104dac:	e5d33008 	ldrb	r3, [r3, #8]
  104db0:	e3530009 	cmp	r3, #9
  104db4:	0a000005 	beq	104dd0 <ueth_device_close+0x64>
  104db8:	e3a02077 	mov	r2, #119	; 0x77
  104dbc:	e3051c38 	movw	r1, #23608	; 0x5c38
  104dc0:	e3401014 	movt	r1, #20
  104dc4:	e3050ba8 	movw	r0, #23464	; 0x5ba8
  104dc8:	e3400014 	movt	r0, #20
  104dcc:	ebfff9f1 	bl	103598 <rt_assert_handler>

    if (dev->ref_count == 0)
  104dd0:	e51b3010 	ldr	r3, [fp, #-16]
  104dd4:	e5d33020 	ldrb	r3, [r3, #32]
  104dd8:	e3530000 	cmp	r3, #0
  104ddc:	1a000001 	bne	104de8 <ueth_device_close+0x7c>
        return -RT_ERROR;
  104de0:	e3e03000 	mvn	r3, #0
  104de4:	ea000020 	b	104e6c <ueth_device_close+0x100>

    dev->ref_count--;
  104de8:	e51b3010 	ldr	r3, [fp, #-16]
  104dec:	e5d33020 	ldrb	r3, [r3, #32]
  104df0:	e2433001 	sub	r3, r3, #1
  104df4:	e6ef2073 	uxtb	r2, r3
  104df8:	e51b3010 	ldr	r3, [fp, #-16]
  104dfc:	e5c32020 	strb	r2, [r3, #32]

    if (dev->ref_count != 0)
  104e00:	e51b3010 	ldr	r3, [fp, #-16]
  104e04:	e5d33020 	ldrb	r3, [r3, #32]
  104e08:	e3530000 	cmp	r3, #0
  104e0c:	0a000001 	beq	104e18 <ueth_device_close+0xac>
        return RT_EOK;
  104e10:	e3a03000 	mov	r3, #0
  104e14:	ea000014 	b	104e6c <ueth_device_close+0x100>

    /* call device_close interface */
    if (DEV_CLOSE != RT_NULL)
  104e18:	e51b3010 	ldr	r3, [fp, #-16]
  104e1c:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  104e20:	e5933008 	ldr	r3, [r3, #8]
  104e24:	e3530000 	cmp	r3, #0
  104e28:	0a000005 	beq	104e44 <ueth_device_close+0xd8>
    {
        result = DEV_CLOSE(dev);
  104e2c:	e51b3010 	ldr	r3, [fp, #-16]
  104e30:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  104e34:	e5933008 	ldr	r3, [r3, #8]
  104e38:	e51b0010 	ldr	r0, [fp, #-16]
  104e3c:	e12fff33 	blx	r3
  104e40:	e50b0008 	str	r0, [fp, #-8]
    }

    /* set open flag */
    if (result == RT_EOK || result == -RT_ENOSYS)
  104e44:	e51b3008 	ldr	r3, [fp, #-8]
  104e48:	e3530000 	cmp	r3, #0
  104e4c:	0a000002 	beq	104e5c <ueth_device_close+0xf0>
  104e50:	e51b3008 	ldr	r3, [fp, #-8]
  104e54:	e3730006 	cmn	r3, #6
  104e58:	1a000002 	bne	104e68 <ueth_device_close+0xfc>
        dev->open_flag = RT_DEVICE_OFLAG_CLOSE;
  104e5c:	e51b3010 	ldr	r3, [fp, #-16]
  104e60:	e3a02000 	mov	r2, #0
  104e64:	e1c321be 	strh	r2, [r3, #30]

    return result;
  104e68:	e51b3008 	ldr	r3, [fp, #-8]
}
  104e6c:	e1a00003 	mov	r0, r3
  104e70:	e24bd004 	sub	sp, fp, #4
  104e74:	e8bd8800 	pop	{fp, pc}

00104e78 <ueth_device_control>:

rt_err_t ueth_device_control(rt_device_t dev, int cmd, void *arg)
{
  104e78:	e92d4800 	push	{fp, lr}
  104e7c:	e28db004 	add	fp, sp, #4
  104e80:	e24dd010 	sub	sp, sp, #16
  104e84:	e50b0008 	str	r0, [fp, #-8]
  104e88:	e50b100c 	str	r1, [fp, #-12]
  104e8c:	e50b2010 	str	r2, [fp, #-16]
    RT_ASSERT(dev != RT_NULL);
  104e90:	e51b3008 	ldr	r3, [fp, #-8]
  104e94:	e3530000 	cmp	r3, #0
  104e98:	1a000005 	bne	104eb4 <ueth_device_control+0x3c>
  104e9c:	e3a02090 	mov	r2, #144	; 0x90
  104ea0:	e3051c4c 	movw	r1, #23628	; 0x5c4c
  104ea4:	e3401014 	movt	r1, #20
  104ea8:	e3050b98 	movw	r0, #23448	; 0x5b98
  104eac:	e3400014 	movt	r0, #20
  104eb0:	ebfff9b8 	bl	103598 <rt_assert_handler>
    RT_ASSERT(dev->parent.type == RT_Object_Class_Device);
  104eb4:	e51b3008 	ldr	r3, [fp, #-8]
  104eb8:	e5d33008 	ldrb	r3, [r3, #8]
  104ebc:	e3530009 	cmp	r3, #9
  104ec0:	0a000005 	beq	104edc <ueth_device_control+0x64>
  104ec4:	e3a02091 	mov	r2, #145	; 0x91
  104ec8:	e3051c4c 	movw	r1, #23628	; 0x5c4c
  104ecc:	e3401014 	movt	r1, #20
  104ed0:	e3050ba8 	movw	r0, #23464	; 0x5ba8
  104ed4:	e3400014 	movt	r0, #20
  104ed8:	ebfff9ae 	bl	103598 <rt_assert_handler>

    /* call device_write interface */
    if (DEV_CONTROL != RT_NULL)
  104edc:	e51b3008 	ldr	r3, [fp, #-8]
  104ee0:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  104ee4:	e5933014 	ldr	r3, [r3, #20]
  104ee8:	e3530000 	cmp	r3, #0
  104eec:	0a000008 	beq	104f14 <ueth_device_control+0x9c>
    {
        return DEV_CONTROL(dev, cmd, arg);
  104ef0:	e51b3008 	ldr	r3, [fp, #-8]
  104ef4:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  104ef8:	e5933014 	ldr	r3, [r3, #20]
  104efc:	e51b2010 	ldr	r2, [fp, #-16]
  104f00:	e51b100c 	ldr	r1, [fp, #-12]
  104f04:	e51b0008 	ldr	r0, [fp, #-8]
  104f08:	e12fff33 	blx	r3
  104f0c:	e1a03000 	mov	r3, r0
  104f10:	ea000000 	b	104f18 <ueth_device_control+0xa0>
    }

    return -RT_ENOSYS;
  104f14:	e3e03005 	mvn	r3, #5
  104f18:	e1a00003 	mov	r0, r3
  104f1c:	e24bd004 	sub	sp, fp, #4
  104f20:	e8bd8800 	pop	{fp, pc}

00104f24 <rt_slist_init>:
 * @brief initialize a single list
 *
 * @param l the single list to be initialized
 */
rt_inline void rt_slist_init(rt_slist_t *l)
{
  104f24:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  104f28:	e28db000 	add	fp, sp, #0
  104f2c:	e24dd00c 	sub	sp, sp, #12
  104f30:	e50b0008 	str	r0, [fp, #-8]
    l->next = RT_NULL;
  104f34:	e51b3008 	ldr	r3, [fp, #-8]
  104f38:	e3a02000 	mov	r2, #0
  104f3c:	e5832000 	str	r2, [r3]
}
  104f40:	e320f000 	nop	{0}
  104f44:	e28bd000 	add	sp, fp, #0
  104f48:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  104f4c:	e12fff1e 	bx	lr

00104f50 <rt_slist_append>:

rt_inline void rt_slist_append(rt_slist_t *l, rt_slist_t *n)
{
  104f50:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  104f54:	e28db000 	add	fp, sp, #0
  104f58:	e24dd014 	sub	sp, sp, #20
  104f5c:	e50b0010 	str	r0, [fp, #-16]
  104f60:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    struct rt_slist_node *node;

    node = l;
  104f64:	e51b3010 	ldr	r3, [fp, #-16]
  104f68:	e50b3008 	str	r3, [fp, #-8]
    while (node->next) node = node->next;
  104f6c:	ea000002 	b	104f7c <rt_slist_append+0x2c>
  104f70:	e51b3008 	ldr	r3, [fp, #-8]
  104f74:	e5933000 	ldr	r3, [r3]
  104f78:	e50b3008 	str	r3, [fp, #-8]
  104f7c:	e51b3008 	ldr	r3, [fp, #-8]
  104f80:	e5933000 	ldr	r3, [r3]
  104f84:	e3530000 	cmp	r3, #0
  104f88:	1afffff8 	bne	104f70 <rt_slist_append+0x20>

    /* append the node to the tail */
    node->next = n;
  104f8c:	e51b3008 	ldr	r3, [fp, #-8]
  104f90:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  104f94:	e5832000 	str	r2, [r3]
    n->next = RT_NULL;
  104f98:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  104f9c:	e3a02000 	mov	r2, #0
  104fa0:	e5832000 	str	r2, [r3]
}
  104fa4:	e320f000 	nop	{0}
  104fa8:	e28bd000 	add	sp, fp, #0
  104fac:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  104fb0:	e12fff1e 	bx	lr

00104fb4 <rt_slist_remove>:

    return len;
}

rt_inline rt_slist_t *rt_slist_remove(rt_slist_t *l, rt_slist_t *n)
{
  104fb4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  104fb8:	e28db000 	add	fp, sp, #0
  104fbc:	e24dd014 	sub	sp, sp, #20
  104fc0:	e50b0010 	str	r0, [fp, #-16]
  104fc4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    /* remove slist head */
    struct rt_slist_node *node = l;
  104fc8:	e51b3010 	ldr	r3, [fp, #-16]
  104fcc:	e50b3008 	str	r3, [fp, #-8]
    while (node->next && node->next != n) node = node->next;
  104fd0:	ea000002 	b	104fe0 <rt_slist_remove+0x2c>
  104fd4:	e51b3008 	ldr	r3, [fp, #-8]
  104fd8:	e5933000 	ldr	r3, [r3]
  104fdc:	e50b3008 	str	r3, [fp, #-8]
  104fe0:	e51b3008 	ldr	r3, [fp, #-8]
  104fe4:	e5933000 	ldr	r3, [r3]
  104fe8:	e3530000 	cmp	r3, #0
  104fec:	0a000004 	beq	105004 <rt_slist_remove+0x50>
  104ff0:	e51b3008 	ldr	r3, [fp, #-8]
  104ff4:	e5933000 	ldr	r3, [r3]
  104ff8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  104ffc:	e1520003 	cmp	r2, r3
  105000:	1afffff3 	bne	104fd4 <rt_slist_remove+0x20>

    /* remove node */
    if (node->next != (rt_slist_t *)0) node->next = node->next->next;
  105004:	e51b3008 	ldr	r3, [fp, #-8]
  105008:	e5933000 	ldr	r3, [r3]
  10500c:	e3530000 	cmp	r3, #0
  105010:	0a000004 	beq	105028 <rt_slist_remove+0x74>
  105014:	e51b3008 	ldr	r3, [fp, #-8]
  105018:	e5933000 	ldr	r3, [r3]
  10501c:	e5932000 	ldr	r2, [r3]
  105020:	e51b3008 	ldr	r3, [fp, #-8]
  105024:	e5832000 	str	r2, [r3]

    return l;
  105028:	e51b3010 	ldr	r3, [fp, #-16]
}
  10502c:	e1a00003 	mov	r0, r3
  105030:	e28bd000 	add	sp, fp, #0
  105034:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  105038:	e12fff1e 	bx	lr

0010503c <rt_slist_next>:

    return l;
}

rt_inline rt_slist_t *rt_slist_next(rt_slist_t *n)
{
  10503c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  105040:	e28db000 	add	fp, sp, #0
  105044:	e24dd00c 	sub	sp, sp, #12
  105048:	e50b0008 	str	r0, [fp, #-8]
    return n->next;
  10504c:	e51b3008 	ldr	r3, [fp, #-8]
  105050:	e5933000 	ldr	r3, [r3]
}
  105054:	e1a00003 	mov	r0, r3
  105058:	e28bd000 	add	sp, fp, #0
  10505c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  105060:	e12fff1e 	bx	lr

00105064 <netdev_register>:
 *
 * @return  0: registered successfully
 *         -1: registered failed
 */
int netdev_register(struct netdev *netdev, const char *name, void *user_data)
{
  105064:	e92d4810 	push	{r4, fp, lr}
  105068:	e28db008 	add	fp, sp, #8
  10506c:	e24dd01c 	sub	sp, sp, #28
  105070:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  105074:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  105078:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
    // rt_base_t level;
    uint16_t flags_mask;
    int index;

    RT_ASSERT(netdev);
  10507c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  105080:	e3530000 	cmp	r3, #0
  105084:	1a000005 	bne	1050a0 <netdev_register+0x3c>
  105088:	e3a02032 	mov	r2, #50	; 0x32
  10508c:	e3051fc0 	movw	r1, #24512	; 0x5fc0
  105090:	e3401014 	movt	r1, #20
  105094:	e3050c60 	movw	r0, #23648	; 0x5c60
  105098:	e3400014 	movt	r0, #20
  10509c:	ebfff93d 	bl	103598 <rt_assert_handler>
    RT_ASSERT(name);
  1050a0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1050a4:	e3530000 	cmp	r3, #0
  1050a8:	1a000005 	bne	1050c4 <netdev_register+0x60>
  1050ac:	e3a02033 	mov	r2, #51	; 0x33
  1050b0:	e3051fc0 	movw	r1, #24512	; 0x5fc0
  1050b4:	e3401014 	movt	r1, #20
  1050b8:	e3050c68 	movw	r0, #23656	; 0x5c68
  1050bc:	e3400014 	movt	r0, #20
  1050c0:	ebfff934 	bl	103598 <rt_assert_handler>

    /* clean network interface device */
    flags_mask = NETDEV_FLAG_UP | NETDEV_FLAG_LINK_UP | NETDEV_FLAG_INTERNET_UP | NETDEV_FLAG_DHCP;
  1050c4:	e3003185 	movw	r3, #389	; 0x185
  1050c8:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
    netdev->flags &= ~flags_mask;
  1050cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1050d0:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1050d4:	e6bf2073 	sxth	r2, r3
  1050d8:	e15b31f2 	ldrsh	r3, [fp, #-18]	; 0xffffffee
  1050dc:	e1e03003 	mvn	r3, r3
  1050e0:	e6bf3073 	sxth	r3, r3
  1050e4:	e0033002 	and	r3, r3, r2
  1050e8:	e6bf3073 	sxth	r3, r3
  1050ec:	e6ff2073 	uxth	r2, r3
  1050f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1050f4:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a

    ip_addr_set_zero(&(netdev->ip_addr));
  1050f8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1050fc:	e3a02000 	mov	r2, #0
  105100:	e583200c 	str	r2, [r3, #12]
    ip_addr_set_zero(&(netdev->netmask));
  105104:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  105108:	e3a02000 	mov	r2, #0
  10510c:	e5832010 	str	r2, [r3, #16]
    ip_addr_set_zero(&(netdev->gw));
  105110:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  105114:	e3a02000 	mov	r2, #0
  105118:	e5832014 	str	r2, [r3, #20]
    {
        ip_addr_set_zero(&(netdev->ip6_addr[index]));
        IP_SET_TYPE_VAL(netdev->ip_addr, IPADDR_TYPE_V6);
    }
#endif /* NETDEV_IPV6 */
    for (index = 0; index < NETDEV_DNS_SERVERS_NUM; index++)
  10511c:	e3a03000 	mov	r3, #0
  105120:	e50b3010 	str	r3, [fp, #-16]
  105124:	ea000007 	b	105148 <netdev_register+0xe4>
    {
        ip_addr_set_zero(&(netdev->dns_servers[index]));
  105128:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10512c:	e51b2010 	ldr	r2, [fp, #-16]
  105130:	e2822006 	add	r2, r2, #6
  105134:	e3a01000 	mov	r1, #0
  105138:	e7831102 	str	r1, [r3, r2, lsl #2]
    for (index = 0; index < NETDEV_DNS_SERVERS_NUM; index++)
  10513c:	e51b3010 	ldr	r3, [fp, #-16]
  105140:	e2833001 	add	r3, r3, #1
  105144:	e50b3010 	str	r3, [fp, #-16]
  105148:	e51b3010 	ldr	r3, [fp, #-16]
  10514c:	e3530001 	cmp	r3, #1
  105150:	9afffff4 	bls	105128 <netdev_register+0xc4>
        IP_SET_TYPE_VAL(netdev->ip_addr, IPADDR_TYPE_V4);
    }
    netdev->status_callback = RT_NULL;
  105154:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  105158:	e3a02000 	mov	r2, #0
  10515c:	e5832034 	str	r2, [r3, #52]	; 0x34
    netdev->addr_callback = RT_NULL;
  105160:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  105164:	e3a02000 	mov	r2, #0
  105168:	e5832038 	str	r2, [r3, #56]	; 0x38

    /* fill network interface device */
    rt_strncpy(netdev->name, name, rt_strlen(name));
  10516c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  105170:	e2834004 	add	r4, r3, #4
  105174:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  105178:	ebfff820 	bl	103200 <rt_strlen>
  10517c:	e1a03000 	mov	r3, r0
  105180:	e1a02003 	mov	r2, r3
  105184:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  105188:	e1a00004 	mov	r0, r4
  10518c:	ebfff833 	bl	103260 <rt_strncpy>
    netdev->user_data = user_data;
  105190:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  105194:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  105198:	e5832040 	str	r2, [r3, #64]	; 0x40

    /* initialize current network interface device single list */
    rt_slist_init(&(netdev->list));
  10519c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1051a0:	e1a00003 	mov	r0, r3
  1051a4:	ebffff5e 	bl	104f24 <rt_slist_init>

    // level = rt_hw_interrupt_disable();

    if (netdev_list == RT_NULL)
  1051a8:	e3003568 	movw	r3, #1384	; 0x568
  1051ac:	e3403015 	movt	r3, #21
  1051b0:	e5933000 	ldr	r3, [r3]
  1051b4:	e3530000 	cmp	r3, #0
  1051b8:	1a000008 	bne	1051e0 <netdev_register+0x17c>
    {
        netdev_list = netdev;
  1051bc:	e3003568 	movw	r3, #1384	; 0x568
  1051c0:	e3403015 	movt	r3, #21
  1051c4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1051c8:	e5832000 	str	r2, [r3]
        netdev_default = netdev;
  1051cc:	e3003564 	movw	r3, #1380	; 0x564
  1051d0:	e3403015 	movt	r3, #21
  1051d4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1051d8:	e5832000 	str	r2, [r3]
  1051dc:	ea000007 	b	105200 <netdev_register+0x19c>
    }
    else
    {
        /* tail insertion */
        rt_slist_append(&(netdev_list->list), &(netdev->list));
  1051e0:	e3003568 	movw	r3, #1384	; 0x568
  1051e4:	e3403015 	movt	r3, #21
  1051e8:	e5933000 	ldr	r3, [r3]
  1051ec:	e1a02003 	mov	r2, r3
  1051f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1051f4:	e1a01003 	mov	r1, r3
  1051f8:	e1a00002 	mov	r0, r2
  1051fc:	ebffff53 	bl	104f50 <rt_slist_append>
    }

    // rt_hw_interrupt_enable(level);

    return RT_EOK;
  105200:	e3a03000 	mov	r3, #0
}
  105204:	e1a00003 	mov	r0, r3
  105208:	e24bd008 	sub	sp, fp, #8
  10520c:	e8bd8810 	pop	{r4, fp, pc}

00105210 <netdev_unregister>:
 *
 * @return  0: unregistered successfully
 *         -1: unregistered failed
 */
int netdev_unregister(struct netdev *netdev)
{
  105210:	e92d4800 	push	{fp, lr}
  105214:	e28db004 	add	fp, sp, #4
  105218:	e24dd010 	sub	sp, sp, #16
  10521c:	e50b0010 	str	r0, [fp, #-16]
    // rt_base_t level;
    rt_slist_t *node = RT_NULL;
  105220:	e3a03000 	mov	r3, #0
  105224:	e50b3008 	str	r3, [fp, #-8]
    struct netdev *cur_netdev = RT_NULL;
  105228:	e3a03000 	mov	r3, #0
  10522c:	e50b300c 	str	r3, [fp, #-12]

    RT_ASSERT(netdev);
  105230:	e51b3010 	ldr	r3, [fp, #-16]
  105234:	e3530000 	cmp	r3, #0
  105238:	1a000005 	bne	105254 <netdev_unregister+0x44>
  10523c:	e3a02077 	mov	r2, #119	; 0x77
  105240:	e3051fd0 	movw	r1, #24528	; 0x5fd0
  105244:	e3401014 	movt	r1, #20
  105248:	e3050c60 	movw	r0, #23648	; 0x5c60
  10524c:	e3400014 	movt	r0, #20
  105250:	ebfff8d0 	bl	103598 <rt_assert_handler>

    if (netdev_list == RT_NULL)
  105254:	e3003568 	movw	r3, #1384	; 0x568
  105258:	e3403015 	movt	r3, #21
  10525c:	e5933000 	ldr	r3, [r3]
  105260:	e3530000 	cmp	r3, #0
  105264:	1a000001 	bne	105270 <netdev_unregister+0x60>
    {
        return -RT_ERROR;
  105268:	e3e03000 	mvn	r3, #0
  10526c:	ea000045 	b	105388 <netdev_unregister+0x178>
    }

    // level = rt_hw_interrupt_disable();

    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  105270:	e3003568 	movw	r3, #1384	; 0x568
  105274:	e3403015 	movt	r3, #21
  105278:	e5933000 	ldr	r3, [r3]
  10527c:	e50b3008 	str	r3, [fp, #-8]
  105280:	ea000030 	b	105348 <netdev_unregister+0x138>
    {
        cur_netdev = rt_slist_entry(node, struct netdev, list);
  105284:	e51b3008 	ldr	r3, [fp, #-8]
  105288:	e50b300c 	str	r3, [fp, #-12]
        if (cur_netdev == netdev)
  10528c:	e51b200c 	ldr	r2, [fp, #-12]
  105290:	e51b3010 	ldr	r3, [fp, #-16]
  105294:	e1520003 	cmp	r2, r3
  105298:	1a000027 	bne	10533c <netdev_unregister+0x12c>
        {
            /* find this network interface device in network interface device list */
            if (netdev_list == netdev && rt_slist_next(&netdev_list->list) == RT_NULL)
  10529c:	e3003568 	movw	r3, #1384	; 0x568
  1052a0:	e3403015 	movt	r3, #21
  1052a4:	e5933000 	ldr	r3, [r3]
  1052a8:	e51b2010 	ldr	r2, [fp, #-16]
  1052ac:	e1520003 	cmp	r2, r3
  1052b0:	1a00000c 	bne	1052e8 <netdev_unregister+0xd8>
  1052b4:	e3003568 	movw	r3, #1384	; 0x568
  1052b8:	e3403015 	movt	r3, #21
  1052bc:	e5933000 	ldr	r3, [r3]
  1052c0:	e1a00003 	mov	r0, r3
  1052c4:	ebffff5c 	bl	10503c <rt_slist_next>
  1052c8:	e1a03000 	mov	r3, r0
  1052cc:	e3530000 	cmp	r3, #0
  1052d0:	1a000004 	bne	1052e8 <netdev_unregister+0xd8>
            {
                netdev_list = RT_NULL;
  1052d4:	e3003568 	movw	r3, #1384	; 0x568
  1052d8:	e3403015 	movt	r3, #21
  1052dc:	e3a02000 	mov	r2, #0
  1052e0:	e5832000 	str	r2, [r3]
  1052e4:	ea000007 	b	105308 <netdev_unregister+0xf8>
            }
            else
            {
                rt_slist_remove(&(netdev_list->list), &(cur_netdev->list));
  1052e8:	e3003568 	movw	r3, #1384	; 0x568
  1052ec:	e3403015 	movt	r3, #21
  1052f0:	e5933000 	ldr	r3, [r3]
  1052f4:	e1a02003 	mov	r2, r3
  1052f8:	e51b300c 	ldr	r3, [fp, #-12]
  1052fc:	e1a01003 	mov	r1, r3
  105300:	e1a00002 	mov	r0, r2
  105304:	ebffff2a 	bl	104fb4 <rt_slist_remove>
            }
            if (netdev_default == netdev)
  105308:	e3003564 	movw	r3, #1380	; 0x564
  10530c:	e3403015 	movt	r3, #21
  105310:	e5933000 	ldr	r3, [r3]
  105314:	e51b2010 	ldr	r2, [fp, #-16]
  105318:	e1520003 	cmp	r2, r3
  10531c:	1a00000d 	bne	105358 <netdev_unregister+0x148>
            {
                netdev_default = netdev_list;
  105320:	e3003568 	movw	r3, #1384	; 0x568
  105324:	e3403015 	movt	r3, #21
  105328:	e5932000 	ldr	r2, [r3]
  10532c:	e3003564 	movw	r3, #1380	; 0x564
  105330:	e3403015 	movt	r3, #21
  105334:	e5832000 	str	r2, [r3]
            }
            break;
  105338:	ea000006 	b	105358 <netdev_unregister+0x148>
    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  10533c:	e51b0008 	ldr	r0, [fp, #-8]
  105340:	ebffff3d 	bl	10503c <rt_slist_next>
  105344:	e50b0008 	str	r0, [fp, #-8]
  105348:	e51b3008 	ldr	r3, [fp, #-8]
  10534c:	e3530000 	cmp	r3, #0
  105350:	1affffcb 	bne	105284 <netdev_unregister+0x74>
  105354:	ea000000 	b	10535c <netdev_unregister+0x14c>
            break;
  105358:	e320f000 	nop	{0}
        }
    }
    // rt_hw_interrupt_enable(level);

    if (cur_netdev == netdev)
  10535c:	e51b200c 	ldr	r2, [fp, #-12]
  105360:	e51b3010 	ldr	r3, [fp, #-16]
  105364:	e1520003 	cmp	r2, r3
  105368:	1a000005 	bne	105384 <netdev_unregister+0x174>
    {
#ifdef RT_USING_SAL
        extern int sal_netdev_cleanup(struct netdev *netdev);
        sal_netdev_cleanup(netdev);
  10536c:	e51b0010 	ldr	r0, [fp, #-16]
  105370:	eb000823 	bl	107404 <sal_netdev_cleanup>
#endif
        rt_memset(netdev, 0, sizeof(*netdev));
  105374:	e3a02044 	mov	r2, #68	; 0x44
  105378:	e3a01000 	mov	r1, #0
  10537c:	e51b0010 	ldr	r0, [fp, #-16]
  105380:	ebfff7d0 	bl	1032c8 <rt_memset>
    }

    return -RT_ERROR;
  105384:	e3e03000 	mvn	r3, #0
}
  105388:	e1a00003 	mov	r0, r3
  10538c:	e24bd004 	sub	sp, fp, #4
  105390:	e8bd8800 	pop	{fp, pc}

00105394 <netdev_get_first_by_flags>:
 *
 * @return != NULL: network interface device object
 *            NULL: get failed
 */
struct netdev *netdev_get_first_by_flags(uint16_t flags)
{
  105394:	e92d4800 	push	{fp, lr}
  105398:	e28db004 	add	fp, sp, #4
  10539c:	e24dd010 	sub	sp, sp, #16
  1053a0:	e1a03000 	mov	r3, r0
  1053a4:	e14b30be 	strh	r3, [fp, #-14]
    // rt_base_t level;
    rt_slist_t *node = RT_NULL;
  1053a8:	e3a03000 	mov	r3, #0
  1053ac:	e50b3008 	str	r3, [fp, #-8]
    struct netdev *netdev = RT_NULL;
  1053b0:	e3a03000 	mov	r3, #0
  1053b4:	e50b300c 	str	r3, [fp, #-12]

    if (netdev_list == RT_NULL)
  1053b8:	e3003568 	movw	r3, #1384	; 0x568
  1053bc:	e3403015 	movt	r3, #21
  1053c0:	e5933000 	ldr	r3, [r3]
  1053c4:	e3530000 	cmp	r3, #0
  1053c8:	1a000001 	bne	1053d4 <netdev_get_first_by_flags+0x40>
    {
        return RT_NULL;
  1053cc:	e3a03000 	mov	r3, #0
  1053d0:	ea000019 	b	10543c <netdev_get_first_by_flags+0xa8>
    }

    // level = rt_hw_interrupt_disable();

    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  1053d4:	e3003568 	movw	r3, #1384	; 0x568
  1053d8:	e3403015 	movt	r3, #21
  1053dc:	e5933000 	ldr	r3, [r3]
  1053e0:	e50b3008 	str	r3, [fp, #-8]
  1053e4:	ea000010 	b	10542c <netdev_get_first_by_flags+0x98>
    {
        netdev = rt_slist_entry(node, struct netdev, list);
  1053e8:	e51b3008 	ldr	r3, [fp, #-8]
  1053ec:	e50b300c 	str	r3, [fp, #-12]
        if (netdev && (netdev->flags & flags) != 0)
  1053f0:	e51b300c 	ldr	r3, [fp, #-12]
  1053f4:	e3530000 	cmp	r3, #0
  1053f8:	0a000008 	beq	105420 <netdev_get_first_by_flags+0x8c>
  1053fc:	e51b300c 	ldr	r3, [fp, #-12]
  105400:	e1d322ba 	ldrh	r2, [r3, #42]	; 0x2a
  105404:	e15b30be 	ldrh	r3, [fp, #-14]
  105408:	e0033002 	and	r3, r3, r2
  10540c:	e6ff3073 	uxth	r3, r3
  105410:	e3530000 	cmp	r3, #0
  105414:	0a000001 	beq	105420 <netdev_get_first_by_flags+0x8c>
        {
            // rt_hw_interrupt_enable(level);
            return netdev;
  105418:	e51b300c 	ldr	r3, [fp, #-12]
  10541c:	ea000006 	b	10543c <netdev_get_first_by_flags+0xa8>
    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  105420:	e51b0008 	ldr	r0, [fp, #-8]
  105424:	ebffff04 	bl	10503c <rt_slist_next>
  105428:	e50b0008 	str	r0, [fp, #-8]
  10542c:	e51b3008 	ldr	r3, [fp, #-8]
  105430:	e3530000 	cmp	r3, #0
  105434:	1affffeb 	bne	1053e8 <netdev_get_first_by_flags+0x54>
        }
    }

    // rt_hw_interrupt_enable(level);

    return RT_NULL;
  105438:	e3a03000 	mov	r3, #0
}
  10543c:	e1a00003 	mov	r0, r3
  105440:	e24bd004 	sub	sp, fp, #4
  105444:	e8bd8800 	pop	{fp, pc}

00105448 <netdev_get_by_ipaddr>:
 *
 * @return != NULL: network interface device object
 *            NULL: get failed
 */
struct netdev *netdev_get_by_ipaddr(ip_addr_t *ip_addr)
{
  105448:	e92d4800 	push	{fp, lr}
  10544c:	e28db004 	add	fp, sp, #4
  105450:	e24dd010 	sub	sp, sp, #16
  105454:	e50b0010 	str	r0, [fp, #-16]
    // rt_base_t level;
    rt_slist_t *node = RT_NULL;
  105458:	e3a03000 	mov	r3, #0
  10545c:	e50b3008 	str	r3, [fp, #-8]
    struct netdev *netdev = RT_NULL;
  105460:	e3a03000 	mov	r3, #0
  105464:	e50b300c 	str	r3, [fp, #-12]

    if (netdev_list == RT_NULL)
  105468:	e3003568 	movw	r3, #1384	; 0x568
  10546c:	e3403015 	movt	r3, #21
  105470:	e5933000 	ldr	r3, [r3]
  105474:	e3530000 	cmp	r3, #0
  105478:	1a000001 	bne	105484 <netdev_get_by_ipaddr+0x3c>
    {
        return RT_NULL;
  10547c:	e3a03000 	mov	r3, #0
  105480:	ea000018 	b	1054e8 <netdev_get_by_ipaddr+0xa0>
    }

    // level = rt_hw_interrupt_disable();

    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  105484:	e3003568 	movw	r3, #1384	; 0x568
  105488:	e3403015 	movt	r3, #21
  10548c:	e5933000 	ldr	r3, [r3]
  105490:	e50b3008 	str	r3, [fp, #-8]
  105494:	ea00000f 	b	1054d8 <netdev_get_by_ipaddr+0x90>
    {
        netdev = rt_slist_entry(node, struct netdev, list);
  105498:	e51b3008 	ldr	r3, [fp, #-8]
  10549c:	e50b300c 	str	r3, [fp, #-12]
        if (netdev && ip_addr_cmp(&(netdev->ip_addr), ip_addr))
  1054a0:	e51b300c 	ldr	r3, [fp, #-12]
  1054a4:	e3530000 	cmp	r3, #0
  1054a8:	0a000007 	beq	1054cc <netdev_get_by_ipaddr+0x84>
  1054ac:	e51b300c 	ldr	r3, [fp, #-12]
  1054b0:	e593200c 	ldr	r2, [r3, #12]
  1054b4:	e51b3010 	ldr	r3, [fp, #-16]
  1054b8:	e5933000 	ldr	r3, [r3]
  1054bc:	e1520003 	cmp	r2, r3
  1054c0:	1a000001 	bne	1054cc <netdev_get_by_ipaddr+0x84>
        {
            // rt_hw_interrupt_enable(level);
            return netdev;
  1054c4:	e51b300c 	ldr	r3, [fp, #-12]
  1054c8:	ea000006 	b	1054e8 <netdev_get_by_ipaddr+0xa0>
    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  1054cc:	e51b0008 	ldr	r0, [fp, #-8]
  1054d0:	ebfffed9 	bl	10503c <rt_slist_next>
  1054d4:	e50b0008 	str	r0, [fp, #-8]
  1054d8:	e51b3008 	ldr	r3, [fp, #-8]
  1054dc:	e3530000 	cmp	r3, #0
  1054e0:	1affffec 	bne	105498 <netdev_get_by_ipaddr+0x50>
        }
    }

    // rt_hw_interrupt_enable(level);

    return RT_NULL;
  1054e4:	e3a03000 	mov	r3, #0
}
  1054e8:	e1a00003 	mov	r0, r3
  1054ec:	e24bd004 	sub	sp, fp, #4
  1054f0:	e8bd8800 	pop	{fp, pc}

001054f4 <netdev_get_by_name>:
 *
 * @return != NULL: network interface device object
 *            NULL: get failed
 */
struct netdev *netdev_get_by_name(const char *name)
{
  1054f4:	e92d4810 	push	{r4, fp, lr}
  1054f8:	e28db008 	add	fp, sp, #8
  1054fc:	e24dd014 	sub	sp, sp, #20
  105500:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    // rt_base_t level;
    rt_slist_t *node = RT_NULL;
  105504:	e3a03000 	mov	r3, #0
  105508:	e50b3010 	str	r3, [fp, #-16]
    struct netdev *netdev = RT_NULL;
  10550c:	e3a03000 	mov	r3, #0
  105510:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

    if (netdev_list == RT_NULL)
  105514:	e3003568 	movw	r3, #1384	; 0x568
  105518:	e3403015 	movt	r3, #21
  10551c:	e5933000 	ldr	r3, [r3]
  105520:	e3530000 	cmp	r3, #0
  105524:	1a000001 	bne	105530 <netdev_get_by_name+0x3c>
    {
        return RT_NULL;
  105528:	e3a03000 	mov	r3, #0
  10552c:	ea000020 	b	1055b4 <netdev_get_by_name+0xc0>
    }

    // level = rt_hw_interrupt_disable();

    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  105530:	e3003568 	movw	r3, #1384	; 0x568
  105534:	e3403015 	movt	r3, #21
  105538:	e5933000 	ldr	r3, [r3]
  10553c:	e50b3010 	str	r3, [fp, #-16]
  105540:	ea000017 	b	1055a4 <netdev_get_by_name+0xb0>
    {
        netdev = rt_slist_entry(node, struct netdev, list);
  105544:	e51b3010 	ldr	r3, [fp, #-16]
  105548:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        if (netdev && (rt_strncmp(netdev->name, name, rt_strlen(netdev->name)) == 0))
  10554c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  105550:	e3530000 	cmp	r3, #0
  105554:	0a00000f 	beq	105598 <netdev_get_by_name+0xa4>
  105558:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10555c:	e2834004 	add	r4, r3, #4
  105560:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  105564:	e2833004 	add	r3, r3, #4
  105568:	e1a00003 	mov	r0, r3
  10556c:	ebfff723 	bl	103200 <rt_strlen>
  105570:	e1a03000 	mov	r3, r0
  105574:	e1a02003 	mov	r2, r3
  105578:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  10557c:	e1a00004 	mov	r0, r4
  105580:	ebfff728 	bl	103228 <rt_strncmp>
  105584:	e1a03000 	mov	r3, r0
  105588:	e3530000 	cmp	r3, #0
  10558c:	1a000001 	bne	105598 <netdev_get_by_name+0xa4>
        {
            // rt_hw_interrupt_enable(level);
            return netdev;
  105590:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  105594:	ea000006 	b	1055b4 <netdev_get_by_name+0xc0>
    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  105598:	e51b0010 	ldr	r0, [fp, #-16]
  10559c:	ebfffea6 	bl	10503c <rt_slist_next>
  1055a0:	e50b0010 	str	r0, [fp, #-16]
  1055a4:	e51b3010 	ldr	r3, [fp, #-16]
  1055a8:	e3530000 	cmp	r3, #0
  1055ac:	1affffe4 	bne	105544 <netdev_get_by_name+0x50>
        }
    }

    // rt_hw_interrupt_enable(level);

    return RT_NULL;
  1055b0:	e3a03000 	mov	r3, #0
}
  1055b4:	e1a00003 	mov	r0, r3
  1055b8:	e24bd008 	sub	sp, fp, #8
  1055bc:	e8bd8810 	pop	{r4, fp, pc}

001055c0 <netdev_get_by_family>:
 *
 * @return != NULL: network interface device object
 *            NULL: get failed
 */
struct netdev *netdev_get_by_family(int family)
{
  1055c0:	e92d4800 	push	{fp, lr}
  1055c4:	e28db004 	add	fp, sp, #4
  1055c8:	e24dd018 	sub	sp, sp, #24
  1055cc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    // rt_base_t level;
    rt_slist_t *node = RT_NULL;
  1055d0:	e3a03000 	mov	r3, #0
  1055d4:	e50b3008 	str	r3, [fp, #-8]
    struct netdev *netdev = RT_NULL;
  1055d8:	e3a03000 	mov	r3, #0
  1055dc:	e50b300c 	str	r3, [fp, #-12]
    struct sal_proto_family *pf = RT_NULL;
  1055e0:	e3a03000 	mov	r3, #0
  1055e4:	e50b3010 	str	r3, [fp, #-16]

    if (netdev_list == RT_NULL)
  1055e8:	e3003568 	movw	r3, #1384	; 0x568
  1055ec:	e3403015 	movt	r3, #21
  1055f0:	e5933000 	ldr	r3, [r3]
  1055f4:	e3530000 	cmp	r3, #0
  1055f8:	1a000001 	bne	105604 <netdev_get_by_family+0x44>
    {
        return RT_NULL;
  1055fc:	e3a03000 	mov	r3, #0
  105600:	ea000048 	b	105728 <netdev_get_by_family+0x168>
    }

    // level = rt_hw_interrupt_disable();

    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  105604:	e3003568 	movw	r3, #1384	; 0x568
  105608:	e3403015 	movt	r3, #21
  10560c:	e5933000 	ldr	r3, [r3]
  105610:	e50b3008 	str	r3, [fp, #-8]
  105614:	ea00001b 	b	105688 <netdev_get_by_family+0xc8>
    {
        netdev = rt_slist_entry(node, struct netdev, list);
  105618:	e51b3008 	ldr	r3, [fp, #-8]
  10561c:	e50b300c 	str	r3, [fp, #-12]
        pf = (struct sal_proto_family *) netdev->sal_user_data;
  105620:	e51b300c 	ldr	r3, [fp, #-12]
  105624:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  105628:	e50b3010 	str	r3, [fp, #-16]
        if (pf && pf->skt_ops && pf->family == family && netdev_is_up(netdev))
  10562c:	e51b3010 	ldr	r3, [fp, #-16]
  105630:	e3530000 	cmp	r3, #0
  105634:	0a000010 	beq	10567c <netdev_get_by_family+0xbc>
  105638:	e51b3010 	ldr	r3, [fp, #-16]
  10563c:	e5933008 	ldr	r3, [r3, #8]
  105640:	e3530000 	cmp	r3, #0
  105644:	0a00000c 	beq	10567c <netdev_get_by_family+0xbc>
  105648:	e51b3010 	ldr	r3, [fp, #-16]
  10564c:	e5933000 	ldr	r3, [r3]
  105650:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  105654:	e1520003 	cmp	r2, r3
  105658:	1a000007 	bne	10567c <netdev_get_by_family+0xbc>
  10565c:	e51b300c 	ldr	r3, [fp, #-12]
  105660:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  105664:	e2033001 	and	r3, r3, #1
  105668:	e6ef3073 	uxtb	r3, r3
  10566c:	e3530000 	cmp	r3, #0
  105670:	0a000001 	beq	10567c <netdev_get_by_family+0xbc>
        {
            // rt_hw_interrupt_enable(level);
            return netdev;
  105674:	e51b300c 	ldr	r3, [fp, #-12]
  105678:	ea00002a 	b	105728 <netdev_get_by_family+0x168>
    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  10567c:	e51b0008 	ldr	r0, [fp, #-8]
  105680:	ebfffe6d 	bl	10503c <rt_slist_next>
  105684:	e50b0008 	str	r0, [fp, #-8]
  105688:	e51b3008 	ldr	r3, [fp, #-8]
  10568c:	e3530000 	cmp	r3, #0
  105690:	1affffe0 	bne	105618 <netdev_get_by_family+0x58>
        }
    }

    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  105694:	e3003568 	movw	r3, #1384	; 0x568
  105698:	e3403015 	movt	r3, #21
  10569c:	e5933000 	ldr	r3, [r3]
  1056a0:	e50b3008 	str	r3, [fp, #-8]
  1056a4:	ea00001b 	b	105718 <netdev_get_by_family+0x158>
    {
        netdev = rt_slist_entry(node, struct netdev, list);
  1056a8:	e51b3008 	ldr	r3, [fp, #-8]
  1056ac:	e50b300c 	str	r3, [fp, #-12]
        pf = (struct sal_proto_family *) netdev->sal_user_data;
  1056b0:	e51b300c 	ldr	r3, [fp, #-12]
  1056b4:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  1056b8:	e50b3010 	str	r3, [fp, #-16]
        if (pf && pf->skt_ops && pf->sec_family == family && netdev_is_up(netdev))
  1056bc:	e51b3010 	ldr	r3, [fp, #-16]
  1056c0:	e3530000 	cmp	r3, #0
  1056c4:	0a000010 	beq	10570c <netdev_get_by_family+0x14c>
  1056c8:	e51b3010 	ldr	r3, [fp, #-16]
  1056cc:	e5933008 	ldr	r3, [r3, #8]
  1056d0:	e3530000 	cmp	r3, #0
  1056d4:	0a00000c 	beq	10570c <netdev_get_by_family+0x14c>
  1056d8:	e51b3010 	ldr	r3, [fp, #-16]
  1056dc:	e5933004 	ldr	r3, [r3, #4]
  1056e0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1056e4:	e1520003 	cmp	r2, r3
  1056e8:	1a000007 	bne	10570c <netdev_get_by_family+0x14c>
  1056ec:	e51b300c 	ldr	r3, [fp, #-12]
  1056f0:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1056f4:	e2033001 	and	r3, r3, #1
  1056f8:	e6ef3073 	uxtb	r3, r3
  1056fc:	e3530000 	cmp	r3, #0
  105700:	0a000001 	beq	10570c <netdev_get_by_family+0x14c>
        {
            // rt_hw_interrupt_enable(level);
            return netdev;
  105704:	e51b300c 	ldr	r3, [fp, #-12]
  105708:	ea000006 	b	105728 <netdev_get_by_family+0x168>
    for (node = &(netdev_list->list); node; node = rt_slist_next(node))
  10570c:	e51b0008 	ldr	r0, [fp, #-8]
  105710:	ebfffe49 	bl	10503c <rt_slist_next>
  105714:	e50b0008 	str	r0, [fp, #-8]
  105718:	e51b3008 	ldr	r3, [fp, #-8]
  10571c:	e3530000 	cmp	r3, #0
  105720:	1affffe0 	bne	1056a8 <netdev_get_by_family+0xe8>
        }
    }

    // rt_hw_interrupt_enable(level);

    return RT_NULL;
  105724:	e3a03000 	mov	r3, #0
}
  105728:	e1a00003 	mov	r0, r3
  10572c:	e24bd004 	sub	sp, fp, #4
  105730:	e8bd8800 	pop	{fp, pc}

00105734 <netdev_family_get>:
 * @param netdev network interface device object
 *
 * @return the network interface device family type
 */
int netdev_family_get(struct netdev *netdev)
{
  105734:	e92d4800 	push	{fp, lr}
  105738:	e28db004 	add	fp, sp, #4
  10573c:	e24dd008 	sub	sp, sp, #8
  105740:	e50b0008 	str	r0, [fp, #-8]
    RT_ASSERT(netdev);
  105744:	e51b3008 	ldr	r3, [fp, #-8]
  105748:	e3530000 	cmp	r3, #0
  10574c:	1a000005 	bne	105768 <netdev_family_get+0x34>
  105750:	e300214e 	movw	r2, #334	; 0x14e
  105754:	e3051fe4 	movw	r1, #24548	; 0x5fe4
  105758:	e3401014 	movt	r1, #20
  10575c:	e3050c60 	movw	r0, #23648	; 0x5c60
  105760:	e3400014 	movt	r0, #20
  105764:	ebfff78b 	bl	103598 <rt_assert_handler>

    return ((struct sal_proto_family *)netdev->sal_user_data)->family;
  105768:	e51b3008 	ldr	r3, [fp, #-8]
  10576c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  105770:	e5933000 	ldr	r3, [r3]
}
  105774:	e1a00003 	mov	r0, r3
  105778:	e24bd004 	sub	sp, fp, #4
  10577c:	e8bd8800 	pop	{fp, pc}

00105780 <netdev_set_default>:
 * This function will set default network interface device.
 *
 * @param netdev the network interface device to change
 */
void netdev_set_default(struct netdev *netdev)
{
  105780:	e92d4800 	push	{fp, lr}
  105784:	e28db004 	add	fp, sp, #4
  105788:	e24dd008 	sub	sp, sp, #8
  10578c:	e50b0008 	str	r0, [fp, #-8]
    if (netdev)
  105790:	e51b3008 	ldr	r3, [fp, #-8]
  105794:	e3530000 	cmp	r3, #0
  105798:	0a00000d 	beq	1057d4 <netdev_set_default+0x54>
    {
        netdev_default = netdev;
  10579c:	e3003564 	movw	r3, #1380	; 0x564
  1057a0:	e3403015 	movt	r3, #21
  1057a4:	e51b2008 	ldr	r2, [fp, #-8]
  1057a8:	e5832000 	str	r2, [r3]

        if (netdev->ops->set_default)
  1057ac:	e51b3008 	ldr	r3, [fp, #-8]
  1057b0:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  1057b4:	e593301c 	ldr	r3, [r3, #28]
  1057b8:	e3530000 	cmp	r3, #0
  1057bc:	0a000004 	beq	1057d4 <netdev_set_default+0x54>
        {
            /* set default network interface device in the current network stack */
            netdev->ops->set_default(netdev);
  1057c0:	e51b3008 	ldr	r3, [fp, #-8]
  1057c4:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  1057c8:	e593301c 	ldr	r3, [r3, #28]
  1057cc:	e51b0008 	ldr	r0, [fp, #-8]
  1057d0:	e12fff33 	blx	r3
        }
        LOG_D("Setting default network interface device name(%s) successfully.", netdev->name);
    }
}
  1057d4:	e320f000 	nop	{0}
  1057d8:	e24bd004 	sub	sp, fp, #4
  1057dc:	e8bd8800 	pop	{fp, pc}

001057e0 <netdev_set_up>:
 *
 * @return  0: set status successfully
 *         -1: set status failed
 */
int netdev_set_up(struct netdev *netdev)
{
  1057e0:	e92d4800 	push	{fp, lr}
  1057e4:	e28db004 	add	fp, sp, #4
  1057e8:	e24dd008 	sub	sp, sp, #8
  1057ec:	e50b0008 	str	r0, [fp, #-8]
    RT_ASSERT(netdev);
  1057f0:	e51b3008 	ldr	r3, [fp, #-8]
  1057f4:	e3530000 	cmp	r3, #0
  1057f8:	1a000005 	bne	105814 <netdev_set_up+0x34>
  1057fc:	e3002173 	movw	r2, #371	; 0x173
  105800:	e3051ff8 	movw	r1, #24568	; 0x5ff8
  105804:	e3401014 	movt	r1, #20
  105808:	e3050c60 	movw	r0, #23648	; 0x5c60
  10580c:	e3400014 	movt	r0, #20
  105810:	ebfff760 	bl	103598 <rt_assert_handler>

    if (!netdev->ops || !netdev->ops->set_up)
  105814:	e51b3008 	ldr	r3, [fp, #-8]
  105818:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  10581c:	e3530000 	cmp	r3, #0
  105820:	0a000004 	beq	105838 <netdev_set_up+0x58>
  105824:	e51b3008 	ldr	r3, [fp, #-8]
  105828:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  10582c:	e5933000 	ldr	r3, [r3]
  105830:	e3530000 	cmp	r3, #0
  105834:	1a00000d 	bne	105870 <netdev_set_up+0x90>
    {
        LOG_E("The network interface device(%s) not support to set status.", netdev->name);
  105838:	e3050c70 	movw	r0, #23664	; 0x5c70
  10583c:	e3400014 	movt	r0, #20
  105840:	ebfff633 	bl	103114 <rt_kprintf>
  105844:	e51b3008 	ldr	r3, [fp, #-8]
  105848:	e2833004 	add	r3, r3, #4
  10584c:	e1a01003 	mov	r1, r3
  105850:	e3050c84 	movw	r0, #23684	; 0x5c84
  105854:	e3400014 	movt	r0, #20
  105858:	ebfff62d 	bl	103114 <rt_kprintf>
  10585c:	e3050cc0 	movw	r0, #23744	; 0x5cc0
  105860:	e3400014 	movt	r0, #20
  105864:	ebfff62a 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  105868:	e3e03000 	mvn	r3, #0
  10586c:	ea00000d 	b	1058a8 <netdev_set_up+0xc8>
    }

    /* network interface device status flags check */
    if (netdev_is_up(netdev))
  105870:	e51b3008 	ldr	r3, [fp, #-8]
  105874:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  105878:	e2033001 	and	r3, r3, #1
  10587c:	e6ef3073 	uxtb	r3, r3
  105880:	e3530000 	cmp	r3, #0
  105884:	0a000001 	beq	105890 <netdev_set_up+0xb0>
    {
        return RT_EOK;
  105888:	e3a03000 	mov	r3, #0
  10588c:	ea000005 	b	1058a8 <netdev_set_up+0xc8>
    }

    /* execute enable network interface device operations by network interface device driver */
    return netdev->ops->set_up(netdev);
  105890:	e51b3008 	ldr	r3, [fp, #-8]
  105894:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105898:	e5933000 	ldr	r3, [r3]
  10589c:	e51b0008 	ldr	r0, [fp, #-8]
  1058a0:	e12fff33 	blx	r3
  1058a4:	e1a03000 	mov	r3, r0
}
  1058a8:	e1a00003 	mov	r0, r3
  1058ac:	e24bd004 	sub	sp, fp, #4
  1058b0:	e8bd8800 	pop	{fp, pc}

001058b4 <netdev_set_down>:
 *
 * @return  0: set status successfully
 *         -1: set sttaus failed
 */
int netdev_set_down(struct netdev *netdev)
{
  1058b4:	e92d4800 	push	{fp, lr}
  1058b8:	e28db004 	add	fp, sp, #4
  1058bc:	e24dd008 	sub	sp, sp, #8
  1058c0:	e50b0008 	str	r0, [fp, #-8]
    RT_ASSERT(netdev);
  1058c4:	e51b3008 	ldr	r3, [fp, #-8]
  1058c8:	e3530000 	cmp	r3, #0
  1058cc:	1a000005 	bne	1058e8 <netdev_set_down+0x34>
  1058d0:	e300218e 	movw	r2, #398	; 0x18e
  1058d4:	e3061008 	movw	r1, #24584	; 0x6008
  1058d8:	e3401014 	movt	r1, #20
  1058dc:	e3050c60 	movw	r0, #23648	; 0x5c60
  1058e0:	e3400014 	movt	r0, #20
  1058e4:	ebfff72b 	bl	103598 <rt_assert_handler>

    if (!netdev->ops || !netdev->ops->set_down)
  1058e8:	e51b3008 	ldr	r3, [fp, #-8]
  1058ec:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  1058f0:	e3530000 	cmp	r3, #0
  1058f4:	0a000004 	beq	10590c <netdev_set_down+0x58>
  1058f8:	e51b3008 	ldr	r3, [fp, #-8]
  1058fc:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105900:	e5933004 	ldr	r3, [r3, #4]
  105904:	e3530000 	cmp	r3, #0
  105908:	1a00000d 	bne	105944 <netdev_set_down+0x90>
    {
        LOG_E("The network interface device(%s) not support to set status.", netdev->name);
  10590c:	e3050c70 	movw	r0, #23664	; 0x5c70
  105910:	e3400014 	movt	r0, #20
  105914:	ebfff5fe 	bl	103114 <rt_kprintf>
  105918:	e51b3008 	ldr	r3, [fp, #-8]
  10591c:	e2833004 	add	r3, r3, #4
  105920:	e1a01003 	mov	r1, r3
  105924:	e3050c84 	movw	r0, #23684	; 0x5c84
  105928:	e3400014 	movt	r0, #20
  10592c:	ebfff5f8 	bl	103114 <rt_kprintf>
  105930:	e3050cc0 	movw	r0, #23744	; 0x5cc0
  105934:	e3400014 	movt	r0, #20
  105938:	ebfff5f5 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  10593c:	e3e03000 	mvn	r3, #0
  105940:	ea00000c 	b	105978 <netdev_set_down+0xc4>
    }

    /* network interface device status flags check */
    if (!netdev_is_up(netdev))
  105944:	e51b3008 	ldr	r3, [fp, #-8]
  105948:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  10594c:	e2033001 	and	r3, r3, #1
  105950:	e3530000 	cmp	r3, #0
  105954:	1a000001 	bne	105960 <netdev_set_down+0xac>
    {
        return RT_EOK;
  105958:	e3a03000 	mov	r3, #0
  10595c:	ea000005 	b	105978 <netdev_set_down+0xc4>
    }

    /* execute disable network interface device operations by network interface driver */
    return netdev->ops->set_down(netdev);
  105960:	e51b3008 	ldr	r3, [fp, #-8]
  105964:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105968:	e5933004 	ldr	r3, [r3, #4]
  10596c:	e51b0008 	ldr	r0, [fp, #-8]
  105970:	e12fff33 	blx	r3
  105974:	e1a03000 	mov	r3, r0
}
  105978:	e1a00003 	mov	r0, r3
  10597c:	e24bd004 	sub	sp, fp, #4
  105980:	e8bd8800 	pop	{fp, pc}

00105984 <netdev_dhcp_enabled>:
 *
 * @return  0: set DHCP status successfully
 *         -1: set DHCP status failed
 */
int netdev_dhcp_enabled(struct netdev *netdev, rt_bool_t is_enabled)
{
  105984:	e92d4800 	push	{fp, lr}
  105988:	e28db004 	add	fp, sp, #4
  10598c:	e24dd008 	sub	sp, sp, #8
  105990:	e50b0008 	str	r0, [fp, #-8]
  105994:	e50b100c 	str	r1, [fp, #-12]
    RT_ASSERT(netdev);
  105998:	e51b3008 	ldr	r3, [fp, #-8]
  10599c:	e3530000 	cmp	r3, #0
  1059a0:	1a000005 	bne	1059bc <netdev_dhcp_enabled+0x38>
  1059a4:	e30021ab 	movw	r2, #427	; 0x1ab
  1059a8:	e3061018 	movw	r1, #24600	; 0x6018
  1059ac:	e3401014 	movt	r1, #20
  1059b0:	e3050c60 	movw	r0, #23648	; 0x5c60
  1059b4:	e3400014 	movt	r0, #20
  1059b8:	ebfff6f6 	bl	103598 <rt_assert_handler>

    if (!netdev->ops || !netdev->ops->set_dhcp)
  1059bc:	e51b3008 	ldr	r3, [fp, #-8]
  1059c0:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  1059c4:	e3530000 	cmp	r3, #0
  1059c8:	0a000004 	beq	1059e0 <netdev_dhcp_enabled+0x5c>
  1059cc:	e51b3008 	ldr	r3, [fp, #-8]
  1059d0:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  1059d4:	e5933010 	ldr	r3, [r3, #16]
  1059d8:	e3530000 	cmp	r3, #0
  1059dc:	1a00000d 	bne	105a18 <netdev_dhcp_enabled+0x94>
    {
        LOG_E("The network interface device(%s) not support to set DHCP status.", netdev->name);
  1059e0:	e3050c70 	movw	r0, #23664	; 0x5c70
  1059e4:	e3400014 	movt	r0, #20
  1059e8:	ebfff5c9 	bl	103114 <rt_kprintf>
  1059ec:	e51b3008 	ldr	r3, [fp, #-8]
  1059f0:	e2833004 	add	r3, r3, #4
  1059f4:	e1a01003 	mov	r1, r3
  1059f8:	e3050cc8 	movw	r0, #23752	; 0x5cc8
  1059fc:	e3400014 	movt	r0, #20
  105a00:	ebfff5c3 	bl	103114 <rt_kprintf>
  105a04:	e3050cc0 	movw	r0, #23744	; 0x5cc0
  105a08:	e3400014 	movt	r0, #20
  105a0c:	ebfff5c0 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  105a10:	e3e03000 	mvn	r3, #0
  105a14:	ea00000f 	b	105a58 <netdev_dhcp_enabled+0xd4>
    }

    /* network interface device DHCP flags check */
    if (netdev_is_dhcp_enabled(netdev) == is_enabled)
  105a18:	e51b3008 	ldr	r3, [fp, #-8]
  105a1c:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  105a20:	e1a03423 	lsr	r3, r3, #8
  105a24:	e2033001 	and	r3, r3, #1
  105a28:	e51b200c 	ldr	r2, [fp, #-12]
  105a2c:	e1520003 	cmp	r2, r3
  105a30:	1a000001 	bne	105a3c <netdev_dhcp_enabled+0xb8>
    {
        return RT_EOK;
  105a34:	e3a03000 	mov	r3, #0
  105a38:	ea000006 	b	105a58 <netdev_dhcp_enabled+0xd4>
    }

    /* execute network interface device DHCP capability control operations */
    return netdev->ops->set_dhcp(netdev, is_enabled);
  105a3c:	e51b3008 	ldr	r3, [fp, #-8]
  105a40:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105a44:	e5933010 	ldr	r3, [r3, #16]
  105a48:	e51b100c 	ldr	r1, [fp, #-12]
  105a4c:	e51b0008 	ldr	r0, [fp, #-8]
  105a50:	e12fff33 	blx	r3
  105a54:	e1a03000 	mov	r3, r0
}
  105a58:	e1a00003 	mov	r0, r3
  105a5c:	e24bd004 	sub	sp, fp, #4
  105a60:	e8bd8800 	pop	{fp, pc}

00105a64 <netdev_set_ipaddr>:
 *
 * @return  0: set IP address successfully
 *         -1: set IP address failed
 */
int netdev_set_ipaddr(struct netdev *netdev, const ip_addr_t *ip_addr)
{
  105a64:	e92d4810 	push	{r4, fp, lr}
  105a68:	e28db008 	add	fp, sp, #8
  105a6c:	e24dd00c 	sub	sp, sp, #12
  105a70:	e50b0010 	str	r0, [fp, #-16]
  105a74:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    RT_ASSERT(netdev);
  105a78:	e51b3010 	ldr	r3, [fp, #-16]
  105a7c:	e3530000 	cmp	r3, #0
  105a80:	1a000005 	bne	105a9c <netdev_set_ipaddr+0x38>
  105a84:	e3a02f72 	mov	r2, #456	; 0x1c8
  105a88:	e306102c 	movw	r1, #24620	; 0x602c
  105a8c:	e3401014 	movt	r1, #20
  105a90:	e3050c60 	movw	r0, #23648	; 0x5c60
  105a94:	e3400014 	movt	r0, #20
  105a98:	ebfff6be 	bl	103598 <rt_assert_handler>
    RT_ASSERT(ip_addr);
  105a9c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  105aa0:	e3530000 	cmp	r3, #0
  105aa4:	1a000005 	bne	105ac0 <netdev_set_ipaddr+0x5c>
  105aa8:	e30021c9 	movw	r2, #457	; 0x1c9
  105aac:	e306102c 	movw	r1, #24620	; 0x602c
  105ab0:	e3401014 	movt	r1, #20
  105ab4:	e3050d0c 	movw	r0, #23820	; 0x5d0c
  105ab8:	e3400014 	movt	r0, #20
  105abc:	ebfff6b5 	bl	103598 <rt_assert_handler>

    if (!netdev->ops || !netdev->ops->set_addr_info)
  105ac0:	e51b3010 	ldr	r3, [fp, #-16]
  105ac4:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105ac8:	e3530000 	cmp	r3, #0
  105acc:	0a000004 	beq	105ae4 <netdev_set_ipaddr+0x80>
  105ad0:	e51b3010 	ldr	r3, [fp, #-16]
  105ad4:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105ad8:	e5933008 	ldr	r3, [r3, #8]
  105adc:	e3530000 	cmp	r3, #0
  105ae0:	1a00000d 	bne	105b1c <netdev_set_ipaddr+0xb8>
    {
        LOG_E("The network interface device(%s) not support to set IP address.", netdev->name);
  105ae4:	e3050c70 	movw	r0, #23664	; 0x5c70
  105ae8:	e3400014 	movt	r0, #20
  105aec:	ebfff588 	bl	103114 <rt_kprintf>
  105af0:	e51b3010 	ldr	r3, [fp, #-16]
  105af4:	e2833004 	add	r3, r3, #4
  105af8:	e1a01003 	mov	r1, r3
  105afc:	e3050d14 	movw	r0, #23828	; 0x5d14
  105b00:	e3400014 	movt	r0, #20
  105b04:	ebfff582 	bl	103114 <rt_kprintf>
  105b08:	e3050cc0 	movw	r0, #23744	; 0x5cc0
  105b0c:	e3400014 	movt	r0, #20
  105b10:	ebfff57f 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  105b14:	e3e03000 	mvn	r3, #0
  105b18:	ea00001d 	b	105b94 <netdev_set_ipaddr+0x130>
    }

    if (netdev_is_dhcp_enabled(netdev))
  105b1c:	e51b3010 	ldr	r3, [fp, #-16]
  105b20:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  105b24:	e1a03423 	lsr	r3, r3, #8
  105b28:	e2033001 	and	r3, r3, #1
  105b2c:	e6ef3073 	uxtb	r3, r3
  105b30:	e3530000 	cmp	r3, #0
  105b34:	0a00000d 	beq	105b70 <netdev_set_ipaddr+0x10c>
    {
        LOG_E("The network interface device(%s) DHCP capability is enable, not support set IP address.", netdev->name);
  105b38:	e3050c70 	movw	r0, #23664	; 0x5c70
  105b3c:	e3400014 	movt	r0, #20
  105b40:	ebfff573 	bl	103114 <rt_kprintf>
  105b44:	e51b3010 	ldr	r3, [fp, #-16]
  105b48:	e2833004 	add	r3, r3, #4
  105b4c:	e1a01003 	mov	r1, r3
  105b50:	e3050d54 	movw	r0, #23892	; 0x5d54
  105b54:	e3400014 	movt	r0, #20
  105b58:	ebfff56d 	bl	103114 <rt_kprintf>
  105b5c:	e3050cc0 	movw	r0, #23744	; 0x5cc0
  105b60:	e3400014 	movt	r0, #20
  105b64:	ebfff56a 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  105b68:	e3e03000 	mvn	r3, #0
  105b6c:	ea000008 	b	105b94 <netdev_set_ipaddr+0x130>
    }

     /* execute network interface device set IP address operations */
    return netdev->ops->set_addr_info(netdev, (ip_addr_t *)ip_addr, RT_NULL, RT_NULL);
  105b70:	e51b3010 	ldr	r3, [fp, #-16]
  105b74:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105b78:	e5934008 	ldr	r4, [r3, #8]
  105b7c:	e3a03000 	mov	r3, #0
  105b80:	e3a02000 	mov	r2, #0
  105b84:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  105b88:	e51b0010 	ldr	r0, [fp, #-16]
  105b8c:	e12fff34 	blx	r4
  105b90:	e1a03000 	mov	r3, r0
}
  105b94:	e1a00003 	mov	r0, r3
  105b98:	e24bd008 	sub	sp, fp, #8
  105b9c:	e8bd8810 	pop	{r4, fp, pc}

00105ba0 <netdev_set_netmask>:
 *
 * @return  0: set netmask address successfully
 *         -1: set netmask address failed
 */
int netdev_set_netmask(struct netdev *netdev, const ip_addr_t *netmask)
{
  105ba0:	e92d4810 	push	{r4, fp, lr}
  105ba4:	e28db008 	add	fp, sp, #8
  105ba8:	e24dd00c 	sub	sp, sp, #12
  105bac:	e50b0010 	str	r0, [fp, #-16]
  105bb0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    RT_ASSERT(netdev);
  105bb4:	e51b3010 	ldr	r3, [fp, #-16]
  105bb8:	e3530000 	cmp	r3, #0
  105bbc:	1a000005 	bne	105bd8 <netdev_set_netmask+0x38>
  105bc0:	e30021e6 	movw	r2, #486	; 0x1e6
  105bc4:	e3061040 	movw	r1, #24640	; 0x6040
  105bc8:	e3401014 	movt	r1, #20
  105bcc:	e3050c60 	movw	r0, #23648	; 0x5c60
  105bd0:	e3400014 	movt	r0, #20
  105bd4:	ebfff66f 	bl	103598 <rt_assert_handler>
    RT_ASSERT(netmask);
  105bd8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  105bdc:	e3530000 	cmp	r3, #0
  105be0:	1a000005 	bne	105bfc <netdev_set_netmask+0x5c>
  105be4:	e30021e7 	movw	r2, #487	; 0x1e7
  105be8:	e3061040 	movw	r1, #24640	; 0x6040
  105bec:	e3401014 	movt	r1, #20
  105bf0:	e3050dac 	movw	r0, #23980	; 0x5dac
  105bf4:	e3400014 	movt	r0, #20
  105bf8:	ebfff666 	bl	103598 <rt_assert_handler>

    if (!netdev->ops || !netdev->ops->set_addr_info)
  105bfc:	e51b3010 	ldr	r3, [fp, #-16]
  105c00:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105c04:	e3530000 	cmp	r3, #0
  105c08:	0a000004 	beq	105c20 <netdev_set_netmask+0x80>
  105c0c:	e51b3010 	ldr	r3, [fp, #-16]
  105c10:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105c14:	e5933008 	ldr	r3, [r3, #8]
  105c18:	e3530000 	cmp	r3, #0
  105c1c:	1a00000d 	bne	105c58 <netdev_set_netmask+0xb8>
    {
        LOG_E("The network interface device(%s) not support to set netmask address.", netdev->name);
  105c20:	e3050c70 	movw	r0, #23664	; 0x5c70
  105c24:	e3400014 	movt	r0, #20
  105c28:	ebfff539 	bl	103114 <rt_kprintf>
  105c2c:	e51b3010 	ldr	r3, [fp, #-16]
  105c30:	e2833004 	add	r3, r3, #4
  105c34:	e1a01003 	mov	r1, r3
  105c38:	e3050db4 	movw	r0, #23988	; 0x5db4
  105c3c:	e3400014 	movt	r0, #20
  105c40:	ebfff533 	bl	103114 <rt_kprintf>
  105c44:	e3050cc0 	movw	r0, #23744	; 0x5cc0
  105c48:	e3400014 	movt	r0, #20
  105c4c:	ebfff530 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  105c50:	e3e03000 	mvn	r3, #0
  105c54:	ea00001d 	b	105cd0 <netdev_set_netmask+0x130>
    }

    if (netdev_is_dhcp_enabled(netdev))
  105c58:	e51b3010 	ldr	r3, [fp, #-16]
  105c5c:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  105c60:	e1a03423 	lsr	r3, r3, #8
  105c64:	e2033001 	and	r3, r3, #1
  105c68:	e6ef3073 	uxtb	r3, r3
  105c6c:	e3530000 	cmp	r3, #0
  105c70:	0a00000d 	beq	105cac <netdev_set_netmask+0x10c>
    {
        LOG_E("The network interface device(%s) DHCP capability is enable, not support set netmask address.", netdev->name);
  105c74:	e3050c70 	movw	r0, #23664	; 0x5c70
  105c78:	e3400014 	movt	r0, #20
  105c7c:	ebfff524 	bl	103114 <rt_kprintf>
  105c80:	e51b3010 	ldr	r3, [fp, #-16]
  105c84:	e2833004 	add	r3, r3, #4
  105c88:	e1a01003 	mov	r1, r3
  105c8c:	e3050dfc 	movw	r0, #24060	; 0x5dfc
  105c90:	e3400014 	movt	r0, #20
  105c94:	ebfff51e 	bl	103114 <rt_kprintf>
  105c98:	e3050cc0 	movw	r0, #23744	; 0x5cc0
  105c9c:	e3400014 	movt	r0, #20
  105ca0:	ebfff51b 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  105ca4:	e3e03000 	mvn	r3, #0
  105ca8:	ea000008 	b	105cd0 <netdev_set_netmask+0x130>
    }

    /* execute network interface device set netmask address operations */
    return netdev->ops->set_addr_info(netdev, RT_NULL, (ip_addr_t *)netmask, RT_NULL);
  105cac:	e51b3010 	ldr	r3, [fp, #-16]
  105cb0:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105cb4:	e5934008 	ldr	r4, [r3, #8]
  105cb8:	e3a03000 	mov	r3, #0
  105cbc:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  105cc0:	e3a01000 	mov	r1, #0
  105cc4:	e51b0010 	ldr	r0, [fp, #-16]
  105cc8:	e12fff34 	blx	r4
  105ccc:	e1a03000 	mov	r3, r0
}
  105cd0:	e1a00003 	mov	r0, r3
  105cd4:	e24bd008 	sub	sp, fp, #8
  105cd8:	e8bd8810 	pop	{r4, fp, pc}

00105cdc <netdev_set_gw>:
 *
 * @return  0: set gateway address successfully
 *         -1: set gateway address failed
 */
int netdev_set_gw(struct netdev *netdev, const ip_addr_t *gw)
{
  105cdc:	e92d4810 	push	{r4, fp, lr}
  105ce0:	e28db008 	add	fp, sp, #8
  105ce4:	e24dd00c 	sub	sp, sp, #12
  105ce8:	e50b0010 	str	r0, [fp, #-16]
  105cec:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    RT_ASSERT(netdev);
  105cf0:	e51b3010 	ldr	r3, [fp, #-16]
  105cf4:	e3530000 	cmp	r3, #0
  105cf8:	1a000005 	bne	105d14 <netdev_set_gw+0x38>
  105cfc:	e3a02f81 	mov	r2, #516	; 0x204
  105d00:	e3061054 	movw	r1, #24660	; 0x6054
  105d04:	e3401014 	movt	r1, #20
  105d08:	e3050c60 	movw	r0, #23648	; 0x5c60
  105d0c:	e3400014 	movt	r0, #20
  105d10:	ebfff620 	bl	103598 <rt_assert_handler>
    RT_ASSERT(gw);
  105d14:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  105d18:	e3530000 	cmp	r3, #0
  105d1c:	1a000005 	bne	105d38 <netdev_set_gw+0x5c>
  105d20:	e3002205 	movw	r2, #517	; 0x205
  105d24:	e3061054 	movw	r1, #24660	; 0x6054
  105d28:	e3401014 	movt	r1, #20
  105d2c:	e3050e5c 	movw	r0, #24156	; 0x5e5c
  105d30:	e3400014 	movt	r0, #20
  105d34:	ebfff617 	bl	103598 <rt_assert_handler>

    if (!netdev->ops || !netdev->ops->set_addr_info)
  105d38:	e51b3010 	ldr	r3, [fp, #-16]
  105d3c:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105d40:	e3530000 	cmp	r3, #0
  105d44:	0a000004 	beq	105d5c <netdev_set_gw+0x80>
  105d48:	e51b3010 	ldr	r3, [fp, #-16]
  105d4c:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105d50:	e5933008 	ldr	r3, [r3, #8]
  105d54:	e3530000 	cmp	r3, #0
  105d58:	1a00000d 	bne	105d94 <netdev_set_gw+0xb8>
    {
        LOG_E("The network interface device(%s) not support to set gateway address.", netdev->name);
  105d5c:	e3050c70 	movw	r0, #23664	; 0x5c70
  105d60:	e3400014 	movt	r0, #20
  105d64:	ebfff4ea 	bl	103114 <rt_kprintf>
  105d68:	e51b3010 	ldr	r3, [fp, #-16]
  105d6c:	e2833004 	add	r3, r3, #4
  105d70:	e1a01003 	mov	r1, r3
  105d74:	e3050e60 	movw	r0, #24160	; 0x5e60
  105d78:	e3400014 	movt	r0, #20
  105d7c:	ebfff4e4 	bl	103114 <rt_kprintf>
  105d80:	e3050cc0 	movw	r0, #23744	; 0x5cc0
  105d84:	e3400014 	movt	r0, #20
  105d88:	ebfff4e1 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  105d8c:	e3e03000 	mvn	r3, #0
  105d90:	ea00001d 	b	105e0c <netdev_set_gw+0x130>
    }

    if (netdev_is_dhcp_enabled(netdev))
  105d94:	e51b3010 	ldr	r3, [fp, #-16]
  105d98:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  105d9c:	e1a03423 	lsr	r3, r3, #8
  105da0:	e2033001 	and	r3, r3, #1
  105da4:	e6ef3073 	uxtb	r3, r3
  105da8:	e3530000 	cmp	r3, #0
  105dac:	0a00000d 	beq	105de8 <netdev_set_gw+0x10c>
    {
        LOG_E("The network interface device(%s) DHCP capability is enable, not support set gateway address.", netdev->name);
  105db0:	e3050c70 	movw	r0, #23664	; 0x5c70
  105db4:	e3400014 	movt	r0, #20
  105db8:	ebfff4d5 	bl	103114 <rt_kprintf>
  105dbc:	e51b3010 	ldr	r3, [fp, #-16]
  105dc0:	e2833004 	add	r3, r3, #4
  105dc4:	e1a01003 	mov	r1, r3
  105dc8:	e3050ea8 	movw	r0, #24232	; 0x5ea8
  105dcc:	e3400014 	movt	r0, #20
  105dd0:	ebfff4cf 	bl	103114 <rt_kprintf>
  105dd4:	e3050cc0 	movw	r0, #23744	; 0x5cc0
  105dd8:	e3400014 	movt	r0, #20
  105ddc:	ebfff4cc 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  105de0:	e3e03000 	mvn	r3, #0
  105de4:	ea000008 	b	105e0c <netdev_set_gw+0x130>
    }

    /* execute network interface device set gateway address operations */
    return netdev->ops->set_addr_info(netdev, RT_NULL, RT_NULL, (ip_addr_t *)gw);
  105de8:	e51b3010 	ldr	r3, [fp, #-16]
  105dec:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105df0:	e5934008 	ldr	r4, [r3, #8]
  105df4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  105df8:	e3a02000 	mov	r2, #0
  105dfc:	e3a01000 	mov	r1, #0
  105e00:	e51b0010 	ldr	r0, [fp, #-16]
  105e04:	e12fff34 	blx	r4
  105e08:	e1a03000 	mov	r3, r0
}
  105e0c:	e1a00003 	mov	r0, r3
  105e10:	e24bd008 	sub	sp, fp, #8
  105e14:	e8bd8810 	pop	{r4, fp, pc}

00105e18 <netdev_set_dns_server>:
 *
 * @return  0: set netmask address successfully
 *         -1: set netmask address failed
 */
int netdev_set_dns_server(struct netdev *netdev, uint8_t dns_num, const ip_addr_t *dns_server)
{
  105e18:	e92d4800 	push	{fp, lr}
  105e1c:	e28db004 	add	fp, sp, #4
  105e20:	e24dd010 	sub	sp, sp, #16
  105e24:	e50b0008 	str	r0, [fp, #-8]
  105e28:	e1a03001 	mov	r3, r1
  105e2c:	e50b2010 	str	r2, [fp, #-16]
  105e30:	e54b3009 	strb	r3, [fp, #-9]
    RT_ASSERT(netdev);
  105e34:	e51b3008 	ldr	r3, [fp, #-8]
  105e38:	e3530000 	cmp	r3, #0
  105e3c:	1a000005 	bne	105e58 <netdev_set_dns_server+0x40>
  105e40:	e3002222 	movw	r2, #546	; 0x222
  105e44:	e3061064 	movw	r1, #24676	; 0x6064
  105e48:	e3401014 	movt	r1, #20
  105e4c:	e3050c60 	movw	r0, #23648	; 0x5c60
  105e50:	e3400014 	movt	r0, #20
  105e54:	ebfff5cf 	bl	103598 <rt_assert_handler>
    RT_ASSERT(dns_server);
  105e58:	e51b3010 	ldr	r3, [fp, #-16]
  105e5c:	e3530000 	cmp	r3, #0
  105e60:	1a000005 	bne	105e7c <netdev_set_dns_server+0x64>
  105e64:	e3002223 	movw	r2, #547	; 0x223
  105e68:	e3061064 	movw	r1, #24676	; 0x6064
  105e6c:	e3401014 	movt	r1, #20
  105e70:	e3050f08 	movw	r0, #24328	; 0x5f08
  105e74:	e3400014 	movt	r0, #20
  105e78:	ebfff5c6 	bl	103598 <rt_assert_handler>

    if (dns_num >= NETDEV_DNS_SERVERS_NUM)
  105e7c:	e55b3009 	ldrb	r3, [fp, #-9]
  105e80:	e3530001 	cmp	r3, #1
  105e84:	9a00000e 	bls	105ec4 <netdev_set_dns_server+0xac>
    {
        LOG_E("The number of DNS servers(%d) set exceeds the maximum number(%d).", dns_num + 1, NETDEV_DNS_SERVERS_NUM);
  105e88:	e3050c70 	movw	r0, #23664	; 0x5c70
  105e8c:	e3400014 	movt	r0, #20
  105e90:	ebfff49f 	bl	103114 <rt_kprintf>
  105e94:	e55b3009 	ldrb	r3, [fp, #-9]
  105e98:	e2833001 	add	r3, r3, #1
  105e9c:	e3a02002 	mov	r2, #2
  105ea0:	e1a01003 	mov	r1, r3
  105ea4:	e3050f14 	movw	r0, #24340	; 0x5f14
  105ea8:	e3400014 	movt	r0, #20
  105eac:	ebfff498 	bl	103114 <rt_kprintf>
  105eb0:	e3050cc0 	movw	r0, #23744	; 0x5cc0
  105eb4:	e3400014 	movt	r0, #20
  105eb8:	ebfff495 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  105ebc:	e3e03000 	mvn	r3, #0
  105ec0:	ea00001e 	b	105f40 <netdev_set_dns_server+0x128>
    }

    if (!netdev->ops || !netdev->ops->set_dns_server)
  105ec4:	e51b3008 	ldr	r3, [fp, #-8]
  105ec8:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105ecc:	e3530000 	cmp	r3, #0
  105ed0:	0a000004 	beq	105ee8 <netdev_set_dns_server+0xd0>
  105ed4:	e51b3008 	ldr	r3, [fp, #-8]
  105ed8:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105edc:	e593300c 	ldr	r3, [r3, #12]
  105ee0:	e3530000 	cmp	r3, #0
  105ee4:	1a00000d 	bne	105f20 <netdev_set_dns_server+0x108>
    {
        LOG_E("The network interface device(%s) not support to set DNS server address.", netdev->name);
  105ee8:	e3050c70 	movw	r0, #23664	; 0x5c70
  105eec:	e3400014 	movt	r0, #20
  105ef0:	ebfff487 	bl	103114 <rt_kprintf>
  105ef4:	e51b3008 	ldr	r3, [fp, #-8]
  105ef8:	e2833004 	add	r3, r3, #4
  105efc:	e1a01003 	mov	r1, r3
  105f00:	e3050f58 	movw	r0, #24408	; 0x5f58
  105f04:	e3400014 	movt	r0, #20
  105f08:	ebfff481 	bl	103114 <rt_kprintf>
  105f0c:	e3050cc0 	movw	r0, #23744	; 0x5cc0
  105f10:	e3400014 	movt	r0, #20
  105f14:	ebfff47e 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  105f18:	e3e03000 	mvn	r3, #0
  105f1c:	ea000007 	b	105f40 <netdev_set_dns_server+0x128>
    }

    /* execute network interface device set DNS server address operations */
    return netdev->ops->set_dns_server(netdev, dns_num, (ip_addr_t *)dns_server);
  105f20:	e51b3008 	ldr	r3, [fp, #-8]
  105f24:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  105f28:	e593300c 	ldr	r3, [r3, #12]
  105f2c:	e55b1009 	ldrb	r1, [fp, #-9]
  105f30:	e51b2010 	ldr	r2, [fp, #-16]
  105f34:	e51b0008 	ldr	r0, [fp, #-8]
  105f38:	e12fff33 	blx	r3
  105f3c:	e1a03000 	mov	r3, r0
}
  105f40:	e1a00003 	mov	r0, r3
  105f44:	e24bd004 	sub	sp, fp, #4
  105f48:	e8bd8800 	pop	{fp, pc}

00105f4c <netdev_set_status_callback>:
 *
 * @param netdev the network interface device to change
 * @param status_callback the callback be called when the status has been changed.
 */
void netdev_set_status_callback(struct netdev *netdev, netdev_callback_fn status_callback)
{
  105f4c:	e92d4800 	push	{fp, lr}
  105f50:	e28db004 	add	fp, sp, #4
  105f54:	e24dd008 	sub	sp, sp, #8
  105f58:	e50b0008 	str	r0, [fp, #-8]
  105f5c:	e50b100c 	str	r1, [fp, #-12]
    RT_ASSERT(netdev);
  105f60:	e51b3008 	ldr	r3, [fp, #-8]
  105f64:	e3530000 	cmp	r3, #0
  105f68:	1a000005 	bne	105f84 <netdev_set_status_callback+0x38>
  105f6c:	e300223d 	movw	r2, #573	; 0x23d
  105f70:	e306107c 	movw	r1, #24700	; 0x607c
  105f74:	e3401014 	movt	r1, #20
  105f78:	e3050c60 	movw	r0, #23648	; 0x5c60
  105f7c:	e3400014 	movt	r0, #20
  105f80:	ebfff584 	bl	103598 <rt_assert_handler>
    RT_ASSERT(status_callback);
  105f84:	e51b300c 	ldr	r3, [fp, #-12]
  105f88:	e3530000 	cmp	r3, #0
  105f8c:	1a000005 	bne	105fa8 <netdev_set_status_callback+0x5c>
  105f90:	e300223e 	movw	r2, #574	; 0x23e
  105f94:	e306107c 	movw	r1, #24700	; 0x607c
  105f98:	e3401014 	movt	r1, #20
  105f9c:	e3050fa0 	movw	r0, #24480	; 0x5fa0
  105fa0:	e3400014 	movt	r0, #20
  105fa4:	ebfff57b 	bl	103598 <rt_assert_handler>

    netdev->status_callback = status_callback;
  105fa8:	e51b3008 	ldr	r3, [fp, #-8]
  105fac:	e51b200c 	ldr	r2, [fp, #-12]
  105fb0:	e5832034 	str	r2, [r3, #52]	; 0x34
}
  105fb4:	e320f000 	nop	{0}
  105fb8:	e24bd004 	sub	sp, fp, #4
  105fbc:	e8bd8800 	pop	{fp, pc}

00105fc0 <netdev_set_addr_callback>:
 *
 * @param netdev the network interface device to change
 * @param addr_callback the callback be called when the address has been changed.
 */
void netdev_set_addr_callback(struct netdev *netdev, netdev_callback_fn addr_callback)
{
  105fc0:	e92d4800 	push	{fp, lr}
  105fc4:	e28db004 	add	fp, sp, #4
  105fc8:	e24dd008 	sub	sp, sp, #8
  105fcc:	e50b0008 	str	r0, [fp, #-8]
  105fd0:	e50b100c 	str	r1, [fp, #-12]
    RT_ASSERT(netdev);
  105fd4:	e51b3008 	ldr	r3, [fp, #-8]
  105fd8:	e3530000 	cmp	r3, #0
  105fdc:	1a000005 	bne	105ff8 <netdev_set_addr_callback+0x38>
  105fe0:	e300224b 	movw	r2, #587	; 0x24b
  105fe4:	e3061098 	movw	r1, #24728	; 0x6098
  105fe8:	e3401014 	movt	r1, #20
  105fec:	e3050c60 	movw	r0, #23648	; 0x5c60
  105ff0:	e3400014 	movt	r0, #20
  105ff4:	ebfff567 	bl	103598 <rt_assert_handler>
    RT_ASSERT(addr_callback);
  105ff8:	e51b300c 	ldr	r3, [fp, #-12]
  105ffc:	e3530000 	cmp	r3, #0
  106000:	1a000005 	bne	10601c <netdev_set_addr_callback+0x5c>
  106004:	e3a02f93 	mov	r2, #588	; 0x24c
  106008:	e3061098 	movw	r1, #24728	; 0x6098
  10600c:	e3401014 	movt	r1, #20
  106010:	e3050fb0 	movw	r0, #24496	; 0x5fb0
  106014:	e3400014 	movt	r0, #20
  106018:	ebfff55e 	bl	103598 <rt_assert_handler>

    netdev->addr_callback = addr_callback;
  10601c:	e51b3008 	ldr	r3, [fp, #-8]
  106020:	e51b200c 	ldr	r2, [fp, #-12]
  106024:	e5832038 	str	r2, [r3, #56]	; 0x38
}
  106028:	e320f000 	nop	{0}
  10602c:	e24bd004 	sub	sp, fp, #4
  106030:	e8bd8800 	pop	{fp, pc}

00106034 <netdev_low_level_set_ipaddr>:
 *
 * @param netdev the network interface device to change
 * @param ipaddr the new IP address
 */
void netdev_low_level_set_ipaddr(struct netdev *netdev, const ip_addr_t *ip_addr)
{
  106034:	e92d4800 	push	{fp, lr}
  106038:	e28db004 	add	fp, sp, #4
  10603c:	e24dd008 	sub	sp, sp, #8
  106040:	e50b0008 	str	r0, [fp, #-8]
  106044:	e50b100c 	str	r1, [fp, #-12]
    RT_ASSERT(ip_addr);
  106048:	e51b300c 	ldr	r3, [fp, #-12]
  10604c:	e3530000 	cmp	r3, #0
  106050:	1a000005 	bne	10606c <netdev_low_level_set_ipaddr+0x38>
  106054:	e300225b 	movw	r2, #603	; 0x25b
  106058:	e30610b4 	movw	r1, #24756	; 0x60b4
  10605c:	e3401014 	movt	r1, #20
  106060:	e3050d0c 	movw	r0, #23820	; 0x5d0c
  106064:	e3400014 	movt	r0, #20
  106068:	ebfff54a 	bl	103598 <rt_assert_handler>

    if (netdev && ip_addr_cmp(&(netdev->ip_addr), ip_addr) == 0)
  10606c:	e51b3008 	ldr	r3, [fp, #-8]
  106070:	e3530000 	cmp	r3, #0
  106074:	0a000025 	beq	106110 <netdev_low_level_set_ipaddr+0xdc>
  106078:	e51b3008 	ldr	r3, [fp, #-8]
  10607c:	e593200c 	ldr	r2, [r3, #12]
  106080:	e51b300c 	ldr	r3, [fp, #-12]
  106084:	e5933000 	ldr	r3, [r3]
  106088:	e1520003 	cmp	r2, r3
  10608c:	0a00001f 	beq	106110 <netdev_low_level_set_ipaddr+0xdc>
    {
        ip_addr_copy(netdev->ip_addr, *ip_addr);
  106090:	e51b300c 	ldr	r3, [fp, #-12]
  106094:	e5932000 	ldr	r2, [r3]
  106098:	e51b3008 	ldr	r3, [fp, #-8]
  10609c:	e583200c 	str	r2, [r3, #12]

#ifdef RT_USING_SAL
        /* set network interface device flags to internet up */
        if (netdev_is_up(netdev) && netdev_is_link_up(netdev))
  1060a0:	e51b3008 	ldr	r3, [fp, #-8]
  1060a4:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1060a8:	e2033001 	and	r3, r3, #1
  1060ac:	e6ef3073 	uxtb	r3, r3
  1060b0:	e3530000 	cmp	r3, #0
  1060b4:	0a00000c 	beq	1060ec <netdev_low_level_set_ipaddr+0xb8>
  1060b8:	e51b3008 	ldr	r3, [fp, #-8]
  1060bc:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1060c0:	e1a03123 	lsr	r3, r3, #2
  1060c4:	e2033001 	and	r3, r3, #1
  1060c8:	e6ef3073 	uxtb	r3, r3
  1060cc:	e3530000 	cmp	r3, #0
  1060d0:	0a000005 	beq	1060ec <netdev_low_level_set_ipaddr+0xb8>
        {
            // sal_check_netdev_internet_up(netdev);
            // check_netdev_internet_up_work(netdev);
            netdev->flags |= NETDEV_FLAG_INTERNET_UP;
  1060d4:	e51b3008 	ldr	r3, [fp, #-8]
  1060d8:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1060dc:	e3833080 	orr	r3, r3, #128	; 0x80
  1060e0:	e6ff2073 	uxth	r2, r3
  1060e4:	e51b3008 	ldr	r3, [fp, #-8]
  1060e8:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
        }
#endif /* RT_USING_SAL */

        /* execute IP address change callback function */
        if (netdev->addr_callback)
  1060ec:	e51b3008 	ldr	r3, [fp, #-8]
  1060f0:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  1060f4:	e3530000 	cmp	r3, #0
  1060f8:	0a000004 	beq	106110 <netdev_low_level_set_ipaddr+0xdc>
        {
            netdev->addr_callback(netdev, NETDEV_CB_ADDR_IP);
  1060fc:	e51b3008 	ldr	r3, [fp, #-8]
  106100:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  106104:	e3a01000 	mov	r1, #0
  106108:	e51b0008 	ldr	r0, [fp, #-8]
  10610c:	e12fff33 	blx	r3
        }
    }
}
  106110:	e320f000 	nop	{0}
  106114:	e24bd004 	sub	sp, fp, #4
  106118:	e8bd8800 	pop	{fp, pc}

0010611c <netdev_low_level_set_netmask>:
 *
 * @param netdev the network interface device to change
 * @param netmask the new netmask address
 */
void netdev_low_level_set_netmask(struct netdev *netdev, const ip_addr_t *netmask)
{
  10611c:	e92d4800 	push	{fp, lr}
  106120:	e28db004 	add	fp, sp, #4
  106124:	e24dd008 	sub	sp, sp, #8
  106128:	e50b0008 	str	r0, [fp, #-8]
  10612c:	e50b100c 	str	r1, [fp, #-12]
    RT_ASSERT(netmask);
  106130:	e51b300c 	ldr	r3, [fp, #-12]
  106134:	e3530000 	cmp	r3, #0
  106138:	1a000005 	bne	106154 <netdev_low_level_set_netmask+0x38>
  10613c:	e3a02f9f 	mov	r2, #636	; 0x27c
  106140:	e30610d0 	movw	r1, #24784	; 0x60d0
  106144:	e3401014 	movt	r1, #20
  106148:	e3050dac 	movw	r0, #23980	; 0x5dac
  10614c:	e3400014 	movt	r0, #20
  106150:	ebfff510 	bl	103598 <rt_assert_handler>

    if (netdev && ip_addr_cmp(&(netdev->netmask), netmask) == 0)
  106154:	e51b3008 	ldr	r3, [fp, #-8]
  106158:	e3530000 	cmp	r3, #0
  10615c:	0a00002d 	beq	106218 <netdev_low_level_set_netmask+0xfc>
  106160:	e51b3008 	ldr	r3, [fp, #-8]
  106164:	e5932010 	ldr	r2, [r3, #16]
  106168:	e51b300c 	ldr	r3, [fp, #-12]
  10616c:	e5933000 	ldr	r3, [r3]
  106170:	e1520003 	cmp	r2, r3
  106174:	0a000027 	beq	106218 <netdev_low_level_set_netmask+0xfc>
    {
        ip_addr_copy(netdev->netmask, *netmask);
  106178:	e51b300c 	ldr	r3, [fp, #-12]
  10617c:	e5932000 	ldr	r2, [r3]
  106180:	e51b3008 	ldr	r3, [fp, #-8]
  106184:	e5832010 	str	r2, [r3, #16]

#ifdef RT_USING_SAL
        /* set network interface device flags to internet up */
        if (netdev_is_up(netdev) && netdev_is_link_up(netdev) &&
  106188:	e51b3008 	ldr	r3, [fp, #-8]
  10618c:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106190:	e2033001 	and	r3, r3, #1
  106194:	e6ef3073 	uxtb	r3, r3
  106198:	e3530000 	cmp	r3, #0
  10619c:	0a000014 	beq	1061f4 <netdev_low_level_set_netmask+0xd8>
  1061a0:	e51b3008 	ldr	r3, [fp, #-8]
  1061a4:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1061a8:	e1a03123 	lsr	r3, r3, #2
  1061ac:	e2033001 	and	r3, r3, #1
  1061b0:	e6ef3073 	uxtb	r3, r3
  1061b4:	e3530000 	cmp	r3, #0
  1061b8:	0a00000d 	beq	1061f4 <netdev_low_level_set_netmask+0xd8>
                !ip_addr_isany(&(netdev->ip_addr)))
  1061bc:	e51b3008 	ldr	r3, [fp, #-8]
  1061c0:	e283300c 	add	r3, r3, #12
        if (netdev_is_up(netdev) && netdev_is_link_up(netdev) &&
  1061c4:	e3530000 	cmp	r3, #0
  1061c8:	0a000009 	beq	1061f4 <netdev_low_level_set_netmask+0xd8>
                !ip_addr_isany(&(netdev->ip_addr)))
  1061cc:	e51b3008 	ldr	r3, [fp, #-8]
  1061d0:	e593300c 	ldr	r3, [r3, #12]
  1061d4:	e3530000 	cmp	r3, #0
  1061d8:	0a000005 	beq	1061f4 <netdev_low_level_set_netmask+0xd8>
        {
            // sal_check_netdev_internet_up(netdev);
            // check_netdev_internet_up_work(netdev);
            netdev->flags |= NETDEV_FLAG_INTERNET_UP;
  1061dc:	e51b3008 	ldr	r3, [fp, #-8]
  1061e0:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1061e4:	e3833080 	orr	r3, r3, #128	; 0x80
  1061e8:	e6ff2073 	uxth	r2, r3
  1061ec:	e51b3008 	ldr	r3, [fp, #-8]
  1061f0:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
        }
#endif /* RT_USING_SAL */

        /* execute netmask address change callback function */
        if (netdev->addr_callback)
  1061f4:	e51b3008 	ldr	r3, [fp, #-8]
  1061f8:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  1061fc:	e3530000 	cmp	r3, #0
  106200:	0a000004 	beq	106218 <netdev_low_level_set_netmask+0xfc>
        {
            netdev->addr_callback(netdev, NETDEV_CB_ADDR_NETMASK);
  106204:	e51b3008 	ldr	r3, [fp, #-8]
  106208:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10620c:	e3a01001 	mov	r1, #1
  106210:	e51b0008 	ldr	r0, [fp, #-8]
  106214:	e12fff33 	blx	r3
        }
    }
}
  106218:	e320f000 	nop	{0}
  10621c:	e24bd004 	sub	sp, fp, #4
  106220:	e8bd8800 	pop	{fp, pc}

00106224 <netdev_low_level_set_gw>:
 *
 * @param netdev the network interface device to change
 * @param gateway the new gateway address
 */
void netdev_low_level_set_gw(struct netdev *netdev, const ip_addr_t *gw)
{
  106224:	e92d4800 	push	{fp, lr}
  106228:	e28db004 	add	fp, sp, #4
  10622c:	e24dd008 	sub	sp, sp, #8
  106230:	e50b0008 	str	r0, [fp, #-8]
  106234:	e50b100c 	str	r1, [fp, #-12]
    RT_ASSERT(gw);
  106238:	e51b300c 	ldr	r3, [fp, #-12]
  10623c:	e3530000 	cmp	r3, #0
  106240:	1a000005 	bne	10625c <netdev_low_level_set_gw+0x38>
  106244:	e300229e 	movw	r2, #670	; 0x29e
  106248:	e30610f0 	movw	r1, #24816	; 0x60f0
  10624c:	e3401014 	movt	r1, #20
  106250:	e3050e5c 	movw	r0, #24156	; 0x5e5c
  106254:	e3400014 	movt	r0, #20
  106258:	ebfff4ce 	bl	103598 <rt_assert_handler>

    if (netdev && ip_addr_cmp(&(netdev->gw), gw) == 0)
  10625c:	e51b3008 	ldr	r3, [fp, #-8]
  106260:	e3530000 	cmp	r3, #0
  106264:	0a00002d 	beq	106320 <netdev_low_level_set_gw+0xfc>
  106268:	e51b3008 	ldr	r3, [fp, #-8]
  10626c:	e5932014 	ldr	r2, [r3, #20]
  106270:	e51b300c 	ldr	r3, [fp, #-12]
  106274:	e5933000 	ldr	r3, [r3]
  106278:	e1520003 	cmp	r2, r3
  10627c:	0a000027 	beq	106320 <netdev_low_level_set_gw+0xfc>
    {
        ip_addr_copy(netdev->gw, *gw);
  106280:	e51b300c 	ldr	r3, [fp, #-12]
  106284:	e5932000 	ldr	r2, [r3]
  106288:	e51b3008 	ldr	r3, [fp, #-8]
  10628c:	e5832014 	str	r2, [r3, #20]

#ifdef RT_USING_SAL
        /* set network interface device flags to internet up */
        if (netdev_is_up(netdev) && netdev_is_link_up(netdev) &&
  106290:	e51b3008 	ldr	r3, [fp, #-8]
  106294:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106298:	e2033001 	and	r3, r3, #1
  10629c:	e6ef3073 	uxtb	r3, r3
  1062a0:	e3530000 	cmp	r3, #0
  1062a4:	0a000014 	beq	1062fc <netdev_low_level_set_gw+0xd8>
  1062a8:	e51b3008 	ldr	r3, [fp, #-8]
  1062ac:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1062b0:	e1a03123 	lsr	r3, r3, #2
  1062b4:	e2033001 	and	r3, r3, #1
  1062b8:	e6ef3073 	uxtb	r3, r3
  1062bc:	e3530000 	cmp	r3, #0
  1062c0:	0a00000d 	beq	1062fc <netdev_low_level_set_gw+0xd8>
                !ip_addr_isany(&(netdev->ip_addr)))
  1062c4:	e51b3008 	ldr	r3, [fp, #-8]
  1062c8:	e283300c 	add	r3, r3, #12
        if (netdev_is_up(netdev) && netdev_is_link_up(netdev) &&
  1062cc:	e3530000 	cmp	r3, #0
  1062d0:	0a000009 	beq	1062fc <netdev_low_level_set_gw+0xd8>
                !ip_addr_isany(&(netdev->ip_addr)))
  1062d4:	e51b3008 	ldr	r3, [fp, #-8]
  1062d8:	e593300c 	ldr	r3, [r3, #12]
  1062dc:	e3530000 	cmp	r3, #0
  1062e0:	0a000005 	beq	1062fc <netdev_low_level_set_gw+0xd8>
        {
            // sal_check_netdev_internet_up(netdev);
            // check_netdev_internet_up_work(netdev);
            netdev->flags |= NETDEV_FLAG_INTERNET_UP;
  1062e4:	e51b3008 	ldr	r3, [fp, #-8]
  1062e8:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1062ec:	e3833080 	orr	r3, r3, #128	; 0x80
  1062f0:	e6ff2073 	uxth	r2, r3
  1062f4:	e51b3008 	ldr	r3, [fp, #-8]
  1062f8:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
        }
#endif /* RT_USING_SAL */

        /* execute gateway address change callback function */
        if (netdev->addr_callback)
  1062fc:	e51b3008 	ldr	r3, [fp, #-8]
  106300:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  106304:	e3530000 	cmp	r3, #0
  106308:	0a000004 	beq	106320 <netdev_low_level_set_gw+0xfc>
        {
            netdev->addr_callback(netdev, NETDEV_CB_ADDR_GATEWAY);
  10630c:	e51b3008 	ldr	r3, [fp, #-8]
  106310:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  106314:	e3a01002 	mov	r1, #2
  106318:	e51b0008 	ldr	r0, [fp, #-8]
  10631c:	e12fff33 	blx	r3
        }
    }
}
  106320:	e320f000 	nop	{0}
  106324:	e24bd004 	sub	sp, fp, #4
  106328:	e8bd8800 	pop	{fp, pc}

0010632c <netdev_low_level_set_dns_server>:
 * @param netdev the network interface device to change
 * @param dns_server the new DNS server address
 *
 */
void netdev_low_level_set_dns_server(struct netdev *netdev, uint8_t dns_num, const ip_addr_t *dns_server)
{
  10632c:	e92d4800 	push	{fp, lr}
  106330:	e28db004 	add	fp, sp, #4
  106334:	e24dd018 	sub	sp, sp, #24
  106338:	e50b0010 	str	r0, [fp, #-16]
  10633c:	e1a03001 	mov	r3, r1
  106340:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  106344:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    int index;

    RT_ASSERT(dns_server);
  106348:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10634c:	e3530000 	cmp	r3, #0
  106350:	1a000005 	bne	10636c <netdev_low_level_set_dns_server+0x40>
  106354:	e30022c3 	movw	r2, #707	; 0x2c3
  106358:	e3061108 	movw	r1, #24840	; 0x6108
  10635c:	e3401014 	movt	r1, #20
  106360:	e3050f08 	movw	r0, #24328	; 0x5f08
  106364:	e3400014 	movt	r0, #20
  106368:	ebfff48a 	bl	103598 <rt_assert_handler>

    if (netdev == RT_NULL)
  10636c:	e51b3010 	ldr	r3, [fp, #-16]
  106370:	e3530000 	cmp	r3, #0
  106374:	0a000023 	beq	106408 <netdev_low_level_set_dns_server+0xdc>
    {
        return;
    }
    /* check DNS servers is exist */
    for (index = 0; index < NETDEV_DNS_SERVERS_NUM; index++)
  106378:	e3a03000 	mov	r3, #0
  10637c:	e50b3008 	str	r3, [fp, #-8]
  106380:	ea00000a 	b	1063b0 <netdev_low_level_set_dns_server+0x84>
    {
        if (ip_addr_cmp(&(netdev->dns_servers[index]), dns_server))
  106384:	e51b3010 	ldr	r3, [fp, #-16]
  106388:	e51b2008 	ldr	r2, [fp, #-8]
  10638c:	e2822006 	add	r2, r2, #6
  106390:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  106394:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  106398:	e5933000 	ldr	r3, [r3]
  10639c:	e1520003 	cmp	r2, r3
  1063a0:	0a00001a 	beq	106410 <netdev_low_level_set_dns_server+0xe4>
    for (index = 0; index < NETDEV_DNS_SERVERS_NUM; index++)
  1063a4:	e51b3008 	ldr	r3, [fp, #-8]
  1063a8:	e2833001 	add	r3, r3, #1
  1063ac:	e50b3008 	str	r3, [fp, #-8]
  1063b0:	e51b3008 	ldr	r3, [fp, #-8]
  1063b4:	e3530001 	cmp	r3, #1
  1063b8:	9afffff1 	bls	106384 <netdev_low_level_set_dns_server+0x58>
        {
            return;
        }
    }

    if (dns_num < NETDEV_DNS_SERVERS_NUM)
  1063bc:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  1063c0:	e3530001 	cmp	r3, #1
  1063c4:	8a000012 	bhi	106414 <netdev_low_level_set_dns_server+0xe8>
    {
        ip_addr_copy(netdev->dns_servers[dns_num], *dns_server);
  1063c8:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  1063cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1063d0:	e5931000 	ldr	r1, [r3]
  1063d4:	e51b3010 	ldr	r3, [fp, #-16]
  1063d8:	e2822006 	add	r2, r2, #6
  1063dc:	e7831102 	str	r1, [r3, r2, lsl #2]

        /* execute DNS servers address change callback function */
        if (netdev->addr_callback)
  1063e0:	e51b3010 	ldr	r3, [fp, #-16]
  1063e4:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  1063e8:	e3530000 	cmp	r3, #0
  1063ec:	0a000008 	beq	106414 <netdev_low_level_set_dns_server+0xe8>
        {
            netdev->addr_callback(netdev, NETDEV_CB_ADDR_DNS_SERVER);
  1063f0:	e51b3010 	ldr	r3, [fp, #-16]
  1063f4:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  1063f8:	e3a01003 	mov	r1, #3
  1063fc:	e51b0010 	ldr	r0, [fp, #-16]
  106400:	e12fff33 	blx	r3
  106404:	ea000002 	b	106414 <netdev_low_level_set_dns_server+0xe8>
        return;
  106408:	e320f000 	nop	{0}
  10640c:	ea000000 	b	106414 <netdev_low_level_set_dns_server+0xe8>
            return;
  106410:	e320f000 	nop	{0}
        }
    }
}
  106414:	e24bd004 	sub	sp, fp, #4
  106418:	e8bd8800 	pop	{fp, pc}

0010641c <netdev_low_level_set_status>:
 *
 * @param netdev the network interface device to change
 * @param is_up the new status
 */
void netdev_low_level_set_status(struct netdev *netdev, rt_bool_t is_up)
{
  10641c:	e92d4800 	push	{fp, lr}
  106420:	e28db004 	add	fp, sp, #4
  106424:	e24dd008 	sub	sp, sp, #8
  106428:	e50b0008 	str	r0, [fp, #-8]
  10642c:	e50b100c 	str	r1, [fp, #-12]
    if (netdev && netdev_is_up(netdev) != is_up)
  106430:	e51b3008 	ldr	r3, [fp, #-8]
  106434:	e3530000 	cmp	r3, #0
  106438:	0a000024 	beq	1064d0 <netdev_low_level_set_status+0xb4>
  10643c:	e51b3008 	ldr	r3, [fp, #-8]
  106440:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106444:	e2033001 	and	r3, r3, #1
  106448:	e51b200c 	ldr	r2, [fp, #-12]
  10644c:	e1520003 	cmp	r2, r3
  106450:	0a00001e 	beq	1064d0 <netdev_low_level_set_status+0xb4>
    {
        if (is_up)
  106454:	e51b300c 	ldr	r3, [fp, #-12]
  106458:	e3530000 	cmp	r3, #0
  10645c:	0a000006 	beq	10647c <netdev_low_level_set_status+0x60>
        {
            netdev->flags |= NETDEV_FLAG_UP;
  106460:	e51b3008 	ldr	r3, [fp, #-8]
  106464:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106468:	e3833001 	orr	r3, r3, #1
  10646c:	e6ff2073 	uxth	r2, r3
  106470:	e51b3008 	ldr	r3, [fp, #-8]
  106474:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
  106478:	ea000005 	b	106494 <netdev_low_level_set_status+0x78>
        }
        else
        {
            netdev->flags &= ~NETDEV_FLAG_UP;
  10647c:	e51b3008 	ldr	r3, [fp, #-8]
  106480:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106484:	e3c33001 	bic	r3, r3, #1
  106488:	e6ff2073 	uxth	r2, r3
  10648c:	e51b3008 	ldr	r3, [fp, #-8]
  106490:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
            netdev_auto_change_default(netdev);
#endif /* NETDEV_USING_AUTO_DEFAULT */
        }

        /* execute  network interface device status change callback function */
        if (netdev->status_callback)
  106494:	e51b3008 	ldr	r3, [fp, #-8]
  106498:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  10649c:	e3530000 	cmp	r3, #0
  1064a0:	0a00000a 	beq	1064d0 <netdev_low_level_set_status+0xb4>
        {
            netdev->status_callback(netdev, is_up ? NETDEV_CB_STATUS_UP : NETDEV_CB_STATUS_DOWN);
  1064a4:	e51b3008 	ldr	r3, [fp, #-8]
  1064a8:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  1064ac:	e51b200c 	ldr	r2, [fp, #-12]
  1064b0:	e3520000 	cmp	r2, #0
  1064b4:	0a000001 	beq	1064c0 <netdev_low_level_set_status+0xa4>
  1064b8:	e3a02004 	mov	r2, #4
  1064bc:	ea000000 	b	1064c4 <netdev_low_level_set_status+0xa8>
  1064c0:	e3a02005 	mov	r2, #5
  1064c4:	e1a01002 	mov	r1, r2
  1064c8:	e51b0008 	ldr	r0, [fp, #-8]
  1064cc:	e12fff33 	blx	r3
        }
    }
}
  1064d0:	e320f000 	nop	{0}
  1064d4:	e24bd004 	sub	sp, fp, #4
  1064d8:	e8bd8800 	pop	{fp, pc}

001064dc <netdev_low_level_set_link_status>:
 *
 * @param netdev the network interface device to change
 * @param is_up the new link status
 */
void netdev_low_level_set_link_status(struct netdev *netdev, rt_bool_t is_up)
{
  1064dc:	e92d4800 	push	{fp, lr}
  1064e0:	e28db004 	add	fp, sp, #4
  1064e4:	e24dd008 	sub	sp, sp, #8
  1064e8:	e50b0008 	str	r0, [fp, #-8]
  1064ec:	e50b100c 	str	r1, [fp, #-12]
    if (netdev && netdev_is_link_up(netdev) != is_up)
  1064f0:	e51b3008 	ldr	r3, [fp, #-8]
  1064f4:	e3530000 	cmp	r3, #0
  1064f8:	0a00003f 	beq	1065fc <netdev_low_level_set_link_status+0x120>
  1064fc:	e51b3008 	ldr	r3, [fp, #-8]
  106500:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106504:	e1a03123 	lsr	r3, r3, #2
  106508:	e2033001 	and	r3, r3, #1
  10650c:	e51b200c 	ldr	r2, [fp, #-12]
  106510:	e1520003 	cmp	r2, r3
  106514:	0a000038 	beq	1065fc <netdev_low_level_set_link_status+0x120>
    {
        if (is_up)
  106518:	e51b300c 	ldr	r3, [fp, #-12]
  10651c:	e3530000 	cmp	r3, #0
  106520:	0a00001a 	beq	106590 <netdev_low_level_set_link_status+0xb4>
        {
            netdev->flags |= NETDEV_FLAG_LINK_UP;
  106524:	e51b3008 	ldr	r3, [fp, #-8]
  106528:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  10652c:	e3833004 	orr	r3, r3, #4
  106530:	e6ff2073 	uxth	r2, r3
  106534:	e51b3008 	ldr	r3, [fp, #-8]
  106538:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a

#ifdef RT_USING_SAL
            /* set network interface device flags to internet up */
            if (netdev_is_up(netdev) && !ip_addr_isany(&(netdev->ip_addr)))
  10653c:	e51b3008 	ldr	r3, [fp, #-8]
  106540:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106544:	e2033001 	and	r3, r3, #1
  106548:	e6ef3073 	uxtb	r3, r3
  10654c:	e3530000 	cmp	r3, #0
  106550:	0a00001a 	beq	1065c0 <netdev_low_level_set_link_status+0xe4>
  106554:	e51b3008 	ldr	r3, [fp, #-8]
  106558:	e283300c 	add	r3, r3, #12
  10655c:	e3530000 	cmp	r3, #0
  106560:	0a000016 	beq	1065c0 <netdev_low_level_set_link_status+0xe4>
  106564:	e51b3008 	ldr	r3, [fp, #-8]
  106568:	e593300c 	ldr	r3, [r3, #12]
  10656c:	e3530000 	cmp	r3, #0
  106570:	0a000012 	beq	1065c0 <netdev_low_level_set_link_status+0xe4>
            {
                // sal_check_netdev_internet_up(netdev);
                // check_netdev_internet_up_work(netdev);
                netdev->flags |= NETDEV_FLAG_INTERNET_UP;
  106574:	e51b3008 	ldr	r3, [fp, #-8]
  106578:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  10657c:	e3833080 	orr	r3, r3, #128	; 0x80
  106580:	e6ff2073 	uxth	r2, r3
  106584:	e51b3008 	ldr	r3, [fp, #-8]
  106588:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
  10658c:	ea00000b 	b	1065c0 <netdev_low_level_set_link_status+0xe4>
            }
#endif /* RT_USING_SAL */
        }
        else
        {
            netdev->flags &= ~NETDEV_FLAG_LINK_UP;
  106590:	e51b3008 	ldr	r3, [fp, #-8]
  106594:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106598:	e3c33004 	bic	r3, r3, #4
  10659c:	e6ff2073 	uxth	r2, r3
  1065a0:	e51b3008 	ldr	r3, [fp, #-8]
  1065a4:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a

            /* set network interface device flags to internet down */
            netdev->flags &= ~NETDEV_FLAG_INTERNET_UP;
  1065a8:	e51b3008 	ldr	r3, [fp, #-8]
  1065ac:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1065b0:	e3c33080 	bic	r3, r3, #128	; 0x80
  1065b4:	e6ff2073 	uxth	r2, r3
  1065b8:	e51b3008 	ldr	r3, [fp, #-8]
  1065bc:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
            /* change to the first link_up network interface device automatically */
            netdev_auto_change_default(netdev);
#endif /* NETDEV_USING_AUTO_DEFAULT */

        /* execute link status change callback function */
        if (netdev->status_callback)
  1065c0:	e51b3008 	ldr	r3, [fp, #-8]
  1065c4:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  1065c8:	e3530000 	cmp	r3, #0
  1065cc:	0a00000a 	beq	1065fc <netdev_low_level_set_link_status+0x120>
        {
            netdev->status_callback(netdev, is_up ? NETDEV_CB_STATUS_LINK_UP : NETDEV_CB_STATUS_LINK_DOWN);
  1065d0:	e51b3008 	ldr	r3, [fp, #-8]
  1065d4:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  1065d8:	e51b200c 	ldr	r2, [fp, #-12]
  1065dc:	e3520000 	cmp	r2, #0
  1065e0:	0a000001 	beq	1065ec <netdev_low_level_set_link_status+0x110>
  1065e4:	e3a02006 	mov	r2, #6
  1065e8:	ea000000 	b	1065f0 <netdev_low_level_set_link_status+0x114>
  1065ec:	e3a02007 	mov	r2, #7
  1065f0:	e1a01002 	mov	r1, r2
  1065f4:	e51b0008 	ldr	r0, [fp, #-8]
  1065f8:	e12fff33 	blx	r3
        }
    }
}
  1065fc:	e320f000 	nop	{0}
  106600:	e24bd004 	sub	sp, fp, #4
  106604:	e8bd8800 	pop	{fp, pc}

00106608 <netdev_low_level_set_dhcp_status>:
 *
 * @param netdev the network interface device to change
 * @param is_up the new DHCP status
 */
void netdev_low_level_set_dhcp_status(struct netdev *netdev, rt_bool_t is_enable)
{
  106608:	e92d4800 	push	{fp, lr}
  10660c:	e28db004 	add	fp, sp, #4
  106610:	e24dd008 	sub	sp, sp, #8
  106614:	e50b0008 	str	r0, [fp, #-8]
  106618:	e50b100c 	str	r1, [fp, #-12]
    if (netdev && netdev_is_dhcp_enabled(netdev) != is_enable)
  10661c:	e51b3008 	ldr	r3, [fp, #-8]
  106620:	e3530000 	cmp	r3, #0
  106624:	0a000025 	beq	1066c0 <netdev_low_level_set_dhcp_status+0xb8>
  106628:	e51b3008 	ldr	r3, [fp, #-8]
  10662c:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106630:	e1a03423 	lsr	r3, r3, #8
  106634:	e2033001 	and	r3, r3, #1
  106638:	e51b200c 	ldr	r2, [fp, #-12]
  10663c:	e1520003 	cmp	r2, r3
  106640:	0a00001e 	beq	1066c0 <netdev_low_level_set_dhcp_status+0xb8>
    {
        if (is_enable)
  106644:	e51b300c 	ldr	r3, [fp, #-12]
  106648:	e3530000 	cmp	r3, #0
  10664c:	0a000006 	beq	10666c <netdev_low_level_set_dhcp_status+0x64>
        {
            netdev->flags |= NETDEV_FLAG_DHCP;
  106650:	e51b3008 	ldr	r3, [fp, #-8]
  106654:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106658:	e3833c01 	orr	r3, r3, #256	; 0x100
  10665c:	e6ff2073 	uxth	r2, r3
  106660:	e51b3008 	ldr	r3, [fp, #-8]
  106664:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
  106668:	ea000005 	b	106684 <netdev_low_level_set_dhcp_status+0x7c>
        }
        else
        {
            netdev->flags &= ~NETDEV_FLAG_DHCP;
  10666c:	e51b3008 	ldr	r3, [fp, #-8]
  106670:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  106674:	e3c33c01 	bic	r3, r3, #256	; 0x100
  106678:	e6ff2073 	uxth	r2, r3
  10667c:	e51b3008 	ldr	r3, [fp, #-8]
  106680:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
        }

        /* execute DHCP status change callback function */
        if (netdev->status_callback)
  106684:	e51b3008 	ldr	r3, [fp, #-8]
  106688:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  10668c:	e3530000 	cmp	r3, #0
  106690:	0a00000a 	beq	1066c0 <netdev_low_level_set_dhcp_status+0xb8>
        {
            netdev->status_callback(netdev, is_enable ? NETDEV_CB_STATUS_DHCP_ENABLE : NETDEV_CB_STATUS_DHCP_DISABLE);
  106694:	e51b3008 	ldr	r3, [fp, #-8]
  106698:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  10669c:	e51b200c 	ldr	r2, [fp, #-12]
  1066a0:	e3520000 	cmp	r2, #0
  1066a4:	0a000001 	beq	1066b0 <netdev_low_level_set_dhcp_status+0xa8>
  1066a8:	e3a0200a 	mov	r2, #10
  1066ac:	ea000000 	b	1066b4 <netdev_low_level_set_dhcp_status+0xac>
  1066b0:	e3a0200b 	mov	r2, #11
  1066b4:	e1a01002 	mov	r1, r2
  1066b8:	e51b0008 	ldr	r0, [fp, #-8]
  1066bc:	e12fff33 	blx	r3
        }
    }
}
  1066c0:	e320f000 	nop	{0}
  1066c4:	e24bd004 	sub	sp, fp, #4
  1066c8:	e8bd8800 	pop	{fp, pc}

001066cc <netdev_ip4addr_aton>:
 * @param cp IP address in ascii representation (e.g. "127.0.0.1")
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int netdev_ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
  1066cc:	e92d4800 	push	{fp, lr}
  1066d0:	e28db004 	add	fp, sp, #4
  1066d4:	e24dd028 	sub	sp, sp, #40	; 0x28
  1066d8:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  1066dc:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
    uint32_t val;
    uint8_t base;
    char c;
    uint32_t parts[4];
    uint32_t *pp = parts;
  1066e0:	e24b3020 	sub	r3, fp, #32
  1066e4:	e50b3010 	str	r3, [fp, #-16]

    c = *cp;
  1066e8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1066ec:	e5d33000 	ldrb	r3, [r3]
  1066f0:	e54b300a 	strb	r3, [fp, #-10]
        /*
         * Collect number up to ``.''.
         * Values are specified as for C:
         * 0x=hex, 0=octal, 1-9=decimal.
         */
        if (!isdigit(c))
  1066f4:	e55b300a 	ldrb	r3, [fp, #-10]
  1066f8:	e353002f 	cmp	r3, #47	; 0x2f
  1066fc:	9a000002 	bls	10670c <netdev_ip4addr_aton+0x40>
  106700:	e55b300a 	ldrb	r3, [fp, #-10]
  106704:	e3530039 	cmp	r3, #57	; 0x39
  106708:	9a000001 	bls	106714 <netdev_ip4addr_aton+0x48>
        {
            return 0;
  10670c:	e3a03000 	mov	r3, #0
  106710:	ea0000f7 	b	106af4 <netdev_ip4addr_aton+0x428>
        }
        val = 0;
  106714:	e3a03000 	mov	r3, #0
  106718:	e50b3008 	str	r3, [fp, #-8]
        base = 10;
  10671c:	e3a0300a 	mov	r3, #10
  106720:	e54b3009 	strb	r3, [fp, #-9]
        if (c == '0')
  106724:	e55b300a 	ldrb	r3, [fp, #-10]
  106728:	e3530030 	cmp	r3, #48	; 0x30
  10672c:	1a000016 	bne	10678c <netdev_ip4addr_aton+0xc0>
        {
            c = *++cp;
  106730:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106734:	e2833001 	add	r3, r3, #1
  106738:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  10673c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106740:	e5d33000 	ldrb	r3, [r3]
  106744:	e54b300a 	strb	r3, [fp, #-10]
            if (c == 'x' || c == 'X')
  106748:	e55b300a 	ldrb	r3, [fp, #-10]
  10674c:	e3530078 	cmp	r3, #120	; 0x78
  106750:	0a000002 	beq	106760 <netdev_ip4addr_aton+0x94>
  106754:	e55b300a 	ldrb	r3, [fp, #-10]
  106758:	e3530058 	cmp	r3, #88	; 0x58
  10675c:	1a000008 	bne	106784 <netdev_ip4addr_aton+0xb8>
            {
                base = 16;
  106760:	e3a03010 	mov	r3, #16
  106764:	e54b3009 	strb	r3, [fp, #-9]
                c = *++cp;
  106768:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10676c:	e2833001 	add	r3, r3, #1
  106770:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  106774:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106778:	e5d33000 	ldrb	r3, [r3]
  10677c:	e54b300a 	strb	r3, [fp, #-10]
  106780:	ea000001 	b	10678c <netdev_ip4addr_aton+0xc0>
            }
            else
            {
                base = 8;
  106784:	e3a03008 	mov	r3, #8
  106788:	e54b3009 	strb	r3, [fp, #-9]
            }
        }
        for (;;)
        {
            if (isdigit(c))
  10678c:	e55b300a 	ldrb	r3, [fp, #-10]
  106790:	e353002f 	cmp	r3, #47	; 0x2f
  106794:	9a000010 	bls	1067dc <netdev_ip4addr_aton+0x110>
  106798:	e55b300a 	ldrb	r3, [fp, #-10]
  10679c:	e3530039 	cmp	r3, #57	; 0x39
  1067a0:	8a00000d 	bhi	1067dc <netdev_ip4addr_aton+0x110>
            {
                val = (val * base) + (uint32_t) (c - '0');
  1067a4:	e55b3009 	ldrb	r3, [fp, #-9]
  1067a8:	e51b2008 	ldr	r2, [fp, #-8]
  1067ac:	e0020392 	mul	r2, r2, r3
  1067b0:	e55b300a 	ldrb	r3, [fp, #-10]
  1067b4:	e0823003 	add	r3, r2, r3
  1067b8:	e2433030 	sub	r3, r3, #48	; 0x30
  1067bc:	e50b3008 	str	r3, [fp, #-8]
                c = *++cp;
  1067c0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1067c4:	e2833001 	add	r3, r3, #1
  1067c8:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  1067cc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1067d0:	e5d33000 	ldrb	r3, [r3]
  1067d4:	e54b300a 	strb	r3, [fp, #-10]
  1067d8:	ea00002a 	b	106888 <netdev_ip4addr_aton+0x1bc>
            }
            else if (base == 16 && isxdigit(c))
  1067dc:	e55b3009 	ldrb	r3, [fp, #-9]
  1067e0:	e3530010 	cmp	r3, #16
  1067e4:	1a000028 	bne	10688c <netdev_ip4addr_aton+0x1c0>
  1067e8:	e55b300a 	ldrb	r3, [fp, #-10]
  1067ec:	e353002f 	cmp	r3, #47	; 0x2f
  1067f0:	9a000002 	bls	106800 <netdev_ip4addr_aton+0x134>
  1067f4:	e55b300a 	ldrb	r3, [fp, #-10]
  1067f8:	e3530039 	cmp	r3, #57	; 0x39
  1067fc:	9a00000b 	bls	106830 <netdev_ip4addr_aton+0x164>
  106800:	e55b300a 	ldrb	r3, [fp, #-10]
  106804:	e3530060 	cmp	r3, #96	; 0x60
  106808:	9a000002 	bls	106818 <netdev_ip4addr_aton+0x14c>
  10680c:	e55b300a 	ldrb	r3, [fp, #-10]
  106810:	e3530066 	cmp	r3, #102	; 0x66
  106814:	9a000005 	bls	106830 <netdev_ip4addr_aton+0x164>
  106818:	e55b300a 	ldrb	r3, [fp, #-10]
  10681c:	e3530040 	cmp	r3, #64	; 0x40
  106820:	9a000019 	bls	10688c <netdev_ip4addr_aton+0x1c0>
  106824:	e55b300a 	ldrb	r3, [fp, #-10]
  106828:	e3530046 	cmp	r3, #70	; 0x46
  10682c:	8a000016 	bhi	10688c <netdev_ip4addr_aton+0x1c0>
            {
                val = (val << 4) | (uint32_t) (c + 10 - (islower(c) ? 'a' : 'A'));
  106830:	e51b3008 	ldr	r3, [fp, #-8]
  106834:	e1a03203 	lsl	r3, r3, #4
  106838:	e55b200a 	ldrb	r2, [fp, #-10]
  10683c:	e282100a 	add	r1, r2, #10
  106840:	e55b200a 	ldrb	r2, [fp, #-10]
  106844:	e3520060 	cmp	r2, #96	; 0x60
  106848:	9a000004 	bls	106860 <netdev_ip4addr_aton+0x194>
  10684c:	e55b200a 	ldrb	r2, [fp, #-10]
  106850:	e352007a 	cmp	r2, #122	; 0x7a
  106854:	8a000001 	bhi	106860 <netdev_ip4addr_aton+0x194>
  106858:	e3a02061 	mov	r2, #97	; 0x61
  10685c:	ea000000 	b	106864 <netdev_ip4addr_aton+0x198>
  106860:	e3a02041 	mov	r2, #65	; 0x41
  106864:	e0412002 	sub	r2, r1, r2
  106868:	e1833002 	orr	r3, r3, r2
  10686c:	e50b3008 	str	r3, [fp, #-8]
                c = *++cp;
  106870:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106874:	e2833001 	add	r3, r3, #1
  106878:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  10687c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106880:	e5d33000 	ldrb	r3, [r3]
  106884:	e54b300a 	strb	r3, [fp, #-10]
            if (isdigit(c))
  106888:	eaffffbf 	b	10678c <netdev_ip4addr_aton+0xc0>
            else
            {
                break;
            }
        }
        if (c == '.')
  10688c:	e55b300a 	ldrb	r3, [fp, #-10]
  106890:	e353002e 	cmp	r3, #46	; 0x2e
  106894:	1a000012 	bne	1068e4 <netdev_ip4addr_aton+0x218>
             * Internet format:
             *  a.b.c.d
             *  a.b.c   (with c treated as 16 bits)
             *  a.b (with b treated as 24 bits)
             */
            if (pp >= parts + 3)
  106898:	e24b3020 	sub	r3, fp, #32
  10689c:	e283300c 	add	r3, r3, #12
  1068a0:	e51b2010 	ldr	r2, [fp, #-16]
  1068a4:	e1520003 	cmp	r2, r3
  1068a8:	3a000001 	bcc	1068b4 <netdev_ip4addr_aton+0x1e8>
            {
                return 0;
  1068ac:	e3a03000 	mov	r3, #0
  1068b0:	ea00008f 	b	106af4 <netdev_ip4addr_aton+0x428>
            }
            *pp++ = val;
  1068b4:	e51b3010 	ldr	r3, [fp, #-16]
  1068b8:	e2832004 	add	r2, r3, #4
  1068bc:	e50b2010 	str	r2, [fp, #-16]
  1068c0:	e51b2008 	ldr	r2, [fp, #-8]
  1068c4:	e5832000 	str	r2, [r3]
            c = *++cp;
  1068c8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1068cc:	e2833001 	add	r3, r3, #1
  1068d0:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  1068d4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1068d8:	e5d33000 	ldrb	r3, [r3]
  1068dc:	e54b300a 	strb	r3, [fp, #-10]
        if (!isdigit(c))
  1068e0:	eaffff83 	b	1066f4 <netdev_ip4addr_aton+0x28>
        }
        else
        {
            break;
  1068e4:	e320f000 	nop	{0}
        }
    }
    /*
     * Check for trailing characters.
     */
    if (c != '\0' && !isspace(c))
  1068e8:	e55b300a 	ldrb	r3, [fp, #-10]
  1068ec:	e3530000 	cmp	r3, #0
  1068f0:	0a000013 	beq	106944 <netdev_ip4addr_aton+0x278>
  1068f4:	e55b300a 	ldrb	r3, [fp, #-10]
  1068f8:	e3530020 	cmp	r3, #32
  1068fc:	0a000010 	beq	106944 <netdev_ip4addr_aton+0x278>
  106900:	e55b300a 	ldrb	r3, [fp, #-10]
  106904:	e353000c 	cmp	r3, #12
  106908:	0a00000d 	beq	106944 <netdev_ip4addr_aton+0x278>
  10690c:	e55b300a 	ldrb	r3, [fp, #-10]
  106910:	e353000a 	cmp	r3, #10
  106914:	0a00000a 	beq	106944 <netdev_ip4addr_aton+0x278>
  106918:	e55b300a 	ldrb	r3, [fp, #-10]
  10691c:	e353000d 	cmp	r3, #13
  106920:	0a000007 	beq	106944 <netdev_ip4addr_aton+0x278>
  106924:	e55b300a 	ldrb	r3, [fp, #-10]
  106928:	e3530009 	cmp	r3, #9
  10692c:	0a000004 	beq	106944 <netdev_ip4addr_aton+0x278>
  106930:	e55b300a 	ldrb	r3, [fp, #-10]
  106934:	e353000b 	cmp	r3, #11
  106938:	0a000001 	beq	106944 <netdev_ip4addr_aton+0x278>
    {
        return 0;
  10693c:	e3a03000 	mov	r3, #0
  106940:	ea00006b 	b	106af4 <netdev_ip4addr_aton+0x428>
    }
    /*
     * Concoct the address according to
     * the number of parts specified.
     */
    switch (pp - parts + 1)
  106944:	e51b2010 	ldr	r2, [fp, #-16]
  106948:	e24b3020 	sub	r3, fp, #32
  10694c:	e0423003 	sub	r3, r2, r3
  106950:	e1a03143 	asr	r3, r3, #2
  106954:	e2833001 	add	r3, r3, #1
  106958:	e3530004 	cmp	r3, #4
  10695c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  106960:	ea000048 	b	106a88 <netdev_ip4addr_aton+0x3bc>
  106964:	00106978 	.word	0x00106978
  106968:	00106aa4 	.word	0x00106aa4
  10696c:	00106980 	.word	0x00106980
  106970:	001069c0 	.word	0x001069c0
  106974:	00106a18 	.word	0x00106a18
    {

    case 0:
        return 0; /* initial nondigit */
  106978:	e3a03000 	mov	r3, #0
  10697c:	ea00005c 	b	106af4 <netdev_ip4addr_aton+0x428>

    case 1: /* a -- 32 bits */
        break;

    case 2: /* a.b -- 8.24 bits */
        if (val > 0xffffffUL)
  106980:	e51b3008 	ldr	r3, [fp, #-8]
  106984:	e3530401 	cmp	r3, #16777216	; 0x1000000
  106988:	3a000001 	bcc	106994 <netdev_ip4addr_aton+0x2c8>
        {
            return 0;
  10698c:	e3a03000 	mov	r3, #0
  106990:	ea000057 	b	106af4 <netdev_ip4addr_aton+0x428>
        }
        if (parts[0] > 0xff)
  106994:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  106998:	e35300ff 	cmp	r3, #255	; 0xff
  10699c:	9a000001 	bls	1069a8 <netdev_ip4addr_aton+0x2dc>
        {
            return 0;
  1069a0:	e3a03000 	mov	r3, #0
  1069a4:	ea000052 	b	106af4 <netdev_ip4addr_aton+0x428>
        }
        val |= parts[0] << 24;
  1069a8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1069ac:	e1a03c03 	lsl	r3, r3, #24
  1069b0:	e51b2008 	ldr	r2, [fp, #-8]
  1069b4:	e1823003 	orr	r3, r2, r3
  1069b8:	e50b3008 	str	r3, [fp, #-8]
        break;
  1069bc:	ea000039 	b	106aa8 <netdev_ip4addr_aton+0x3dc>

    case 3: /* a.b.c -- 8.8.16 bits */
        if (val > 0xffff)
  1069c0:	e51b3008 	ldr	r3, [fp, #-8]
  1069c4:	e3530801 	cmp	r3, #65536	; 0x10000
  1069c8:	3a000001 	bcc	1069d4 <netdev_ip4addr_aton+0x308>
        {
            return 0;
  1069cc:	e3a03000 	mov	r3, #0
  1069d0:	ea000047 	b	106af4 <netdev_ip4addr_aton+0x428>
        }
        if ((parts[0] > 0xff) || (parts[1] > 0xff))
  1069d4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1069d8:	e35300ff 	cmp	r3, #255	; 0xff
  1069dc:	8a000002 	bhi	1069ec <netdev_ip4addr_aton+0x320>
  1069e0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1069e4:	e35300ff 	cmp	r3, #255	; 0xff
  1069e8:	9a000001 	bls	1069f4 <netdev_ip4addr_aton+0x328>
        {
            return 0;
  1069ec:	e3a03000 	mov	r3, #0
  1069f0:	ea00003f 	b	106af4 <netdev_ip4addr_aton+0x428>
        }
        val |= (parts[0] << 24) | (parts[1] << 16);
  1069f4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1069f8:	e1a02c03 	lsl	r2, r3, #24
  1069fc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  106a00:	e1a03803 	lsl	r3, r3, #16
  106a04:	e1823003 	orr	r3, r2, r3
  106a08:	e51b2008 	ldr	r2, [fp, #-8]
  106a0c:	e1823003 	orr	r3, r2, r3
  106a10:	e50b3008 	str	r3, [fp, #-8]
        break;
  106a14:	ea000023 	b	106aa8 <netdev_ip4addr_aton+0x3dc>

    case 4: /* a.b.c.d -- 8.8.8.8 bits */
        if (val > 0xff)
  106a18:	e51b3008 	ldr	r3, [fp, #-8]
  106a1c:	e35300ff 	cmp	r3, #255	; 0xff
  106a20:	9a000001 	bls	106a2c <netdev_ip4addr_aton+0x360>
        {
            return 0;
  106a24:	e3a03000 	mov	r3, #0
  106a28:	ea000031 	b	106af4 <netdev_ip4addr_aton+0x428>
        }
        if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff))
  106a2c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  106a30:	e35300ff 	cmp	r3, #255	; 0xff
  106a34:	8a000005 	bhi	106a50 <netdev_ip4addr_aton+0x384>
  106a38:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  106a3c:	e35300ff 	cmp	r3, #255	; 0xff
  106a40:	8a000002 	bhi	106a50 <netdev_ip4addr_aton+0x384>
  106a44:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  106a48:	e35300ff 	cmp	r3, #255	; 0xff
  106a4c:	9a000001 	bls	106a58 <netdev_ip4addr_aton+0x38c>
        {
            return 0;
  106a50:	e3a03000 	mov	r3, #0
  106a54:	ea000026 	b	106af4 <netdev_ip4addr_aton+0x428>
        }
        val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
  106a58:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  106a5c:	e1a02c03 	lsl	r2, r3, #24
  106a60:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  106a64:	e1a03803 	lsl	r3, r3, #16
  106a68:	e1822003 	orr	r2, r2, r3
  106a6c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  106a70:	e1a03403 	lsl	r3, r3, #8
  106a74:	e1823003 	orr	r3, r2, r3
  106a78:	e51b2008 	ldr	r2, [fp, #-8]
  106a7c:	e1823003 	orr	r3, r2, r3
  106a80:	e50b3008 	str	r3, [fp, #-8]
        break;
  106a84:	ea000007 	b	106aa8 <netdev_ip4addr_aton+0x3dc>
    default:
        RT_ASSERT(0);
  106a88:	e3a020a7 	mov	r2, #167	; 0xa7
  106a8c:	e306112c 	movw	r1, #24876	; 0x612c
  106a90:	e3401014 	movt	r1, #20
  106a94:	e3060128 	movw	r0, #24872	; 0x6128
  106a98:	e3400014 	movt	r0, #20
  106a9c:	ebfff2bd 	bl	103598 <rt_assert_handler>
        break;
  106aa0:	ea000000 	b	106aa8 <netdev_ip4addr_aton+0x3dc>
        break;
  106aa4:	e320f000 	nop	{0}
    }
    if (addr)
  106aa8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  106aac:	e3530000 	cmp	r3, #0
  106ab0:	0a00000e 	beq	106af0 <netdev_ip4addr_aton+0x424>
    {
        ip4_addr_set_u32(addr, htonl(val));
  106ab4:	e51b3008 	ldr	r3, [fp, #-8]
  106ab8:	e1a02c03 	lsl	r2, r3, #24
  106abc:	e51b3008 	ldr	r3, [fp, #-8]
  106ac0:	e1a03403 	lsl	r3, r3, #8
  106ac4:	e20338ff 	and	r3, r3, #16711680	; 0xff0000
  106ac8:	e1822003 	orr	r2, r2, r3
  106acc:	e51b3008 	ldr	r3, [fp, #-8]
  106ad0:	e1a03423 	lsr	r3, r3, #8
  106ad4:	e2033cff 	and	r3, r3, #65280	; 0xff00
  106ad8:	e1822003 	orr	r2, r2, r3
  106adc:	e51b3008 	ldr	r3, [fp, #-8]
  106ae0:	e1a03c23 	lsr	r3, r3, #24
  106ae4:	e1822003 	orr	r2, r2, r3
  106ae8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  106aec:	e5832000 	str	r2, [r3]
    }
    return 1;
  106af0:	e3a03001 	mov	r3, #1
}
  106af4:	e1a00003 	mov	r0, r3
  106af8:	e24bd004 	sub	sp, fp, #4
  106afc:	e8bd8800 	pop	{fp, pc}

00106b00 <netdev_ip4addr_ntoa_r>:
 * @param buflen length of buf
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *netdev_ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
  106b00:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  106b04:	e28db000 	add	fp, sp, #0
  106b08:	e24dd034 	sub	sp, sp, #52	; 0x34
  106b0c:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  106b10:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  106b14:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
    char *rp;
    uint8_t *ap;
    uint8_t rem;
    uint8_t n;
    uint8_t i;
    int len = 0;
  106b18:	e3a03000 	mov	r3, #0
  106b1c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

    s_addr = ip4_addr_get_u32(addr);
  106b20:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106b24:	e5933000 	ldr	r3, [r3]
  106b28:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

    rp = buf;
  106b2c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  106b30:	e50b3008 	str	r3, [fp, #-8]
    ap = (uint8_t *) &s_addr;
  106b34:	e24b301c 	sub	r3, fp, #28
  106b38:	e50b300c 	str	r3, [fp, #-12]
    for (n = 0; n < 4; n++)
  106b3c:	e3a03000 	mov	r3, #0
  106b40:	e54b300d 	strb	r3, [fp, #-13]
  106b44:	ea00004b 	b	106c78 <netdev_ip4addr_ntoa_r+0x178>
    {
        i = 0;
  106b48:	e3a03000 	mov	r3, #0
  106b4c:	e54b300e 	strb	r3, [fp, #-14]
        do
        {
            rem = *ap % (uint8_t) 10;
  106b50:	e51b300c 	ldr	r3, [fp, #-12]
  106b54:	e5d31000 	ldrb	r1, [r3]
  106b58:	e30c3ccd 	movw	r3, #52429	; 0xcccd
  106b5c:	e34c3ccc 	movt	r3, #52428	; 0xcccc
  106b60:	e0832391 	umull	r2, r3, r1, r3
  106b64:	e1a031a3 	lsr	r3, r3, #3
  106b68:	e3a0200a 	mov	r2, #10
  106b6c:	e0030392 	mul	r3, r2, r3
  106b70:	e0413003 	sub	r3, r1, r3
  106b74:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
            *ap /= (uint8_t) 10;
  106b78:	e51b300c 	ldr	r3, [fp, #-12]
  106b7c:	e5d32000 	ldrb	r2, [r3]
  106b80:	e30c3ccd 	movw	r3, #52429	; 0xcccd
  106b84:	e34c3ccc 	movt	r3, #52428	; 0xcccc
  106b88:	e0832392 	umull	r2, r3, r2, r3
  106b8c:	e1a031a3 	lsr	r3, r3, #3
  106b90:	e6ef2073 	uxtb	r2, r3
  106b94:	e51b300c 	ldr	r3, [fp, #-12]
  106b98:	e5c32000 	strb	r2, [r3]
            inv[i++] = (char) ('0' + rem);
  106b9c:	e55b300e 	ldrb	r3, [fp, #-14]
  106ba0:	e2832001 	add	r2, r3, #1
  106ba4:	e54b200e 	strb	r2, [fp, #-14]
  106ba8:	e1a01003 	mov	r1, r3
  106bac:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  106bb0:	e2833030 	add	r3, r3, #48	; 0x30
  106bb4:	e6ef2073 	uxtb	r2, r3
  106bb8:	e24b3004 	sub	r3, fp, #4
  106bbc:	e0833001 	add	r3, r3, r1
  106bc0:	e543201c 	strb	r2, [r3, #-28]	; 0xffffffe4
        } while (*ap);
  106bc4:	e51b300c 	ldr	r3, [fp, #-12]
  106bc8:	e5d33000 	ldrb	r3, [r3]
  106bcc:	e3530000 	cmp	r3, #0
  106bd0:	1affffde 	bne	106b50 <netdev_ip4addr_ntoa_r+0x50>
        while (i--)
  106bd4:	ea00000f 	b	106c18 <netdev_ip4addr_ntoa_r+0x118>
        {
            if (len++ >= buflen)
  106bd8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  106bdc:	e2832001 	add	r2, r3, #1
  106be0:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
  106be4:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  106be8:	e1520003 	cmp	r2, r3
  106bec:	ca000001 	bgt	106bf8 <netdev_ip4addr_ntoa_r+0xf8>
            {
                return NULL;
  106bf0:	e3a03000 	mov	r3, #0
  106bf4:	ea000029 	b	106ca0 <netdev_ip4addr_ntoa_r+0x1a0>
            }
            *rp++ = inv[i];
  106bf8:	e55b200e 	ldrb	r2, [fp, #-14]
  106bfc:	e51b3008 	ldr	r3, [fp, #-8]
  106c00:	e2831001 	add	r1, r3, #1
  106c04:	e50b1008 	str	r1, [fp, #-8]
  106c08:	e24b1004 	sub	r1, fp, #4
  106c0c:	e0812002 	add	r2, r1, r2
  106c10:	e552201c 	ldrb	r2, [r2, #-28]	; 0xffffffe4
  106c14:	e5c32000 	strb	r2, [r3]
        while (i--)
  106c18:	e55b300e 	ldrb	r3, [fp, #-14]
  106c1c:	e2432001 	sub	r2, r3, #1
  106c20:	e54b200e 	strb	r2, [fp, #-14]
  106c24:	e3530000 	cmp	r3, #0
  106c28:	1affffea 	bne	106bd8 <netdev_ip4addr_ntoa_r+0xd8>
        }
        if (len++ >= buflen)
  106c2c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  106c30:	e2832001 	add	r2, r3, #1
  106c34:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
  106c38:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  106c3c:	e1520003 	cmp	r2, r3
  106c40:	ca000001 	bgt	106c4c <netdev_ip4addr_ntoa_r+0x14c>
        {
            return NULL;
  106c44:	e3a03000 	mov	r3, #0
  106c48:	ea000014 	b	106ca0 <netdev_ip4addr_ntoa_r+0x1a0>
        }
        *rp++ = '.';
  106c4c:	e51b3008 	ldr	r3, [fp, #-8]
  106c50:	e2832001 	add	r2, r3, #1
  106c54:	e50b2008 	str	r2, [fp, #-8]
  106c58:	e3a0202e 	mov	r2, #46	; 0x2e
  106c5c:	e5c32000 	strb	r2, [r3]
        ap++;
  106c60:	e51b300c 	ldr	r3, [fp, #-12]
  106c64:	e2833001 	add	r3, r3, #1
  106c68:	e50b300c 	str	r3, [fp, #-12]
    for (n = 0; n < 4; n++)
  106c6c:	e55b300d 	ldrb	r3, [fp, #-13]
  106c70:	e2833001 	add	r3, r3, #1
  106c74:	e54b300d 	strb	r3, [fp, #-13]
  106c78:	e55b300d 	ldrb	r3, [fp, #-13]
  106c7c:	e3530003 	cmp	r3, #3
  106c80:	9affffb0 	bls	106b48 <netdev_ip4addr_ntoa_r+0x48>
    }
    *--rp = 0;
  106c84:	e51b3008 	ldr	r3, [fp, #-8]
  106c88:	e2433001 	sub	r3, r3, #1
  106c8c:	e50b3008 	str	r3, [fp, #-8]
  106c90:	e51b3008 	ldr	r3, [fp, #-8]
  106c94:	e3a02000 	mov	r2, #0
  106c98:	e5c32000 	strb	r2, [r3]
    return buf;
  106c9c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
}
  106ca0:	e1a00003 	mov	r0, r3
  106ca4:	e28bd000 	add	sp, fp, #0
  106ca8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  106cac:	e12fff1e 	bx	lr

00106cb0 <netdev_ip4addr_ntoa>:
 * @param addr ip address in network order to convert
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *netdev_ip4addr_ntoa(const ip4_addr_t *addr)
{
  106cb0:	e92d4800 	push	{fp, lr}
  106cb4:	e28db004 	add	fp, sp, #4
  106cb8:	e24dd008 	sub	sp, sp, #8
  106cbc:	e50b0008 	str	r0, [fp, #-8]
    static char str[IP4ADDR_STRLEN_MAX];
    return netdev_ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
  106cc0:	e3a02010 	mov	r2, #16
  106cc4:	e30e1450 	movw	r1, #58448	; 0xe450
  106cc8:	e3401014 	movt	r1, #20
  106ccc:	e51b0008 	ldr	r0, [fp, #-8]
  106cd0:	ebffff8a 	bl	106b00 <netdev_ip4addr_ntoa_r>
  106cd4:	e1a03000 	mov	r3, r0
}
  106cd8:	e1a00003 	mov	r0, r3
  106cdc:	e24bd004 	sub	sp, fp, #4
  106ce0:	e8bd8800 	pop	{fp, pc}

00106ce4 <netdev_ipaddr_addr>:
 *
 * @param cp IP address in ascii representation (e.g. "127.0.0.1")
 * @return ip address in network order
 */
in_addr_t netdev_ipaddr_addr(const char *cp)
{
  106ce4:	e92d4800 	push	{fp, lr}
  106ce8:	e28db004 	add	fp, sp, #4
  106cec:	e24dd010 	sub	sp, sp, #16
  106cf0:	e50b0010 	str	r0, [fp, #-16]
    ip4_addr_t val;

    if (netdev_ip4addr_aton(cp, &val)) {
  106cf4:	e24b3008 	sub	r3, fp, #8
  106cf8:	e1a01003 	mov	r1, r3
  106cfc:	e51b0010 	ldr	r0, [fp, #-16]
  106d00:	ebfffe71 	bl	1066cc <netdev_ip4addr_aton>
  106d04:	e1a03000 	mov	r3, r0
  106d08:	e3530000 	cmp	r3, #0
  106d0c:	0a000001 	beq	106d18 <netdev_ipaddr_addr+0x34>
        return ip4_addr_get_u32(&val);
  106d10:	e51b3008 	ldr	r3, [fp, #-8]
  106d14:	ea000000 	b	106d1c <netdev_ipaddr_addr+0x38>
    }
    return (IPADDR_NONE);
  106d18:	e3e03000 	mvn	r3, #0
}
  106d1c:	e1a00003 	mov	r0, r3
  106d20:	e24bd004 	sub	sp, fp, #4
  106d24:	e8bd8800 	pop	{fp, pc}

00106d28 <netdev_inet_ntop>:

#endif /* NETDEV_IPV6 */

const char *
netdev_inet_ntop(int af, const void *src, char *dst, int32_t size)
{
  106d28:	e92d4800 	push	{fp, lr}
  106d2c:	e28db004 	add	fp, sp, #4
  106d30:	e24dd018 	sub	sp, sp, #24
  106d34:	e50b0010 	str	r0, [fp, #-16]
  106d38:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  106d3c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  106d40:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
#define AF_INET         2
#define AF_INET6        10

    const char *ret = NULL;
  106d44:	e3a03000 	mov	r3, #0
  106d48:	e50b3008 	str	r3, [fp, #-8]
    int size_int = (int)size;
  106d4c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  106d50:	e50b300c 	str	r3, [fp, #-12]
    if (size_int < 0)
  106d54:	e51b300c 	ldr	r3, [fp, #-12]
  106d58:	e3530000 	cmp	r3, #0
  106d5c:	aa000001 	bge	106d68 <netdev_inet_ntop+0x40>
    {
        return NULL;
  106d60:	e3a03000 	mov	r3, #0
  106d64:	ea00000a 	b	106d94 <netdev_inet_ntop+0x6c>
    }
    switch (af)
  106d68:	e51b3010 	ldr	r3, [fp, #-16]
  106d6c:	e3530002 	cmp	r3, #2
  106d70:	0a000002 	beq	106d80 <netdev_inet_ntop+0x58>
#if NETDEV_IPV6
    case AF_INET6:
        return netdev_ip6addr_ntoa_r((const ip6_addr_t *)src, dst, size_int);
#endif
    default:
        break;
  106d74:	e320f000 	nop	{0}
    }
    return ret;
  106d78:	e51b3008 	ldr	r3, [fp, #-8]
  106d7c:	ea000004 	b	106d94 <netdev_inet_ntop+0x6c>
        return netdev_ip4addr_ntoa_r((const ip4_addr_t *)src, dst, size_int);
  106d80:	e51b200c 	ldr	r2, [fp, #-12]
  106d84:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  106d88:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  106d8c:	ebffff5b 	bl	106b00 <netdev_ip4addr_ntoa_r>
  106d90:	e1a03000 	mov	r3, r0
}
  106d94:	e1a00003 	mov	r0, r3
  106d98:	e24bd004 	sub	sp, fp, #4
  106d9c:	e8bd8800 	pop	{fp, pc}

00106da0 <netdev_inet_pton>:

int
netdev_inet_pton(int af, const char *src, void *dst)
{
  106da0:	e92d4800 	push	{fp, lr}
  106da4:	e28db004 	add	fp, sp, #4
  106da8:	e24dd018 	sub	sp, sp, #24
  106dac:	e50b0010 	str	r0, [fp, #-16]
  106db0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  106db4:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
#define AF_INET         2
#define AF_INET6        10

    int err;
    switch (af)
  106db8:	e51b3010 	ldr	r3, [fp, #-16]
  106dbc:	e3530002 	cmp	r3, #2
  106dc0:	1a000004 	bne	106dd8 <netdev_inet_pton+0x38>
    {
#if NETDEV_IPV4
    case AF_INET:
        err = netdev_ip4addr_aton(src, (ip4_addr_t *)dst);
  106dc4:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  106dc8:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  106dcc:	ebfffe3e 	bl	1066cc <netdev_ip4addr_aton>
  106dd0:	e50b0008 	str	r0, [fp, #-8]
        break;
  106dd4:	ea000002 	b	106de4 <netdev_inet_pton+0x44>
        }
        break;
    }
#endif
    default:
        err = -1;
  106dd8:	e3e03000 	mvn	r3, #0
  106ddc:	e50b3008 	str	r3, [fp, #-8]
        break;
  106de0:	e320f000 	nop	{0}
    }
    return err;
  106de4:	e51b3008 	ldr	r3, [fp, #-8]
}
  106de8:	e1a00003 	mov	r0, r3
  106dec:	e24bd004 	sub	sp, fp, #4
  106df0:	e8bd8800 	pop	{fp, pc}

00106df4 <sal_init>:
 *
 * @return result  0: initialize success
 *                -1: initialize failed
 */
int sal_init(void)
{
  106df4:	e92d4800 	push	{fp, lr}
  106df8:	e28db004 	add	fp, sp, #4
  106dfc:	e24dd008 	sub	sp, sp, #8
    int cn;

    if (init_ok)
  106e00:	e30e3490 	movw	r3, #58512	; 0xe490
  106e04:	e3403014 	movt	r3, #20
  106e08:	e5933000 	ldr	r3, [r3]
  106e0c:	e3530000 	cmp	r3, #0
  106e10:	0a000001 	beq	106e1c <sal_init+0x28>
    {
        LOG_D("Socket Abstraction Layer is already initialized.");
        return 0;
  106e14:	e3a03000 	mov	r3, #0
  106e18:	ea000032 	b	106ee8 <sal_init+0xf4>
    }

    /* init sal socket table */
    cn = SOCKET_TABLE_STEP_LEN < SAL_SOCKETS_NUM ? SOCKET_TABLE_STEP_LEN : SAL_SOCKETS_NUM;
  106e1c:	e3a03004 	mov	r3, #4
  106e20:	e50b3008 	str	r3, [fp, #-8]
    socket_table.max_socket = cn;
  106e24:	e51b2008 	ldr	r2, [fp, #-8]
  106e28:	e30e3460 	movw	r3, #58464	; 0xe460
  106e2c:	e3403014 	movt	r3, #20
  106e30:	e5832000 	str	r2, [r3]
    socket_table.sockets = rt_calloc(1, cn * sizeof(struct sal_socket *));
  106e34:	e51b3008 	ldr	r3, [fp, #-8]
  106e38:	e1a03103 	lsl	r3, r3, #2
  106e3c:	e1a01003 	mov	r1, r3
  106e40:	e3a00001 	mov	r0, #1
  106e44:	ebfff070 	bl	10300c <rt_calloc>
  106e48:	e1a02000 	mov	r2, r0
  106e4c:	e30e3460 	movw	r3, #58464	; 0xe460
  106e50:	e3403014 	movt	r3, #20
  106e54:	e5832004 	str	r2, [r3, #4]
    if (socket_table.sockets == RT_NULL)
  106e58:	e30e3460 	movw	r3, #58464	; 0xe460
  106e5c:	e3403014 	movt	r3, #20
  106e60:	e5933004 	ldr	r3, [r3, #4]
  106e64:	e3530000 	cmp	r3, #0
  106e68:	1a00000a 	bne	106e98 <sal_init+0xa4>
    {
        LOG_E("No memory for socket table.\n");
  106e6c:	e3060140 	movw	r0, #24896	; 0x6140
  106e70:	e3400014 	movt	r0, #20
  106e74:	ebfff0a6 	bl	103114 <rt_kprintf>
  106e78:	e3060154 	movw	r0, #24916	; 0x6154
  106e7c:	e3400014 	movt	r0, #20
  106e80:	ebfff0a3 	bl	103114 <rt_kprintf>
  106e84:	e3060174 	movw	r0, #24948	; 0x6174
  106e88:	e3400014 	movt	r0, #20
  106e8c:	ebfff0a0 	bl	103114 <rt_kprintf>
        return -1;
  106e90:	e3e03000 	mvn	r3, #0
  106e94:	ea000013 	b	106ee8 <sal_init+0xf4>
    }

    /* create sal socket lock */
    rt_mutex_init(&sal_core_lock, "sal_lock", RT_IPC_FLAG_FIFO);
  106e98:	e3a02000 	mov	r2, #0
  106e9c:	e306117c 	movw	r1, #24956	; 0x617c
  106ea0:	e3401014 	movt	r1, #20
  106ea4:	e30e0468 	movw	r0, #58472	; 0xe468
  106ea8:	e3400014 	movt	r0, #20
  106eac:	ebffe7a5 	bl	100d48 <rt_mutex_init>

    LOG_I("Socket Abstraction Layer initialize success.");
  106eb0:	e3060188 	movw	r0, #24968	; 0x6188
  106eb4:	e3400014 	movt	r0, #20
  106eb8:	ebfff095 	bl	103114 <rt_kprintf>
  106ebc:	e306019c 	movw	r0, #24988	; 0x619c
  106ec0:	e3400014 	movt	r0, #20
  106ec4:	ebfff092 	bl	103114 <rt_kprintf>
  106ec8:	e3060174 	movw	r0, #24948	; 0x6174
  106ecc:	e3400014 	movt	r0, #20
  106ed0:	ebfff08f 	bl	103114 <rt_kprintf>
    init_ok = RT_TRUE;
  106ed4:	e30e3490 	movw	r3, #58512	; 0xe490
  106ed8:	e3403014 	movt	r3, #20
  106edc:	e3a02001 	mov	r2, #1
  106ee0:	e5832000 	str	r2, [r3]

    return 0;
  106ee4:	e3a03000 	mov	r3, #0
}
  106ee8:	e1a00003 	mov	r0, r3
  106eec:	e24bd004 	sub	sp, fp, #4
  106ef0:	e8bd8800 	pop	{fp, pc}

00106ef4 <check_netdev_internet_up_work>:

/* check SAL network interface device internet status */
void check_netdev_internet_up_work(void *work_data)
{
  106ef4:	e92d4810 	push	{r4, fp, lr}
  106ef8:	e28db008 	add	fp, sp, #8
  106efc:	e24dd0ac 	sub	sp, sp, #172	; 0xac
  106f00:	e50b00a8 	str	r0, [fp, #-168]	; 0xffffff58
#define SAL_INTERNET_PORT      8101

#define SAL_INTERNET_MONTH_LEN 4
#define SAL_INTERNET_DATE_LEN  16

    int index, sockfd = -1, result = 0;
  106f04:	e3e03000 	mvn	r3, #0
  106f08:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  106f0c:	e3a03000 	mov	r3, #0
  106f10:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    struct sockaddr_in server_addr;
    struct hostent *host;
    struct timeval timeout;
    struct netdev *netdev = (struct netdev *)work_data;
  106f14:	e51b30a8 	ldr	r3, [fp, #-168]	; 0xffffff58
  106f18:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    socklen_t addr_len = sizeof(struct sockaddr_in);
  106f1c:	e3a03010 	mov	r3, #16
  106f20:	e50b3050 	str	r3, [fp, #-80]	; 0xffffffb0
    char send_data[SAL_INTERNET_BUFF_LEN], recv_data = 0;
  106f24:	e3a03000 	mov	r3, #0
  106f28:	e54b305d 	strb	r3, [fp, #-93]	; 0xffffffa3
    // struct rt_delayed_work *delay_work = (struct rt_delayed_work *)work;

    const char month[][SAL_INTERNET_MONTH_LEN] = {"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"};
  106f2c:	e30631f0 	movw	r3, #25072	; 0x61f0
  106f30:	e3403014 	movt	r3, #20
  106f34:	e24bc090 	sub	ip, fp, #144	; 0x90
  106f38:	e1a0e003 	mov	lr, r3
  106f3c:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
  106f40:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
  106f44:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
  106f48:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
  106f4c:	e89e000f 	ldm	lr, {r0, r1, r2, r3}
  106f50:	e88c000f 	stm	ip, {r0, r1, r2, r3}
    char date[SAL_INTERNET_DATE_LEN];
    int moth_num = 0;
  106f54:	e3a03000 	mov	r3, #0
  106f58:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

    struct sal_proto_family *pf = (struct sal_proto_family *) netdev->sal_user_data;
  106f5c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  106f60:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  106f64:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
    // {
    //     rt_free(delay_work);
    // }

    /* get network interface socket operations */
    if (pf == RT_NULL || pf->skt_ops == RT_NULL)
  106f68:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106f6c:	e3530000 	cmp	r3, #0
  106f70:	0a000003 	beq	106f84 <check_netdev_internet_up_work+0x90>
  106f74:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106f78:	e5933008 	ldr	r3, [r3, #8]
  106f7c:	e3530000 	cmp	r3, #0
  106f80:	1a000002 	bne	106f90 <check_netdev_internet_up_work+0x9c>
    {
        result = -RT_ERROR;
  106f84:	e3e03000 	mvn	r3, #0
  106f88:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        goto __exit;
  106f8c:	ea0000bc 	b	107284 <check_netdev_internet_up_work+0x390>
    }

    host = (struct hostent *) pf->netdb_ops->gethostbyname(SAL_INTERNET_HOST);
  106f90:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106f94:	e593300c 	ldr	r3, [r3, #12]
  106f98:	e5933000 	ldr	r3, [r3]
  106f9c:	e30601cc 	movw	r0, #25036	; 0x61cc
  106fa0:	e3400014 	movt	r0, #20
  106fa4:	e12fff33 	blx	r3
  106fa8:	e50b002c 	str	r0, [fp, #-44]	; 0xffffffd4
    if (host == RT_NULL)
  106fac:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  106fb0:	e3530000 	cmp	r3, #0
  106fb4:	1a000002 	bne	106fc4 <check_netdev_internet_up_work+0xd0>
    {
        result = -RT_ERROR;
  106fb8:	e3e03000 	mvn	r3, #0
  106fbc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        goto __exit;
  106fc0:	ea0000af 	b	107284 <check_netdev_internet_up_work+0x390>
    }

    skt_ops = pf->skt_ops;
  106fc4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  106fc8:	e5933008 	ldr	r3, [r3, #8]
  106fcc:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
    if ((sockfd = skt_ops->socket(AF_INET, SOCK_DGRAM, 0)) < 0)
  106fd0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  106fd4:	e5933000 	ldr	r3, [r3]
  106fd8:	e3a02000 	mov	r2, #0
  106fdc:	e3a01002 	mov	r1, #2
  106fe0:	e3a00002 	mov	r0, #2
  106fe4:	e12fff33 	blx	r3
  106fe8:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  106fec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  106ff0:	e3530000 	cmp	r3, #0
  106ff4:	aa000002 	bge	107004 <check_netdev_internet_up_work+0x110>
    {
        result = -RT_ERROR;
  106ff8:	e3e03000 	mvn	r3, #0
  106ffc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        goto __exit;
  107000:	ea00009f 	b	107284 <check_netdev_internet_up_work+0x390>
    }
    
    server_addr.sin_family = AF_INET;
  107004:	e3a03002 	mov	r3, #2
  107008:	e54b303b 	strb	r3, [fp, #-59]	; 0xffffffc5
    server_addr.sin_port = htons(SAL_INTERNET_PORT);
  10700c:	e30a351f 	movw	r3, #42271	; 0xa51f
  107010:	e34f3fff 	movt	r3, #65535	; 0xffff
  107014:	e14b33ba 	strh	r3, [fp, #-58]	; 0xffffffc6
    server_addr.sin_addr = *((struct in_addr *)host->h_addr);
  107018:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10701c:	e5933010 	ldr	r3, [r3, #16]
  107020:	e5933000 	ldr	r3, [r3]
  107024:	e5933000 	ldr	r3, [r3]
  107028:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
    rt_memset(&(server_addr.sin_zero), 0, sizeof(server_addr.sin_zero));
  10702c:	e24b303c 	sub	r3, fp, #60	; 0x3c
  107030:	e2833008 	add	r3, r3, #8
  107034:	e3a02008 	mov	r2, #8
  107038:	e3a01000 	mov	r1, #0
  10703c:	e1a00003 	mov	r0, r3
  107040:	ebfff0a0 	bl	1032c8 <rt_memset>

    timeout.tv_sec = SAL_INTERNET_TIMEOUT;
  107044:	e3a02002 	mov	r2, #2
  107048:	e3a03000 	mov	r3, #0
  10704c:	e14b24fc 	strd	r2, [fp, #-76]	; 0xffffffb4
    timeout.tv_usec = 0;
  107050:	e3a03000 	mov	r3, #0
  107054:	e50b3044 	str	r3, [fp, #-68]	; 0xffffffbc

    /* set receive and send timeout */
    skt_ops->setsockopt(sockfd, SOL_SOCKET, SO_RCVTIMEO, (void *) &timeout, sizeof(timeout));
  107058:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10705c:	e5934024 	ldr	r4, [r3, #36]	; 0x24
  107060:	e24b204c 	sub	r2, fp, #76	; 0x4c
  107064:	e3a03010 	mov	r3, #16
  107068:	e58d3000 	str	r3, [sp]
  10706c:	e1a03002 	mov	r3, r2
  107070:	e3012006 	movw	r2, #4102	; 0x1006
  107074:	e3001fff 	movw	r1, #4095	; 0xfff
  107078:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  10707c:	e12fff34 	blx	r4
    skt_ops->setsockopt(sockfd, SOL_SOCKET, SO_SNDTIMEO, (void *) &timeout, sizeof(timeout));
  107080:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107084:	e5934024 	ldr	r4, [r3, #36]	; 0x24
  107088:	e24b204c 	sub	r2, fp, #76	; 0x4c
  10708c:	e3a03010 	mov	r3, #16
  107090:	e58d3000 	str	r3, [sp]
  107094:	e1a03002 	mov	r3, r2
  107098:	e3012005 	movw	r2, #4101	; 0x1005
  10709c:	e3001fff 	movw	r1, #4095	; 0xfff
  1070a0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1070a4:	e12fff34 	blx	r4

    /* get build moth value*/
    rt_memset(date, 0x00, SAL_INTERNET_DATE_LEN);
  1070a8:	e24b30a0 	sub	r3, fp, #160	; 0xa0
  1070ac:	e3a02010 	mov	r2, #16
  1070b0:	e3a01000 	mov	r1, #0
  1070b4:	e1a00003 	mov	r0, r3
  1070b8:	ebfff082 	bl	1032c8 <rt_memset>
    rt_snprintf(date, SAL_INTERNET_DATE_LEN, "%s", __DATE__);
  1070bc:	e24b00a0 	sub	r0, fp, #160	; 0xa0
  1070c0:	e30631e0 	movw	r3, #25056	; 0x61e0
  1070c4:	e3403014 	movt	r3, #20
  1070c8:	e30621ec 	movw	r2, #25068	; 0x61ec
  1070cc:	e3402014 	movt	r2, #20
  1070d0:	e3a01010 	mov	r1, #16
  1070d4:	ebffefd8 	bl	10303c <rt_snprintf>

    for (index = 0; index < sizeof(month) / SAL_INTERNET_MONTH_LEN; index++)
  1070d8:	e3a03000 	mov	r3, #0
  1070dc:	e50b3010 	str	r3, [fp, #-16]
  1070e0:	ea000011 	b	10712c <check_netdev_internet_up_work+0x238>
    {
        if (rt_memcmp(date, month[index], SAL_INTERNET_MONTH_LEN - 1) == 0)
  1070e4:	e24b2090 	sub	r2, fp, #144	; 0x90
  1070e8:	e51b3010 	ldr	r3, [fp, #-16]
  1070ec:	e1a03103 	lsl	r3, r3, #2
  1070f0:	e0821003 	add	r1, r2, r3
  1070f4:	e24b30a0 	sub	r3, fp, #160	; 0xa0
  1070f8:	e3a02003 	mov	r2, #3
  1070fc:	e1a00003 	mov	r0, r3
  107100:	ebfff08c 	bl	103338 <rt_memcmp>
  107104:	e1a03000 	mov	r3, r0
  107108:	e3530000 	cmp	r3, #0
  10710c:	1a000003 	bne	107120 <check_netdev_internet_up_work+0x22c>
        {
            moth_num = index + 1;
  107110:	e51b3010 	ldr	r3, [fp, #-16]
  107114:	e2833001 	add	r3, r3, #1
  107118:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
            break;
  10711c:	ea000005 	b	107138 <check_netdev_internet_up_work+0x244>
    for (index = 0; index < sizeof(month) / SAL_INTERNET_MONTH_LEN; index++)
  107120:	e51b3010 	ldr	r3, [fp, #-16]
  107124:	e2833001 	add	r3, r3, #1
  107128:	e50b3010 	str	r3, [fp, #-16]
  10712c:	e51b3010 	ldr	r3, [fp, #-16]
  107130:	e353000b 	cmp	r3, #11
  107134:	9affffea 	bls	1070e4 <check_netdev_internet_up_work+0x1f0>
        }
    }

    /* not find build month */
    if (moth_num == 0 || moth_num > sizeof(month) / SAL_INTERNET_MONTH_LEN)
  107138:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10713c:	e3530000 	cmp	r3, #0
  107140:	0a000002 	beq	107150 <check_netdev_internet_up_work+0x25c>
  107144:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  107148:	e353000c 	cmp	r3, #12
  10714c:	9a000002 	bls	10715c <check_netdev_internet_up_work+0x268>
    {
        result = -RT_ERROR;
  107150:	e3e03000 	mvn	r3, #0
  107154:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        goto __exit;
  107158:	ea000049 	b	107284 <check_netdev_internet_up_work+0x390>
    }

    rt_memset(send_data, 0x00, SAL_INTERNET_BUFF_LEN);
  10715c:	e24b305c 	sub	r3, fp, #92	; 0x5c
  107160:	e3a0200c 	mov	r2, #12
  107164:	e3a01000 	mov	r1, #0
  107168:	e1a00003 	mov	r0, r3
  10716c:	ebfff055 	bl	1032c8 <rt_memset>
    send_data[0] = SAL_INTERNET_VERSION;
  107170:	e3a03000 	mov	r3, #0
  107174:	e54b305c 	strb	r3, [fp, #-92]	; 0xffffffa4
    for (index = 0; index < netdev->hwaddr_len; index++)
  107178:	e3a03000 	mov	r3, #0
  10717c:	e50b3010 	str	r3, [fp, #-16]
  107180:	ea000010 	b	1071c8 <check_netdev_internet_up_work+0x2d4>
    {
        send_data[index + 1] = netdev->hwaddr[index] + moth_num;
  107184:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  107188:	e51b3010 	ldr	r3, [fp, #-16]
  10718c:	e0823003 	add	r3, r2, r3
  107190:	e2833021 	add	r3, r3, #33	; 0x21
  107194:	e5d31000 	ldrb	r1, [r3]
  107198:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10719c:	e6ef2073 	uxtb	r2, r3
  1071a0:	e51b3010 	ldr	r3, [fp, #-16]
  1071a4:	e2833001 	add	r3, r3, #1
  1071a8:	e0812002 	add	r2, r1, r2
  1071ac:	e6ef2072 	uxtb	r2, r2
  1071b0:	e24b100c 	sub	r1, fp, #12
  1071b4:	e0813003 	add	r3, r1, r3
  1071b8:	e5432050 	strb	r2, [r3, #-80]	; 0xffffffb0
    for (index = 0; index < netdev->hwaddr_len; index++)
  1071bc:	e51b3010 	ldr	r3, [fp, #-16]
  1071c0:	e2833001 	add	r3, r3, #1
  1071c4:	e50b3010 	str	r3, [fp, #-16]
  1071c8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1071cc:	e5d33020 	ldrb	r3, [r3, #32]
  1071d0:	e1a02003 	mov	r2, r3
  1071d4:	e51b3010 	ldr	r3, [fp, #-16]
  1071d8:	e1530002 	cmp	r3, r2
  1071dc:	baffffe8 	blt	107184 <check_netdev_internet_up_work+0x290>
    }
    send_data[9] = RT_VERSION;
  1071e0:	e3a03005 	mov	r3, #5
  1071e4:	e54b3053 	strb	r3, [fp, #-83]	; 0xffffffad
    send_data[10] = RT_SUBVERSION;
  1071e8:	e3a03000 	mov	r3, #0
  1071ec:	e54b3052 	strb	r3, [fp, #-82]	; 0xffffffae
    send_data[11] = RT_REVISION;
  1071f0:	e3a03000 	mov	r3, #0
  1071f4:	e54b3051 	strb	r3, [fp, #-81]	; 0xffffffaf

    skt_ops->sendto(sockfd, send_data, SAL_INTERNET_BUFF_LEN, 0,
  1071f8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1071fc:	e5934018 	ldr	r4, [r3, #24]
  107200:	e24b105c 	sub	r1, fp, #92	; 0x5c
  107204:	e3a03010 	mov	r3, #16
  107208:	e58d3004 	str	r3, [sp, #4]
  10720c:	e24b303c 	sub	r3, fp, #60	; 0x3c
  107210:	e58d3000 	str	r3, [sp]
  107214:	e3a03000 	mov	r3, #0
  107218:	e3a0200c 	mov	r2, #12
  10721c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  107220:	e12fff34 	blx	r4
                    (struct sockaddr *)&server_addr, sizeof(struct sockaddr));

    result = skt_ops->recvfrom(sockfd, &recv_data, sizeof(recv_data), 0, (struct sockaddr *)&server_addr, &addr_len);
  107224:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107228:	e593401c 	ldr	r4, [r3, #28]
  10722c:	e24b105d 	sub	r1, fp, #93	; 0x5d
  107230:	e24b3050 	sub	r3, fp, #80	; 0x50
  107234:	e58d3004 	str	r3, [sp, #4]
  107238:	e24b303c 	sub	r3, fp, #60	; 0x3c
  10723c:	e58d3000 	str	r3, [sp]
  107240:	e3a03000 	mov	r3, #0
  107244:	e3a02001 	mov	r2, #1
  107248:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  10724c:	e12fff34 	blx	r4
  107250:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    if (result < 0)
  107254:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  107258:	e3530000 	cmp	r3, #0
  10725c:	ba000005 	blt	107278 <check_netdev_internet_up_work+0x384>
    {
        goto __exit;
    }

    if (recv_data == RT_FALSE)
  107260:	e55b305d 	ldrb	r3, [fp, #-93]	; 0xffffffa3
  107264:	e3530000 	cmp	r3, #0
  107268:	1a000004 	bne	107280 <check_netdev_internet_up_work+0x38c>
    {
        result = -RT_ERROR;
  10726c:	e3e03000 	mvn	r3, #0
  107270:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        goto __exit;
  107274:	ea000002 	b	107284 <check_netdev_internet_up_work+0x390>
        goto __exit;
  107278:	e320f000 	nop	{0}
  10727c:	ea000000 	b	107284 <check_netdev_internet_up_work+0x390>
    }

__exit:
  107280:	e320f000 	nop	{0}
    if (result > 0)
  107284:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  107288:	e3530000 	cmp	r3, #0
  10728c:	da000006 	ble	1072ac <check_netdev_internet_up_work+0x3b8>
    {
        LOG_D("Set network interface device(%s) internet status up.", netdev->name);
        netdev->flags |= NETDEV_FLAG_INTERNET_UP;
  107290:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  107294:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  107298:	e3833080 	orr	r3, r3, #128	; 0x80
  10729c:	e6ff2073 	uxth	r2, r3
  1072a0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1072a4:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
  1072a8:	ea000005 	b	1072c4 <check_netdev_internet_up_work+0x3d0>
    }
    else
    {
        LOG_D("Set network interface device(%s) internet status down.", netdev->name);
        netdev->flags &= ~NETDEV_FLAG_INTERNET_UP;
  1072ac:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1072b0:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1072b4:	e3c33080 	bic	r3, r3, #128	; 0x80
  1072b8:	e6ff2073 	uxth	r2, r3
  1072bc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1072c0:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
    }

    if (sockfd >= 0)
  1072c4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1072c8:	e3530000 	cmp	r3, #0
  1072cc:	ba000003 	blt	1072e0 <check_netdev_internet_up_work+0x3ec>
    {
        skt_ops->closesocket(sockfd);
  1072d0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1072d4:	e5933004 	ldr	r3, [r3, #4]
  1072d8:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1072dc:	e12fff33 	blx	r3
    }
}
  1072e0:	e320f000 	nop	{0}
  1072e4:	e24bd008 	sub	sp, fp, #8
  1072e8:	e8bd8810 	pop	{r4, fp, pc}

001072ec <sal_get_socket>:
 * @param socket sal socket index
 *
 * @return sal socket object of the current sal socket index
 */
struct sal_socket *sal_get_socket(int socket)
{
  1072ec:	e92d4800 	push	{fp, lr}
  1072f0:	e28db004 	add	fp, sp, #4
  1072f4:	e24dd010 	sub	sp, sp, #16
  1072f8:	e50b0010 	str	r0, [fp, #-16]
    struct sal_socket_table *st = &socket_table;
  1072fc:	e30e3460 	movw	r3, #58464	; 0xe460
  107300:	e3403014 	movt	r3, #20
  107304:	e50b3008 	str	r3, [fp, #-8]

    if (socket < 0 || socket >= (int) st->max_socket)
  107308:	e51b3010 	ldr	r3, [fp, #-16]
  10730c:	e3530000 	cmp	r3, #0
  107310:	ba000005 	blt	10732c <sal_get_socket+0x40>
  107314:	e51b3008 	ldr	r3, [fp, #-8]
  107318:	e5933000 	ldr	r3, [r3]
  10731c:	e1a02003 	mov	r2, r3
  107320:	e51b3010 	ldr	r3, [fp, #-16]
  107324:	e1530002 	cmp	r3, r2
  107328:	ba000001 	blt	107334 <sal_get_socket+0x48>
    {
        return RT_NULL;
  10732c:	e3a03000 	mov	r3, #0
  107330:	ea000015 	b	10738c <sal_get_socket+0xa0>
    }

    socket = socket - SAL_SOCKET_OFFSET;
    /* check socket structure valid or not */
    RT_ASSERT(st->sockets[socket]->magic == SAL_SOCKET_MAGIC);
  107334:	e51b3008 	ldr	r3, [fp, #-8]
  107338:	e5932004 	ldr	r2, [r3, #4]
  10733c:	e51b3010 	ldr	r3, [fp, #-16]
  107340:	e1a03103 	lsl	r3, r3, #2
  107344:	e0823003 	add	r3, r2, r3
  107348:	e5933000 	ldr	r3, [r3]
  10734c:	e5933000 	ldr	r3, [r3]
  107350:	e3052a10 	movw	r2, #23056	; 0x5a10
  107354:	e1530002 	cmp	r3, r2
  107358:	0a000005 	beq	107374 <sal_get_socket+0x88>
  10735c:	e300213b 	movw	r2, #315	; 0x13b
  107360:	e3061314 	movw	r1, #25364	; 0x6314
  107364:	e3401014 	movt	r1, #20
  107368:	e3060220 	movw	r0, #25120	; 0x6220
  10736c:	e3400014 	movt	r0, #20
  107370:	ebfff088 	bl	103598 <rt_assert_handler>

    return st->sockets[socket];
  107374:	e51b3008 	ldr	r3, [fp, #-8]
  107378:	e5932004 	ldr	r2, [r3, #4]
  10737c:	e51b3010 	ldr	r3, [fp, #-16]
  107380:	e1a03103 	lsl	r3, r3, #2
  107384:	e0823003 	add	r3, r2, r3
  107388:	e5933000 	ldr	r3, [r3]
}
  10738c:	e1a00003 	mov	r0, r3
  107390:	e24bd004 	sub	sp, fp, #4
  107394:	e8bd8800 	pop	{fp, pc}

00107398 <sal_lock>:
 * This function will lock sal socket.
 *
 * @note please don't invoke it on ISR.
 */
static void sal_lock(void)
{
  107398:	e92d4800 	push	{fp, lr}
  10739c:	e28db004 	add	fp, sp, #4
  1073a0:	e24dd008 	sub	sp, sp, #8
    rt_err_t result;

    result = rt_mutex_take(&sal_core_lock, RT_WAITING_FOREVER);
  1073a4:	e3e01000 	mvn	r1, #0
  1073a8:	e30e0468 	movw	r0, #58472	; 0xe468
  1073ac:	e3400014 	movt	r0, #20
  1073b0:	ebffe6d2 	bl	100f00 <rt_mutex_take>
  1073b4:	e50b0008 	str	r0, [fp, #-8]
    if (result != RT_EOK)
  1073b8:	e51b3008 	ldr	r3, [fp, #-8]
  1073bc:	e3530000 	cmp	r3, #0
  1073c0:	0a000005 	beq	1073dc <sal_lock+0x44>
    {
        RT_ASSERT(0);
  1073c4:	e3a02f53 	mov	r2, #332	; 0x14c
  1073c8:	e3061324 	movw	r1, #25380	; 0x6324
  1073cc:	e3401014 	movt	r1, #20
  1073d0:	e3060250 	movw	r0, #25168	; 0x6250
  1073d4:	e3400014 	movt	r0, #20
  1073d8:	ebfff06e 	bl	103598 <rt_assert_handler>
    }
}
  1073dc:	e320f000 	nop	{0}
  1073e0:	e24bd004 	sub	sp, fp, #4
  1073e4:	e8bd8800 	pop	{fp, pc}

001073e8 <sal_unlock>:
 * This function will lock sal socket.
 *
 * @note please don't invoke it on ISR.
 */
static void sal_unlock(void)
{
  1073e8:	e92d4800 	push	{fp, lr}
  1073ec:	e28db004 	add	fp, sp, #4
    rt_mutex_release(&sal_core_lock);
  1073f0:	e30e0468 	movw	r0, #58472	; 0xe468
  1073f4:	e3400014 	movt	r0, #20
  1073f8:	ebffe6de 	bl	100f78 <rt_mutex_release>
}
  1073fc:	e320f000 	nop	{0}
  107400:	e8bd8800 	pop	{fp, pc}

00107404 <sal_netdev_cleanup>:
 * This function will clean the netdev.
 *
 * @note please don't invoke it on ISR.
 */
int sal_netdev_cleanup(struct netdev *netdev)
{
  107404:	e92d4800 	push	{fp, lr}
  107408:	e28db004 	add	fp, sp, #4
  10740c:	e24dd010 	sub	sp, sp, #16
  107410:	e50b0010 	str	r0, [fp, #-16]
    int idx = 0, find_dev;
  107414:	e3a03000 	mov	r3, #0
  107418:	e50b3008 	str	r3, [fp, #-8]

    do
    {
        find_dev = 0;
  10741c:	e3a03000 	mov	r3, #0
  107420:	e50b300c 	str	r3, [fp, #-12]
        sal_lock();
  107424:	ebffffdb 	bl	107398 <sal_lock>
        for (idx = 0; idx < socket_table.max_socket; idx++)
  107428:	e3a03000 	mov	r3, #0
  10742c:	e50b3008 	str	r3, [fp, #-8]
  107430:	ea000019 	b	10749c <sal_netdev_cleanup+0x98>
        {
            if (socket_table.sockets[idx] && socket_table.sockets[idx]->netdev == netdev)
  107434:	e30e3460 	movw	r3, #58464	; 0xe460
  107438:	e3403014 	movt	r3, #20
  10743c:	e5932004 	ldr	r2, [r3, #4]
  107440:	e51b3008 	ldr	r3, [fp, #-8]
  107444:	e1a03103 	lsl	r3, r3, #2
  107448:	e0823003 	add	r3, r2, r3
  10744c:	e5933000 	ldr	r3, [r3]
  107450:	e3530000 	cmp	r3, #0
  107454:	0a00000d 	beq	107490 <sal_netdev_cleanup+0x8c>
  107458:	e30e3460 	movw	r3, #58464	; 0xe460
  10745c:	e3403014 	movt	r3, #20
  107460:	e5932004 	ldr	r2, [r3, #4]
  107464:	e51b3008 	ldr	r3, [fp, #-8]
  107468:	e1a03103 	lsl	r3, r3, #2
  10746c:	e0823003 	add	r3, r2, r3
  107470:	e5933000 	ldr	r3, [r3]
  107474:	e5933014 	ldr	r3, [r3, #20]
  107478:	e51b2010 	ldr	r2, [fp, #-16]
  10747c:	e1520003 	cmp	r2, r3
  107480:	1a000002 	bne	107490 <sal_netdev_cleanup+0x8c>
            {
                find_dev = 1;
  107484:	e3a03001 	mov	r3, #1
  107488:	e50b300c 	str	r3, [fp, #-12]
                break;
  10748c:	ea000008 	b	1074b4 <sal_netdev_cleanup+0xb0>
        for (idx = 0; idx < socket_table.max_socket; idx++)
  107490:	e51b3008 	ldr	r3, [fp, #-8]
  107494:	e2833001 	add	r3, r3, #1
  107498:	e50b3008 	str	r3, [fp, #-8]
  10749c:	e30e3460 	movw	r3, #58464	; 0xe460
  1074a0:	e3403014 	movt	r3, #20
  1074a4:	e5932000 	ldr	r2, [r3]
  1074a8:	e51b3008 	ldr	r3, [fp, #-8]
  1074ac:	e1520003 	cmp	r2, r3
  1074b0:	8affffdf 	bhi	107434 <sal_netdev_cleanup+0x30>
            }
        }
        sal_unlock();
  1074b4:	ebffffcb 	bl	1073e8 <sal_unlock>
        if (find_dev)
  1074b8:	e51b300c 	ldr	r3, [fp, #-12]
  1074bc:	e3530000 	cmp	r3, #0
  1074c0:	0a000001 	beq	1074cc <sal_netdev_cleanup+0xc8>
        {
            rt_thread_mdelay(100);
  1074c4:	e3a00064 	mov	r0, #100	; 0x64
  1074c8:	ebffea6b 	bl	101e7c <rt_thread_mdelay>
        }
    }
    while (find_dev);
  1074cc:	e51b300c 	ldr	r3, [fp, #-12]
  1074d0:	e3530000 	cmp	r3, #0
  1074d4:	1affffd0 	bne	10741c <sal_netdev_cleanup+0x18>

    return 0;
  1074d8:	e3a03000 	mov	r3, #0
}
  1074dc:	e1a00003 	mov	r0, r3
  1074e0:	e24bd004 	sub	sp, fp, #4
  1074e4:	e8bd8800 	pop	{fp, pc}

001074e8 <socket_init>:
 *         -1 : input the wrong family
 *         -2 : input the wrong socket type
 *         -3 : get network interface failed
 */
static int socket_init(int family, int type, int protocol, struct sal_socket **res)
{
  1074e8:	e92d4800 	push	{fp, lr}
  1074ec:	e28db004 	add	fp, sp, #4
  1074f0:	e24dd028 	sub	sp, sp, #40	; 0x28
  1074f4:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  1074f8:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  1074fc:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  107500:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4

    struct sal_socket *sock;
    struct sal_proto_family *pf;
    struct netdev *netdv_def = netdev_default;
  107504:	e3003564 	movw	r3, #1380	; 0x564
  107508:	e3403015 	movt	r3, #21
  10750c:	e5933000 	ldr	r3, [r3]
  107510:	e50b300c 	str	r3, [fp, #-12]
    struct netdev *netdev = RT_NULL;
  107514:	e3a03000 	mov	r3, #0
  107518:	e50b3010 	str	r3, [fp, #-16]
    rt_bool_t flag = RT_FALSE;
  10751c:	e3a03000 	mov	r3, #0
  107520:	e50b3008 	str	r3, [fp, #-8]

    if (family < 0 || family > AF_MAX)
  107524:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107528:	e3530000 	cmp	r3, #0
  10752c:	ba000002 	blt	10753c <socket_init+0x54>
  107530:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107534:	e353002f 	cmp	r3, #47	; 0x2f
  107538:	da000001 	ble	107544 <socket_init+0x5c>
    {
        return -1;
  10753c:	e3e03000 	mvn	r3, #0
  107540:	ea000050 	b	107688 <socket_init+0x1a0>
    }

    if (type < 0 || type > SOCK_MAX)
  107544:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  107548:	e3530000 	cmp	r3, #0
  10754c:	ba000004 	blt	107564 <socket_init+0x7c>
  107550:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  107554:	e3a03001 	mov	r3, #1
  107558:	e3403008 	movt	r3, #8
  10755c:	e1520003 	cmp	r2, r3
  107560:	da000001 	ble	10756c <socket_init+0x84>
    {
        return -2;
  107564:	e3e03001 	mvn	r3, #1
  107568:	ea000046 	b	107688 <socket_init+0x1a0>
    }

    sock = *res;
  10756c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  107570:	e5933000 	ldr	r3, [r3]
  107574:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    sock->domain = family;
  107578:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10757c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  107580:	e5832008 	str	r2, [r3, #8]
    sock->type = type;
  107584:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  107588:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  10758c:	e583200c 	str	r2, [r3, #12]
    sock->protocol = protocol;
  107590:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  107594:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  107598:	e5832010 	str	r2, [r3, #16]

    if (netdv_def && netdev_is_up(netdv_def))
  10759c:	e51b300c 	ldr	r3, [fp, #-12]
  1075a0:	e3530000 	cmp	r3, #0
  1075a4:	0a00001e 	beq	107624 <socket_init+0x13c>
  1075a8:	e51b300c 	ldr	r3, [fp, #-12]
  1075ac:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1075b0:	e2033001 	and	r3, r3, #1
  1075b4:	e6ef3073 	uxtb	r3, r3
  1075b8:	e3530000 	cmp	r3, #0
  1075bc:	0a000018 	beq	107624 <socket_init+0x13c>
    {
        /* check default network interface device protocol family */
        pf = (struct sal_proto_family *) netdv_def->sal_user_data;
  1075c0:	e51b300c 	ldr	r3, [fp, #-12]
  1075c4:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  1075c8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        if (pf != RT_NULL && pf->skt_ops && (pf->family == family || pf->sec_family == family))
  1075cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1075d0:	e3530000 	cmp	r3, #0
  1075d4:	0a000012 	beq	107624 <socket_init+0x13c>
  1075d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1075dc:	e5933008 	ldr	r3, [r3, #8]
  1075e0:	e3530000 	cmp	r3, #0
  1075e4:	0a00000e 	beq	107624 <socket_init+0x13c>
  1075e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1075ec:	e5933000 	ldr	r3, [r3]
  1075f0:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1075f4:	e1520003 	cmp	r2, r3
  1075f8:	0a000004 	beq	107610 <socket_init+0x128>
  1075fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  107600:	e5933004 	ldr	r3, [r3, #4]
  107604:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  107608:	e1520003 	cmp	r2, r3
  10760c:	1a000004 	bne	107624 <socket_init+0x13c>
        {
            sock->netdev = netdv_def;
  107610:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  107614:	e51b200c 	ldr	r2, [fp, #-12]
  107618:	e5832014 	str	r2, [r3, #20]
            flag = RT_TRUE;
  10761c:	e3a03001 	mov	r3, #1
  107620:	e50b3008 	str	r3, [fp, #-8]
        }
    }

    if (flag == RT_FALSE)
  107624:	e51b3008 	ldr	r3, [fp, #-8]
  107628:	e3530000 	cmp	r3, #0
  10762c:	1a000014 	bne	107684 <socket_init+0x19c>
    {
        /* get network interface device by protocol family */
        netdev = netdev_get_by_family(family);
  107630:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  107634:	ebfff7e1 	bl	1055c0 <netdev_get_by_family>
  107638:	e50b0010 	str	r0, [fp, #-16]
        if (netdev == RT_NULL)
  10763c:	e51b3010 	ldr	r3, [fp, #-16]
  107640:	e3530000 	cmp	r3, #0
  107644:	1a00000b 	bne	107678 <socket_init+0x190>
        {
            LOG_E("not find network interface device by protocol family(%d).", family);
  107648:	e3060140 	movw	r0, #24896	; 0x6140
  10764c:	e3400014 	movt	r0, #20
  107650:	ebffeeaf 	bl	103114 <rt_kprintf>
  107654:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  107658:	e3060254 	movw	r0, #25172	; 0x6254
  10765c:	e3400014 	movt	r0, #20
  107660:	ebffeeab 	bl	103114 <rt_kprintf>
  107664:	e3060174 	movw	r0, #24948	; 0x6174
  107668:	e3400014 	movt	r0, #20
  10766c:	ebffeea8 	bl	103114 <rt_kprintf>
            return -3;
  107670:	e3e03002 	mvn	r3, #2
  107674:	ea000003 	b	107688 <socket_init+0x1a0>
        }

        sock->netdev = netdev;
  107678:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10767c:	e51b2010 	ldr	r2, [fp, #-16]
  107680:	e5832014 	str	r2, [r3, #20]
    }

    return 0;
  107684:	e3a03000 	mov	r3, #0
}
  107688:	e1a00003 	mov	r0, r3
  10768c:	e24bd004 	sub	sp, fp, #4
  107690:	e8bd8800 	pop	{fp, pc}

00107694 <socket_alloc>:

static int socket_alloc(struct sal_socket_table *st, int f_socket)
{
  107694:	e92d4810 	push	{r4, fp, lr}
  107698:	e28db008 	add	fp, sp, #8
  10769c:	e24dd01c 	sub	sp, sp, #28
  1076a0:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  1076a4:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
    int idx;

    /* find an empty socket entry */
    for (idx = f_socket; idx < (int) st->max_socket; idx++)
  1076a8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1076ac:	e50b3010 	str	r3, [fp, #-16]
  1076b0:	ea00000a 	b	1076e0 <socket_alloc+0x4c>
    {
        if (st->sockets[idx] == RT_NULL)
  1076b4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1076b8:	e5932004 	ldr	r2, [r3, #4]
  1076bc:	e51b3010 	ldr	r3, [fp, #-16]
  1076c0:	e1a03103 	lsl	r3, r3, #2
  1076c4:	e0823003 	add	r3, r2, r3
  1076c8:	e5933000 	ldr	r3, [r3]
  1076cc:	e3530000 	cmp	r3, #0
  1076d0:	0a000009 	beq	1076fc <socket_alloc+0x68>
    for (idx = f_socket; idx < (int) st->max_socket; idx++)
  1076d4:	e51b3010 	ldr	r3, [fp, #-16]
  1076d8:	e2833001 	add	r3, r3, #1
  1076dc:	e50b3010 	str	r3, [fp, #-16]
  1076e0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1076e4:	e5933000 	ldr	r3, [r3]
  1076e8:	e1a02003 	mov	r2, r3
  1076ec:	e51b3010 	ldr	r3, [fp, #-16]
  1076f0:	e1530002 	cmp	r3, r2
  1076f4:	baffffee 	blt	1076b4 <socket_alloc+0x20>
  1076f8:	ea000000 	b	107700 <socket_alloc+0x6c>
        {
            break;
  1076fc:	e320f000 	nop	{0}
        }
    }

    /* allocate a larger sockte container */
    if (idx == (int) st->max_socket &&  st->max_socket < SAL_SOCKETS_NUM)
  107700:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107704:	e5933000 	ldr	r3, [r3]
  107708:	e1a02003 	mov	r2, r3
  10770c:	e51b3010 	ldr	r3, [fp, #-16]
  107710:	e1530002 	cmp	r3, r2
  107714:	1a00002e 	bne	1077d4 <socket_alloc+0x140>
  107718:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10771c:	e5933000 	ldr	r3, [r3]
  107720:	e353001f 	cmp	r3, #31
  107724:	8a00002a 	bhi	1077d4 <socket_alloc+0x140>
    {
        int cnt, index;
        struct sal_socket **sockets;

        /* increase the number of socket with 4 step length */
        cnt = st->max_socket + SOCKET_TABLE_STEP_LEN;
  107728:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10772c:	e5933000 	ldr	r3, [r3]
  107730:	e2833004 	add	r3, r3, #4
  107734:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        cnt = cnt > SAL_SOCKETS_NUM ? SAL_SOCKETS_NUM : cnt;
  107738:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10773c:	e3530020 	cmp	r3, #32
  107740:	b1a03003 	movlt	r3, r3
  107744:	a3a03020 	movge	r3, #32
  107748:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

        sockets = rt_realloc(st->sockets, cnt * sizeof(struct sal_socket *));
  10774c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107750:	e5932004 	ldr	r2, [r3, #4]
  107754:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  107758:	e1a03103 	lsl	r3, r3, #2
  10775c:	e1a01003 	mov	r1, r3
  107760:	e1a00002 	mov	r0, r2
  107764:	ebffee1c 	bl	102fdc <rt_realloc>
  107768:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
        if (sockets == RT_NULL)
  10776c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  107770:	e3530000 	cmp	r3, #0
  107774:	0a00003a 	beq	107864 <socket_alloc+0x1d0>
            goto __result; /* return st->max_socket */

        /* clean the new allocated fds */
        for (index = st->max_socket; index < cnt; index++)
  107778:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10777c:	e5933000 	ldr	r3, [r3]
  107780:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  107784:	ea000008 	b	1077ac <socket_alloc+0x118>
        {
            sockets[index] = RT_NULL;
  107788:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10778c:	e1a03103 	lsl	r3, r3, #2
  107790:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  107794:	e0823003 	add	r3, r2, r3
  107798:	e3a02000 	mov	r2, #0
  10779c:	e5832000 	str	r2, [r3]
        for (index = st->max_socket; index < cnt; index++)
  1077a0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1077a4:	e2833001 	add	r3, r3, #1
  1077a8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  1077ac:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1077b0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1077b4:	e1520003 	cmp	r2, r3
  1077b8:	bafffff2 	blt	107788 <socket_alloc+0xf4>
        }

        st->sockets = sockets;
  1077bc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1077c0:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1077c4:	e5832004 	str	r2, [r3, #4]
        st->max_socket = cnt;
  1077c8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1077cc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1077d0:	e5832000 	str	r2, [r3]
    }

    /* allocate  'struct sal_socket' */
    if (idx < (int) st->max_socket && st->sockets[idx] == RT_NULL)
  1077d4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1077d8:	e5933000 	ldr	r3, [r3]
  1077dc:	e1a02003 	mov	r2, r3
  1077e0:	e51b3010 	ldr	r3, [fp, #-16]
  1077e4:	e1530002 	cmp	r3, r2
  1077e8:	aa00001f 	bge	10786c <socket_alloc+0x1d8>
  1077ec:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1077f0:	e5932004 	ldr	r2, [r3, #4]
  1077f4:	e51b3010 	ldr	r3, [fp, #-16]
  1077f8:	e1a03103 	lsl	r3, r3, #2
  1077fc:	e0823003 	add	r3, r2, r3
  107800:	e5933000 	ldr	r3, [r3]
  107804:	e3530000 	cmp	r3, #0
  107808:	1a000017 	bne	10786c <socket_alloc+0x1d8>
    {
        st->sockets[idx] = rt_calloc(1, sizeof(struct sal_socket));
  10780c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107810:	e5932004 	ldr	r2, [r3, #4]
  107814:	e51b3010 	ldr	r3, [fp, #-16]
  107818:	e1a03103 	lsl	r3, r3, #2
  10781c:	e0824003 	add	r4, r2, r3
  107820:	e3a0101c 	mov	r1, #28
  107824:	e3a00001 	mov	r0, #1
  107828:	ebffedf7 	bl	10300c <rt_calloc>
  10782c:	e1a03000 	mov	r3, r0
  107830:	e5843000 	str	r3, [r4]
        if (st->sockets[idx] == RT_NULL)
  107834:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107838:	e5932004 	ldr	r2, [r3, #4]
  10783c:	e51b3010 	ldr	r3, [fp, #-16]
  107840:	e1a03103 	lsl	r3, r3, #2
  107844:	e0823003 	add	r3, r2, r3
  107848:	e5933000 	ldr	r3, [r3]
  10784c:	e3530000 	cmp	r3, #0
  107850:	1a000005 	bne	10786c <socket_alloc+0x1d8>
        {
            idx = st->max_socket;
  107854:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107858:	e5933000 	ldr	r3, [r3]
  10785c:	e50b3010 	str	r3, [fp, #-16]
  107860:	ea000002 	b	107870 <socket_alloc+0x1dc>
            goto __result; /* return st->max_socket */
  107864:	e320f000 	nop	{0}
  107868:	ea000000 	b	107870 <socket_alloc+0x1dc>
        }
    }

__result:
  10786c:	e320f000 	nop	{0}
    return idx;
  107870:	e51b3010 	ldr	r3, [fp, #-16]
}
  107874:	e1a00003 	mov	r0, r3
  107878:	e24bd008 	sub	sp, fp, #8
  10787c:	e8bd8810 	pop	{r4, fp, pc}

00107880 <socket_free>:

static void socket_free(struct sal_socket_table *st, int idx)
{
  107880:	e92d4800 	push	{fp, lr}
  107884:	e28db004 	add	fp, sp, #4
  107888:	e24dd010 	sub	sp, sp, #16
  10788c:	e50b0010 	str	r0, [fp, #-16]
  107890:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    struct sal_socket *sock;

    sock = st->sockets[idx];
  107894:	e51b3010 	ldr	r3, [fp, #-16]
  107898:	e5932004 	ldr	r2, [r3, #4]
  10789c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1078a0:	e1a03103 	lsl	r3, r3, #2
  1078a4:	e0823003 	add	r3, r2, r3
  1078a8:	e5933000 	ldr	r3, [r3]
  1078ac:	e50b3008 	str	r3, [fp, #-8]
    st->sockets[idx] = RT_NULL;
  1078b0:	e51b3010 	ldr	r3, [fp, #-16]
  1078b4:	e5932004 	ldr	r2, [r3, #4]
  1078b8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1078bc:	e1a03103 	lsl	r3, r3, #2
  1078c0:	e0823003 	add	r3, r2, r3
  1078c4:	e3a02000 	mov	r2, #0
  1078c8:	e5832000 	str	r2, [r3]
    rt_free(sock);
  1078cc:	e51b0008 	ldr	r0, [fp, #-8]
  1078d0:	ebffedb9 	bl	102fbc <rt_free>
}
  1078d4:	e320f000 	nop	{0}
  1078d8:	e24bd004 	sub	sp, fp, #4
  1078dc:	e8bd8800 	pop	{fp, pc}

001078e0 <socket_new>:

static int socket_new(void)
{
  1078e0:	e92d4800 	push	{fp, lr}
  1078e4:	e28db004 	add	fp, sp, #4
  1078e8:	e24dd010 	sub	sp, sp, #16
    struct sal_socket *sock;
    struct sal_socket_table *st = &socket_table;
  1078ec:	e30e3460 	movw	r3, #58464	; 0xe460
  1078f0:	e3403014 	movt	r3, #20
  1078f4:	e50b300c 	str	r3, [fp, #-12]
    int idx;

    sal_lock();
  1078f8:	ebfffea6 	bl	107398 <sal_lock>

    /* find an empty sal socket entry */
    idx = socket_alloc(st, 0);
  1078fc:	e3a01000 	mov	r1, #0
  107900:	e51b000c 	ldr	r0, [fp, #-12]
  107904:	ebffff62 	bl	107694 <socket_alloc>
  107908:	e50b0008 	str	r0, [fp, #-8]

    /* can't find an empty sal socket entry */
    if (idx == (int) st->max_socket)
  10790c:	e51b300c 	ldr	r3, [fp, #-12]
  107910:	e5933000 	ldr	r3, [r3]
  107914:	e1a02003 	mov	r2, r3
  107918:	e51b3008 	ldr	r3, [fp, #-8]
  10791c:	e1530002 	cmp	r3, r2
  107920:	1a000002 	bne	107930 <socket_new+0x50>
    {
        idx = -(1 + SAL_SOCKET_OFFSET);
  107924:	e3e03000 	mvn	r3, #0
  107928:	e50b3008 	str	r3, [fp, #-8]
        goto __result;
  10792c:	ea000012 	b	10797c <socket_new+0x9c>
    }

    sock = st->sockets[idx];
  107930:	e51b300c 	ldr	r3, [fp, #-12]
  107934:	e5932004 	ldr	r2, [r3, #4]
  107938:	e51b3008 	ldr	r3, [fp, #-8]
  10793c:	e1a03103 	lsl	r3, r3, #2
  107940:	e0823003 	add	r3, r2, r3
  107944:	e5933000 	ldr	r3, [r3]
  107948:	e50b3010 	str	r3, [fp, #-16]
    sock->socket = idx + SAL_SOCKET_OFFSET;
  10794c:	e51b3010 	ldr	r3, [fp, #-16]
  107950:	e51b2008 	ldr	r2, [fp, #-8]
  107954:	e5832004 	str	r2, [r3, #4]
    sock->magic = SAL_SOCKET_MAGIC;
  107958:	e51b3010 	ldr	r3, [fp, #-16]
  10795c:	e3052a10 	movw	r2, #23056	; 0x5a10
  107960:	e5832000 	str	r2, [r3]
    sock->netdev = RT_NULL;
  107964:	e51b3010 	ldr	r3, [fp, #-16]
  107968:	e3a02000 	mov	r2, #0
  10796c:	e5832014 	str	r2, [r3, #20]
    sock->user_data = RT_NULL;
  107970:	e51b3010 	ldr	r3, [fp, #-16]
  107974:	e3a02000 	mov	r2, #0
  107978:	e5832018 	str	r2, [r3, #24]
#ifdef SAL_USING_TLS
    sock->user_data_tls = RT_NULL;
#endif

__result:
    sal_unlock();
  10797c:	ebfffe99 	bl	1073e8 <sal_unlock>
    return idx + SAL_SOCKET_OFFSET;
  107980:	e51b3008 	ldr	r3, [fp, #-8]
}
  107984:	e1a00003 	mov	r0, r3
  107988:	e24bd004 	sub	sp, fp, #4
  10798c:	e8bd8800 	pop	{fp, pc}

00107990 <socket_delete>:

static void socket_delete(int socket)
{
  107990:	e92d4800 	push	{fp, lr}
  107994:	e28db004 	add	fp, sp, #4
  107998:	e24dd018 	sub	sp, sp, #24
  10799c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    struct sal_socket *sock;
    struct sal_socket_table *st = &socket_table;
  1079a0:	e30e3460 	movw	r3, #58464	; 0xe460
  1079a4:	e3403014 	movt	r3, #20
  1079a8:	e50b3008 	str	r3, [fp, #-8]
    int idx;

    idx = socket - SAL_SOCKET_OFFSET;
  1079ac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1079b0:	e50b300c 	str	r3, [fp, #-12]
    if (idx < 0 || idx >= (int) st->max_socket)
  1079b4:	e51b300c 	ldr	r3, [fp, #-12]
  1079b8:	e3530000 	cmp	r3, #0
  1079bc:	ba00001d 	blt	107a38 <socket_delete+0xa8>
  1079c0:	e51b3008 	ldr	r3, [fp, #-8]
  1079c4:	e5933000 	ldr	r3, [r3]
  1079c8:	e1a02003 	mov	r2, r3
  1079cc:	e51b300c 	ldr	r3, [fp, #-12]
  1079d0:	e1530002 	cmp	r3, r2
  1079d4:	aa000017 	bge	107a38 <socket_delete+0xa8>
    {
        return;
    }
    sal_lock();
  1079d8:	ebfffe6e 	bl	107398 <sal_lock>
    sock = sal_get_socket(socket);
  1079dc:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1079e0:	ebfffe41 	bl	1072ec <sal_get_socket>
  1079e4:	e50b0010 	str	r0, [fp, #-16]
    RT_ASSERT(sock != RT_NULL);
  1079e8:	e51b3010 	ldr	r3, [fp, #-16]
  1079ec:	e3530000 	cmp	r3, #0
  1079f0:	1a000005 	bne	107a0c <socket_delete+0x7c>
  1079f4:	e3002223 	movw	r2, #547	; 0x223
  1079f8:	e3061330 	movw	r1, #25392	; 0x6330
  1079fc:	e3401014 	movt	r1, #20
  107a00:	e3060290 	movw	r0, #25232	; 0x6290
  107a04:	e3400014 	movt	r0, #20
  107a08:	ebffeee2 	bl	103598 <rt_assert_handler>
    sock->magic = 0;
  107a0c:	e51b3010 	ldr	r3, [fp, #-16]
  107a10:	e3a02000 	mov	r2, #0
  107a14:	e5832000 	str	r2, [r3]
    sock->netdev = RT_NULL;
  107a18:	e51b3010 	ldr	r3, [fp, #-16]
  107a1c:	e3a02000 	mov	r2, #0
  107a20:	e5832014 	str	r2, [r3, #20]
    socket_free(st, idx);
  107a24:	e51b100c 	ldr	r1, [fp, #-12]
  107a28:	e51b0008 	ldr	r0, [fp, #-8]
  107a2c:	ebffff93 	bl	107880 <socket_free>
    sal_unlock();
  107a30:	ebfffe6c 	bl	1073e8 <sal_unlock>
  107a34:	ea000000 	b	107a3c <socket_delete+0xac>
        return;
  107a38:	e320f000 	nop	{0}
}
  107a3c:	e24bd004 	sub	sp, fp, #4
  107a40:	e8bd8800 	pop	{fp, pc}

00107a44 <sal_accept>:

int sal_accept(int socket, struct sockaddr *addr, socklen_t *addrlen)
{
  107a44:	e92d4800 	push	{fp, lr}
  107a48:	e28db004 	add	fp, sp, #4
  107a4c:	e24dd028 	sub	sp, sp, #40	; 0x28
  107a50:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  107a54:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  107a58:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
    int new_socket;
    struct sal_socket *sock;
    struct sal_proto_family *pf;

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  107a5c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  107a60:	ebfffe21 	bl	1072ec <sal_get_socket>
  107a64:	e50b0008 	str	r0, [fp, #-8]
  107a68:	e51b3008 	ldr	r3, [fp, #-8]
  107a6c:	e3530000 	cmp	r3, #0
  107a70:	1a000001 	bne	107a7c <sal_accept+0x38>
  107a74:	e3e03000 	mvn	r3, #0
  107a78:	ea000059 	b	107be4 <sal_accept+0x1a0>

    /* check the network interface is up status */
    SAL_NETDEV_IS_UP(sock->netdev);
  107a7c:	e51b3008 	ldr	r3, [fp, #-8]
  107a80:	e5933014 	ldr	r3, [r3, #20]
  107a84:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  107a88:	e2033001 	and	r3, r3, #1
  107a8c:	e3530000 	cmp	r3, #0
  107a90:	1a000001 	bne	107a9c <sal_accept+0x58>
  107a94:	e3e03000 	mvn	r3, #0
  107a98:	ea000051 	b	107be4 <sal_accept+0x1a0>

    /* check the network interface socket operations */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, accept);
  107a9c:	e51b3008 	ldr	r3, [fp, #-8]
  107aa0:	e5933014 	ldr	r3, [r3, #20]
  107aa4:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  107aa8:	e50b300c 	str	r3, [fp, #-12]
  107aac:	e51b300c 	ldr	r3, [fp, #-12]
  107ab0:	e5933008 	ldr	r3, [r3, #8]
  107ab4:	e5933014 	ldr	r3, [r3, #20]
  107ab8:	e3530000 	cmp	r3, #0
  107abc:	1a000001 	bne	107ac8 <sal_accept+0x84>
  107ac0:	e3e03000 	mvn	r3, #0
  107ac4:	ea000046 	b	107be4 <sal_accept+0x1a0>

    new_socket = pf->skt_ops->accept((int)(size_t)sock->user_data, addr, addrlen);
  107ac8:	e51b300c 	ldr	r3, [fp, #-12]
  107acc:	e5933008 	ldr	r3, [r3, #8]
  107ad0:	e5933014 	ldr	r3, [r3, #20]
  107ad4:	e51b2008 	ldr	r2, [fp, #-8]
  107ad8:	e5922018 	ldr	r2, [r2, #24]
  107adc:	e1a00002 	mov	r0, r2
  107ae0:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  107ae4:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  107ae8:	e12fff33 	blx	r3
  107aec:	e50b0010 	str	r0, [fp, #-16]
    if (new_socket != -1)
  107af0:	e51b3010 	ldr	r3, [fp, #-16]
  107af4:	e3730001 	cmn	r3, #1
  107af8:	0a000038 	beq	107be0 <sal_accept+0x19c>
        int retval;
        int new_sal_socket;
        struct sal_socket *new_sock;

        /* allocate a new socket structure and registered socket options */
        new_sal_socket = socket_new();
  107afc:	ebffff77 	bl	1078e0 <socket_new>
  107b00:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
        new_sock = sal_get_socket(new_sal_socket);
  107b04:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  107b08:	ebfffdf7 	bl	1072ec <sal_get_socket>
  107b0c:	e1a03000 	mov	r3, r0
  107b10:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
        if (new_sock == RT_NULL)
  107b14:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  107b18:	e3530000 	cmp	r3, #0
  107b1c:	1a000006 	bne	107b3c <sal_accept+0xf8>
        {
            pf->skt_ops->closesocket(new_socket);
  107b20:	e51b300c 	ldr	r3, [fp, #-12]
  107b24:	e5933008 	ldr	r3, [r3, #8]
  107b28:	e5933004 	ldr	r3, [r3, #4]
  107b2c:	e51b0010 	ldr	r0, [fp, #-16]
  107b30:	e12fff33 	blx	r3
            return -1;
  107b34:	e3e03000 	mvn	r3, #0
  107b38:	ea000029 	b	107be4 <sal_accept+0x1a0>
        }

        retval = socket_init(sock->domain, sock->type, sock->protocol, &new_sock);
  107b3c:	e51b3008 	ldr	r3, [fp, #-8]
  107b40:	e5930008 	ldr	r0, [r3, #8]
  107b44:	e51b3008 	ldr	r3, [fp, #-8]
  107b48:	e593100c 	ldr	r1, [r3, #12]
  107b4c:	e51b3008 	ldr	r3, [fp, #-8]
  107b50:	e5932010 	ldr	r2, [r3, #16]
  107b54:	e24b301c 	sub	r3, fp, #28
  107b58:	ebfffe62 	bl	1074e8 <socket_init>
  107b5c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
        if (retval < 0)
  107b60:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  107b64:	e3530000 	cmp	r3, #0
  107b68:	aa000017 	bge	107bcc <sal_accept+0x188>
        {
            pf->skt_ops->closesocket(new_socket);
  107b6c:	e51b300c 	ldr	r3, [fp, #-12]
  107b70:	e5933008 	ldr	r3, [r3, #8]
  107b74:	e5933004 	ldr	r3, [r3, #4]
  107b78:	e51b0010 	ldr	r0, [fp, #-16]
  107b7c:	e12fff33 	blx	r3
            rt_memset(new_sock, 0x00, sizeof(struct sal_socket));
  107b80:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  107b84:	e3a0201c 	mov	r2, #28
  107b88:	e3a01000 	mov	r1, #0
  107b8c:	e1a00003 	mov	r0, r3
  107b90:	ebffedcc 	bl	1032c8 <rt_memset>
            /* socket init failed, delete socket */
            socket_delete(new_sal_socket);
  107b94:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  107b98:	ebffff7c 	bl	107990 <socket_delete>
            LOG_E("New socket registered failed, return error %d.", retval);
  107b9c:	e3060140 	movw	r0, #24896	; 0x6140
  107ba0:	e3400014 	movt	r0, #20
  107ba4:	ebffed5a 	bl	103114 <rt_kprintf>
  107ba8:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  107bac:	e30602a0 	movw	r0, #25248	; 0x62a0
  107bb0:	e3400014 	movt	r0, #20
  107bb4:	ebffed56 	bl	103114 <rt_kprintf>
  107bb8:	e3060174 	movw	r0, #24948	; 0x6174
  107bbc:	e3400014 	movt	r0, #20
  107bc0:	ebffed53 	bl	103114 <rt_kprintf>
            return -1;
  107bc4:	e3e03000 	mvn	r3, #0
  107bc8:	ea000005 	b	107be4 <sal_accept+0x1a0>
        }

        /* socket structure user_data used to store the acquired new socket */
        new_sock->user_data = (void *)(size_t)new_socket;
  107bcc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  107bd0:	e51b2010 	ldr	r2, [fp, #-16]
  107bd4:	e5832018 	str	r2, [r3, #24]

        return new_sal_socket;
  107bd8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  107bdc:	ea000000 	b	107be4 <sal_accept+0x1a0>
    }

    return -1;
  107be0:	e3e03000 	mvn	r3, #0
}
  107be4:	e1a00003 	mov	r0, r3
  107be8:	e24bd004 	sub	sp, fp, #4
  107bec:	e8bd8800 	pop	{fp, pc}

00107bf0 <sal_sockaddr_to_ipaddr>:

static void sal_sockaddr_to_ipaddr(const struct sockaddr *name, ip_addr_t *local_ipaddr)
{
  107bf0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  107bf4:	e28db000 	add	fp, sp, #0
  107bf8:	e24dd014 	sub	sp, sp, #20
  107bfc:	e50b0010 	str	r0, [fp, #-16]
  107c00:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    const struct sockaddr_in *svr_addr = (const struct sockaddr_in *) name;
  107c04:	e51b3010 	ldr	r3, [fp, #-16]
  107c08:	e50b3008 	str	r3, [fp, #-8]

#if NETDEV_IPV4 && NETDEV_IPV6
    local_ipaddr->u_addr.ip4.addr = svr_addr->sin_addr.s_addr;
    local_ipaddr->type = IPADDR_TYPE_V4;
#elif NETDEV_IPV4
    local_ipaddr->addr = svr_addr->sin_addr.s_addr;
  107c0c:	e51b3008 	ldr	r3, [fp, #-8]
  107c10:	e5932004 	ldr	r2, [r3, #4]
  107c14:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  107c18:	e5832000 	str	r2, [r3]
#elif NETDEV_IPV6
#error "not only support IPV6"
#endif /* NETDEV_IPV4 && NETDEV_IPV6*/
}
  107c1c:	e320f000 	nop	{0}
  107c20:	e28bd000 	add	sp, fp, #0
  107c24:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  107c28:	e12fff1e 	bx	lr

00107c2c <sal_bind>:

int sal_bind(int socket, const struct sockaddr *name, socklen_t namelen)
{
  107c2c:	e92d4800 	push	{fp, lr}
  107c30:	e28db004 	add	fp, sp, #4
  107c34:	e24dd030 	sub	sp, sp, #48	; 0x30
  107c38:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  107c3c:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  107c40:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
    struct sal_socket *sock;
    struct sal_proto_family *pf;
    ip_addr_t input_ipaddr;

    RT_ASSERT(name);
  107c44:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  107c48:	e3530000 	cmp	r3, #0
  107c4c:	1a000005 	bne	107c68 <sal_bind+0x3c>
  107c50:	e3002271 	movw	r2, #625	; 0x271
  107c54:	e3061340 	movw	r1, #25408	; 0x6340
  107c58:	e3401014 	movt	r1, #20
  107c5c:	e30602d0 	movw	r0, #25296	; 0x62d0
  107c60:	e3400014 	movt	r0, #20
  107c64:	ebffee4b 	bl	103598 <rt_assert_handler>

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  107c68:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  107c6c:	ebfffd9e 	bl	1072ec <sal_get_socket>
  107c70:	e50b0008 	str	r0, [fp, #-8]
  107c74:	e51b3008 	ldr	r3, [fp, #-8]
  107c78:	e3530000 	cmp	r3, #0
  107c7c:	1a000001 	bne	107c88 <sal_bind+0x5c>
  107c80:	e3e03000 	mvn	r3, #0
  107c84:	ea000062 	b	107e14 <sal_bind+0x1e8>

    /* bind network interface by ip address */
    sal_sockaddr_to_ipaddr(name, &input_ipaddr);
  107c88:	e24b3020 	sub	r3, fp, #32
  107c8c:	e1a01003 	mov	r1, r3
  107c90:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
  107c94:	ebffffd5 	bl	107bf0 <sal_sockaddr_to_ipaddr>

    /* check input ipaddr is default netdev ipaddr */
    if (!ip_addr_isany_val(input_ipaddr))
  107c98:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  107c9c:	e3530000 	cmp	r3, #0
  107ca0:	0a000046 	beq	107dc0 <sal_bind+0x194>
    {
        struct sal_proto_family *input_pf = RT_NULL, *local_pf = RT_NULL;
  107ca4:	e3a03000 	mov	r3, #0
  107ca8:	e50b300c 	str	r3, [fp, #-12]
  107cac:	e3a03000 	mov	r3, #0
  107cb0:	e50b3010 	str	r3, [fp, #-16]
        struct netdev *new_netdev = RT_NULL;
  107cb4:	e3a03000 	mov	r3, #0
  107cb8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

        new_netdev = netdev_get_by_ipaddr(&input_ipaddr);
  107cbc:	e24b3020 	sub	r3, fp, #32
  107cc0:	e1a00003 	mov	r0, r3
  107cc4:	ebfff5df 	bl	105448 <netdev_get_by_ipaddr>
  107cc8:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
        if (new_netdev == RT_NULL)
  107ccc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  107cd0:	e3530000 	cmp	r3, #0
  107cd4:	1a000001 	bne	107ce0 <sal_bind+0xb4>
        {
            return -1;
  107cd8:	e3e03000 	mvn	r3, #0
  107cdc:	ea00004c 	b	107e14 <sal_bind+0x1e8>
        }

        /* get input and local ip address proto_family */
        SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, local_pf, bind);
  107ce0:	e51b3008 	ldr	r3, [fp, #-8]
  107ce4:	e5933014 	ldr	r3, [r3, #20]
  107ce8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  107cec:	e50b3010 	str	r3, [fp, #-16]
  107cf0:	e51b3010 	ldr	r3, [fp, #-16]
  107cf4:	e5933008 	ldr	r3, [r3, #8]
  107cf8:	e5933008 	ldr	r3, [r3, #8]
  107cfc:	e3530000 	cmp	r3, #0
  107d00:	1a000001 	bne	107d0c <sal_bind+0xe0>
  107d04:	e3e03000 	mvn	r3, #0
  107d08:	ea000041 	b	107e14 <sal_bind+0x1e8>
        SAL_NETDEV_SOCKETOPS_VALID(new_netdev, input_pf, bind);
  107d0c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  107d10:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  107d14:	e50b300c 	str	r3, [fp, #-12]
  107d18:	e51b300c 	ldr	r3, [fp, #-12]
  107d1c:	e5933008 	ldr	r3, [r3, #8]
  107d20:	e5933008 	ldr	r3, [r3, #8]
  107d24:	e3530000 	cmp	r3, #0
  107d28:	1a000001 	bne	107d34 <sal_bind+0x108>
  107d2c:	e3e03000 	mvn	r3, #0
  107d30:	ea000037 	b	107e14 <sal_bind+0x1e8>

        /* check the network interface protocol family type */
        if (input_pf->family != local_pf->family)
  107d34:	e51b300c 	ldr	r3, [fp, #-12]
  107d38:	e5932000 	ldr	r2, [r3]
  107d3c:	e51b3010 	ldr	r3, [fp, #-16]
  107d40:	e5933000 	ldr	r3, [r3]
  107d44:	e1520003 	cmp	r2, r3
  107d48:	0a00001c 	beq	107dc0 <sal_bind+0x194>
        {
            int new_socket = -1;
  107d4c:	e3e03000 	mvn	r3, #0
  107d50:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

            /* protocol family is different, close old socket and create new socket by input ip address */
            local_pf->skt_ops->closesocket(socket);
  107d54:	e51b3010 	ldr	r3, [fp, #-16]
  107d58:	e5933008 	ldr	r3, [r3, #8]
  107d5c:	e5933004 	ldr	r3, [r3, #4]
  107d60:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  107d64:	e12fff33 	blx	r3

            new_socket = input_pf->skt_ops->socket(input_pf->family, sock->type, sock->protocol);
  107d68:	e51b300c 	ldr	r3, [fp, #-12]
  107d6c:	e5933008 	ldr	r3, [r3, #8]
  107d70:	e5933000 	ldr	r3, [r3]
  107d74:	e51b200c 	ldr	r2, [fp, #-12]
  107d78:	e5920000 	ldr	r0, [r2]
  107d7c:	e51b2008 	ldr	r2, [fp, #-8]
  107d80:	e592100c 	ldr	r1, [r2, #12]
  107d84:	e51b2008 	ldr	r2, [fp, #-8]
  107d88:	e5922010 	ldr	r2, [r2, #16]
  107d8c:	e12fff33 	blx	r3
  107d90:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
            if (new_socket < 0)
  107d94:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  107d98:	e3530000 	cmp	r3, #0
  107d9c:	aa000001 	bge	107da8 <sal_bind+0x17c>
            {
                return -1;
  107da0:	e3e03000 	mvn	r3, #0
  107da4:	ea00001a 	b	107e14 <sal_bind+0x1e8>
            }
            sock->netdev = new_netdev;
  107da8:	e51b3008 	ldr	r3, [fp, #-8]
  107dac:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  107db0:	e5832014 	str	r2, [r3, #20]
            sock->user_data = (void *)(size_t)new_socket;
  107db4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  107db8:	e51b3008 	ldr	r3, [fp, #-8]
  107dbc:	e5832018 	str	r2, [r3, #24]
        }
    }

    /* check and get protocol families by the network interface device */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, bind);
  107dc0:	e51b3008 	ldr	r3, [fp, #-8]
  107dc4:	e5933014 	ldr	r3, [r3, #20]
  107dc8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  107dcc:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  107dd0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  107dd4:	e5933008 	ldr	r3, [r3, #8]
  107dd8:	e5933008 	ldr	r3, [r3, #8]
  107ddc:	e3530000 	cmp	r3, #0
  107de0:	1a000001 	bne	107dec <sal_bind+0x1c0>
  107de4:	e3e03000 	mvn	r3, #0
  107de8:	ea000009 	b	107e14 <sal_bind+0x1e8>
    return pf->skt_ops->bind((int)(size_t)sock->user_data, name, namelen);
  107dec:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  107df0:	e5933008 	ldr	r3, [r3, #8]
  107df4:	e5933008 	ldr	r3, [r3, #8]
  107df8:	e51b2008 	ldr	r2, [fp, #-8]
  107dfc:	e5922018 	ldr	r2, [r2, #24]
  107e00:	e1a00002 	mov	r0, r2
  107e04:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  107e08:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  107e0c:	e12fff33 	blx	r3
  107e10:	e1a03000 	mov	r3, r0
}
  107e14:	e1a00003 	mov	r0, r3
  107e18:	e24bd004 	sub	sp, fp, #4
  107e1c:	e8bd8800 	pop	{fp, pc}

00107e20 <sal_shutdown>:

int sal_shutdown(int socket, int how)
{
  107e20:	e92d4800 	push	{fp, lr}
  107e24:	e28db004 	add	fp, sp, #4
  107e28:	e24dd018 	sub	sp, sp, #24
  107e2c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  107e30:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    struct sal_socket *sock;
    struct sal_proto_family *pf;
    int error = 0;
  107e34:	e3a03000 	mov	r3, #0
  107e38:	e50b3008 	str	r3, [fp, #-8]

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  107e3c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  107e40:	ebfffd29 	bl	1072ec <sal_get_socket>
  107e44:	e50b000c 	str	r0, [fp, #-12]
  107e48:	e51b300c 	ldr	r3, [fp, #-12]
  107e4c:	e3530000 	cmp	r3, #0
  107e50:	1a000001 	bne	107e5c <sal_shutdown+0x3c>
  107e54:	e3e03000 	mvn	r3, #0
  107e58:	ea00001b 	b	107ecc <sal_shutdown+0xac>

    /* shutdown operation not need to check network interface status */
    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, shutdown);
  107e5c:	e51b300c 	ldr	r3, [fp, #-12]
  107e60:	e5933014 	ldr	r3, [r3, #20]
  107e64:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  107e68:	e50b3010 	str	r3, [fp, #-16]
  107e6c:	e51b3010 	ldr	r3, [fp, #-16]
  107e70:	e5933008 	ldr	r3, [r3, #8]
  107e74:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  107e78:	e3530000 	cmp	r3, #0
  107e7c:	1a000001 	bne	107e88 <sal_shutdown+0x68>
  107e80:	e3e03000 	mvn	r3, #0
  107e84:	ea000010 	b	107ecc <sal_shutdown+0xac>

    if (pf->skt_ops->shutdown((int)(size_t)sock->user_data, how) == 0)
  107e88:	e51b3010 	ldr	r3, [fp, #-16]
  107e8c:	e5933008 	ldr	r3, [r3, #8]
  107e90:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  107e94:	e51b200c 	ldr	r2, [fp, #-12]
  107e98:	e5922018 	ldr	r2, [r2, #24]
  107e9c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  107ea0:	e1a00002 	mov	r0, r2
  107ea4:	e12fff33 	blx	r3
  107ea8:	e1a03000 	mov	r3, r0
  107eac:	e3530000 	cmp	r3, #0
  107eb0:	1a000002 	bne	107ec0 <sal_shutdown+0xa0>
            {
                return -1;
            }
        }
#endif
        error = 0;
  107eb4:	e3a03000 	mov	r3, #0
  107eb8:	e50b3008 	str	r3, [fp, #-8]
  107ebc:	ea000001 	b	107ec8 <sal_shutdown+0xa8>
    }
    else
    {
        error = -1;
  107ec0:	e3e03000 	mvn	r3, #0
  107ec4:	e50b3008 	str	r3, [fp, #-8]
    }


    return error;
  107ec8:	e51b3008 	ldr	r3, [fp, #-8]
}
  107ecc:	e1a00003 	mov	r0, r3
  107ed0:	e24bd004 	sub	sp, fp, #4
  107ed4:	e8bd8800 	pop	{fp, pc}

00107ed8 <sal_getpeername>:

int sal_getpeername(int socket, struct sockaddr *name, socklen_t *namelen)
{
  107ed8:	e92d4800 	push	{fp, lr}
  107edc:	e28db004 	add	fp, sp, #4
  107ee0:	e24dd018 	sub	sp, sp, #24
  107ee4:	e50b0010 	str	r0, [fp, #-16]
  107ee8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  107eec:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    struct sal_socket *sock;
    struct sal_proto_family *pf;

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  107ef0:	e51b0010 	ldr	r0, [fp, #-16]
  107ef4:	ebfffcfc 	bl	1072ec <sal_get_socket>
  107ef8:	e50b0008 	str	r0, [fp, #-8]
  107efc:	e51b3008 	ldr	r3, [fp, #-8]
  107f00:	e3530000 	cmp	r3, #0
  107f04:	1a000001 	bne	107f10 <sal_getpeername+0x38>
  107f08:	e3e03000 	mvn	r3, #0
  107f0c:	ea000014 	b	107f64 <sal_getpeername+0x8c>

    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, getpeername);
  107f10:	e51b3008 	ldr	r3, [fp, #-8]
  107f14:	e5933014 	ldr	r3, [r3, #20]
  107f18:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  107f1c:	e50b300c 	str	r3, [fp, #-12]
  107f20:	e51b300c 	ldr	r3, [fp, #-12]
  107f24:	e5933008 	ldr	r3, [r3, #8]
  107f28:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  107f2c:	e3530000 	cmp	r3, #0
  107f30:	1a000001 	bne	107f3c <sal_getpeername+0x64>
  107f34:	e3e03000 	mvn	r3, #0
  107f38:	ea000009 	b	107f64 <sal_getpeername+0x8c>

    return pf->skt_ops->getpeername((int)(size_t)sock->user_data, name, namelen);
  107f3c:	e51b300c 	ldr	r3, [fp, #-12]
  107f40:	e5933008 	ldr	r3, [r3, #8]
  107f44:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  107f48:	e51b2008 	ldr	r2, [fp, #-8]
  107f4c:	e5922018 	ldr	r2, [r2, #24]
  107f50:	e1a00002 	mov	r0, r2
  107f54:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  107f58:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  107f5c:	e12fff33 	blx	r3
  107f60:	e1a03000 	mov	r3, r0
}
  107f64:	e1a00003 	mov	r0, r3
  107f68:	e24bd004 	sub	sp, fp, #4
  107f6c:	e8bd8800 	pop	{fp, pc}

00107f70 <sal_getsockname>:

int sal_getsockname(int socket, struct sockaddr *name, socklen_t *namelen)
{
  107f70:	e92d4800 	push	{fp, lr}
  107f74:	e28db004 	add	fp, sp, #4
  107f78:	e24dd018 	sub	sp, sp, #24
  107f7c:	e50b0010 	str	r0, [fp, #-16]
  107f80:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  107f84:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    struct sal_socket *sock;
    struct sal_proto_family *pf;

    /* get socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  107f88:	e51b0010 	ldr	r0, [fp, #-16]
  107f8c:	ebfffcd6 	bl	1072ec <sal_get_socket>
  107f90:	e50b0008 	str	r0, [fp, #-8]
  107f94:	e51b3008 	ldr	r3, [fp, #-8]
  107f98:	e3530000 	cmp	r3, #0
  107f9c:	1a000001 	bne	107fa8 <sal_getsockname+0x38>
  107fa0:	e3e03000 	mvn	r3, #0
  107fa4:	ea000014 	b	107ffc <sal_getsockname+0x8c>

    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, getsockname);
  107fa8:	e51b3008 	ldr	r3, [fp, #-8]
  107fac:	e5933014 	ldr	r3, [r3, #20]
  107fb0:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  107fb4:	e50b300c 	str	r3, [fp, #-12]
  107fb8:	e51b300c 	ldr	r3, [fp, #-12]
  107fbc:	e5933008 	ldr	r3, [r3, #8]
  107fc0:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  107fc4:	e3530000 	cmp	r3, #0
  107fc8:	1a000001 	bne	107fd4 <sal_getsockname+0x64>
  107fcc:	e3e03000 	mvn	r3, #0
  107fd0:	ea000009 	b	107ffc <sal_getsockname+0x8c>

    return pf->skt_ops->getsockname((int)(size_t)sock->user_data, name, namelen);
  107fd4:	e51b300c 	ldr	r3, [fp, #-12]
  107fd8:	e5933008 	ldr	r3, [r3, #8]
  107fdc:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  107fe0:	e51b2008 	ldr	r2, [fp, #-8]
  107fe4:	e5922018 	ldr	r2, [r2, #24]
  107fe8:	e1a00002 	mov	r0, r2
  107fec:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  107ff0:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  107ff4:	e12fff33 	blx	r3
  107ff8:	e1a03000 	mov	r3, r0
}
  107ffc:	e1a00003 	mov	r0, r3
  108000:	e24bd004 	sub	sp, fp, #4
  108004:	e8bd8800 	pop	{fp, pc}

00108008 <sal_getsockopt>:

int sal_getsockopt(int socket, int level, int optname, void *optval, socklen_t *optlen)
{
  108008:	e92d4810 	push	{r4, fp, lr}
  10800c:	e28db008 	add	fp, sp, #8
  108010:	e24dd024 	sub	sp, sp, #36	; 0x24
  108014:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  108018:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  10801c:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  108020:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    struct sal_socket *sock;
    struct sal_proto_family *pf;

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  108024:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  108028:	ebfffcaf 	bl	1072ec <sal_get_socket>
  10802c:	e50b0010 	str	r0, [fp, #-16]
  108030:	e51b3010 	ldr	r3, [fp, #-16]
  108034:	e3530000 	cmp	r3, #0
  108038:	1a000001 	bne	108044 <sal_getsockopt+0x3c>
  10803c:	e3e03000 	mvn	r3, #0
  108040:	ea000017 	b	1080a4 <sal_getsockopt+0x9c>

    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, getsockopt);
  108044:	e51b3010 	ldr	r3, [fp, #-16]
  108048:	e5933014 	ldr	r3, [r3, #20]
  10804c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108050:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  108054:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108058:	e5933008 	ldr	r3, [r3, #8]
  10805c:	e5933020 	ldr	r3, [r3, #32]
  108060:	e3530000 	cmp	r3, #0
  108064:	1a000001 	bne	108070 <sal_getsockopt+0x68>
  108068:	e3e03000 	mvn	r3, #0
  10806c:	ea00000c 	b	1080a4 <sal_getsockopt+0x9c>

    return pf->skt_ops->getsockopt((int)(size_t)sock->user_data, level, optname, optval, optlen);
  108070:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108074:	e5933008 	ldr	r3, [r3, #8]
  108078:	e5934020 	ldr	r4, [r3, #32]
  10807c:	e51b3010 	ldr	r3, [fp, #-16]
  108080:	e5933018 	ldr	r3, [r3, #24]
  108084:	e1a00003 	mov	r0, r3
  108088:	e59b3004 	ldr	r3, [fp, #4]
  10808c:	e58d3000 	str	r3, [sp]
  108090:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  108094:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  108098:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  10809c:	e12fff34 	blx	r4
  1080a0:	e1a03000 	mov	r3, r0
}
  1080a4:	e1a00003 	mov	r0, r3
  1080a8:	e24bd008 	sub	sp, fp, #8
  1080ac:	e8bd8810 	pop	{r4, fp, pc}

001080b0 <sal_setsockopt>:

int sal_setsockopt(int socket, int level, int optname, const void *optval, socklen_t optlen)
{
  1080b0:	e92d4810 	push	{r4, fp, lr}
  1080b4:	e28db008 	add	fp, sp, #8
  1080b8:	e24dd024 	sub	sp, sp, #36	; 0x24
  1080bc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1080c0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  1080c4:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  1080c8:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    struct sal_socket *sock;
    struct sal_proto_family *pf;

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  1080cc:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1080d0:	ebfffc85 	bl	1072ec <sal_get_socket>
  1080d4:	e50b0010 	str	r0, [fp, #-16]
  1080d8:	e51b3010 	ldr	r3, [fp, #-16]
  1080dc:	e3530000 	cmp	r3, #0
  1080e0:	1a000001 	bne	1080ec <sal_setsockopt+0x3c>
  1080e4:	e3e03000 	mvn	r3, #0
  1080e8:	ea000017 	b	10814c <sal_setsockopt+0x9c>

    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, setsockopt);
  1080ec:	e51b3010 	ldr	r3, [fp, #-16]
  1080f0:	e5933014 	ldr	r3, [r3, #20]
  1080f4:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  1080f8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  1080fc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108100:	e5933008 	ldr	r3, [r3, #8]
  108104:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  108108:	e3530000 	cmp	r3, #0
  10810c:	1a000001 	bne	108118 <sal_setsockopt+0x68>
  108110:	e3e03000 	mvn	r3, #0
  108114:	ea00000c 	b	10814c <sal_setsockopt+0x9c>
    else
    {
        return pf->skt_ops->setsockopt((int) sock->user_data, level, optname, optval, optlen);
    }
#else
    return pf->skt_ops->setsockopt((int)(size_t)sock->user_data, level, optname, optval, optlen);
  108118:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10811c:	e5933008 	ldr	r3, [r3, #8]
  108120:	e5934024 	ldr	r4, [r3, #36]	; 0x24
  108124:	e51b3010 	ldr	r3, [fp, #-16]
  108128:	e5933018 	ldr	r3, [r3, #24]
  10812c:	e1a00003 	mov	r0, r3
  108130:	e59b3004 	ldr	r3, [fp, #4]
  108134:	e58d3000 	str	r3, [sp]
  108138:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  10813c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  108140:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  108144:	e12fff34 	blx	r4
  108148:	e1a03000 	mov	r3, r0
#endif /* SAL_USING_TLS */
}
  10814c:	e1a00003 	mov	r0, r3
  108150:	e24bd008 	sub	sp, fp, #8
  108154:	e8bd8810 	pop	{r4, fp, pc}

00108158 <sal_connect>:

int sal_connect(int socket, const struct sockaddr *name, socklen_t namelen)
{
  108158:	e92d4800 	push	{fp, lr}
  10815c:	e28db004 	add	fp, sp, #4
  108160:	e24dd020 	sub	sp, sp, #32
  108164:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  108168:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  10816c:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
    struct sal_socket *sock;
    struct sal_proto_family *pf;
    int ret;

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  108170:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  108174:	ebfffc5c 	bl	1072ec <sal_get_socket>
  108178:	e50b0008 	str	r0, [fp, #-8]
  10817c:	e51b3008 	ldr	r3, [fp, #-8]
  108180:	e3530000 	cmp	r3, #0
  108184:	1a000001 	bne	108190 <sal_connect+0x38>
  108188:	e3e03000 	mvn	r3, #0
  10818c:	ea00001d 	b	108208 <sal_connect+0xb0>

    /* check the network interface is up status */
    SAL_NETDEV_IS_UP(sock->netdev);
  108190:	e51b3008 	ldr	r3, [fp, #-8]
  108194:	e5933014 	ldr	r3, [r3, #20]
  108198:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  10819c:	e2033001 	and	r3, r3, #1
  1081a0:	e3530000 	cmp	r3, #0
  1081a4:	1a000001 	bne	1081b0 <sal_connect+0x58>
  1081a8:	e3e03000 	mvn	r3, #0
  1081ac:	ea000015 	b	108208 <sal_connect+0xb0>
    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, connect);
  1081b0:	e51b3008 	ldr	r3, [fp, #-8]
  1081b4:	e5933014 	ldr	r3, [r3, #20]
  1081b8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  1081bc:	e50b300c 	str	r3, [fp, #-12]
  1081c0:	e51b300c 	ldr	r3, [fp, #-12]
  1081c4:	e5933008 	ldr	r3, [r3, #8]
  1081c8:	e5933010 	ldr	r3, [r3, #16]
  1081cc:	e3530000 	cmp	r3, #0
  1081d0:	1a000001 	bne	1081dc <sal_connect+0x84>
  1081d4:	e3e03000 	mvn	r3, #0
  1081d8:	ea00000a 	b	108208 <sal_connect+0xb0>

    ret = pf->skt_ops->connect((int)(size_t)sock->user_data, name, namelen);
  1081dc:	e51b300c 	ldr	r3, [fp, #-12]
  1081e0:	e5933008 	ldr	r3, [r3, #8]
  1081e4:	e5933010 	ldr	r3, [r3, #16]
  1081e8:	e51b2008 	ldr	r2, [fp, #-8]
  1081ec:	e5922018 	ldr	r2, [r2, #24]
  1081f0:	e1a00002 	mov	r0, r2
  1081f4:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1081f8:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  1081fc:	e12fff33 	blx	r3
  108200:	e50b0010 	str	r0, [fp, #-16]

        return ret;
    }
#endif

    return ret;
  108204:	e51b3010 	ldr	r3, [fp, #-16]
}
  108208:	e1a00003 	mov	r0, r3
  10820c:	e24bd004 	sub	sp, fp, #4
  108210:	e8bd8800 	pop	{fp, pc}

00108214 <sal_listen>:

int sal_listen(int socket, int backlog)
{
  108214:	e92d4800 	push	{fp, lr}
  108218:	e28db004 	add	fp, sp, #4
  10821c:	e24dd010 	sub	sp, sp, #16
  108220:	e50b0010 	str	r0, [fp, #-16]
  108224:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    struct sal_socket *sock;
    struct sal_proto_family *pf;

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  108228:	e51b0010 	ldr	r0, [fp, #-16]
  10822c:	ebfffc2e 	bl	1072ec <sal_get_socket>
  108230:	e50b0008 	str	r0, [fp, #-8]
  108234:	e51b3008 	ldr	r3, [fp, #-8]
  108238:	e3530000 	cmp	r3, #0
  10823c:	1a000001 	bne	108248 <sal_listen+0x34>
  108240:	e3e03000 	mvn	r3, #0
  108244:	ea000013 	b	108298 <sal_listen+0x84>

    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, listen);
  108248:	e51b3008 	ldr	r3, [fp, #-8]
  10824c:	e5933014 	ldr	r3, [r3, #20]
  108250:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108254:	e50b300c 	str	r3, [fp, #-12]
  108258:	e51b300c 	ldr	r3, [fp, #-12]
  10825c:	e5933008 	ldr	r3, [r3, #8]
  108260:	e593300c 	ldr	r3, [r3, #12]
  108264:	e3530000 	cmp	r3, #0
  108268:	1a000001 	bne	108274 <sal_listen+0x60>
  10826c:	e3e03000 	mvn	r3, #0
  108270:	ea000008 	b	108298 <sal_listen+0x84>

    return pf->skt_ops->listen((int)(size_t)sock->user_data, backlog);
  108274:	e51b300c 	ldr	r3, [fp, #-12]
  108278:	e5933008 	ldr	r3, [r3, #8]
  10827c:	e593300c 	ldr	r3, [r3, #12]
  108280:	e51b2008 	ldr	r2, [fp, #-8]
  108284:	e5922018 	ldr	r2, [r2, #24]
  108288:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10828c:	e1a00002 	mov	r0, r2
  108290:	e12fff33 	blx	r3
  108294:	e1a03000 	mov	r3, r0
}
  108298:	e1a00003 	mov	r0, r3
  10829c:	e24bd004 	sub	sp, fp, #4
  1082a0:	e8bd8800 	pop	{fp, pc}

001082a4 <sal_recvfrom>:

int sal_recvfrom(int socket, void *mem, size_t len, int flags,
                 struct sockaddr *from, socklen_t *fromlen)
{
  1082a4:	e92d4810 	push	{r4, fp, lr}
  1082a8:	e28db008 	add	fp, sp, #8
  1082ac:	e24dd024 	sub	sp, sp, #36	; 0x24
  1082b0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1082b4:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  1082b8:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  1082bc:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    struct sal_socket *sock;
    struct sal_proto_family *pf;

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  1082c0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1082c4:	ebfffc08 	bl	1072ec <sal_get_socket>
  1082c8:	e50b0010 	str	r0, [fp, #-16]
  1082cc:	e51b3010 	ldr	r3, [fp, #-16]
  1082d0:	e3530000 	cmp	r3, #0
  1082d4:	1a000001 	bne	1082e0 <sal_recvfrom+0x3c>
  1082d8:	e3e03000 	mvn	r3, #0
  1082dc:	ea000021 	b	108368 <sal_recvfrom+0xc4>

    /* check the network interface is up status  */
    SAL_NETDEV_IS_UP(sock->netdev);
  1082e0:	e51b3010 	ldr	r3, [fp, #-16]
  1082e4:	e5933014 	ldr	r3, [r3, #20]
  1082e8:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1082ec:	e2033001 	and	r3, r3, #1
  1082f0:	e3530000 	cmp	r3, #0
  1082f4:	1a000001 	bne	108300 <sal_recvfrom+0x5c>
  1082f8:	e3e03000 	mvn	r3, #0
  1082fc:	ea000019 	b	108368 <sal_recvfrom+0xc4>
    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, recvfrom);
  108300:	e51b3010 	ldr	r3, [fp, #-16]
  108304:	e5933014 	ldr	r3, [r3, #20]
  108308:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10830c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  108310:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108314:	e5933008 	ldr	r3, [r3, #8]
  108318:	e593301c 	ldr	r3, [r3, #28]
  10831c:	e3530000 	cmp	r3, #0
  108320:	1a000001 	bne	10832c <sal_recvfrom+0x88>
  108324:	e3e03000 	mvn	r3, #0
  108328:	ea00000e 	b	108368 <sal_recvfrom+0xc4>
    else
    {
        return pf->skt_ops->recvfrom((int)(size_t)sock->user_data, mem, len, flags, from, fromlen);
    }
#else
    return pf->skt_ops->recvfrom((int)(size_t)sock->user_data, mem, len, flags, from, fromlen);
  10832c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108330:	e5933008 	ldr	r3, [r3, #8]
  108334:	e593401c 	ldr	r4, [r3, #28]
  108338:	e51b3010 	ldr	r3, [fp, #-16]
  10833c:	e5933018 	ldr	r3, [r3, #24]
  108340:	e1a00003 	mov	r0, r3
  108344:	e59b3008 	ldr	r3, [fp, #8]
  108348:	e58d3004 	str	r3, [sp, #4]
  10834c:	e59b3004 	ldr	r3, [fp, #4]
  108350:	e58d3000 	str	r3, [sp]
  108354:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  108358:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  10835c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  108360:	e12fff34 	blx	r4
  108364:	e1a03000 	mov	r3, r0
#endif
}
  108368:	e1a00003 	mov	r0, r3
  10836c:	e24bd008 	sub	sp, fp, #8
  108370:	e8bd8810 	pop	{r4, fp, pc}

00108374 <sal_sendto>:

int sal_sendto(int socket, const void *dataptr, size_t size, int flags,
               const struct sockaddr *to, socklen_t tolen)
{
  108374:	e92d4810 	push	{r4, fp, lr}
  108378:	e28db008 	add	fp, sp, #8
  10837c:	e24dd024 	sub	sp, sp, #36	; 0x24
  108380:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  108384:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  108388:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  10838c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    struct sal_socket *sock;
    struct sal_proto_family *pf;

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  108390:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  108394:	ebfffbd4 	bl	1072ec <sal_get_socket>
  108398:	e50b0010 	str	r0, [fp, #-16]
  10839c:	e51b3010 	ldr	r3, [fp, #-16]
  1083a0:	e3530000 	cmp	r3, #0
  1083a4:	1a000001 	bne	1083b0 <sal_sendto+0x3c>
  1083a8:	e3e03000 	mvn	r3, #0
  1083ac:	ea000021 	b	108438 <sal_sendto+0xc4>

    /* check the network interface is up status  */
    SAL_NETDEV_IS_UP(sock->netdev);
  1083b0:	e51b3010 	ldr	r3, [fp, #-16]
  1083b4:	e5933014 	ldr	r3, [r3, #20]
  1083b8:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  1083bc:	e2033001 	and	r3, r3, #1
  1083c0:	e3530000 	cmp	r3, #0
  1083c4:	1a000001 	bne	1083d0 <sal_sendto+0x5c>
  1083c8:	e3e03000 	mvn	r3, #0
  1083cc:	ea000019 	b	108438 <sal_sendto+0xc4>
    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, sendto);
  1083d0:	e51b3010 	ldr	r3, [fp, #-16]
  1083d4:	e5933014 	ldr	r3, [r3, #20]
  1083d8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  1083dc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  1083e0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1083e4:	e5933008 	ldr	r3, [r3, #8]
  1083e8:	e5933018 	ldr	r3, [r3, #24]
  1083ec:	e3530000 	cmp	r3, #0
  1083f0:	1a000001 	bne	1083fc <sal_sendto+0x88>
  1083f4:	e3e03000 	mvn	r3, #0
  1083f8:	ea00000e 	b	108438 <sal_sendto+0xc4>
    else
    {
        return pf->skt_ops->sendto((int) sock->user_data, dataptr, size, flags, to, tolen);
    }
#else
    return pf->skt_ops->sendto((int)(size_t)sock->user_data, dataptr, size, flags, to, tolen);
  1083fc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108400:	e5933008 	ldr	r3, [r3, #8]
  108404:	e5934018 	ldr	r4, [r3, #24]
  108408:	e51b3010 	ldr	r3, [fp, #-16]
  10840c:	e5933018 	ldr	r3, [r3, #24]
  108410:	e1a00003 	mov	r0, r3
  108414:	e59b3008 	ldr	r3, [fp, #8]
  108418:	e58d3004 	str	r3, [sp, #4]
  10841c:	e59b3004 	ldr	r3, [fp, #4]
  108420:	e58d3000 	str	r3, [sp]
  108424:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  108428:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  10842c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  108430:	e12fff34 	blx	r4
  108434:	e1a03000 	mov	r3, r0
#endif
}
  108438:	e1a00003 	mov	r0, r3
  10843c:	e24bd008 	sub	sp, fp, #8
  108440:	e8bd8810 	pop	{r4, fp, pc}

00108444 <sal_socket>:

int sal_socket(int domain, int type, int protocol)
{
  108444:	e92d4800 	push	{fp, lr}
  108448:	e28db004 	add	fp, sp, #4
  10844c:	e24dd028 	sub	sp, sp, #40	; 0x28
  108450:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  108454:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  108458:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
    int socket, proto_socket;
    struct sal_socket *sock;
    struct sal_proto_family *pf;

    /* allocate a new socket and registered socket options */
    socket = socket_new();
  10845c:	ebfffd1f 	bl	1078e0 <socket_new>
  108460:	e50b0008 	str	r0, [fp, #-8]
    if (socket < 0)
  108464:	e51b3008 	ldr	r3, [fp, #-8]
  108468:	e3530000 	cmp	r3, #0
  10846c:	aa000001 	bge	108478 <sal_socket+0x34>
    {
        return -1;
  108470:	e3e03000 	mvn	r3, #0
  108474:	ea000040 	b	10857c <sal_socket+0x138>
    }

    /* get sal socket object by socket descriptor */
    sock = sal_get_socket(socket);
  108478:	e51b0008 	ldr	r0, [fp, #-8]
  10847c:	ebfffb9a 	bl	1072ec <sal_get_socket>
  108480:	e1a03000 	mov	r3, r0
  108484:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    if (sock == RT_NULL)
  108488:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10848c:	e3530000 	cmp	r3, #0
  108490:	1a000003 	bne	1084a4 <sal_socket+0x60>
    {
        socket_delete(socket);
  108494:	e51b0008 	ldr	r0, [fp, #-8]
  108498:	ebfffd3c 	bl	107990 <socket_delete>
        return -1;
  10849c:	e3e03000 	mvn	r3, #0
  1084a0:	ea000035 	b	10857c <sal_socket+0x138>
    }

    /* Initialize sal socket object */
    retval = socket_init(domain, type, protocol, &sock);
  1084a4:	e24b3018 	sub	r3, fp, #24
  1084a8:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  1084ac:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  1084b0:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  1084b4:	ebfffc0b 	bl	1074e8 <socket_init>
  1084b8:	e50b000c 	str	r0, [fp, #-12]
    if (retval < 0)
  1084bc:	e51b300c 	ldr	r3, [fp, #-12]
  1084c0:	e3530000 	cmp	r3, #0
  1084c4:	aa00000d 	bge	108500 <sal_socket+0xbc>
    {
        LOG_E("SAL socket protocol family input failed, return error %d.", retval);
  1084c8:	e3060140 	movw	r0, #24896	; 0x6140
  1084cc:	e3400014 	movt	r0, #20
  1084d0:	ebffeb0f 	bl	103114 <rt_kprintf>
  1084d4:	e51b100c 	ldr	r1, [fp, #-12]
  1084d8:	e30602d8 	movw	r0, #25304	; 0x62d8
  1084dc:	e3400014 	movt	r0, #20
  1084e0:	ebffeb0b 	bl	103114 <rt_kprintf>
  1084e4:	e3060174 	movw	r0, #24948	; 0x6174
  1084e8:	e3400014 	movt	r0, #20
  1084ec:	ebffeb08 	bl	103114 <rt_kprintf>
        socket_delete(socket);
  1084f0:	e51b0008 	ldr	r0, [fp, #-8]
  1084f4:	ebfffd25 	bl	107990 <socket_delete>
        return -1;
  1084f8:	e3e03000 	mvn	r3, #0
  1084fc:	ea00001e 	b	10857c <sal_socket+0x138>
    }

    /* valid the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, socket);
  108500:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  108504:	e5933014 	ldr	r3, [r3, #20]
  108508:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10850c:	e50b3010 	str	r3, [fp, #-16]
  108510:	e51b3010 	ldr	r3, [fp, #-16]
  108514:	e5933008 	ldr	r3, [r3, #8]
  108518:	e5933000 	ldr	r3, [r3]
  10851c:	e3530000 	cmp	r3, #0
  108520:	1a000001 	bne	10852c <sal_socket+0xe8>
  108524:	e3e03000 	mvn	r3, #0
  108528:	ea000013 	b	10857c <sal_socket+0x138>

    proto_socket = pf->skt_ops->socket(domain, type, protocol);
  10852c:	e51b3010 	ldr	r3, [fp, #-16]
  108530:	e5933008 	ldr	r3, [r3, #8]
  108534:	e5933000 	ldr	r3, [r3]
  108538:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  10853c:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  108540:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  108544:	e12fff33 	blx	r3
  108548:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
    if (proto_socket >= 0)
  10854c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108550:	e3530000 	cmp	r3, #0
  108554:	ba000005 	blt	108570 <sal_socket+0x12c>
                socket_delete(socket);
                return -1;
            }
        }
#endif
        sock->user_data = (void *)(size_t)proto_socket;
  108558:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10855c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  108560:	e5832018 	str	r2, [r3, #24]
        return sock->socket;
  108564:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  108568:	e5933004 	ldr	r3, [r3, #4]
  10856c:	ea000002 	b	10857c <sal_socket+0x138>
    }
    socket_delete(socket);
  108570:	e51b0008 	ldr	r0, [fp, #-8]
  108574:	ebfffd05 	bl	107990 <socket_delete>
    return -1;
  108578:	e3e03000 	mvn	r3, #0
}
  10857c:	e1a00003 	mov	r0, r3
  108580:	e24bd004 	sub	sp, fp, #4
  108584:	e8bd8800 	pop	{fp, pc}

00108588 <sal_closesocket>:

int sal_closesocket(int socket)
{
  108588:	e92d4800 	push	{fp, lr}
  10858c:	e28db004 	add	fp, sp, #4
  108590:	e24dd018 	sub	sp, sp, #24
  108594:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    struct sal_socket *sock;
    struct sal_proto_family *pf;
    int error = 0;
  108598:	e3a03000 	mov	r3, #0
  10859c:	e50b3008 	str	r3, [fp, #-8]

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  1085a0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1085a4:	ebfffb50 	bl	1072ec <sal_get_socket>
  1085a8:	e50b000c 	str	r0, [fp, #-12]
  1085ac:	e51b300c 	ldr	r3, [fp, #-12]
  1085b0:	e3530000 	cmp	r3, #0
  1085b4:	1a000001 	bne	1085c0 <sal_closesocket+0x38>
  1085b8:	e3e03000 	mvn	r3, #0
  1085bc:	ea00001c 	b	108634 <sal_closesocket+0xac>

    /* clsoesocket operation not need to vaild network interface status */
    /* valid the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, socket);
  1085c0:	e51b300c 	ldr	r3, [fp, #-12]
  1085c4:	e5933014 	ldr	r3, [r3, #20]
  1085c8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  1085cc:	e50b3010 	str	r3, [fp, #-16]
  1085d0:	e51b3010 	ldr	r3, [fp, #-16]
  1085d4:	e5933008 	ldr	r3, [r3, #8]
  1085d8:	e5933000 	ldr	r3, [r3]
  1085dc:	e3530000 	cmp	r3, #0
  1085e0:	1a000001 	bne	1085ec <sal_closesocket+0x64>
  1085e4:	e3e03000 	mvn	r3, #0
  1085e8:	ea000011 	b	108634 <sal_closesocket+0xac>

    if (pf->skt_ops->closesocket((int)(size_t)sock->user_data) == 0)
  1085ec:	e51b3010 	ldr	r3, [fp, #-16]
  1085f0:	e5933008 	ldr	r3, [r3, #8]
  1085f4:	e5933004 	ldr	r3, [r3, #4]
  1085f8:	e51b200c 	ldr	r2, [fp, #-12]
  1085fc:	e5922018 	ldr	r2, [r2, #24]
  108600:	e1a00002 	mov	r0, r2
  108604:	e12fff33 	blx	r3
  108608:	e1a03000 	mov	r3, r0
  10860c:	e3530000 	cmp	r3, #0
  108610:	1a000002 	bne	108620 <sal_closesocket+0x98>
            {
                return -1;
            }
        }
#endif
        error = 0;
  108614:	e3a03000 	mov	r3, #0
  108618:	e50b3008 	str	r3, [fp, #-8]
  10861c:	ea000001 	b	108628 <sal_closesocket+0xa0>
    }
    else
    {
        error = -1;
  108620:	e3e03000 	mvn	r3, #0
  108624:	e50b3008 	str	r3, [fp, #-8]
    }

    /* delete socket */
    socket_delete(socket);
  108628:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  10862c:	ebfffcd7 	bl	107990 <socket_delete>

    return error;
  108630:	e51b3008 	ldr	r3, [fp, #-8]
}
  108634:	e1a00003 	mov	r0, r3
  108638:	e24bd004 	sub	sp, fp, #4
  10863c:	e8bd8800 	pop	{fp, pc}

00108640 <sal_ioctlsocket>:

int sal_ioctlsocket(int socket, long cmd, void *arg)
{
  108640:	e92d4800 	push	{fp, lr}
  108644:	e28db004 	add	fp, sp, #4
  108648:	e24dd028 	sub	sp, sp, #40	; 0x28
  10864c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  108650:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  108654:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
    struct sal_socket *sock;
    struct sal_proto_family *pf;
    struct sockaddr_in *addr_in = RT_NULL;
  108658:	e3a03000 	mov	r3, #0
  10865c:	e50b3008 	str	r3, [fp, #-8]
    struct sockaddr *addr = RT_NULL;
  108660:	e3a03000 	mov	r3, #0
  108664:	e50b300c 	str	r3, [fp, #-12]
    ip_addr_t input_ipaddr;
    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  108668:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  10866c:	ebfffb1e 	bl	1072ec <sal_get_socket>
  108670:	e50b0010 	str	r0, [fp, #-16]
  108674:	e51b3010 	ldr	r3, [fp, #-16]
  108678:	e3530000 	cmp	r3, #0
  10867c:	1a000001 	bne	108688 <sal_ioctlsocket+0x48>
  108680:	e3e03000 	mvn	r3, #0
  108684:	ea000086 	b	1088a4 <sal_ioctlsocket+0x264>
    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, ioctlsocket);
  108688:	e51b3010 	ldr	r3, [fp, #-16]
  10868c:	e5933014 	ldr	r3, [r3, #20]
  108690:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108694:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  108698:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10869c:	e5933008 	ldr	r3, [r3, #8]
  1086a0:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  1086a4:	e3530000 	cmp	r3, #0
  1086a8:	1a000001 	bne	1086b4 <sal_ioctlsocket+0x74>
  1086ac:	e3e03000 	mvn	r3, #0
  1086b0:	ea00007b 	b	1088a4 <sal_ioctlsocket+0x264>

    struct sal_ifreq *ifr = (struct sal_ifreq *)arg;
  1086b4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1086b8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

    if((sock->domain == AF_INET)&&(sock->netdev)&&(ifr != RT_NULL))
  1086bc:	e51b3010 	ldr	r3, [fp, #-16]
  1086c0:	e5933008 	ldr	r3, [r3, #8]
  1086c4:	e3530002 	cmp	r3, #2
  1086c8:	1a000068 	bne	108870 <sal_ioctlsocket+0x230>
  1086cc:	e51b3010 	ldr	r3, [fp, #-16]
  1086d0:	e5933014 	ldr	r3, [r3, #20]
  1086d4:	e3530000 	cmp	r3, #0
  1086d8:	0a000064 	beq	108870 <sal_ioctlsocket+0x230>
  1086dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1086e0:	e3530000 	cmp	r3, #0
  1086e4:	0a000061 	beq	108870 <sal_ioctlsocket+0x230>
    {
        switch (cmd)
  1086e8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1086ec:	e2433c89 	sub	r3, r3, #35072	; 0x8900
  1086f0:	e2433015 	sub	r3, r3, #21
  1086f4:	e3530012 	cmp	r3, #18
  1086f8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  1086fc:	ea00005d 	b	108878 <sal_ioctlsocket+0x238>
  108700:	0010874c 	.word	0x0010874c
  108704:	00108774 	.word	0x00108774
  108708:	00108878 	.word	0x00108878
  10870c:	00108878 	.word	0x00108878
  108710:	00108878 	.word	0x00108878
  108714:	00108878 	.word	0x00108878
  108718:	001087b0 	.word	0x001087b0
  10871c:	001087d8 	.word	0x001087d8
  108720:	00108878 	.word	0x00108878
  108724:	00108878 	.word	0x00108878
  108728:	00108878 	.word	0x00108878
  10872c:	00108878 	.word	0x00108878
  108730:	00108850 	.word	0x00108850
  108734:	00108878 	.word	0x00108878
  108738:	00108878 	.word	0x00108878
  10873c:	00108878 	.word	0x00108878
  108740:	00108878 	.word	0x00108878
  108744:	00108878 	.word	0x00108878
  108748:	00108814 	.word	0x00108814
        {
        case SIOCGIFADDR:
            addr_in = (struct sockaddr_in *)&(ifr->ifr_ifru.ifru_addr);
  10874c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  108750:	e2833010 	add	r3, r3, #16
  108754:	e50b3008 	str	r3, [fp, #-8]
#if NETDEV_IPV4 && NETDEV_IPV6
            addr_in->sin_addr.s_addr = sock->netdev->ip_addr.u_addr.ip4.addr;
#elif NETDEV_IPV4
            addr_in->sin_addr.s_addr = sock->netdev->ip_addr.addr;
  108758:	e51b3010 	ldr	r3, [fp, #-16]
  10875c:	e5933014 	ldr	r3, [r3, #20]
  108760:	e593200c 	ldr	r2, [r3, #12]
  108764:	e51b3008 	ldr	r3, [fp, #-8]
  108768:	e5832004 	str	r2, [r3, #4]
#elif NETDEV_IPV6
#error "not only support IPV6"
#endif /* NETDEV_IPV4 && NETDEV_IPV6*/
            return 0;
  10876c:	e3a03000 	mov	r3, #0
  108770:	ea00004b 	b	1088a4 <sal_ioctlsocket+0x264>

        case SIOCSIFADDR:
            addr = (struct sockaddr *)&(ifr->ifr_ifru.ifru_addr);
  108774:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  108778:	e2833010 	add	r3, r3, #16
  10877c:	e50b300c 	str	r3, [fp, #-12]
            sal_sockaddr_to_ipaddr(addr,&input_ipaddr);
  108780:	e24b301c 	sub	r3, fp, #28
  108784:	e1a01003 	mov	r1, r3
  108788:	e51b000c 	ldr	r0, [fp, #-12]
  10878c:	ebfffd17 	bl	107bf0 <sal_sockaddr_to_ipaddr>
            netdev_set_ipaddr(sock->netdev,&input_ipaddr);
  108790:	e51b3010 	ldr	r3, [fp, #-16]
  108794:	e5933014 	ldr	r3, [r3, #20]
  108798:	e24b201c 	sub	r2, fp, #28
  10879c:	e1a01002 	mov	r1, r2
  1087a0:	e1a00003 	mov	r0, r3
  1087a4:	ebfff4ae 	bl	105a64 <netdev_set_ipaddr>
            return 0;    
  1087a8:	e3a03000 	mov	r3, #0
  1087ac:	ea00003c 	b	1088a4 <sal_ioctlsocket+0x264>

        case SIOCGIFNETMASK:
            addr_in = (struct sockaddr_in *)&(ifr->ifr_ifru.ifru_netmask);
  1087b0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1087b4:	e2833010 	add	r3, r3, #16
  1087b8:	e50b3008 	str	r3, [fp, #-8]
#if NETDEV_IPV4 && NETDEV_IPV6
            addr_in->sin_addr.s_addr = sock->netdev->netmask.u_addr.ip4.addr;
#elif NETDEV_IPV4
            addr_in->sin_addr.s_addr = sock->netdev->netmask.addr;
  1087bc:	e51b3010 	ldr	r3, [fp, #-16]
  1087c0:	e5933014 	ldr	r3, [r3, #20]
  1087c4:	e5932010 	ldr	r2, [r3, #16]
  1087c8:	e51b3008 	ldr	r3, [fp, #-8]
  1087cc:	e5832004 	str	r2, [r3, #4]
#elif NETDEV_IPV6
#error "not only support IPV6"
#endif /* NETDEV_IPV4 && NETDEV_IPV6*/
            return 0;
  1087d0:	e3a03000 	mov	r3, #0
  1087d4:	ea000032 	b	1088a4 <sal_ioctlsocket+0x264>

        case SIOCSIFNETMASK:
            addr = (struct sockaddr *)&(ifr->ifr_ifru.ifru_netmask);
  1087d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1087dc:	e2833010 	add	r3, r3, #16
  1087e0:	e50b300c 	str	r3, [fp, #-12]
            sal_sockaddr_to_ipaddr(addr,&input_ipaddr);
  1087e4:	e24b301c 	sub	r3, fp, #28
  1087e8:	e1a01003 	mov	r1, r3
  1087ec:	e51b000c 	ldr	r0, [fp, #-12]
  1087f0:	ebfffcfe 	bl	107bf0 <sal_sockaddr_to_ipaddr>
            netdev_set_netmask(sock->netdev,&input_ipaddr);
  1087f4:	e51b3010 	ldr	r3, [fp, #-16]
  1087f8:	e5933014 	ldr	r3, [r3, #20]
  1087fc:	e24b201c 	sub	r2, fp, #28
  108800:	e1a01002 	mov	r1, r2
  108804:	e1a00003 	mov	r0, r3
  108808:	ebfff4e4 	bl	105ba0 <netdev_set_netmask>
            return 0;            
  10880c:	e3a03000 	mov	r3, #0
  108810:	ea000023 	b	1088a4 <sal_ioctlsocket+0x264>

        case SIOCGIFHWADDR:
            addr = (struct sockaddr *)&(ifr->ifr_ifru.ifru_hwaddr);
  108814:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  108818:	e2833010 	add	r3, r3, #16
  10881c:	e50b300c 	str	r3, [fp, #-12]
            rt_memcpy(addr->sa_data,sock->netdev->hwaddr,sock->netdev->hwaddr_len);
  108820:	e51b300c 	ldr	r3, [fp, #-12]
  108824:	e2830002 	add	r0, r3, #2
  108828:	e51b3010 	ldr	r3, [fp, #-16]
  10882c:	e5933014 	ldr	r3, [r3, #20]
  108830:	e2831021 	add	r1, r3, #33	; 0x21
  108834:	e51b3010 	ldr	r3, [fp, #-16]
  108838:	e5933014 	ldr	r3, [r3, #20]
  10883c:	e5d33020 	ldrb	r3, [r3, #32]
  108840:	e1a02003 	mov	r2, r3
  108844:	ebffeaad 	bl	103300 <rt_memcpy>
            return 0;
  108848:	e3a03000 	mov	r3, #0
  10884c:	ea000014 	b	1088a4 <sal_ioctlsocket+0x264>

        case SIOCGIFMTU:
            ifr->ifr_ifru.ifru_mtu = sock->netdev->mtu;
  108850:	e51b3010 	ldr	r3, [fp, #-16]
  108854:	e5933014 	ldr	r3, [r3, #20]
  108858:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  10885c:	e1a02003 	mov	r2, r3
  108860:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  108864:	e5832010 	str	r2, [r3, #16]
            return 0;            
  108868:	e3a03000 	mov	r3, #0
  10886c:	ea00000c 	b	1088a4 <sal_ioctlsocket+0x264>

        default:
            break;
        }
    }
  108870:	e320f000 	nop	{0}
  108874:	ea000000 	b	10887c <sal_ioctlsocket+0x23c>
            break;
  108878:	e320f000 	nop	{0}
    return pf->skt_ops->ioctlsocket((int)(size_t)sock->user_data, cmd, arg);
  10887c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108880:	e5933008 	ldr	r3, [r3, #8]
  108884:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  108888:	e51b2010 	ldr	r2, [fp, #-16]
  10888c:	e5922018 	ldr	r2, [r2, #24]
  108890:	e1a00002 	mov	r0, r2
  108894:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  108898:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  10889c:	e12fff33 	blx	r3
  1088a0:	e1a03000 	mov	r3, r0
}
  1088a4:	e1a00003 	mov	r0, r3
  1088a8:	e24bd004 	sub	sp, fp, #4
  1088ac:	e8bd8800 	pop	{fp, pc}

001088b0 <sal_poll>:

#ifdef SAL_USING_POSIX
int sal_poll(struct dfs_fd *file, struct rt_pollreq *req)
{
  1088b0:	e92d4800 	push	{fp, lr}
  1088b4:	e28db004 	add	fp, sp, #4
  1088b8:	e24dd018 	sub	sp, sp, #24
  1088bc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1088c0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    struct sal_socket *sock;
    struct sal_proto_family *pf;
    int socket = (int)(size_t)file->fnode->data;
  1088c4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1088c8:	e5933018 	ldr	r3, [r3, #24]
  1088cc:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  1088d0:	e50b3008 	str	r3, [fp, #-8]

    /* get the socket object by socket descriptor */
    SAL_SOCKET_OBJ_GET(sock, socket);
  1088d4:	e51b0008 	ldr	r0, [fp, #-8]
  1088d8:	ebfffa83 	bl	1072ec <sal_get_socket>
  1088dc:	e50b000c 	str	r0, [fp, #-12]
  1088e0:	e51b300c 	ldr	r3, [fp, #-12]
  1088e4:	e3530000 	cmp	r3, #0
  1088e8:	1a000001 	bne	1088f4 <sal_poll+0x44>
  1088ec:	e3e03000 	mvn	r3, #0
  1088f0:	ea000019 	b	10895c <sal_poll+0xac>

    /* check the network interface is up status  */
    SAL_NETDEV_IS_UP(sock->netdev);
  1088f4:	e51b300c 	ldr	r3, [fp, #-12]
  1088f8:	e5933014 	ldr	r3, [r3, #20]
  1088fc:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  108900:	e2033001 	and	r3, r3, #1
  108904:	e3530000 	cmp	r3, #0
  108908:	1a000001 	bne	108914 <sal_poll+0x64>
  10890c:	e3e03000 	mvn	r3, #0
  108910:	ea000011 	b	10895c <sal_poll+0xac>
    /* check the network interface socket opreation */
    SAL_NETDEV_SOCKETOPS_VALID(sock->netdev, pf, poll);
  108914:	e51b300c 	ldr	r3, [fp, #-12]
  108918:	e5933014 	ldr	r3, [r3, #20]
  10891c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108920:	e50b3010 	str	r3, [fp, #-16]
  108924:	e51b3010 	ldr	r3, [fp, #-16]
  108928:	e5933008 	ldr	r3, [r3, #8]
  10892c:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  108930:	e3530000 	cmp	r3, #0
  108934:	1a000001 	bne	108940 <sal_poll+0x90>
  108938:	e3e03000 	mvn	r3, #0
  10893c:	ea000006 	b	10895c <sal_poll+0xac>

    return pf->skt_ops->poll(file, req);
  108940:	e51b3010 	ldr	r3, [fp, #-16]
  108944:	e5933008 	ldr	r3, [r3, #8]
  108948:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10894c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  108950:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  108954:	e12fff33 	blx	r3
  108958:	e1a03000 	mov	r3, r0
}
  10895c:	e1a00003 	mov	r0, r3
  108960:	e24bd004 	sub	sp, fp, #4
  108964:	e8bd8800 	pop	{fp, pc}

00108968 <sal_gethostbyname>:
#endif

struct hostent *sal_gethostbyname(const char *name)
{
  108968:	e92d4800 	push	{fp, lr}
  10896c:	e28db004 	add	fp, sp, #4
  108970:	e24dd010 	sub	sp, sp, #16
  108974:	e50b0010 	str	r0, [fp, #-16]
    struct netdev *netdev = netdev_default;
  108978:	e3003564 	movw	r3, #1380	; 0x564
  10897c:	e3403015 	movt	r3, #21
  108980:	e5933000 	ldr	r3, [r3]
  108984:	e50b3008 	str	r3, [fp, #-8]
    struct sal_proto_family *pf;

    if (SAL_NETDEV_NETDBOPS_VALID(netdev, pf, gethostbyname))
  108988:	e51b3008 	ldr	r3, [fp, #-8]
  10898c:	e3530000 	cmp	r3, #0
  108990:	0a000017 	beq	1089f4 <sal_gethostbyname+0x8c>
  108994:	e51b3008 	ldr	r3, [fp, #-8]
  108998:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  10899c:	e2033001 	and	r3, r3, #1
  1089a0:	e6ef3073 	uxtb	r3, r3
  1089a4:	e3530000 	cmp	r3, #0
  1089a8:	0a000011 	beq	1089f4 <sal_gethostbyname+0x8c>
  1089ac:	e51b3008 	ldr	r3, [fp, #-8]
  1089b0:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  1089b4:	e50b300c 	str	r3, [fp, #-12]
  1089b8:	e51b300c 	ldr	r3, [fp, #-12]
  1089bc:	e3530000 	cmp	r3, #0
  1089c0:	0a00000b 	beq	1089f4 <sal_gethostbyname+0x8c>
  1089c4:	e51b300c 	ldr	r3, [fp, #-12]
  1089c8:	e593300c 	ldr	r3, [r3, #12]
  1089cc:	e5933000 	ldr	r3, [r3]
  1089d0:	e3530000 	cmp	r3, #0
  1089d4:	0a000006 	beq	1089f4 <sal_gethostbyname+0x8c>
    {
        return pf->netdb_ops->gethostbyname(name);
  1089d8:	e51b300c 	ldr	r3, [fp, #-12]
  1089dc:	e593300c 	ldr	r3, [r3, #12]
  1089e0:	e5933000 	ldr	r3, [r3]
  1089e4:	e51b0010 	ldr	r0, [fp, #-16]
  1089e8:	e12fff33 	blx	r3
  1089ec:	e1a03000 	mov	r3, r0
  1089f0:	ea00001e 	b	108a70 <sal_gethostbyname+0x108>
    }
    else
    {
        /* get the first network interface device with up status */
        netdev = netdev_get_first_by_flags(NETDEV_FLAG_UP);
  1089f4:	e3a00001 	mov	r0, #1
  1089f8:	ebfff265 	bl	105394 <netdev_get_first_by_flags>
  1089fc:	e50b0008 	str	r0, [fp, #-8]
        if (SAL_NETDEV_NETDBOPS_VALID(netdev, pf, gethostbyname))
  108a00:	e51b3008 	ldr	r3, [fp, #-8]
  108a04:	e3530000 	cmp	r3, #0
  108a08:	0a000017 	beq	108a6c <sal_gethostbyname+0x104>
  108a0c:	e51b3008 	ldr	r3, [fp, #-8]
  108a10:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  108a14:	e2033001 	and	r3, r3, #1
  108a18:	e6ef3073 	uxtb	r3, r3
  108a1c:	e3530000 	cmp	r3, #0
  108a20:	0a000011 	beq	108a6c <sal_gethostbyname+0x104>
  108a24:	e51b3008 	ldr	r3, [fp, #-8]
  108a28:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108a2c:	e50b300c 	str	r3, [fp, #-12]
  108a30:	e51b300c 	ldr	r3, [fp, #-12]
  108a34:	e3530000 	cmp	r3, #0
  108a38:	0a00000b 	beq	108a6c <sal_gethostbyname+0x104>
  108a3c:	e51b300c 	ldr	r3, [fp, #-12]
  108a40:	e593300c 	ldr	r3, [r3, #12]
  108a44:	e5933000 	ldr	r3, [r3]
  108a48:	e3530000 	cmp	r3, #0
  108a4c:	0a000006 	beq	108a6c <sal_gethostbyname+0x104>
        {
            return pf->netdb_ops->gethostbyname(name);
  108a50:	e51b300c 	ldr	r3, [fp, #-12]
  108a54:	e593300c 	ldr	r3, [r3, #12]
  108a58:	e5933000 	ldr	r3, [r3]
  108a5c:	e51b0010 	ldr	r0, [fp, #-16]
  108a60:	e12fff33 	blx	r3
  108a64:	e1a03000 	mov	r3, r0
  108a68:	ea000000 	b	108a70 <sal_gethostbyname+0x108>
        }
    }

    return RT_NULL;
  108a6c:	e3a03000 	mov	r3, #0
}
  108a70:	e1a00003 	mov	r0, r3
  108a74:	e24bd004 	sub	sp, fp, #4
  108a78:	e8bd8800 	pop	{fp, pc}

00108a7c <sal_gethostbyname_r>:

int sal_gethostbyname_r(const char *name, struct hostent *ret, char *buf,
                        size_t buflen, struct hostent **result, int *h_errnop)
{
  108a7c:	e92d4810 	push	{r4, fp, lr}
  108a80:	e28db008 	add	fp, sp, #8
  108a84:	e24dd024 	sub	sp, sp, #36	; 0x24
  108a88:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  108a8c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  108a90:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  108a94:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    struct netdev *netdev = netdev_default;
  108a98:	e3003564 	movw	r3, #1380	; 0x564
  108a9c:	e3403015 	movt	r3, #21
  108aa0:	e5933000 	ldr	r3, [r3]
  108aa4:	e50b3010 	str	r3, [fp, #-16]
    struct sal_proto_family *pf;

    if (SAL_NETDEV_NETDBOPS_VALID(netdev, pf, gethostbyname_r))
  108aa8:	e51b3010 	ldr	r3, [fp, #-16]
  108aac:	e3530000 	cmp	r3, #0
  108ab0:	0a00001e 	beq	108b30 <sal_gethostbyname_r+0xb4>
  108ab4:	e51b3010 	ldr	r3, [fp, #-16]
  108ab8:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  108abc:	e2033001 	and	r3, r3, #1
  108ac0:	e6ef3073 	uxtb	r3, r3
  108ac4:	e3530000 	cmp	r3, #0
  108ac8:	0a000018 	beq	108b30 <sal_gethostbyname_r+0xb4>
  108acc:	e51b3010 	ldr	r3, [fp, #-16]
  108ad0:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108ad4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  108ad8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108adc:	e3530000 	cmp	r3, #0
  108ae0:	0a000012 	beq	108b30 <sal_gethostbyname_r+0xb4>
  108ae4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108ae8:	e593300c 	ldr	r3, [r3, #12]
  108aec:	e5933004 	ldr	r3, [r3, #4]
  108af0:	e3530000 	cmp	r3, #0
  108af4:	0a00000d 	beq	108b30 <sal_gethostbyname_r+0xb4>
    {
        return pf->netdb_ops->gethostbyname_r(name, ret, buf, buflen, result, h_errnop);
  108af8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108afc:	e593300c 	ldr	r3, [r3, #12]
  108b00:	e5934004 	ldr	r4, [r3, #4]
  108b04:	e59b3008 	ldr	r3, [fp, #8]
  108b08:	e58d3004 	str	r3, [sp, #4]
  108b0c:	e59b3004 	ldr	r3, [fp, #4]
  108b10:	e58d3000 	str	r3, [sp]
  108b14:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  108b18:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  108b1c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  108b20:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  108b24:	e12fff34 	blx	r4
  108b28:	e1a03000 	mov	r3, r0
  108b2c:	ea000025 	b	108bc8 <sal_gethostbyname_r+0x14c>
    }
    else
    {
        /* get the first network interface device with up status */
        netdev = netdev_get_first_by_flags(NETDEV_FLAG_UP);
  108b30:	e3a00001 	mov	r0, #1
  108b34:	ebfff216 	bl	105394 <netdev_get_first_by_flags>
  108b38:	e50b0010 	str	r0, [fp, #-16]
        if (SAL_NETDEV_NETDBOPS_VALID(netdev, pf, gethostbyname_r))
  108b3c:	e51b3010 	ldr	r3, [fp, #-16]
  108b40:	e3530000 	cmp	r3, #0
  108b44:	0a00001e 	beq	108bc4 <sal_gethostbyname_r+0x148>
  108b48:	e51b3010 	ldr	r3, [fp, #-16]
  108b4c:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  108b50:	e2033001 	and	r3, r3, #1
  108b54:	e6ef3073 	uxtb	r3, r3
  108b58:	e3530000 	cmp	r3, #0
  108b5c:	0a000018 	beq	108bc4 <sal_gethostbyname_r+0x148>
  108b60:	e51b3010 	ldr	r3, [fp, #-16]
  108b64:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108b68:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  108b6c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108b70:	e3530000 	cmp	r3, #0
  108b74:	0a000012 	beq	108bc4 <sal_gethostbyname_r+0x148>
  108b78:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108b7c:	e593300c 	ldr	r3, [r3, #12]
  108b80:	e5933004 	ldr	r3, [r3, #4]
  108b84:	e3530000 	cmp	r3, #0
  108b88:	0a00000d 	beq	108bc4 <sal_gethostbyname_r+0x148>
        {
            return pf->netdb_ops->gethostbyname_r(name, ret, buf, buflen, result, h_errnop);
  108b8c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108b90:	e593300c 	ldr	r3, [r3, #12]
  108b94:	e5934004 	ldr	r4, [r3, #4]
  108b98:	e59b3008 	ldr	r3, [fp, #8]
  108b9c:	e58d3004 	str	r3, [sp, #4]
  108ba0:	e59b3004 	ldr	r3, [fp, #4]
  108ba4:	e58d3000 	str	r3, [sp]
  108ba8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  108bac:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  108bb0:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  108bb4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  108bb8:	e12fff34 	blx	r4
  108bbc:	e1a03000 	mov	r3, r0
  108bc0:	ea000000 	b	108bc8 <sal_gethostbyname_r+0x14c>
        }
    }

    return -1;
  108bc4:	e3e03000 	mvn	r3, #0
}
  108bc8:	e1a00003 	mov	r0, r3
  108bcc:	e24bd008 	sub	sp, fp, #8
  108bd0:	e8bd8810 	pop	{r4, fp, pc}

00108bd4 <sal_getaddrinfo>:

int sal_getaddrinfo(const char *nodename,
                    const char *servname,
                    const struct addrinfo *hints,
                    struct addrinfo **res)
{
  108bd4:	e92d4810 	push	{r4, fp, lr}
  108bd8:	e28db008 	add	fp, sp, #8
  108bdc:	e24dd01c 	sub	sp, sp, #28
  108be0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  108be4:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  108be8:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  108bec:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    struct netdev *netdev = netdev_default;
  108bf0:	e3003564 	movw	r3, #1380	; 0x564
  108bf4:	e3403015 	movt	r3, #21
  108bf8:	e5933000 	ldr	r3, [r3]
  108bfc:	e50b3010 	str	r3, [fp, #-16]
    struct sal_proto_family *pf;

    if (SAL_NETDEV_NETDBOPS_VALID(netdev, pf, getaddrinfo))
  108c00:	e51b3010 	ldr	r3, [fp, #-16]
  108c04:	e3530000 	cmp	r3, #0
  108c08:	0a00001a 	beq	108c78 <sal_getaddrinfo+0xa4>
  108c0c:	e51b3010 	ldr	r3, [fp, #-16]
  108c10:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  108c14:	e2033001 	and	r3, r3, #1
  108c18:	e6ef3073 	uxtb	r3, r3
  108c1c:	e3530000 	cmp	r3, #0
  108c20:	0a000014 	beq	108c78 <sal_getaddrinfo+0xa4>
  108c24:	e51b3010 	ldr	r3, [fp, #-16]
  108c28:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108c2c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  108c30:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108c34:	e3530000 	cmp	r3, #0
  108c38:	0a00000e 	beq	108c78 <sal_getaddrinfo+0xa4>
  108c3c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108c40:	e593300c 	ldr	r3, [r3, #12]
  108c44:	e5933008 	ldr	r3, [r3, #8]
  108c48:	e3530000 	cmp	r3, #0
  108c4c:	0a000009 	beq	108c78 <sal_getaddrinfo+0xa4>
    {
        return pf->netdb_ops->getaddrinfo(nodename, servname, hints, res);
  108c50:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108c54:	e593300c 	ldr	r3, [r3, #12]
  108c58:	e5934008 	ldr	r4, [r3, #8]
  108c5c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  108c60:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  108c64:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  108c68:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  108c6c:	e12fff34 	blx	r4
  108c70:	e1a03000 	mov	r3, r0
  108c74:	ea000021 	b	108d00 <sal_getaddrinfo+0x12c>
    }
    else
    {
        /* get the first network interface device with up status */
        netdev = netdev_get_first_by_flags(NETDEV_FLAG_UP);
  108c78:	e3a00001 	mov	r0, #1
  108c7c:	ebfff1c4 	bl	105394 <netdev_get_first_by_flags>
  108c80:	e50b0010 	str	r0, [fp, #-16]
        if (SAL_NETDEV_NETDBOPS_VALID(netdev, pf, getaddrinfo))
  108c84:	e51b3010 	ldr	r3, [fp, #-16]
  108c88:	e3530000 	cmp	r3, #0
  108c8c:	0a00001a 	beq	108cfc <sal_getaddrinfo+0x128>
  108c90:	e51b3010 	ldr	r3, [fp, #-16]
  108c94:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  108c98:	e2033001 	and	r3, r3, #1
  108c9c:	e6ef3073 	uxtb	r3, r3
  108ca0:	e3530000 	cmp	r3, #0
  108ca4:	0a000014 	beq	108cfc <sal_getaddrinfo+0x128>
  108ca8:	e51b3010 	ldr	r3, [fp, #-16]
  108cac:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108cb0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  108cb4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108cb8:	e3530000 	cmp	r3, #0
  108cbc:	0a00000e 	beq	108cfc <sal_getaddrinfo+0x128>
  108cc0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108cc4:	e593300c 	ldr	r3, [r3, #12]
  108cc8:	e5933008 	ldr	r3, [r3, #8]
  108ccc:	e3530000 	cmp	r3, #0
  108cd0:	0a000009 	beq	108cfc <sal_getaddrinfo+0x128>
        {
            return pf->netdb_ops->getaddrinfo(nodename, servname, hints, res);
  108cd4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108cd8:	e593300c 	ldr	r3, [r3, #12]
  108cdc:	e5934008 	ldr	r4, [r3, #8]
  108ce0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  108ce4:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  108ce8:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  108cec:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  108cf0:	e12fff34 	blx	r4
  108cf4:	e1a03000 	mov	r3, r0
  108cf8:	ea000000 	b	108d00 <sal_getaddrinfo+0x12c>
        }
    }

    return -1;
  108cfc:	e3e03000 	mvn	r3, #0
}
  108d00:	e1a00003 	mov	r0, r3
  108d04:	e24bd008 	sub	sp, fp, #8
  108d08:	e8bd8810 	pop	{r4, fp, pc}

00108d0c <sal_freeaddrinfo>:

void sal_freeaddrinfo(struct addrinfo *ai)
{
  108d0c:	e92d4800 	push	{fp, lr}
  108d10:	e28db004 	add	fp, sp, #4
  108d14:	e24dd010 	sub	sp, sp, #16
  108d18:	e50b0010 	str	r0, [fp, #-16]
    struct netdev *netdev = netdev_default;
  108d1c:	e3003564 	movw	r3, #1380	; 0x564
  108d20:	e3403015 	movt	r3, #21
  108d24:	e5933000 	ldr	r3, [r3]
  108d28:	e50b3008 	str	r3, [fp, #-8]
    struct sal_proto_family *pf;

    if (SAL_NETDEV_NETDBOPS_VALID(netdev, pf, freeaddrinfo))
  108d2c:	e51b3008 	ldr	r3, [fp, #-8]
  108d30:	e3530000 	cmp	r3, #0
  108d34:	0a000016 	beq	108d94 <sal_freeaddrinfo+0x88>
  108d38:	e51b3008 	ldr	r3, [fp, #-8]
  108d3c:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  108d40:	e2033001 	and	r3, r3, #1
  108d44:	e6ef3073 	uxtb	r3, r3
  108d48:	e3530000 	cmp	r3, #0
  108d4c:	0a000010 	beq	108d94 <sal_freeaddrinfo+0x88>
  108d50:	e51b3008 	ldr	r3, [fp, #-8]
  108d54:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108d58:	e50b300c 	str	r3, [fp, #-12]
  108d5c:	e51b300c 	ldr	r3, [fp, #-12]
  108d60:	e3530000 	cmp	r3, #0
  108d64:	0a00000a 	beq	108d94 <sal_freeaddrinfo+0x88>
  108d68:	e51b300c 	ldr	r3, [fp, #-12]
  108d6c:	e593300c 	ldr	r3, [r3, #12]
  108d70:	e593300c 	ldr	r3, [r3, #12]
  108d74:	e3530000 	cmp	r3, #0
  108d78:	0a000005 	beq	108d94 <sal_freeaddrinfo+0x88>
    {
        pf->netdb_ops->freeaddrinfo(ai);
  108d7c:	e51b300c 	ldr	r3, [fp, #-12]
  108d80:	e593300c 	ldr	r3, [r3, #12]
  108d84:	e593300c 	ldr	r3, [r3, #12]
  108d88:	e51b0010 	ldr	r0, [fp, #-16]
  108d8c:	e12fff33 	blx	r3
        if (SAL_NETDEV_NETDBOPS_VALID(netdev, pf, freeaddrinfo))
        {
            pf->netdb_ops->freeaddrinfo(ai);
        }
    }
}
  108d90:	ea00001b 	b	108e04 <sal_freeaddrinfo+0xf8>
        netdev = netdev_get_first_by_flags(NETDEV_FLAG_UP);
  108d94:	e3a00001 	mov	r0, #1
  108d98:	ebfff17d 	bl	105394 <netdev_get_first_by_flags>
  108d9c:	e50b0008 	str	r0, [fp, #-8]
        if (SAL_NETDEV_NETDBOPS_VALID(netdev, pf, freeaddrinfo))
  108da0:	e51b3008 	ldr	r3, [fp, #-8]
  108da4:	e3530000 	cmp	r3, #0
  108da8:	0a000015 	beq	108e04 <sal_freeaddrinfo+0xf8>
  108dac:	e51b3008 	ldr	r3, [fp, #-8]
  108db0:	e1d332ba 	ldrh	r3, [r3, #42]	; 0x2a
  108db4:	e2033001 	and	r3, r3, #1
  108db8:	e6ef3073 	uxtb	r3, r3
  108dbc:	e3530000 	cmp	r3, #0
  108dc0:	0a00000f 	beq	108e04 <sal_freeaddrinfo+0xf8>
  108dc4:	e51b3008 	ldr	r3, [fp, #-8]
  108dc8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  108dcc:	e50b300c 	str	r3, [fp, #-12]
  108dd0:	e51b300c 	ldr	r3, [fp, #-12]
  108dd4:	e3530000 	cmp	r3, #0
  108dd8:	0a000009 	beq	108e04 <sal_freeaddrinfo+0xf8>
  108ddc:	e51b300c 	ldr	r3, [fp, #-12]
  108de0:	e593300c 	ldr	r3, [r3, #12]
  108de4:	e593300c 	ldr	r3, [r3, #12]
  108de8:	e3530000 	cmp	r3, #0
  108dec:	0a000004 	beq	108e04 <sal_freeaddrinfo+0xf8>
            pf->netdb_ops->freeaddrinfo(ai);
  108df0:	e51b300c 	ldr	r3, [fp, #-12]
  108df4:	e593300c 	ldr	r3, [r3, #12]
  108df8:	e593300c 	ldr	r3, [r3, #12]
  108dfc:	e51b0010 	ldr	r0, [fp, #-16]
  108e00:	e12fff33 	blx	r3
}
  108e04:	e320f000 	nop	{0}
  108e08:	e24bd004 	sub	sp, fp, #4
  108e0c:	e8bd8800 	pop	{fp, pc}

00108e10 <unet_socket>:
 * socket options. To solve the issue, we do it separately in 2 steps.
 */
#define INTF_SOCK_NONBLOCK  04000
#define IMPL_SOCK_NONBLOCK  1
int unet_socket(int domain, int type, int protocol)
{
  108e10:	e92d4800 	push	{fp, lr}
  108e14:	e28db004 	add	fp, sp, #4
  108e18:	e24dd018 	sub	sp, sp, #24
  108e1c:	e50b0010 	str	r0, [fp, #-16]
  108e20:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  108e24:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    int socket;

    /* filter-out socket options: SOCK_NONBLOCK & SOCK_CLOEXEC (not supported) */
    int flag = type & INTF_SOCK_NONBLOCK;
  108e28:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108e2c:	e2033b02 	and	r3, r3, #2048	; 0x800
  108e30:	e50b3008 	str	r3, [fp, #-8]
    type &= ~INTF_SOCK_NONBLOCK;
  108e34:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  108e38:	e3c33b02 	bic	r3, r3, #2048	; 0x800
  108e3c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

    socket = lwip_socket(domain, type, protocol);
  108e40:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  108e44:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  108e48:	e51b0010 	ldr	r0, [fp, #-16]
  108e4c:	eb00281f 	bl	112ed0 <lwip_socket>
  108e50:	e50b000c 	str	r0, [fp, #-12]
    // sock_wqueue_add((void*)get_socket(socket));

    /* handle the socket options */
    if (socket >= 0 && flag != 0)
  108e54:	e51b300c 	ldr	r3, [fp, #-12]
  108e58:	e3530000 	cmp	r3, #0
  108e5c:	ba000006 	blt	108e7c <unet_socket+0x6c>
  108e60:	e51b3008 	ldr	r3, [fp, #-8]
  108e64:	e3530000 	cmp	r3, #0
  108e68:	0a000003 	beq	108e7c <unet_socket+0x6c>
        unet_fcntl(socket, F_SETFL, flag);
  108e6c:	e51b2008 	ldr	r2, [fp, #-8]
  108e70:	e3a01004 	mov	r1, #4
  108e74:	e51b000c 	ldr	r0, [fp, #-12]
  108e78:	eb0000e2 	bl	109208 <unet_fcntl>

    return socket;
  108e7c:	e51b300c 	ldr	r3, [fp, #-12]
}
  108e80:	e1a00003 	mov	r0, r3
  108e84:	e24bd004 	sub	sp, fp, #4
  108e88:	e8bd8800 	pop	{fp, pc}

00108e8c <unet_close>:

int unet_close(int socket)
{
  108e8c:	e92d4800 	push	{fp, lr}
  108e90:	e28db004 	add	fp, sp, #4
  108e94:	e24dd010 	sub	sp, sp, #16
  108e98:	e50b0010 	str	r0, [fp, #-16]
    int result = lwip_close(socket);
  108e9c:	e51b0010 	ldr	r0, [fp, #-16]
  108ea0:	eb0022f4 	bl	111a78 <lwip_close>
  108ea4:	e50b0008 	str	r0, [fp, #-8]
    // sock_wqueue_delete((void*)get_socket(socket));

    return result;
  108ea8:	e51b3008 	ldr	r3, [fp, #-8]
}
  108eac:	e1a00003 	mov	r0, r3
  108eb0:	e24bd004 	sub	sp, fp, #4
  108eb4:	e8bd8800 	pop	{fp, pc}

00108eb8 <unet_bind>:

int unet_bind(int socket, const struct sockaddr *name, socklen_t namelen)
{
  108eb8:	e92d4800 	push	{fp, lr}
  108ebc:	e28db004 	add	fp, sp, #4
  108ec0:	e24dd010 	sub	sp, sp, #16
  108ec4:	e50b0008 	str	r0, [fp, #-8]
  108ec8:	e50b100c 	str	r1, [fp, #-12]
  108ecc:	e50b2010 	str	r2, [fp, #-16]
    return lwip_bind(socket, name, namelen);
  108ed0:	e51b2010 	ldr	r2, [fp, #-16]
  108ed4:	e51b100c 	ldr	r1, [fp, #-12]
  108ed8:	e51b0008 	ldr	r0, [fp, #-8]
  108edc:	eb00227f 	bl	1118e0 <lwip_bind>
  108ee0:	e1a03000 	mov	r3, r0
}
  108ee4:	e1a00003 	mov	r0, r3
  108ee8:	e24bd004 	sub	sp, fp, #4
  108eec:	e8bd8800 	pop	{fp, pc}

00108ef0 <unet_listen>:

int unet_listen(int socket, int backlog)
{
  108ef0:	e92d4800 	push	{fp, lr}
  108ef4:	e28db004 	add	fp, sp, #4
  108ef8:	e24dd008 	sub	sp, sp, #8
  108efc:	e50b0008 	str	r0, [fp, #-8]
  108f00:	e50b100c 	str	r1, [fp, #-12]
    return lwip_listen(socket, backlog);
  108f04:	e51b100c 	ldr	r1, [fp, #-12]
  108f08:	e51b0008 	ldr	r0, [fp, #-8]
  108f0c:	eb002398 	bl	111d74 <lwip_listen>
  108f10:	e1a03000 	mov	r3, r0
}
  108f14:	e1a00003 	mov	r0, r3
  108f18:	e24bd004 	sub	sp, fp, #4
  108f1c:	e8bd8800 	pop	{fp, pc}

00108f20 <unet_connect>:

int unet_connect(int socket, const struct sockaddr *name, socklen_t namelen)
{
  108f20:	e92d4800 	push	{fp, lr}
  108f24:	e28db004 	add	fp, sp, #4
  108f28:	e24dd010 	sub	sp, sp, #16
  108f2c:	e50b0008 	str	r0, [fp, #-8]
  108f30:	e50b100c 	str	r1, [fp, #-12]
  108f34:	e50b2010 	str	r2, [fp, #-16]
    return lwip_connect(socket, name, namelen);
  108f38:	e51b2010 	ldr	r2, [fp, #-16]
  108f3c:	e51b100c 	ldr	r1, [fp, #-12]
  108f40:	e51b0008 	ldr	r0, [fp, #-8]
  108f44:	eb002315 	bl	111ba0 <lwip_connect>
  108f48:	e1a03000 	mov	r3, r0
}
  108f4c:	e1a00003 	mov	r0, r3
  108f50:	e24bd004 	sub	sp, fp, #4
  108f54:	e8bd8800 	pop	{fp, pc}

00108f58 <unet_accept>:

int unet_accept(int socket, struct sockaddr *addr, socklen_t *addrlen)
{
  108f58:	e92d4800 	push	{fp, lr}
  108f5c:	e28db004 	add	fp, sp, #4
  108f60:	e24dd010 	sub	sp, sp, #16
  108f64:	e50b0008 	str	r0, [fp, #-8]
  108f68:	e50b100c 	str	r1, [fp, #-12]
  108f6c:	e50b2010 	str	r2, [fp, #-16]
    socket = lwip_accept(socket, addr, addrlen);
  108f70:	e51b2010 	ldr	r2, [fp, #-16]
  108f74:	e51b100c 	ldr	r1, [fp, #-12]
  108f78:	e51b0008 	ldr	r0, [fp, #-8]
  108f7c:	eb002149 	bl	1114a8 <lwip_accept>
  108f80:	e50b0008 	str	r0, [fp, #-8]
    // sock_wqueue_add((void*)get_socket(socket));

    return socket;
  108f84:	e51b3008 	ldr	r3, [fp, #-8]
}
  108f88:	e1a00003 	mov	r0, r3
  108f8c:	e24bd004 	sub	sp, fp, #4
  108f90:	e8bd8800 	pop	{fp, pc}

00108f94 <unet_sendto>:

int unet_sendto(int socket, const void *data, size_t size, int flags, const struct sockaddr *to, socklen_t tolen)
{
  108f94:	e92d4800 	push	{fp, lr}
  108f98:	e28db004 	add	fp, sp, #4
  108f9c:	e24dd020 	sub	sp, sp, #32
  108fa0:	e50b0010 	str	r0, [fp, #-16]
  108fa4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  108fa8:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  108fac:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    int result;
    if(tolen  == 0)
  108fb0:	e59b3008 	ldr	r3, [fp, #8]
  108fb4:	e3530000 	cmp	r3, #0
  108fb8:	1a00000a 	bne	108fe8 <unet_sendto+0x54>
    {
        result = lwip_sendto(socket, data, size, flags, RT_NULL, RT_NULL);
  108fbc:	e3a03000 	mov	r3, #0
  108fc0:	e58d3004 	str	r3, [sp, #4]
  108fc4:	e3a03000 	mov	r3, #0
  108fc8:	e58d3000 	str	r3, [sp]
  108fcc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  108fd0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  108fd4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  108fd8:	e51b0010 	ldr	r0, [fp, #-16]
  108fdc:	eb002727 	bl	112c80 <lwip_sendto>
  108fe0:	e50b0008 	str	r0, [fp, #-8]
  108fe4:	ea000009 	b	109010 <unet_sendto+0x7c>
    }
    else
    {
        result = lwip_sendto(socket, data, size, flags, to, tolen);
  108fe8:	e59b3008 	ldr	r3, [fp, #8]
  108fec:	e58d3004 	str	r3, [sp, #4]
  108ff0:	e59b3004 	ldr	r3, [fp, #4]
  108ff4:	e58d3000 	str	r3, [sp]
  108ff8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  108ffc:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  109000:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  109004:	e51b0010 	ldr	r0, [fp, #-16]
  109008:	eb00271c 	bl	112c80 <lwip_sendto>
  10900c:	e50b0008 	str	r0, [fp, #-8]
    }
    if(result <= 0)
  109010:	e51b3008 	ldr	r3, [fp, #-8]
  109014:	e3530000 	cmp	r3, #0
  109018:	ca000005 	bgt	109034 <unet_sendto+0xa0>
    {
        rt_kprintf("%s line %d sendto error\n",__func__,__LINE__);
  10901c:	e3a02058 	mov	r2, #88	; 0x58
  109020:	e3061368 	movw	r1, #25448	; 0x6368
  109024:	e3401014 	movt	r1, #20
  109028:	e306034c 	movw	r0, #25420	; 0x634c
  10902c:	e3400014 	movt	r0, #20
  109030:	ebffe837 	bl	103114 <rt_kprintf>
    }
    return result;
  109034:	e51b3008 	ldr	r3, [fp, #-8]
}
  109038:	e1a00003 	mov	r0, r3
  10903c:	e24bd004 	sub	sp, fp, #4
  109040:	e8bd8800 	pop	{fp, pc}

00109044 <unet_recvfrom>:

int unet_recvfrom(int socket, void *mem, size_t size, int flags, struct sockaddr *from, socklen_t *fromlen)
{
  109044:	e92d4800 	push	{fp, lr}
  109048:	e28db004 	add	fp, sp, #4
  10904c:	e24dd018 	sub	sp, sp, #24
  109050:	e50b0008 	str	r0, [fp, #-8]
  109054:	e50b100c 	str	r1, [fp, #-12]
  109058:	e50b2010 	str	r2, [fp, #-16]
  10905c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    if(from && fromlen)
  109060:	e59b3004 	ldr	r3, [fp, #4]
  109064:	e3530000 	cmp	r3, #0
  109068:	0a00000d 	beq	1090a4 <unet_recvfrom+0x60>
  10906c:	e59b3008 	ldr	r3, [fp, #8]
  109070:	e3530000 	cmp	r3, #0
  109074:	0a00000a 	beq	1090a4 <unet_recvfrom+0x60>
    {
        return lwip_recvfrom(socket, mem, size, flags, from, fromlen);
  109078:	e59b3008 	ldr	r3, [fp, #8]
  10907c:	e58d3004 	str	r3, [sp, #4]
  109080:	e59b3004 	ldr	r3, [fp, #4]
  109084:	e58d3000 	str	r3, [sp]
  109088:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10908c:	e51b2010 	ldr	r2, [fp, #-16]
  109090:	e51b100c 	ldr	r1, [fp, #-12]
  109094:	e51b0008 	ldr	r0, [fp, #-8]
  109098:	eb00238d 	bl	111ed4 <lwip_recvfrom>
  10909c:	e1a03000 	mov	r3, r0
  1090a0:	ea000009 	b	1090cc <unet_recvfrom+0x88>
    }
    else
    {
        return lwip_recvfrom(socket, mem, size, flags, RT_NULL, RT_NULL);
  1090a4:	e3a03000 	mov	r3, #0
  1090a8:	e58d3004 	str	r3, [sp, #4]
  1090ac:	e3a03000 	mov	r3, #0
  1090b0:	e58d3000 	str	r3, [sp]
  1090b4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1090b8:	e51b2010 	ldr	r2, [fp, #-16]
  1090bc:	e51b100c 	ldr	r1, [fp, #-12]
  1090c0:	e51b0008 	ldr	r0, [fp, #-8]
  1090c4:	eb002382 	bl	111ed4 <lwip_recvfrom>
  1090c8:	e1a03000 	mov	r3, r0
    }
}
  1090cc:	e1a00003 	mov	r0, r3
  1090d0:	e24bd004 	sub	sp, fp, #4
  1090d4:	e8bd8800 	pop	{fp, pc}

001090d8 <unet_getsockopt>:

int unet_getsockopt(int socket, int level, int optname, void *optval, socklen_t *optlen)
{
  1090d8:	e92d4800 	push	{fp, lr}
  1090dc:	e28db004 	add	fp, sp, #4
  1090e0:	e24dd018 	sub	sp, sp, #24
  1090e4:	e50b0008 	str	r0, [fp, #-8]
  1090e8:	e50b100c 	str	r1, [fp, #-12]
  1090ec:	e50b2010 	str	r2, [fp, #-16]
  1090f0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return lwip_getsockopt(socket, level, optname, optval, optlen);
  1090f4:	e59b3004 	ldr	r3, [fp, #4]
  1090f8:	e58d3000 	str	r3, [sp]
  1090fc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109100:	e51b2010 	ldr	r2, [fp, #-16]
  109104:	e51b100c 	ldr	r1, [fp, #-12]
  109108:	e51b0008 	ldr	r0, [fp, #-8]
  10910c:	eb002c85 	bl	114328 <lwip_getsockopt>
  109110:	e1a03000 	mov	r3, r0
}
  109114:	e1a00003 	mov	r0, r3
  109118:	e24bd004 	sub	sp, fp, #4
  10911c:	e8bd8800 	pop	{fp, pc}

00109120 <unet_setsockopt>:

int unet_setsockopt(int socket, int level, int optname, const void *optval, socklen_t optlen)
{
  109120:	e92d4800 	push	{fp, lr}
  109124:	e28db004 	add	fp, sp, #4
  109128:	e24dd018 	sub	sp, sp, #24
  10912c:	e50b0008 	str	r0, [fp, #-8]
  109130:	e50b100c 	str	r1, [fp, #-12]
  109134:	e50b2010 	str	r2, [fp, #-16]
  109138:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return lwip_setsockopt(socket, level, optname, optval, optlen);
  10913c:	e59b3004 	ldr	r3, [fp, #4]
  109140:	e58d3000 	str	r3, [sp]
  109144:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109148:	e51b2010 	ldr	r2, [fp, #-16]
  10914c:	e51b100c 	ldr	r1, [fp, #-12]
  109150:	e51b0008 	ldr	r0, [fp, #-8]
  109154:	eb002f3b 	bl	114e48 <lwip_setsockopt>
  109158:	e1a03000 	mov	r3, r0
}
  10915c:	e1a00003 	mov	r0, r3
  109160:	e24bd004 	sub	sp, fp, #4
  109164:	e8bd8800 	pop	{fp, pc}

00109168 <unet_shutdown>:

int unet_shutdown(int socket, int how)
{
  109168:	e92d4800 	push	{fp, lr}
  10916c:	e28db004 	add	fp, sp, #4
  109170:	e24dd008 	sub	sp, sp, #8
  109174:	e50b0008 	str	r0, [fp, #-8]
  109178:	e50b100c 	str	r1, [fp, #-12]
    return lwip_shutdown(socket, how);
  10917c:	e51b100c 	ldr	r1, [fp, #-12]
  109180:	e51b0008 	ldr	r0, [fp, #-8]
  109184:	eb002b6d 	bl	113f40 <lwip_shutdown>
  109188:	e1a03000 	mov	r3, r0
}
  10918c:	e1a00003 	mov	r0, r3
  109190:	e24bd004 	sub	sp, fp, #4
  109194:	e8bd8800 	pop	{fp, pc}

00109198 <unet_getpeername>:

int unet_getpeername(int socket, struct sockaddr *name, socklen_t *namelen)
{
  109198:	e92d4800 	push	{fp, lr}
  10919c:	e28db004 	add	fp, sp, #4
  1091a0:	e24dd010 	sub	sp, sp, #16
  1091a4:	e50b0008 	str	r0, [fp, #-8]
  1091a8:	e50b100c 	str	r1, [fp, #-12]
  1091ac:	e50b2010 	str	r2, [fp, #-16]
    return lwip_getpeername(socket, name, namelen);
  1091b0:	e51b2010 	ldr	r2, [fp, #-16]
  1091b4:	e51b100c 	ldr	r1, [fp, #-12]
  1091b8:	e51b0008 	ldr	r0, [fp, #-8]
  1091bc:	eb002c3b 	bl	1142b0 <lwip_getpeername>
  1091c0:	e1a03000 	mov	r3, r0
}
  1091c4:	e1a00003 	mov	r0, r3
  1091c8:	e24bd004 	sub	sp, fp, #4
  1091cc:	e8bd8800 	pop	{fp, pc}

001091d0 <unet_getsockname>:

int unet_getsockname(int socket, struct sockaddr *name, socklen_t *namelen)
{
  1091d0:	e92d4800 	push	{fp, lr}
  1091d4:	e28db004 	add	fp, sp, #4
  1091d8:	e24dd010 	sub	sp, sp, #16
  1091dc:	e50b0008 	str	r0, [fp, #-8]
  1091e0:	e50b100c 	str	r1, [fp, #-12]
  1091e4:	e50b2010 	str	r2, [fp, #-16]
    return lwip_getsockname(socket, name, namelen);
  1091e8:	e51b2010 	ldr	r2, [fp, #-16]
  1091ec:	e51b100c 	ldr	r1, [fp, #-12]
  1091f0:	e51b0008 	ldr	r0, [fp, #-8]
  1091f4:	eb002c3c 	bl	1142ec <lwip_getsockname>
  1091f8:	e1a03000 	mov	r3, r0
}
  1091fc:	e1a00003 	mov	r0, r3
  109200:	e24bd004 	sub	sp, fp, #4
  109204:	e8bd8800 	pop	{fp, pc}

00109208 <unet_fcntl>:

int unet_fcntl(int socket, int cmd, int val)
{
  109208:	e92d4800 	push	{fp, lr}
  10920c:	e28db004 	add	fp, sp, #4
  109210:	e24dd010 	sub	sp, sp, #16
  109214:	e50b0008 	str	r0, [fp, #-8]
  109218:	e50b100c 	str	r1, [fp, #-12]
  10921c:	e50b2010 	str	r2, [fp, #-16]
    return lwip_fcntl(socket, cmd, val);
  109220:	e51b2010 	ldr	r2, [fp, #-16]
  109224:	e51b100c 	ldr	r1, [fp, #-12]
  109228:	e51b0008 	ldr	r0, [fp, #-8]
  10922c:	eb003251 	bl	115b78 <lwip_fcntl>
  109230:	e1a03000 	mov	r3, r0
}
  109234:	e1a00003 	mov	r0, r3
  109238:	e24bd004 	sub	sp, fp, #4
  10923c:	e8bd8800 	pop	{fp, pc}

00109240 <unet_ioctl>:

/* Observe the 'real' IOCTL operations in unet 'api/sockets.c' and find that
 * 'argp' is used as an integer pointer. */
int unet_ioctl(int socket, long cmd, void *argp)
{
  109240:	e92d4800 	push	{fp, lr}
  109244:	e28db004 	add	fp, sp, #4
  109248:	e24dd010 	sub	sp, sp, #16
  10924c:	e50b0008 	str	r0, [fp, #-8]
  109250:	e50b100c 	str	r1, [fp, #-12]
  109254:	e50b2010 	str	r2, [fp, #-16]
    return lwip_ioctl(socket, cmd, argp);
  109258:	e51b2010 	ldr	r2, [fp, #-16]
  10925c:	e51b100c 	ldr	r1, [fp, #-12]
  109260:	e51b0008 	ldr	r0, [fp, #-8]
  109264:	eb00319c 	bl	1158dc <lwip_ioctl>
  109268:	e1a03000 	mov	r3, r0
}
  10926c:	e1a00003 	mov	r0, r3
  109270:	e24bd004 	sub	sp, fp, #4
  109274:	e8bd8800 	pop	{fp, pc}

00109278 <unet_gethostbyname>:
#include <stdio.h>
struct hostent* unet_gethostbyname(const char *name)
{
  109278:	e92d4800 	push	{fp, lr}
  10927c:	e28db004 	add	fp, sp, #4
  109280:	e24dd008 	sub	sp, sp, #8
  109284:	e50b0008 	str	r0, [fp, #-8]
    static struct hostent s_hostent, *p_hostent = RT_NULL;
    static char *s_aliases;
    static ip_addr_t s_hostent_addr;
    static ip_addr_t *s_phostent_addr[2];
    static char s_hostname[DNS_MAX_NAME_LENGTH + 1];
    p_hostent = lwip_gethostbyname(name);
  109288:	e51b0008 	ldr	r0, [fp, #-8]
  10928c:	eb001d00 	bl	110694 <lwip_gethostbyname>
  109290:	e1a02000 	mov	r2, r0
  109294:	e30e3494 	movw	r3, #58516	; 0xe494
  109298:	e3403014 	movt	r3, #20
  10929c:	e5832000 	str	r2, [r3]
    memset(&s_hostent, 0, sizeof(s_hostent));
  1092a0:	e3a02014 	mov	r2, #20
  1092a4:	e3a01000 	mov	r1, #0
  1092a8:	e30e0498 	movw	r0, #58520	; 0xe498
  1092ac:	e3400014 	movt	r0, #20
  1092b0:	eb00e069 	bl	14145c <memset>
    /* fill hostent */
    s_hostent_addr = *((ip_addr_t *) p_hostent->h_addr);
  1092b4:	e30e3494 	movw	r3, #58516	; 0xe494
  1092b8:	e3403014 	movt	r3, #20
  1092bc:	e5933000 	ldr	r3, [r3]
  1092c0:	e5933010 	ldr	r3, [r3, #16]
  1092c4:	e5932000 	ldr	r2, [r3]
  1092c8:	e30e34ac 	movw	r3, #58540	; 0xe4ac
  1092cc:	e3403014 	movt	r3, #20
  1092d0:	e5922000 	ldr	r2, [r2]
  1092d4:	e5832000 	str	r2, [r3]
    s_phostent_addr[0] = &s_hostent_addr;
  1092d8:	e30e34b0 	movw	r3, #58544	; 0xe4b0
  1092dc:	e3403014 	movt	r3, #20
  1092e0:	e30e24ac 	movw	r2, #58540	; 0xe4ac
  1092e4:	e3402014 	movt	r2, #20
  1092e8:	e5832000 	str	r2, [r3]
    s_phostent_addr[1] = NULL;
  1092ec:	e30e34b0 	movw	r3, #58544	; 0xe4b0
  1092f0:	e3403014 	movt	r3, #20
  1092f4:	e3a02000 	mov	r2, #0
  1092f8:	e5832004 	str	r2, [r3, #4]
    strncpy(s_hostname, name, DNS_MAX_NAME_LENGTH);
  1092fc:	e3a02c01 	mov	r2, #256	; 0x100
  109300:	e51b1008 	ldr	r1, [fp, #-8]
  109304:	e30e04b8 	movw	r0, #58552	; 0xe4b8
  109308:	e3400014 	movt	r0, #20
  10930c:	eb00e134 	bl	1417e4 <strncpy>
    s_hostname[DNS_MAX_NAME_LENGTH] = 0;
  109310:	e30e34b8 	movw	r3, #58552	; 0xe4b8
  109314:	e3403014 	movt	r3, #20
  109318:	e3a02000 	mov	r2, #0
  10931c:	e5c32100 	strb	r2, [r3, #256]	; 0x100
    s_hostent.h_name = s_hostname;
  109320:	e30e3498 	movw	r3, #58520	; 0xe498
  109324:	e3403014 	movt	r3, #20
  109328:	e30e24b8 	movw	r2, #58552	; 0xe4b8
  10932c:	e3402014 	movt	r2, #20
  109330:	e5832000 	str	r2, [r3]
    s_aliases = NULL;
  109334:	e30e35bc 	movw	r3, #58812	; 0xe5bc
  109338:	e3403014 	movt	r3, #20
  10933c:	e3a02000 	mov	r2, #0
  109340:	e5832000 	str	r2, [r3]
    s_hostent.h_aliases = &s_aliases;
  109344:	e30e3498 	movw	r3, #58520	; 0xe498
  109348:	e3403014 	movt	r3, #20
  10934c:	e30e25bc 	movw	r2, #58812	; 0xe5bc
  109350:	e3402014 	movt	r2, #20
  109354:	e5832004 	str	r2, [r3, #4]
    s_hostent.h_addrtype = AF_INET;
  109358:	e30e3498 	movw	r3, #58520	; 0xe498
  10935c:	e3403014 	movt	r3, #20
  109360:	e3a02002 	mov	r2, #2
  109364:	e5832008 	str	r2, [r3, #8]
    s_hostent.h_length = sizeof(ip_addr_t);
  109368:	e30e3498 	movw	r3, #58520	; 0xe498
  10936c:	e3403014 	movt	r3, #20
  109370:	e3a02004 	mov	r2, #4
  109374:	e583200c 	str	r2, [r3, #12]
    s_hostent.h_addr_list = (char**)&s_phostent_addr;
  109378:	e30e3498 	movw	r3, #58520	; 0xe498
  10937c:	e3403014 	movt	r3, #20
  109380:	e30e24b0 	movw	r2, #58544	; 0xe4b0
  109384:	e3402014 	movt	r2, #20
  109388:	e5832010 	str	r2, [r3, #16]
    p_hostent = &s_hostent;
  10938c:	e30e3494 	movw	r3, #58516	; 0xe494
  109390:	e3403014 	movt	r3, #20
  109394:	e30e2498 	movw	r2, #58520	; 0xe498
  109398:	e3402014 	movt	r2, #20
  10939c:	e5832000 	str	r2, [r3]

    return p_hostent;
  1093a0:	e30e3494 	movw	r3, #58516	; 0xe494
  1093a4:	e3403014 	movt	r3, #20
  1093a8:	e5933000 	ldr	r3, [r3]
}
  1093ac:	e1a00003 	mov	r0, r3
  1093b0:	e24bd004 	sub	sp, fp, #4
  1093b4:	e8bd8800 	pop	{fp, pc}

001093b8 <unet_gethostbyname_r>:

int unet_gethostbyname_r(const char *name, struct hostent *ret, char *buf, size_t buflen, struct hostent **result, int *h_errnop)
{
  1093b8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1093bc:	e28db000 	add	fp, sp, #0
  1093c0:	e24dd014 	sub	sp, sp, #20
  1093c4:	e50b0008 	str	r0, [fp, #-8]
  1093c8:	e50b100c 	str	r1, [fp, #-12]
  1093cc:	e50b2010 	str	r2, [fp, #-16]
  1093d0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return 0;
  1093d4:	e3a03000 	mov	r3, #0
}
  1093d8:	e1a00003 	mov	r0, r3
  1093dc:	e28bd000 	add	sp, fp, #0
  1093e0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1093e4:	e12fff1e 	bx	lr

001093e8 <unet_getaddrinfo>:

int unet_getaddrinfo(const char *nodename, const char *servname, const struct addrinfo *hints, struct addrinfo **res)
{
  1093e8:	e92d4800 	push	{fp, lr}
  1093ec:	e28db004 	add	fp, sp, #4
  1093f0:	e24dd010 	sub	sp, sp, #16
  1093f4:	e50b0008 	str	r0, [fp, #-8]
  1093f8:	e50b100c 	str	r1, [fp, #-12]
  1093fc:	e50b2010 	str	r2, [fp, #-16]
  109400:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    return lwip_getaddrinfo(nodename, servname, hints, res);
  109404:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109408:	e51b2010 	ldr	r2, [fp, #-16]
  10940c:	e51b100c 	ldr	r1, [fp, #-12]
  109410:	e51b0008 	ldr	r0, [fp, #-8]
  109414:	eb001d6c 	bl	1109cc <lwip_getaddrinfo>
  109418:	e1a03000 	mov	r3, r0
}
  10941c:	e1a00003 	mov	r0, r3
  109420:	e24bd004 	sub	sp, fp, #4
  109424:	e8bd8800 	pop	{fp, pc}

00109428 <unet_freeaddrinfo>:

void unet_freeaddrinfo(struct addrinfo *ai)
{
  109428:	e92d4800 	push	{fp, lr}
  10942c:	e28db004 	add	fp, sp, #4
  109430:	e24dd008 	sub	sp, sp, #8
  109434:	e50b0008 	str	r0, [fp, #-8]
    lwip_freeaddrinfo(ai);
  109438:	e51b0008 	ldr	r0, [fp, #-8]
  10943c:	eb001d4f 	bl	110980 <lwip_freeaddrinfo>
}
  109440:	e320f000 	nop	{0}
  109444:	e24bd004 	sub	sp, fp, #4
  109448:	e8bd8800 	pop	{fp, pc}

0010944c <rt_list_init>:
{
  10944c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  109450:	e28db000 	add	fp, sp, #0
  109454:	e24dd00c 	sub	sp, sp, #12
  109458:	e50b0008 	str	r0, [fp, #-8]
    l->next = l->prev = l;
  10945c:	e51b3008 	ldr	r3, [fp, #-8]
  109460:	e51b2008 	ldr	r2, [fp, #-8]
  109464:	e5832004 	str	r2, [r3, #4]
  109468:	e51b3008 	ldr	r3, [fp, #-8]
  10946c:	e5932004 	ldr	r2, [r3, #4]
  109470:	e51b3008 	ldr	r3, [fp, #-8]
  109474:	e5832000 	str	r2, [r3]
}
  109478:	e320f000 	nop	{0}
  10947c:	e28bd000 	add	sp, fp, #0
  109480:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  109484:	e12fff1e 	bx	lr

00109488 <accept_internal>:
#include "dfs_net.h"

#include "sal_socket.h"

int accept_internal(int s, struct sockaddr *addr, socklen_t *addrlen)
{
  109488:	e92d4810 	push	{r4, fp, lr}
  10948c:	e28db008 	add	fp, sp, #8
  109490:	e24dd024 	sub	sp, sp, #36	; 0x24
  109494:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  109498:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  10949c:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
    int new_socket = -1;
  1094a0:	e3e03000 	mvn	r3, #0
  1094a4:	e50b3010 	str	r3, [fp, #-16]
    int socket = dfs_net_getsocket(s);
  1094a8:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  1094ac:	eb000352 	bl	10a1fc <dfs_net_getsocket>
  1094b0:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec

    new_socket = sal_accept(socket, addr, addrlen);
  1094b4:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  1094b8:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  1094bc:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1094c0:	ebfff95f 	bl	107a44 <sal_accept>
  1094c4:	e50b0010 	str	r0, [fp, #-16]
    if (new_socket != -1)
  1094c8:	e51b3010 	ldr	r3, [fp, #-16]
  1094cc:	e3730001 	cmn	r3, #1
  1094d0:	0a000050 	beq	109618 <accept_internal+0x190>
        /* this is a new socket, create it in file system fd */
        int fd;
        struct dfs_fd *d;

        /* allocate a fd */
        fd = fd_new();
  1094d4:	eb000272 	bl	109ea4 <fd_new>
  1094d8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
        if (fd < 0)
  1094dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1094e0:	e3530000 	cmp	r3, #0
  1094e4:	aa000003 	bge	1094f8 <accept_internal+0x70>
        {
            sal_closesocket(new_socket);
  1094e8:	e51b0010 	ldr	r0, [fp, #-16]
  1094ec:	ebfffc25 	bl	108588 <sal_closesocket>
            return -ENOMEM;
  1094f0:	e3e0300b 	mvn	r3, #11
  1094f4:	ea000048 	b	10961c <accept_internal+0x194>
        }

        d = fd_get(fd);
  1094f8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1094fc:	eb00029d 	bl	109f78 <fd_get>
  109500:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
        if(d)
  109504:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109508:	e3530000 	cmp	r3, #0
  10950c:	0a00003d 	beq	109608 <accept_internal+0x180>
        {
            /* this is a socket fd */
            d->fnode = (struct dfs_fnode *)rt_malloc(sizeof(struct dfs_fnode));
  109510:	e3a00028 	mov	r0, #40	; 0x28
  109514:	ebffe69e 	bl	102f94 <rt_malloc>
  109518:	e1a02000 	mov	r2, r0
  10951c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109520:	e5832018 	str	r2, [r3, #24]
            if (!d->fnode)
  109524:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109528:	e5933018 	ldr	r3, [r3, #24]
  10952c:	e3530000 	cmp	r3, #0
  109530:	1a000003 	bne	109544 <accept_internal+0xbc>
            {
                /* release fd */
                fd_release(fd);
  109534:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  109538:	eb0002ed 	bl	10a0f4 <fd_release>
                return -ENOMEM;
  10953c:	e3e0300b 	mvn	r3, #11
  109540:	ea000035 	b	10961c <accept_internal+0x194>
            }
            rt_memset(d->fnode, 0, sizeof(struct dfs_fnode));
  109544:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109548:	e5933018 	ldr	r3, [r3, #24]
  10954c:	e3a02028 	mov	r2, #40	; 0x28
  109550:	e3a01000 	mov	r1, #0
  109554:	e1a00003 	mov	r0, r3
  109558:	ebffe75a 	bl	1032c8 <rt_memset>
            rt_list_init(&d->fnode->list);
  10955c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109560:	e5933018 	ldr	r3, [r3, #24]
  109564:	e2833010 	add	r3, r3, #16
  109568:	e1a00003 	mov	r0, r3
  10956c:	ebffffb6 	bl	10944c <rt_list_init>

            d->fnode->type = FT_SOCKET;
  109570:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109574:	e5933018 	ldr	r3, [r3, #24]
  109578:	e3a02001 	mov	r2, #1
  10957c:	e1c320b0 	strh	r2, [r3]
            d->fnode->path = NULL;
  109580:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109584:	e5933018 	ldr	r3, [r3, #24]
  109588:	e3a02000 	mov	r2, #0
  10958c:	e5832004 	str	r2, [r3, #4]
            d->fnode->fullpath = NULL;
  109590:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109594:	e5933018 	ldr	r3, [r3, #24]
  109598:	e3a02000 	mov	r2, #0
  10959c:	e5832008 	str	r2, [r3, #8]
            d->fnode->ref_count = 1;
  1095a0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1095a4:	e5933018 	ldr	r3, [r3, #24]
  1095a8:	e3a02001 	mov	r2, #1
  1095ac:	e583200c 	str	r2, [r3, #12]
            d->fnode->fops = dfs_net_get_fops();
  1095b0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1095b4:	e5934018 	ldr	r4, [r3, #24]
  1095b8:	eb0003ae 	bl	10a478 <dfs_net_get_fops>
  1095bc:	e1a03000 	mov	r3, r0
  1095c0:	e5843018 	str	r3, [r4, #24]
            d->flags = O_RDWR; /* set flags as read and write */
  1095c4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1095c8:	e3a02002 	mov	r2, #2
  1095cc:	e5832004 	str	r2, [r3, #4]
            d->fnode->size = 0;
  1095d0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1095d4:	e5933018 	ldr	r3, [r3, #24]
  1095d8:	e3a02000 	mov	r2, #0
  1095dc:	e5832020 	str	r2, [r3, #32]
            d->pos = 0;
  1095e0:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  1095e4:	e3a02000 	mov	r2, #0
  1095e8:	e3a03000 	mov	r3, #0
  1095ec:	e1c121f0 	strd	r2, [r1, #16]

            /* set socket to the data of dfs_fd */
            d->fnode->data = (void *)(size_t)new_socket;
  1095f0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1095f4:	e5933018 	ldr	r3, [r3, #24]
  1095f8:	e51b2010 	ldr	r2, [fp, #-16]
  1095fc:	e5832024 	str	r2, [r3, #36]	; 0x24

            return fd;
  109600:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  109604:	ea000004 	b	10961c <accept_internal+0x194>
        }

        sal_closesocket(new_socket);
  109608:	e51b0010 	ldr	r0, [fp, #-16]
  10960c:	ebfffbdd 	bl	108588 <sal_closesocket>
        return -ENOMEM;
  109610:	e3e0300b 	mvn	r3, #11
  109614:	ea000000 	b	10961c <accept_internal+0x194>
    }

    return -1;
  109618:	e3e03000 	mvn	r3, #0
}
  10961c:	e1a00003 	mov	r0, r3
  109620:	e24bd008 	sub	sp, fp, #8
  109624:	e8bd8810 	pop	{r4, fp, pc}

00109628 <bind_internal>:

int bind_internal(int s, const struct sockaddr *name, socklen_t namelen)
{
  109628:	e92d4800 	push	{fp, lr}
  10962c:	e28db004 	add	fp, sp, #4
  109630:	e24dd018 	sub	sp, sp, #24
  109634:	e50b0010 	str	r0, [fp, #-16]
  109638:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10963c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    int socket = dfs_net_getsocket(s);
  109640:	e51b0010 	ldr	r0, [fp, #-16]
  109644:	eb0002ec 	bl	10a1fc <dfs_net_getsocket>
  109648:	e50b0008 	str	r0, [fp, #-8]
        server_addr.sin_addr.s_addr = inet_addr("127.0.0.1");
        return sal_bind(socket, (struct sockaddr *)&server_addr, namelen);
    }
#endif /* SAL_USING_AF_UNIX */

    return sal_bind(socket, name, namelen);
  10964c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  109650:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  109654:	e51b0008 	ldr	r0, [fp, #-8]
  109658:	ebfff973 	bl	107c2c <sal_bind>
  10965c:	e1a03000 	mov	r3, r0
}
  109660:	e1a00003 	mov	r0, r3
  109664:	e24bd004 	sub	sp, fp, #4
  109668:	e8bd8800 	pop	{fp, pc}

0010966c <connect_internal>:

int connect_internal(int s, const struct sockaddr *name, socklen_t namelen)
{
  10966c:	e92d4800 	push	{fp, lr}
  109670:	e28db004 	add	fp, sp, #4
  109674:	e24dd018 	sub	sp, sp, #24
  109678:	e50b0010 	str	r0, [fp, #-16]
  10967c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  109680:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    int socket = dfs_net_getsocket(s);
  109684:	e51b0010 	ldr	r0, [fp, #-16]
  109688:	eb0002db 	bl	10a1fc <dfs_net_getsocket>
  10968c:	e50b0008 	str	r0, [fp, #-8]
        server_addr.sin_addr.s_addr = inet_addr("127.0.0.1");
        return sal_connect(socket, (struct sockaddr *)&server_addr, namelen);
    }
#endif /* SAL_USING_AF_UNIX */

    return sal_connect(socket, name, namelen);
  109690:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  109694:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  109698:	e51b0008 	ldr	r0, [fp, #-8]
  10969c:	ebfffaad 	bl	108158 <sal_connect>
  1096a0:	e1a03000 	mov	r3, r0
}
  1096a4:	e1a00003 	mov	r0, r3
  1096a8:	e24bd004 	sub	sp, fp, #4
  1096ac:	e8bd8800 	pop	{fp, pc}

001096b0 <setsockopt_internal>:

int setsockopt_internal(int s, int level, int optname, const void *optval, socklen_t optlen)
{
  1096b0:	e92d4800 	push	{fp, lr}
  1096b4:	e28db004 	add	fp, sp, #4
  1096b8:	e24dd020 	sub	sp, sp, #32
  1096bc:	e50b0010 	str	r0, [fp, #-16]
  1096c0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1096c4:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  1096c8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    int socket = dfs_net_getsocket(s);
  1096cc:	e51b0010 	ldr	r0, [fp, #-16]
  1096d0:	eb0002c9 	bl	10a1fc <dfs_net_getsocket>
  1096d4:	e50b0008 	str	r0, [fp, #-8]

    return sal_setsockopt(socket, level, optname, optval, optlen);
  1096d8:	e59b3004 	ldr	r3, [fp, #4]
  1096dc:	e58d3000 	str	r3, [sp]
  1096e0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1096e4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1096e8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1096ec:	e51b0008 	ldr	r0, [fp, #-8]
  1096f0:	ebfffa6e 	bl	1080b0 <sal_setsockopt>
  1096f4:	e1a03000 	mov	r3, r0
}
  1096f8:	e1a00003 	mov	r0, r3
  1096fc:	e24bd004 	sub	sp, fp, #4
  109700:	e8bd8800 	pop	{fp, pc}

00109704 <listen_internal>:

int listen_internal(int s, int backlog)
{
  109704:	e92d4800 	push	{fp, lr}
  109708:	e28db004 	add	fp, sp, #4
  10970c:	e24dd010 	sub	sp, sp, #16
  109710:	e50b0010 	str	r0, [fp, #-16]
  109714:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    int socket = dfs_net_getsocket(s);
  109718:	e51b0010 	ldr	r0, [fp, #-16]
  10971c:	eb0002b6 	bl	10a1fc <dfs_net_getsocket>
  109720:	e50b0008 	str	r0, [fp, #-8]

    return sal_listen(socket, backlog);
  109724:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  109728:	e51b0008 	ldr	r0, [fp, #-8]
  10972c:	ebfffab8 	bl	108214 <sal_listen>
  109730:	e1a03000 	mov	r3, r0
}
  109734:	e1a00003 	mov	r0, r3
  109738:	e24bd004 	sub	sp, fp, #4
  10973c:	e8bd8800 	pop	{fp, pc}

00109740 <recv_internal>:


int recv_internal(int s, void *mem, size_t len, int flags)
{
  109740:	e92d4800 	push	{fp, lr}
  109744:	e28db004 	add	fp, sp, #4
  109748:	e24dd020 	sub	sp, sp, #32
  10974c:	e50b0010 	str	r0, [fp, #-16]
  109750:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  109754:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  109758:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    int socket = dfs_net_getsocket(s);
  10975c:	e51b0010 	ldr	r0, [fp, #-16]
  109760:	eb0002a5 	bl	10a1fc <dfs_net_getsocket>
  109764:	e50b0008 	str	r0, [fp, #-8]

    return sal_recvfrom(socket, mem, len, flags, NULL, NULL);
  109768:	e3a03000 	mov	r3, #0
  10976c:	e58d3004 	str	r3, [sp, #4]
  109770:	e3a03000 	mov	r3, #0
  109774:	e58d3000 	str	r3, [sp]
  109778:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10977c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  109780:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  109784:	e51b0008 	ldr	r0, [fp, #-8]
  109788:	ebfffac5 	bl	1082a4 <sal_recvfrom>
  10978c:	e1a03000 	mov	r3, r0
}
  109790:	e1a00003 	mov	r0, r3
  109794:	e24bd004 	sub	sp, fp, #4
  109798:	e8bd8800 	pop	{fp, pc}

0010979c <recvfrom_internal>:

int recvfrom_internal(int s, void *mem, size_t len, int flags,
             struct sockaddr *from, socklen_t *fromlen)
{
  10979c:	e92d4800 	push	{fp, lr}
  1097a0:	e28db004 	add	fp, sp, #4
  1097a4:	e24dd020 	sub	sp, sp, #32
  1097a8:	e50b0010 	str	r0, [fp, #-16]
  1097ac:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1097b0:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  1097b4:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    int socket = dfs_net_getsocket(s);
  1097b8:	e51b0010 	ldr	r0, [fp, #-16]
  1097bc:	eb00028e 	bl	10a1fc <dfs_net_getsocket>
  1097c0:	e50b0008 	str	r0, [fp, #-8]

    return sal_recvfrom(socket, mem, len, flags, from, fromlen);
  1097c4:	e59b3008 	ldr	r3, [fp, #8]
  1097c8:	e58d3004 	str	r3, [sp, #4]
  1097cc:	e59b3004 	ldr	r3, [fp, #4]
  1097d0:	e58d3000 	str	r3, [sp]
  1097d4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1097d8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1097dc:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1097e0:	e51b0008 	ldr	r0, [fp, #-8]
  1097e4:	ebfffaae 	bl	1082a4 <sal_recvfrom>
  1097e8:	e1a03000 	mov	r3, r0
}
  1097ec:	e1a00003 	mov	r0, r3
  1097f0:	e24bd004 	sub	sp, fp, #4
  1097f4:	e8bd8800 	pop	{fp, pc}

001097f8 <send_internal>:

int send_internal(int s, const void *dataptr, size_t size, int flags)
{
  1097f8:	e92d4800 	push	{fp, lr}
  1097fc:	e28db004 	add	fp, sp, #4
  109800:	e24dd020 	sub	sp, sp, #32
  109804:	e50b0010 	str	r0, [fp, #-16]
  109808:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10980c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  109810:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    int socket = dfs_net_getsocket(s);
  109814:	e51b0010 	ldr	r0, [fp, #-16]
  109818:	eb000277 	bl	10a1fc <dfs_net_getsocket>
  10981c:	e50b0008 	str	r0, [fp, #-8]

    return sal_sendto(socket, dataptr, size, flags, NULL, 0);
  109820:	e3a03000 	mov	r3, #0
  109824:	e58d3004 	str	r3, [sp, #4]
  109828:	e3a03000 	mov	r3, #0
  10982c:	e58d3000 	str	r3, [sp]
  109830:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109834:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  109838:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10983c:	e51b0008 	ldr	r0, [fp, #-8]
  109840:	ebfffacb 	bl	108374 <sal_sendto>
  109844:	e1a03000 	mov	r3, r0
}
  109848:	e1a00003 	mov	r0, r3
  10984c:	e24bd004 	sub	sp, fp, #4
  109850:	e8bd8800 	pop	{fp, pc}

00109854 <sendto_internal>:

int sendto_internal(int s, const void *dataptr, size_t size, int flags,
           const struct sockaddr *to, socklen_t tolen)
{
  109854:	e92d4800 	push	{fp, lr}
  109858:	e28db004 	add	fp, sp, #4
  10985c:	e24dd020 	sub	sp, sp, #32
  109860:	e50b0010 	str	r0, [fp, #-16]
  109864:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  109868:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  10986c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    int socket = dfs_net_getsocket(s);
  109870:	e51b0010 	ldr	r0, [fp, #-16]
  109874:	eb000260 	bl	10a1fc <dfs_net_getsocket>
  109878:	e50b0008 	str	r0, [fp, #-8]

    return sal_sendto(socket, dataptr, size, flags, to, tolen);
  10987c:	e59b3008 	ldr	r3, [fp, #8]
  109880:	e58d3004 	str	r3, [sp, #4]
  109884:	e59b3004 	ldr	r3, [fp, #4]
  109888:	e58d3000 	str	r3, [sp]
  10988c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109890:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  109894:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  109898:	e51b0008 	ldr	r0, [fp, #-8]
  10989c:	ebfffab4 	bl	108374 <sal_sendto>
  1098a0:	e1a03000 	mov	r3, r0
}
  1098a4:	e1a00003 	mov	r0, r3
  1098a8:	e24bd004 	sub	sp, fp, #4
  1098ac:	e8bd8800 	pop	{fp, pc}

001098b0 <socket_internal>:

int socket_internal(int domain, int type, int protocol)
{
  1098b0:	e92d4810 	push	{r4, fp, lr}
  1098b4:	e28db008 	add	fp, sp, #8
  1098b8:	e24dd024 	sub	sp, sp, #36	; 0x24
  1098bc:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  1098c0:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  1098c4:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
    int fd;
    int socket;
    struct dfs_fd *d;

    /* allocate a fd */
    fd = fd_new();
  1098c8:	eb000175 	bl	109ea4 <fd_new>
  1098cc:	e50b0010 	str	r0, [fp, #-16]
    if (fd < 0)
  1098d0:	e51b3010 	ldr	r3, [fp, #-16]
  1098d4:	e3530000 	cmp	r3, #0
  1098d8:	aa000001 	bge	1098e4 <socket_internal+0x34>
    {
        return -ENOMEM;
  1098dc:	e3e0300b 	mvn	r3, #11
  1098e0:	ea00004f 	b	109a24 <socket_internal+0x174>
    }
    d = fd_get(fd);
  1098e4:	e51b0010 	ldr	r0, [fp, #-16]
  1098e8:	eb0001a2 	bl	109f78 <fd_get>
  1098ec:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
    d->fnode = (struct dfs_fnode *)rt_malloc(sizeof(struct dfs_fnode));
  1098f0:	e3a00028 	mov	r0, #40	; 0x28
  1098f4:	ebffe5a6 	bl	102f94 <rt_malloc>
  1098f8:	e1a02000 	mov	r2, r0
  1098fc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109900:	e5832018 	str	r2, [r3, #24]
    if (!d->fnode)
  109904:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109908:	e5933018 	ldr	r3, [r3, #24]
  10990c:	e3530000 	cmp	r3, #0
  109910:	1a000003 	bne	109924 <socket_internal+0x74>
    {
        /* release fd */
        fd_release(fd);
  109914:	e51b0010 	ldr	r0, [fp, #-16]
  109918:	eb0001f5 	bl	10a0f4 <fd_release>
        return -ENOMEM;
  10991c:	e3e0300b 	mvn	r3, #11
  109920:	ea00003f 	b	109a24 <socket_internal+0x174>
    {
        domain = AF_INET;
    }
#endif /* SAL_USING_AF_UNIX */
    /* create socket  and then put it to the dfs_fd */
    socket = sal_socket(domain, type, protocol);
  109924:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  109928:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  10992c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  109930:	ebfffac3 	bl	108444 <sal_socket>
  109934:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    if (socket >= 0)
  109938:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10993c:	e3530000 	cmp	r3, #0
  109940:	ba000030 	blt	109a08 <socket_internal+0x158>
    {
        rt_memset(d->fnode, 0, sizeof(struct dfs_fnode));
  109944:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109948:	e5933018 	ldr	r3, [r3, #24]
  10994c:	e3a02028 	mov	r2, #40	; 0x28
  109950:	e3a01000 	mov	r1, #0
  109954:	e1a00003 	mov	r0, r3
  109958:	ebffe65a 	bl	1032c8 <rt_memset>
        rt_list_init(&d->fnode->list);
  10995c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109960:	e5933018 	ldr	r3, [r3, #24]
  109964:	e2833010 	add	r3, r3, #16
  109968:	e1a00003 	mov	r0, r3
  10996c:	ebfffeb6 	bl	10944c <rt_list_init>
        /* this is a socket fd */
        d->fnode->type = FT_SOCKET;
  109970:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109974:	e5933018 	ldr	r3, [r3, #24]
  109978:	e3a02001 	mov	r2, #1
  10997c:	e1c320b0 	strh	r2, [r3]
        d->fnode->path = NULL;
  109980:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109984:	e5933018 	ldr	r3, [r3, #24]
  109988:	e3a02000 	mov	r2, #0
  10998c:	e5832004 	str	r2, [r3, #4]
        d->fnode->fullpath = NULL;
  109990:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109994:	e5933018 	ldr	r3, [r3, #24]
  109998:	e3a02000 	mov	r2, #0
  10999c:	e5832008 	str	r2, [r3, #8]
        d->fnode->ref_count = 1;
  1099a0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1099a4:	e5933018 	ldr	r3, [r3, #24]
  1099a8:	e3a02001 	mov	r2, #1
  1099ac:	e583200c 	str	r2, [r3, #12]
        d->fnode->fops = dfs_net_get_fops();
  1099b0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1099b4:	e5934018 	ldr	r4, [r3, #24]
  1099b8:	eb0002ae 	bl	10a478 <dfs_net_get_fops>
  1099bc:	e1a03000 	mov	r3, r0
  1099c0:	e5843018 	str	r3, [r4, #24]

        d->flags = O_RDWR; /* set flags as read and write */
  1099c4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1099c8:	e3a02002 	mov	r2, #2
  1099cc:	e5832004 	str	r2, [r3, #4]
        d->fnode->size = 0;
  1099d0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1099d4:	e5933018 	ldr	r3, [r3, #24]
  1099d8:	e3a02000 	mov	r2, #0
  1099dc:	e5832020 	str	r2, [r3, #32]
        d->pos = 0;
  1099e0:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1099e4:	e3a02000 	mov	r2, #0
  1099e8:	e3a03000 	mov	r3, #0
  1099ec:	e1c121f0 	strd	r2, [r1, #16]

        /* set socket to the data of dfs_fd */
        d->fnode->data = (void *)(size_t)socket;
  1099f0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1099f4:	e5933018 	ldr	r3, [r3, #24]
  1099f8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1099fc:	e5832024 	str	r2, [r3, #36]	; 0x24
        /* release fd */
        fd_release(fd);
        return -ENOMEM;
    }

    return fd;
  109a00:	e51b3010 	ldr	r3, [fp, #-16]
  109a04:	ea000006 	b	109a24 <socket_internal+0x174>
        rt_free(d->fnode);
  109a08:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109a0c:	e5933018 	ldr	r3, [r3, #24]
  109a10:	e1a00003 	mov	r0, r3
  109a14:	ebffe568 	bl	102fbc <rt_free>
        fd_release(fd);
  109a18:	e51b0010 	ldr	r0, [fp, #-16]
  109a1c:	eb0001b4 	bl	10a0f4 <fd_release>
        return -ENOMEM;
  109a20:	e3e0300b 	mvn	r3, #11
  109a24:	e1a00003 	mov	r0, r3
  109a28:	e24bd008 	sub	sp, fp, #8
  109a2c:	e8bd8810 	pop	{r4, fp, pc}

00109a30 <dfs_init>:

/**
 * this function will initialize device file system.
 */
int dfs_init(void)
{
  109a30:	e92d4800 	push	{fp, lr}
  109a34:	e28db004 	add	fp, sp, #4
    static rt_bool_t init_ok = RT_FALSE;

    if (init_ok)
  109a38:	e30e3618 	movw	r3, #58904	; 0xe618
  109a3c:	e3403014 	movt	r3, #20
  109a40:	e5933000 	ldr	r3, [r3]
  109a44:	e3530000 	cmp	r3, #0
  109a48:	0a000004 	beq	109a60 <dfs_init+0x30>
    {
        rt_kprintf("dfs already init.\n");
  109a4c:	e3060374 	movw	r0, #25460	; 0x6374
  109a50:	e3400014 	movt	r0, #20
  109a54:	ebffe5ae 	bl	103114 <rt_kprintf>
        return 0;
  109a58:	e3a03000 	mov	r3, #0
  109a5c:	ea000016 	b	109abc <dfs_init+0x8c>
    }

    /* init fnode hash table */
    dfs_fnode_mgr_init();
  109a60:	eb0001c6 	bl	10a180 <dfs_fnode_mgr_init>

    /* clean fd table */
    memset(&_fdtab, 0, sizeof(_fdtab));
  109a64:	e3a02008 	mov	r2, #8
  109a68:	e3a01000 	mov	r1, #0
  109a6c:	e30e0610 	movw	r0, #58896	; 0xe610
  109a70:	e3400014 	movt	r0, #20
  109a74:	eb00de78 	bl	14145c <memset>

    /* create device filesystem lock */
    rt_mutex_init(&fslock, "fslock", RT_IPC_FLAG_FIFO);
  109a78:	e3a02000 	mov	r2, #0
  109a7c:	e3061388 	movw	r1, #25480	; 0x6388
  109a80:	e3401014 	movt	r1, #20
  109a84:	e30e05c0 	movw	r0, #58816	; 0xe5c0
  109a88:	e3400014 	movt	r0, #20
  109a8c:	ebffdcad 	bl	100d48 <rt_mutex_init>
    rt_mutex_init(&fdlock, "fdlock", RT_IPC_FLAG_FIFO);
  109a90:	e3a02000 	mov	r2, #0
  109a94:	e3061390 	movw	r1, #25488	; 0x6390
  109a98:	e3401014 	movt	r1, #20
  109a9c:	e30e05e8 	movw	r0, #58856	; 0xe5e8
  109aa0:	e3400014 	movt	r0, #20
  109aa4:	ebffdca7 	bl	100d48 <rt_mutex_init>

    init_ok = RT_TRUE;
  109aa8:	e30e3618 	movw	r3, #58904	; 0xe618
  109aac:	e3403014 	movt	r3, #20
  109ab0:	e3a02001 	mov	r2, #1
  109ab4:	e5832000 	str	r2, [r3]

    return 0;
  109ab8:	e3a03000 	mov	r3, #0
}
  109abc:	e1a00003 	mov	r0, r3
  109ac0:	e8bd8800 	pop	{fp, pc}

00109ac4 <dfs_lock>:
 * this function will lock device file system.
 *
 * @note please don't invoke it on ISR.
 */
void dfs_lock(void)
{
  109ac4:	e92d4800 	push	{fp, lr}
  109ac8:	e28db004 	add	fp, sp, #4
  109acc:	e24dd008 	sub	sp, sp, #8
    rt_err_t result = -RT_EBUSY;
  109ad0:	e3e03006 	mvn	r3, #6
  109ad4:	e50b3008 	str	r3, [fp, #-8]

    while (result == -RT_EBUSY)
  109ad8:	ea000004 	b	109af0 <dfs_lock+0x2c>
    {
        result = rt_mutex_take(&fslock, RT_WAITING_FOREVER);
  109adc:	e3e01000 	mvn	r1, #0
  109ae0:	e30e05c0 	movw	r0, #58816	; 0xe5c0
  109ae4:	e3400014 	movt	r0, #20
  109ae8:	ebffdd04 	bl	100f00 <rt_mutex_take>
  109aec:	e50b0008 	str	r0, [fp, #-8]
    while (result == -RT_EBUSY)
  109af0:	e51b3008 	ldr	r3, [fp, #-8]
  109af4:	e3730007 	cmn	r3, #7
  109af8:	0afffff7 	beq	109adc <dfs_lock+0x18>
    }

    if (result != RT_EOK)
  109afc:	e51b3008 	ldr	r3, [fp, #-8]
  109b00:	e3530000 	cmp	r3, #0
  109b04:	0a000005 	beq	109b20 <dfs_lock+0x5c>
    {
        RT_ASSERT(0);
  109b08:	e3a0203d 	mov	r2, #61	; 0x3d
  109b0c:	e3061404 	movw	r1, #25604	; 0x6404
  109b10:	e3401014 	movt	r1, #20
  109b14:	e3060398 	movw	r0, #25496	; 0x6398
  109b18:	e3400014 	movt	r0, #20
  109b1c:	ebffe69d 	bl	103598 <rt_assert_handler>
    }
}
  109b20:	e320f000 	nop	{0}
  109b24:	e24bd004 	sub	sp, fp, #4
  109b28:	e8bd8800 	pop	{fp, pc}

00109b2c <dfs_fd_lock>:

void dfs_fd_lock(void)
{
  109b2c:	e92d4800 	push	{fp, lr}
  109b30:	e28db004 	add	fp, sp, #4
  109b34:	e24dd008 	sub	sp, sp, #8
    rt_err_t result = -RT_EBUSY;
  109b38:	e3e03006 	mvn	r3, #6
  109b3c:	e50b3008 	str	r3, [fp, #-8]

    while (result == -RT_EBUSY)
  109b40:	ea000004 	b	109b58 <dfs_fd_lock+0x2c>
    {
        result = rt_mutex_take(&fdlock, RT_WAITING_FOREVER);
  109b44:	e3e01000 	mvn	r1, #0
  109b48:	e30e05e8 	movw	r0, #58856	; 0xe5e8
  109b4c:	e3400014 	movt	r0, #20
  109b50:	ebffdcea 	bl	100f00 <rt_mutex_take>
  109b54:	e50b0008 	str	r0, [fp, #-8]
    while (result == -RT_EBUSY)
  109b58:	e51b3008 	ldr	r3, [fp, #-8]
  109b5c:	e3730007 	cmn	r3, #7
  109b60:	0afffff7 	beq	109b44 <dfs_fd_lock+0x18>
    }

    if (result != RT_EOK)
  109b64:	e51b3008 	ldr	r3, [fp, #-8]
  109b68:	e3530000 	cmp	r3, #0
  109b6c:	0a000005 	beq	109b88 <dfs_fd_lock+0x5c>
    {
        RT_ASSERT(0);
  109b70:	e3a0204c 	mov	r2, #76	; 0x4c
  109b74:	e3061410 	movw	r1, #25616	; 0x6410
  109b78:	e3401014 	movt	r1, #20
  109b7c:	e3060398 	movw	r0, #25496	; 0x6398
  109b80:	e3400014 	movt	r0, #20
  109b84:	ebffe683 	bl	103598 <rt_assert_handler>
    }
}
  109b88:	e320f000 	nop	{0}
  109b8c:	e24bd004 	sub	sp, fp, #4
  109b90:	e8bd8800 	pop	{fp, pc}

00109b94 <dfs_unlock>:
 * this function will lock device file system.
 *
 * @note please don't invoke it on ISR.
 */
void dfs_unlock(void)
{
  109b94:	e92d4800 	push	{fp, lr}
  109b98:	e28db004 	add	fp, sp, #4
    rt_mutex_release(&fslock);
  109b9c:	e30e05c0 	movw	r0, #58816	; 0xe5c0
  109ba0:	e3400014 	movt	r0, #20
  109ba4:	ebffdcf3 	bl	100f78 <rt_mutex_release>
}
  109ba8:	e320f000 	nop	{0}
  109bac:	e8bd8800 	pop	{fp, pc}

00109bb0 <dfs_fd_unlock>:

void dfs_fd_unlock(void)
{
  109bb0:	e92d4800 	push	{fp, lr}
  109bb4:	e28db004 	add	fp, sp, #4
    rt_mutex_release(&fdlock);
  109bb8:	e30e05e8 	movw	r0, #58856	; 0xe5e8
  109bbc:	e3400014 	movt	r0, #20
  109bc0:	ebffdcec 	bl	100f78 <rt_mutex_release>
}
  109bc4:	e320f000 	nop	{0}
  109bc8:	e8bd8800 	pop	{fp, pc}

00109bcc <fd_slot_expand>:

static int fd_slot_expand(struct dfs_fdtable *fdt, int fd)
{
  109bcc:	e92d4800 	push	{fp, lr}
  109bd0:	e28db004 	add	fp, sp, #4
  109bd4:	e24dd018 	sub	sp, sp, #24
  109bd8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  109bdc:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    int nr;
    int index;
    struct dfs_fd **fds = NULL;
  109be0:	e3a03000 	mov	r3, #0
  109be4:	e50b3010 	str	r3, [fp, #-16]

    if (fd < fdt->maxfd)
  109be8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  109bec:	e5932000 	ldr	r2, [r3]
  109bf0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109bf4:	e1520003 	cmp	r2, r3
  109bf8:	9a000001 	bls	109c04 <fd_slot_expand+0x38>
    {
        return fd;
  109bfc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109c00:	ea000032 	b	109cd0 <fd_slot_expand+0x104>
    }
    if (fd >= DFS_FD_MAX)
  109c04:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109c08:	e353001f 	cmp	r3, #31
  109c0c:	da000001 	ble	109c18 <fd_slot_expand+0x4c>
    {
        return -1;
  109c10:	e3e03000 	mvn	r3, #0
  109c14:	ea00002d 	b	109cd0 <fd_slot_expand+0x104>
    }

    nr = ((fd + 4) & ~3);
  109c18:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  109c1c:	e2833004 	add	r3, r3, #4
  109c20:	e3c33003 	bic	r3, r3, #3
  109c24:	e50b3008 	str	r3, [fp, #-8]
    if (nr > DFS_FD_MAX)
  109c28:	e51b3008 	ldr	r3, [fp, #-8]
  109c2c:	e3530020 	cmp	r3, #32
  109c30:	da000001 	ble	109c3c <fd_slot_expand+0x70>
    {
        nr = DFS_FD_MAX;
  109c34:	e3a03020 	mov	r3, #32
  109c38:	e50b3008 	str	r3, [fp, #-8]
    }
    fds = (struct dfs_fd **)rt_realloc(fdt->fds, nr * sizeof(struct dfs_fd *));
  109c3c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  109c40:	e5932004 	ldr	r2, [r3, #4]
  109c44:	e51b3008 	ldr	r3, [fp, #-8]
  109c48:	e1a03103 	lsl	r3, r3, #2
  109c4c:	e1a01003 	mov	r1, r3
  109c50:	e1a00002 	mov	r0, r2
  109c54:	ebffe4e0 	bl	102fdc <rt_realloc>
  109c58:	e50b0010 	str	r0, [fp, #-16]
    if (!fds)
  109c5c:	e51b3010 	ldr	r3, [fp, #-16]
  109c60:	e3530000 	cmp	r3, #0
  109c64:	1a000001 	bne	109c70 <fd_slot_expand+0xa4>
    {
        return -1;
  109c68:	e3e03000 	mvn	r3, #0
  109c6c:	ea000017 	b	109cd0 <fd_slot_expand+0x104>
    }

    /* clean the new allocated fds */
    for (index = fdt->maxfd; index < nr; index++)
  109c70:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  109c74:	e5933000 	ldr	r3, [r3]
  109c78:	e50b300c 	str	r3, [fp, #-12]
  109c7c:	ea000008 	b	109ca4 <fd_slot_expand+0xd8>
    {
        fds[index] = NULL;
  109c80:	e51b300c 	ldr	r3, [fp, #-12]
  109c84:	e1a03103 	lsl	r3, r3, #2
  109c88:	e51b2010 	ldr	r2, [fp, #-16]
  109c8c:	e0823003 	add	r3, r2, r3
  109c90:	e3a02000 	mov	r2, #0
  109c94:	e5832000 	str	r2, [r3]
    for (index = fdt->maxfd; index < nr; index++)
  109c98:	e51b300c 	ldr	r3, [fp, #-12]
  109c9c:	e2833001 	add	r3, r3, #1
  109ca0:	e50b300c 	str	r3, [fp, #-12]
  109ca4:	e51b200c 	ldr	r2, [fp, #-12]
  109ca8:	e51b3008 	ldr	r3, [fp, #-8]
  109cac:	e1520003 	cmp	r2, r3
  109cb0:	bafffff2 	blt	109c80 <fd_slot_expand+0xb4>
    }
    fdt->fds   = fds;
  109cb4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  109cb8:	e51b2010 	ldr	r2, [fp, #-16]
  109cbc:	e5832004 	str	r2, [r3, #4]
    fdt->maxfd = nr;
  109cc0:	e51b2008 	ldr	r2, [fp, #-8]
  109cc4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  109cc8:	e5832000 	str	r2, [r3]

    return fd;
  109ccc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
}
  109cd0:	e1a00003 	mov	r0, r3
  109cd4:	e24bd004 	sub	sp, fp, #4
  109cd8:	e8bd8800 	pop	{fp, pc}

00109cdc <fd_slot_alloc>:

static int fd_slot_alloc(struct dfs_fdtable *fdt, int startfd)
{
  109cdc:	e92d4800 	push	{fp, lr}
  109ce0:	e28db004 	add	fp, sp, #4
  109ce4:	e24dd010 	sub	sp, sp, #16
  109ce8:	e50b0010 	str	r0, [fp, #-16]
  109cec:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    int idx;

    /* find an empty fd slot */
    for (idx = startfd; idx < (int)fdt->maxfd; idx++)
  109cf0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109cf4:	e50b3008 	str	r3, [fp, #-8]
  109cf8:	ea00000c 	b	109d30 <fd_slot_alloc+0x54>
    {
        if (fdt->fds[idx] == RT_NULL)
  109cfc:	e51b3010 	ldr	r3, [fp, #-16]
  109d00:	e5932004 	ldr	r2, [r3, #4]
  109d04:	e51b3008 	ldr	r3, [fp, #-8]
  109d08:	e1a03103 	lsl	r3, r3, #2
  109d0c:	e0823003 	add	r3, r2, r3
  109d10:	e5933000 	ldr	r3, [r3]
  109d14:	e3530000 	cmp	r3, #0
  109d18:	1a000001 	bne	109d24 <fd_slot_alloc+0x48>
        {
            return idx;
  109d1c:	e51b3008 	ldr	r3, [fp, #-8]
  109d20:	ea00001a 	b	109d90 <fd_slot_alloc+0xb4>
    for (idx = startfd; idx < (int)fdt->maxfd; idx++)
  109d24:	e51b3008 	ldr	r3, [fp, #-8]
  109d28:	e2833001 	add	r3, r3, #1
  109d2c:	e50b3008 	str	r3, [fp, #-8]
  109d30:	e51b3010 	ldr	r3, [fp, #-16]
  109d34:	e5933000 	ldr	r3, [r3]
  109d38:	e1a02003 	mov	r2, r3
  109d3c:	e51b3008 	ldr	r3, [fp, #-8]
  109d40:	e1530002 	cmp	r3, r2
  109d44:	baffffec 	blt	109cfc <fd_slot_alloc+0x20>
        }
    }

    idx = fdt->maxfd;
  109d48:	e51b3010 	ldr	r3, [fp, #-16]
  109d4c:	e5933000 	ldr	r3, [r3]
  109d50:	e50b3008 	str	r3, [fp, #-8]
    if (idx < startfd)
  109d54:	e51b2008 	ldr	r2, [fp, #-8]
  109d58:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109d5c:	e1520003 	cmp	r2, r3
  109d60:	aa000001 	bge	109d6c <fd_slot_alloc+0x90>
    {
        idx = startfd;
  109d64:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109d68:	e50b3008 	str	r3, [fp, #-8]
    }
    if (fd_slot_expand(fdt, idx) < 0)
  109d6c:	e51b1008 	ldr	r1, [fp, #-8]
  109d70:	e51b0010 	ldr	r0, [fp, #-16]
  109d74:	ebffff94 	bl	109bcc <fd_slot_expand>
  109d78:	e1a03000 	mov	r3, r0
  109d7c:	e3530000 	cmp	r3, #0
  109d80:	aa000001 	bge	109d8c <fd_slot_alloc+0xb0>
    {
        return -1;
  109d84:	e3e03000 	mvn	r3, #0
  109d88:	ea000000 	b	109d90 <fd_slot_alloc+0xb4>
    }
    return idx;
  109d8c:	e51b3008 	ldr	r3, [fp, #-8]
}
  109d90:	e1a00003 	mov	r0, r3
  109d94:	e24bd004 	sub	sp, fp, #4
  109d98:	e8bd8800 	pop	{fp, pc}

00109d9c <fd_alloc>:

static int fd_alloc(struct dfs_fdtable *fdt, int startfd)
{
  109d9c:	e92d4800 	push	{fp, lr}
  109da0:	e28db004 	add	fp, sp, #4
  109da4:	e24dd010 	sub	sp, sp, #16
  109da8:	e50b0010 	str	r0, [fp, #-16]
  109dac:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    int idx;
    struct dfs_fd *fd = NULL;
  109db0:	e3a03000 	mov	r3, #0
  109db4:	e50b3008 	str	r3, [fp, #-8]

    idx = fd_slot_alloc(fdt, startfd);
  109db8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  109dbc:	e51b0010 	ldr	r0, [fp, #-16]
  109dc0:	ebffffc5 	bl	109cdc <fd_slot_alloc>
  109dc4:	e50b000c 	str	r0, [fp, #-12]

    /* allocate  'struct dfs_fd' */
    if (idx < 0)
  109dc8:	e51b300c 	ldr	r3, [fp, #-12]
  109dcc:	e3530000 	cmp	r3, #0
  109dd0:	aa000001 	bge	109ddc <fd_alloc+0x40>
    {
        return -1;
  109dd4:	e3e03000 	mvn	r3, #0
  109dd8:	ea00001a 	b	109e48 <fd_alloc+0xac>
    }
    fd = (struct dfs_fd *)rt_calloc(1, sizeof(struct dfs_fd));
  109ddc:	e3a01020 	mov	r1, #32
  109de0:	e3a00001 	mov	r0, #1
  109de4:	ebffe488 	bl	10300c <rt_calloc>
  109de8:	e50b0008 	str	r0, [fp, #-8]
    if (!fd)
  109dec:	e51b3008 	ldr	r3, [fp, #-8]
  109df0:	e3530000 	cmp	r3, #0
  109df4:	1a000001 	bne	109e00 <fd_alloc+0x64>
    {
        return -1;
  109df8:	e3e03000 	mvn	r3, #0
  109dfc:	ea000011 	b	109e48 <fd_alloc+0xac>
    }
    fd->ref_count = 1;
  109e00:	e51b3008 	ldr	r3, [fp, #-8]
  109e04:	e3a02001 	mov	r2, #1
  109e08:	e5832008 	str	r2, [r3, #8]
    fd->magic = DFS_FD_MAGIC;
  109e0c:	e51b2008 	ldr	r2, [fp, #-8]
  109e10:	e30f3dfd 	movw	r3, #65021	; 0xfdfd
  109e14:	e34f3fff 	movt	r3, #65535	; 0xffff
  109e18:	e1c230b0 	strh	r3, [r2]
    fd->fnode = NULL;
  109e1c:	e51b3008 	ldr	r3, [fp, #-8]
  109e20:	e3a02000 	mov	r2, #0
  109e24:	e5832018 	str	r2, [r3, #24]
    fdt->fds[idx] = fd;
  109e28:	e51b3010 	ldr	r3, [fp, #-16]
  109e2c:	e5932004 	ldr	r2, [r3, #4]
  109e30:	e51b300c 	ldr	r3, [fp, #-12]
  109e34:	e1a03103 	lsl	r3, r3, #2
  109e38:	e0823003 	add	r3, r2, r3
  109e3c:	e51b2008 	ldr	r2, [fp, #-8]
  109e40:	e5832000 	str	r2, [r3]

    return idx;
  109e44:	e51b300c 	ldr	r3, [fp, #-12]
}
  109e48:	e1a00003 	mov	r0, r3
  109e4c:	e24bd004 	sub	sp, fp, #4
  109e50:	e8bd8800 	pop	{fp, pc}

00109e54 <fdt_fd_new>:
 * This function will allocate a file descriptor.
 *
 * @return -1 on failed or the allocated file descriptor.
 */
int fdt_fd_new(struct dfs_fdtable *fdt)
{
  109e54:	e92d4800 	push	{fp, lr}
  109e58:	e28db004 	add	fp, sp, #4
  109e5c:	e24dd010 	sub	sp, sp, #16
  109e60:	e50b0010 	str	r0, [fp, #-16]
    int idx;

    /* lock filesystem */
    dfs_fd_lock();
  109e64:	ebffff30 	bl	109b2c <dfs_fd_lock>

    /* find an empty fd entry */
    idx = fd_alloc(fdt, DFS_STDIO_OFFSET);
  109e68:	e3a01003 	mov	r1, #3
  109e6c:	e51b0010 	ldr	r0, [fp, #-16]
  109e70:	ebffffc9 	bl	109d9c <fd_alloc>
  109e74:	e50b0008 	str	r0, [fp, #-8]

    /* can't find an empty fd entry */
    if (idx < 0)
  109e78:	e51b3008 	ldr	r3, [fp, #-8]
  109e7c:	e3530000 	cmp	r3, #0
  109e80:	aa000002 	bge	109e90 <fdt_fd_new+0x3c>
    {
        rt_kprintf("DFS fd new is failed! Could not found an empty fd entry.");
  109e84:	e306039c 	movw	r0, #25500	; 0x639c
  109e88:	e3400014 	movt	r0, #20
  109e8c:	ebffe4a0 	bl	103114 <rt_kprintf>
    }

    dfs_fd_unlock();
  109e90:	ebffff46 	bl	109bb0 <dfs_fd_unlock>
    return idx;
  109e94:	e51b3008 	ldr	r3, [fp, #-8]
}
  109e98:	e1a00003 	mov	r0, r3
  109e9c:	e24bd004 	sub	sp, fp, #4
  109ea0:	e8bd8800 	pop	{fp, pc}

00109ea4 <fd_new>:

int fd_new(void)
{
  109ea4:	e92d4800 	push	{fp, lr}
  109ea8:	e28db004 	add	fp, sp, #4
  109eac:	e24dd008 	sub	sp, sp, #8
    struct dfs_fdtable *fdt = NULL;
  109eb0:	e3a03000 	mov	r3, #0
  109eb4:	e50b3008 	str	r3, [fp, #-8]

    fdt = dfs_fdtable_get();
  109eb8:	eb000099 	bl	10a124 <dfs_fdtable_get>
  109ebc:	e50b0008 	str	r0, [fp, #-8]
    return fdt_fd_new(fdt);
  109ec0:	e51b0008 	ldr	r0, [fp, #-8]
  109ec4:	ebffffe2 	bl	109e54 <fdt_fd_new>
  109ec8:	e1a03000 	mov	r3, r0
}
  109ecc:	e1a00003 	mov	r0, r3
  109ed0:	e24bd004 	sub	sp, fp, #4
  109ed4:	e8bd8800 	pop	{fp, pc}

00109ed8 <fdt_fd_get>:
 * @return NULL on on this file descriptor or the file descriptor structure
 * pointer.
 */

struct dfs_fd *fdt_fd_get(struct dfs_fdtable* fdt, int fd)
{
  109ed8:	e92d4800 	push	{fp, lr}
  109edc:	e28db004 	add	fp, sp, #4
  109ee0:	e24dd010 	sub	sp, sp, #16
  109ee4:	e50b0010 	str	r0, [fp, #-16]
  109ee8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    struct dfs_fd *d;

    if (fd < 0 || fd >= (int)fdt->maxfd)
  109eec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109ef0:	e3530000 	cmp	r3, #0
  109ef4:	ba000005 	blt	109f10 <fdt_fd_get+0x38>
  109ef8:	e51b3010 	ldr	r3, [fp, #-16]
  109efc:	e5933000 	ldr	r3, [r3]
  109f00:	e1a02003 	mov	r2, r3
  109f04:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109f08:	e1530002 	cmp	r3, r2
  109f0c:	ba000001 	blt	109f18 <fdt_fd_get+0x40>
    {
        return NULL;
  109f10:	e3a03000 	mov	r3, #0
  109f14:	ea000014 	b	109f6c <fdt_fd_get+0x94>
    }

    dfs_fd_lock();
  109f18:	ebffff03 	bl	109b2c <dfs_fd_lock>
    d = fdt->fds[fd];
  109f1c:	e51b3010 	ldr	r3, [fp, #-16]
  109f20:	e5932004 	ldr	r2, [r3, #4]
  109f24:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109f28:	e1a03103 	lsl	r3, r3, #2
  109f2c:	e0823003 	add	r3, r2, r3
  109f30:	e5933000 	ldr	r3, [r3]
  109f34:	e50b3008 	str	r3, [fp, #-8]

    /* check dfs_fd valid or not */
    if ((d == NULL) || (d->magic != DFS_FD_MAGIC))
  109f38:	e51b3008 	ldr	r3, [fp, #-8]
  109f3c:	e3530000 	cmp	r3, #0
  109f40:	0a000004 	beq	109f58 <fdt_fd_get+0x80>
  109f44:	e51b3008 	ldr	r3, [fp, #-8]
  109f48:	e1d330b0 	ldrh	r3, [r3]
  109f4c:	e30f2dfd 	movw	r2, #65021	; 0xfdfd
  109f50:	e1530002 	cmp	r3, r2
  109f54:	0a000002 	beq	109f64 <fdt_fd_get+0x8c>
    {
        dfs_fd_unlock();
  109f58:	ebffff14 	bl	109bb0 <dfs_fd_unlock>
        return NULL;
  109f5c:	e3a03000 	mov	r3, #0
  109f60:	ea000001 	b	109f6c <fdt_fd_get+0x94>
    }

    dfs_fd_unlock();
  109f64:	ebffff11 	bl	109bb0 <dfs_fd_unlock>

    return d;
  109f68:	e51b3008 	ldr	r3, [fp, #-8]
}
  109f6c:	e1a00003 	mov	r0, r3
  109f70:	e24bd004 	sub	sp, fp, #4
  109f74:	e8bd8800 	pop	{fp, pc}

00109f78 <fd_get>:

struct dfs_fd *fd_get(int fd)
{
  109f78:	e92d4800 	push	{fp, lr}
  109f7c:	e28db004 	add	fp, sp, #4
  109f80:	e24dd010 	sub	sp, sp, #16
  109f84:	e50b0010 	str	r0, [fp, #-16]
    struct dfs_fdtable *fdt;

    fdt = dfs_fdtable_get();
  109f88:	eb000065 	bl	10a124 <dfs_fdtable_get>
  109f8c:	e50b0008 	str	r0, [fp, #-8]
    return fdt_fd_get(fdt, fd);
  109f90:	e51b1010 	ldr	r1, [fp, #-16]
  109f94:	e51b0008 	ldr	r0, [fp, #-8]
  109f98:	ebffffce 	bl	109ed8 <fdt_fd_get>
  109f9c:	e1a03000 	mov	r3, r0
}
  109fa0:	e1a00003 	mov	r0, r3
  109fa4:	e24bd004 	sub	sp, fp, #4
  109fa8:	e8bd8800 	pop	{fp, pc}

00109fac <fdt_fd_release>:
 * @ingroup Fd
 *
 * This function will put the file descriptor.
 */
void fdt_fd_release(struct dfs_fdtable* fdt, int fd)
{
  109fac:	e92d4800 	push	{fp, lr}
  109fb0:	e28db004 	add	fp, sp, #4
  109fb4:	e24dd010 	sub	sp, sp, #16
  109fb8:	e50b0010 	str	r0, [fp, #-16]
  109fbc:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    struct dfs_fd *fd_slot = NULL;
  109fc0:	e3a03000 	mov	r3, #0
  109fc4:	e50b3008 	str	r3, [fp, #-8]

    RT_ASSERT(fdt != NULL);
  109fc8:	e51b3010 	ldr	r3, [fp, #-16]
  109fcc:	e3530000 	cmp	r3, #0
  109fd0:	1a000005 	bne	109fec <fdt_fd_release+0x40>
  109fd4:	e300210b 	movw	r2, #267	; 0x10b
  109fd8:	e306141c 	movw	r1, #25628	; 0x641c
  109fdc:	e3401014 	movt	r1, #20
  109fe0:	e30603d8 	movw	r0, #25560	; 0x63d8
  109fe4:	e3400014 	movt	r0, #20
  109fe8:	ebffe56a 	bl	103598 <rt_assert_handler>

    dfs_fd_lock();
  109fec:	ebfffece 	bl	109b2c <dfs_fd_lock>

    if ((fd < 0) || (fd >= fdt->maxfd))
  109ff0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  109ff4:	e3530000 	cmp	r3, #0
  109ff8:	ba000004 	blt	10a010 <fdt_fd_release+0x64>
  109ffc:	e51b3010 	ldr	r3, [fp, #-16]
  10a000:	e5932000 	ldr	r2, [r3]
  10a004:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10a008:	e1520003 	cmp	r2, r3
  10a00c:	8a000001 	bhi	10a018 <fdt_fd_release+0x6c>
    {
        dfs_fd_unlock();
  10a010:	ebfffee6 	bl	109bb0 <dfs_fd_unlock>
        return;
  10a014:	ea000034 	b	10a0ec <fdt_fd_release+0x140>
    }

    fd_slot = fdt->fds[fd];
  10a018:	e51b3010 	ldr	r3, [fp, #-16]
  10a01c:	e5932004 	ldr	r2, [r3, #4]
  10a020:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10a024:	e1a03103 	lsl	r3, r3, #2
  10a028:	e0823003 	add	r3, r2, r3
  10a02c:	e5933000 	ldr	r3, [r3]
  10a030:	e50b3008 	str	r3, [fp, #-8]
    if (fd_slot == NULL)
  10a034:	e51b3008 	ldr	r3, [fp, #-8]
  10a038:	e3530000 	cmp	r3, #0
  10a03c:	1a000001 	bne	10a048 <fdt_fd_release+0x9c>
    {
        dfs_fd_unlock();
  10a040:	ebfffeda 	bl	109bb0 <dfs_fd_unlock>
        return;
  10a044:	ea000028 	b	10a0ec <fdt_fd_release+0x140>
    }
    fdt->fds[fd] = NULL;
  10a048:	e51b3010 	ldr	r3, [fp, #-16]
  10a04c:	e5932004 	ldr	r2, [r3, #4]
  10a050:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10a054:	e1a03103 	lsl	r3, r3, #2
  10a058:	e0823003 	add	r3, r2, r3
  10a05c:	e3a02000 	mov	r2, #0
  10a060:	e5832000 	str	r2, [r3]

    /* check fd */
    RT_ASSERT(fd_slot->magic == DFS_FD_MAGIC);
  10a064:	e51b3008 	ldr	r3, [fp, #-8]
  10a068:	e1d330b0 	ldrh	r3, [r3]
  10a06c:	e30f2dfd 	movw	r2, #65021	; 0xfdfd
  10a070:	e1530002 	cmp	r3, r2
  10a074:	0a000005 	beq	10a090 <fdt_fd_release+0xe4>
  10a078:	e300211e 	movw	r2, #286	; 0x11e
  10a07c:	e306141c 	movw	r1, #25628	; 0x641c
  10a080:	e3401014 	movt	r1, #20
  10a084:	e30603e4 	movw	r0, #25572	; 0x63e4
  10a088:	e3400014 	movt	r0, #20
  10a08c:	ebffe541 	bl	103598 <rt_assert_handler>

    fd_slot->ref_count--;
  10a090:	e51b3008 	ldr	r3, [fp, #-8]
  10a094:	e5933008 	ldr	r3, [r3, #8]
  10a098:	e2432001 	sub	r2, r3, #1
  10a09c:	e51b3008 	ldr	r3, [fp, #-8]
  10a0a0:	e5832008 	str	r2, [r3, #8]

    /* clear this fd entry */
    if (fd_slot->ref_count == 0)
  10a0a4:	e51b3008 	ldr	r3, [fp, #-8]
  10a0a8:	e5933008 	ldr	r3, [r3, #8]
  10a0ac:	e3530000 	cmp	r3, #0
  10a0b0:	1a00000c 	bne	10a0e8 <fdt_fd_release+0x13c>
    {
        struct dfs_fnode *fnode = fd_slot->fnode;
  10a0b4:	e51b3008 	ldr	r3, [fp, #-8]
  10a0b8:	e5933018 	ldr	r3, [r3, #24]
  10a0bc:	e50b300c 	str	r3, [fp, #-12]
        if (fnode)
  10a0c0:	e51b300c 	ldr	r3, [fp, #-12]
  10a0c4:	e3530000 	cmp	r3, #0
  10a0c8:	0a000004 	beq	10a0e0 <fdt_fd_release+0x134>
        {
            fnode->ref_count--;
  10a0cc:	e51b300c 	ldr	r3, [fp, #-12]
  10a0d0:	e593300c 	ldr	r3, [r3, #12]
  10a0d4:	e2432001 	sub	r2, r3, #1
  10a0d8:	e51b300c 	ldr	r3, [fp, #-12]
  10a0dc:	e583200c 	str	r2, [r3, #12]
        }
        rt_free(fd_slot);
  10a0e0:	e51b0008 	ldr	r0, [fp, #-8]
  10a0e4:	ebffe3b4 	bl	102fbc <rt_free>
    }
    dfs_fd_unlock();
  10a0e8:	ebfffeb0 	bl	109bb0 <dfs_fd_unlock>
}
  10a0ec:	e24bd004 	sub	sp, fp, #4
  10a0f0:	e8bd8800 	pop	{fp, pc}

0010a0f4 <fd_release>:

void fd_release(int fd)
{
  10a0f4:	e92d4800 	push	{fp, lr}
  10a0f8:	e28db004 	add	fp, sp, #4
  10a0fc:	e24dd010 	sub	sp, sp, #16
  10a100:	e50b0010 	str	r0, [fp, #-16]
    struct dfs_fdtable *fdt;

    fdt = dfs_fdtable_get();
  10a104:	eb000006 	bl	10a124 <dfs_fdtable_get>
  10a108:	e50b0008 	str	r0, [fp, #-8]
    fdt_fd_release(fdt, fd);
  10a10c:	e51b1010 	ldr	r1, [fp, #-16]
  10a110:	e51b0008 	ldr	r0, [fp, #-8]
  10a114:	ebffffa4 	bl	109fac <fdt_fd_release>
}
  10a118:	e320f000 	nop	{0}
  10a11c:	e24bd004 	sub	sp, fp, #4
  10a120:	e8bd8800 	pop	{fp, pc}

0010a124 <dfs_fdtable_get>:

/**
 * This function will get the file descriptor table of current process.
 */
struct dfs_fdtable *dfs_fdtable_get(void)
{
  10a124:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10a128:	e28db000 	add	fp, sp, #0
    return &_fdtab;
  10a12c:	e30e3610 	movw	r3, #58896	; 0xe610
  10a130:	e3403014 	movt	r3, #20
}
  10a134:	e1a00003 	mov	r0, r3
  10a138:	e28bd000 	add	sp, fp, #0
  10a13c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10a140:	e12fff1e 	bx	lr

0010a144 <rt_list_init>:
{
  10a144:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10a148:	e28db000 	add	fp, sp, #0
  10a14c:	e24dd00c 	sub	sp, sp, #12
  10a150:	e50b0008 	str	r0, [fp, #-8]
    l->next = l->prev = l;
  10a154:	e51b3008 	ldr	r3, [fp, #-8]
  10a158:	e51b2008 	ldr	r2, [fp, #-8]
  10a15c:	e5832004 	str	r2, [r3, #4]
  10a160:	e51b3008 	ldr	r3, [fp, #-8]
  10a164:	e5932004 	ldr	r2, [r3, #4]
  10a168:	e51b3008 	ldr	r3, [fp, #-8]
  10a16c:	e5832000 	str	r2, [r3]
}
  10a170:	e320f000 	nop	{0}
  10a174:	e28bd000 	add	sp, fp, #0
  10a178:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10a17c:	e12fff1e 	bx	lr

0010a180 <dfs_fnode_mgr_init>:
};

static struct dfs_fnode_mgr dfs_fm;

void dfs_fnode_mgr_init(void)
{
  10a180:	e92d4800 	push	{fp, lr}
  10a184:	e28db004 	add	fp, sp, #4
  10a188:	e24dd008 	sub	sp, sp, #8
    int i = 0;
  10a18c:	e3a03000 	mov	r3, #0
  10a190:	e50b3008 	str	r3, [fp, #-8]

    rt_mutex_init(&dfs_fm.lock, "dfs_mgr", RT_IPC_FLAG_PRIO);
  10a194:	e3a02001 	mov	r2, #1
  10a198:	e306142c 	movw	r1, #25644	; 0x642c
  10a19c:	e3401014 	movt	r1, #20
  10a1a0:	e30e061c 	movw	r0, #58908	; 0xe61c
  10a1a4:	e3400014 	movt	r0, #20
  10a1a8:	ebffdae6 	bl	100d48 <rt_mutex_init>
    for (i = 0; i < DFS_FNODE_HASH_NR; i++)
  10a1ac:	e3a03000 	mov	r3, #0
  10a1b0:	e50b3008 	str	r3, [fp, #-8]
  10a1b4:	ea00000a 	b	10a1e4 <dfs_fnode_mgr_init+0x64>
    {
        rt_list_init(&dfs_fm.head[i]);
  10a1b8:	e51b3008 	ldr	r3, [fp, #-8]
  10a1bc:	e2833005 	add	r3, r3, #5
  10a1c0:	e1a02183 	lsl	r2, r3, #3
  10a1c4:	e30e361c 	movw	r3, #58908	; 0xe61c
  10a1c8:	e3403014 	movt	r3, #20
  10a1cc:	e0823003 	add	r3, r2, r3
  10a1d0:	e1a00003 	mov	r0, r3
  10a1d4:	ebffffda 	bl	10a144 <rt_list_init>
    for (i = 0; i < DFS_FNODE_HASH_NR; i++)
  10a1d8:	e51b3008 	ldr	r3, [fp, #-8]
  10a1dc:	e2833001 	add	r3, r3, #1
  10a1e0:	e50b3008 	str	r3, [fp, #-8]
  10a1e4:	e51b3008 	ldr	r3, [fp, #-8]
  10a1e8:	e353007f 	cmp	r3, #127	; 0x7f
  10a1ec:	dafffff1 	ble	10a1b8 <dfs_fnode_mgr_init+0x38>
    }
  10a1f0:	e320f000 	nop	{0}
  10a1f4:	e24bd004 	sub	sp, fp, #4
  10a1f8:	e8bd8800 	pop	{fp, pc}

0010a1fc <dfs_net_getsocket>:
#include "dfs.h"
#include "dfs_net.h"
#include "../netdev/sal_socket.h"

int dfs_net_getsocket(int fd)
{
  10a1fc:	e92d4800 	push	{fp, lr}
  10a200:	e28db004 	add	fp, sp, #4
  10a204:	e24dd010 	sub	sp, sp, #16
  10a208:	e50b0010 	str	r0, [fp, #-16]
    int socket;
    struct dfs_fd *_dfs_fd;

    _dfs_fd = fd_get(fd);
  10a20c:	e51b0010 	ldr	r0, [fp, #-16]
  10a210:	ebffff58 	bl	109f78 <fd_get>
  10a214:	e50b000c 	str	r0, [fp, #-12]
    if (_dfs_fd == NULL) return -1;
  10a218:	e51b300c 	ldr	r3, [fp, #-12]
  10a21c:	e3530000 	cmp	r3, #0
  10a220:	1a000001 	bne	10a22c <dfs_net_getsocket+0x30>
  10a224:	e3e03000 	mvn	r3, #0
  10a228:	ea00000c 	b	10a260 <dfs_net_getsocket+0x64>

    if (_dfs_fd->fnode->type != FT_SOCKET) socket = -1;
  10a22c:	e51b300c 	ldr	r3, [fp, #-12]
  10a230:	e5933018 	ldr	r3, [r3, #24]
  10a234:	e1d330b0 	ldrh	r3, [r3]
  10a238:	e3530001 	cmp	r3, #1
  10a23c:	0a000002 	beq	10a24c <dfs_net_getsocket+0x50>
  10a240:	e3e03000 	mvn	r3, #0
  10a244:	e50b3008 	str	r3, [fp, #-8]
  10a248:	ea000003 	b	10a25c <dfs_net_getsocket+0x60>
    else socket = (int)(size_t)_dfs_fd->fnode->data;
  10a24c:	e51b300c 	ldr	r3, [fp, #-12]
  10a250:	e5933018 	ldr	r3, [r3, #24]
  10a254:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  10a258:	e50b3008 	str	r3, [fp, #-8]

    return socket;
  10a25c:	e51b3008 	ldr	r3, [fp, #-8]
}
  10a260:	e1a00003 	mov	r0, r3
  10a264:	e24bd004 	sub	sp, fp, #4
  10a268:	e8bd8800 	pop	{fp, pc}

0010a26c <dfs_net_ioctl>:

static int dfs_net_ioctl(struct dfs_fd* file, int cmd, void* args)
{
  10a26c:	e92d4800 	push	{fp, lr}
  10a270:	e28db004 	add	fp, sp, #4
  10a274:	e24dd018 	sub	sp, sp, #24
  10a278:	e50b0010 	str	r0, [fp, #-16]
  10a27c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10a280:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    int ret;
    int socket = (int)(size_t)file->fnode->data;
  10a284:	e51b3010 	ldr	r3, [fp, #-16]
  10a288:	e5933018 	ldr	r3, [r3, #24]
  10a28c:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  10a290:	e50b3008 	str	r3, [fp, #-8]

    ret = sal_ioctlsocket(socket, cmd, args);
  10a294:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  10a298:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10a29c:	e51b0008 	ldr	r0, [fp, #-8]
  10a2a0:	ebfff8e6 	bl	108640 <sal_ioctlsocket>
  10a2a4:	e50b000c 	str	r0, [fp, #-12]
    if (ret < 0)
  10a2a8:	e51b300c 	ldr	r3, [fp, #-12]
  10a2ac:	e3530000 	cmp	r3, #0
  10a2b0:	aa000006 	bge	10a2d0 <dfs_net_ioctl+0x64>
    {
        ret = rt_get_errno();
  10a2b4:	ebffdf68 	bl	10205c <rt_get_errno>
  10a2b8:	e50b000c 	str	r0, [fp, #-12]
        return (ret > 0) ? (-ret) : ret;
  10a2bc:	e51b300c 	ldr	r3, [fp, #-12]
  10a2c0:	e3530000 	cmp	r3, #0
  10a2c4:	b2633000 	rsblt	r3, r3, #0
  10a2c8:	e2633000 	rsb	r3, r3, #0
  10a2cc:	ea000000 	b	10a2d4 <dfs_net_ioctl+0x68>
    }
    return ret;
  10a2d0:	e51b300c 	ldr	r3, [fp, #-12]
}
  10a2d4:	e1a00003 	mov	r0, r3
  10a2d8:	e24bd004 	sub	sp, fp, #4
  10a2dc:	e8bd8800 	pop	{fp, pc}

0010a2e0 <dfs_net_read>:

static int dfs_net_read(struct dfs_fd* file, void *buf, size_t count)
{
  10a2e0:	e92d4800 	push	{fp, lr}
  10a2e4:	e28db004 	add	fp, sp, #4
  10a2e8:	e24dd020 	sub	sp, sp, #32
  10a2ec:	e50b0010 	str	r0, [fp, #-16]
  10a2f0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10a2f4:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    int ret;
    int socket = (int)(size_t)file->fnode->data;
  10a2f8:	e51b3010 	ldr	r3, [fp, #-16]
  10a2fc:	e5933018 	ldr	r3, [r3, #24]
  10a300:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  10a304:	e50b3008 	str	r3, [fp, #-8]

    ret = sal_recvfrom(socket, buf, count, 0, NULL, NULL);
  10a308:	e3a03000 	mov	r3, #0
  10a30c:	e58d3004 	str	r3, [sp, #4]
  10a310:	e3a03000 	mov	r3, #0
  10a314:	e58d3000 	str	r3, [sp]
  10a318:	e3a03000 	mov	r3, #0
  10a31c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  10a320:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10a324:	e51b0008 	ldr	r0, [fp, #-8]
  10a328:	ebfff7dd 	bl	1082a4 <sal_recvfrom>
  10a32c:	e50b000c 	str	r0, [fp, #-12]
    if (ret < 0)
  10a330:	e51b300c 	ldr	r3, [fp, #-12]
  10a334:	e3530000 	cmp	r3, #0
  10a338:	aa000006 	bge	10a358 <dfs_net_read+0x78>
    {
        ret = rt_get_errno();
  10a33c:	ebffdf46 	bl	10205c <rt_get_errno>
  10a340:	e50b000c 	str	r0, [fp, #-12]
        return (ret > 0) ? (-ret) : ret;
  10a344:	e51b300c 	ldr	r3, [fp, #-12]
  10a348:	e3530000 	cmp	r3, #0
  10a34c:	b2633000 	rsblt	r3, r3, #0
  10a350:	e2633000 	rsb	r3, r3, #0
  10a354:	ea000000 	b	10a35c <dfs_net_read+0x7c>
    }
    return ret;
  10a358:	e51b300c 	ldr	r3, [fp, #-12]
}
  10a35c:	e1a00003 	mov	r0, r3
  10a360:	e24bd004 	sub	sp, fp, #4
  10a364:	e8bd8800 	pop	{fp, pc}

0010a368 <dfs_net_write>:

static int dfs_net_write(struct dfs_fd *file, const void *buf, size_t count)
{
  10a368:	e92d4800 	push	{fp, lr}
  10a36c:	e28db004 	add	fp, sp, #4
  10a370:	e24dd020 	sub	sp, sp, #32
  10a374:	e50b0010 	str	r0, [fp, #-16]
  10a378:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10a37c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    int ret;
    int socket = (int)(size_t)file->fnode->data;
  10a380:	e51b3010 	ldr	r3, [fp, #-16]
  10a384:	e5933018 	ldr	r3, [r3, #24]
  10a388:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  10a38c:	e50b3008 	str	r3, [fp, #-8]
    
    ret = sal_sendto(socket, buf, count, 0, NULL, 0);
  10a390:	e3a03000 	mov	r3, #0
  10a394:	e58d3004 	str	r3, [sp, #4]
  10a398:	e3a03000 	mov	r3, #0
  10a39c:	e58d3000 	str	r3, [sp]
  10a3a0:	e3a03000 	mov	r3, #0
  10a3a4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  10a3a8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10a3ac:	e51b0008 	ldr	r0, [fp, #-8]
  10a3b0:	ebfff7ef 	bl	108374 <sal_sendto>
  10a3b4:	e50b000c 	str	r0, [fp, #-12]
    if (ret < 0)
  10a3b8:	e51b300c 	ldr	r3, [fp, #-12]
  10a3bc:	e3530000 	cmp	r3, #0
  10a3c0:	aa000006 	bge	10a3e0 <dfs_net_write+0x78>
    {
        ret = rt_get_errno();
  10a3c4:	ebffdf24 	bl	10205c <rt_get_errno>
  10a3c8:	e50b000c 	str	r0, [fp, #-12]
        return (ret > 0) ? (-ret) : ret;
  10a3cc:	e51b300c 	ldr	r3, [fp, #-12]
  10a3d0:	e3530000 	cmp	r3, #0
  10a3d4:	b2633000 	rsblt	r3, r3, #0
  10a3d8:	e2633000 	rsb	r3, r3, #0
  10a3dc:	ea000000 	b	10a3e4 <dfs_net_write+0x7c>
    }
    return ret;
  10a3e0:	e51b300c 	ldr	r3, [fp, #-12]
}
  10a3e4:	e1a00003 	mov	r0, r3
  10a3e8:	e24bd004 	sub	sp, fp, #4
  10a3ec:	e8bd8800 	pop	{fp, pc}

0010a3f0 <dfs_net_close>:
static int dfs_net_close(struct dfs_fd* file)
{
  10a3f0:	e92d4800 	push	{fp, lr}
  10a3f4:	e28db004 	add	fp, sp, #4
  10a3f8:	e24dd010 	sub	sp, sp, #16
  10a3fc:	e50b0010 	str	r0, [fp, #-16]
    int socket;
    int ret = 0;
  10a400:	e3a03000 	mov	r3, #0
  10a404:	e50b3008 	str	r3, [fp, #-8]

    if (file->fnode->ref_count == 1)
  10a408:	e51b3010 	ldr	r3, [fp, #-16]
  10a40c:	e5933018 	ldr	r3, [r3, #24]
  10a410:	e593300c 	ldr	r3, [r3, #12]
  10a414:	e3530001 	cmp	r3, #1
  10a418:	1a000006 	bne	10a438 <dfs_net_close+0x48>
    {
        socket = (int)(size_t)file->fnode->data;
  10a41c:	e51b3010 	ldr	r3, [fp, #-16]
  10a420:	e5933018 	ldr	r3, [r3, #24]
  10a424:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  10a428:	e50b300c 	str	r3, [fp, #-12]
        ret = sal_closesocket(socket);
  10a42c:	e51b000c 	ldr	r0, [fp, #-12]
  10a430:	ebfff854 	bl	108588 <sal_closesocket>
  10a434:	e50b0008 	str	r0, [fp, #-8]
    }
    return ret;
  10a438:	e51b3008 	ldr	r3, [fp, #-8]
}
  10a43c:	e1a00003 	mov	r0, r3
  10a440:	e24bd004 	sub	sp, fp, #4
  10a444:	e8bd8800 	pop	{fp, pc}

0010a448 <dfs_net_poll>:

static int dfs_net_poll(struct dfs_fd *file, struct rt_pollreq *req)
{
  10a448:	e92d4800 	push	{fp, lr}
  10a44c:	e28db004 	add	fp, sp, #4
  10a450:	e24dd008 	sub	sp, sp, #8
  10a454:	e50b0008 	str	r0, [fp, #-8]
  10a458:	e50b100c 	str	r1, [fp, #-12]
    extern int sal_poll(struct dfs_fd *file, struct rt_pollreq *req);

    return sal_poll(file, req);
  10a45c:	e51b100c 	ldr	r1, [fp, #-12]
  10a460:	e51b0008 	ldr	r0, [fp, #-8]
  10a464:	ebfff911 	bl	1088b0 <sal_poll>
  10a468:	e1a03000 	mov	r3, r0
}
  10a46c:	e1a00003 	mov	r0, r3
  10a470:	e24bd004 	sub	sp, fp, #4
  10a474:	e8bd8800 	pop	{fp, pc}

0010a478 <dfs_net_get_fops>:
    dfs_net_write,
    dfs_net_poll,
};

const struct dfs_file_ops *dfs_net_get_fops(void)
{
  10a478:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10a47c:	e28db000 	add	fp, sp, #0
    return &_net_fops;
  10a480:	e3063434 	movw	r3, #25652	; 0x6434
  10a484:	e3403014 	movt	r3, #20
}
  10a488:	e1a00003 	mov	r0, r3
  10a48c:	e28bd000 	add	sp, fp, #0
  10a490:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10a494:	e12fff1e 	bx	lr

0010a498 <tcpip_init_done_callback>:

/*
 * Initialize the ethernetif layer and set network interface device up
 */
static void tcpip_init_done_callback(void *arg)
{
  10a498:	e92d4800 	push	{fp, lr}
  10a49c:	e28db004 	add	fp, sp, #4
  10a4a0:	e24dd008 	sub	sp, sp, #8
  10a4a4:	e50b0008 	str	r0, [fp, #-8]
    rt_sem_release((rt_sem_t)arg);
  10a4a8:	e51b0008 	ldr	r0, [fp, #-8]
  10a4ac:	ebffdb64 	bl	101244 <rt_sem_release>
}
  10a4b0:	e320f000 	nop	{0}
  10a4b4:	e24bd004 	sub	sp, fp, #4
  10a4b8:	e8bd8800 	pop	{fp, pc}

0010a4bc <lwip_system_init>:
/**
 * LwIP system initialization
 */
extern int eth_system_device_init_private(void);
int lwip_system_init(void)
{
  10a4bc:	e92d4800 	push	{fp, lr}
  10a4c0:	e28db004 	add	fp, sp, #4
  10a4c4:	e24dd010 	sub	sp, sp, #16
    struct rt_semaphore *done_sem;
    static rt_bool_t init_ok = RT_FALSE;

    if (init_ok)
  10a4c8:	e30e3a4c 	movw	r3, #59980	; 0xea4c
  10a4cc:	e3403014 	movt	r3, #20
  10a4d0:	e5933000 	ldr	r3, [r3]
  10a4d4:	e3530000 	cmp	r3, #0
  10a4d8:	0a000004 	beq	10a4f0 <lwip_system_init+0x34>
    {
        rt_kprintf("lwip system already init.\n");
  10a4dc:	e3060448 	movw	r0, #25672	; 0x6448
  10a4e0:	e3400014 	movt	r0, #20
  10a4e4:	ebffe30a 	bl	103114 <rt_kprintf>
        return 0;
  10a4e8:	e3a03000 	mov	r3, #0
  10a4ec:	ea00003c 	b	10a5e4 <lwip_system_init+0x128>
    }

    eth_system_device_init_private();
  10a4f0:	eb007e94 	bl	129f48 <eth_system_device_init_private>

    /* set default netif to NULL */
    netif_default = RT_NULL;
  10a4f4:	e3063838 	movw	r3, #26680	; 0x6838
  10a4f8:	e3403057 	movt	r3, #87	; 0x57
  10a4fc:	e3a02000 	mov	r2, #0
  10a500:	e5832000 	str	r2, [r3]
    done_sem = rt_sem_create("done", 0, RT_IPC_FLAG_FIFO);
  10a504:	e3a02000 	mov	r2, #0
  10a508:	e3a01000 	mov	r1, #0
  10a50c:	e3060464 	movw	r0, #25700	; 0x6464
  10a510:	e3400014 	movt	r0, #20
  10a514:	ebffdab3 	bl	100fe8 <rt_sem_create>
  10a518:	e50b0008 	str	r0, [fp, #-8]

    if (done_sem == RT_NULL)
  10a51c:	e51b3008 	ldr	r3, [fp, #-8]
  10a520:	e3530000 	cmp	r3, #0
  10a524:	1a000008 	bne	10a54c <lwip_system_init+0x90>
    {
        LWIP_ASSERT("Failed to create semaphore", 0);
  10a528:	e306046c 	movw	r0, #25708	; 0x646c
  10a52c:	e3400014 	movt	r0, #20
  10a530:	ebffe2f7 	bl	103114 <rt_kprintf>
  10a534:	e3a0105e 	mov	r1, #94	; 0x5e
  10a538:	e3060488 	movw	r0, #25736	; 0x6488
  10a53c:	e3400014 	movt	r0, #20
  10a540:	eb0002c7 	bl	10b064 <sys_arch_assert>

        return -1;
  10a544:	e3e03000 	mvn	r3, #0
  10a548:	ea000025 	b	10a5e4 <lwip_system_init+0x128>
    }

    tcpip_init(tcpip_init_done_callback, (void *)done_sem);
  10a54c:	e51b1008 	ldr	r1, [fp, #-8]
  10a550:	e30a0498 	movw	r0, #42136	; 0xa498
  10a554:	e3400010 	movt	r0, #16
  10a558:	eb00303e 	bl	116658 <tcpip_init>

    /* waiting for initialization done */
    if (rt_sem_take(done_sem, RT_WAITING_FOREVER) != RT_EOK)
  10a55c:	e3e01000 	mvn	r1, #0
  10a560:	e51b0008 	ldr	r0, [fp, #-8]
  10a564:	ebffdb52 	bl	1012b4 <rt_sem_take>
  10a568:	e1a03000 	mov	r3, r0
  10a56c:	e3530000 	cmp	r3, #0
  10a570:	0a000003 	beq	10a584 <lwip_system_init+0xc8>
    {
        rt_sem_delete(done_sem);
  10a574:	e51b0008 	ldr	r0, [fp, #-8]
  10a578:	ebffdae5 	bl	101114 <rt_sem_delete>

        return -1;
  10a57c:	e3e03000 	mvn	r3, #0
  10a580:	ea000017 	b	10a5e4 <lwip_system_init+0x128>
    }
    rt_sem_delete(done_sem);
  10a584:	e51b0008 	ldr	r0, [fp, #-8]
  10a588:	ebffdae1 	bl	101114 <rt_sem_delete>

        netifapi_netif_set_addr(netif_default, &ipaddr, &netmask, &gw);
    }
#endif

    rt_thread_t tid = rt_thread_create("tcpip_mb_timer", tcpip_mb_timer_entry, NULL, 1024, 25, 10); 
  10a58c:	e3a0300a 	mov	r3, #10
  10a590:	e58d3004 	str	r3, [sp, #4]
  10a594:	e3a03019 	mov	r3, #25
  10a598:	e58d3000 	str	r3, [sp]
  10a59c:	e3a03b01 	mov	r3, #1024	; 0x400
  10a5a0:	e3a02000 	mov	r2, #0
  10a5a4:	e30a1ab0 	movw	r1, #43696	; 0xaab0
  10a5a8:	e3401010 	movt	r1, #16
  10a5ac:	e30604b8 	movw	r0, #25784	; 0x64b8
  10a5b0:	e3400014 	movt	r0, #20
  10a5b4:	ebffdece 	bl	1020f4 <rt_thread_create>
  10a5b8:	e50b000c 	str	r0, [fp, #-12]
    if (tid) rt_thread_startup(tid);
  10a5bc:	e51b300c 	ldr	r3, [fp, #-12]
  10a5c0:	e3530000 	cmp	r3, #0
  10a5c4:	0a000001 	beq	10a5d0 <lwip_system_init+0x114>
  10a5c8:	e51b000c 	ldr	r0, [fp, #-12]
  10a5cc:	ebffdefd 	bl	1021c8 <rt_thread_startup>

    init_ok = RT_TRUE;
  10a5d0:	e30e3a4c 	movw	r3, #59980	; 0xea4c
  10a5d4:	e3403014 	movt	r3, #20
  10a5d8:	e3a02001 	mov	r2, #1
  10a5dc:	e5832000 	str	r2, [r3]

    return 0;
  10a5e0:	e3a03000 	mov	r3, #0
}
  10a5e4:	e1a00003 	mov	r0, r3
  10a5e8:	e24bd004 	sub	sp, fp, #4
  10a5ec:	e8bd8800 	pop	{fp, pc}

0010a5f0 <sys_init>:

void sys_init(void)
{
  10a5f0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10a5f4:	e28db000 	add	fp, sp, #0
    /* nothing on RT-Thread porting */
}
  10a5f8:	e320f000 	nop	{0}
  10a5fc:	e28bd000 	add	sp, fp, #0
  10a600:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10a604:	e12fff1e 	bx	lr

0010a608 <lwip_sys_init>:

void lwip_sys_init(void)
{
  10a608:	e92d4800 	push	{fp, lr}
  10a60c:	e28db004 	add	fp, sp, #4
    lwip_system_init();
  10a610:	ebffffa9 	bl	10a4bc <lwip_system_init>
}
  10a614:	e320f000 	nop	{0}
  10a618:	e8bd8800 	pop	{fp, pc}

0010a61c <sys_sem_new>:
 * Create a new semaphore
 *
 * @return the operation status, ERR_OK on OK; others on error
 */
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
  10a61c:	e92d4800 	push	{fp, lr}
  10a620:	e28db004 	add	fp, sp, #4
  10a624:	e24dd020 	sub	sp, sp, #32
  10a628:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10a62c:	e1a03001 	mov	r3, r1
  10a630:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
    char tname[RT_NAME_MAX];
    sys_sem_t tmpsem;

    RT_DEBUG_NOT_IN_INTERRUPT;

    rt_snprintf(tname, RT_NAME_MAX, "%s%d", SYS_LWIP_SEM_NAME, counter);
  10a634:	e30e3a50 	movw	r3, #59984	; 0xea50
  10a638:	e3403014 	movt	r3, #20
  10a63c:	e1d330b0 	ldrh	r3, [r3]
  10a640:	e24b0010 	sub	r0, fp, #16
  10a644:	e58d3000 	str	r3, [sp]
  10a648:	e30634c8 	movw	r3, #25800	; 0x64c8
  10a64c:	e3403014 	movt	r3, #20
  10a650:	e30624cc 	movw	r2, #25804	; 0x64cc
  10a654:	e3402014 	movt	r2, #20
  10a658:	e3a01008 	mov	r1, #8
  10a65c:	ebffe276 	bl	10303c <rt_snprintf>
    counter ++;
  10a660:	e30e3a50 	movw	r3, #59984	; 0xea50
  10a664:	e3403014 	movt	r3, #20
  10a668:	e1d330b0 	ldrh	r3, [r3]
  10a66c:	e2833001 	add	r3, r3, #1
  10a670:	e6ff2073 	uxth	r2, r3
  10a674:	e30e3a50 	movw	r3, #59984	; 0xea50
  10a678:	e3403014 	movt	r3, #20
  10a67c:	e1c320b0 	strh	r2, [r3]

    tmpsem = rt_sem_create(tname, count, RT_IPC_FLAG_FIFO);
  10a680:	e55b1019 	ldrb	r1, [fp, #-25]	; 0xffffffe7
  10a684:	e24b3010 	sub	r3, fp, #16
  10a688:	e3a02000 	mov	r2, #0
  10a68c:	e1a00003 	mov	r0, r3
  10a690:	ebffda54 	bl	100fe8 <rt_sem_create>
  10a694:	e50b0008 	str	r0, [fp, #-8]
    if (tmpsem == RT_NULL)
  10a698:	e51b3008 	ldr	r3, [fp, #-8]
  10a69c:	e3530000 	cmp	r3, #0
  10a6a0:	1a000001 	bne	10a6ac <sys_sem_new+0x90>
        return ERR_MEM;
  10a6a4:	e3e03000 	mvn	r3, #0
  10a6a8:	ea000003 	b	10a6bc <sys_sem_new+0xa0>
    else
    {
        *sem = tmpsem;
  10a6ac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10a6b0:	e51b2008 	ldr	r2, [fp, #-8]
  10a6b4:	e5832000 	str	r2, [r3]

        return ERR_OK;
  10a6b8:	e3a03000 	mov	r3, #0
    }
}
  10a6bc:	e1a00003 	mov	r0, r3
  10a6c0:	e24bd004 	sub	sp, fp, #4
  10a6c4:	e8bd8800 	pop	{fp, pc}

0010a6c8 <sys_sem_free>:

/*
 * Deallocate a semaphore
 */
void sys_sem_free(sys_sem_t *sem)
{
  10a6c8:	e92d4800 	push	{fp, lr}
  10a6cc:	e28db004 	add	fp, sp, #4
  10a6d0:	e24dd008 	sub	sp, sp, #8
  10a6d4:	e50b0008 	str	r0, [fp, #-8]
    RT_DEBUG_NOT_IN_INTERRUPT;
    rt_sem_delete(*sem);
  10a6d8:	e51b3008 	ldr	r3, [fp, #-8]
  10a6dc:	e5933000 	ldr	r3, [r3]
  10a6e0:	e1a00003 	mov	r0, r3
  10a6e4:	ebffda8a 	bl	101114 <rt_sem_delete>
}
  10a6e8:	e320f000 	nop	{0}
  10a6ec:	e24bd004 	sub	sp, fp, #4
  10a6f0:	e8bd8800 	pop	{fp, pc}

0010a6f4 <sys_sem_signal>:

/*
 * Signal a semaphore
 */
void sys_sem_signal(sys_sem_t *sem)
{
  10a6f4:	e92d4800 	push	{fp, lr}
  10a6f8:	e28db004 	add	fp, sp, #4
  10a6fc:	e24dd008 	sub	sp, sp, #8
  10a700:	e50b0008 	str	r0, [fp, #-8]
    rt_sem_release(*sem);
  10a704:	e51b3008 	ldr	r3, [fp, #-8]
  10a708:	e5933000 	ldr	r3, [r3]
  10a70c:	e1a00003 	mov	r0, r3
  10a710:	ebffdacb 	bl	101244 <rt_sem_release>
}
  10a714:	e320f000 	nop	{0}
  10a718:	e24bd004 	sub	sp, fp, #4
  10a71c:	e8bd8800 	pop	{fp, pc}

0010a720 <sys_arch_sem_wait>:
 *         spent waiting for the semaphore to be signaled; If the semaphore isn't signaled
 *         within the specified time, it will return SYS_ARCH_TIMEOUT; If the thread doesn't
 *         wait for the semaphore, it will return zero
 */
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
  10a720:	e92d4800 	push	{fp, lr}
  10a724:	e28db004 	add	fp, sp, #4
  10a728:	e24dd018 	sub	sp, sp, #24
  10a72c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10a730:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    u32_t tick;

    RT_DEBUG_NOT_IN_INTERRUPT;

    /* get the begin tick */
    tick = rt_tick_get();
  10a734:	ebffddc9 	bl	101e60 <rt_tick_get>
  10a738:	e50b000c 	str	r0, [fp, #-12]
    if (timeout == 0)
  10a73c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10a740:	e3530000 	cmp	r3, #0
  10a744:	1a000002 	bne	10a754 <sys_arch_sem_wait+0x34>
        t = RT_WAITING_FOREVER;
  10a748:	e3e03000 	mvn	r3, #0
  10a74c:	e50b3008 	str	r3, [fp, #-8]
  10a750:	ea000007 	b	10a774 <sys_arch_sem_wait+0x54>
    else
    {
        /* convert msecond to os tick */
        if (timeout < (1000/RT_TICK_PER_SECOND))
  10a754:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10a758:	e3530000 	cmp	r3, #0
  10a75c:	1a000002 	bne	10a76c <sys_arch_sem_wait+0x4c>
            t = 1;
  10a760:	e3a03001 	mov	r3, #1
  10a764:	e50b3008 	str	r3, [fp, #-8]
  10a768:	ea000001 	b	10a774 <sys_arch_sem_wait+0x54>
        else
            t = timeout / (1000/RT_TICK_PER_SECOND);
  10a76c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10a770:	e50b3008 	str	r3, [fp, #-8]
    }

    ret = rt_sem_take(*sem, t);
  10a774:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10a778:	e5933000 	ldr	r3, [r3]
  10a77c:	e51b1008 	ldr	r1, [fp, #-8]
  10a780:	e1a00003 	mov	r0, r3
  10a784:	ebffdaca 	bl	1012b4 <rt_sem_take>
  10a788:	e50b0010 	str	r0, [fp, #-16]

    if (ret == -RT_ETIMEOUT)
  10a78c:	e51b3010 	ldr	r3, [fp, #-16]
  10a790:	e3730002 	cmn	r3, #2
  10a794:	1a000001 	bne	10a7a0 <sys_arch_sem_wait+0x80>
        return SYS_ARCH_TIMEOUT;
  10a798:	e3e03000 	mvn	r3, #0
  10a79c:	ea00000f 	b	10a7e0 <sys_arch_sem_wait+0xc0>
    else
    {
        if (ret == RT_EOK)
  10a7a0:	e51b3010 	ldr	r3, [fp, #-16]
  10a7a4:	e3530000 	cmp	r3, #0
  10a7a8:	1a000001 	bne	10a7b4 <sys_arch_sem_wait+0x94>
            ret = 1;
  10a7ac:	e3a03001 	mov	r3, #1
  10a7b0:	e50b3010 	str	r3, [fp, #-16]
    }

    /* get elapse msecond */
    tick = rt_tick_get() - tick;
  10a7b4:	ebffdda9 	bl	101e60 <rt_tick_get>
  10a7b8:	e1a02000 	mov	r2, r0
  10a7bc:	e51b300c 	ldr	r3, [fp, #-12]
  10a7c0:	e0423003 	sub	r3, r2, r3
  10a7c4:	e50b300c 	str	r3, [fp, #-12]

    /* convert tick to msecond */
    tick = tick * (1000 / RT_TICK_PER_SECOND);
    if (tick == 0)
  10a7c8:	e51b300c 	ldr	r3, [fp, #-12]
  10a7cc:	e3530000 	cmp	r3, #0
  10a7d0:	1a000001 	bne	10a7dc <sys_arch_sem_wait+0xbc>
        tick = 1;
  10a7d4:	e3a03001 	mov	r3, #1
  10a7d8:	e50b300c 	str	r3, [fp, #-12]

    return tick;
  10a7dc:	e51b300c 	ldr	r3, [fp, #-12]
}
  10a7e0:	e1a00003 	mov	r0, r3
  10a7e4:	e24bd004 	sub	sp, fp, #4
  10a7e8:	e8bd8800 	pop	{fp, pc}

0010a7ec <sys_sem_valid>:
#ifndef sys_sem_valid
/** Check if a semaphore is valid/allocated:
 *  return 1 for valid, 0 for invalid
 */
rt_ubase_t sys_sem_valid(sys_sem_t *sem)
{
  10a7ec:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10a7f0:	e28db000 	add	fp, sp, #0
  10a7f4:	e24dd00c 	sub	sp, sp, #12
  10a7f8:	e50b0008 	str	r0, [fp, #-8]
    return (rt_ubase_t)(*sem);
  10a7fc:	e51b3008 	ldr	r3, [fp, #-8]
  10a800:	e5933000 	ldr	r3, [r3]
}
  10a804:	e1a00003 	mov	r0, r3
  10a808:	e28bd000 	add	sp, fp, #0
  10a80c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10a810:	e12fff1e 	bx	lr

0010a814 <sys_sem_set_invalid>:

#ifndef sys_sem_set_invalid
/** Set a semaphore invalid so that sys_sem_valid returns 0
 */
void sys_sem_set_invalid(sys_sem_t *sem)
{
  10a814:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10a818:	e28db000 	add	fp, sp, #0
  10a81c:	e24dd00c 	sub	sp, sp, #12
  10a820:	e50b0008 	str	r0, [fp, #-8]
    *sem = RT_NULL;
  10a824:	e51b3008 	ldr	r3, [fp, #-8]
  10a828:	e3a02000 	mov	r2, #0
  10a82c:	e5832000 	str	r2, [r3]
}
  10a830:	e320f000 	nop	{0}
  10a834:	e28bd000 	add	sp, fp, #0
  10a838:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10a83c:	e12fff1e 	bx	lr

0010a840 <sys_mutex_new>:
/** Create a new mutex
 * @param mutex pointer to the mutex to create
 * @return a new mutex
 */
err_t sys_mutex_new(sys_mutex_t *mutex)
{
  10a840:	e92d4800 	push	{fp, lr}
  10a844:	e28db004 	add	fp, sp, #4
  10a848:	e24dd020 	sub	sp, sp, #32
  10a84c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    char tname[RT_NAME_MAX];
    sys_mutex_t tmpmutex;

    RT_DEBUG_NOT_IN_INTERRUPT;

    rt_snprintf(tname, RT_NAME_MAX, "%s%d", SYS_LWIP_MUTEX_NAME, counter);
  10a850:	e30e3a52 	movw	r3, #59986	; 0xea52
  10a854:	e3403014 	movt	r3, #20
  10a858:	e1d330b0 	ldrh	r3, [r3]
  10a85c:	e24b0010 	sub	r0, fp, #16
  10a860:	e58d3000 	str	r3, [sp]
  10a864:	e30634d4 	movw	r3, #25812	; 0x64d4
  10a868:	e3403014 	movt	r3, #20
  10a86c:	e30624cc 	movw	r2, #25804	; 0x64cc
  10a870:	e3402014 	movt	r2, #20
  10a874:	e3a01008 	mov	r1, #8
  10a878:	ebffe1ef 	bl	10303c <rt_snprintf>
    counter ++;
  10a87c:	e30e3a52 	movw	r3, #59986	; 0xea52
  10a880:	e3403014 	movt	r3, #20
  10a884:	e1d330b0 	ldrh	r3, [r3]
  10a888:	e2833001 	add	r3, r3, #1
  10a88c:	e6ff2073 	uxth	r2, r3
  10a890:	e30e3a52 	movw	r3, #59986	; 0xea52
  10a894:	e3403014 	movt	r3, #20
  10a898:	e1c320b0 	strh	r2, [r3]

    tmpmutex = rt_mutex_create(tname, RT_IPC_FLAG_FIFO);
  10a89c:	e24b3010 	sub	r3, fp, #16
  10a8a0:	e3a01000 	mov	r1, #0
  10a8a4:	e1a00003 	mov	r0, r3
  10a8a8:	ebffd8fe 	bl	100ca8 <rt_mutex_create>
  10a8ac:	e50b0008 	str	r0, [fp, #-8]
    if (tmpmutex == RT_NULL)
  10a8b0:	e51b3008 	ldr	r3, [fp, #-8]
  10a8b4:	e3530000 	cmp	r3, #0
  10a8b8:	1a000001 	bne	10a8c4 <sys_mutex_new+0x84>
        return ERR_MEM;
  10a8bc:	e3e03000 	mvn	r3, #0
  10a8c0:	ea000003 	b	10a8d4 <sys_mutex_new+0x94>
    else
    {
        *mutex = tmpmutex;
  10a8c4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10a8c8:	e51b2008 	ldr	r2, [fp, #-8]
  10a8cc:	e5832000 	str	r2, [r3]

        return ERR_OK;
  10a8d0:	e3a03000 	mov	r3, #0
    }
}
  10a8d4:	e1a00003 	mov	r0, r3
  10a8d8:	e24bd004 	sub	sp, fp, #4
  10a8dc:	e8bd8800 	pop	{fp, pc}

0010a8e0 <sys_mutex_lock>:

/** Lock a mutex
 * @param mutex the mutex to lock
 */
void sys_mutex_lock(sys_mutex_t *mutex)
{
  10a8e0:	e92d4800 	push	{fp, lr}
  10a8e4:	e28db004 	add	fp, sp, #4
  10a8e8:	e24dd008 	sub	sp, sp, #8
  10a8ec:	e50b0008 	str	r0, [fp, #-8]
    RT_DEBUG_NOT_IN_INTERRUPT;
    rt_mutex_take(*mutex, RT_WAITING_FOREVER);
  10a8f0:	e51b3008 	ldr	r3, [fp, #-8]
  10a8f4:	e5933000 	ldr	r3, [r3]
  10a8f8:	e3e01000 	mvn	r1, #0
  10a8fc:	e1a00003 	mov	r0, r3
  10a900:	ebffd97e 	bl	100f00 <rt_mutex_take>

    return;
  10a904:	e320f000 	nop	{0}
}
  10a908:	e24bd004 	sub	sp, fp, #4
  10a90c:	e8bd8800 	pop	{fp, pc}

0010a910 <sys_mutex_unlock>:

/** Unlock a mutex
 * @param mutex the mutex to unlock
 */
void sys_mutex_unlock(sys_mutex_t *mutex)
{
  10a910:	e92d4800 	push	{fp, lr}
  10a914:	e28db004 	add	fp, sp, #4
  10a918:	e24dd008 	sub	sp, sp, #8
  10a91c:	e50b0008 	str	r0, [fp, #-8]
    rt_mutex_release(*mutex);
  10a920:	e51b3008 	ldr	r3, [fp, #-8]
  10a924:	e5933000 	ldr	r3, [r3]
  10a928:	e1a00003 	mov	r0, r3
  10a92c:	ebffd991 	bl	100f78 <rt_mutex_release>
}
  10a930:	e320f000 	nop	{0}
  10a934:	e24bd004 	sub	sp, fp, #4
  10a938:	e8bd8800 	pop	{fp, pc}

0010a93c <sys_mutex_free>:

/** Delete a semaphore
 * @param mutex the mutex to delete
 */
void sys_mutex_free(sys_mutex_t *mutex)
{
  10a93c:	e92d4800 	push	{fp, lr}
  10a940:	e28db004 	add	fp, sp, #4
  10a944:	e24dd008 	sub	sp, sp, #8
  10a948:	e50b0008 	str	r0, [fp, #-8]
    RT_DEBUG_NOT_IN_INTERRUPT;

    rt_mutex_delete(*mutex);
  10a94c:	e51b3008 	ldr	r3, [fp, #-8]
  10a950:	e5933000 	ldr	r3, [r3]
  10a954:	e1a00003 	mov	r0, r3
  10a958:	ebffd91c 	bl	100dd0 <rt_mutex_delete>
}
  10a95c:	e320f000 	nop	{0}
  10a960:	e24bd004 	sub	sp, fp, #4
  10a964:	e8bd8800 	pop	{fp, pc}

0010a968 <sys_mutex_valid>:
#ifndef sys_mutex_valid
/** Check if a mutex is valid/allocated:
 *  return 1 for valid, 0 for invalid
 */
rt_base_t sys_mutex_valid(sys_mutex_t *mutex)
{
  10a968:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10a96c:	e28db000 	add	fp, sp, #0
  10a970:	e24dd00c 	sub	sp, sp, #12
  10a974:	e50b0008 	str	r0, [fp, #-8]
    return (rt_base_t)(*mutex);
  10a978:	e51b3008 	ldr	r3, [fp, #-8]
  10a97c:	e5933000 	ldr	r3, [r3]
}
  10a980:	e1a00003 	mov	r0, r3
  10a984:	e28bd000 	add	sp, fp, #0
  10a988:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10a98c:	e12fff1e 	bx	lr

0010a990 <sys_mutex_set_invalid>:

#ifndef sys_mutex_set_invalid
/** Set a mutex invalid so that sys_mutex_valid returns 0
 */
void sys_mutex_set_invalid(sys_mutex_t *mutex)
{
  10a990:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10a994:	e28db000 	add	fp, sp, #0
  10a998:	e24dd00c 	sub	sp, sp, #12
  10a99c:	e50b0008 	str	r0, [fp, #-8]
    *mutex = RT_NULL;
  10a9a0:	e51b3008 	ldr	r3, [fp, #-8]
  10a9a4:	e3a02000 	mov	r2, #0
  10a9a8:	e5832000 	str	r2, [r3]
}
  10a9ac:	e320f000 	nop	{0}
  10a9b0:	e28bd000 	add	sp, fp, #0
  10a9b4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10a9b8:	e12fff1e 	bx	lr

0010a9bc <list_insert>:
    struct mbbuf_list *next;
};

struct mbbuf_list head = {0, 0};
static void list_insert(rt_mailbox_buff_t new_mbbuf)
{
  10a9bc:	e92d4800 	push	{fp, lr}
  10a9c0:	e28db004 	add	fp, sp, #4
  10a9c4:	e24dd010 	sub	sp, sp, #16
  10a9c8:	e50b0010 	str	r0, [fp, #-16]
    struct mbbuf_list *cur = &head;
  10a9cc:	e30e3a44 	movw	r3, #59972	; 0xea44
  10a9d0:	e3403014 	movt	r3, #20
  10a9d4:	e50b3008 	str	r3, [fp, #-8]
    while (cur->next)
  10a9d8:	ea000002 	b	10a9e8 <list_insert+0x2c>
    {
        cur = cur->next;
  10a9dc:	e51b3008 	ldr	r3, [fp, #-8]
  10a9e0:	e5933004 	ldr	r3, [r3, #4]
  10a9e4:	e50b3008 	str	r3, [fp, #-8]
    while (cur->next)
  10a9e8:	e51b3008 	ldr	r3, [fp, #-8]
  10a9ec:	e5933004 	ldr	r3, [r3, #4]
  10a9f0:	e3530000 	cmp	r3, #0
  10a9f4:	1afffff8 	bne	10a9dc <list_insert+0x20>
    }

    struct mbbuf_list *new_node = (struct mbbuf_list *)malloc(sizeof(struct mbbuf_list));
  10a9f8:	e3a00008 	mov	r0, #8
  10a9fc:	eb00cacd 	bl	13d538 <malloc>
  10aa00:	e1a03000 	mov	r3, r0
  10aa04:	e50b300c 	str	r3, [fp, #-12]
    cur->next = new_node;
  10aa08:	e51b3008 	ldr	r3, [fp, #-8]
  10aa0c:	e51b200c 	ldr	r2, [fp, #-12]
  10aa10:	e5832004 	str	r2, [r3, #4]
    new_node->next = RT_NULL;
  10aa14:	e51b300c 	ldr	r3, [fp, #-12]
  10aa18:	e3a02000 	mov	r2, #0
  10aa1c:	e5832004 	str	r2, [r3, #4]
    new_node->mbbuf = new_mbbuf;
  10aa20:	e51b300c 	ldr	r3, [fp, #-12]
  10aa24:	e51b2010 	ldr	r2, [fp, #-16]
  10aa28:	e5832000 	str	r2, [r3]
}
  10aa2c:	e320f000 	nop	{0}
  10aa30:	e24bd004 	sub	sp, fp, #4
  10aa34:	e8bd8800 	pop	{fp, pc}

0010aa38 <list_del>:

static void list_del(rt_mailbox_buff_t del_mbbuf)
{
  10aa38:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10aa3c:	e28db000 	add	fp, sp, #0
  10aa40:	e24dd014 	sub	sp, sp, #20
  10aa44:	e50b0010 	str	r0, [fp, #-16]
    struct mbbuf_list *cur = &head;
  10aa48:	e30e3a44 	movw	r3, #59972	; 0xea44
  10aa4c:	e3403014 	movt	r3, #20
  10aa50:	e50b3008 	str	r3, [fp, #-8]
    while (cur->next)
  10aa54:	ea00000e 	b	10aa94 <list_del+0x5c>
    {
        if (cur->next->mbbuf == del_mbbuf)
  10aa58:	e51b3008 	ldr	r3, [fp, #-8]
  10aa5c:	e5933004 	ldr	r3, [r3, #4]
  10aa60:	e5933000 	ldr	r3, [r3]
  10aa64:	e51b2010 	ldr	r2, [fp, #-16]
  10aa68:	e1520003 	cmp	r2, r3
  10aa6c:	1a000005 	bne	10aa88 <list_del+0x50>
        {
            cur->next = cur->next->next;
  10aa70:	e51b3008 	ldr	r3, [fp, #-8]
  10aa74:	e5933004 	ldr	r3, [r3, #4]
  10aa78:	e5932004 	ldr	r2, [r3, #4]
  10aa7c:	e51b3008 	ldr	r3, [fp, #-8]
  10aa80:	e5832004 	str	r2, [r3, #4]
            return;
  10aa84:	ea000006 	b	10aaa4 <list_del+0x6c>
        }
        cur = cur->next;
  10aa88:	e51b3008 	ldr	r3, [fp, #-8]
  10aa8c:	e5933004 	ldr	r3, [r3, #4]
  10aa90:	e50b3008 	str	r3, [fp, #-8]
    while (cur->next)
  10aa94:	e51b3008 	ldr	r3, [fp, #-8]
  10aa98:	e5933004 	ldr	r3, [r3, #4]
  10aa9c:	e3530000 	cmp	r3, #0
  10aaa0:	1affffec 	bne	10aa58 <list_del+0x20>
    }
}
  10aaa4:	e28bd000 	add	sp, fp, #0
  10aaa8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10aaac:	e12fff1e 	bx	lr

0010aab0 <tcpip_mb_timer_entry>:

void tcpip_mb_timer_entry()
{
  10aab0:	e92d4800 	push	{fp, lr}
  10aab4:	e28db004 	add	fp, sp, #4
  10aab8:	e24dd008 	sub	sp, sp, #8
    while (1)
    {
        rt_thread_mdelay(1);
  10aabc:	e3a00001 	mov	r0, #1
  10aac0:	ebffdced 	bl	101e7c <rt_thread_mdelay>
        struct mbbuf_list *cur = &head;
  10aac4:	e30e3a44 	movw	r3, #59972	; 0xea44
  10aac8:	e3403014 	movt	r3, #20
  10aacc:	e50b3008 	str	r3, [fp, #-8]
        while (cur->next)
  10aad0:	ea000012 	b	10ab20 <tcpip_mb_timer_entry+0x70>
        {
            if (!buffer_empty(cur->next->mbbuf->cb))
  10aad4:	e51b3008 	ldr	r3, [fp, #-8]
  10aad8:	e5933004 	ldr	r3, [r3, #4]
  10aadc:	e5933000 	ldr	r3, [r3]
  10aae0:	e5933004 	ldr	r3, [r3, #4]
  10aae4:	e1a00003 	mov	r0, r3
  10aae8:	eb0001f8 	bl	10b2d0 <buffer_empty>
  10aaec:	e1a03000 	mov	r3, r0
  10aaf0:	e3530000 	cmp	r3, #0
  10aaf4:	1a000006 	bne	10ab14 <tcpip_mb_timer_entry+0x64>
            {
                rt_mb_send(cur->next->mbbuf->mb, INPUT_NOTIFICATION);
  10aaf8:	e51b3008 	ldr	r3, [fp, #-8]
  10aafc:	e5933004 	ldr	r3, [r3, #4]
  10ab00:	e5933000 	ldr	r3, [r3]
  10ab04:	e5933000 	ldr	r3, [r3]
  10ab08:	e3a01000 	mov	r1, #0
  10ab0c:	e1a00003 	mov	r0, r3
  10ab10:	ebffdabb 	bl	101604 <rt_mb_send>
            }
            
            cur = cur->next;
  10ab14:	e51b3008 	ldr	r3, [fp, #-8]
  10ab18:	e5933004 	ldr	r3, [r3, #4]
  10ab1c:	e50b3008 	str	r3, [fp, #-8]
        while (cur->next)
  10ab20:	e51b3008 	ldr	r3, [fp, #-8]
  10ab24:	e5933004 	ldr	r3, [r3, #4]
  10ab28:	e3530000 	cmp	r3, #0
  10ab2c:	1affffe8 	bne	10aad4 <tcpip_mb_timer_entry+0x24>
    {
  10ab30:	eaffffe1 	b	10aabc <tcpip_mb_timer_entry+0xc>

0010ab34 <sys_mbox_new>:
 * Create an empty mailbox for maximum "size" elements
 *
 * @return the operation status, ERR_OK on OK; others on error
 */
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
  10ab34:	e92d4810 	push	{r4, fp, lr}
  10ab38:	e28db008 	add	fp, sp, #8
  10ab3c:	e24dd01c 	sub	sp, sp, #28
  10ab40:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10ab44:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    static unsigned short counter = 0;
    char tname[RT_NAME_MAX];

    RT_DEBUG_NOT_IN_INTERRUPT;

    rt_snprintf(tname, RT_NAME_MAX, "%s%d", SYS_LWIP_MBOX_NAME, counter);
  10ab48:	e30e3a54 	movw	r3, #59988	; 0xea54
  10ab4c:	e3403014 	movt	r3, #20
  10ab50:	e1d330b0 	ldrh	r3, [r3]
  10ab54:	e24b0014 	sub	r0, fp, #20
  10ab58:	e58d3000 	str	r3, [sp]
  10ab5c:	e30634d8 	movw	r3, #25816	; 0x64d8
  10ab60:	e3403014 	movt	r3, #20
  10ab64:	e30624cc 	movw	r2, #25804	; 0x64cc
  10ab68:	e3402014 	movt	r2, #20
  10ab6c:	e3a01008 	mov	r1, #8
  10ab70:	ebffe131 	bl	10303c <rt_snprintf>
    counter++;
  10ab74:	e30e3a54 	movw	r3, #59988	; 0xea54
  10ab78:	e3403014 	movt	r3, #20
  10ab7c:	e1d330b0 	ldrh	r3, [r3]
  10ab80:	e2833001 	add	r3, r3, #1
  10ab84:	e6ff2073 	uxth	r2, r3
  10ab88:	e30e3a54 	movw	r3, #59988	; 0xea54
  10ab8c:	e3403014 	movt	r3, #20
  10ab90:	e1c320b0 	strh	r2, [r3]

    *mbox = malloc(sizeof(struct rt_mailbox_buff));
  10ab94:	e3a00008 	mov	r0, #8
  10ab98:	eb00ca66 	bl	13d538 <malloc>
  10ab9c:	e1a03000 	mov	r3, r0
  10aba0:	e1a02003 	mov	r2, r3
  10aba4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10aba8:	e5832000 	str	r2, [r3]
    (*mbox)->cb = buffer_new(INPUT_BUF_LEN);
  10abac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10abb0:	e5934000 	ldr	r4, [r3]
  10abb4:	e3a00b01 	mov	r0, #1024	; 0x400
  10abb8:	eb00017f 	bl	10b1bc <buffer_new>
  10abbc:	e1a03000 	mov	r3, r0
  10abc0:	e5843004 	str	r3, [r4, #4]
    (*mbox)->mb = rt_mb_create(tname, size, RT_IPC_FLAG_FIFO);
  10abc4:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  10abc8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10abcc:	e5934000 	ldr	r4, [r3]
  10abd0:	e24b3014 	sub	r3, fp, #20
  10abd4:	e3a02000 	mov	r2, #0
  10abd8:	e1a00003 	mov	r0, r3
  10abdc:	ebffd9d2 	bl	10132c <rt_mb_create>
  10abe0:	e1a03000 	mov	r3, r0
  10abe4:	e5843000 	str	r3, [r4]

    if (!(*mbox) || !(*mbox)->cb || !(*mbox)->cb)
  10abe8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10abec:	e5933000 	ldr	r3, [r3]
  10abf0:	e3530000 	cmp	r3, #0
  10abf4:	0a000009 	beq	10ac20 <sys_mbox_new+0xec>
  10abf8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10abfc:	e5933000 	ldr	r3, [r3]
  10ac00:	e5933004 	ldr	r3, [r3, #4]
  10ac04:	e3530000 	cmp	r3, #0
  10ac08:	0a000004 	beq	10ac20 <sys_mbox_new+0xec>
  10ac0c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10ac10:	e5933000 	ldr	r3, [r3]
  10ac14:	e5933004 	ldr	r3, [r3, #4]
  10ac18:	e3530000 	cmp	r3, #0
  10ac1c:	1a000001 	bne	10ac28 <sys_mbox_new+0xf4>
    {
        return ERR_MEM;
  10ac20:	e3e03000 	mvn	r3, #0
  10ac24:	ea000004 	b	10ac3c <sys_mbox_new+0x108>
    }

    list_insert(*mbox);
  10ac28:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10ac2c:	e5933000 	ldr	r3, [r3]
  10ac30:	e1a00003 	mov	r0, r3
  10ac34:	ebffff60 	bl	10a9bc <list_insert>
    return ERR_OK;
  10ac38:	e3a03000 	mov	r3, #0
}
  10ac3c:	e1a00003 	mov	r0, r3
  10ac40:	e24bd008 	sub	sp, fp, #8
  10ac44:	e8bd8810 	pop	{r4, fp, pc}

0010ac48 <sys_mbox_free>:

/*
 * Deallocate a mailbox
 */
void sys_mbox_free(sys_mbox_t *mbox)
{
  10ac48:	e92d4800 	push	{fp, lr}
  10ac4c:	e28db004 	add	fp, sp, #4
  10ac50:	e24dd008 	sub	sp, sp, #8
  10ac54:	e50b0008 	str	r0, [fp, #-8]
    RT_DEBUG_NOT_IN_INTERRUPT;

    rt_mb_delete((*mbox)->mb);
  10ac58:	e51b3008 	ldr	r3, [fp, #-8]
  10ac5c:	e5933000 	ldr	r3, [r3]
  10ac60:	e5933000 	ldr	r3, [r3]
  10ac64:	e1a00003 	mov	r0, r3
  10ac68:	ebffd9fa 	bl	101458 <rt_mb_delete>
    buffer_del((*mbox)->cb);
  10ac6c:	e51b3008 	ldr	r3, [fp, #-8]
  10ac70:	e5933000 	ldr	r3, [r3]
  10ac74:	e5933004 	ldr	r3, [r3, #4]
  10ac78:	e1a00003 	mov	r0, r3
  10ac7c:	eb000170 	bl	10b244 <buffer_del>
    list_del(*mbox);
  10ac80:	e51b3008 	ldr	r3, [fp, #-8]
  10ac84:	e5933000 	ldr	r3, [r3]
  10ac88:	e1a00003 	mov	r0, r3
  10ac8c:	ebffff69 	bl	10aa38 <list_del>
    free(*mbox);
  10ac90:	e51b3008 	ldr	r3, [fp, #-8]
  10ac94:	e5933000 	ldr	r3, [r3]
  10ac98:	e1a00003 	mov	r0, r3
  10ac9c:	eb00cbe1 	bl	13dc28 <free>

    return;
  10aca0:	e320f000 	nop	{0}
}
  10aca4:	e24bd004 	sub	sp, fp, #4
  10aca8:	e8bd8800 	pop	{fp, pc}

0010acac <post_msg>:

rt_err_t post_msg(sys_mbox_t *mbox, void *msg)
{
  10acac:	e92d4800 	push	{fp, lr}
  10acb0:	e28db004 	add	fp, sp, #4
  10acb4:	e24dd008 	sub	sp, sp, #8
  10acb8:	e50b0008 	str	r0, [fp, #-8]
  10acbc:	e50b100c 	str	r1, [fp, #-12]
    while (buffer_enqueue((*mbox)->cb, (rt_ubase_t)msg) == -1)
  10acc0:	ea000005 	b	10acdc <post_msg+0x30>
    {
        rt_mb_send((*mbox)->mb, INPUT_NOTIFICATION);
  10acc4:	e51b3008 	ldr	r3, [fp, #-8]
  10acc8:	e5933000 	ldr	r3, [r3]
  10accc:	e5933000 	ldr	r3, [r3]
  10acd0:	e3a01000 	mov	r1, #0
  10acd4:	e1a00003 	mov	r0, r3
  10acd8:	ebffda49 	bl	101604 <rt_mb_send>
    while (buffer_enqueue((*mbox)->cb, (rt_ubase_t)msg) == -1)
  10acdc:	e51b3008 	ldr	r3, [fp, #-8]
  10ace0:	e5933000 	ldr	r3, [r3]
  10ace4:	e5933004 	ldr	r3, [r3, #4]
  10ace8:	e51b200c 	ldr	r2, [fp, #-12]
  10acec:	e1a01002 	mov	r1, r2
  10acf0:	e1a00003 	mov	r0, r3
  10acf4:	eb000185 	bl	10b310 <buffer_enqueue>
  10acf8:	e1a03000 	mov	r3, r0
  10acfc:	e3730001 	cmn	r3, #1
  10ad00:	0affffef 	beq	10acc4 <post_msg+0x18>
    }

    return ERR_OK;
  10ad04:	e3a03000 	mov	r3, #0
}
  10ad08:	e1a00003 	mov	r0, r3
  10ad0c:	e24bd004 	sub	sp, fp, #4
  10ad10:	e8bd8800 	pop	{fp, pc}

0010ad14 <fetch_msg>:

rt_err_t fetch_msg(sys_mbox_t *mbox, void **msg, u32_t t)
{
  10ad14:	e92d4800 	push	{fp, lr}
  10ad18:	e28db004 	add	fp, sp, #4
  10ad1c:	e24dd018 	sub	sp, sp, #24
  10ad20:	e50b0010 	str	r0, [fp, #-16]
  10ad24:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10ad28:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    rt_err_t ret;
    do
    {
        ret = buffer_dequeue((*mbox)->cb, (rt_ubase_t*)msg);
  10ad2c:	e51b3010 	ldr	r3, [fp, #-16]
  10ad30:	e5933000 	ldr	r3, [r3]
  10ad34:	e5933004 	ldr	r3, [r3, #4]
  10ad38:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10ad3c:	e1a00003 	mov	r0, r3
  10ad40:	eb000196 	bl	10b3a0 <buffer_dequeue>
  10ad44:	e50b0008 	str	r0, [fp, #-8]
        if (ret == 0)
  10ad48:	e51b3008 	ldr	r3, [fp, #-8]
  10ad4c:	e3530000 	cmp	r3, #0
  10ad50:	1a000001 	bne	10ad5c <fetch_msg+0x48>
        {
            return RT_EOK;
  10ad54:	e3a03000 	mov	r3, #0
  10ad58:	ea00000c 	b	10ad90 <fetch_msg+0x7c>
        } 
        ret = rt_mb_recv((*mbox)->mb, (rt_ubase_t *)msg, t);
  10ad5c:	e51b3010 	ldr	r3, [fp, #-16]
  10ad60:	e5933000 	ldr	r3, [r3]
  10ad64:	e5933000 	ldr	r3, [r3]
  10ad68:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  10ad6c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10ad70:	e1a00003 	mov	r0, r3
  10ad74:	ebffda40 	bl	10167c <rt_mb_recv>
  10ad78:	e50b0008 	str	r0, [fp, #-8]
    } while (*msg == (void*)INPUT_NOTIFICATION);
  10ad7c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10ad80:	e5933000 	ldr	r3, [r3]
  10ad84:	e3530000 	cmp	r3, #0
  10ad88:	0affffe7 	beq	10ad2c <fetch_msg+0x18>

    return ret;
  10ad8c:	e51b3008 	ldr	r3, [fp, #-8]
}
  10ad90:	e1a00003 	mov	r0, r3
  10ad94:	e24bd004 	sub	sp, fp, #4
  10ad98:	e8bd8800 	pop	{fp, pc}

0010ad9c <sys_mbox_post>:
 * -> blocks if full, only used from tasks not from ISR
 * @param mbox mbox to posts the message
 * @param msg message to post (ATTENTION: can be NULL)
 */
void sys_mbox_post(sys_mbox_t *mbox, void *msg)
{
  10ad9c:	e92d4800 	push	{fp, lr}
  10ada0:	e28db004 	add	fp, sp, #4
  10ada4:	e24dd008 	sub	sp, sp, #8
  10ada8:	e50b0008 	str	r0, [fp, #-8]
  10adac:	e50b100c 	str	r1, [fp, #-12]
    RT_DEBUG_NOT_IN_INTERRUPT;

    post_msg(mbox, msg);
  10adb0:	e51b100c 	ldr	r1, [fp, #-12]
  10adb4:	e51b0008 	ldr	r0, [fp, #-8]
  10adb8:	ebffffbb 	bl	10acac <post_msg>

    return;
  10adbc:	e320f000 	nop	{0}
}
  10adc0:	e24bd004 	sub	sp, fp, #4
  10adc4:	e8bd8800 	pop	{fp, pc}

0010adc8 <sys_mbox_trypost>:
 *
 * @return return ERR_OK if the "msg" is posted, ERR_MEM if the mailbox is full
 */

err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
  10adc8:	e92d4800 	push	{fp, lr}
  10adcc:	e28db004 	add	fp, sp, #4
  10add0:	e24dd008 	sub	sp, sp, #8
  10add4:	e50b0008 	str	r0, [fp, #-8]
  10add8:	e50b100c 	str	r1, [fp, #-12]
    return post_msg(mbox, msg);
  10addc:	e51b100c 	ldr	r1, [fp, #-12]
  10ade0:	e51b0008 	ldr	r0, [fp, #-8]
  10ade4:	ebffffb0 	bl	10acac <post_msg>
  10ade8:	e1a03000 	mov	r3, r0
  10adec:	e6af3073 	sxtb	r3, r3
}
  10adf0:	e1a00003 	mov	r0, r3
  10adf4:	e24bd004 	sub	sp, fp, #4
  10adf8:	e8bd8800 	pop	{fp, pc}

0010adfc <sys_arch_mbox_fetch>:
 * @return time (in milliseconds) waited for a message, may be 0 if not waited
           or SYS_ARCH_TIMEOUT on timeout
 *         The returned time has to be accurate to prevent timer jitter!
 */
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
  10adfc:	e92d4800 	push	{fp, lr}
  10ae00:	e28db004 	add	fp, sp, #4
  10ae04:	e24dd020 	sub	sp, sp, #32
  10ae08:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10ae0c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  10ae10:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
    u32_t tick;

    RT_DEBUG_NOT_IN_INTERRUPT;

    /* get the begin tick */
    tick = rt_tick_get();
  10ae14:	ebffdc11 	bl	101e60 <rt_tick_get>
  10ae18:	e50b000c 	str	r0, [fp, #-12]

    if(timeout == 0)
  10ae1c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ae20:	e3530000 	cmp	r3, #0
  10ae24:	1a000002 	bne	10ae34 <sys_arch_mbox_fetch+0x38>
        t = RT_WAITING_FOREVER;
  10ae28:	e3e03000 	mvn	r3, #0
  10ae2c:	e50b3008 	str	r3, [fp, #-8]
  10ae30:	ea000007 	b	10ae54 <sys_arch_mbox_fetch+0x58>
    else
    {
        /* convirt msecond to os tick */
        if (timeout < (1000/RT_TICK_PER_SECOND))
  10ae34:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ae38:	e3530000 	cmp	r3, #0
  10ae3c:	1a000002 	bne	10ae4c <sys_arch_mbox_fetch+0x50>
            t = 1;
  10ae40:	e3a03001 	mov	r3, #1
  10ae44:	e50b3008 	str	r3, [fp, #-8]
  10ae48:	ea000001 	b	10ae54 <sys_arch_mbox_fetch+0x58>
        else
            t = timeout / (1000/RT_TICK_PER_SECOND);
  10ae4c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ae50:	e50b3008 	str	r3, [fp, #-8]
    }

    ret = fetch_msg(mbox, msg, t);
  10ae54:	e51b3008 	ldr	r3, [fp, #-8]
  10ae58:	e1a02003 	mov	r2, r3
  10ae5c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  10ae60:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  10ae64:	ebffffaa 	bl	10ad14 <fetch_msg>
  10ae68:	e50b0010 	str	r0, [fp, #-16]

    if(ret == -RT_ETIMEOUT)
  10ae6c:	e51b3010 	ldr	r3, [fp, #-16]
  10ae70:	e3730002 	cmn	r3, #2
  10ae74:	1a000001 	bne	10ae80 <sys_arch_mbox_fetch+0x84>
        return SYS_ARCH_TIMEOUT;
  10ae78:	e3e03000 	mvn	r3, #0
  10ae7c:	ea000014 	b	10aed4 <sys_arch_mbox_fetch+0xd8>
    else
    {
        LWIP_ASSERT("rt_mb_recv returned with error!", ret == RT_EOK);
  10ae80:	e51b3010 	ldr	r3, [fp, #-16]
  10ae84:	e3530000 	cmp	r3, #0
  10ae88:	0a000006 	beq	10aea8 <sys_arch_mbox_fetch+0xac>
  10ae8c:	e30604e0 	movw	r0, #25824	; 0x64e0
  10ae90:	e3400014 	movt	r0, #20
  10ae94:	ebffe09e 	bl	103114 <rt_kprintf>
  10ae98:	e3001207 	movw	r1, #519	; 0x207
  10ae9c:	e3060488 	movw	r0, #25736	; 0x6488
  10aea0:	e3400014 	movt	r0, #20
  10aea4:	eb00006e 	bl	10b064 <sys_arch_assert>
    }

    /* get elapse msecond */
    tick = rt_tick_get() - tick;
  10aea8:	ebffdbec 	bl	101e60 <rt_tick_get>
  10aeac:	e1a02000 	mov	r2, r0
  10aeb0:	e51b300c 	ldr	r3, [fp, #-12]
  10aeb4:	e0423003 	sub	r3, r2, r3
  10aeb8:	e50b300c 	str	r3, [fp, #-12]

    /* convert tick to msecond */
    tick = tick * (1000 / RT_TICK_PER_SECOND);
    if (tick == 0)
  10aebc:	e51b300c 	ldr	r3, [fp, #-12]
  10aec0:	e3530000 	cmp	r3, #0
  10aec4:	1a000001 	bne	10aed0 <sys_arch_mbox_fetch+0xd4>
        tick = 1;
  10aec8:	e3a03001 	mov	r3, #1
  10aecc:	e50b300c 	str	r3, [fp, #-12]

    return tick;
  10aed0:	e51b300c 	ldr	r3, [fp, #-12]
}
  10aed4:	e1a00003 	mov	r0, r3
  10aed8:	e24bd004 	sub	sp, fp, #4
  10aedc:	e8bd8800 	pop	{fp, pc}

0010aee0 <sys_arch_mbox_tryfetch>:
 * @param timeout maximum time (in milliseconds) to wait for a message
 * @return 0 (milliseconds) if a message has been received
 *         or SYS_MBOX_EMPTY if the mailbox is empty
 */
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
  10aee0:	e92d4800 	push	{fp, lr}
  10aee4:	e28db004 	add	fp, sp, #4
  10aee8:	e24dd010 	sub	sp, sp, #16
  10aeec:	e50b0010 	str	r0, [fp, #-16]
  10aef0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    int ret;

    ret = fetch_msg(mbox, msg, 0);
  10aef4:	e3a02000 	mov	r2, #0
  10aef8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10aefc:	e51b0010 	ldr	r0, [fp, #-16]
  10af00:	ebffff83 	bl	10ad14 <fetch_msg>
  10af04:	e50b0008 	str	r0, [fp, #-8]
       
    if(ret == -RT_ETIMEOUT)
  10af08:	e51b3008 	ldr	r3, [fp, #-8]
  10af0c:	e3730002 	cmn	r3, #2
  10af10:	1a000001 	bne	10af1c <sys_arch_mbox_tryfetch+0x3c>
        return SYS_ARCH_TIMEOUT;
  10af14:	e3e03000 	mvn	r3, #0
  10af18:	ea000005 	b	10af34 <sys_arch_mbox_tryfetch+0x54>
    else
    {
        if (ret == RT_EOK)
  10af1c:	e51b3008 	ldr	r3, [fp, #-8]
  10af20:	e3530000 	cmp	r3, #0
  10af24:	1a000001 	bne	10af30 <sys_arch_mbox_tryfetch+0x50>
            ret = 1;
  10af28:	e3a03001 	mov	r3, #1
  10af2c:	e50b3008 	str	r3, [fp, #-8]
    }

    return ret;
  10af30:	e51b3008 	ldr	r3, [fp, #-8]
}
  10af34:	e1a00003 	mov	r0, r3
  10af38:	e24bd004 	sub	sp, fp, #4
  10af3c:	e8bd8800 	pop	{fp, pc}

0010af40 <sys_mbox_valid>:
#ifndef sys_mbox_valid
/** Check if an mbox is valid/allocated:
 *  return 1 for valid, 0 for invalid
 */
rt_base_t sys_mbox_valid(sys_mbox_t *mbox)
{
  10af40:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10af44:	e28db000 	add	fp, sp, #0
  10af48:	e24dd00c 	sub	sp, sp, #12
  10af4c:	e50b0008 	str	r0, [fp, #-8]
    return (rt_base_t)(*mbox);
  10af50:	e51b3008 	ldr	r3, [fp, #-8]
  10af54:	e5933000 	ldr	r3, [r3]
}
  10af58:	e1a00003 	mov	r0, r3
  10af5c:	e28bd000 	add	sp, fp, #0
  10af60:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10af64:	e12fff1e 	bx	lr

0010af68 <sys_mbox_set_invalid>:

#ifndef sys_mbox_set_invalid
/** Set an mbox invalid so that sys_mbox_valid returns 0
 */
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
  10af68:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10af6c:	e28db000 	add	fp, sp, #0
  10af70:	e24dd00c 	sub	sp, sp, #12
  10af74:	e50b0008 	str	r0, [fp, #-8]
    *mbox = RT_NULL;
  10af78:	e51b3008 	ldr	r3, [fp, #-8]
  10af7c:	e3a02000 	mov	r2, #0
  10af80:	e5832000 	str	r2, [r3]
}
  10af84:	e320f000 	nop	{0}
  10af88:	e28bd000 	add	sp, fp, #0
  10af8c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10af90:	e12fff1e 	bx	lr

0010af94 <sys_thread_new>:
sys_thread_t sys_thread_new(const char    *name,
                            lwip_thread_fn thread,
                            void          *arg,
                            int            stacksize,
                            int            prio)
{
  10af94:	e92d4800 	push	{fp, lr}
  10af98:	e28db004 	add	fp, sp, #4
  10af9c:	e24dd020 	sub	sp, sp, #32
  10afa0:	e50b0010 	str	r0, [fp, #-16]
  10afa4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10afa8:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  10afac:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    rt_thread_t t;

    RT_DEBUG_NOT_IN_INTERRUPT;

    /* create thread */
    t = rt_thread_create(name, thread, arg, stacksize, prio, 20);
  10afb0:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  10afb4:	e59b3004 	ldr	r3, [fp, #4]
  10afb8:	e6ef3073 	uxtb	r3, r3
  10afbc:	e3a02014 	mov	r2, #20
  10afc0:	e58d2004 	str	r2, [sp, #4]
  10afc4:	e58d3000 	str	r3, [sp]
  10afc8:	e1a03001 	mov	r3, r1
  10afcc:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  10afd0:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10afd4:	e51b0010 	ldr	r0, [fp, #-16]
  10afd8:	ebffdc45 	bl	1020f4 <rt_thread_create>
  10afdc:	e50b0008 	str	r0, [fp, #-8]
    
    RT_ASSERT(t != RT_NULL);
  10afe0:	e51b3008 	ldr	r3, [fp, #-8]
  10afe4:	e3530000 	cmp	r3, #0
  10afe8:	1a000005 	bne	10b004 <sys_thread_new+0x70>
  10afec:	e3a02f95 	mov	r2, #596	; 0x254
  10aff0:	e306152c 	movw	r1, #25900	; 0x652c
  10aff4:	e3401014 	movt	r1, #20
  10aff8:	e3060500 	movw	r0, #25856	; 0x6500
  10affc:	e3400014 	movt	r0, #20
  10b000:	ebffe164 	bl	103598 <rt_assert_handler>

    /* startup thread */
    rt_thread_startup(t);
  10b004:	e51b0008 	ldr	r0, [fp, #-8]
  10b008:	ebffdc6e 	bl	1021c8 <rt_thread_startup>

    return t;
  10b00c:	e51b3008 	ldr	r3, [fp, #-8]
}
  10b010:	e1a00003 	mov	r0, r3
  10b014:	e24bd004 	sub	sp, fp, #4
  10b018:	e8bd8800 	pop	{fp, pc}

0010b01c <sys_arch_protect>:

sys_prot_t sys_arch_protect(void)
{
  10b01c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10b020:	e28db000 	add	fp, sp, #0
  10b024:	e24dd00c 	sub	sp, sp, #12
    //rt_base_t level;
    rt_base_t level = 0;
  10b028:	e3a03000 	mov	r3, #0
  10b02c:	e50b3008 	str	r3, [fp, #-8]

    /* disable interrupt */
    //level = rt_hw_interrupt_disable();

    return level;
  10b030:	e51b3008 	ldr	r3, [fp, #-8]
}
  10b034:	e1a00003 	mov	r0, r3
  10b038:	e28bd000 	add	sp, fp, #0
  10b03c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10b040:	e12fff1e 	bx	lr

0010b044 <sys_arch_unprotect>:

void sys_arch_unprotect(sys_prot_t pval)
{
  10b044:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10b048:	e28db000 	add	fp, sp, #0
  10b04c:	e24dd00c 	sub	sp, sp, #12
  10b050:	e50b0008 	str	r0, [fp, #-8]
    /* enable interrupt */
    //rt_hw_interrupt_enable(pval);

    return;
  10b054:	e320f000 	nop	{0}
}
  10b058:	e28bd000 	add	sp, fp, #0
  10b05c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10b060:	e12fff1e 	bx	lr

0010b064 <sys_arch_assert>:

void sys_arch_assert(const char *file, int line)
{
  10b064:	e92d4800 	push	{fp, lr}
  10b068:	e28db004 	add	fp, sp, #4
  10b06c:	e24dd008 	sub	sp, sp, #8
  10b070:	e50b0008 	str	r0, [fp, #-8]
  10b074:	e50b100c 	str	r1, [fp, #-12]
    rt_kprintf("\nAssertion: %d in %s\n", line, file);
  10b078:	e51b2008 	ldr	r2, [fp, #-8]
  10b07c:	e51b100c 	ldr	r1, [fp, #-12]
  10b080:	e3060510 	movw	r0, #25872	; 0x6510
  10b084:	e3400014 	movt	r0, #20
  10b088:	ebffe021 	bl	103114 <rt_kprintf>
    RT_ASSERT(0);
  10b08c:	e3002272 	movw	r2, #626	; 0x272
  10b090:	e306153c 	movw	r1, #25916	; 0x653c
  10b094:	e3401014 	movt	r1, #20
  10b098:	e3060528 	movw	r0, #25896	; 0x6528
  10b09c:	e3400014 	movt	r0, #20
  10b0a0:	ebffe13c 	bl	103598 <rt_assert_handler>
}
  10b0a4:	e320f000 	nop	{0}
  10b0a8:	e24bd004 	sub	sp, fp, #4
  10b0ac:	e8bd8800 	pop	{fp, pc}

0010b0b0 <sys_jiffies>:

u32_t sys_jiffies(void)
{
  10b0b0:	e92d4800 	push	{fp, lr}
  10b0b4:	e28db004 	add	fp, sp, #4
    return rt_tick_get();
  10b0b8:	ebffdb68 	bl	101e60 <rt_tick_get>
  10b0bc:	e1a03000 	mov	r3, r0
}
  10b0c0:	e1a00003 	mov	r0, r3
  10b0c4:	e8bd8800 	pop	{fp, pc}

0010b0c8 <sys_now>:

u32_t sys_now(void)
{
  10b0c8:	e92d4800 	push	{fp, lr}
  10b0cc:	e28db004 	add	fp, sp, #4
    return rt_tick_get() * (1000 / RT_TICK_PER_SECOND);
  10b0d0:	ebffdb62 	bl	101e60 <rt_tick_get>
  10b0d4:	e1a03000 	mov	r3, r0
}
  10b0d8:	e1a00003 	mov	r0, r3
  10b0dc:	e8bd8800 	pop	{fp, pc}

0010b0e0 <mem_init>:


RT_WEAK
void mem_init(void)
{
  10b0e0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10b0e4:	e28db000 	add	fp, sp, #0
}
  10b0e8:	e320f000 	nop	{0}
  10b0ec:	e28bd000 	add	sp, fp, #0
  10b0f0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10b0f4:	e12fff1e 	bx	lr

0010b0f8 <mem_calloc>:

void *mem_calloc(mem_size_t count, mem_size_t size)
{
  10b0f8:	e92d4800 	push	{fp, lr}
  10b0fc:	e28db004 	add	fp, sp, #4
  10b100:	e24dd008 	sub	sp, sp, #8
  10b104:	e1a03000 	mov	r3, r0
  10b108:	e1a02001 	mov	r2, r1
  10b10c:	e14b30b6 	strh	r3, [fp, #-6]
  10b110:	e1a03002 	mov	r3, r2
  10b114:	e14b30b8 	strh	r3, [fp, #-8]
    return rt_calloc(count, size);
  10b118:	e15b30b6 	ldrh	r3, [fp, #-6]
  10b11c:	e15b20b8 	ldrh	r2, [fp, #-8]
  10b120:	e1a01002 	mov	r1, r2
  10b124:	e1a00003 	mov	r0, r3
  10b128:	ebffdfb7 	bl	10300c <rt_calloc>
  10b12c:	e1a03000 	mov	r3, r0
}
  10b130:	e1a00003 	mov	r0, r3
  10b134:	e24bd004 	sub	sp, fp, #4
  10b138:	e8bd8800 	pop	{fp, pc}

0010b13c <mem_trim>:

void *mem_trim(void *mem, mem_size_t size)
{
  10b13c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10b140:	e28db000 	add	fp, sp, #0
  10b144:	e24dd00c 	sub	sp, sp, #12
  10b148:	e50b0008 	str	r0, [fp, #-8]
  10b14c:	e1a03001 	mov	r3, r1
  10b150:	e14b30ba 	strh	r3, [fp, #-10]
    /* not support trim yet */
    return mem;
  10b154:	e51b3008 	ldr	r3, [fp, #-8]
}
  10b158:	e1a00003 	mov	r0, r3
  10b15c:	e28bd000 	add	sp, fp, #0
  10b160:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10b164:	e12fff1e 	bx	lr

0010b168 <mem_malloc>:

void *mem_malloc(mem_size_t size)
{
  10b168:	e92d4800 	push	{fp, lr}
  10b16c:	e28db004 	add	fp, sp, #4
  10b170:	e24dd008 	sub	sp, sp, #8
  10b174:	e1a03000 	mov	r3, r0
  10b178:	e14b30b6 	strh	r3, [fp, #-6]
    return rt_malloc(size);
  10b17c:	e15b30b6 	ldrh	r3, [fp, #-6]
  10b180:	e1a00003 	mov	r0, r3
  10b184:	ebffdf82 	bl	102f94 <rt_malloc>
  10b188:	e1a03000 	mov	r3, r0
}
  10b18c:	e1a00003 	mov	r0, r3
  10b190:	e24bd004 	sub	sp, fp, #4
  10b194:	e8bd8800 	pop	{fp, pc}

0010b198 <mem_free>:

void  mem_free(void *mem)
{
  10b198:	e92d4800 	push	{fp, lr}
  10b19c:	e28db004 	add	fp, sp, #4
  10b1a0:	e24dd008 	sub	sp, sp, #8
  10b1a4:	e50b0008 	str	r0, [fp, #-8]
    rt_free(mem);
  10b1a8:	e51b0008 	ldr	r0, [fp, #-8]
  10b1ac:	ebffdf82 	bl	102fbc <rt_free>
}
  10b1b0:	e320f000 	nop	{0}
  10b1b4:	e24bd004 	sub	sp, fp, #4
  10b1b8:	e8bd8800 	pop	{fp, pc}

0010b1bc <buffer_new>:
#include "arch/cirbuff.h"
#include <rtthread.h>

struct cirbuff * buffer_new(int len)
{
  10b1bc:	e92d4800 	push	{fp, lr}
  10b1c0:	e28db004 	add	fp, sp, #4
  10b1c4:	e24dd010 	sub	sp, sp, #16
  10b1c8:	e50b0010 	str	r0, [fp, #-16]
    struct cirbuff * new_cb = (struct cirbuff *)rt_malloc(sizeof(struct cirbuff));
  10b1cc:	e3a00010 	mov	r0, #16
  10b1d0:	ebffdf6f 	bl	102f94 <rt_malloc>
  10b1d4:	e50b0008 	str	r0, [fp, #-8]
    new_cb->input_ptr = 0;
  10b1d8:	e51b3008 	ldr	r3, [fp, #-8]
  10b1dc:	e3a02000 	mov	r2, #0
  10b1e0:	e5832004 	str	r2, [r3, #4]
    new_cb->output_ptr = 0;
  10b1e4:	e51b3008 	ldr	r3, [fp, #-8]
  10b1e8:	e3a02000 	mov	r2, #0
  10b1ec:	e5832008 	str	r2, [r3, #8]
    new_cb->buff = (rt_ubase_t *)rt_malloc(sizeof(rt_ubase_t) * len);
  10b1f0:	e51b3010 	ldr	r3, [fp, #-16]
  10b1f4:	e1a03103 	lsl	r3, r3, #2
  10b1f8:	e1a00003 	mov	r0, r3
  10b1fc:	ebffdf64 	bl	102f94 <rt_malloc>
  10b200:	e1a02000 	mov	r2, r0
  10b204:	e51b3008 	ldr	r3, [fp, #-8]
  10b208:	e5832000 	str	r2, [r3]
    rt_memset(new_cb->buff, 0, sizeof(rt_ubase_t) * len);
  10b20c:	e51b3008 	ldr	r3, [fp, #-8]
  10b210:	e5930000 	ldr	r0, [r3]
  10b214:	e51b3010 	ldr	r3, [fp, #-16]
  10b218:	e1a03103 	lsl	r3, r3, #2
  10b21c:	e1a02003 	mov	r2, r3
  10b220:	e3a01000 	mov	r1, #0
  10b224:	ebffe027 	bl	1032c8 <rt_memset>
    new_cb->len = len;
  10b228:	e51b3008 	ldr	r3, [fp, #-8]
  10b22c:	e51b2010 	ldr	r2, [fp, #-16]
  10b230:	e583200c 	str	r2, [r3, #12]
    
    return new_cb;
  10b234:	e51b3008 	ldr	r3, [fp, #-8]
}
  10b238:	e1a00003 	mov	r0, r3
  10b23c:	e24bd004 	sub	sp, fp, #4
  10b240:	e8bd8800 	pop	{fp, pc}

0010b244 <buffer_del>:

void buffer_del(struct cirbuff *cb)
{
  10b244:	e92d4800 	push	{fp, lr}
  10b248:	e28db004 	add	fp, sp, #4
  10b24c:	e24dd008 	sub	sp, sp, #8
  10b250:	e50b0008 	str	r0, [fp, #-8]
    rt_free(cb->buff);
  10b254:	e51b3008 	ldr	r3, [fp, #-8]
  10b258:	e5933000 	ldr	r3, [r3]
  10b25c:	e1a00003 	mov	r0, r3
  10b260:	ebffdf55 	bl	102fbc <rt_free>
    rt_free(cb);
  10b264:	e51b0008 	ldr	r0, [fp, #-8]
  10b268:	ebffdf53 	bl	102fbc <rt_free>
}
  10b26c:	e320f000 	nop	{0}
  10b270:	e24bd004 	sub	sp, fp, #4
  10b274:	e8bd8800 	pop	{fp, pc}

0010b278 <buffer_full>:

int buffer_full(struct cirbuff *cb)
{
  10b278:	e92d4810 	push	{r4, fp, lr}
  10b27c:	e28db008 	add	fp, sp, #8
  10b280:	e24dd00c 	sub	sp, sp, #12
  10b284:	e50b0010 	str	r0, [fp, #-16]
    return cb->output_ptr == ((cb->input_ptr + 1) % cb->len);
  10b288:	e51b3010 	ldr	r3, [fp, #-16]
  10b28c:	e5934008 	ldr	r4, [r3, #8]
  10b290:	e51b3010 	ldr	r3, [fp, #-16]
  10b294:	e5933004 	ldr	r3, [r3, #4]
  10b298:	e2832001 	add	r2, r3, #1
  10b29c:	e51b3010 	ldr	r3, [fp, #-16]
  10b2a0:	e593300c 	ldr	r3, [r3, #12]
  10b2a4:	e1a01003 	mov	r1, r3
  10b2a8:	e1a00002 	mov	r0, r2
  10b2ac:	eb00b6f5 	bl	138e88 <__aeabi_idivmod>
  10b2b0:	e1a03001 	mov	r3, r1
  10b2b4:	e1540003 	cmp	r4, r3
  10b2b8:	03a03001 	moveq	r3, #1
  10b2bc:	13a03000 	movne	r3, #0
  10b2c0:	e6ef3073 	uxtb	r3, r3
}
  10b2c4:	e1a00003 	mov	r0, r3
  10b2c8:	e24bd008 	sub	sp, fp, #8
  10b2cc:	e8bd8810 	pop	{r4, fp, pc}

0010b2d0 <buffer_empty>:

int buffer_empty(struct cirbuff *cb)
{
  10b2d0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  10b2d4:	e28db000 	add	fp, sp, #0
  10b2d8:	e24dd00c 	sub	sp, sp, #12
  10b2dc:	e50b0008 	str	r0, [fp, #-8]
    return cb->input_ptr == cb->output_ptr;
  10b2e0:	e51b3008 	ldr	r3, [fp, #-8]
  10b2e4:	e5932004 	ldr	r2, [r3, #4]
  10b2e8:	e51b3008 	ldr	r3, [fp, #-8]
  10b2ec:	e5933008 	ldr	r3, [r3, #8]
  10b2f0:	e1520003 	cmp	r2, r3
  10b2f4:	03a03001 	moveq	r3, #1
  10b2f8:	13a03000 	movne	r3, #0
  10b2fc:	e6ef3073 	uxtb	r3, r3
}
  10b300:	e1a00003 	mov	r0, r3
  10b304:	e28bd000 	add	sp, fp, #0
  10b308:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  10b30c:	e12fff1e 	bx	lr

0010b310 <buffer_enqueue>:

int buffer_enqueue(struct cirbuff *cb, rt_ubase_t data)
{
  10b310:	e92d4800 	push	{fp, lr}
  10b314:	e28db004 	add	fp, sp, #4
  10b318:	e24dd008 	sub	sp, sp, #8
  10b31c:	e50b0008 	str	r0, [fp, #-8]
  10b320:	e50b100c 	str	r1, [fp, #-12]
    if (buffer_full(cb))
  10b324:	e51b0008 	ldr	r0, [fp, #-8]
  10b328:	ebffffd2 	bl	10b278 <buffer_full>
  10b32c:	e1a03000 	mov	r3, r0
  10b330:	e3530000 	cmp	r3, #0
  10b334:	0a000001 	beq	10b340 <buffer_enqueue+0x30>
    {
        return -1;
  10b338:	e3e03000 	mvn	r3, #0
  10b33c:	ea000014 	b	10b394 <buffer_enqueue+0x84>
    }

    cb->buff[cb->input_ptr] = data;
  10b340:	e51b3008 	ldr	r3, [fp, #-8]
  10b344:	e5932000 	ldr	r2, [r3]
  10b348:	e51b3008 	ldr	r3, [fp, #-8]
  10b34c:	e5933004 	ldr	r3, [r3, #4]
  10b350:	e1a03103 	lsl	r3, r3, #2
  10b354:	e0823003 	add	r3, r2, r3
  10b358:	e51b200c 	ldr	r2, [fp, #-12]
  10b35c:	e5832000 	str	r2, [r3]
    cb->input_ptr = (cb->input_ptr + 1) % cb->len;
  10b360:	e51b3008 	ldr	r3, [fp, #-8]
  10b364:	e5933004 	ldr	r3, [r3, #4]
  10b368:	e2832001 	add	r2, r3, #1
  10b36c:	e51b3008 	ldr	r3, [fp, #-8]
  10b370:	e593300c 	ldr	r3, [r3, #12]
  10b374:	e1a01003 	mov	r1, r3
  10b378:	e1a00002 	mov	r0, r2
  10b37c:	eb00b6c1 	bl	138e88 <__aeabi_idivmod>
  10b380:	e1a03001 	mov	r3, r1
  10b384:	e1a02003 	mov	r2, r3
  10b388:	e51b3008 	ldr	r3, [fp, #-8]
  10b38c:	e5832004 	str	r2, [r3, #4]

    return 0;
  10b390:	e3a03000 	mov	r3, #0
}
  10b394:	e1a00003 	mov	r0, r3
  10b398:	e24bd004 	sub	sp, fp, #4
  10b39c:	e8bd8800 	pop	{fp, pc}

0010b3a0 <buffer_dequeue>:

int buffer_dequeue(struct cirbuff *cb, rt_ubase_t *data)
{
  10b3a0:	e92d4800 	push	{fp, lr}
  10b3a4:	e28db004 	add	fp, sp, #4
  10b3a8:	e24dd008 	sub	sp, sp, #8
  10b3ac:	e50b0008 	str	r0, [fp, #-8]
  10b3b0:	e50b100c 	str	r1, [fp, #-12]
    if (buffer_empty(cb))
  10b3b4:	e51b0008 	ldr	r0, [fp, #-8]
  10b3b8:	ebffffc4 	bl	10b2d0 <buffer_empty>
  10b3bc:	e1a03000 	mov	r3, r0
  10b3c0:	e3530000 	cmp	r3, #0
  10b3c4:	0a000001 	beq	10b3d0 <buffer_dequeue+0x30>
    {
        return -1;
  10b3c8:	e3e03000 	mvn	r3, #0
  10b3cc:	ea000015 	b	10b428 <buffer_dequeue+0x88>
    }

    *data = cb->buff[cb->output_ptr];
  10b3d0:	e51b3008 	ldr	r3, [fp, #-8]
  10b3d4:	e5932000 	ldr	r2, [r3]
  10b3d8:	e51b3008 	ldr	r3, [fp, #-8]
  10b3dc:	e5933008 	ldr	r3, [r3, #8]
  10b3e0:	e1a03103 	lsl	r3, r3, #2
  10b3e4:	e0823003 	add	r3, r2, r3
  10b3e8:	e5932000 	ldr	r2, [r3]
  10b3ec:	e51b300c 	ldr	r3, [fp, #-12]
  10b3f0:	e5832000 	str	r2, [r3]
    cb->output_ptr = (cb->output_ptr + 1) % cb->len;
  10b3f4:	e51b3008 	ldr	r3, [fp, #-8]
  10b3f8:	e5933008 	ldr	r3, [r3, #8]
  10b3fc:	e2832001 	add	r2, r3, #1
  10b400:	e51b3008 	ldr	r3, [fp, #-8]
  10b404:	e593300c 	ldr	r3, [r3, #12]
  10b408:	e1a01003 	mov	r1, r3
  10b40c:	e1a00002 	mov	r0, r2
  10b410:	eb00b69c 	bl	138e88 <__aeabi_idivmod>
  10b414:	e1a03001 	mov	r3, r1
  10b418:	e1a02003 	mov	r2, r3
  10b41c:	e51b3008 	ldr	r3, [fp, #-8]
  10b420:	e5832008 	str	r2, [r3, #8]

    return 0;
  10b424:	e3a03000 	mov	r3, #0
}
  10b428:	e1a00003 	mov	r0, r3
  10b42c:	e24bd004 	sub	sp, fp, #4
  10b430:	e8bd8800 	pop	{fp, pc}

0010b434 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
  10b434:	e92d4800 	push	{fp, lr}
  10b438:	e28db004 	add	fp, sp, #4
  10b43c:	e24dd010 	sub	sp, sp, #16
  10b440:	e50b0010 	str	r0, [fp, #-16]
  10b444:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
  10b448:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10b44c:	e5933000 	ldr	r3, [r3]
  10b450:	e2833010 	add	r3, r3, #16
  10b454:	e1a02003 	mov	r2, r3
  10b458:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10b45c:	e51b0010 	ldr	r0, [fp, #-16]
  10b460:	eb002c15 	bl	1164bc <tcpip_send_msg_wait_sem>
  10b464:	e1a03000 	mov	r3, r0
  10b468:	e54b3005 	strb	r3, [fp, #-5]
  if (err == ERR_OK) {
  10b46c:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10b470:	e3530000 	cmp	r3, #0
  10b474:	1a000002 	bne	10b484 <netconn_apimsg+0x50>
    return apimsg->err;
  10b478:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10b47c:	e1d330d4 	ldrsb	r3, [r3, #4]
  10b480:	ea000000 	b	10b488 <netconn_apimsg+0x54>
  }
  return err;
  10b484:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  10b488:	e1a00003 	mov	r0, r3
  10b48c:	e24bd004 	sub	sp, fp, #4
  10b490:	e8bd8800 	pop	{fp, pc}

0010b494 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
  10b494:	e92d4800 	push	{fp, lr}
  10b498:	e28db004 	add	fp, sp, #4
  10b49c:	e24dd030 	sub	sp, sp, #48	; 0x30
  10b4a0:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10b4a4:	e1a03001 	mov	r3, r1
  10b4a8:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
  10b4ac:	e54b3029 	strb	r3, [fp, #-41]	; 0xffffffd7
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
  10b4b0:	e51b1030 	ldr	r1, [fp, #-48]	; 0xffffffd0
  10b4b4:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  10b4b8:	eb000878 	bl	10d6a0 <netconn_alloc>
  10b4bc:	e50b0008 	str	r0, [fp, #-8]
  if (conn != NULL) {
  10b4c0:	e51b3008 	ldr	r3, [fp, #-8]
  10b4c4:	e3530000 	cmp	r3, #0
  10b4c8:	0a00004f 	beq	10b60c <netconn_new_with_proto_and_callback+0x178>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
  10b4cc:	e55b3029 	ldrb	r3, [fp, #-41]	; 0xffffffd7
  10b4d0:	e54b301c 	strb	r3, [fp, #-28]	; 0xffffffe4
    API_MSG_VAR_REF(msg).conn = conn;
  10b4d4:	e51b3008 	ldr	r3, [fp, #-8]
  10b4d8:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
  10b4dc:	e24b3024 	sub	r3, fp, #36	; 0x24
  10b4e0:	e1a01003 	mov	r1, r3
  10b4e4:	e30d0614 	movw	r0, #54804	; 0xd614
  10b4e8:	e3400010 	movt	r0, #16
  10b4ec:	ebffffd0 	bl	10b434 <netconn_apimsg>
  10b4f0:	e1a03000 	mov	r3, r0
  10b4f4:	e54b3009 	strb	r3, [fp, #-9]
    if (err != ERR_OK) {
  10b4f8:	e15b30d9 	ldrsb	r3, [fp, #-9]
  10b4fc:	e3530000 	cmp	r3, #0
  10b500:	0a000041 	beq	10b60c <netconn_new_with_proto_and_callback+0x178>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
  10b504:	e51b3008 	ldr	r3, [fp, #-8]
  10b508:	e5933008 	ldr	r3, [r3, #8]
  10b50c:	e3530000 	cmp	r3, #0
  10b510:	0a000006 	beq	10b530 <netconn_new_with_proto_and_callback+0x9c>
  10b514:	e306054c 	movw	r0, #25932	; 0x654c
  10b518:	e3400014 	movt	r0, #20
  10b51c:	ebffdefc 	bl	103114 <rt_kprintf>
  10b520:	e3a01089 	mov	r1, #137	; 0x89
  10b524:	e3060570 	movw	r0, #25968	; 0x6570
  10b528:	e3400014 	movt	r0, #20
  10b52c:	ebfffecc 	bl	10b064 <sys_arch_assert>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
  10b530:	e51b3008 	ldr	r3, [fp, #-8]
  10b534:	e2833014 	add	r3, r3, #20
  10b538:	e1a00003 	mov	r0, r3
  10b53c:	ebfffe7f 	bl	10af40 <sys_mbox_valid>
  10b540:	e1a03000 	mov	r3, r0
  10b544:	e3530000 	cmp	r3, #0
  10b548:	1a000006 	bne	10b568 <netconn_new_with_proto_and_callback+0xd4>
  10b54c:	e30605a0 	movw	r0, #26016	; 0x65a0
  10b550:	e3400014 	movt	r0, #20
  10b554:	ebffdeee 	bl	103114 <rt_kprintf>
  10b558:	e3a0108a 	mov	r1, #138	; 0x8a
  10b55c:	e3060570 	movw	r0, #25968	; 0x6570
  10b560:	e3400014 	movt	r0, #20
  10b564:	ebfffebe 	bl	10b064 <sys_arch_assert>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
  10b568:	e51b3008 	ldr	r3, [fp, #-8]
  10b56c:	e2833018 	add	r3, r3, #24
  10b570:	e1a00003 	mov	r0, r3
  10b574:	ebfffe71 	bl	10af40 <sys_mbox_valid>
  10b578:	e1a03000 	mov	r3, r0
  10b57c:	e3530000 	cmp	r3, #0
  10b580:	0a000006 	beq	10b5a0 <netconn_new_with_proto_and_callback+0x10c>
  10b584:	e30605b8 	movw	r0, #26040	; 0x65b8
  10b588:	e3400014 	movt	r0, #20
  10b58c:	ebffdee0 	bl	103114 <rt_kprintf>
  10b590:	e3a0108c 	mov	r1, #140	; 0x8c
  10b594:	e3060570 	movw	r0, #25968	; 0x6570
  10b598:	e3400014 	movt	r0, #20
  10b59c:	ebfffeb0 	bl	10b064 <sys_arch_assert>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
  10b5a0:	e51b3008 	ldr	r3, [fp, #-8]
  10b5a4:	e2833010 	add	r3, r3, #16
  10b5a8:	e1a00003 	mov	r0, r3
  10b5ac:	ebfffc8e 	bl	10a7ec <sys_sem_valid>
  10b5b0:	e1a03000 	mov	r3, r0
  10b5b4:	e3530000 	cmp	r3, #0
  10b5b8:	1a000006 	bne	10b5d8 <netconn_new_with_proto_and_callback+0x144>
  10b5bc:	e30605dc 	movw	r0, #26076	; 0x65dc
  10b5c0:	e3400014 	movt	r0, #20
  10b5c4:	ebffded2 	bl	103114 <rt_kprintf>
  10b5c8:	e3a0108f 	mov	r1, #143	; 0x8f
  10b5cc:	e3060570 	movw	r0, #25968	; 0x6570
  10b5d0:	e3400014 	movt	r0, #20
  10b5d4:	ebfffea2 	bl	10b064 <sys_arch_assert>
      sys_sem_free(&conn->op_completed);
  10b5d8:	e51b3008 	ldr	r3, [fp, #-8]
  10b5dc:	e2833010 	add	r3, r3, #16
  10b5e0:	e1a00003 	mov	r0, r3
  10b5e4:	ebfffc37 	bl	10a6c8 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
  10b5e8:	e51b3008 	ldr	r3, [fp, #-8]
  10b5ec:	e2833014 	add	r3, r3, #20
  10b5f0:	e1a00003 	mov	r0, r3
  10b5f4:	ebfffd93 	bl	10ac48 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
  10b5f8:	e51b1008 	ldr	r1, [fp, #-8]
  10b5fc:	e3a00008 	mov	r0, #8
  10b600:	eb003797 	bl	119464 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
  10b604:	e3a03000 	mov	r3, #0
  10b608:	ea000000 	b	10b610 <netconn_new_with_proto_and_callback+0x17c>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
  10b60c:	e51b3008 	ldr	r3, [fp, #-8]
}
  10b610:	e1a00003 	mov	r0, r3
  10b614:	e24bd004 	sub	sp, fp, #4
  10b618:	e8bd8800 	pop	{fp, pc}

0010b61c <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
  10b61c:	e92d4800 	push	{fp, lr}
  10b620:	e28db004 	add	fp, sp, #4
  10b624:	e24dd028 	sub	sp, sp, #40	; 0x28
  10b628:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
  10b62c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b630:	e3530000 	cmp	r3, #0
  10b634:	1a000001 	bne	10b640 <netconn_delete+0x24>
    return ERR_OK;
  10b638:	e3a03000 	mov	r3, #0
  10b63c:	ea000013 	b	10b690 <netconn_delete+0x74>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
  10b640:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b644:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
#if LWIP_TCP
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
  10b648:	ebfffe9e 	bl	10b0c8 <sys_now>
  10b64c:	e1a03000 	mov	r3, r0
  10b650:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
  10b654:	e24b3020 	sub	r3, fp, #32
  10b658:	e1a01003 	mov	r1, r3
  10b65c:	e30e003c 	movw	r0, #57404	; 0xe03c
  10b660:	e3400010 	movt	r0, #16
  10b664:	ebffff72 	bl	10b434 <netconn_apimsg>
  10b668:	e1a03000 	mov	r3, r0
  10b66c:	e54b3005 	strb	r3, [fp, #-5]
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
  10b670:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10b674:	e3530000 	cmp	r3, #0
  10b678:	0a000001 	beq	10b684 <netconn_delete+0x68>
    return err;
  10b67c:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10b680:	ea000002 	b	10b690 <netconn_delete+0x74>
  }

  netconn_free(conn);
  10b684:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  10b688:	eb000878 	bl	10d870 <netconn_free>

  return ERR_OK;
  10b68c:	e3a03000 	mov	r3, #0
}
  10b690:	e1a00003 	mov	r0, r3
  10b694:	e24bd004 	sub	sp, fp, #4
  10b698:	e8bd8800 	pop	{fp, pc}

0010b69c <netconn_getaddr>:
 * @return ERR_CONN for invalid connections
 *         ERR_OK if the information was retrieved
 */
err_t
netconn_getaddr(struct netconn *conn, ip_addr_t *addr, u16_t *port, u8_t local)
{
  10b69c:	e92d4800 	push	{fp, lr}
  10b6a0:	e28db004 	add	fp, sp, #4
  10b6a4:	e24dd030 	sub	sp, sp, #48	; 0x30
  10b6a8:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10b6ac:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  10b6b0:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
  10b6b4:	e54b3031 	strb	r3, [fp, #-49]	; 0xffffffcf
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
  10b6b8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b6bc:	e3530000 	cmp	r3, #0
  10b6c0:	1a000008 	bne	10b6e8 <netconn_getaddr+0x4c>
  10b6c4:	e30605f8 	movw	r0, #26104	; 0x65f8
  10b6c8:	e3400014 	movt	r0, #20
  10b6cc:	ebffde90 	bl	103114 <rt_kprintf>
  10b6d0:	e3a010d9 	mov	r1, #217	; 0xd9
  10b6d4:	e3060570 	movw	r0, #25968	; 0x6570
  10b6d8:	e3400014 	movt	r0, #20
  10b6dc:	ebfffe60 	bl	10b064 <sys_arch_assert>
  10b6e0:	e3e0300f 	mvn	r3, #15
  10b6e4:	ea000027 	b	10b788 <netconn_getaddr+0xec>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
  10b6e8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10b6ec:	e3530000 	cmp	r3, #0
  10b6f0:	1a000008 	bne	10b718 <netconn_getaddr+0x7c>
  10b6f4:	e3060618 	movw	r0, #26136	; 0x6618
  10b6f8:	e3400014 	movt	r0, #20
  10b6fc:	ebffde84 	bl	103114 <rt_kprintf>
  10b700:	e3a010da 	mov	r1, #218	; 0xda
  10b704:	e3060570 	movw	r0, #25968	; 0x6570
  10b708:	e3400014 	movt	r0, #20
  10b70c:	ebfffe54 	bl	10b064 <sys_arch_assert>
  10b710:	e3e0300f 	mvn	r3, #15
  10b714:	ea00001b 	b	10b788 <netconn_getaddr+0xec>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
  10b718:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  10b71c:	e3530000 	cmp	r3, #0
  10b720:	1a000008 	bne	10b748 <netconn_getaddr+0xac>
  10b724:	e3060638 	movw	r0, #26168	; 0x6638
  10b728:	e3400014 	movt	r0, #20
  10b72c:	ebffde78 	bl	103114 <rt_kprintf>
  10b730:	e3a010db 	mov	r1, #219	; 0xdb
  10b734:	e3060570 	movw	r0, #25968	; 0x6570
  10b738:	e3400014 	movt	r0, #20
  10b73c:	ebfffe48 	bl	10b064 <sys_arch_assert>
  10b740:	e3e0300f 	mvn	r3, #15
  10b744:	ea00000f 	b	10b788 <netconn_getaddr+0xec>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
  10b748:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b74c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  API_MSG_VAR_REF(msg).msg.ad.local = local;
  10b750:	e55b3031 	ldrb	r3, [fp, #-49]	; 0xffffffcf
  10b754:	e54b3010 	strb	r3, [fp, #-16]
#if LWIP_MPU_COMPATIBLE
  err = netconn_apimsg(lwip_netconn_do_getaddr, &API_MSG_VAR_REF(msg));
  *addr = msg->msg.ad.ipaddr;
  *port = msg->msg.ad.port;
#else /* LWIP_MPU_COMPATIBLE */
  msg.msg.ad.ipaddr = addr;
  10b758:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10b75c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  msg.msg.ad.port = port;
  10b760:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  10b764:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  err = netconn_apimsg(lwip_netconn_do_getaddr, &msg);
  10b768:	e24b3020 	sub	r3, fp, #32
  10b76c:	e1a01003 	mov	r1, r3
  10b770:	e30f095c 	movw	r0, #63836	; 0xf95c
  10b774:	e3400010 	movt	r0, #16
  10b778:	ebffff2d 	bl	10b434 <netconn_apimsg>
  10b77c:	e1a03000 	mov	r3, r0
  10b780:	e54b3005 	strb	r3, [fp, #-5]
#endif /* LWIP_MPU_COMPATIBLE */
  API_MSG_VAR_FREE(msg);

  return err;
  10b784:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  10b788:	e1a00003 	mov	r0, r3
  10b78c:	e24bd004 	sub	sp, fp, #4
  10b790:	e8bd8800 	pop	{fp, pc}

0010b794 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
  10b794:	e92d4800 	push	{fp, lr}
  10b798:	e28db004 	add	fp, sp, #4
  10b79c:	e24dd030 	sub	sp, sp, #48	; 0x30
  10b7a0:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10b7a4:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  10b7a8:	e1a03002 	mov	r3, r2
  10b7ac:	e14b32be 	strh	r3, [fp, #-46]	; 0xffffffd2
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
  10b7b0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b7b4:	e3530000 	cmp	r3, #0
  10b7b8:	1a000008 	bne	10b7e0 <netconn_bind+0x4c>
  10b7bc:	e3060658 	movw	r0, #26200	; 0x6658
  10b7c0:	e3400014 	movt	r0, #20
  10b7c4:	ebffde52 	bl	103114 <rt_kprintf>
  10b7c8:	e3a010ff 	mov	r1, #255	; 0xff
  10b7cc:	e3060570 	movw	r0, #25968	; 0x6570
  10b7d0:	e3400014 	movt	r0, #20
  10b7d4:	ebfffe22 	bl	10b064 <sys_arch_assert>
  10b7d8:	e3e0300f 	mvn	r3, #15
  10b7dc:	ea000013 	b	10b830 <netconn_bind+0x9c>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
  10b7e0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10b7e4:	e3530000 	cmp	r3, #0
  10b7e8:	1a000002 	bne	10b7f8 <netconn_bind+0x64>
    addr = IP4_ADDR_ANY;
  10b7ec:	e3093adc 	movw	r3, #39644	; 0x9adc
  10b7f0:	e3403014 	movt	r3, #20
  10b7f4:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
  10b7f8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b7fc:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
  10b800:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10b804:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  API_MSG_VAR_REF(msg).msg.bc.port = port;
  10b808:	e15b32be 	ldrh	r3, [fp, #-46]	; 0xffffffd2
  10b80c:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
  10b810:	e24b3020 	sub	r3, fp, #32
  10b814:	e1a01003 	mov	r1, r3
  10b818:	e30e03e8 	movw	r0, #58344	; 0xe3e8
  10b81c:	e3400010 	movt	r0, #16
  10b820:	ebffff03 	bl	10b434 <netconn_apimsg>
  10b824:	e1a03000 	mov	r3, r0
  10b828:	e54b3005 	strb	r3, [fp, #-5]
  API_MSG_VAR_FREE(msg);

  return err;
  10b82c:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  10b830:	e1a00003 	mov	r0, r3
  10b834:	e24bd004 	sub	sp, fp, #4
  10b838:	e8bd8800 	pop	{fp, pc}

0010b83c <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
  10b83c:	e92d4800 	push	{fp, lr}
  10b840:	e28db004 	add	fp, sp, #4
  10b844:	e24dd030 	sub	sp, sp, #48	; 0x30
  10b848:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10b84c:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  10b850:	e1a03002 	mov	r3, r2
  10b854:	e14b32be 	strh	r3, [fp, #-46]	; 0xffffffd2
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
  10b858:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b85c:	e3530000 	cmp	r3, #0
  10b860:	1a000008 	bne	10b888 <netconn_connect+0x4c>
  10b864:	e3060674 	movw	r0, #26228	; 0x6674
  10b868:	e3400014 	movt	r0, #20
  10b86c:	ebffde28 	bl	103114 <rt_kprintf>
  10b870:	e300112b 	movw	r1, #299	; 0x12b
  10b874:	e3060570 	movw	r0, #25968	; 0x6570
  10b878:	e3400014 	movt	r0, #20
  10b87c:	ebfffdf8 	bl	10b064 <sys_arch_assert>
  10b880:	e3e0300f 	mvn	r3, #15
  10b884:	ea000013 	b	10b8d8 <netconn_connect+0x9c>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
  10b888:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10b88c:	e3530000 	cmp	r3, #0
  10b890:	1a000002 	bne	10b8a0 <netconn_connect+0x64>
    addr = IP4_ADDR_ANY;
  10b894:	e3093adc 	movw	r3, #39644	; 0x9adc
  10b898:	e3403014 	movt	r3, #20
  10b89c:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
  10b8a0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b8a4:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
  10b8a8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10b8ac:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  API_MSG_VAR_REF(msg).msg.bc.port = port;
  10b8b0:	e15b32be 	ldrh	r3, [fp, #-46]	; 0xffffffd2
  10b8b4:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
  10b8b8:	e24b3020 	sub	r3, fp, #32
  10b8bc:	e1a01003 	mov	r1, r3
  10b8c0:	e30e078c 	movw	r0, #59276	; 0xe78c
  10b8c4:	e3400010 	movt	r0, #16
  10b8c8:	ebfffed9 	bl	10b434 <netconn_apimsg>
  10b8cc:	e1a03000 	mov	r3, r0
  10b8d0:	e54b3005 	strb	r3, [fp, #-5]
  API_MSG_VAR_FREE(msg);

  return err;
  10b8d4:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  10b8d8:	e1a00003 	mov	r0, r3
  10b8dc:	e24bd004 	sub	sp, fp, #4
  10b8e0:	e8bd8800 	pop	{fp, pc}

0010b8e4 <netconn_disconnect>:
 * @param conn the netconn to disconnect
 * @return See @ref err_t
 */
err_t
netconn_disconnect(struct netconn *conn)
{
  10b8e4:	e92d4800 	push	{fp, lr}
  10b8e8:	e28db004 	add	fp, sp, #4
  10b8ec:	e24dd028 	sub	sp, sp, #40	; 0x28
  10b8f0:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_disconnect: invalid conn", (conn != NULL), return ERR_ARG;);
  10b8f4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b8f8:	e3530000 	cmp	r3, #0
  10b8fc:	1a000008 	bne	10b924 <netconn_disconnect+0x40>
  10b900:	e3060694 	movw	r0, #26260	; 0x6694
  10b904:	e3400014 	movt	r0, #20
  10b908:	ebffde01 	bl	103114 <rt_kprintf>
  10b90c:	e300114b 	movw	r1, #331	; 0x14b
  10b910:	e3060570 	movw	r0, #25968	; 0x6570
  10b914:	e3400014 	movt	r0, #20
  10b918:	ebfffdd1 	bl	10b064 <sys_arch_assert>
  10b91c:	e3e0300f 	mvn	r3, #15
  10b920:	ea000009 	b	10b94c <netconn_disconnect+0x68>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
  10b924:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b928:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  err = netconn_apimsg(lwip_netconn_do_disconnect, &API_MSG_VAR_REF(msg));
  10b92c:	e24b3020 	sub	r3, fp, #32
  10b930:	e1a01003 	mov	r1, r3
  10b934:	e30e0ac4 	movw	r0, #60100	; 0xeac4
  10b938:	e3400010 	movt	r0, #16
  10b93c:	ebfffebc 	bl	10b434 <netconn_apimsg>
  10b940:	e1a03000 	mov	r3, r0
  10b944:	e54b3005 	strb	r3, [fp, #-5]
  API_MSG_VAR_FREE(msg);

  return err;
  10b948:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  10b94c:	e1a00003 	mov	r0, r3
  10b950:	e24bd004 	sub	sp, fp, #4
  10b954:	e8bd8800 	pop	{fp, pc}

0010b958 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
  10b958:	e92d4800 	push	{fp, lr}
  10b95c:	e28db004 	add	fp, sp, #4
  10b960:	e24dd028 	sub	sp, sp, #40	; 0x28
  10b964:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10b968:	e1a03001 	mov	r3, r1
  10b96c:	e54b3029 	strb	r3, [fp, #-41]	; 0xffffffd7
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
  10b970:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b974:	e3530000 	cmp	r3, #0
  10b978:	1a000008 	bne	10b9a0 <netconn_listen_with_backlog+0x48>
  10b97c:	e30606b8 	movw	r0, #26296	; 0x66b8
  10b980:	e3400014 	movt	r0, #20
  10b984:	ebffdde2 	bl	103114 <rt_kprintf>
  10b988:	e3a01f5a 	mov	r1, #360	; 0x168
  10b98c:	e3060570 	movw	r0, #25968	; 0x6570
  10b990:	e3400014 	movt	r0, #20
  10b994:	ebfffdb2 	bl	10b064 <sys_arch_assert>
  10b998:	e3e0300f 	mvn	r3, #15
  10b99c:	ea000009 	b	10b9c8 <netconn_listen_with_backlog+0x70>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
  10b9a0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10b9a4:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
  10b9a8:	e24b3020 	sub	r3, fp, #32
  10b9ac:	e1a01003 	mov	r1, r3
  10b9b0:	e30e0b70 	movw	r0, #60272	; 0xeb70
  10b9b4:	e3400010 	movt	r0, #16
  10b9b8:	ebfffe9d 	bl	10b434 <netconn_apimsg>
  10b9bc:	e1a03000 	mov	r3, r0
  10b9c0:	e54b3005 	strb	r3, [fp, #-5]
  API_MSG_VAR_FREE(msg);

  return err;
  10b9c4:	e15b30d5 	ldrsb	r3, [fp, #-5]
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
  10b9c8:	e1a00003 	mov	r0, r3
  10b9cc:	e24bd004 	sub	sp, fp, #4
  10b9d0:	e8bd8800 	pop	{fp, pc}

0010b9d4 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
  10b9d4:	e92d4800 	push	{fp, lr}
  10b9d8:	e28db004 	add	fp, sp, #4
  10b9dc:	e24dd010 	sub	sp, sp, #16
  10b9e0:	e50b0010 	str	r0, [fp, #-16]
  10b9e4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
  10b9e8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10b9ec:	e3530000 	cmp	r3, #0
  10b9f0:	1a000008 	bne	10ba18 <netconn_accept+0x44>
  10b9f4:	e30606d8 	movw	r0, #26328	; 0x66d8
  10b9f8:	e3400014 	movt	r0, #20
  10b9fc:	ebffddc4 	bl	103114 <rt_kprintf>
  10ba00:	e300118d 	movw	r1, #397	; 0x18d
  10ba04:	e3060570 	movw	r0, #25968	; 0x6570
  10ba08:	e3400014 	movt	r0, #20
  10ba0c:	ebfffd94 	bl	10b064 <sys_arch_assert>
  10ba10:	e3e0300f 	mvn	r3, #15
  10ba14:	ea000053 	b	10bb68 <netconn_accept+0x194>
  *new_conn = NULL;
  10ba18:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10ba1c:	e3a02000 	mov	r2, #0
  10ba20:	e5832000 	str	r2, [r3]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
  10ba24:	e51b3010 	ldr	r3, [fp, #-16]
  10ba28:	e3530000 	cmp	r3, #0
  10ba2c:	1a000008 	bne	10ba54 <netconn_accept+0x80>
  10ba30:	e30606f8 	movw	r0, #26360	; 0x66f8
  10ba34:	e3400014 	movt	r0, #20
  10ba38:	ebffddb5 	bl	103114 <rt_kprintf>
  10ba3c:	e300118f 	movw	r1, #399	; 0x18f
  10ba40:	e3060570 	movw	r0, #25968	; 0x6570
  10ba44:	e3400014 	movt	r0, #20
  10ba48:	ebfffd85 	bl	10b064 <sys_arch_assert>
  10ba4c:	e3e0300f 	mvn	r3, #15
  10ba50:	ea000044 	b	10bb68 <netconn_accept+0x194>

  if (ERR_IS_FATAL(conn->last_err)) {
  10ba54:	e51b3010 	ldr	r3, [fp, #-16]
  10ba58:	e1d330dc 	ldrsb	r3, [r3, #12]
  10ba5c:	e373000c 	cmn	r3, #12
  10ba60:	aa000002 	bge	10ba70 <netconn_accept+0x9c>
    /* don't recv on fatal errors: this might block the application task
       waiting on acceptmbox forever! */
    return conn->last_err;
  10ba64:	e51b3010 	ldr	r3, [fp, #-16]
  10ba68:	e1d330dc 	ldrsb	r3, [r3, #12]
  10ba6c:	ea00003d 	b	10bb68 <netconn_accept+0x194>
  }
  if (!sys_mbox_valid(&conn->acceptmbox)) {
  10ba70:	e51b3010 	ldr	r3, [fp, #-16]
  10ba74:	e2833018 	add	r3, r3, #24
  10ba78:	e1a00003 	mov	r0, r3
  10ba7c:	ebfffd2f 	bl	10af40 <sys_mbox_valid>
  10ba80:	e1a03000 	mov	r3, r0
  10ba84:	e3530000 	cmp	r3, #0
  10ba88:	1a000001 	bne	10ba94 <netconn_accept+0xc0>
    return ERR_CLSD;
  10ba8c:	e3e0300e 	mvn	r3, #14
  10ba90:	ea000034 	b	10bb68 <netconn_accept+0x194>
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_ALLOC(msg);
#endif /* TCP_LISTEN_BACKLOG */

#if LWIP_SO_RCVTIMEO
  if (sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
  10ba94:	e51b3010 	ldr	r3, [fp, #-16]
  10ba98:	e2830018 	add	r0, r3, #24
  10ba9c:	e51b3010 	ldr	r3, [fp, #-16]
  10baa0:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  10baa4:	e1a02003 	mov	r2, r3
  10baa8:	e24b300c 	sub	r3, fp, #12
  10baac:	e1a01003 	mov	r1, r3
  10bab0:	ebfffcd1 	bl	10adfc <sys_arch_mbox_fetch>
  10bab4:	e1a03000 	mov	r3, r0
  10bab8:	e3730001 	cmn	r3, #1
  10babc:	1a000001 	bne	10bac8 <netconn_accept+0xf4>
#if TCP_LISTEN_BACKLOG
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_TIMEOUT;
  10bac0:	e3e03002 	mvn	r3, #2
  10bac4:	ea000027 	b	10bb68 <netconn_accept+0x194>
  }
#else
  sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
#endif /* LWIP_SO_RCVTIMEO*/
  newconn = (struct netconn *)accept_ptr;
  10bac8:	e51b300c 	ldr	r3, [fp, #-12]
  10bacc:	e50b3008 	str	r3, [fp, #-8]
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
  10bad0:	e51b3010 	ldr	r3, [fp, #-16]
  10bad4:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10bad8:	e3530000 	cmp	r3, #0
  10badc:	0a000005 	beq	10baf8 <netconn_accept+0x124>
  10bae0:	e51b3010 	ldr	r3, [fp, #-16]
  10bae4:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10bae8:	e3a02000 	mov	r2, #0
  10baec:	e3a01001 	mov	r1, #1
  10baf0:	e51b0010 	ldr	r0, [fp, #-16]
  10baf4:	e12fff33 	blx	r3

  if (accept_ptr == &netconn_aborted) {
  10baf8:	e51b200c 	ldr	r2, [fp, #-12]
  10bafc:	e300357c 	movw	r3, #1404	; 0x57c
  10bb00:	e3403015 	movt	r3, #21
  10bb04:	e1520003 	cmp	r2, r3
  10bb08:	1a000001 	bne	10bb14 <netconn_accept+0x140>
    /* a connection has been aborted: out of pcbs or out of netconns during accept */
    /* @todo: set netconn error, but this would be fatal and thus block further accepts */
#if TCP_LISTEN_BACKLOG
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_ABRT;
  10bb0c:	e3e0300c 	mvn	r3, #12
  10bb10:	ea000014 	b	10bb68 <netconn_accept+0x194>
  }
  if (newconn == NULL) {
  10bb14:	e51b3008 	ldr	r3, [fp, #-8]
  10bb18:	e3530000 	cmp	r3, #0
  10bb1c:	1a00000d 	bne	10bb58 <netconn_accept+0x184>
    /* connection has been aborted */
    /* in this special case, we set the netconn error from application thread, as
       on a ready-to-accept listening netconn, there should not be anything running
       in tcpip_thread */
    NETCONN_SET_SAFE_ERR(conn, ERR_CLSD);
  10bb20:	e51b3010 	ldr	r3, [fp, #-16]
  10bb24:	e3530000 	cmp	r3, #0
  10bb28:	0a000008 	beq	10bb50 <netconn_accept+0x17c>
  10bb2c:	ebffd9c2 	bl	10223c <rt_enter_critical>
  10bb30:	e51b3010 	ldr	r3, [fp, #-16]
  10bb34:	e1d330dc 	ldrsb	r3, [r3, #12]
  10bb38:	e373000c 	cmn	r3, #12
  10bb3c:	ba000002 	blt	10bb4c <netconn_accept+0x178>
  10bb40:	e51b3010 	ldr	r3, [fp, #-16]
  10bb44:	e3e0200e 	mvn	r2, #14
  10bb48:	e5c3200c 	strb	r2, [r3, #12]
  10bb4c:	ebffd9c0 	bl	102254 <rt_exit_critical>
#if TCP_LISTEN_BACKLOG
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_CLSD;
  10bb50:	e3e0300e 	mvn	r3, #14
  10bb54:	ea000003 	b	10bb68 <netconn_accept+0x194>
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
  10bb58:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10bb5c:	e51b2008 	ldr	r2, [fp, #-8]
  10bb60:	e5832000 	str	r2, [r3]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
  10bb64:	e3a03000 	mov	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
  10bb68:	e1a00003 	mov	r0, r3
  10bb6c:	e24bd004 	sub	sp, fp, #4
  10bb70:	e8bd8800 	pop	{fp, pc}

0010bb74 <netconn_recv_data>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf)
{
  10bb74:	e92d4800 	push	{fp, lr}
  10bb78:	e28db004 	add	fp, sp, #4
  10bb7c:	e24dd028 	sub	sp, sp, #40	; 0x28
  10bb80:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10bb84:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  void *buf = NULL;
  10bb88:	e3a03000 	mov	r3, #0
  10bb8c:	e50b300c 	str	r3, [fp, #-12]
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
  10bb90:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10bb94:	e3530000 	cmp	r3, #0
  10bb98:	1a000008 	bne	10bbc0 <netconn_recv_data+0x4c>
  10bb9c:	e3060718 	movw	r0, #26392	; 0x6718
  10bba0:	e3400014 	movt	r0, #20
  10bba4:	ebffdd5a 	bl	103114 <rt_kprintf>
  10bba8:	e30011e7 	movw	r1, #487	; 0x1e7
  10bbac:	e3060570 	movw	r0, #25968	; 0x6570
  10bbb0:	e3400014 	movt	r0, #20
  10bbb4:	ebfffd2a 	bl	10b064 <sys_arch_assert>
  10bbb8:	e3e0300f 	mvn	r3, #15
  10bbbc:	ea0000a5 	b	10be58 <netconn_recv_data+0x2e4>
  *new_buf = NULL;
  10bbc0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10bbc4:	e3a02000 	mov	r2, #0
  10bbc8:	e5832000 	str	r2, [r3]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
  10bbcc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bbd0:	e3530000 	cmp	r3, #0
  10bbd4:	1a000008 	bne	10bbfc <netconn_recv_data+0x88>
  10bbd8:	e3060738 	movw	r0, #26424	; 0x6738
  10bbdc:	e3400014 	movt	r0, #20
  10bbe0:	ebffdd4b 	bl	103114 <rt_kprintf>
  10bbe4:	e30011e9 	movw	r1, #489	; 0x1e9
  10bbe8:	e3060570 	movw	r0, #25968	; 0x6570
  10bbec:	e3400014 	movt	r0, #20
  10bbf0:	ebfffd1b 	bl	10b064 <sys_arch_assert>
  10bbf4:	e3e0300f 	mvn	r3, #15
  10bbf8:	ea000096 	b	10be58 <netconn_recv_data+0x2e4>
#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
  10bbfc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bc00:	e5933000 	ldr	r3, [r3]
  10bc04:	e20330f0 	and	r3, r3, #240	; 0xf0
  10bc08:	e3530010 	cmp	r3, #16
  10bc0c:	1a000011 	bne	10bc58 <netconn_recv_data+0xe4>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    if (!sys_mbox_valid(&conn->recvmbox)) {
  10bc10:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bc14:	e2833014 	add	r3, r3, #20
  10bc18:	e1a00003 	mov	r0, r3
  10bc1c:	ebfffcc7 	bl	10af40 <sys_mbox_valid>
  10bc20:	e1a03000 	mov	r3, r0
  10bc24:	e3530000 	cmp	r3, #0
  10bc28:	1a00000a 	bne	10bc58 <netconn_recv_data+0xe4>
      /* This happens when calling this function after receiving FIN */
      return sys_mbox_valid(&conn->acceptmbox) ? ERR_CONN : ERR_CLSD;
  10bc2c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bc30:	e2833018 	add	r3, r3, #24
  10bc34:	e1a00003 	mov	r0, r3
  10bc38:	ebfffcc0 	bl	10af40 <sys_mbox_valid>
  10bc3c:	e1a03000 	mov	r3, r0
  10bc40:	e3530000 	cmp	r3, #0
  10bc44:	0a000001 	beq	10bc50 <netconn_recv_data+0xdc>
  10bc48:	e3e0300a 	mvn	r3, #10
  10bc4c:	ea000081 	b	10be58 <netconn_recv_data+0x2e4>
  10bc50:	e3e0300e 	mvn	r3, #14
  10bc54:	ea00007f 	b	10be58 <netconn_recv_data+0x2e4>
    }
  }
#endif /* LWIP_TCP */
  LWIP_ERROR("netconn_recv: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
  10bc58:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bc5c:	e2833014 	add	r3, r3, #20
  10bc60:	e1a00003 	mov	r0, r3
  10bc64:	ebfffcb5 	bl	10af40 <sys_mbox_valid>
  10bc68:	e1a03000 	mov	r3, r0
  10bc6c:	e3530000 	cmp	r3, #0
  10bc70:	1a000008 	bne	10bc98 <netconn_recv_data+0x124>
  10bc74:	e3060754 	movw	r0, #26452	; 0x6754
  10bc78:	e3400014 	movt	r0, #20
  10bc7c:	ebffdd24 	bl	103114 <rt_kprintf>
  10bc80:	e30011f5 	movw	r1, #501	; 0x1f5
  10bc84:	e3060570 	movw	r0, #25968	; 0x6570
  10bc88:	e3400014 	movt	r0, #20
  10bc8c:	ebfffcf4 	bl	10b064 <sys_arch_assert>
  10bc90:	e3e0300a 	mvn	r3, #10
  10bc94:	ea00006f 	b	10be58 <netconn_recv_data+0x2e4>

  if (ERR_IS_FATAL(conn->last_err)) {
  10bc98:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bc9c:	e1d330dc 	ldrsb	r3, [r3, #12]
  10bca0:	e373000c 	cmn	r3, #12
  10bca4:	aa000002 	bge	10bcb4 <netconn_recv_data+0x140>
    /* don't recv on fatal errors: this might block the application task
       waiting on recvmbox forever! */
    /* @todo: this does not allow us to fetch data that has been put into recvmbox
       before the fatal error occurred - is that a problem? */
    return conn->last_err;
  10bca8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bcac:	e1d330dc 	ldrsb	r3, [r3, #12]
  10bcb0:	ea000068 	b	10be58 <netconn_recv_data+0x2e4>
    API_MSG_VAR_ALLOC(msg);
  }
#endif /* LWIP_TCP */

#if LWIP_SO_RCVTIMEO
  if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
  10bcb4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bcb8:	e2830014 	add	r0, r3, #20
  10bcbc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bcc0:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  10bcc4:	e1a02003 	mov	r2, r3
  10bcc8:	e24b300c 	sub	r3, fp, #12
  10bccc:	e1a01003 	mov	r1, r3
  10bcd0:	ebfffc49 	bl	10adfc <sys_arch_mbox_fetch>
  10bcd4:	e1a03000 	mov	r3, r0
  10bcd8:	e3730001 	cmn	r3, #1
  10bcdc:	1a000001 	bne	10bce8 <netconn_recv_data+0x174>
#endif /* (LWIP_UDP || LWIP_RAW) */
    {
      API_MSG_VAR_FREE(msg);
    }
#endif /* LWIP_TCP */
    return ERR_TIMEOUT;
  10bce0:	e3e03002 	mvn	r3, #2
  10bce4:	ea00005b 	b	10be58 <netconn_recv_data+0x2e4>
  sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
#endif /* LWIP_SO_RCVTIMEO*/

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
  10bce8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bcec:	e5933000 	ldr	r3, [r3]
  10bcf0:	e20330f0 	and	r3, r3, #240	; 0xf0
  10bcf4:	e3530010 	cmp	r3, #16
  10bcf8:	1a000032 	bne	10bdc8 <netconn_recv_data+0x254>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    /* Let the stack know that we have taken the data. */
    /* @todo: Speedup: Don't block and wait for the answer here
       (to prevent multiple thread-switches). */
    API_MSG_VAR_REF(msg).conn = conn;
  10bcfc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bd00:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    if (buf != NULL) {
  10bd04:	e51b300c 	ldr	r3, [fp, #-12]
  10bd08:	e3530000 	cmp	r3, #0
  10bd0c:	0a000003 	beq	10bd20 <netconn_recv_data+0x1ac>
      API_MSG_VAR_REF(msg).msg.r.len = ((struct pbuf *)buf)->tot_len;
  10bd10:	e51b300c 	ldr	r3, [fp, #-12]
  10bd14:	e1d330b8 	ldrh	r3, [r3, #8]
  10bd18:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  10bd1c:	ea000001 	b	10bd28 <netconn_recv_data+0x1b4>
    } else {
      API_MSG_VAR_REF(msg).msg.r.len = 1;
  10bd20:	e3a03001 	mov	r3, #1
  10bd24:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    }

    /* don't care for the return value of lwip_netconn_do_recv */
    netconn_apimsg(lwip_netconn_do_recv, &API_MSG_VAR_REF(msg));
  10bd28:	e24b3024 	sub	r3, fp, #36	; 0x24
  10bd2c:	e1a01003 	mov	r1, r3
  10bd30:	e30f001c 	movw	r0, #61468	; 0xf01c
  10bd34:	e3400010 	movt	r0, #16
  10bd38:	ebfffdbd 	bl	10b434 <netconn_apimsg>
    API_MSG_VAR_FREE(msg);

    /* If we are closed, we indicate that we no longer wish to use the socket */
    if (buf == NULL) {
  10bd3c:	e51b300c 	ldr	r3, [fp, #-12]
  10bd40:	e3530000 	cmp	r3, #0
  10bd44:	1a00001b 	bne	10bdb8 <netconn_recv_data+0x244>
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
  10bd48:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bd4c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10bd50:	e3530000 	cmp	r3, #0
  10bd54:	0a000005 	beq	10bd70 <netconn_recv_data+0x1fc>
  10bd58:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bd5c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10bd60:	e3a02000 	mov	r2, #0
  10bd64:	e3a01001 	mov	r1, #1
  10bd68:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  10bd6c:	e12fff33 	blx	r3
      if (conn->pcb.ip == NULL) {
  10bd70:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bd74:	e5933008 	ldr	r3, [r3, #8]
  10bd78:	e3530000 	cmp	r3, #0
  10bd7c:	1a000008 	bne	10bda4 <netconn_recv_data+0x230>
        /* race condition: RST during recv */
        return conn->last_err == ERR_OK ? ERR_RST : conn->last_err;
  10bd80:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bd84:	e1d330dc 	ldrsb	r3, [r3, #12]
  10bd88:	e3530000 	cmp	r3, #0
  10bd8c:	0a000002 	beq	10bd9c <netconn_recv_data+0x228>
  10bd90:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10bd94:	e1d330dc 	ldrsb	r3, [r3, #12]
  10bd98:	ea00002e 	b	10be58 <netconn_recv_data+0x2e4>
  10bd9c:	e3e0300d 	mvn	r3, #13
  10bda0:	ea00002c 	b	10be58 <netconn_recv_data+0x2e4>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
  10bda4:	e3a01001 	mov	r1, #1
  10bda8:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  10bdac:	eb00015a 	bl	10c31c <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
  10bdb0:	e3e0300e 	mvn	r3, #14
  10bdb4:	ea000027 	b	10be58 <netconn_recv_data+0x2e4>
    }
    len = ((struct pbuf *)buf)->tot_len;
  10bdb8:	e51b300c 	ldr	r3, [fp, #-12]
  10bdbc:	e1d330b8 	ldrh	r3, [r3, #8]
  10bdc0:	e14b30b6 	strh	r3, [fp, #-6]
  10bdc4:	ea00000d 	b	10be00 <netconn_recv_data+0x28c>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
  10bdc8:	e51b300c 	ldr	r3, [fp, #-12]
  10bdcc:	e3530000 	cmp	r3, #0
  10bdd0:	1a000006 	bne	10bdf0 <netconn_recv_data+0x27c>
  10bdd4:	e3060774 	movw	r0, #26484	; 0x6774
  10bdd8:	e3400014 	movt	r0, #20
  10bddc:	ebffdccc 	bl	103114 <rt_kprintf>
  10bde0:	e300123e 	movw	r1, #574	; 0x23e
  10bde4:	e3060570 	movw	r0, #25968	; 0x6570
  10bde8:	e3400014 	movt	r0, #20
  10bdec:	ebfffc9c 	bl	10b064 <sys_arch_assert>
    len = netbuf_len((struct netbuf*)buf);
  10bdf0:	e51b300c 	ldr	r3, [fp, #-12]
  10bdf4:	e5933000 	ldr	r3, [r3]
  10bdf8:	e1d330b8 	ldrh	r3, [r3, #8]
  10bdfc:	e14b30b6 	strh	r3, [fp, #-6]
  }
#endif /* (LWIP_UDP || LWIP_RAW) */

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
  10be00:	ebffd90d 	bl	10223c <rt_enter_critical>
  10be04:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10be08:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
  10be0c:	e15b30b6 	ldrh	r3, [fp, #-6]
  10be10:	e0422003 	sub	r2, r2, r3
  10be14:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10be18:	e583202c 	str	r2, [r3, #44]	; 0x2c
  10be1c:	ebffd90c 	bl	102254 <rt_exit_critical>
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
  10be20:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10be24:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10be28:	e3530000 	cmp	r3, #0
  10be2c:	0a000005 	beq	10be48 <netconn_recv_data+0x2d4>
  10be30:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10be34:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10be38:	e15b20b6 	ldrh	r2, [fp, #-6]
  10be3c:	e3a01001 	mov	r1, #1
  10be40:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  10be44:	e12fff33 	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
  10be48:	e51b200c 	ldr	r2, [fp, #-12]
  10be4c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10be50:	e5832000 	str	r2, [r3]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
  10be54:	e3a03000 	mov	r3, #0
}
  10be58:	e1a00003 	mov	r0, r3
  10be5c:	e24bd004 	sub	sp, fp, #4
  10be60:	e8bd8800 	pop	{fp, pc}

0010be64 <netconn_recv_tcp_pbuf>:
 *                memory error or another error)
 *         ERR_ARG if conn is not a TCP netconn
 */
err_t
netconn_recv_tcp_pbuf(struct netconn *conn, struct pbuf **new_buf)
{
  10be64:	e92d4800 	push	{fp, lr}
  10be68:	e28db004 	add	fp, sp, #4
  10be6c:	e24dd008 	sub	sp, sp, #8
  10be70:	e50b0008 	str	r0, [fp, #-8]
  10be74:	e50b100c 	str	r1, [fp, #-12]
  LWIP_ERROR("netconn_recv: invalid conn", (conn != NULL) &&
  10be78:	e51b3008 	ldr	r3, [fp, #-8]
  10be7c:	e3530000 	cmp	r3, #0
  10be80:	0a000004 	beq	10be98 <netconn_recv_tcp_pbuf+0x34>
  10be84:	e51b3008 	ldr	r3, [fp, #-8]
  10be88:	e5933000 	ldr	r3, [r3]
  10be8c:	e20330f0 	and	r3, r3, #240	; 0xf0
  10be90:	e3530010 	cmp	r3, #16
  10be94:	0a000008 	beq	10bebc <netconn_recv_tcp_pbuf+0x58>
  10be98:	e3060738 	movw	r0, #26424	; 0x6738
  10be9c:	e3400014 	movt	r0, #20
  10bea0:	ebffdc9b 	bl	103114 <rt_kprintf>
  10bea4:	e300125e 	movw	r1, #606	; 0x25e
  10bea8:	e3060570 	movw	r0, #25968	; 0x6570
  10beac:	e3400014 	movt	r0, #20
  10beb0:	ebfffc6b 	bl	10b064 <sys_arch_assert>
  10beb4:	e3e0300f 	mvn	r3, #15
  10beb8:	ea000003 	b	10becc <netconn_recv_tcp_pbuf+0x68>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data(conn, (void **)new_buf);
  10bebc:	e51b100c 	ldr	r1, [fp, #-12]
  10bec0:	e51b0008 	ldr	r0, [fp, #-8]
  10bec4:	ebffff2a 	bl	10bb74 <netconn_recv_data>
  10bec8:	e1a03000 	mov	r3, r0
}
  10becc:	e1a00003 	mov	r0, r3
  10bed0:	e24bd004 	sub	sp, fp, #4
  10bed4:	e8bd8800 	pop	{fp, pc}

0010bed8 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
  10bed8:	e92d4800 	push	{fp, lr}
  10bedc:	e28db004 	add	fp, sp, #4
  10bee0:	e24dd018 	sub	sp, sp, #24
  10bee4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10bee8:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
#if LWIP_TCP
  struct netbuf *buf = NULL;
  10beec:	e3a03000 	mov	r3, #0
  10bef0:	e50b3008 	str	r3, [fp, #-8]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
  10bef4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10bef8:	e3530000 	cmp	r3, #0
  10befc:	1a000008 	bne	10bf24 <netconn_recv+0x4c>
  10bf00:	e3060718 	movw	r0, #26392	; 0x6718
  10bf04:	e3400014 	movt	r0, #20
  10bf08:	ebffdc81 	bl	103114 <rt_kprintf>
  10bf0c:	e3a01f9d 	mov	r1, #628	; 0x274
  10bf10:	e3060570 	movw	r0, #25968	; 0x6570
  10bf14:	e3400014 	movt	r0, #20
  10bf18:	ebfffc51 	bl	10b064 <sys_arch_assert>
  10bf1c:	e3e0300f 	mvn	r3, #15
  10bf20:	ea00004d 	b	10c05c <netconn_recv+0x184>
  *new_buf = NULL;
  10bf24:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10bf28:	e3a02000 	mov	r2, #0
  10bf2c:	e5832000 	str	r2, [r3]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
  10bf30:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10bf34:	e3530000 	cmp	r3, #0
  10bf38:	1a000008 	bne	10bf60 <netconn_recv+0x88>
  10bf3c:	e3060738 	movw	r0, #26424	; 0x6738
  10bf40:	e3400014 	movt	r0, #20
  10bf44:	ebffdc72 	bl	103114 <rt_kprintf>
  10bf48:	e3001276 	movw	r1, #630	; 0x276
  10bf4c:	e3060570 	movw	r0, #25968	; 0x6570
  10bf50:	e3400014 	movt	r0, #20
  10bf54:	ebfffc42 	bl	10b064 <sys_arch_assert>
  10bf58:	e3e0300f 	mvn	r3, #15
  10bf5c:	ea00003e 	b	10c05c <netconn_recv+0x184>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
  10bf60:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10bf64:	e5933000 	ldr	r3, [r3]
  10bf68:	e20330f0 	and	r3, r3, #240	; 0xf0
  10bf6c:	e3530010 	cmp	r3, #16
  10bf70:	1a000035 	bne	10c04c <netconn_recv+0x174>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
  10bf74:	e3a03000 	mov	r3, #0
  10bf78:	e50b3010 	str	r3, [fp, #-16]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
  10bf7c:	e3a02d0a 	mov	r2, #640	; 0x280
  10bf80:	e3061570 	movw	r1, #25968	; 0x6570
  10bf84:	e3401014 	movt	r1, #20
  10bf88:	e3a00007 	mov	r0, #7
  10bf8c:	eb0034cc 	bl	1192c4 <memp_malloc_fn>
  10bf90:	e50b0008 	str	r0, [fp, #-8]
    if (buf == NULL) {
  10bf94:	e51b3008 	ldr	r3, [fp, #-8]
  10bf98:	e3530000 	cmp	r3, #0
  10bf9c:	1a000001 	bne	10bfa8 <netconn_recv+0xd0>
      return ERR_MEM;
  10bfa0:	e3e03000 	mvn	r3, #0
  10bfa4:	ea00002c 	b	10c05c <netconn_recv+0x184>
    }

    err = netconn_recv_data(conn, (void **)&p);
  10bfa8:	e24b3010 	sub	r3, fp, #16
  10bfac:	e1a01003 	mov	r1, r3
  10bfb0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  10bfb4:	ebfffeee 	bl	10bb74 <netconn_recv_data>
  10bfb8:	e1a03000 	mov	r3, r0
  10bfbc:	e54b3009 	strb	r3, [fp, #-9]
    if (err != ERR_OK) {
  10bfc0:	e15b30d9 	ldrsb	r3, [fp, #-9]
  10bfc4:	e3530000 	cmp	r3, #0
  10bfc8:	0a000004 	beq	10bfe0 <netconn_recv+0x108>
      memp_free(MEMP_NETBUF, buf);
  10bfcc:	e51b1008 	ldr	r1, [fp, #-8]
  10bfd0:	e3a00007 	mov	r0, #7
  10bfd4:	eb003522 	bl	119464 <memp_free>
      return err;
  10bfd8:	e15b30d9 	ldrsb	r3, [fp, #-9]
  10bfdc:	ea00001e 	b	10c05c <netconn_recv+0x184>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
  10bfe0:	e51b3010 	ldr	r3, [fp, #-16]
  10bfe4:	e3530000 	cmp	r3, #0
  10bfe8:	1a000006 	bne	10c008 <netconn_recv+0x130>
  10bfec:	e3060780 	movw	r0, #26496	; 0x6780
  10bff0:	e3400014 	movt	r0, #20
  10bff4:	ebffdc46 	bl	103114 <rt_kprintf>
  10bff8:	e300128a 	movw	r1, #650	; 0x28a
  10bffc:	e3060570 	movw	r0, #25968	; 0x6570
  10c000:	e3400014 	movt	r0, #20
  10c004:	ebfffc16 	bl	10b064 <sys_arch_assert>

    buf->p = p;
  10c008:	e51b2010 	ldr	r2, [fp, #-16]
  10c00c:	e51b3008 	ldr	r3, [fp, #-8]
  10c010:	e5832000 	str	r2, [r3]
    buf->ptr = p;
  10c014:	e51b2010 	ldr	r2, [fp, #-16]
  10c018:	e51b3008 	ldr	r3, [fp, #-8]
  10c01c:	e5832004 	str	r2, [r3, #4]
    buf->port = 0;
  10c020:	e51b3008 	ldr	r3, [fp, #-8]
  10c024:	e3a02000 	mov	r2, #0
  10c028:	e1c320bc 	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
  10c02c:	e51b3008 	ldr	r3, [fp, #-8]
  10c030:	e3a02000 	mov	r2, #0
  10c034:	e5832008 	str	r2, [r3, #8]
    *new_buf = buf;
  10c038:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10c03c:	e51b2008 	ldr	r2, [fp, #-8]
  10c040:	e5832000 	str	r2, [r3]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
  10c044:	e3a03000 	mov	r3, #0
  10c048:	ea000003 	b	10c05c <netconn_recv+0x184>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf);
  10c04c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  10c050:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  10c054:	ebfffec6 	bl	10bb74 <netconn_recv_data>
  10c058:	e1a03000 	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
  10c05c:	e1a00003 	mov	r0, r3
  10c060:	e24bd004 	sub	sp, fp, #4
  10c064:	e8bd8800 	pop	{fp, pc}

0010c068 <netconn_sendto>:
 * @param port the remote port to which to send the data
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_sendto(struct netconn *conn, struct netbuf *buf, const ip_addr_t *addr, u16_t port)
{
  10c068:	e92d4800 	push	{fp, lr}
  10c06c:	e28db004 	add	fp, sp, #4
  10c070:	e24dd010 	sub	sp, sp, #16
  10c074:	e50b0008 	str	r0, [fp, #-8]
  10c078:	e50b100c 	str	r1, [fp, #-12]
  10c07c:	e50b2010 	str	r2, [fp, #-16]
  10c080:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  if (buf != NULL) {
  10c084:	e51b300c 	ldr	r3, [fp, #-12]
  10c088:	e3530000 	cmp	r3, #0
  10c08c:	0a000010 	beq	10c0d4 <netconn_sendto+0x6c>
    ip_addr_set(&buf->addr, addr);
  10c090:	e51b3010 	ldr	r3, [fp, #-16]
  10c094:	e3530000 	cmp	r3, #0
  10c098:	0a000002 	beq	10c0a8 <netconn_sendto+0x40>
  10c09c:	e51b3010 	ldr	r3, [fp, #-16]
  10c0a0:	e5933000 	ldr	r3, [r3]
  10c0a4:	ea000000 	b	10c0ac <netconn_sendto+0x44>
  10c0a8:	e3a03000 	mov	r3, #0
  10c0ac:	e51b200c 	ldr	r2, [fp, #-12]
  10c0b0:	e5823008 	str	r3, [r2, #8]
    buf->port = port;
  10c0b4:	e51b300c 	ldr	r3, [fp, #-12]
  10c0b8:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
  10c0bc:	e1c320bc 	strh	r2, [r3, #12]
    return netconn_send(conn, buf);
  10c0c0:	e51b100c 	ldr	r1, [fp, #-12]
  10c0c4:	e51b0008 	ldr	r0, [fp, #-8]
  10c0c8:	eb000005 	bl	10c0e4 <netconn_send>
  10c0cc:	e1a03000 	mov	r3, r0
  10c0d0:	ea000000 	b	10c0d8 <netconn_sendto+0x70>
  }
  return ERR_VAL;
  10c0d4:	e3e03005 	mvn	r3, #5
}
  10c0d8:	e1a00003 	mov	r0, r3
  10c0dc:	e24bd004 	sub	sp, fp, #4
  10c0e0:	e8bd8800 	pop	{fp, pc}

0010c0e4 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
  10c0e4:	e92d4800 	push	{fp, lr}
  10c0e8:	e28db004 	add	fp, sp, #4
  10c0ec:	e24dd028 	sub	sp, sp, #40	; 0x28
  10c0f0:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10c0f4:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
  10c0f8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10c0fc:	e3530000 	cmp	r3, #0
  10c100:	1a000008 	bne	10c128 <netconn_send+0x44>
  10c104:	e306078c 	movw	r0, #26508	; 0x678c
  10c108:	e3400014 	movt	r0, #20
  10c10c:	ebffdc00 	bl	103114 <rt_kprintf>
  10c110:	e30012c3 	movw	r1, #707	; 0x2c3
  10c114:	e3060570 	movw	r0, #25968	; 0x6570
  10c118:	e3400014 	movt	r0, #20
  10c11c:	ebfffbd0 	bl	10b064 <sys_arch_assert>
  10c120:	e3e0300f 	mvn	r3, #15
  10c124:	ea00000b 	b	10c158 <netconn_send+0x74>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
  10c128:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10c12c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  API_MSG_VAR_REF(msg).msg.b = buf;
  10c130:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10c134:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
  10c138:	e24b3020 	sub	r3, fp, #32
  10c13c:	e1a01003 	mov	r1, r3
  10c140:	e30e0e10 	movw	r0, #60944	; 0xee10
  10c144:	e3400010 	movt	r0, #16
  10c148:	ebfffcb9 	bl	10b434 <netconn_apimsg>
  10c14c:	e1a03000 	mov	r3, r0
  10c150:	e54b3005 	strb	r3, [fp, #-5]
  API_MSG_VAR_FREE(msg);

  return err;
  10c154:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  10c158:	e1a00003 	mov	r0, r3
  10c15c:	e24bd004 	sub	sp, fp, #4
  10c160:	e8bd8800 	pop	{fp, pc}

0010c164 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
  10c164:	e92d4800 	push	{fp, lr}
  10c168:	e28db004 	add	fp, sp, #4
  10c16c:	e24dd030 	sub	sp, sp, #48	; 0x30
  10c170:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10c174:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  10c178:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
  10c17c:	e54b3031 	strb	r3, [fp, #-49]	; 0xffffffcf
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  u8_t dontblock;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
  10c180:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10c184:	e3530000 	cmp	r3, #0
  10c188:	1a000008 	bne	10c1b0 <netconn_write_partly+0x4c>
  10c18c:	e30607a8 	movw	r0, #26536	; 0x67a8
  10c190:	e3400014 	movt	r0, #20
  10c194:	ebffdbde 	bl	103114 <rt_kprintf>
  10c198:	e30012e6 	movw	r1, #742	; 0x2e6
  10c19c:	e3060570 	movw	r0, #25968	; 0x6570
  10c1a0:	e3400014 	movt	r0, #20
  10c1a4:	ebfffbae 	bl	10b064 <sys_arch_assert>
  10c1a8:	e3e0300f 	mvn	r3, #15
  10c1ac:	ea000057 	b	10c310 <netconn_write_partly+0x1ac>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type)== NETCONN_TCP), return ERR_VAL;);
  10c1b0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10c1b4:	e5933000 	ldr	r3, [r3]
  10c1b8:	e20330f0 	and	r3, r3, #240	; 0xf0
  10c1bc:	e3530010 	cmp	r3, #16
  10c1c0:	0a000008 	beq	10c1e8 <netconn_write_partly+0x84>
  10c1c4:	e30607c4 	movw	r0, #26564	; 0x67c4
  10c1c8:	e3400014 	movt	r0, #20
  10c1cc:	ebffdbd0 	bl	103114 <rt_kprintf>
  10c1d0:	e30012e7 	movw	r1, #743	; 0x2e7
  10c1d4:	e3060570 	movw	r0, #25968	; 0x6570
  10c1d8:	e3400014 	movt	r0, #20
  10c1dc:	ebfffba0 	bl	10b064 <sys_arch_assert>
  10c1e0:	e3e03005 	mvn	r3, #5
  10c1e4:	ea000049 	b	10c310 <netconn_write_partly+0x1ac>
  if (size == 0) {
  10c1e8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  10c1ec:	e3530000 	cmp	r3, #0
  10c1f0:	1a000001 	bne	10c1fc <netconn_write_partly+0x98>
    return ERR_OK;
  10c1f4:	e3a03000 	mov	r3, #0
  10c1f8:	ea000044 	b	10c310 <netconn_write_partly+0x1ac>
  }
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
  10c1fc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10c200:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10c204:	e2033002 	and	r3, r3, #2
  10c208:	e3530000 	cmp	r3, #0
  10c20c:	1a000003 	bne	10c220 <netconn_write_partly+0xbc>
  10c210:	e55b3031 	ldrb	r3, [fp, #-49]	; 0xffffffcf
  10c214:	e2033004 	and	r3, r3, #4
  10c218:	e3530000 	cmp	r3, #0
  10c21c:	0a000001 	beq	10c228 <netconn_write_partly+0xc4>
  10c220:	e3a03001 	mov	r3, #1
  10c224:	ea000000 	b	10c22c <netconn_write_partly+0xc8>
  10c228:	e3a03000 	mov	r3, #0
  10c22c:	e54b3005 	strb	r3, [fp, #-5]
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
  10c230:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10c234:	e5933020 	ldr	r3, [r3, #32]
  10c238:	e3530000 	cmp	r3, #0
  10c23c:	0a000001 	beq	10c248 <netconn_write_partly+0xe4>
    dontblock = 1;
  10c240:	e3a03001 	mov	r3, #1
  10c244:	e54b3005 	strb	r3, [fp, #-5]
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
  10c248:	e55b3005 	ldrb	r3, [fp, #-5]
  10c24c:	e3530000 	cmp	r3, #0
  10c250:	0a000004 	beq	10c268 <netconn_write_partly+0x104>
  10c254:	e59b3004 	ldr	r3, [fp, #4]
  10c258:	e3530000 	cmp	r3, #0
  10c25c:	1a000001 	bne	10c268 <netconn_write_partly+0x104>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
  10c260:	e3e03005 	mvn	r3, #5
  10c264:	ea000029 	b	10c310 <netconn_write_partly+0x1ac>
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
  10c268:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10c26c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  API_MSG_VAR_REF(msg).msg.w.dataptr = dataptr;
  10c270:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10c274:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
  10c278:	e55b3031 	ldrb	r3, [fp, #-49]	; 0xffffffcf
  10c27c:	e54b3010 	strb	r3, [fp, #-16]
  API_MSG_VAR_REF(msg).msg.w.len = size;
  10c280:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  10c284:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
  10c288:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10c28c:	e5933020 	ldr	r3, [r3, #32]
  10c290:	e3530000 	cmp	r3, #0
  10c294:	0a000003 	beq	10c2a8 <netconn_write_partly+0x144>
    /* get the time we started, which is later compared to
        sys_now() + conn->send_timeout */
    API_MSG_VAR_REF(msg).msg.w.time_started = sys_now();
  10c298:	ebfffb8a 	bl	10b0c8 <sys_now>
  10c29c:	e1a03000 	mov	r3, r0
  10c2a0:	e50b300c 	str	r3, [fp, #-12]
  10c2a4:	ea000001 	b	10c2b0 <netconn_write_partly+0x14c>
  } else {
    API_MSG_VAR_REF(msg).msg.w.time_started = 0;
  10c2a8:	e3a03000 	mov	r3, #0
  10c2ac:	e50b300c 	str	r3, [fp, #-12]
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
  10c2b0:	e24b3020 	sub	r3, fp, #32
  10c2b4:	e1a01003 	mov	r1, r3
  10c2b8:	e30f0708 	movw	r0, #63240	; 0xf708
  10c2bc:	e3400010 	movt	r0, #16
  10c2c0:	ebfffc5b 	bl	10b434 <netconn_apimsg>
  10c2c4:	e1a03000 	mov	r3, r0
  10c2c8:	e54b3006 	strb	r3, [fp, #-6]
  if ((err == ERR_OK) && (bytes_written != NULL)) {
  10c2cc:	e15b30d6 	ldrsb	r3, [fp, #-6]
  10c2d0:	e3530000 	cmp	r3, #0
  10c2d4:	1a00000c 	bne	10c30c <netconn_write_partly+0x1a8>
  10c2d8:	e59b3004 	ldr	r3, [fp, #4]
  10c2dc:	e3530000 	cmp	r3, #0
  10c2e0:	0a000009 	beq	10c30c <netconn_write_partly+0x1a8>
    if (dontblock) {
  10c2e4:	e55b3005 	ldrb	r3, [fp, #-5]
  10c2e8:	e3530000 	cmp	r3, #0
  10c2ec:	0a000003 	beq	10c300 <netconn_write_partly+0x19c>
      /* nonblocking write: maybe the data has been sent partly */
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.len;
  10c2f0:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  10c2f4:	e59b3004 	ldr	r3, [fp, #4]
  10c2f8:	e5832000 	str	r2, [r3]
  10c2fc:	ea000002 	b	10c30c <netconn_write_partly+0x1a8>
    } else {
      /* blocking call succeeded: all data has been sent if it */
      *bytes_written = size;
  10c300:	e59b3004 	ldr	r3, [fp, #4]
  10c304:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  10c308:	e5832000 	str	r2, [r3]
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
  10c30c:	e15b30d6 	ldrsb	r3, [fp, #-6]
}
  10c310:	e1a00003 	mov	r0, r3
  10c314:	e24bd004 	sub	sp, fp, #4
  10c318:	e8bd8800 	pop	{fp, pc}

0010c31c <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
  10c31c:	e92d4800 	push	{fp, lr}
  10c320:	e28db004 	add	fp, sp, #4
  10c324:	e24dd028 	sub	sp, sp, #40	; 0x28
  10c328:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10c32c:	e1a03001 	mov	r3, r1
  10c330:	e54b3029 	strb	r3, [fp, #-41]	; 0xffffffd7
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
  10c334:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10c338:	e3530000 	cmp	r3, #0
  10c33c:	1a000008 	bne	10c364 <netconn_close_shutdown+0x48>
  10c340:	e30607e8 	movw	r0, #26600	; 0x67e8
  10c344:	e3400014 	movt	r0, #20
  10c348:	ebffdb71 	bl	103114 <rt_kprintf>
  10c34c:	e3a01fca 	mov	r1, #808	; 0x328
  10c350:	e3060570 	movw	r0, #25968	; 0x6570
  10c354:	e3400014 	movt	r0, #20
  10c358:	ebfffb41 	bl	10b064 <sys_arch_assert>
  10c35c:	e3e0300f 	mvn	r3, #15
  10c360:	ea00000e 	b	10c3a0 <netconn_close_shutdown+0x84>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
  10c364:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10c368:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
  10c36c:	e55b3029 	ldrb	r3, [fp, #-41]	; 0xffffffd7
  10c370:	e54b3018 	strb	r3, [fp, #-24]	; 0xffffffe8
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
  10c374:	ebfffb53 	bl	10b0c8 <sys_now>
  10c378:	e1a03000 	mov	r3, r0
  10c37c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
  10c380:	e24b3020 	sub	r3, fp, #32
  10c384:	e1a01003 	mov	r1, r3
  10c388:	e30f0bdc 	movw	r0, #64476	; 0xfbdc
  10c38c:	e3400010 	movt	r0, #16
  10c390:	ebfffc27 	bl	10b434 <netconn_apimsg>
  10c394:	e1a03000 	mov	r3, r0
  10c398:	e54b3005 	strb	r3, [fp, #-5]
  API_MSG_VAR_FREE(msg);

  return err;
  10c39c:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  10c3a0:	e1a00003 	mov	r0, r3
  10c3a4:	e24bd004 	sub	sp, fp, #4
  10c3a8:	e8bd8800 	pop	{fp, pc}

0010c3ac <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
  10c3ac:	e92d4800 	push	{fp, lr}
  10c3b0:	e28db004 	add	fp, sp, #4
  10c3b4:	e24dd008 	sub	sp, sp, #8
  10c3b8:	e50b0008 	str	r0, [fp, #-8]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
  10c3bc:	e3a01003 	mov	r1, #3
  10c3c0:	e51b0008 	ldr	r0, [fp, #-8]
  10c3c4:	ebffffd4 	bl	10c31c <netconn_close_shutdown>
  10c3c8:	e1a03000 	mov	r3, r0
}
  10c3cc:	e1a00003 	mov	r0, r3
  10c3d0:	e24bd004 	sub	sp, fp, #4
  10c3d4:	e8bd8800 	pop	{fp, pc}

0010c3d8 <netconn_shutdown>:
 * @param shut_tx shut down the TX side (no more write possible after this)
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_shutdown(struct netconn *conn, u8_t shut_rx, u8_t shut_tx)
{
  10c3d8:	e92d4800 	push	{fp, lr}
  10c3dc:	e28db004 	add	fp, sp, #4
  10c3e0:	e24dd008 	sub	sp, sp, #8
  10c3e4:	e50b0008 	str	r0, [fp, #-8]
  10c3e8:	e1a03001 	mov	r3, r1
  10c3ec:	e54b3009 	strb	r3, [fp, #-9]
  10c3f0:	e1a03002 	mov	r3, r2
  10c3f4:	e54b300a 	strb	r3, [fp, #-10]
  return netconn_close_shutdown(conn, (shut_rx ? NETCONN_SHUT_RD : 0) | (shut_tx ? NETCONN_SHUT_WR : 0));
  10c3f8:	e55b3009 	ldrb	r3, [fp, #-9]
  10c3fc:	e3530000 	cmp	r3, #0
  10c400:	13a03001 	movne	r3, #1
  10c404:	03a03000 	moveq	r3, #0
  10c408:	e6ef3073 	uxtb	r3, r3
  10c40c:	e6af3073 	sxtb	r3, r3
  10c410:	e55b200a 	ldrb	r2, [fp, #-10]
  10c414:	e3520000 	cmp	r2, #0
  10c418:	0a000001 	beq	10c424 <netconn_shutdown+0x4c>
  10c41c:	e3a02002 	mov	r2, #2
  10c420:	ea000000 	b	10c428 <netconn_shutdown+0x50>
  10c424:	e3a02000 	mov	r2, #0
  10c428:	e1823003 	orr	r3, r2, r3
  10c42c:	e6af3073 	sxtb	r3, r3
  10c430:	e6ef3073 	uxtb	r3, r3
  10c434:	e1a01003 	mov	r1, r3
  10c438:	e51b0008 	ldr	r0, [fp, #-8]
  10c43c:	ebffffb6 	bl	10c31c <netconn_close_shutdown>
  10c440:	e1a03000 	mov	r3, r0
}
  10c444:	e1a00003 	mov	r0, r3
  10c448:	e24bd004 	sub	sp, fp, #4
  10c44c:	e8bd8800 	pop	{fp, pc}

0010c450 <netconn_join_leave_group>:
err_t
netconn_join_leave_group(struct netconn *conn,
                         const ip_addr_t *multiaddr,
                         const ip_addr_t *netif_addr,
                         enum netconn_igmp join_or_leave)
{
  10c450:	e92d4800 	push	{fp, lr}
  10c454:	e28db004 	add	fp, sp, #4
  10c458:	e24dd030 	sub	sp, sp, #48	; 0x30
  10c45c:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10c460:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  10c464:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
  10c468:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_join_leave_group: invalid conn",  (conn != NULL), return ERR_ARG;);
  10c46c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10c470:	e3530000 	cmp	r3, #0
  10c474:	1a000008 	bne	10c49c <netconn_join_leave_group+0x4c>
  10c478:	e3060804 	movw	r0, #26628	; 0x6804
  10c47c:	e3400014 	movt	r0, #20
  10c480:	ebffdb23 	bl	103114 <rt_kprintf>
  10c484:	e3a01e37 	mov	r1, #880	; 0x370
  10c488:	e3060570 	movw	r0, #25968	; 0x6570
  10c48c:	e3400014 	movt	r0, #20
  10c490:	ebfffaf3 	bl	10b064 <sys_arch_assert>
  10c494:	e3e0300f 	mvn	r3, #15
  10c498:	ea00001b 	b	10c50c <netconn_join_leave_group+0xbc>

  API_MSG_VAR_ALLOC(msg);

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (multiaddr == NULL) {
  10c49c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10c4a0:	e3530000 	cmp	r3, #0
  10c4a4:	1a000002 	bne	10c4b4 <netconn_join_leave_group+0x64>
    multiaddr = IP4_ADDR_ANY;
  10c4a8:	e3093adc 	movw	r3, #39644	; 0x9adc
  10c4ac:	e3403014 	movt	r3, #20
  10c4b0:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
  }
  if (netif_addr == NULL) {
  10c4b4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  10c4b8:	e3530000 	cmp	r3, #0
  10c4bc:	1a000002 	bne	10c4cc <netconn_join_leave_group+0x7c>
    netif_addr = IP4_ADDR_ANY;
  10c4c0:	e3093adc 	movw	r3, #39644	; 0x9adc
  10c4c4:	e3403014 	movt	r3, #20
  10c4c8:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_REF(msg).conn = conn;
  10c4cc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10c4d0:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  API_MSG_VAR_REF(msg).msg.jl.multiaddr = API_MSG_VAR_REF(multiaddr);
  10c4d4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10c4d8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  API_MSG_VAR_REF(msg).msg.jl.netif_addr = API_MSG_VAR_REF(netif_addr);
  10c4dc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  10c4e0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  API_MSG_VAR_REF(msg).msg.jl.join_or_leave = join_or_leave;
  10c4e4:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  10c4e8:	e50b3010 	str	r3, [fp, #-16]
  err = netconn_apimsg(lwip_netconn_do_join_leave_group, &API_MSG_VAR_REF(msg));
  10c4ec:	e24b3020 	sub	r3, fp, #32
  10c4f0:	e1a01003 	mov	r1, r3
  10c4f4:	e30f0e1c 	movw	r0, #65052	; 0xfe1c
  10c4f8:	e3400010 	movt	r0, #16
  10c4fc:	ebfffbcc 	bl	10b434 <netconn_apimsg>
  10c500:	e1a03000 	mov	r3, r0
  10c504:	e54b3005 	strb	r3, [fp, #-5]
  API_MSG_VAR_FREE(msg);

  return err;
  10c508:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  10c50c:	e1a00003 	mov	r0, r3
  10c510:	e24bd004 	sub	sp, fp, #4
  10c514:	e8bd8800 	pop	{fp, pc}

0010c518 <netconn_gethostbyname>:
netconn_gethostbyname_addrtype(const char *name, ip_addr_t *addr, u8_t dns_addrtype)
#else
err_t
netconn_gethostbyname(const char *name, ip_addr_t *addr)
#endif
{
  10c518:	e92d4800 	push	{fp, lr}
  10c51c:	e28db004 	add	fp, sp, #4
  10c520:	e24dd028 	sub	sp, sp, #40	; 0x28
  10c524:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  10c528:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  sys_sem_t sem;
#endif /* LWIP_MPU_COMPATIBLE */
  err_t err;
  err_t cberr;

  LWIP_ERROR("netconn_gethostbyname: invalid name", (name != NULL), return ERR_ARG;);
  10c52c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10c530:	e3530000 	cmp	r3, #0
  10c534:	1a000008 	bne	10c55c <netconn_gethostbyname+0x44>
  10c538:	e306082c 	movw	r0, #26668	; 0x682c
  10c53c:	e3400014 	movt	r0, #20
  10c540:	ebffdaf3 	bl	103114 <rt_kprintf>
  10c544:	e30013a5 	movw	r1, #933	; 0x3a5
  10c548:	e3060570 	movw	r0, #25968	; 0x6570
  10c54c:	e3400014 	movt	r0, #20
  10c550:	ebfffac3 	bl	10b064 <sys_arch_assert>
  10c554:	e3e0300f 	mvn	r3, #15
  10c558:	ea000036 	b	10c638 <netconn_gethostbyname+0x120>
  LWIP_ERROR("netconn_gethostbyname: invalid addr", (addr != NULL), return ERR_ARG;);
  10c55c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10c560:	e3530000 	cmp	r3, #0
  10c564:	1a000008 	bne	10c58c <netconn_gethostbyname+0x74>
  10c568:	e3060850 	movw	r0, #26704	; 0x6850
  10c56c:	e3400014 	movt	r0, #20
  10c570:	ebffdae7 	bl	103114 <rt_kprintf>
  10c574:	e30013a6 	movw	r1, #934	; 0x3a6
  10c578:	e3060570 	movw	r0, #25968	; 0x6570
  10c57c:	e3400014 	movt	r0, #20
  10c580:	ebfffab7 	bl	10b064 <sys_arch_assert>
  10c584:	e3e0300f 	mvn	r3, #15
  10c588:	ea00002a 	b	10c638 <netconn_gethostbyname+0x120>
  API_VAR_ALLOC(struct dns_api_msg, MEMP_DNS_API_MSG, msg, ERR_MEM);
#if LWIP_MPU_COMPATIBLE
  strncpy(API_VAR_REF(msg).name, name, DNS_MAX_NAME_LENGTH-1);
  API_VAR_REF(msg).name[DNS_MAX_NAME_LENGTH-1] = 0;
#else /* LWIP_MPU_COMPATIBLE */
  msg.err = &err;
  10c58c:	e24b301d 	sub	r3, fp, #29
  10c590:	e50b300c 	str	r3, [fp, #-12]
  msg.sem = &sem;
  10c594:	e24b301c 	sub	r3, fp, #28
  10c598:	e50b3010 	str	r3, [fp, #-16]
  API_VAR_REF(msg).addr = API_VAR_REF(addr);
  10c59c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  10c5a0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  API_VAR_REF(msg).name = name;
  10c5a4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10c5a8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  API_VAR_REF(msg).dns_addrtype = dns_addrtype;
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_NETCONN_SEM_PER_THREAD
  API_VAR_REF(msg).sem = LWIP_NETCONN_THREAD_SEM_GET();
#else /* LWIP_NETCONN_SEM_PER_THREAD*/
  err = sys_sem_new(API_EXPR_REF(API_VAR_REF(msg).sem), 0);
  10c5ac:	e51b3010 	ldr	r3, [fp, #-16]
  10c5b0:	e3a01000 	mov	r1, #0
  10c5b4:	e1a00003 	mov	r0, r3
  10c5b8:	ebfff817 	bl	10a61c <sys_sem_new>
  10c5bc:	e1a03000 	mov	r3, r0
  10c5c0:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
  if (err != ERR_OK) {
  10c5c4:	e15b31dd 	ldrsb	r3, [fp, #-29]	; 0xffffffe3
  10c5c8:	e3530000 	cmp	r3, #0
  10c5cc:	0a000001 	beq	10c5d8 <netconn_gethostbyname+0xc0>
    API_VAR_FREE(MEMP_DNS_API_MSG, msg);
    return err;
  10c5d0:	e15b31dd 	ldrsb	r3, [fp, #-29]	; 0xffffffe3
  10c5d4:	ea000017 	b	10c638 <netconn_gethostbyname+0x120>
  }
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  cberr = tcpip_callback(lwip_netconn_do_gethostbyname, &API_VAR_REF(msg));
  10c5d8:	e24b3018 	sub	r3, fp, #24
  10c5dc:	e3a02001 	mov	r2, #1
  10c5e0:	e1a01003 	mov	r1, r3
  10c5e4:	e30f0fe4 	movw	r0, #65508	; 0xffe4
  10c5e8:	e3400010 	movt	r0, #16
  10c5ec:	eb002772 	bl	1163bc <tcpip_callback_with_block>
  10c5f0:	e1a03000 	mov	r3, r0
  10c5f4:	e54b3005 	strb	r3, [fp, #-5]
  if (cberr != ERR_OK) {
  10c5f8:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10c5fc:	e3530000 	cmp	r3, #0
  10c600:	0a000004 	beq	10c618 <netconn_gethostbyname+0x100>
#if !LWIP_NETCONN_SEM_PER_THREAD
    sys_sem_free(API_EXPR_REF(API_VAR_REF(msg).sem));
  10c604:	e51b3010 	ldr	r3, [fp, #-16]
  10c608:	e1a00003 	mov	r0, r3
  10c60c:	ebfff82d 	bl	10a6c8 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
    API_VAR_FREE(MEMP_DNS_API_MSG, msg);
    return cberr;
  10c610:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10c614:	ea000007 	b	10c638 <netconn_gethostbyname+0x120>
  }
  sys_sem_wait(API_EXPR_REF_SEM(API_VAR_REF(msg).sem));
  10c618:	e51b3010 	ldr	r3, [fp, #-16]
  10c61c:	e3a01000 	mov	r1, #0
  10c620:	e1a00003 	mov	r0, r3
  10c624:	ebfff83d 	bl	10a720 <sys_arch_sem_wait>
#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(API_EXPR_REF(API_VAR_REF(msg).sem));
  10c628:	e51b3010 	ldr	r3, [fp, #-16]
  10c62c:	e1a00003 	mov	r0, r3
  10c630:	ebfff824 	bl	10a6c8 <sys_sem_free>
  *addr = msg->addr;
  err = msg->err;
#endif /* LWIP_MPU_COMPATIBLE */

  API_VAR_FREE(MEMP_DNS_API_MSG, msg);
  return err;
  10c634:	e15b31dd 	ldrsb	r3, [fp, #-29]	; 0xffffffe3
}
  10c638:	e1a00003 	mov	r0, r3
  10c63c:	e24bd004 	sub	sp, fp, #4
  10c640:	e8bd8800 	pop	{fp, pc}

0010c644 <recv_raw>:
 * @see raw.h (struct raw_pcb.recv) for parameters and return value
 */
static u8_t
recv_raw(void *arg, struct raw_pcb *pcb, struct pbuf *p,
    const ip_addr_t *addr)
{
  10c644:	e92d4800 	push	{fp, lr}
  10c648:	e28db004 	add	fp, sp, #4
  10c64c:	e24dd028 	sub	sp, sp, #40	; 0x28
  10c650:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  10c654:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  10c658:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  10c65c:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
  struct pbuf *q;
  struct netbuf *buf;
  struct netconn *conn;

  LWIP_UNUSED_ARG(addr);
  conn = (struct netconn *)arg;
  10c660:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10c664:	e50b300c 	str	r3, [fp, #-12]

  if ((conn != NULL) && sys_mbox_valid(&conn->recvmbox)) {
  10c668:	e51b300c 	ldr	r3, [fp, #-12]
  10c66c:	e3530000 	cmp	r3, #0
  10c670:	0a00006b 	beq	10c824 <recv_raw+0x1e0>
  10c674:	e51b300c 	ldr	r3, [fp, #-12]
  10c678:	e2833014 	add	r3, r3, #20
  10c67c:	e1a00003 	mov	r0, r3
  10c680:	ebfffa2e 	bl	10af40 <sys_mbox_valid>
  10c684:	e1a03000 	mov	r3, r0
  10c688:	e3530000 	cmp	r3, #0
  10c68c:	0a000064 	beq	10c824 <recv_raw+0x1e0>
#if LWIP_SO_RCVBUF
    int recv_avail;
    SYS_ARCH_GET(conn->recv_avail, recv_avail);
  10c690:	ebffd6e9 	bl	10223c <rt_enter_critical>
  10c694:	e51b300c 	ldr	r3, [fp, #-12]
  10c698:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  10c69c:	e50b3010 	str	r3, [fp, #-16]
  10c6a0:	ebffd6eb 	bl	102254 <rt_exit_critical>
    if ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize) {
  10c6a4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10c6a8:	e1d330b8 	ldrh	r3, [r3, #8]
  10c6ac:	e1a02003 	mov	r2, r3
  10c6b0:	e51b3010 	ldr	r3, [fp, #-16]
  10c6b4:	e0822003 	add	r2, r2, r3
  10c6b8:	e51b300c 	ldr	r3, [fp, #-12]
  10c6bc:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  10c6c0:	e1520003 	cmp	r2, r3
  10c6c4:	da000001 	ble	10c6d0 <recv_raw+0x8c>
      return 0;
  10c6c8:	e3a03000 	mov	r3, #0
  10c6cc:	ea000055 	b	10c828 <recv_raw+0x1e4>
    }
#endif /* LWIP_SO_RCVBUF */
    /* copy the whole packet into new pbufs */
    q = pbuf_alloc(PBUF_RAW, p->tot_len, PBUF_RAM);
  10c6d0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  10c6d4:	e1d330b8 	ldrh	r3, [r3, #8]
  10c6d8:	e3a02000 	mov	r2, #0
  10c6dc:	e1a01003 	mov	r1, r3
  10c6e0:	e3a00004 	mov	r0, #4
  10c6e4:	eb003765 	bl	11a480 <pbuf_alloc>
  10c6e8:	e50b0008 	str	r0, [fp, #-8]
    if (q != NULL) {
  10c6ec:	e51b3008 	ldr	r3, [fp, #-8]
  10c6f0:	e3530000 	cmp	r3, #0
  10c6f4:	0a000009 	beq	10c720 <recv_raw+0xdc>
      if (pbuf_copy(q, p) != ERR_OK) {
  10c6f8:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
  10c6fc:	e51b0008 	ldr	r0, [fp, #-8]
  10c700:	eb003bba 	bl	11b5f0 <pbuf_copy>
  10c704:	e1a03000 	mov	r3, r0
  10c708:	e3530000 	cmp	r3, #0
  10c70c:	0a000003 	beq	10c720 <recv_raw+0xdc>
        pbuf_free(q);
  10c710:	e51b0008 	ldr	r0, [fp, #-8]
  10c714:	eb003a60 	bl	11b09c <pbuf_free>
        q = NULL;
  10c718:	e3a03000 	mov	r3, #0
  10c71c:	e50b3008 	str	r3, [fp, #-8]
      }
    }

    if (q != NULL) {
  10c720:	e51b3008 	ldr	r3, [fp, #-8]
  10c724:	e3530000 	cmp	r3, #0
  10c728:	0a00003d 	beq	10c824 <recv_raw+0x1e0>
      u16_t len;
      buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
  10c72c:	e3a02081 	mov	r2, #129	; 0x81
  10c730:	e3061874 	movw	r1, #26740	; 0x6874
  10c734:	e3401014 	movt	r1, #20
  10c738:	e3a00007 	mov	r0, #7
  10c73c:	eb0032e0 	bl	1192c4 <memp_malloc_fn>
  10c740:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
      if (buf == NULL) {
  10c744:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10c748:	e3530000 	cmp	r3, #0
  10c74c:	1a000003 	bne	10c760 <recv_raw+0x11c>
        pbuf_free(q);
  10c750:	e51b0008 	ldr	r0, [fp, #-8]
  10c754:	eb003a50 	bl	11b09c <pbuf_free>
        return 0;
  10c758:	e3a03000 	mov	r3, #0
  10c75c:	ea000031 	b	10c828 <recv_raw+0x1e4>
      }

      buf->p = q;
  10c760:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10c764:	e51b2008 	ldr	r2, [fp, #-8]
  10c768:	e5832000 	str	r2, [r3]
      buf->ptr = q;
  10c76c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10c770:	e51b2008 	ldr	r2, [fp, #-8]
  10c774:	e5832004 	str	r2, [r3, #4]
      ip_addr_copy(buf->addr, *ip_current_src_addr());
  10c778:	e30035e8 	movw	r3, #1512	; 0x5e8
  10c77c:	e3403015 	movt	r3, #21
  10c780:	e5932010 	ldr	r2, [r3, #16]
  10c784:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10c788:	e5832008 	str	r2, [r3, #8]
      buf->port = pcb->protocol;
  10c78c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  10c790:	e5d33010 	ldrb	r3, [r3, #16]
  10c794:	e6ff2073 	uxth	r2, r3
  10c798:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10c79c:	e1c320bc 	strh	r2, [r3, #12]

      len = q->tot_len;
  10c7a0:	e51b3008 	ldr	r3, [fp, #-8]
  10c7a4:	e1d330b8 	ldrh	r3, [r3, #8]
  10c7a8:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
      if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
  10c7ac:	e51b300c 	ldr	r3, [fp, #-12]
  10c7b0:	e2833014 	add	r3, r3, #20
  10c7b4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  10c7b8:	e1a00003 	mov	r0, r3
  10c7bc:	ebfff981 	bl	10adc8 <sys_mbox_trypost>
  10c7c0:	e1a03000 	mov	r3, r0
  10c7c4:	e3530000 	cmp	r3, #0
  10c7c8:	0a000003 	beq	10c7dc <recv_raw+0x198>
        netbuf_delete(buf);
  10c7cc:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  10c7d0:	eb000e50 	bl	110118 <netbuf_delete>
        return 0;
  10c7d4:	e3a03000 	mov	r3, #0
  10c7d8:	ea000012 	b	10c828 <recv_raw+0x1e4>
      } else {
#if LWIP_SO_RCVBUF
        SYS_ARCH_INC(conn->recv_avail, len);
  10c7dc:	ebffd696 	bl	10223c <rt_enter_critical>
  10c7e0:	e51b300c 	ldr	r3, [fp, #-12]
  10c7e4:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
  10c7e8:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  10c7ec:	e0822003 	add	r2, r2, r3
  10c7f0:	e51b300c 	ldr	r3, [fp, #-12]
  10c7f4:	e583202c 	str	r2, [r3, #44]	; 0x2c
  10c7f8:	ebffd695 	bl	102254 <rt_exit_critical>
#endif /* LWIP_SO_RCVBUF */
        /* Register event with callback */
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
  10c7fc:	e51b300c 	ldr	r3, [fp, #-12]
  10c800:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10c804:	e3530000 	cmp	r3, #0
  10c808:	0a000005 	beq	10c824 <recv_raw+0x1e0>
  10c80c:	e51b300c 	ldr	r3, [fp, #-12]
  10c810:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10c814:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  10c818:	e3a01000 	mov	r1, #0
  10c81c:	e51b000c 	ldr	r0, [fp, #-12]
  10c820:	e12fff33 	blx	r3
      }
    }
  }

  return 0; /* do not eat the packet */
  10c824:	e3a03000 	mov	r3, #0
}
  10c828:	e1a00003 	mov	r0, r3
  10c82c:	e24bd004 	sub	sp, fp, #4
  10c830:	e8bd8800 	pop	{fp, pc}

0010c834 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
   const ip_addr_t *addr, u16_t port)
{
  10c834:	e92d4800 	push	{fp, lr}
  10c838:	e28db004 	add	fp, sp, #4
  10c83c:	e24dd020 	sub	sp, sp, #32
  10c840:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10c844:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  10c848:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  10c84c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
  10c850:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10c854:	e3530000 	cmp	r3, #0
  10c858:	1a000006 	bne	10c878 <recv_udp+0x44>
  10c85c:	e30608a4 	movw	r0, #26788	; 0x68a4
  10c860:	e3400014 	movt	r0, #20
  10c864:	ebffda2a 	bl	103114 <rt_kprintf>
  10c868:	e3a010b1 	mov	r1, #177	; 0xb1
  10c86c:	e3060874 	movw	r0, #26740	; 0x6874
  10c870:	e3400014 	movt	r0, #20
  10c874:	ebfff9fa 	bl	10b064 <sys_arch_assert>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
  10c878:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10c87c:	e3530000 	cmp	r3, #0
  10c880:	1a000006 	bne	10c8a0 <recv_udp+0x6c>
  10c884:	e30608c8 	movw	r0, #26824	; 0x68c8
  10c888:	e3400014 	movt	r0, #20
  10c88c:	ebffda20 	bl	103114 <rt_kprintf>
  10c890:	e3a010b2 	mov	r1, #178	; 0xb2
  10c894:	e3060874 	movw	r0, #26740	; 0x6874
  10c898:	e3400014 	movt	r0, #20
  10c89c:	ebfff9f0 	bl	10b064 <sys_arch_assert>
  conn = (struct netconn *)arg;
  10c8a0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10c8a4:	e50b3008 	str	r3, [fp, #-8]
  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
  10c8a8:	e51b3008 	ldr	r3, [fp, #-8]
  10c8ac:	e5933008 	ldr	r3, [r3, #8]
  10c8b0:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  10c8b4:	e1520003 	cmp	r2, r3
  10c8b8:	0a000006 	beq	10c8d8 <recv_udp+0xa4>
  10c8bc:	e30608e8 	movw	r0, #26856	; 0x68e8
  10c8c0:	e3400014 	movt	r0, #20
  10c8c4:	ebffda12 	bl	103114 <rt_kprintf>
  10c8c8:	e3a010b4 	mov	r1, #180	; 0xb4
  10c8cc:	e3060874 	movw	r0, #26740	; 0x6874
  10c8d0:	e3400014 	movt	r0, #20
  10c8d4:	ebfff9e2 	bl	10b064 <sys_arch_assert>

#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  10c8d8:	ebffd657 	bl	10223c <rt_enter_critical>
  10c8dc:	e51b3008 	ldr	r3, [fp, #-8]
  10c8e0:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  10c8e4:	e50b300c 	str	r3, [fp, #-12]
  10c8e8:	ebffd659 	bl	102254 <rt_exit_critical>
  if ((conn == NULL) || !sys_mbox_valid(&conn->recvmbox) ||
  10c8ec:	e51b3008 	ldr	r3, [fp, #-8]
  10c8f0:	e3530000 	cmp	r3, #0
  10c8f4:	0a00000f 	beq	10c938 <recv_udp+0x104>
  10c8f8:	e51b3008 	ldr	r3, [fp, #-8]
  10c8fc:	e2833014 	add	r3, r3, #20
  10c900:	e1a00003 	mov	r0, r3
  10c904:	ebfff98d 	bl	10af40 <sys_mbox_valid>
  10c908:	e1a03000 	mov	r3, r0
  10c90c:	e3530000 	cmp	r3, #0
  10c910:	0a000008 	beq	10c938 <recv_udp+0x104>
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
  10c914:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10c918:	e1d330b8 	ldrh	r3, [r3, #8]
  10c91c:	e1a02003 	mov	r2, r3
  10c920:	e51b300c 	ldr	r3, [fp, #-12]
  10c924:	e0822003 	add	r2, r2, r3
  10c928:	e51b3008 	ldr	r3, [fp, #-8]
  10c92c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  if ((conn == NULL) || !sys_mbox_valid(&conn->recvmbox) ||
  10c930:	e1520003 	cmp	r2, r3
  10c934:	da000002 	ble	10c944 <recv_udp+0x110>
#else  /* LWIP_SO_RCVBUF */
  if ((conn == NULL) || !sys_mbox_valid(&conn->recvmbox)) {
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
  10c938:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  10c93c:	eb0039d6 	bl	11b09c <pbuf_free>
    return;
  10c940:	ea00003d 	b	10ca3c <recv_udp+0x208>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
  10c944:	e3a020c1 	mov	r2, #193	; 0xc1
  10c948:	e3061874 	movw	r1, #26740	; 0x6874
  10c94c:	e3401014 	movt	r1, #20
  10c950:	e3a00007 	mov	r0, #7
  10c954:	eb00325a 	bl	1192c4 <memp_malloc_fn>
  10c958:	e50b0010 	str	r0, [fp, #-16]
  if (buf == NULL) {
  10c95c:	e51b3010 	ldr	r3, [fp, #-16]
  10c960:	e3530000 	cmp	r3, #0
  10c964:	1a000002 	bne	10c974 <recv_udp+0x140>
    pbuf_free(p);
  10c968:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  10c96c:	eb0039ca 	bl	11b09c <pbuf_free>
    return;
  10c970:	ea000031 	b	10ca3c <recv_udp+0x208>
  } else {
    buf->p = p;
  10c974:	e51b3010 	ldr	r3, [fp, #-16]
  10c978:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  10c97c:	e5832000 	str	r2, [r3]
    buf->ptr = p;
  10c980:	e51b3010 	ldr	r3, [fp, #-16]
  10c984:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  10c988:	e5832004 	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
  10c98c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  10c990:	e3530000 	cmp	r3, #0
  10c994:	0a000002 	beq	10c9a4 <recv_udp+0x170>
  10c998:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  10c99c:	e5933000 	ldr	r3, [r3]
  10c9a0:	ea000000 	b	10c9a8 <recv_udp+0x174>
  10c9a4:	e3a03000 	mov	r3, #0
  10c9a8:	e51b2010 	ldr	r2, [fp, #-16]
  10c9ac:	e5823008 	str	r3, [r2, #8]
    buf->port = port;
  10c9b0:	e51b3010 	ldr	r3, [fp, #-16]
  10c9b4:	e1db20b4 	ldrh	r2, [fp, #4]
  10c9b8:	e1c320bc 	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
  10c9bc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10c9c0:	e1d330b8 	ldrh	r3, [r3, #8]
  10c9c4:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
  10c9c8:	e51b3008 	ldr	r3, [fp, #-8]
  10c9cc:	e2833014 	add	r3, r3, #20
  10c9d0:	e51b1010 	ldr	r1, [fp, #-16]
  10c9d4:	e1a00003 	mov	r0, r3
  10c9d8:	ebfff8fa 	bl	10adc8 <sys_mbox_trypost>
  10c9dc:	e1a03000 	mov	r3, r0
  10c9e0:	e3530000 	cmp	r3, #0
  10c9e4:	0a000002 	beq	10c9f4 <recv_udp+0x1c0>
    netbuf_delete(buf);
  10c9e8:	e51b0010 	ldr	r0, [fp, #-16]
  10c9ec:	eb000dc9 	bl	110118 <netbuf_delete>
    return;
  10c9f0:	ea000011 	b	10ca3c <recv_udp+0x208>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
  10c9f4:	ebffd610 	bl	10223c <rt_enter_critical>
  10c9f8:	e51b3008 	ldr	r3, [fp, #-8]
  10c9fc:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
  10ca00:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  10ca04:	e0822003 	add	r2, r2, r3
  10ca08:	e51b3008 	ldr	r3, [fp, #-8]
  10ca0c:	e583202c 	str	r2, [r3, #44]	; 0x2c
  10ca10:	ebffd60f 	bl	102254 <rt_exit_critical>
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
  10ca14:	e51b3008 	ldr	r3, [fp, #-8]
  10ca18:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10ca1c:	e3530000 	cmp	r3, #0
  10ca20:	0a000005 	beq	10ca3c <recv_udp+0x208>
  10ca24:	e51b3008 	ldr	r3, [fp, #-8]
  10ca28:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10ca2c:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
  10ca30:	e3a01000 	mov	r1, #0
  10ca34:	e51b0008 	ldr	r0, [fp, #-8]
  10ca38:	e12fff33 	blx	r3
  }
}
  10ca3c:	e24bd004 	sub	sp, fp, #4
  10ca40:	e8bd8800 	pop	{fp, pc}

0010ca44 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
  10ca44:	e92d4800 	push	{fp, lr}
  10ca48:	e28db004 	add	fp, sp, #4
  10ca4c:	e24dd018 	sub	sp, sp, #24
  10ca50:	e50b0010 	str	r0, [fp, #-16]
  10ca54:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10ca58:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  10ca5c:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
  struct netconn *conn;
  u16_t len;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
  10ca60:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10ca64:	e3530000 	cmp	r3, #0
  10ca68:	1a000006 	bne	10ca88 <recv_tcp+0x44>
  10ca6c:	e3060908 	movw	r0, #26888	; 0x6908
  10ca70:	e3400014 	movt	r0, #20
  10ca74:	ebffd9a6 	bl	103114 <rt_kprintf>
  10ca78:	e3a010f3 	mov	r1, #243	; 0xf3
  10ca7c:	e3060874 	movw	r0, #26740	; 0x6874
  10ca80:	e3400014 	movt	r0, #20
  10ca84:	ebfff976 	bl	10b064 <sys_arch_assert>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
  10ca88:	e51b3010 	ldr	r3, [fp, #-16]
  10ca8c:	e3530000 	cmp	r3, #0
  10ca90:	1a000006 	bne	10cab0 <recv_tcp+0x6c>
  10ca94:	e306092c 	movw	r0, #26924	; 0x692c
  10ca98:	e3400014 	movt	r0, #20
  10ca9c:	ebffd99c 	bl	103114 <rt_kprintf>
  10caa0:	e3a010f4 	mov	r1, #244	; 0xf4
  10caa4:	e3060874 	movw	r0, #26740	; 0x6874
  10caa8:	e3400014 	movt	r0, #20
  10caac:	ebfff96c 	bl	10b064 <sys_arch_assert>
  conn = (struct netconn *)arg;
  10cab0:	e51b3010 	ldr	r3, [fp, #-16]
  10cab4:	e50b300c 	str	r3, [fp, #-12]

  if (conn == NULL) {
  10cab8:	e51b300c 	ldr	r3, [fp, #-12]
  10cabc:	e3530000 	cmp	r3, #0
  10cac0:	1a000001 	bne	10cacc <recv_tcp+0x88>
    return ERR_VAL;
  10cac4:	e3e03005 	mvn	r3, #5
  10cac8:	ea000053 	b	10cc1c <recv_tcp+0x1d8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
  10cacc:	e51b300c 	ldr	r3, [fp, #-12]
  10cad0:	e5933008 	ldr	r3, [r3, #8]
  10cad4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  10cad8:	e1520003 	cmp	r2, r3
  10cadc:	0a000006 	beq	10cafc <recv_tcp+0xb8>
  10cae0:	e306094c 	movw	r0, #26956	; 0x694c
  10cae4:	e3400014 	movt	r0, #20
  10cae8:	ebffd989 	bl	103114 <rt_kprintf>
  10caec:	e3a010fa 	mov	r1, #250	; 0xfa
  10caf0:	e3060874 	movw	r0, #26740	; 0x6874
  10caf4:	e3400014 	movt	r0, #20
  10caf8:	ebfff959 	bl	10b064 <sys_arch_assert>

  if (!sys_mbox_valid(&conn->recvmbox)) {
  10cafc:	e51b300c 	ldr	r3, [fp, #-12]
  10cb00:	e2833014 	add	r3, r3, #20
  10cb04:	e1a00003 	mov	r0, r3
  10cb08:	ebfff90c 	bl	10af40 <sys_mbox_valid>
  10cb0c:	e1a03000 	mov	r3, r0
  10cb10:	e3530000 	cmp	r3, #0
  10cb14:	1a00000b 	bne	10cb48 <recv_tcp+0x104>
    /* recvmbox already deleted */
    if (p != NULL) {
  10cb18:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10cb1c:	e3530000 	cmp	r3, #0
  10cb20:	0a000006 	beq	10cb40 <recv_tcp+0xfc>
      tcp_recved(pcb, p->tot_len);
  10cb24:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10cb28:	e1d330b8 	ldrh	r3, [r3, #8]
  10cb2c:	e1a01003 	mov	r1, r3
  10cb30:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  10cb34:	eb0045e4 	bl	11e2cc <tcp_recved>
      pbuf_free(p);
  10cb38:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  10cb3c:	eb003956 	bl	11b09c <pbuf_free>
    }
    return ERR_OK;
  10cb40:	e3a03000 	mov	r3, #0
  10cb44:	ea000034 	b	10cc1c <recv_tcp+0x1d8>
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  /* don't overwrite fatal errors! */
  if (err != ERR_OK) {
  10cb48:	e15b31d9 	ldrsb	r3, [fp, #-25]	; 0xffffffe7
  10cb4c:	e3530000 	cmp	r3, #0
  10cb50:	0a00000b 	beq	10cb84 <recv_tcp+0x140>
    NETCONN_SET_SAFE_ERR(conn, err);
  10cb54:	e51b300c 	ldr	r3, [fp, #-12]
  10cb58:	e3530000 	cmp	r3, #0
  10cb5c:	0a000008 	beq	10cb84 <recv_tcp+0x140>
  10cb60:	ebffd5b5 	bl	10223c <rt_enter_critical>
  10cb64:	e51b300c 	ldr	r3, [fp, #-12]
  10cb68:	e1d330dc 	ldrsb	r3, [r3, #12]
  10cb6c:	e373000c 	cmn	r3, #12
  10cb70:	ba000002 	blt	10cb80 <recv_tcp+0x13c>
  10cb74:	e51b300c 	ldr	r3, [fp, #-12]
  10cb78:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
  10cb7c:	e5c3200c 	strb	r2, [r3, #12]
  10cb80:	ebffd5b3 	bl	102254 <rt_exit_critical>
  }

  if (p != NULL) {
  10cb84:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10cb88:	e3530000 	cmp	r3, #0
  10cb8c:	0a000003 	beq	10cba0 <recv_tcp+0x15c>
    len = p->tot_len;
  10cb90:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10cb94:	e1d330b8 	ldrh	r3, [r3, #8]
  10cb98:	e14b30b6 	strh	r3, [fp, #-6]
  10cb9c:	ea000001 	b	10cba8 <recv_tcp+0x164>
  } else {
    len = 0;
  10cba0:	e3a03000 	mov	r3, #0
  10cba4:	e14b30b6 	strh	r3, [fp, #-6]
  }

  if (sys_mbox_trypost(&conn->recvmbox, p) != ERR_OK) {
  10cba8:	e51b300c 	ldr	r3, [fp, #-12]
  10cbac:	e2833014 	add	r3, r3, #20
  10cbb0:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  10cbb4:	e1a00003 	mov	r0, r3
  10cbb8:	ebfff882 	bl	10adc8 <sys_mbox_trypost>
  10cbbc:	e1a03000 	mov	r3, r0
  10cbc0:	e3530000 	cmp	r3, #0
  10cbc4:	0a000001 	beq	10cbd0 <recv_tcp+0x18c>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
  10cbc8:	e3e03000 	mvn	r3, #0
  10cbcc:	ea000012 	b	10cc1c <recv_tcp+0x1d8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
  10cbd0:	ebffd599 	bl	10223c <rt_enter_critical>
  10cbd4:	e51b300c 	ldr	r3, [fp, #-12]
  10cbd8:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
  10cbdc:	e15b30b6 	ldrh	r3, [fp, #-6]
  10cbe0:	e0822003 	add	r2, r2, r3
  10cbe4:	e51b300c 	ldr	r3, [fp, #-12]
  10cbe8:	e583202c 	str	r2, [r3, #44]	; 0x2c
  10cbec:	ebffd598 	bl	102254 <rt_exit_critical>
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
  10cbf0:	e51b300c 	ldr	r3, [fp, #-12]
  10cbf4:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10cbf8:	e3530000 	cmp	r3, #0
  10cbfc:	0a000005 	beq	10cc18 <recv_tcp+0x1d4>
  10cc00:	e51b300c 	ldr	r3, [fp, #-12]
  10cc04:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10cc08:	e15b20b6 	ldrh	r2, [fp, #-6]
  10cc0c:	e3a01000 	mov	r1, #0
  10cc10:	e51b000c 	ldr	r0, [fp, #-12]
  10cc14:	e12fff33 	blx	r3
  }

  return ERR_OK;
  10cc18:	e3a03000 	mov	r3, #0
}
  10cc1c:	e1a00003 	mov	r0, r3
  10cc20:	e24bd004 	sub	sp, fp, #4
  10cc24:	e8bd8800 	pop	{fp, pc}

0010cc28 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
  10cc28:	e92d4800 	push	{fp, lr}
  10cc2c:	e28db004 	add	fp, sp, #4
  10cc30:	e24dd010 	sub	sp, sp, #16
  10cc34:	e50b0010 	str	r0, [fp, #-16]
  10cc38:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct netconn *conn = (struct netconn *)arg;
  10cc3c:	e51b3010 	ldr	r3, [fp, #-16]
  10cc40:	e50b3008 	str	r3, [fp, #-8]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
  10cc44:	e51b3008 	ldr	r3, [fp, #-8]
  10cc48:	e3530000 	cmp	r3, #0
  10cc4c:	1a000006 	bne	10cc6c <poll_tcp+0x44>
  10cc50:	e306096c 	movw	r0, #26988	; 0x696c
  10cc54:	e3400014 	movt	r0, #20
  10cc58:	ebffd92d 	bl	103114 <rt_kprintf>
  10cc5c:	e3001132 	movw	r1, #306	; 0x132
  10cc60:	e3060874 	movw	r0, #26740	; 0x6874
  10cc64:	e3400014 	movt	r0, #20
  10cc68:	ebfff8fd 	bl	10b064 <sys_arch_assert>

  if (conn->state == NETCONN_WRITE) {
  10cc6c:	e51b3008 	ldr	r3, [fp, #-8]
  10cc70:	e5933004 	ldr	r3, [r3, #4]
  10cc74:	e3530001 	cmp	r3, #1
  10cc78:	1a000003 	bne	10cc8c <poll_tcp+0x64>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
  10cc7c:	e3a01001 	mov	r1, #1
  10cc80:	e51b0008 	ldr	r0, [fp, #-8]
  10cc84:	eb000924 	bl	10f11c <lwip_netconn_do_writemore>
  10cc88:	ea000006 	b	10cca8 <poll_tcp+0x80>
  } else if (conn->state == NETCONN_CLOSE) {
  10cc8c:	e51b3008 	ldr	r3, [fp, #-8]
  10cc90:	e5933004 	ldr	r3, [r3, #4]
  10cc94:	e3530004 	cmp	r3, #4
  10cc98:	1a000002 	bne	10cca8 <poll_tcp+0x80>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
      conn->current_msg->msg.sd.polls_left--;
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
  10cc9c:	e3a01001 	mov	r1, #1
  10cca0:	e51b0008 	ldr	r0, [fp, #-8]
  10cca4:	eb000394 	bl	10dafc <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
  10cca8:	e51b3008 	ldr	r3, [fp, #-8]
  10ccac:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10ccb0:	e2033010 	and	r3, r3, #16
  10ccb4:	e3530000 	cmp	r3, #0
  10ccb8:	0a00001d 	beq	10cd34 <poll_tcp+0x10c>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
  10ccbc:	e51b3008 	ldr	r3, [fp, #-8]
  10ccc0:	e5933008 	ldr	r3, [r3, #8]
  10ccc4:	e3530000 	cmp	r3, #0
  10ccc8:	0a000019 	beq	10cd34 <poll_tcp+0x10c>
  10cccc:	e51b3008 	ldr	r3, [fp, #-8]
  10ccd0:	e5933008 	ldr	r3, [r3, #8]
  10ccd4:	e1d336b4 	ldrh	r3, [r3, #100]	; 0x64
  10ccd8:	e3530a01 	cmp	r3, #4096	; 0x1000
  10ccdc:	9a000014 	bls	10cd34 <poll_tcp+0x10c>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
  10cce0:	e51b3008 	ldr	r3, [fp, #-8]
  10cce4:	e5933008 	ldr	r3, [r3, #8]
  10cce8:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
  10ccec:	e353000a 	cmp	r3, #10
  10ccf0:	8a00000f 	bhi	10cd34 <poll_tcp+0x10c>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
  10ccf4:	e51b3008 	ldr	r3, [fp, #-8]
  10ccf8:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10ccfc:	e3c33010 	bic	r3, r3, #16
  10cd00:	e6ef2073 	uxtb	r2, r3
  10cd04:	e51b3008 	ldr	r3, [fp, #-8]
  10cd08:	e5c32030 	strb	r2, [r3, #48]	; 0x30
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
  10cd0c:	e51b3008 	ldr	r3, [fp, #-8]
  10cd10:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10cd14:	e3530000 	cmp	r3, #0
  10cd18:	0a000005 	beq	10cd34 <poll_tcp+0x10c>
  10cd1c:	e51b3008 	ldr	r3, [fp, #-8]
  10cd20:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10cd24:	e3a02000 	mov	r2, #0
  10cd28:	e3a01002 	mov	r1, #2
  10cd2c:	e51b0008 	ldr	r0, [fp, #-8]
  10cd30:	e12fff33 	blx	r3
    }
  }

  return ERR_OK;
  10cd34:	e3a03000 	mov	r3, #0
}
  10cd38:	e1a00003 	mov	r0, r3
  10cd3c:	e24bd004 	sub	sp, fp, #4
  10cd40:	e8bd8800 	pop	{fp, pc}

0010cd44 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
  10cd44:	e92d4800 	push	{fp, lr}
  10cd48:	e28db004 	add	fp, sp, #4
  10cd4c:	e24dd018 	sub	sp, sp, #24
  10cd50:	e50b0010 	str	r0, [fp, #-16]
  10cd54:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10cd58:	e1a03002 	mov	r3, r2
  10cd5c:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  struct netconn *conn = (struct netconn *)arg;
  10cd60:	e51b3010 	ldr	r3, [fp, #-16]
  10cd64:	e50b3008 	str	r3, [fp, #-8]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
  10cd68:	e51b3008 	ldr	r3, [fp, #-8]
  10cd6c:	e3530000 	cmp	r3, #0
  10cd70:	1a000006 	bne	10cd90 <sent_tcp+0x4c>
  10cd74:	e306096c 	movw	r0, #26988	; 0x696c
  10cd78:	e3400014 	movt	r0, #20
  10cd7c:	ebffd8e4 	bl	103114 <rt_kprintf>
  10cd80:	e300115b 	movw	r1, #347	; 0x15b
  10cd84:	e3060874 	movw	r0, #26740	; 0x6874
  10cd88:	e3400014 	movt	r0, #20
  10cd8c:	ebfff8b4 	bl	10b064 <sys_arch_assert>

  if (conn) {
  10cd90:	e51b3008 	ldr	r3, [fp, #-8]
  10cd94:	e3530000 	cmp	r3, #0
  10cd98:	0a00002c 	beq	10ce50 <sent_tcp+0x10c>
    if (conn->state == NETCONN_WRITE) {
  10cd9c:	e51b3008 	ldr	r3, [fp, #-8]
  10cda0:	e5933004 	ldr	r3, [r3, #4]
  10cda4:	e3530001 	cmp	r3, #1
  10cda8:	1a000003 	bne	10cdbc <sent_tcp+0x78>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
  10cdac:	e3a01001 	mov	r1, #1
  10cdb0:	e51b0008 	ldr	r0, [fp, #-8]
  10cdb4:	eb0008d8 	bl	10f11c <lwip_netconn_do_writemore>
  10cdb8:	ea000006 	b	10cdd8 <sent_tcp+0x94>
    } else if (conn->state == NETCONN_CLOSE) {
  10cdbc:	e51b3008 	ldr	r3, [fp, #-8]
  10cdc0:	e5933004 	ldr	r3, [r3, #4]
  10cdc4:	e3530004 	cmp	r3, #4
  10cdc8:	1a000002 	bne	10cdd8 <sent_tcp+0x94>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
  10cdcc:	e3a01001 	mov	r1, #1
  10cdd0:	e51b0008 	ldr	r0, [fp, #-8]
  10cdd4:	eb000348 	bl	10dafc <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
  10cdd8:	e51b3008 	ldr	r3, [fp, #-8]
  10cddc:	e5933008 	ldr	r3, [r3, #8]
  10cde0:	e3530000 	cmp	r3, #0
  10cde4:	0a000019 	beq	10ce50 <sent_tcp+0x10c>
  10cde8:	e51b3008 	ldr	r3, [fp, #-8]
  10cdec:	e5933008 	ldr	r3, [r3, #8]
  10cdf0:	e1d336b4 	ldrh	r3, [r3, #100]	; 0x64
  10cdf4:	e3530a01 	cmp	r3, #4096	; 0x1000
  10cdf8:	9a000014 	bls	10ce50 <sent_tcp+0x10c>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
  10cdfc:	e51b3008 	ldr	r3, [fp, #-8]
  10ce00:	e5933008 	ldr	r3, [r3, #8]
  10ce04:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
  10ce08:	e353000a 	cmp	r3, #10
  10ce0c:	8a00000f 	bhi	10ce50 <sent_tcp+0x10c>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
  10ce10:	e51b3008 	ldr	r3, [fp, #-8]
  10ce14:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10ce18:	e3c33010 	bic	r3, r3, #16
  10ce1c:	e6ef2073 	uxtb	r2, r3
  10ce20:	e51b3008 	ldr	r3, [fp, #-8]
  10ce24:	e5c32030 	strb	r2, [r3, #48]	; 0x30
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
  10ce28:	e51b3008 	ldr	r3, [fp, #-8]
  10ce2c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10ce30:	e3530000 	cmp	r3, #0
  10ce34:	0a000005 	beq	10ce50 <sent_tcp+0x10c>
  10ce38:	e51b3008 	ldr	r3, [fp, #-8]
  10ce3c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10ce40:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  10ce44:	e3a01002 	mov	r1, #2
  10ce48:	e51b0008 	ldr	r0, [fp, #-8]
  10ce4c:	e12fff33 	blx	r3
    }
  }

  return ERR_OK;
  10ce50:	e3a03000 	mov	r3, #0
}
  10ce54:	e1a00003 	mov	r0, r3
  10ce58:	e24bd004 	sub	sp, fp, #4
  10ce5c:	e8bd8800 	pop	{fp, pc}

0010ce60 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
  10ce60:	e92d4800 	push	{fp, lr}
  10ce64:	e28db004 	add	fp, sp, #4
  10ce68:	e24dd018 	sub	sp, sp, #24
  10ce6c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10ce70:	e1a03001 	mov	r3, r1
  10ce74:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
  struct netconn *conn;
  enum netconn_state old_state;

  conn = (struct netconn *)arg;
  10ce78:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10ce7c:	e50b3008 	str	r3, [fp, #-8]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
  10ce80:	e51b3008 	ldr	r3, [fp, #-8]
  10ce84:	e3530000 	cmp	r3, #0
  10ce88:	1a000006 	bne	10cea8 <err_tcp+0x48>
  10ce8c:	e306096c 	movw	r0, #26988	; 0x696c
  10ce90:	e3400014 	movt	r0, #20
  10ce94:	ebffd89e 	bl	103114 <rt_kprintf>
  10ce98:	e300117e 	movw	r1, #382	; 0x17e
  10ce9c:	e3060874 	movw	r0, #26740	; 0x6874
  10cea0:	e3400014 	movt	r0, #20
  10cea4:	ebfff86e 	bl	10b064 <sys_arch_assert>

  conn->pcb.tcp = NULL;
  10cea8:	e51b3008 	ldr	r3, [fp, #-8]
  10ceac:	e3a02000 	mov	r2, #0
  10ceb0:	e5832008 	str	r2, [r3, #8]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
  10ceb4:	e51b3008 	ldr	r3, [fp, #-8]
  10ceb8:	e5933004 	ldr	r3, [r3, #4]
  10cebc:	e50b300c 	str	r3, [fp, #-12]
  conn->state = NETCONN_NONE;
  10cec0:	e51b3008 	ldr	r3, [fp, #-8]
  10cec4:	e3a02000 	mov	r2, #0
  10cec8:	e5832004 	str	r2, [r3, #4]

  if (old_state == NETCONN_CLOSE) {
  10cecc:	e51b300c 	ldr	r3, [fp, #-12]
  10ced0:	e3530004 	cmp	r3, #4
  10ced4:	1a00000e 	bne	10cf14 <err_tcp+0xb4>
    /* RST during close: let close return success & dealloc the netconn */
    err = ERR_OK;
  10ced8:	e3a03000 	mov	r3, #0
  10cedc:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
    NETCONN_SET_SAFE_ERR(conn, ERR_OK);
  10cee0:	e51b3008 	ldr	r3, [fp, #-8]
  10cee4:	e3530000 	cmp	r3, #0
  10cee8:	0a00000e 	beq	10cf28 <err_tcp+0xc8>
  10ceec:	ebffd4d2 	bl	10223c <rt_enter_critical>
  10cef0:	e51b3008 	ldr	r3, [fp, #-8]
  10cef4:	e1d330dc 	ldrsb	r3, [r3, #12]
  10cef8:	e373000c 	cmn	r3, #12
  10cefc:	ba000002 	blt	10cf0c <err_tcp+0xac>
  10cf00:	e51b3008 	ldr	r3, [fp, #-8]
  10cf04:	e3a02000 	mov	r2, #0
  10cf08:	e5c3200c 	strb	r2, [r3, #12]
  10cf0c:	ebffd4d0 	bl	102254 <rt_exit_critical>
  10cf10:	ea000004 	b	10cf28 <err_tcp+0xc8>
  } else {
    /* no check since this is always fatal! */
    SYS_ARCH_SET(conn->last_err, err);
  10cf14:	ebffd4c8 	bl	10223c <rt_enter_critical>
  10cf18:	e51b3008 	ldr	r3, [fp, #-8]
  10cf1c:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
  10cf20:	e5c3200c 	strb	r2, [r3, #12]
  10cf24:	ebffd4ca 	bl	102254 <rt_exit_critical>
  }

  /* @todo: the type of NETCONN_EVT created should depend on 'old_state' */

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
  10cf28:	e51b3008 	ldr	r3, [fp, #-8]
  10cf2c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10cf30:	e3530000 	cmp	r3, #0
  10cf34:	0a000005 	beq	10cf50 <err_tcp+0xf0>
  10cf38:	e51b3008 	ldr	r3, [fp, #-8]
  10cf3c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10cf40:	e3a02000 	mov	r2, #0
  10cf44:	e3a01004 	mov	r1, #4
  10cf48:	e51b0008 	ldr	r0, [fp, #-8]
  10cf4c:	e12fff33 	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
  10cf50:	e51b3008 	ldr	r3, [fp, #-8]
  10cf54:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10cf58:	e3530000 	cmp	r3, #0
  10cf5c:	0a000005 	beq	10cf78 <err_tcp+0x118>
  10cf60:	e51b3008 	ldr	r3, [fp, #-8]
  10cf64:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10cf68:	e3a02000 	mov	r2, #0
  10cf6c:	e3a01000 	mov	r1, #0
  10cf70:	e51b0008 	ldr	r0, [fp, #-8]
  10cf74:	e12fff33 	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
  10cf78:	e51b3008 	ldr	r3, [fp, #-8]
  10cf7c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10cf80:	e3530000 	cmp	r3, #0
  10cf84:	0a000005 	beq	10cfa0 <err_tcp+0x140>
  10cf88:	e51b3008 	ldr	r3, [fp, #-8]
  10cf8c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10cf90:	e3a02000 	mov	r2, #0
  10cf94:	e3a01002 	mov	r1, #2
  10cf98:	e51b0008 	ldr	r0, [fp, #-8]
  10cf9c:	e12fff33 	blx	r3

  /* pass NULL-message to recvmbox to wake up pending recv */
  if (sys_mbox_valid(&conn->recvmbox)) {
  10cfa0:	e51b3008 	ldr	r3, [fp, #-8]
  10cfa4:	e2833014 	add	r3, r3, #20
  10cfa8:	e1a00003 	mov	r0, r3
  10cfac:	ebfff7e3 	bl	10af40 <sys_mbox_valid>
  10cfb0:	e1a03000 	mov	r3, r0
  10cfb4:	e3530000 	cmp	r3, #0
  10cfb8:	0a000004 	beq	10cfd0 <err_tcp+0x170>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, NULL);
  10cfbc:	e51b3008 	ldr	r3, [fp, #-8]
  10cfc0:	e2833014 	add	r3, r3, #20
  10cfc4:	e3a01000 	mov	r1, #0
  10cfc8:	e1a00003 	mov	r0, r3
  10cfcc:	ebfff77d 	bl	10adc8 <sys_mbox_trypost>
  }
  /* pass NULL-message to acceptmbox to wake up pending accept */
  if (sys_mbox_valid(&conn->acceptmbox)) {
  10cfd0:	e51b3008 	ldr	r3, [fp, #-8]
  10cfd4:	e2833018 	add	r3, r3, #24
  10cfd8:	e1a00003 	mov	r0, r3
  10cfdc:	ebfff7d7 	bl	10af40 <sys_mbox_valid>
  10cfe0:	e1a03000 	mov	r3, r0
  10cfe4:	e3530000 	cmp	r3, #0
  10cfe8:	0a000004 	beq	10d000 <err_tcp+0x1a0>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, NULL);
  10cfec:	e51b3008 	ldr	r3, [fp, #-8]
  10cff0:	e2833018 	add	r3, r3, #24
  10cff4:	e3a01000 	mov	r1, #0
  10cff8:	e1a00003 	mov	r0, r3
  10cffc:	ebfff771 	bl	10adc8 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
  10d000:	e51b300c 	ldr	r3, [fp, #-12]
  10d004:	e3530001 	cmp	r3, #1
  10d008:	0a000005 	beq	10d024 <err_tcp+0x1c4>
  10d00c:	e51b300c 	ldr	r3, [fp, #-12]
  10d010:	e3530004 	cmp	r3, #4
  10d014:	0a000002 	beq	10d024 <err_tcp+0x1c4>
  10d018:	e51b300c 	ldr	r3, [fp, #-12]
  10d01c:	e3530003 	cmp	r3, #3
  10d020:	1a000042 	bne	10d130 <err_tcp+0x2d0>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
  10d024:	e51b3008 	ldr	r3, [fp, #-8]
  10d028:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10d02c:	e2033004 	and	r3, r3, #4
  10d030:	e3530000 	cmp	r3, #0
  10d034:	13a03001 	movne	r3, #1
  10d038:	03a03000 	moveq	r3, #0
  10d03c:	e6ef3073 	uxtb	r3, r3
  10d040:	e50b3010 	str	r3, [fp, #-16]
    SET_NONBLOCKING_CONNECT(conn, 0);
  10d044:	e51b3008 	ldr	r3, [fp, #-8]
  10d048:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10d04c:	e3c33004 	bic	r3, r3, #4
  10d050:	e6ef2073 	uxtb	r2, r3
  10d054:	e51b3008 	ldr	r3, [fp, #-8]
  10d058:	e5c32030 	strb	r2, [r3, #48]	; 0x30

    if (!was_nonblocking_connect) {
  10d05c:	e51b3010 	ldr	r3, [fp, #-16]
  10d060:	e3530000 	cmp	r3, #0
  10d064:	1a00003d 	bne	10d160 <err_tcp+0x300>
      sys_sem_t* op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
  10d068:	e51b3008 	ldr	r3, [fp, #-8]
  10d06c:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10d070:	e3530000 	cmp	r3, #0
  10d074:	1a000006 	bne	10d094 <err_tcp+0x234>
  10d078:	e306097c 	movw	r0, #27004	; 0x697c
  10d07c:	e3400014 	movt	r0, #20
  10d080:	ebffd823 	bl	103114 <rt_kprintf>
  10d084:	e30011ad 	movw	r1, #429	; 0x1ad
  10d088:	e3060874 	movw	r0, #26740	; 0x6874
  10d08c:	e3400014 	movt	r0, #20
  10d090:	ebfff7f3 	bl	10b064 <sys_arch_assert>
      conn->current_msg->err = err;
  10d094:	e51b3008 	ldr	r3, [fp, #-8]
  10d098:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10d09c:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
  10d0a0:	e5c32004 	strb	r2, [r3, #4]
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
  10d0a4:	e51b3008 	ldr	r3, [fp, #-8]
  10d0a8:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10d0ac:	e5933000 	ldr	r3, [r3]
  10d0b0:	e2833010 	add	r3, r3, #16
  10d0b4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
  10d0b8:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  10d0bc:	ebfff5ca 	bl	10a7ec <sys_sem_valid>
  10d0c0:	e1a03000 	mov	r3, r0
  10d0c4:	e3530000 	cmp	r3, #0
  10d0c8:	1a000006 	bne	10d0e8 <err_tcp+0x288>
  10d0cc:	e3060998 	movw	r0, #27032	; 0x6998
  10d0d0:	e3400014 	movt	r0, #20
  10d0d4:	ebffd80e 	bl	103114 <rt_kprintf>
  10d0d8:	e3a01e1b 	mov	r1, #432	; 0x1b0
  10d0dc:	e3060874 	movw	r0, #26740	; 0x6874
  10d0e0:	e3400014 	movt	r0, #20
  10d0e4:	ebfff7de 	bl	10b064 <sys_arch_assert>
      conn->current_msg = NULL;
  10d0e8:	e51b3008 	ldr	r3, [fp, #-8]
  10d0ec:	e3a02000 	mov	r2, #0
  10d0f0:	e5832038 	str	r2, [r3, #56]	; 0x38
      /* wake up the waiting task */
      NETCONN_SET_SAFE_ERR(conn, err);
  10d0f4:	e51b3008 	ldr	r3, [fp, #-8]
  10d0f8:	e3530000 	cmp	r3, #0
  10d0fc:	0a000008 	beq	10d124 <err_tcp+0x2c4>
  10d100:	ebffd44d 	bl	10223c <rt_enter_critical>
  10d104:	e51b3008 	ldr	r3, [fp, #-8]
  10d108:	e1d330dc 	ldrsb	r3, [r3, #12]
  10d10c:	e373000c 	cmn	r3, #12
  10d110:	ba000002 	blt	10d120 <err_tcp+0x2c0>
  10d114:	e51b3008 	ldr	r3, [fp, #-8]
  10d118:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
  10d11c:	e5c3200c 	strb	r2, [r3, #12]
  10d120:	ebffd44b 	bl	102254 <rt_exit_critical>
      sys_sem_signal(op_completed_sem);
  10d124:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  10d128:	ebfff571 	bl	10a6f4 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
  10d12c:	ea00000b 	b	10d160 <err_tcp+0x300>
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
  10d130:	e51b3008 	ldr	r3, [fp, #-8]
  10d134:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10d138:	e3530000 	cmp	r3, #0
  10d13c:	0a000008 	beq	10d164 <err_tcp+0x304>
  10d140:	e30609b4 	movw	r0, #27060	; 0x69b4
  10d144:	e3400014 	movt	r0, #20
  10d148:	ebffd7f1 	bl	103114 <rt_kprintf>
  10d14c:	e30011b7 	movw	r1, #439	; 0x1b7
  10d150:	e3060874 	movw	r0, #26740	; 0x6874
  10d154:	e3400014 	movt	r0, #20
  10d158:	ebfff7c1 	bl	10b064 <sys_arch_assert>
  }
}
  10d15c:	ea000000 	b	10d164 <err_tcp+0x304>
      (old_state == NETCONN_CONNECT)) {
  10d160:	e320f000 	nop	{0}
}
  10d164:	e320f000 	nop	{0}
  10d168:	e24bd004 	sub	sp, fp, #4
  10d16c:	e8bd8800 	pop	{fp, pc}

0010d170 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
  10d170:	e92d4800 	push	{fp, lr}
  10d174:	e28db004 	add	fp, sp, #4
  10d178:	e24dd010 	sub	sp, sp, #16
  10d17c:	e50b0010 	str	r0, [fp, #-16]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
  10d180:	e51b3010 	ldr	r3, [fp, #-16]
  10d184:	e5933008 	ldr	r3, [r3, #8]
  10d188:	e50b3008 	str	r3, [fp, #-8]
  tcp_arg(pcb, conn);
  10d18c:	e51b1010 	ldr	r1, [fp, #-16]
  10d190:	e51b0008 	ldr	r0, [fp, #-8]
  10d194:	eb004aed 	bl	11fd50 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
  10d198:	e30c1a44 	movw	r1, #51780	; 0xca44
  10d19c:	e3401010 	movt	r1, #16
  10d1a0:	e51b0008 	ldr	r0, [fp, #-8]
  10d1a4:	eb004af8 	bl	11fd8c <tcp_recv>
  tcp_sent(pcb, sent_tcp);
  10d1a8:	e30c1d44 	movw	r1, #52548	; 0xcd44
  10d1ac:	e3401010 	movt	r1, #16
  10d1b0:	e51b0008 	ldr	r0, [fp, #-8]
  10d1b4:	eb004b0d 	bl	11fdf0 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
  10d1b8:	e3a02002 	mov	r2, #2
  10d1bc:	e30c1c28 	movw	r1, #52264	; 0xcc28
  10d1c0:	e3401010 	movt	r1, #16
  10d1c4:	e51b0008 	ldr	r0, [fp, #-8]
  10d1c8:	eb004b4f 	bl	11ff0c <tcp_poll>
  tcp_err(pcb, err_tcp);
  10d1cc:	e30c1e60 	movw	r1, #52832	; 0xce60
  10d1d0:	e3401010 	movt	r1, #16
  10d1d4:	e51b0008 	ldr	r0, [fp, #-8]
  10d1d8:	eb004b1d 	bl	11fe54 <tcp_err>
}
  10d1dc:	e320f000 	nop	{0}
  10d1e0:	e24bd004 	sub	sp, fp, #4
  10d1e4:	e8bd8800 	pop	{fp, pc}

0010d1e8 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
  10d1e8:	e92d4800 	push	{fp, lr}
  10d1ec:	e28db004 	add	fp, sp, #4
  10d1f0:	e24dd020 	sub	sp, sp, #32
  10d1f4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10d1f8:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  10d1fc:	e1a03002 	mov	r3, r2
  10d200:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
  10d204:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d208:	e50b3008 	str	r3, [fp, #-8]

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->tate: %s\n", tcp_debug_state_str(newpcb->state)));

  if (conn == NULL) {
  10d20c:	e51b3008 	ldr	r3, [fp, #-8]
  10d210:	e3530000 	cmp	r3, #0
  10d214:	1a000001 	bne	10d220 <accept_function+0x38>
    return ERR_VAL;
  10d218:	e3e03005 	mvn	r3, #5
  10d21c:	ea00007d 	b	10d418 <accept_function+0x230>
  }
  if (!sys_mbox_valid(&conn->acceptmbox)) {
  10d220:	e51b3008 	ldr	r3, [fp, #-8]
  10d224:	e2833018 	add	r3, r3, #24
  10d228:	e1a00003 	mov	r0, r3
  10d22c:	ebfff743 	bl	10af40 <sys_mbox_valid>
  10d230:	e1a03000 	mov	r3, r0
  10d234:	e3530000 	cmp	r3, #0
  10d238:	1a000001 	bne	10d244 <accept_function+0x5c>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
  10d23c:	e3e03005 	mvn	r3, #5
  10d240:	ea000074 	b	10d418 <accept_function+0x230>
  }

  if (newpcb == NULL) {
  10d244:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  10d248:	e3530000 	cmp	r3, #0
  10d24c:	1a000014 	bne	10d2a4 <accept_function+0xbc>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
  10d250:	e51b3008 	ldr	r3, [fp, #-8]
  10d254:	e2833018 	add	r3, r3, #24
  10d258:	e300157c 	movw	r1, #1404	; 0x57c
  10d25c:	e3401015 	movt	r1, #21
  10d260:	e1a00003 	mov	r0, r3
  10d264:	ebfff6d7 	bl	10adc8 <sys_mbox_trypost>
  10d268:	e1a03000 	mov	r3, r0
  10d26c:	e3530000 	cmp	r3, #0
  10d270:	1a000009 	bne	10d29c <accept_function+0xb4>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
  10d274:	e51b3008 	ldr	r3, [fp, #-8]
  10d278:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10d27c:	e3530000 	cmp	r3, #0
  10d280:	0a000005 	beq	10d29c <accept_function+0xb4>
  10d284:	e51b3008 	ldr	r3, [fp, #-8]
  10d288:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10d28c:	e3a02000 	mov	r2, #0
  10d290:	e3a01000 	mov	r1, #0
  10d294:	e51b0008 	ldr	r0, [fp, #-8]
  10d298:	e12fff33 	blx	r3
    }
    return ERR_VAL;
  10d29c:	e3e03005 	mvn	r3, #5
  10d2a0:	ea00005c 	b	10d418 <accept_function+0x230>
  }

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
  10d2a4:	e51b3008 	ldr	r3, [fp, #-8]
  10d2a8:	e5932000 	ldr	r2, [r3]
  10d2ac:	e51b3008 	ldr	r3, [fp, #-8]
  10d2b0:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10d2b4:	e1a01003 	mov	r1, r3
  10d2b8:	e1a00002 	mov	r0, r2
  10d2bc:	eb0000f7 	bl	10d6a0 <netconn_alloc>
  10d2c0:	e50b000c 	str	r0, [fp, #-12]
  if (newconn == NULL) {
  10d2c4:	e51b300c 	ldr	r3, [fp, #-12]
  10d2c8:	e3530000 	cmp	r3, #0
  10d2cc:	1a000014 	bne	10d324 <accept_function+0x13c>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
  10d2d0:	e51b3008 	ldr	r3, [fp, #-8]
  10d2d4:	e2833018 	add	r3, r3, #24
  10d2d8:	e300157c 	movw	r1, #1404	; 0x57c
  10d2dc:	e3401015 	movt	r1, #21
  10d2e0:	e1a00003 	mov	r0, r3
  10d2e4:	ebfff6b7 	bl	10adc8 <sys_mbox_trypost>
  10d2e8:	e1a03000 	mov	r3, r0
  10d2ec:	e3530000 	cmp	r3, #0
  10d2f0:	1a000009 	bne	10d31c <accept_function+0x134>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
  10d2f4:	e51b3008 	ldr	r3, [fp, #-8]
  10d2f8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10d2fc:	e3530000 	cmp	r3, #0
  10d300:	0a000005 	beq	10d31c <accept_function+0x134>
  10d304:	e51b3008 	ldr	r3, [fp, #-8]
  10d308:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10d30c:	e3a02000 	mov	r2, #0
  10d310:	e3a01000 	mov	r1, #0
  10d314:	e51b0008 	ldr	r0, [fp, #-8]
  10d318:	e12fff33 	blx	r3
    }
    return ERR_MEM;
  10d31c:	e3e03000 	mvn	r3, #0
  10d320:	ea00003c 	b	10d418 <accept_function+0x230>
  }
  newconn->pcb.tcp = newpcb;
  10d324:	e51b300c 	ldr	r3, [fp, #-12]
  10d328:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  10d32c:	e5832008 	str	r2, [r3, #8]
  setup_tcp(newconn);
  10d330:	e51b000c 	ldr	r0, [fp, #-12]
  10d334:	ebffff8d 	bl	10d170 <setup_tcp>
  /* no protection: when creating the pcb, the netconn is not yet known
     to the application thread */
  newconn->last_err = err;
  10d338:	e51b300c 	ldr	r3, [fp, #-12]
  10d33c:	e55b201d 	ldrb	r2, [fp, #-29]	; 0xffffffe3
  10d340:	e5c3200c 	strb	r2, [r3, #12]

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
  10d344:	e51b3008 	ldr	r3, [fp, #-8]
  10d348:	e2833018 	add	r3, r3, #24
  10d34c:	e51b100c 	ldr	r1, [fp, #-12]
  10d350:	e1a00003 	mov	r0, r3
  10d354:	ebfff69b 	bl	10adc8 <sys_mbox_trypost>
  10d358:	e1a03000 	mov	r3, r0
  10d35c:	e3530000 	cmp	r3, #0
  10d360:	0a000021 	beq	10d3ec <accept_function+0x204>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb* pcb = newconn->pcb.tcp;
  10d364:	e51b300c 	ldr	r3, [fp, #-12]
  10d368:	e5933008 	ldr	r3, [r3, #8]
  10d36c:	e50b3010 	str	r3, [fp, #-16]
    tcp_arg(pcb, NULL);
  10d370:	e3a01000 	mov	r1, #0
  10d374:	e51b0010 	ldr	r0, [fp, #-16]
  10d378:	eb004a74 	bl	11fd50 <tcp_arg>
    tcp_recv(pcb, NULL);
  10d37c:	e3a01000 	mov	r1, #0
  10d380:	e51b0010 	ldr	r0, [fp, #-16]
  10d384:	eb004a80 	bl	11fd8c <tcp_recv>
    tcp_sent(pcb, NULL);
  10d388:	e3a01000 	mov	r1, #0
  10d38c:	e51b0010 	ldr	r0, [fp, #-16]
  10d390:	eb004a96 	bl	11fdf0 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
  10d394:	e3a02000 	mov	r2, #0
  10d398:	e3a01000 	mov	r1, #0
  10d39c:	e51b0010 	ldr	r0, [fp, #-16]
  10d3a0:	eb004ad9 	bl	11ff0c <tcp_poll>
    tcp_err(pcb, NULL);
  10d3a4:	e3a01000 	mov	r1, #0
  10d3a8:	e51b0010 	ldr	r0, [fp, #-16]
  10d3ac:	eb004aa8 	bl	11fe54 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
  10d3b0:	e51b300c 	ldr	r3, [fp, #-12]
  10d3b4:	e3a02000 	mov	r2, #0
  10d3b8:	e5832008 	str	r2, [r3, #8]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
  10d3bc:	e51b300c 	ldr	r3, [fp, #-12]
  10d3c0:	e2833014 	add	r3, r3, #20
  10d3c4:	e1a00003 	mov	r0, r3
  10d3c8:	ebfff61e 	bl	10ac48 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
  10d3cc:	e51b300c 	ldr	r3, [fp, #-12]
  10d3d0:	e2833014 	add	r3, r3, #20
  10d3d4:	e1a00003 	mov	r0, r3
  10d3d8:	ebfff6e2 	bl	10af68 <sys_mbox_set_invalid>
    netconn_free(newconn);
  10d3dc:	e51b000c 	ldr	r0, [fp, #-12]
  10d3e0:	eb000122 	bl	10d870 <netconn_free>
    return ERR_MEM;
  10d3e4:	e3e03000 	mvn	r3, #0
  10d3e8:	ea00000a 	b	10d418 <accept_function+0x230>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
  10d3ec:	e51b3008 	ldr	r3, [fp, #-8]
  10d3f0:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10d3f4:	e3530000 	cmp	r3, #0
  10d3f8:	0a000005 	beq	10d414 <accept_function+0x22c>
  10d3fc:	e51b3008 	ldr	r3, [fp, #-8]
  10d400:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10d404:	e3a02000 	mov	r2, #0
  10d408:	e3a01000 	mov	r1, #0
  10d40c:	e51b0008 	ldr	r0, [fp, #-8]
  10d410:	e12fff33 	blx	r3
  }

  return ERR_OK;
  10d414:	e3a03000 	mov	r3, #0
}
  10d418:	e1a00003 	mov	r0, r3
  10d41c:	e24bd004 	sub	sp, fp, #4
  10d420:	e8bd8800 	pop	{fp, pc}

0010d424 <pcb_new>:
 *
 * @param msg the api_msg_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
  10d424:	e92d4810 	push	{r4, fp, lr}
  10d428:	e28db008 	add	fp, sp, #8
  10d42c:	e24dd014 	sub	sp, sp, #20
  10d430:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
  10d434:	e3a03000 	mov	r3, #0
  10d438:	e50b3010 	str	r3, [fp, #-16]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
  10d43c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d440:	e5933000 	ldr	r3, [r3]
  10d444:	e5933008 	ldr	r3, [r3, #8]
  10d448:	e3530000 	cmp	r3, #0
  10d44c:	0a000006 	beq	10d46c <pcb_new+0x48>
  10d450:	e30609d0 	movw	r0, #27088	; 0x69d0
  10d454:	e3400014 	movt	r0, #20
  10d458:	ebffd72d 	bl	103114 <rt_kprintf>
  10d45c:	e3001226 	movw	r1, #550	; 0x226
  10d460:	e3060874 	movw	r0, #26740	; 0x6874
  10d464:	e3400014 	movt	r0, #20
  10d468:	ebfff6fd 	bl	10b064 <sys_arch_assert>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch(NETCONNTYPE_GROUP(msg->conn->type)) {
  10d46c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d470:	e5933000 	ldr	r3, [r3]
  10d474:	e5933000 	ldr	r3, [r3]
  10d478:	e20330f0 	and	r3, r3, #240	; 0xf0
  10d47c:	e3530020 	cmp	r3, #32
  10d480:	0a00001d 	beq	10d4fc <pcb_new+0xd8>
  10d484:	e3530040 	cmp	r3, #64	; 0x40
  10d488:	0a000002 	beq	10d498 <pcb_new+0x74>
  10d48c:	e3530010 	cmp	r3, #16
  10d490:	0a00003a 	beq	10d580 <pcb_new+0x15c>
  10d494:	ea00004b 	b	10d5c8 <pcb_new+0x1a4>
#if LWIP_RAW
  case NETCONN_RAW:
    msg->conn->pcb.raw = raw_new_ip_type(iptype, msg->msg.n.proto);
  10d498:	e51b3010 	ldr	r3, [fp, #-16]
  10d49c:	e6ef2073 	uxtb	r2, r3
  10d4a0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d4a4:	e5d31008 	ldrb	r1, [r3, #8]
  10d4a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d4ac:	e5934000 	ldr	r4, [r3]
  10d4b0:	e1a00002 	mov	r0, r2
  10d4b4:	eb003d6a 	bl	11ca64 <raw_new_ip_type>
  10d4b8:	e1a03000 	mov	r3, r0
  10d4bc:	e5843008 	str	r3, [r4, #8]
    if (msg->conn->pcb.raw != NULL) {
  10d4c0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d4c4:	e5933000 	ldr	r3, [r3]
  10d4c8:	e5933008 	ldr	r3, [r3, #8]
  10d4cc:	e3530000 	cmp	r3, #0
  10d4d0:	0a000040 	beq	10d5d8 <pcb_new+0x1b4>
      if (NETCONNTYPE_ISIPV6(msg->conn->type) && msg->conn->pcb.raw->protocol == IP6_NEXTH_ICMP6) {
        msg->conn->pcb.raw->chksum_reqd = 1;
        msg->conn->pcb.raw->chksum_offset = 2;
      }
#endif /* LWIP_IPV6 */
      raw_recv(msg->conn->pcb.raw, recv_raw, msg->conn);
  10d4d4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d4d8:	e5933000 	ldr	r3, [r3]
  10d4dc:	e5930008 	ldr	r0, [r3, #8]
  10d4e0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d4e4:	e5933000 	ldr	r3, [r3]
  10d4e8:	e1a02003 	mov	r2, r3
  10d4ec:	e30c1644 	movw	r1, #50756	; 0xc644
  10d4f0:	e3401010 	movt	r1, #16
  10d4f4:	eb003c57 	bl	11c658 <raw_recv>
    }
    break;
  10d4f8:	ea000036 	b	10d5d8 <pcb_new+0x1b4>
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    msg->conn->pcb.udp = udp_new_ip_type(iptype);
  10d4fc:	e51b3010 	ldr	r3, [fp, #-16]
  10d500:	e6ef2073 	uxtb	r2, r3
  10d504:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d508:	e5934000 	ldr	r4, [r3]
  10d50c:	e1a00002 	mov	r0, r2
  10d510:	eb006dfd 	bl	128d0c <udp_new_ip_type>
  10d514:	e1a03000 	mov	r3, r0
  10d518:	e5843008 	str	r3, [r4, #8]
    if (msg->conn->pcb.udp != NULL) {
  10d51c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d520:	e5933000 	ldr	r3, [r3]
  10d524:	e5933008 	ldr	r3, [r3, #8]
  10d528:	e3530000 	cmp	r3, #0
  10d52c:	0a00002b 	beq	10d5e0 <pcb_new+0x1bc>
#if LWIP_UDPLITE
      if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
      }
#endif /* LWIP_UDPLITE */
      if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
  10d530:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d534:	e5933000 	ldr	r3, [r3]
  10d538:	e5933000 	ldr	r3, [r3]
  10d53c:	e3530022 	cmp	r3, #34	; 0x22
  10d540:	1a000004 	bne	10d558 <pcb_new+0x134>
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
  10d544:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d548:	e5933000 	ldr	r3, [r3]
  10d54c:	e5933008 	ldr	r3, [r3, #8]
  10d550:	e3a02001 	mov	r2, #1
  10d554:	e5c32010 	strb	r2, [r3, #16]
      }
      udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
  10d558:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d55c:	e5933000 	ldr	r3, [r3]
  10d560:	e5930008 	ldr	r0, [r3, #8]
  10d564:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d568:	e5933000 	ldr	r3, [r3]
  10d56c:	e1a02003 	mov	r2, r3
  10d570:	e30c1834 	movw	r1, #51252	; 0xc834
  10d574:	e3401010 	movt	r1, #16
  10d578:	eb006d88 	bl	128ba0 <udp_recv>
    }
    break;
  10d57c:	ea000017 	b	10d5e0 <pcb_new+0x1bc>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
  10d580:	e51b3010 	ldr	r3, [fp, #-16]
  10d584:	e6ef2073 	uxtb	r2, r3
  10d588:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d58c:	e5934000 	ldr	r4, [r3]
  10d590:	e1a00002 	mov	r0, r2
  10d594:	eb0049e1 	bl	11fd20 <tcp_new_ip_type>
  10d598:	e1a03000 	mov	r3, r0
  10d59c:	e5843008 	str	r3, [r4, #8]
    if (msg->conn->pcb.tcp != NULL) {
  10d5a0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d5a4:	e5933000 	ldr	r3, [r3]
  10d5a8:	e5933008 	ldr	r3, [r3, #8]
  10d5ac:	e3530000 	cmp	r3, #0
  10d5b0:	0a00000c 	beq	10d5e8 <pcb_new+0x1c4>
      setup_tcp(msg->conn);
  10d5b4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d5b8:	e5933000 	ldr	r3, [r3]
  10d5bc:	e1a00003 	mov	r0, r3
  10d5c0:	ebfffeea 	bl	10d170 <setup_tcp>
    }
    break;
  10d5c4:	ea000007 	b	10d5e8 <pcb_new+0x1c4>
#endif /* LWIP_TCP */
  default:
    /* Unsupported netconn type, e.g. protocol disabled */
    msg->err = ERR_VAL;
  10d5c8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d5cc:	e3e02005 	mvn	r2, #5
  10d5d0:	e5c32004 	strb	r2, [r3, #4]
    return;
  10d5d4:	ea00000c 	b	10d60c <pcb_new+0x1e8>
    break;
  10d5d8:	e320f000 	nop	{0}
  10d5dc:	ea000002 	b	10d5ec <pcb_new+0x1c8>
    break;
  10d5e0:	e320f000 	nop	{0}
  10d5e4:	ea000000 	b	10d5ec <pcb_new+0x1c8>
    break;
  10d5e8:	e320f000 	nop	{0}
  }
  if (msg->conn->pcb.ip == NULL) {
  10d5ec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d5f0:	e5933000 	ldr	r3, [r3]
  10d5f4:	e5933008 	ldr	r3, [r3, #8]
  10d5f8:	e3530000 	cmp	r3, #0
  10d5fc:	1a000002 	bne	10d60c <pcb_new+0x1e8>
    msg->err = ERR_MEM;
  10d600:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d604:	e3e02000 	mvn	r2, #0
  10d608:	e5c32004 	strb	r2, [r3, #4]
  }
}
  10d60c:	e24bd008 	sub	sp, fp, #8
  10d610:	e8bd8810 	pop	{r4, fp, pc}

0010d614 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
  10d614:	e92d4800 	push	{fp, lr}
  10d618:	e28db004 	add	fp, sp, #4
  10d61c:	e24dd010 	sub	sp, sp, #16
  10d620:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10d624:	e51b3010 	ldr	r3, [fp, #-16]
  10d628:	e50b3008 	str	r3, [fp, #-8]

  msg->err = ERR_OK;
  10d62c:	e51b3008 	ldr	r3, [fp, #-8]
  10d630:	e3a02000 	mov	r2, #0
  10d634:	e5c32004 	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
  10d638:	e51b3008 	ldr	r3, [fp, #-8]
  10d63c:	e5933000 	ldr	r3, [r3]
  10d640:	e5933008 	ldr	r3, [r3, #8]
  10d644:	e3530000 	cmp	r3, #0
  10d648:	1a000001 	bne	10d654 <lwip_netconn_do_newconn+0x40>
    pcb_new(msg);
  10d64c:	e51b0008 	ldr	r0, [fp, #-8]
  10d650:	ebffff73 	bl	10d424 <pcb_new>
  }
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
  10d654:	e51b3008 	ldr	r3, [fp, #-8]
  10d658:	e5933000 	ldr	r3, [r3]
  10d65c:	e3530000 	cmp	r3, #0
  10d660:	0a00000b 	beq	10d694 <lwip_netconn_do_newconn+0x80>
  10d664:	ebffd2f4 	bl	10223c <rt_enter_critical>
  10d668:	e51b3008 	ldr	r3, [fp, #-8]
  10d66c:	e5933000 	ldr	r3, [r3]
  10d670:	e1d330dc 	ldrsb	r3, [r3, #12]
  10d674:	e373000c 	cmn	r3, #12
  10d678:	ba000004 	blt	10d690 <lwip_netconn_do_newconn+0x7c>
  10d67c:	e51b3008 	ldr	r3, [fp, #-8]
  10d680:	e5933000 	ldr	r3, [r3]
  10d684:	e51b2008 	ldr	r2, [fp, #-8]
  10d688:	e1d220d4 	ldrsb	r2, [r2, #4]
  10d68c:	e5c3200c 	strb	r2, [r3, #12]
  10d690:	ebffd2ef 	bl	102254 <rt_exit_critical>
}
  10d694:	e320f000 	nop	{0}
  10d698:	e24bd004 	sub	sp, fp, #4
  10d69c:	e8bd8800 	pop	{fp, pc}

0010d6a0 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
  10d6a0:	e92d4800 	push	{fp, lr}
  10d6a4:	e28db004 	add	fp, sp, #4
  10d6a8:	e24dd010 	sub	sp, sp, #16
  10d6ac:	e50b0010 	str	r0, [fp, #-16]
  10d6b0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct netconn *conn;
  int size;

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
  10d6b4:	e3002287 	movw	r2, #647	; 0x287
  10d6b8:	e3061874 	movw	r1, #26740	; 0x6874
  10d6bc:	e3401014 	movt	r1, #20
  10d6c0:	e3a00008 	mov	r0, #8
  10d6c4:	eb002efe 	bl	1192c4 <memp_malloc_fn>
  10d6c8:	e50b000c 	str	r0, [fp, #-12]
  if (conn == NULL) {
  10d6cc:	e51b300c 	ldr	r3, [fp, #-12]
  10d6d0:	e3530000 	cmp	r3, #0
  10d6d4:	1a000001 	bne	10d6e0 <netconn_alloc+0x40>
    return NULL;
  10d6d8:	e3a03000 	mov	r3, #0
  10d6dc:	ea000060 	b	10d864 <netconn_alloc+0x1c4>
  }

  conn->last_err = ERR_OK;
  10d6e0:	e51b300c 	ldr	r3, [fp, #-12]
  10d6e4:	e3a02000 	mov	r2, #0
  10d6e8:	e5c3200c 	strb	r2, [r3, #12]
  conn->type = t;
  10d6ec:	e51b300c 	ldr	r3, [fp, #-12]
  10d6f0:	e51b2010 	ldr	r2, [fp, #-16]
  10d6f4:	e5832000 	str	r2, [r3]
  conn->pcb.tcp = NULL;
  10d6f8:	e51b300c 	ldr	r3, [fp, #-12]
  10d6fc:	e3a02000 	mov	r2, #0
  10d700:	e5832008 	str	r2, [r3, #8]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch(NETCONNTYPE_GROUP(t)) {
  10d704:	e51b3010 	ldr	r3, [fp, #-16]
  10d708:	e20330f0 	and	r3, r3, #240	; 0xf0
  10d70c:	e3530020 	cmp	r3, #32
  10d710:	0a000007 	beq	10d734 <netconn_alloc+0x94>
  10d714:	e3530040 	cmp	r3, #64	; 0x40
  10d718:	0a000002 	beq	10d728 <netconn_alloc+0x88>
  10d71c:	e3530010 	cmp	r3, #16
  10d720:	0a000006 	beq	10d740 <netconn_alloc+0xa0>
  10d724:	ea000008 	b	10d74c <netconn_alloc+0xac>
#if LWIP_RAW
  case NETCONN_RAW:
    size = DEFAULT_RAW_RECVMBOX_SIZE;
  10d728:	e3a03001 	mov	r3, #1
  10d72c:	e50b3008 	str	r3, [fp, #-8]
    break;
  10d730:	ea00000d 	b	10d76c <netconn_alloc+0xcc>
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    size = DEFAULT_UDP_RECVMBOX_SIZE;
  10d734:	e3a03b01 	mov	r3, #1024	; 0x400
  10d738:	e50b3008 	str	r3, [fp, #-8]
    break;
  10d73c:	ea00000a 	b	10d76c <netconn_alloc+0xcc>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    size = DEFAULT_TCP_RECVMBOX_SIZE;
  10d740:	e30f3fff 	movw	r3, #65535	; 0xffff
  10d744:	e50b3008 	str	r3, [fp, #-8]
    break;
  10d748:	ea000007 	b	10d76c <netconn_alloc+0xcc>
#endif /* LWIP_TCP */
  default:
    LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
  10d74c:	e30609f0 	movw	r0, #27120	; 0x69f0
  10d750:	e3400014 	movt	r0, #20
  10d754:	ebffd66e 	bl	103114 <rt_kprintf>
  10d758:	e30012a2 	movw	r1, #674	; 0x2a2
  10d75c:	e3060874 	movw	r0, #26740	; 0x6874
  10d760:	e3400014 	movt	r0, #20
  10d764:	ebfff63e 	bl	10b064 <sys_arch_assert>
    goto free_and_return;
  10d768:	ea000039 	b	10d854 <netconn_alloc+0x1b4>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
  10d76c:	e51b300c 	ldr	r3, [fp, #-12]
  10d770:	e2833014 	add	r3, r3, #20
  10d774:	e51b1008 	ldr	r1, [fp, #-8]
  10d778:	e1a00003 	mov	r0, r3
  10d77c:	ebfff4ec 	bl	10ab34 <sys_mbox_new>
  10d780:	e1a03000 	mov	r3, r0
  10d784:	e3530000 	cmp	r3, #0
  10d788:	1a000030 	bne	10d850 <netconn_alloc+0x1b0>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
  10d78c:	e51b300c 	ldr	r3, [fp, #-12]
  10d790:	e2833010 	add	r3, r3, #16
  10d794:	e3a01000 	mov	r1, #0
  10d798:	e1a00003 	mov	r0, r3
  10d79c:	ebfff39e 	bl	10a61c <sys_sem_new>
  10d7a0:	e1a03000 	mov	r3, r0
  10d7a4:	e3530000 	cmp	r3, #0
  10d7a8:	0a000004 	beq	10d7c0 <netconn_alloc+0x120>
    sys_mbox_free(&conn->recvmbox);
  10d7ac:	e51b300c 	ldr	r3, [fp, #-12]
  10d7b0:	e2833014 	add	r3, r3, #20
  10d7b4:	e1a00003 	mov	r0, r3
  10d7b8:	ebfff522 	bl	10ac48 <sys_mbox_free>
    goto free_and_return;
  10d7bc:	ea000024 	b	10d854 <netconn_alloc+0x1b4>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
  10d7c0:	e51b300c 	ldr	r3, [fp, #-12]
  10d7c4:	e2833018 	add	r3, r3, #24
  10d7c8:	e1a00003 	mov	r0, r3
  10d7cc:	ebfff5e5 	bl	10af68 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
  10d7d0:	e51b300c 	ldr	r3, [fp, #-12]
  10d7d4:	e3a02000 	mov	r2, #0
  10d7d8:	e5832004 	str	r2, [r3, #4]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
  10d7dc:	e51b300c 	ldr	r3, [fp, #-12]
  10d7e0:	e3e02000 	mvn	r2, #0
  10d7e4:	e583201c 	str	r2, [r3, #28]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
  10d7e8:	e51b300c 	ldr	r3, [fp, #-12]
  10d7ec:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  10d7f0:	e583203c 	str	r2, [r3, #60]	; 0x3c
#if LWIP_TCP
  conn->current_msg  = NULL;
  10d7f4:	e51b300c 	ldr	r3, [fp, #-12]
  10d7f8:	e3a02000 	mov	r2, #0
  10d7fc:	e5832038 	str	r2, [r3, #56]	; 0x38
  conn->write_offset = 0;
  10d800:	e51b300c 	ldr	r3, [fp, #-12]
  10d804:	e3a02000 	mov	r2, #0
  10d808:	e5832034 	str	r2, [r3, #52]	; 0x34
#endif /* LWIP_TCP */
#if LWIP_SO_SNDTIMEO
  conn->send_timeout = 0;
  10d80c:	e51b300c 	ldr	r3, [fp, #-12]
  10d810:	e3a02000 	mov	r2, #0
  10d814:	e5832020 	str	r2, [r3, #32]
#endif /* LWIP_SO_SNDTIMEO */
#if LWIP_SO_RCVTIMEO
  conn->recv_timeout = 0;
  10d818:	e51b300c 	ldr	r3, [fp, #-12]
  10d81c:	e3a02000 	mov	r2, #0
  10d820:	e5832024 	str	r2, [r3, #36]	; 0x24
#endif /* LWIP_SO_RCVTIMEO */
#if LWIP_SO_RCVBUF
  conn->recv_bufsize = RECV_BUFSIZE_DEFAULT;
  10d824:	e51b300c 	ldr	r3, [fp, #-12]
  10d828:	e3a02602 	mov	r2, #2097152	; 0x200000
  10d82c:	e5832028 	str	r2, [r3, #40]	; 0x28
  conn->recv_avail   = 0;
  10d830:	e51b300c 	ldr	r3, [fp, #-12]
  10d834:	e3a02000 	mov	r2, #0
  10d838:	e583202c 	str	r2, [r3, #44]	; 0x2c
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = 0;
  10d83c:	e51b300c 	ldr	r3, [fp, #-12]
  10d840:	e3a02000 	mov	r2, #0
  10d844:	e5c32030 	strb	r2, [r3, #48]	; 0x30
  return conn;
  10d848:	e51b300c 	ldr	r3, [fp, #-12]
  10d84c:	ea000004 	b	10d864 <netconn_alloc+0x1c4>
    goto free_and_return;
  10d850:	e320f000 	nop	{0}
free_and_return:
  memp_free(MEMP_NETCONN, conn);
  10d854:	e51b100c 	ldr	r1, [fp, #-12]
  10d858:	e3a00008 	mov	r0, #8
  10d85c:	eb002f00 	bl	119464 <memp_free>
  return NULL;
  10d860:	e3a03000 	mov	r3, #0
}
  10d864:	e1a00003 	mov	r0, r3
  10d868:	e24bd004 	sub	sp, fp, #4
  10d86c:	e8bd8800 	pop	{fp, pc}

0010d870 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
  10d870:	e92d4800 	push	{fp, lr}
  10d874:	e28db004 	add	fp, sp, #4
  10d878:	e24dd008 	sub	sp, sp, #8
  10d87c:	e50b0008 	str	r0, [fp, #-8]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
  10d880:	e51b3008 	ldr	r3, [fp, #-8]
  10d884:	e5933008 	ldr	r3, [r3, #8]
  10d888:	e3530000 	cmp	r3, #0
  10d88c:	0a000006 	beq	10d8ac <netconn_free+0x3c>
  10d890:	e3060a18 	movw	r0, #27160	; 0x6a18
  10d894:	e3400014 	movt	r0, #20
  10d898:	ebffd61d 	bl	103114 <rt_kprintf>
  10d89c:	e30012da 	movw	r1, #730	; 0x2da
  10d8a0:	e3060874 	movw	r0, #26740	; 0x6874
  10d8a4:	e3400014 	movt	r0, #20
  10d8a8:	ebfff5ed 	bl	10b064 <sys_arch_assert>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
  10d8ac:	e51b3008 	ldr	r3, [fp, #-8]
  10d8b0:	e2833014 	add	r3, r3, #20
  10d8b4:	e1a00003 	mov	r0, r3
  10d8b8:	ebfff5a0 	bl	10af40 <sys_mbox_valid>
  10d8bc:	e1a03000 	mov	r3, r0
  10d8c0:	e3530000 	cmp	r3, #0
  10d8c4:	0a000006 	beq	10d8e4 <netconn_free+0x74>
  10d8c8:	e3060a48 	movw	r0, #27208	; 0x6a48
  10d8cc:	e3400014 	movt	r0, #20
  10d8d0:	ebffd60f 	bl	103114 <rt_kprintf>
  10d8d4:	e3a01fb7 	mov	r1, #732	; 0x2dc
  10d8d8:	e3060874 	movw	r0, #26740	; 0x6874
  10d8dc:	e3400014 	movt	r0, #20
  10d8e0:	ebfff5df 	bl	10b064 <sys_arch_assert>
    !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
  10d8e4:	e51b3008 	ldr	r3, [fp, #-8]
  10d8e8:	e2833018 	add	r3, r3, #24
  10d8ec:	e1a00003 	mov	r0, r3
  10d8f0:	ebfff592 	bl	10af40 <sys_mbox_valid>
  10d8f4:	e1a03000 	mov	r3, r0
  10d8f8:	e3530000 	cmp	r3, #0
  10d8fc:	0a000006 	beq	10d91c <netconn_free+0xac>
  10d900:	e3060a84 	movw	r0, #27268	; 0x6a84
  10d904:	e3400014 	movt	r0, #20
  10d908:	ebffd601 	bl	103114 <rt_kprintf>
  10d90c:	e30012df 	movw	r1, #735	; 0x2df
  10d910:	e3060874 	movw	r0, #26740	; 0x6874
  10d914:	e3400014 	movt	r0, #20
  10d918:	ebfff5d1 	bl	10b064 <sys_arch_assert>
    !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
  10d91c:	e51b3008 	ldr	r3, [fp, #-8]
  10d920:	e2833010 	add	r3, r3, #16
  10d924:	e1a00003 	mov	r0, r3
  10d928:	ebfff366 	bl	10a6c8 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
  10d92c:	e51b3008 	ldr	r3, [fp, #-8]
  10d930:	e2833010 	add	r3, r3, #16
  10d934:	e1a00003 	mov	r0, r3
  10d938:	ebfff3b5 	bl	10a814 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
  10d93c:	e51b1008 	ldr	r1, [fp, #-8]
  10d940:	e3a00008 	mov	r0, #8
  10d944:	eb002ec6 	bl	119464 <memp_free>
}
  10d948:	e320f000 	nop	{0}
  10d94c:	e24bd004 	sub	sp, fp, #4
  10d950:	e8bd8800 	pop	{fp, pc}

0010d954 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
  10d954:	e92d4800 	push	{fp, lr}
  10d958:	e28db004 	add	fp, sp, #4
  10d95c:	e24dd018 	sub	sp, sp, #24
  10d960:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
#endif /* LWIP_TCP */

  /* This runs in tcpip_thread, so we don't need to lock against rx packets */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
  10d964:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d968:	e2833014 	add	r3, r3, #20
  10d96c:	e1a00003 	mov	r0, r3
  10d970:	ebfff572 	bl	10af40 <sys_mbox_valid>
  10d974:	e1a03000 	mov	r3, r0
  10d978:	e3530000 	cmp	r3, #0
  10d97c:	0a00002c 	beq	10da34 <netconn_drain+0xe0>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
  10d980:	ea00001a 	b	10d9f0 <netconn_drain+0x9c>
#if LWIP_TCP
      if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
  10d984:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d988:	e5933000 	ldr	r3, [r3]
  10d98c:	e20330f0 	and	r3, r3, #240	; 0xf0
  10d990:	e3530010 	cmp	r3, #16
  10d994:	1a000012 	bne	10d9e4 <netconn_drain+0x90>
        if (mem != NULL) {
  10d998:	e51b3010 	ldr	r3, [fp, #-16]
  10d99c:	e3530000 	cmp	r3, #0
  10d9a0:	0a000012 	beq	10d9f0 <netconn_drain+0x9c>
          p = (struct pbuf*)mem;
  10d9a4:	e51b3010 	ldr	r3, [fp, #-16]
  10d9a8:	e50b3008 	str	r3, [fp, #-8]
          /* pcb might be set to NULL already by err_tcp() */
          if (conn->pcb.tcp != NULL) {
  10d9ac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d9b0:	e5933008 	ldr	r3, [r3, #8]
  10d9b4:	e3530000 	cmp	r3, #0
  10d9b8:	0a000006 	beq	10d9d8 <netconn_drain+0x84>
            tcp_recved(conn->pcb.tcp, p->tot_len);
  10d9bc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d9c0:	e5932008 	ldr	r2, [r3, #8]
  10d9c4:	e51b3008 	ldr	r3, [fp, #-8]
  10d9c8:	e1d330b8 	ldrh	r3, [r3, #8]
  10d9cc:	e1a01003 	mov	r1, r3
  10d9d0:	e1a00002 	mov	r0, r2
  10d9d4:	eb00423c 	bl	11e2cc <tcp_recved>
          }
          pbuf_free(p);
  10d9d8:	e51b0008 	ldr	r0, [fp, #-8]
  10d9dc:	eb0035ae 	bl	11b09c <pbuf_free>
  10d9e0:	ea000002 	b	10d9f0 <netconn_drain+0x9c>
        }
      } else
#endif /* LWIP_TCP */
      {
        netbuf_delete((struct netbuf *)mem);
  10d9e4:	e51b3010 	ldr	r3, [fp, #-16]
  10d9e8:	e1a00003 	mov	r0, r3
  10d9ec:	eb0009c9 	bl	110118 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
  10d9f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10d9f4:	e2833014 	add	r3, r3, #20
  10d9f8:	e24b2010 	sub	r2, fp, #16
  10d9fc:	e1a01002 	mov	r1, r2
  10da00:	e1a00003 	mov	r0, r3
  10da04:	ebfff535 	bl	10aee0 <sys_arch_mbox_tryfetch>
  10da08:	e1a03000 	mov	r3, r0
  10da0c:	e3730001 	cmn	r3, #1
  10da10:	1affffdb 	bne	10d984 <netconn_drain+0x30>
      }
    }
    sys_mbox_free(&conn->recvmbox);
  10da14:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10da18:	e2833014 	add	r3, r3, #20
  10da1c:	e1a00003 	mov	r0, r3
  10da20:	ebfff488 	bl	10ac48 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
  10da24:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10da28:	e2833014 	add	r3, r3, #20
  10da2c:	e1a00003 	mov	r0, r3
  10da30:	ebfff54c 	bl	10af68 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
  10da34:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10da38:	e2833018 	add	r3, r3, #24
  10da3c:	e1a00003 	mov	r0, r3
  10da40:	ebfff53e 	bl	10af40 <sys_mbox_valid>
  10da44:	e1a03000 	mov	r3, r0
  10da48:	e3530000 	cmp	r3, #0
  10da4c:	0a000027 	beq	10daf0 <netconn_drain+0x19c>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
  10da50:	ea000015 	b	10daac <netconn_drain+0x158>
      if (mem != &netconn_aborted) {
  10da54:	e51b2010 	ldr	r2, [fp, #-16]
  10da58:	e300357c 	movw	r3, #1404	; 0x57c
  10da5c:	e3403015 	movt	r3, #21
  10da60:	e1520003 	cmp	r2, r3
  10da64:	0a000010 	beq	10daac <netconn_drain+0x158>
        struct netconn *newconn = (struct netconn *)mem;
  10da68:	e51b3010 	ldr	r3, [fp, #-16]
  10da6c:	e50b300c 	str	r3, [fp, #-12]
        /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
        /* pcb might be set to NULL already by err_tcp() */
        /* drain recvmbox */
        netconn_drain(newconn);
  10da70:	e51b000c 	ldr	r0, [fp, #-12]
  10da74:	ebffffb6 	bl	10d954 <netconn_drain>
        if (newconn->pcb.tcp != NULL) {
  10da78:	e51b300c 	ldr	r3, [fp, #-12]
  10da7c:	e5933008 	ldr	r3, [r3, #8]
  10da80:	e3530000 	cmp	r3, #0
  10da84:	0a000006 	beq	10daa4 <netconn_drain+0x150>
          tcp_abort(newconn->pcb.tcp);
  10da88:	e51b300c 	ldr	r3, [fp, #-12]
  10da8c:	e5933008 	ldr	r3, [r3, #8]
  10da90:	e1a00003 	mov	r0, r3
  10da94:	eb00405a 	bl	11dc04 <tcp_abort>
          newconn->pcb.tcp = NULL;
  10da98:	e51b300c 	ldr	r3, [fp, #-12]
  10da9c:	e3a02000 	mov	r2, #0
  10daa0:	e5832008 	str	r2, [r3, #8]
        }
        netconn_free(newconn);
  10daa4:	e51b000c 	ldr	r0, [fp, #-12]
  10daa8:	ebffff70 	bl	10d870 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
  10daac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10dab0:	e2833018 	add	r3, r3, #24
  10dab4:	e24b2010 	sub	r2, fp, #16
  10dab8:	e1a01002 	mov	r1, r2
  10dabc:	e1a00003 	mov	r0, r3
  10dac0:	ebfff506 	bl	10aee0 <sys_arch_mbox_tryfetch>
  10dac4:	e1a03000 	mov	r3, r0
  10dac8:	e3730001 	cmn	r3, #1
  10dacc:	1affffe0 	bne	10da54 <netconn_drain+0x100>
      }
    }
    sys_mbox_free(&conn->acceptmbox);
  10dad0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10dad4:	e2833018 	add	r3, r3, #24
  10dad8:	e1a00003 	mov	r0, r3
  10dadc:	ebfff459 	bl	10ac48 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
  10dae0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10dae4:	e2833018 	add	r3, r3, #24
  10dae8:	e1a00003 	mov	r0, r3
  10daec:	ebfff51d 	bl	10af68 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
  10daf0:	e320f000 	nop	{0}
  10daf4:	e24bd004 	sub	sp, fp, #4
  10daf8:	e8bd8800 	pop	{fp, pc}

0010dafc <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
  10dafc:	e92d4800 	push	{fp, lr}
  10db00:	e28db004 	add	fp, sp, #4
  10db04:	e24dd020 	sub	sp, sp, #32
  10db08:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  10db0c:	e1a03001 	mov	r3, r1
  10db10:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
  err_t err;
  u8_t shut, shut_rx, shut_tx, close;
  u8_t close_finished = 0;
  10db14:	e3a03000 	mov	r3, #0
  10db18:	e54b3007 	strb	r3, [fp, #-7]
  struct tcp_pcb* tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
  10db1c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10db20:	e3530000 	cmp	r3, #0
  10db24:	1a000006 	bne	10db44 <lwip_netconn_do_close_internal+0x48>
  10db28:	e3060ac0 	movw	r0, #27328	; 0x6ac0
  10db2c:	e3400014 	movt	r0, #20
  10db30:	ebffd577 	bl	103114 <rt_kprintf>
  10db34:	e300133d 	movw	r1, #829	; 0x33d
  10db38:	e3060874 	movw	r0, #26740	; 0x6874
  10db3c:	e3400014 	movt	r0, #20
  10db40:	ebfff547 	bl	10b064 <sys_arch_assert>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
  10db44:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10db48:	e5933000 	ldr	r3, [r3]
  10db4c:	e20330f0 	and	r3, r3, #240	; 0xf0
  10db50:	e3530010 	cmp	r3, #16
  10db54:	0a000006 	beq	10db74 <lwip_netconn_do_close_internal+0x78>
  10db58:	e3060ad0 	movw	r0, #27344	; 0x6ad0
  10db5c:	e3400014 	movt	r0, #20
  10db60:	ebffd56b 	bl	103114 <rt_kprintf>
  10db64:	e300133e 	movw	r1, #830	; 0x33e
  10db68:	e3060874 	movw	r0, #26740	; 0x6874
  10db6c:	e3400014 	movt	r0, #20
  10db70:	ebfff53b 	bl	10b064 <sys_arch_assert>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
  10db74:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10db78:	e5933004 	ldr	r3, [r3, #4]
  10db7c:	e3530004 	cmp	r3, #4
  10db80:	0a000006 	beq	10dba0 <lwip_netconn_do_close_internal+0xa4>
  10db84:	e3060af0 	movw	r0, #27376	; 0x6af0
  10db88:	e3400014 	movt	r0, #20
  10db8c:	ebffd560 	bl	103114 <rt_kprintf>
  10db90:	e300133f 	movw	r1, #831	; 0x33f
  10db94:	e3060874 	movw	r0, #26740	; 0x6874
  10db98:	e3400014 	movt	r0, #20
  10db9c:	ebfff530 	bl	10b064 <sys_arch_assert>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
  10dba0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10dba4:	e5933008 	ldr	r3, [r3, #8]
  10dba8:	e3530000 	cmp	r3, #0
  10dbac:	1a000006 	bne	10dbcc <lwip_netconn_do_close_internal+0xd0>
  10dbb0:	e3060b14 	movw	r0, #27412	; 0x6b14
  10dbb4:	e3400014 	movt	r0, #20
  10dbb8:	ebffd555 	bl	103114 <rt_kprintf>
  10dbbc:	e3a01d0d 	mov	r1, #832	; 0x340
  10dbc0:	e3060874 	movw	r0, #26740	; 0x6874
  10dbc4:	e3400014 	movt	r0, #20
  10dbc8:	ebfff525 	bl	10b064 <sys_arch_assert>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
  10dbcc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10dbd0:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10dbd4:	e3530000 	cmp	r3, #0
  10dbd8:	1a000006 	bne	10dbf8 <lwip_netconn_do_close_internal+0xfc>
  10dbdc:	e306097c 	movw	r0, #27004	; 0x697c
  10dbe0:	e3400014 	movt	r0, #20
  10dbe4:	ebffd54a 	bl	103114 <rt_kprintf>
  10dbe8:	e3001341 	movw	r1, #833	; 0x341
  10dbec:	e3060874 	movw	r0, #26740	; 0x6874
  10dbf0:	e3400014 	movt	r0, #20
  10dbf4:	ebfff51a 	bl	10b064 <sys_arch_assert>

  tpcb = conn->pcb.tcp;
  10dbf8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10dbfc:	e5933008 	ldr	r3, [r3, #8]
  10dc00:	e50b3010 	str	r3, [fp, #-16]
  shut = conn->current_msg->msg.sd.shut;
  10dc04:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10dc08:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10dc0c:	e5d33008 	ldrb	r3, [r3, #8]
  10dc10:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  shut_rx = shut & NETCONN_SHUT_RD;
  10dc14:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  10dc18:	e2033001 	and	r3, r3, #1
  10dc1c:	e54b3012 	strb	r3, [fp, #-18]	; 0xffffffee
  shut_tx = shut & NETCONN_SHUT_WR;
  10dc20:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  10dc24:	e2033002 	and	r3, r3, #2
  10dc28:	e54b3013 	strb	r3, [fp, #-19]	; 0xffffffed
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
  10dc2c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  10dc30:	e3530003 	cmp	r3, #3
  10dc34:	1a000002 	bne	10dc44 <lwip_netconn_do_close_internal+0x148>
    close = 1;
  10dc38:	e3a03001 	mov	r3, #1
  10dc3c:	e54b3006 	strb	r3, [fp, #-6]
  10dc40:	ea00001e 	b	10dcc0 <lwip_netconn_do_close_internal+0x1c4>
  } else if (shut_rx &&
  10dc44:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
  10dc48:	e3530000 	cmp	r3, #0
  10dc4c:	0a00000e 	beq	10dc8c <lwip_netconn_do_close_internal+0x190>
             ((tpcb->state == FIN_WAIT_1) ||
  10dc50:	e51b3010 	ldr	r3, [fp, #-16]
  10dc54:	e5933014 	ldr	r3, [r3, #20]
  } else if (shut_rx &&
  10dc58:	e3530005 	cmp	r3, #5
  10dc5c:	0a000007 	beq	10dc80 <lwip_netconn_do_close_internal+0x184>
              (tpcb->state == FIN_WAIT_2) ||
  10dc60:	e51b3010 	ldr	r3, [fp, #-16]
  10dc64:	e5933014 	ldr	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
  10dc68:	e3530006 	cmp	r3, #6
  10dc6c:	0a000003 	beq	10dc80 <lwip_netconn_do_close_internal+0x184>
              (tpcb->state == CLOSING))) {
  10dc70:	e51b3010 	ldr	r3, [fp, #-16]
  10dc74:	e5933014 	ldr	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
  10dc78:	e3530008 	cmp	r3, #8
  10dc7c:	1a000002 	bne	10dc8c <lwip_netconn_do_close_internal+0x190>
    close = 1;
  10dc80:	e3a03001 	mov	r3, #1
  10dc84:	e54b3006 	strb	r3, [fp, #-6]
  10dc88:	ea00000c 	b	10dcc0 <lwip_netconn_do_close_internal+0x1c4>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
  10dc8c:	e55b3013 	ldrb	r3, [fp, #-19]	; 0xffffffed
  10dc90:	e3530000 	cmp	r3, #0
  10dc94:	0a000007 	beq	10dcb8 <lwip_netconn_do_close_internal+0x1bc>
  10dc98:	e51b3010 	ldr	r3, [fp, #-16]
  10dc9c:	e5d3301e 	ldrb	r3, [r3, #30]
  10dca0:	e2033010 	and	r3, r3, #16
  10dca4:	e3530000 	cmp	r3, #0
  10dca8:	0a000002 	beq	10dcb8 <lwip_netconn_do_close_internal+0x1bc>
    close = 1;
  10dcac:	e3a03001 	mov	r3, #1
  10dcb0:	e54b3006 	strb	r3, [fp, #-6]
  10dcb4:	ea000001 	b	10dcc0 <lwip_netconn_do_close_internal+0x1c4>
  } else {
    close = 0;
  10dcb8:	e3a03000 	mov	r3, #0
  10dcbc:	e54b3006 	strb	r3, [fp, #-6]
  }

  /* Set back some callback pointers */
  if (close) {
  10dcc0:	e55b3006 	ldrb	r3, [fp, #-6]
  10dcc4:	e3530000 	cmp	r3, #0
  10dcc8:	0a000002 	beq	10dcd8 <lwip_netconn_do_close_internal+0x1dc>
    tcp_arg(tpcb, NULL);
  10dccc:	e3a01000 	mov	r1, #0
  10dcd0:	e51b0010 	ldr	r0, [fp, #-16]
  10dcd4:	eb00481d 	bl	11fd50 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
  10dcd8:	e51b3010 	ldr	r3, [fp, #-16]
  10dcdc:	e5933014 	ldr	r3, [r3, #20]
  10dce0:	e3530001 	cmp	r3, #1
  10dce4:	1a000003 	bne	10dcf8 <lwip_netconn_do_close_internal+0x1fc>
    tcp_accept(tpcb, NULL);
  10dce8:	e3a01000 	mov	r1, #0
  10dcec:	e51b0010 	ldr	r0, [fp, #-16]
  10dcf0:	eb004870 	bl	11feb8 <tcp_accept>
  10dcf4:	ea000018 	b	10dd5c <lwip_netconn_do_close_internal+0x260>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
  10dcf8:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
  10dcfc:	e3530000 	cmp	r3, #0
  10dd00:	0a000005 	beq	10dd1c <lwip_netconn_do_close_internal+0x220>
      tcp_recv(tpcb, NULL);
  10dd04:	e3a01000 	mov	r1, #0
  10dd08:	e51b0010 	ldr	r0, [fp, #-16]
  10dd0c:	eb00481e 	bl	11fd8c <tcp_recv>
      tcp_accept(tpcb, NULL);
  10dd10:	e3a01000 	mov	r1, #0
  10dd14:	e51b0010 	ldr	r0, [fp, #-16]
  10dd18:	eb004866 	bl	11feb8 <tcp_accept>
    }
    if (shut_tx) {
  10dd1c:	e55b3013 	ldrb	r3, [fp, #-19]	; 0xffffffed
  10dd20:	e3530000 	cmp	r3, #0
  10dd24:	0a000002 	beq	10dd34 <lwip_netconn_do_close_internal+0x238>
      tcp_sent(tpcb, NULL);
  10dd28:	e3a01000 	mov	r1, #0
  10dd2c:	e51b0010 	ldr	r0, [fp, #-16]
  10dd30:	eb00482e 	bl	11fdf0 <tcp_sent>
    }
    if (close) {
  10dd34:	e55b3006 	ldrb	r3, [fp, #-6]
  10dd38:	e3530000 	cmp	r3, #0
  10dd3c:	0a000006 	beq	10dd5c <lwip_netconn_do_close_internal+0x260>
      tcp_poll(tpcb, NULL, 0);
  10dd40:	e3a02000 	mov	r2, #0
  10dd44:	e3a01000 	mov	r1, #0
  10dd48:	e51b0010 	ldr	r0, [fp, #-16]
  10dd4c:	eb00486e 	bl	11ff0c <tcp_poll>
      tcp_err(tpcb, NULL);
  10dd50:	e3a01000 	mov	r1, #0
  10dd54:	e51b0010 	ldr	r0, [fp, #-16]
  10dd58:	eb00483d 	bl	11fe54 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (close) {
  10dd5c:	e55b3006 	ldrb	r3, [fp, #-6]
  10dd60:	e3530000 	cmp	r3, #0
  10dd64:	0a000004 	beq	10dd7c <lwip_netconn_do_close_internal+0x280>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
  10dd68:	e51b0010 	ldr	r0, [fp, #-16]
  10dd6c:	eb003eb0 	bl	11d834 <tcp_close>
  10dd70:	e1a03000 	mov	r3, r0
  10dd74:	e54b3005 	strb	r3, [fp, #-5]
  10dd78:	ea000006 	b	10dd98 <lwip_netconn_do_close_internal+0x29c>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
  10dd7c:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
  10dd80:	e55b2013 	ldrb	r2, [fp, #-19]	; 0xffffffed
  10dd84:	e1a01003 	mov	r1, r3
  10dd88:	e51b0010 	ldr	r0, [fp, #-16]
  10dd8c:	eb003ebd 	bl	11d888 <tcp_shutdown>
  10dd90:	e1a03000 	mov	r3, r0
  10dd94:	e54b3005 	strb	r3, [fp, #-5]
  }
  if (err == ERR_OK) {
  10dd98:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10dd9c:	e3530000 	cmp	r3, #0
  10dda0:	1a000002 	bne	10ddb0 <lwip_netconn_do_close_internal+0x2b4>
    close_finished = 1;
  10dda4:	e3a03001 	mov	r3, #1
  10dda8:	e54b3007 	strb	r3, [fp, #-7]
  10ddac:	ea000021 	b	10de38 <lwip_netconn_do_close_internal+0x33c>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
  10ddb0:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10ddb4:	e3730001 	cmn	r3, #1
  10ddb8:	1a00001c 	bne	10de30 <lwip_netconn_do_close_internal+0x334>
         nonblocking netconns, we have to wait since no standard socket application
         is prepared for close failing because of resource shortage.
         Check the timeout: this is kind of an lwip addition to the standard sockets:
         we wait for some time when failing to allocate a segment for the FIN */
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
      s32_t close_timeout = LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT;
  10ddbc:	e3043e20 	movw	r3, #20000	; 0x4e20
  10ddc0:	e50b300c 	str	r3, [fp, #-12]
#if LWIP_SO_SNDTIMEO
      if (conn->send_timeout > 0) {
  10ddc4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ddc8:	e5933020 	ldr	r3, [r3, #32]
  10ddcc:	e3530000 	cmp	r3, #0
  10ddd0:	da000002 	ble	10dde0 <lwip_netconn_do_close_internal+0x2e4>
        close_timeout = conn->send_timeout;
  10ddd4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ddd8:	e5933020 	ldr	r3, [r3, #32]
  10dddc:	e50b300c 	str	r3, [fp, #-12]
      if (conn->linger >= 0) {
        /* use linger timeout (seconds) */
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
  10dde0:	ebfff4b8 	bl	10b0c8 <sys_now>
  10dde4:	e1a02000 	mov	r2, r0
  10dde8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10ddec:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10ddf0:	e593300c 	ldr	r3, [r3, #12]
  10ddf4:	e0423003 	sub	r3, r2, r3
  10ddf8:	e1a02003 	mov	r2, r3
  10ddfc:	e51b300c 	ldr	r3, [fp, #-12]
  10de00:	e1530002 	cmp	r3, r2
  10de04:	ca00000b 	bgt	10de38 <lwip_netconn_do_close_internal+0x33c>
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
  10de08:	e3a03001 	mov	r3, #1
  10de0c:	e54b3007 	strb	r3, [fp, #-7]
        if (close) {
  10de10:	e55b3006 	ldrb	r3, [fp, #-6]
  10de14:	e3530000 	cmp	r3, #0
  10de18:	0a000006 	beq	10de38 <lwip_netconn_do_close_internal+0x33c>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
  10de1c:	e51b0010 	ldr	r0, [fp, #-16]
  10de20:	eb003f77 	bl	11dc04 <tcp_abort>
          err = ERR_OK;
  10de24:	e3a03000 	mov	r3, #0
  10de28:	e54b3005 	strb	r3, [fp, #-5]
  10de2c:	ea000001 	b	10de38 <lwip_netconn_do_close_internal+0x33c>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
  10de30:	e3a03001 	mov	r3, #1
  10de34:	e54b3007 	strb	r3, [fp, #-7]
    }
  }
  if (close_finished) {
  10de38:	e55b3007 	ldrb	r3, [fp, #-7]
  10de3c:	e3530000 	cmp	r3, #0
  10de40:	0a00004e 	beq	10df80 <lwip_netconn_do_close_internal+0x484>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
  10de44:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10de48:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10de4c:	e5933000 	ldr	r3, [r3]
  10de50:	e2833010 	add	r3, r3, #16
  10de54:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    conn->current_msg->err = err;
  10de58:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10de5c:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10de60:	e55b2005 	ldrb	r2, [fp, #-5]
  10de64:	e5c32004 	strb	r2, [r3, #4]
    conn->current_msg = NULL;
  10de68:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10de6c:	e3a02000 	mov	r2, #0
  10de70:	e5832038 	str	r2, [r3, #56]	; 0x38
    conn->state = NETCONN_NONE;
  10de74:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10de78:	e3a02000 	mov	r2, #0
  10de7c:	e5832004 	str	r2, [r3, #4]
    if (err == ERR_OK) {
  10de80:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10de84:	e3530000 	cmp	r3, #0
  10de88:	1a000029 	bne	10df34 <lwip_netconn_do_close_internal+0x438>
      if (close) {
  10de8c:	e55b3006 	ldrb	r3, [fp, #-6]
  10de90:	e3530000 	cmp	r3, #0
  10de94:	0a00000c 	beq	10decc <lwip_netconn_do_close_internal+0x3d0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
  10de98:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10de9c:	e3a02000 	mov	r2, #0
  10dea0:	e5832008 	str	r2, [r3, #8]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
  10dea4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10dea8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10deac:	e3530000 	cmp	r3, #0
  10deb0:	0a000005 	beq	10decc <lwip_netconn_do_close_internal+0x3d0>
  10deb4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10deb8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10debc:	e3a02000 	mov	r2, #0
  10dec0:	e3a01004 	mov	r1, #4
  10dec4:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  10dec8:	e12fff33 	blx	r3
      }
      if (shut_rx) {
  10decc:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
  10ded0:	e3530000 	cmp	r3, #0
  10ded4:	0a000009 	beq	10df00 <lwip_netconn_do_close_internal+0x404>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
  10ded8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10dedc:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10dee0:	e3530000 	cmp	r3, #0
  10dee4:	0a000005 	beq	10df00 <lwip_netconn_do_close_internal+0x404>
  10dee8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10deec:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10def0:	e3a02000 	mov	r2, #0
  10def4:	e3a01000 	mov	r1, #0
  10def8:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  10defc:	e12fff33 	blx	r3
      }
      if (shut_tx) {
  10df00:	e55b3013 	ldrb	r3, [fp, #-19]	; 0xffffffed
  10df04:	e3530000 	cmp	r3, #0
  10df08:	0a000009 	beq	10df34 <lwip_netconn_do_close_internal+0x438>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
  10df0c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10df10:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10df14:	e3530000 	cmp	r3, #0
  10df18:	0a000005 	beq	10df34 <lwip_netconn_do_close_internal+0x438>
  10df1c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10df20:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10df24:	e3a02000 	mov	r2, #0
  10df28:	e3a01002 	mov	r1, #2
  10df2c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  10df30:	e12fff33 	blx	r3
      }
    }
    NETCONN_SET_SAFE_ERR(conn, err);
  10df34:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10df38:	e3530000 	cmp	r3, #0
  10df3c:	0a000008 	beq	10df64 <lwip_netconn_do_close_internal+0x468>
  10df40:	ebffd0bd 	bl	10223c <rt_enter_critical>
  10df44:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10df48:	e1d330dc 	ldrsb	r3, [r3, #12]
  10df4c:	e373000c 	cmn	r3, #12
  10df50:	ba000002 	blt	10df60 <lwip_netconn_do_close_internal+0x464>
  10df54:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10df58:	e55b2005 	ldrb	r2, [fp, #-5]
  10df5c:	e5c3200c 	strb	r2, [r3, #12]
  10df60:	ebffd0bb 	bl	102254 <rt_exit_critical>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
  10df64:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  10df68:	e3530000 	cmp	r3, #0
  10df6c:	0a000001 	beq	10df78 <lwip_netconn_do_close_internal+0x47c>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
  10df70:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  10df74:	ebfff1de 	bl	10a6f4 <sys_sem_signal>
    }
    return ERR_OK;
  10df78:	e3a03000 	mov	r3, #0
  10df7c:	ea00002b 	b	10e030 <lwip_netconn_do_close_internal+0x534>
  }
  if (!close_finished) {
  10df80:	e55b3007 	ldrb	r3, [fp, #-7]
  10df84:	e3530000 	cmp	r3, #0
  10df88:	1a00001d 	bne	10e004 <lwip_netconn_do_close_internal+0x508>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
  10df8c:	e51b3010 	ldr	r3, [fp, #-16]
  10df90:	e5933014 	ldr	r3, [r3, #20]
  10df94:	e3530001 	cmp	r3, #1
  10df98:	1a000006 	bne	10dfb8 <lwip_netconn_do_close_internal+0x4bc>
  10df9c:	e3060b28 	movw	r0, #27432	; 0x6b28
  10dfa0:	e3400014 	movt	r0, #20
  10dfa4:	ebffd45a 	bl	103114 <rt_kprintf>
  10dfa8:	e30013dd 	movw	r1, #989	; 0x3dd
  10dfac:	e3060874 	movw	r0, #26740	; 0x6874
  10dfb0:	e3400014 	movt	r0, #20
  10dfb4:	ebfff42a 	bl	10b064 <sys_arch_assert>
    if (shut_tx) {
  10dfb8:	e55b3013 	ldrb	r3, [fp, #-19]	; 0xffffffed
  10dfbc:	e3530000 	cmp	r3, #0
  10dfc0:	0a000003 	beq	10dfd4 <lwip_netconn_do_close_internal+0x4d8>
      tcp_sent(tpcb, sent_tcp);
  10dfc4:	e30c1d44 	movw	r1, #52548	; 0xcd44
  10dfc8:	e3401010 	movt	r1, #16
  10dfcc:	e51b0010 	ldr	r0, [fp, #-16]
  10dfd0:	eb004786 	bl	11fdf0 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
  10dfd4:	e3a02001 	mov	r2, #1
  10dfd8:	e30c1c28 	movw	r1, #52264	; 0xcc28
  10dfdc:	e3401010 	movt	r1, #16
  10dfe0:	e51b0010 	ldr	r0, [fp, #-16]
  10dfe4:	eb0047c8 	bl	11ff0c <tcp_poll>
    tcp_err(tpcb, err_tcp);
  10dfe8:	e30c1e60 	movw	r1, #52832	; 0xce60
  10dfec:	e3401010 	movt	r1, #16
  10dff0:	e51b0010 	ldr	r0, [fp, #-16]
  10dff4:	eb004796 	bl	11fe54 <tcp_err>
    tcp_arg(tpcb, conn);
  10dff8:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  10dffc:	e51b0010 	ldr	r0, [fp, #-16]
  10e000:	eb004752 	bl	11fd50 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
  10e004:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10e008:	e3530000 	cmp	r3, #0
  10e00c:	1a000006 	bne	10e02c <lwip_netconn_do_close_internal+0x530>
  10e010:	e3060b4c 	movw	r0, #27468	; 0x6b4c
  10e014:	e3400014 	movt	r0, #20
  10e018:	ebffd43d 	bl	103114 <rt_kprintf>
  10e01c:	e30013e9 	movw	r1, #1001	; 0x3e9
  10e020:	e3060874 	movw	r0, #26740	; 0x6874
  10e024:	e3400014 	movt	r0, #20
  10e028:	ebfff40d 	bl	10b064 <sys_arch_assert>
  return err;
  10e02c:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  10e030:	e1a00003 	mov	r0, r3
  10e034:	e24bd004 	sub	sp, fp, #4
  10e038:	e8bd8800 	pop	{fp, pc}

0010e03c <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
  10e03c:	e92d4800 	push	{fp, lr}
  10e040:	e28db004 	add	fp, sp, #4
  10e044:	e24dd010 	sub	sp, sp, #16
  10e048:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10e04c:	e51b3010 	ldr	r3, [fp, #-16]
  10e050:	e50b3008 	str	r3, [fp, #-8]

  enum netconn_state state = msg->conn->state;
  10e054:	e51b3008 	ldr	r3, [fp, #-8]
  10e058:	e5933000 	ldr	r3, [r3]
  10e05c:	e5933004 	ldr	r3, [r3, #4]
  10e060:	e50b300c 	str	r3, [fp, #-12]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
  10e064:	e51b300c 	ldr	r3, [fp, #-12]
  10e068:	e3530000 	cmp	r3, #0
  10e06c:	0a00000c 	beq	10e0a4 <lwip_netconn_do_delconn+0x68>
  10e070:	e51b3008 	ldr	r3, [fp, #-8]
  10e074:	e5933000 	ldr	r3, [r3]
  10e078:	e5933000 	ldr	r3, [r3]
  10e07c:	e20330f0 	and	r3, r3, #240	; 0xf0
  10e080:	e3530010 	cmp	r3, #16
  10e084:	0a000006 	beq	10e0a4 <lwip_netconn_do_delconn+0x68>
  10e088:	e3060b5c 	movw	r0, #27484	; 0x6b5c
  10e08c:	e3400014 	movt	r0, #20
  10e090:	ebffd41f 	bl	103114 <rt_kprintf>
  10e094:	e30013fb 	movw	r1, #1019	; 0x3fb
  10e098:	e3060874 	movw	r0, #26740	; 0x6874
  10e09c:	e3400014 	movt	r0, #20
  10e0a0:	ebfff3ef 	bl	10b064 <sys_arch_assert>
      NETCONN_SET_SAFE_ERR(msg->conn, ERR_CLSD);
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
  10e0a4:	e51b300c 	ldr	r3, [fp, #-12]
  10e0a8:	e3530000 	cmp	r3, #0
  10e0ac:	0a000005 	beq	10e0c8 <lwip_netconn_do_delconn+0x8c>
  10e0b0:	e51b300c 	ldr	r3, [fp, #-12]
  10e0b4:	e3530002 	cmp	r3, #2
  10e0b8:	0a000002 	beq	10e0c8 <lwip_netconn_do_delconn+0x8c>
       (state != NETCONN_LISTEN) &&
  10e0bc:	e51b300c 	ldr	r3, [fp, #-12]
  10e0c0:	e3530003 	cmp	r3, #3
  10e0c4:	1a000008 	bne	10e0ec <lwip_netconn_do_delconn+0xb0>
       (state != NETCONN_CONNECT)) ||
  10e0c8:	e51b300c 	ldr	r3, [fp, #-12]
  10e0cc:	e3530003 	cmp	r3, #3
  10e0d0:	1a000009 	bne	10e0fc <lwip_netconn_do_delconn+0xc0>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
  10e0d4:	e51b3008 	ldr	r3, [fp, #-8]
  10e0d8:	e5933000 	ldr	r3, [r3]
  10e0dc:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10e0e0:	e2033004 	and	r3, r3, #4
  10e0e4:	e3530000 	cmp	r3, #0
  10e0e8:	1a000003 	bne	10e0fc <lwip_netconn_do_delconn+0xc0>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
  10e0ec:	e51b3008 	ldr	r3, [fp, #-8]
  10e0f0:	e3e02004 	mvn	r2, #4
  10e0f4:	e5c32004 	strb	r2, [r3, #4]
  10e0f8:	ea00009e 	b	10e378 <lwip_netconn_do_delconn+0x33c>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
  10e0fc:	e51b300c 	ldr	r3, [fp, #-12]
  10e100:	e3530003 	cmp	r3, #3
  10e104:	1a00000c 	bne	10e13c <lwip_netconn_do_delconn+0x100>
  10e108:	e51b3008 	ldr	r3, [fp, #-8]
  10e10c:	e5933000 	ldr	r3, [r3]
  10e110:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10e114:	e2033004 	and	r3, r3, #4
  10e118:	e3530000 	cmp	r3, #0
  10e11c:	1a000006 	bne	10e13c <lwip_netconn_do_delconn+0x100>
  10e120:	e3060b70 	movw	r0, #27504	; 0x6b70
  10e124:	e3400014 	movt	r0, #20
  10e128:	ebffd3f9 	bl	103114 <rt_kprintf>
  10e12c:	e3001419 	movw	r1, #1049	; 0x419
  10e130:	e3060874 	movw	r0, #26740	; 0x6874
  10e134:	e3400014 	movt	r0, #20
  10e138:	ebfff3c9 	bl	10b064 <sys_arch_assert>
      (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
  10e13c:	e51b3008 	ldr	r3, [fp, #-8]
  10e140:	e3a02000 	mov	r2, #0
  10e144:	e5c32004 	strb	r2, [r3, #4]
    /* Drain and delete mboxes */
    netconn_drain(msg->conn);
  10e148:	e51b3008 	ldr	r3, [fp, #-8]
  10e14c:	e5933000 	ldr	r3, [r3]
  10e150:	e1a00003 	mov	r0, r3
  10e154:	ebfffdfe 	bl	10d954 <netconn_drain>

    if (msg->conn->pcb.tcp != NULL) {
  10e158:	e51b3008 	ldr	r3, [fp, #-8]
  10e15c:	e5933000 	ldr	r3, [r3]
  10e160:	e5933008 	ldr	r3, [r3, #8]
  10e164:	e3530000 	cmp	r3, #0
  10e168:	0a000068 	beq	10e310 <lwip_netconn_do_delconn+0x2d4>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
  10e16c:	e51b3008 	ldr	r3, [fp, #-8]
  10e170:	e5933000 	ldr	r3, [r3]
  10e174:	e5933000 	ldr	r3, [r3]
  10e178:	e20330f0 	and	r3, r3, #240	; 0xf0
  10e17c:	e3530020 	cmp	r3, #32
  10e180:	0a00000a 	beq	10e1b0 <lwip_netconn_do_delconn+0x174>
  10e184:	e3530040 	cmp	r3, #64	; 0x40
  10e188:	0a000002 	beq	10e198 <lwip_netconn_do_delconn+0x15c>
  10e18c:	e3530010 	cmp	r3, #16
  10e190:	0a000011 	beq	10e1dc <lwip_netconn_do_delconn+0x1a0>
        /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
           the application thread, so we can return at this point! */
        return;
#endif /* LWIP_TCP */
      default:
        break;
  10e194:	ea000059 	b	10e300 <lwip_netconn_do_delconn+0x2c4>
        raw_remove(msg->conn->pcb.raw);
  10e198:	e51b3008 	ldr	r3, [fp, #-8]
  10e19c:	e5933000 	ldr	r3, [r3]
  10e1a0:	e5933008 	ldr	r3, [r3, #8]
  10e1a4:	e1a00003 	mov	r0, r3
  10e1a8:	eb0039d7 	bl	11c90c <raw_remove>
        break;
  10e1ac:	ea000053 	b	10e300 <lwip_netconn_do_delconn+0x2c4>
        msg->conn->pcb.udp->recv_arg = NULL;
  10e1b0:	e51b3008 	ldr	r3, [fp, #-8]
  10e1b4:	e5933000 	ldr	r3, [r3]
  10e1b8:	e5933008 	ldr	r3, [r3, #8]
  10e1bc:	e3a02000 	mov	r2, #0
  10e1c0:	e5832024 	str	r2, [r3, #36]	; 0x24
        udp_remove(msg->conn->pcb.udp);
  10e1c4:	e51b3008 	ldr	r3, [fp, #-8]
  10e1c8:	e5933000 	ldr	r3, [r3]
  10e1cc:	e5933008 	ldr	r3, [r3, #8]
  10e1d0:	e1a00003 	mov	r0, r3
  10e1d4:	eb006a81 	bl	128be0 <udp_remove>
        break;
  10e1d8:	ea000048 	b	10e300 <lwip_netconn_do_delconn+0x2c4>
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
  10e1dc:	e51b3008 	ldr	r3, [fp, #-8]
  10e1e0:	e5933000 	ldr	r3, [r3]
  10e1e4:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10e1e8:	e3530000 	cmp	r3, #0
  10e1ec:	1a000004 	bne	10e204 <lwip_netconn_do_delconn+0x1c8>
  10e1f0:	e51b3008 	ldr	r3, [fp, #-8]
  10e1f4:	e5933000 	ldr	r3, [r3]
  10e1f8:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  10e1fc:	e3530000 	cmp	r3, #0
  10e200:	0a000006 	beq	10e220 <lwip_netconn_do_delconn+0x1e4>
  10e204:	e3060b90 	movw	r0, #27536	; 0x6b90
  10e208:	e3400014 	movt	r0, #20
  10e20c:	ebffd3c0 	bl	103114 <rt_kprintf>
  10e210:	e300142f 	movw	r1, #1071	; 0x42f
  10e214:	e3060874 	movw	r0, #26740	; 0x6874
  10e218:	e3400014 	movt	r0, #20
  10e21c:	ebfff390 	bl	10b064 <sys_arch_assert>
        msg->conn->state = NETCONN_CLOSE;
  10e220:	e51b3008 	ldr	r3, [fp, #-8]
  10e224:	e5933000 	ldr	r3, [r3]
  10e228:	e3a02004 	mov	r2, #4
  10e22c:	e5832004 	str	r2, [r3, #4]
        msg->msg.sd.shut = NETCONN_SHUT_RDWR;
  10e230:	e51b3008 	ldr	r3, [fp, #-8]
  10e234:	e3a02003 	mov	r2, #3
  10e238:	e5c32008 	strb	r2, [r3, #8]
        msg->conn->current_msg = msg;
  10e23c:	e51b3008 	ldr	r3, [fp, #-8]
  10e240:	e5933000 	ldr	r3, [r3]
  10e244:	e51b2008 	ldr	r2, [fp, #-8]
  10e248:	e5832038 	str	r2, [r3, #56]	; 0x38
        if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
  10e24c:	e51b3008 	ldr	r3, [fp, #-8]
  10e250:	e5933000 	ldr	r3, [r3]
  10e254:	e3a01000 	mov	r1, #0
  10e258:	e1a00003 	mov	r0, r3
  10e25c:	ebfffe26 	bl	10dafc <lwip_netconn_do_close_internal>
  10e260:	e1a03000 	mov	r3, r0
  10e264:	e3530000 	cmp	r3, #0
  10e268:	0a00005b 	beq	10e3dc <lwip_netconn_do_delconn+0x3a0>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
  10e26c:	e51b3008 	ldr	r3, [fp, #-8]
  10e270:	e5933000 	ldr	r3, [r3]
  10e274:	e5933004 	ldr	r3, [r3, #4]
  10e278:	e3530004 	cmp	r3, #4
  10e27c:	0a000006 	beq	10e29c <lwip_netconn_do_delconn+0x260>
  10e280:	e3060bac 	movw	r0, #27564	; 0x6bac
  10e284:	e3400014 	movt	r0, #20
  10e288:	ebffd3a1 	bl	103114 <rt_kprintf>
  10e28c:	e3001435 	movw	r1, #1077	; 0x435
  10e290:	e3060874 	movw	r0, #26740	; 0x6874
  10e294:	e3400014 	movt	r0, #20
  10e298:	ebfff371 	bl	10b064 <sys_arch_assert>
          UNLOCK_TCPIP_CORE();
  10e29c:	e30005e4 	movw	r0, #1508	; 0x5e4
  10e2a0:	e3400015 	movt	r0, #21
  10e2a4:	ebfff199 	bl	10a910 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
  10e2a8:	e51b3008 	ldr	r3, [fp, #-8]
  10e2ac:	e5933000 	ldr	r3, [r3]
  10e2b0:	e2833010 	add	r3, r3, #16
  10e2b4:	e3a01000 	mov	r1, #0
  10e2b8:	e1a00003 	mov	r0, r3
  10e2bc:	ebfff117 	bl	10a720 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
  10e2c0:	e30005e4 	movw	r0, #1508	; 0x5e4
  10e2c4:	e3400015 	movt	r0, #21
  10e2c8:	ebfff184 	bl	10a8e0 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
  10e2cc:	e51b3008 	ldr	r3, [fp, #-8]
  10e2d0:	e5933000 	ldr	r3, [r3]
  10e2d4:	e5933004 	ldr	r3, [r3, #4]
  10e2d8:	e3530000 	cmp	r3, #0
  10e2dc:	0a00003e 	beq	10e3dc <lwip_netconn_do_delconn+0x3a0>
  10e2e0:	e3060bac 	movw	r0, #27564	; 0x6bac
  10e2e4:	e3400014 	movt	r0, #20
  10e2e8:	ebffd389 	bl	103114 <rt_kprintf>
  10e2ec:	e3001439 	movw	r1, #1081	; 0x439
  10e2f0:	e3060874 	movw	r0, #26740	; 0x6874
  10e2f4:	e3400014 	movt	r0, #20
  10e2f8:	ebfff359 	bl	10b064 <sys_arch_assert>
        return;
  10e2fc:	ea000036 	b	10e3dc <lwip_netconn_do_delconn+0x3a0>
      }
      msg->conn->pcb.tcp = NULL;
  10e300:	e51b3008 	ldr	r3, [fp, #-8]
  10e304:	e5933000 	ldr	r3, [r3]
  10e308:	e3a02000 	mov	r2, #0
  10e30c:	e5832008 	str	r2, [r3, #8]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
  10e310:	e51b3008 	ldr	r3, [fp, #-8]
  10e314:	e5933000 	ldr	r3, [r3]
  10e318:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10e31c:	e3530000 	cmp	r3, #0
  10e320:	0a000007 	beq	10e344 <lwip_netconn_do_delconn+0x308>
  10e324:	e51b3008 	ldr	r3, [fp, #-8]
  10e328:	e5933000 	ldr	r3, [r3]
  10e32c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10e330:	e51b2008 	ldr	r2, [fp, #-8]
  10e334:	e5920000 	ldr	r0, [r2]
  10e338:	e3a02000 	mov	r2, #0
  10e33c:	e3a01000 	mov	r1, #0
  10e340:	e12fff33 	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
  10e344:	e51b3008 	ldr	r3, [fp, #-8]
  10e348:	e5933000 	ldr	r3, [r3]
  10e34c:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10e350:	e3530000 	cmp	r3, #0
  10e354:	0a000007 	beq	10e378 <lwip_netconn_do_delconn+0x33c>
  10e358:	e51b3008 	ldr	r3, [fp, #-8]
  10e35c:	e5933000 	ldr	r3, [r3]
  10e360:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10e364:	e51b2008 	ldr	r2, [fp, #-8]
  10e368:	e5920000 	ldr	r0, [r2]
  10e36c:	e3a02000 	mov	r2, #0
  10e370:	e3a01002 	mov	r1, #2
  10e374:	e12fff33 	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
  10e378:	e51b3008 	ldr	r3, [fp, #-8]
  10e37c:	e5933000 	ldr	r3, [r3]
  10e380:	e2833010 	add	r3, r3, #16
  10e384:	e1a00003 	mov	r0, r3
  10e388:	ebfff117 	bl	10a7ec <sys_sem_valid>
  10e38c:	e1a03000 	mov	r3, r0
  10e390:	e3530000 	cmp	r3, #0
  10e394:	0a000011 	beq	10e3e0 <lwip_netconn_do_delconn+0x3a4>
    TCPIP_APIMSG_ACK(msg);
  10e398:	e51b3008 	ldr	r3, [fp, #-8]
  10e39c:	e5933000 	ldr	r3, [r3]
  10e3a0:	e3530000 	cmp	r3, #0
  10e3a4:	0a00000d 	beq	10e3e0 <lwip_netconn_do_delconn+0x3a4>
  10e3a8:	ebffcfa3 	bl	10223c <rt_enter_critical>
  10e3ac:	e51b3008 	ldr	r3, [fp, #-8]
  10e3b0:	e5933000 	ldr	r3, [r3]
  10e3b4:	e1d330dc 	ldrsb	r3, [r3, #12]
  10e3b8:	e373000c 	cmn	r3, #12
  10e3bc:	ba000004 	blt	10e3d4 <lwip_netconn_do_delconn+0x398>
  10e3c0:	e51b3008 	ldr	r3, [fp, #-8]
  10e3c4:	e5933000 	ldr	r3, [r3]
  10e3c8:	e51b2008 	ldr	r2, [fp, #-8]
  10e3cc:	e1d220d4 	ldrsb	r2, [r2, #4]
  10e3d0:	e5c3200c 	strb	r2, [r3, #12]
  10e3d4:	ebffcf9e 	bl	102254 <rt_exit_critical>
  10e3d8:	ea000000 	b	10e3e0 <lwip_netconn_do_delconn+0x3a4>
        return;
  10e3dc:	e320f000 	nop	{0}
  }
}
  10e3e0:	e24bd004 	sub	sp, fp, #4
  10e3e4:	e8bd8800 	pop	{fp, pc}

0010e3e8 <lwip_netconn_do_bind>:
 * @param m the api_msg_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
  10e3e8:	e92d4800 	push	{fp, lr}
  10e3ec:	e28db004 	add	fp, sp, #4
  10e3f0:	e24dd010 	sub	sp, sp, #16
  10e3f4:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10e3f8:	e51b3010 	ldr	r3, [fp, #-16]
  10e3fc:	e50b3008 	str	r3, [fp, #-8]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
  10e400:	e51b3008 	ldr	r3, [fp, #-8]
  10e404:	e5933000 	ldr	r3, [r3]
  10e408:	e1d330dc 	ldrsb	r3, [r3, #12]
  10e40c:	e373000c 	cmn	r3, #12
  10e410:	aa000005 	bge	10e42c <lwip_netconn_do_bind+0x44>
    msg->err = msg->conn->last_err;
  10e414:	e51b3008 	ldr	r3, [fp, #-8]
  10e418:	e5933000 	ldr	r3, [r3]
  10e41c:	e1d320dc 	ldrsb	r2, [r3, #12]
  10e420:	e51b3008 	ldr	r3, [fp, #-8]
  10e424:	e5c32004 	strb	r2, [r3, #4]
  10e428:	ea00003c 	b	10e520 <lwip_netconn_do_bind+0x138>
  } else {
    msg->err = ERR_VAL;
  10e42c:	e51b3008 	ldr	r3, [fp, #-8]
  10e430:	e3e02005 	mvn	r2, #5
  10e434:	e5c32004 	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
  10e438:	e51b3008 	ldr	r3, [fp, #-8]
  10e43c:	e5933000 	ldr	r3, [r3]
  10e440:	e5933008 	ldr	r3, [r3, #8]
  10e444:	e3530000 	cmp	r3, #0
  10e448:	0a000033 	beq	10e51c <lwip_netconn_do_bind+0x134>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
  10e44c:	e51b3008 	ldr	r3, [fp, #-8]
  10e450:	e5933000 	ldr	r3, [r3]
  10e454:	e5933000 	ldr	r3, [r3]
  10e458:	e20330f0 	and	r3, r3, #240	; 0xf0
  10e45c:	e3530020 	cmp	r3, #32
  10e460:	0a000011 	beq	10e4ac <lwip_netconn_do_bind+0xc4>
  10e464:	e3530040 	cmp	r3, #64	; 0x40
  10e468:	0a000002 	beq	10e478 <lwip_netconn_do_bind+0x90>
  10e46c:	e3530010 	cmp	r3, #16
  10e470:	0a00001b 	beq	10e4e4 <lwip_netconn_do_bind+0xfc>
      case NETCONN_TCP:
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
        break;
#endif /* LWIP_TCP */
      default:
        break;
  10e474:	ea000029 	b	10e520 <lwip_netconn_do_bind+0x138>
        msg->err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
  10e478:	e51b3008 	ldr	r3, [fp, #-8]
  10e47c:	e5933000 	ldr	r3, [r3]
  10e480:	e5932008 	ldr	r2, [r3, #8]
  10e484:	e51b3008 	ldr	r3, [fp, #-8]
  10e488:	e5933008 	ldr	r3, [r3, #8]
  10e48c:	e1a01003 	mov	r1, r3
  10e490:	e1a00002 	mov	r0, r2
  10e494:	eb003839 	bl	11c580 <raw_bind>
  10e498:	e1a03000 	mov	r3, r0
  10e49c:	e1a02003 	mov	r2, r3
  10e4a0:	e51b3008 	ldr	r3, [fp, #-8]
  10e4a4:	e5c32004 	strb	r2, [r3, #4]
        break;
  10e4a8:	ea00001c 	b	10e520 <lwip_netconn_do_bind+0x138>
        msg->err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
  10e4ac:	e51b3008 	ldr	r3, [fp, #-8]
  10e4b0:	e5933000 	ldr	r3, [r3]
  10e4b4:	e5930008 	ldr	r0, [r3, #8]
  10e4b8:	e51b3008 	ldr	r3, [fp, #-8]
  10e4bc:	e5931008 	ldr	r1, [r3, #8]
  10e4c0:	e51b3008 	ldr	r3, [fp, #-8]
  10e4c4:	e1d330bc 	ldrh	r3, [r3, #12]
  10e4c8:	e1a02003 	mov	r2, r3
  10e4cc:	eb0068d9 	bl	128838 <udp_bind>
  10e4d0:	e1a03000 	mov	r3, r0
  10e4d4:	e1a02003 	mov	r2, r3
  10e4d8:	e51b3008 	ldr	r3, [fp, #-8]
  10e4dc:	e5c32004 	strb	r2, [r3, #4]
        break;
  10e4e0:	ea00000e 	b	10e520 <lwip_netconn_do_bind+0x138>
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
  10e4e4:	e51b3008 	ldr	r3, [fp, #-8]
  10e4e8:	e5933000 	ldr	r3, [r3]
  10e4ec:	e5930008 	ldr	r0, [r3, #8]
  10e4f0:	e51b3008 	ldr	r3, [fp, #-8]
  10e4f4:	e5931008 	ldr	r1, [r3, #8]
  10e4f8:	e51b3008 	ldr	r3, [fp, #-8]
  10e4fc:	e1d330bc 	ldrh	r3, [r3, #12]
  10e500:	e1a02003 	mov	r2, r3
  10e504:	eb003dc8 	bl	11dc2c <tcp_bind>
  10e508:	e1a03000 	mov	r3, r0
  10e50c:	e1a02003 	mov	r2, r3
  10e510:	e51b3008 	ldr	r3, [fp, #-8]
  10e514:	e5c32004 	strb	r2, [r3, #4]
        break;
  10e518:	ea000000 	b	10e520 <lwip_netconn_do_bind+0x138>
      }
    }
  10e51c:	e320f000 	nop	{0}
  }
  TCPIP_APIMSG_ACK(msg);
  10e520:	e51b3008 	ldr	r3, [fp, #-8]
  10e524:	e5933000 	ldr	r3, [r3]
  10e528:	e3530000 	cmp	r3, #0
  10e52c:	0a00000b 	beq	10e560 <lwip_netconn_do_bind+0x178>
  10e530:	ebffcf41 	bl	10223c <rt_enter_critical>
  10e534:	e51b3008 	ldr	r3, [fp, #-8]
  10e538:	e5933000 	ldr	r3, [r3]
  10e53c:	e1d330dc 	ldrsb	r3, [r3, #12]
  10e540:	e373000c 	cmn	r3, #12
  10e544:	ba000004 	blt	10e55c <lwip_netconn_do_bind+0x174>
  10e548:	e51b3008 	ldr	r3, [fp, #-8]
  10e54c:	e5933000 	ldr	r3, [r3]
  10e550:	e51b2008 	ldr	r2, [fp, #-8]
  10e554:	e1d220d4 	ldrsb	r2, [r2, #4]
  10e558:	e5c3200c 	strb	r2, [r3, #12]
  10e55c:	ebffcf3c 	bl	102254 <rt_exit_critical>
}
  10e560:	e320f000 	nop	{0}
  10e564:	e24bd004 	sub	sp, fp, #4
  10e568:	e8bd8800 	pop	{fp, pc}

0010e56c <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
  10e56c:	e92d4800 	push	{fp, lr}
  10e570:	e28db004 	add	fp, sp, #4
  10e574:	e24dd020 	sub	sp, sp, #32
  10e578:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  10e57c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  10e580:	e1a03002 	mov	r3, r2
  10e584:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
  struct netconn *conn;
  int was_blocking;
  sys_sem_t* op_completed_sem = NULL;
  10e588:	e3a03000 	mov	r3, #0
  10e58c:	e50b3008 	str	r3, [fp, #-8]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
  10e590:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10e594:	e50b300c 	str	r3, [fp, #-12]

  if (conn == NULL) {
  10e598:	e51b300c 	ldr	r3, [fp, #-12]
  10e59c:	e3530000 	cmp	r3, #0
  10e5a0:	1a000001 	bne	10e5ac <lwip_netconn_do_connected+0x40>
    return ERR_VAL;
  10e5a4:	e3e03005 	mvn	r3, #5
  10e5a8:	ea000074 	b	10e780 <lwip_netconn_do_connected+0x214>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
  10e5ac:	e51b300c 	ldr	r3, [fp, #-12]
  10e5b0:	e5933004 	ldr	r3, [r3, #4]
  10e5b4:	e3530003 	cmp	r3, #3
  10e5b8:	0a000006 	beq	10e5d8 <lwip_netconn_do_connected+0x6c>
  10e5bc:	e3060bb4 	movw	r0, #27572	; 0x6bb4
  10e5c0:	e3400014 	movt	r0, #20
  10e5c4:	ebffd2d2 	bl	103114 <rt_kprintf>
  10e5c8:	e3001492 	movw	r1, #1170	; 0x492
  10e5cc:	e3060874 	movw	r0, #26740	; 0x6874
  10e5d0:	e3400014 	movt	r0, #20
  10e5d4:	ebfff2a2 	bl	10b064 <sys_arch_assert>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
  10e5d8:	e51b300c 	ldr	r3, [fp, #-12]
  10e5dc:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10e5e0:	e3530000 	cmp	r3, #0
  10e5e4:	1a00000b 	bne	10e618 <lwip_netconn_do_connected+0xac>
  10e5e8:	e51b300c 	ldr	r3, [fp, #-12]
  10e5ec:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10e5f0:	e2033004 	and	r3, r3, #4
  10e5f4:	e3530000 	cmp	r3, #0
  10e5f8:	1a000006 	bne	10e618 <lwip_netconn_do_connected+0xac>
  10e5fc:	e3060bd4 	movw	r0, #27604	; 0x6bd4
  10e600:	e3400014 	movt	r0, #20
  10e604:	ebffd2c2 	bl	103114 <rt_kprintf>
  10e608:	e3001494 	movw	r1, #1172	; 0x494
  10e60c:	e3060874 	movw	r0, #26740	; 0x6874
  10e610:	e3400014 	movt	r0, #20
  10e614:	ebfff292 	bl	10b064 <sys_arch_assert>
    (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
  10e618:	e51b300c 	ldr	r3, [fp, #-12]
  10e61c:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10e620:	e3530000 	cmp	r3, #0
  10e624:	0a000008 	beq	10e64c <lwip_netconn_do_connected+0xe0>
    conn->current_msg->err = err;
  10e628:	e51b300c 	ldr	r3, [fp, #-12]
  10e62c:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10e630:	e55b201d 	ldrb	r2, [fp, #-29]	; 0xffffffe3
  10e634:	e5c32004 	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
  10e638:	e51b300c 	ldr	r3, [fp, #-12]
  10e63c:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10e640:	e5933000 	ldr	r3, [r3]
  10e644:	e2833010 	add	r3, r3, #16
  10e648:	e50b3008 	str	r3, [fp, #-8]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
  10e64c:	e51b300c 	ldr	r3, [fp, #-12]
  10e650:	e5933000 	ldr	r3, [r3]
  10e654:	e20330f0 	and	r3, r3, #240	; 0xf0
  10e658:	e3530010 	cmp	r3, #16
  10e65c:	1a000004 	bne	10e674 <lwip_netconn_do_connected+0x108>
  10e660:	e15b31dd 	ldrsb	r3, [fp, #-29]	; 0xffffffe3
  10e664:	e3530000 	cmp	r3, #0
  10e668:	1a000001 	bne	10e674 <lwip_netconn_do_connected+0x108>
    setup_tcp(conn);
  10e66c:	e51b000c 	ldr	r0, [fp, #-12]
  10e670:	ebfffabe 	bl	10d170 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
  10e674:	e51b300c 	ldr	r3, [fp, #-12]
  10e678:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10e67c:	e2033004 	and	r3, r3, #4
  10e680:	e3530000 	cmp	r3, #0
  10e684:	03a03001 	moveq	r3, #1
  10e688:	13a03000 	movne	r3, #0
  10e68c:	e6ef3073 	uxtb	r3, r3
  10e690:	e50b3010 	str	r3, [fp, #-16]
  SET_NONBLOCKING_CONNECT(conn, 0);
  10e694:	e51b300c 	ldr	r3, [fp, #-12]
  10e698:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10e69c:	e3c33004 	bic	r3, r3, #4
  10e6a0:	e6ef2073 	uxtb	r2, r3
  10e6a4:	e51b300c 	ldr	r3, [fp, #-12]
  10e6a8:	e5c32030 	strb	r2, [r3, #48]	; 0x30
  LWIP_ASSERT("blocking connect state error",
  10e6ac:	e51b3010 	ldr	r3, [fp, #-16]
  10e6b0:	e3530000 	cmp	r3, #0
  10e6b4:	0a000002 	beq	10e6c4 <lwip_netconn_do_connected+0x158>
  10e6b8:	e51b3008 	ldr	r3, [fp, #-8]
  10e6bc:	e3530000 	cmp	r3, #0
  10e6c0:	1a00000c 	bne	10e6f8 <lwip_netconn_do_connected+0x18c>
  10e6c4:	e51b3010 	ldr	r3, [fp, #-16]
  10e6c8:	e3530000 	cmp	r3, #0
  10e6cc:	1a000002 	bne	10e6dc <lwip_netconn_do_connected+0x170>
  10e6d0:	e51b3008 	ldr	r3, [fp, #-8]
  10e6d4:	e3530000 	cmp	r3, #0
  10e6d8:	0a000006 	beq	10e6f8 <lwip_netconn_do_connected+0x18c>
  10e6dc:	e3060c14 	movw	r0, #27668	; 0x6c14
  10e6e0:	e3400014 	movt	r0, #20
  10e6e4:	ebffd28a 	bl	103114 <rt_kprintf>
  10e6e8:	e30014a1 	movw	r1, #1185	; 0x4a1
  10e6ec:	e3060874 	movw	r0, #26740	; 0x6874
  10e6f0:	e3400014 	movt	r0, #20
  10e6f4:	ebfff25a 	bl	10b064 <sys_arch_assert>
    (was_blocking && op_completed_sem != NULL) ||
    (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
  10e6f8:	e51b300c 	ldr	r3, [fp, #-12]
  10e6fc:	e3a02000 	mov	r2, #0
  10e700:	e5832038 	str	r2, [r3, #56]	; 0x38
  conn->state = NETCONN_NONE;
  10e704:	e51b300c 	ldr	r3, [fp, #-12]
  10e708:	e3a02000 	mov	r2, #0
  10e70c:	e5832004 	str	r2, [r3, #4]
  NETCONN_SET_SAFE_ERR(conn, ERR_OK);
  10e710:	e51b300c 	ldr	r3, [fp, #-12]
  10e714:	e3530000 	cmp	r3, #0
  10e718:	0a000008 	beq	10e740 <lwip_netconn_do_connected+0x1d4>
  10e71c:	ebffcec6 	bl	10223c <rt_enter_critical>
  10e720:	e51b300c 	ldr	r3, [fp, #-12]
  10e724:	e1d330dc 	ldrsb	r3, [r3, #12]
  10e728:	e373000c 	cmn	r3, #12
  10e72c:	ba000002 	blt	10e73c <lwip_netconn_do_connected+0x1d0>
  10e730:	e51b300c 	ldr	r3, [fp, #-12]
  10e734:	e3a02000 	mov	r2, #0
  10e738:	e5c3200c 	strb	r2, [r3, #12]
  10e73c:	ebffcec4 	bl	102254 <rt_exit_critical>
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
  10e740:	e51b300c 	ldr	r3, [fp, #-12]
  10e744:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10e748:	e3530000 	cmp	r3, #0
  10e74c:	0a000005 	beq	10e768 <lwip_netconn_do_connected+0x1fc>
  10e750:	e51b300c 	ldr	r3, [fp, #-12]
  10e754:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10e758:	e3a02000 	mov	r2, #0
  10e75c:	e3a01002 	mov	r1, #2
  10e760:	e51b000c 	ldr	r0, [fp, #-12]
  10e764:	e12fff33 	blx	r3

  if (was_blocking) {
  10e768:	e51b3010 	ldr	r3, [fp, #-16]
  10e76c:	e3530000 	cmp	r3, #0
  10e770:	0a000001 	beq	10e77c <lwip_netconn_do_connected+0x210>
    sys_sem_signal(op_completed_sem);
  10e774:	e51b0008 	ldr	r0, [fp, #-8]
  10e778:	ebffefdd 	bl	10a6f4 <sys_sem_signal>
  }
  return ERR_OK;
  10e77c:	e3a03000 	mov	r3, #0
}
  10e780:	e1a00003 	mov	r0, r3
  10e784:	e24bd004 	sub	sp, fp, #4
  10e788:	e8bd8800 	pop	{fp, pc}

0010e78c <lwip_netconn_do_connect>:
 * @param m the api_msg_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
  10e78c:	e92d4800 	push	{fp, lr}
  10e790:	e28db004 	add	fp, sp, #4
  10e794:	e24dd010 	sub	sp, sp, #16
  10e798:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10e79c:	e51b3010 	ldr	r3, [fp, #-16]
  10e7a0:	e50b3008 	str	r3, [fp, #-8]

  if (msg->conn->pcb.tcp == NULL) {
  10e7a4:	e51b3008 	ldr	r3, [fp, #-8]
  10e7a8:	e5933000 	ldr	r3, [r3]
  10e7ac:	e5933008 	ldr	r3, [r3, #8]
  10e7b0:	e3530000 	cmp	r3, #0
  10e7b4:	1a000003 	bne	10e7c8 <lwip_netconn_do_connect+0x3c>
    /* This may happen when calling netconn_connect() a second time */
    msg->err = ERR_CLSD;
  10e7b8:	e51b3008 	ldr	r3, [fp, #-8]
  10e7bc:	e3e0200e 	mvn	r2, #14
  10e7c0:	e5c32004 	strb	r2, [r3, #4]
  10e7c4:	ea0000aa 	b	10ea74 <lwip_netconn_do_connect+0x2e8>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
  10e7c8:	e51b3008 	ldr	r3, [fp, #-8]
  10e7cc:	e5933000 	ldr	r3, [r3]
  10e7d0:	e5933000 	ldr	r3, [r3]
  10e7d4:	e20330f0 	and	r3, r3, #240	; 0xf0
  10e7d8:	e3530020 	cmp	r3, #32
  10e7dc:	0a000011 	beq	10e828 <lwip_netconn_do_connect+0x9c>
  10e7e0:	e3530040 	cmp	r3, #64	; 0x40
  10e7e4:	0a000002 	beq	10e7f4 <lwip_netconn_do_connect+0x68>
  10e7e8:	e3530010 	cmp	r3, #16
  10e7ec:	0a00001b 	beq	10e860 <lwip_netconn_do_connect+0xd4>
  10e7f0:	ea000093 	b	10ea44 <lwip_netconn_do_connect+0x2b8>
#if LWIP_RAW
    case NETCONN_RAW:
      msg->err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
  10e7f4:	e51b3008 	ldr	r3, [fp, #-8]
  10e7f8:	e5933000 	ldr	r3, [r3]
  10e7fc:	e5932008 	ldr	r2, [r3, #8]
  10e800:	e51b3008 	ldr	r3, [fp, #-8]
  10e804:	e5933008 	ldr	r3, [r3, #8]
  10e808:	e1a01003 	mov	r1, r3
  10e80c:	e1a00002 	mov	r0, r2
  10e810:	eb003775 	bl	11c5ec <raw_connect>
  10e814:	e1a03000 	mov	r3, r0
  10e818:	e1a02003 	mov	r2, r3
  10e81c:	e51b3008 	ldr	r3, [fp, #-8]
  10e820:	e5c32004 	strb	r2, [r3, #4]
      break;
  10e824:	ea000092 	b	10ea74 <lwip_netconn_do_connect+0x2e8>
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
  10e828:	e51b3008 	ldr	r3, [fp, #-8]
  10e82c:	e5933000 	ldr	r3, [r3]
  10e830:	e5930008 	ldr	r0, [r3, #8]
  10e834:	e51b3008 	ldr	r3, [fp, #-8]
  10e838:	e5931008 	ldr	r1, [r3, #8]
  10e83c:	e51b3008 	ldr	r3, [fp, #-8]
  10e840:	e1d330bc 	ldrh	r3, [r3, #12]
  10e844:	e1a02003 	mov	r2, r3
  10e848:	eb006870 	bl	128a10 <udp_connect>
  10e84c:	e1a03000 	mov	r3, r0
  10e850:	e1a02003 	mov	r2, r3
  10e854:	e51b3008 	ldr	r3, [fp, #-8]
  10e858:	e5c32004 	strb	r2, [r3, #4]
      break;
  10e85c:	ea000084 	b	10ea74 <lwip_netconn_do_connect+0x2e8>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      /* Prevent connect while doing any other action. */
      if (msg->conn->state == NETCONN_CONNECT) {
  10e860:	e51b3008 	ldr	r3, [fp, #-8]
  10e864:	e5933000 	ldr	r3, [r3]
  10e868:	e5933004 	ldr	r3, [r3, #4]
  10e86c:	e3530003 	cmp	r3, #3
  10e870:	1a000003 	bne	10e884 <lwip_netconn_do_connect+0xf8>
        msg->err = ERR_ALREADY;
  10e874:	e51b3008 	ldr	r3, [fp, #-8]
  10e878:	e3e02008 	mvn	r2, #8
  10e87c:	e5c32004 	strb	r2, [r3, #4]
#endif /* LWIP_TCPIP_CORE_LOCKING */
            return;
          }
        }
      }
      break;
  10e880:	ea00007a 	b	10ea70 <lwip_netconn_do_connect+0x2e4>
      } else if (msg->conn->state != NETCONN_NONE) {
  10e884:	e51b3008 	ldr	r3, [fp, #-8]
  10e888:	e5933000 	ldr	r3, [r3]
  10e88c:	e5933004 	ldr	r3, [r3, #4]
  10e890:	e3530000 	cmp	r3, #0
  10e894:	0a000003 	beq	10e8a8 <lwip_netconn_do_connect+0x11c>
        msg->err = ERR_ISCONN;
  10e898:	e51b3008 	ldr	r3, [fp, #-8]
  10e89c:	e3e02009 	mvn	r2, #9
  10e8a0:	e5c32004 	strb	r2, [r3, #4]
      break;
  10e8a4:	ea000071 	b	10ea70 <lwip_netconn_do_connect+0x2e4>
        setup_tcp(msg->conn);
  10e8a8:	e51b3008 	ldr	r3, [fp, #-8]
  10e8ac:	e5933000 	ldr	r3, [r3]
  10e8b0:	e1a00003 	mov	r0, r3
  10e8b4:	ebfffa2d 	bl	10d170 <setup_tcp>
        msg->err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
  10e8b8:	e51b3008 	ldr	r3, [fp, #-8]
  10e8bc:	e5933000 	ldr	r3, [r3]
  10e8c0:	e5930008 	ldr	r0, [r3, #8]
  10e8c4:	e51b3008 	ldr	r3, [fp, #-8]
  10e8c8:	e5931008 	ldr	r1, [r3, #8]
  10e8cc:	e51b3008 	ldr	r3, [fp, #-8]
  10e8d0:	e1d320bc 	ldrh	r2, [r3, #12]
  10e8d4:	e30e356c 	movw	r3, #58732	; 0xe56c
  10e8d8:	e3403010 	movt	r3, #16
  10e8dc:	eb003efc 	bl	11e4d4 <tcp_connect>
  10e8e0:	e1a03000 	mov	r3, r0
  10e8e4:	e1a02003 	mov	r2, r3
  10e8e8:	e51b3008 	ldr	r3, [fp, #-8]
  10e8ec:	e5c32004 	strb	r2, [r3, #4]
        if (msg->err == ERR_OK) {
  10e8f0:	e51b3008 	ldr	r3, [fp, #-8]
  10e8f4:	e1d330d4 	ldrsb	r3, [r3, #4]
  10e8f8:	e3530000 	cmp	r3, #0
  10e8fc:	1a00005b 	bne	10ea70 <lwip_netconn_do_connect+0x2e4>
          u8_t non_blocking = netconn_is_nonblocking(msg->conn);
  10e900:	e51b3008 	ldr	r3, [fp, #-8]
  10e904:	e5933000 	ldr	r3, [r3]
  10e908:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10e90c:	e2033002 	and	r3, r3, #2
  10e910:	e3530000 	cmp	r3, #0
  10e914:	13a03001 	movne	r3, #1
  10e918:	03a03000 	moveq	r3, #0
  10e91c:	e6ef3073 	uxtb	r3, r3
  10e920:	e54b3009 	strb	r3, [fp, #-9]
          msg->conn->state = NETCONN_CONNECT;
  10e924:	e51b3008 	ldr	r3, [fp, #-8]
  10e928:	e5933000 	ldr	r3, [r3]
  10e92c:	e3a02003 	mov	r2, #3
  10e930:	e5832004 	str	r2, [r3, #4]
          SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
  10e934:	e55b3009 	ldrb	r3, [fp, #-9]
  10e938:	e3530000 	cmp	r3, #0
  10e93c:	0a000008 	beq	10e964 <lwip_netconn_do_connect+0x1d8>
  10e940:	e51b3008 	ldr	r3, [fp, #-8]
  10e944:	e5933000 	ldr	r3, [r3]
  10e948:	e5d32030 	ldrb	r2, [r3, #48]	; 0x30
  10e94c:	e51b3008 	ldr	r3, [fp, #-8]
  10e950:	e5933000 	ldr	r3, [r3]
  10e954:	e3822004 	orr	r2, r2, #4
  10e958:	e6ef2072 	uxtb	r2, r2
  10e95c:	e5c32030 	strb	r2, [r3, #48]	; 0x30
  10e960:	ea000007 	b	10e984 <lwip_netconn_do_connect+0x1f8>
  10e964:	e51b3008 	ldr	r3, [fp, #-8]
  10e968:	e5933000 	ldr	r3, [r3]
  10e96c:	e5d32030 	ldrb	r2, [r3, #48]	; 0x30
  10e970:	e51b3008 	ldr	r3, [fp, #-8]
  10e974:	e5933000 	ldr	r3, [r3]
  10e978:	e3c22004 	bic	r2, r2, #4
  10e97c:	e6ef2072 	uxtb	r2, r2
  10e980:	e5c32030 	strb	r2, [r3, #48]	; 0x30
          if (non_blocking) {
  10e984:	e55b3009 	ldrb	r3, [fp, #-9]
  10e988:	e3530000 	cmp	r3, #0
  10e98c:	0a000003 	beq	10e9a0 <lwip_netconn_do_connect+0x214>
            msg->err = ERR_INPROGRESS;
  10e990:	e51b3008 	ldr	r3, [fp, #-8]
  10e994:	e3e02004 	mvn	r2, #4
  10e998:	e5c32004 	strb	r2, [r3, #4]
      break;
  10e99c:	ea000033 	b	10ea70 <lwip_netconn_do_connect+0x2e4>
            msg->conn->current_msg = msg;
  10e9a0:	e51b3008 	ldr	r3, [fp, #-8]
  10e9a4:	e5933000 	ldr	r3, [r3]
  10e9a8:	e51b2008 	ldr	r2, [fp, #-8]
  10e9ac:	e5832038 	str	r2, [r3, #56]	; 0x38
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
  10e9b0:	e51b3008 	ldr	r3, [fp, #-8]
  10e9b4:	e5933000 	ldr	r3, [r3]
  10e9b8:	e5933004 	ldr	r3, [r3, #4]
  10e9bc:	e3530003 	cmp	r3, #3
  10e9c0:	0a000006 	beq	10e9e0 <lwip_netconn_do_connect+0x254>
  10e9c4:	e3060bac 	movw	r0, #27564	; 0x6bac
  10e9c8:	e3400014 	movt	r0, #20
  10e9cc:	ebffd1d0 	bl	103114 <rt_kprintf>
  10e9d0:	e30014df 	movw	r1, #1247	; 0x4df
  10e9d4:	e3060874 	movw	r0, #26740	; 0x6874
  10e9d8:	e3400014 	movt	r0, #20
  10e9dc:	ebfff1a0 	bl	10b064 <sys_arch_assert>
            UNLOCK_TCPIP_CORE();
  10e9e0:	e30005e4 	movw	r0, #1508	; 0x5e4
  10e9e4:	e3400015 	movt	r0, #21
  10e9e8:	ebffefc8 	bl	10a910 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
  10e9ec:	e51b3008 	ldr	r3, [fp, #-8]
  10e9f0:	e5933000 	ldr	r3, [r3]
  10e9f4:	e2833010 	add	r3, r3, #16
  10e9f8:	e3a01000 	mov	r1, #0
  10e9fc:	e1a00003 	mov	r0, r3
  10ea00:	ebffef46 	bl	10a720 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
  10ea04:	e30005e4 	movw	r0, #1508	; 0x5e4
  10ea08:	e3400015 	movt	r0, #21
  10ea0c:	ebffefb3 	bl	10a8e0 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
  10ea10:	e51b3008 	ldr	r3, [fp, #-8]
  10ea14:	e5933000 	ldr	r3, [r3]
  10ea18:	e5933004 	ldr	r3, [r3, #4]
  10ea1c:	e3530003 	cmp	r3, #3
  10ea20:	1a000024 	bne	10eab8 <lwip_netconn_do_connect+0x32c>
  10ea24:	e3060bac 	movw	r0, #27564	; 0x6bac
  10ea28:	e3400014 	movt	r0, #20
  10ea2c:	ebffd1b8 	bl	103114 <rt_kprintf>
  10ea30:	e30014e3 	movw	r1, #1251	; 0x4e3
  10ea34:	e3060874 	movw	r0, #26740	; 0x6874
  10ea38:	e3400014 	movt	r0, #20
  10ea3c:	ebfff188 	bl	10b064 <sys_arch_assert>
            return;
  10ea40:	ea00001c 	b	10eab8 <lwip_netconn_do_connect+0x32c>
#endif /* LWIP_TCP */
    default:
      LWIP_ERROR("Invalid netconn type", 0, do{ msg->err = ERR_VAL; }while(0));
  10ea44:	e3060c34 	movw	r0, #27700	; 0x6c34
  10ea48:	e3400014 	movt	r0, #20
  10ea4c:	ebffd1b0 	bl	103114 <rt_kprintf>
  10ea50:	e30014ec 	movw	r1, #1260	; 0x4ec
  10ea54:	e3060874 	movw	r0, #26740	; 0x6874
  10ea58:	e3400014 	movt	r0, #20
  10ea5c:	ebfff180 	bl	10b064 <sys_arch_assert>
  10ea60:	e51b3008 	ldr	r3, [fp, #-8]
  10ea64:	e3e02005 	mvn	r2, #5
  10ea68:	e5c32004 	strb	r2, [r3, #4]
      break;
  10ea6c:	ea000000 	b	10ea74 <lwip_netconn_do_connect+0x2e8>
      break;
  10ea70:	e320f000 	nop	{0}
    }
  }
  /* For all other protocols, netconn_connect() calls TCPIP_APIMSG(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
  10ea74:	e51b3008 	ldr	r3, [fp, #-8]
  10ea78:	e5933000 	ldr	r3, [r3]
  10ea7c:	e3530000 	cmp	r3, #0
  10ea80:	0a00000d 	beq	10eabc <lwip_netconn_do_connect+0x330>
  10ea84:	ebffcdec 	bl	10223c <rt_enter_critical>
  10ea88:	e51b3008 	ldr	r3, [fp, #-8]
  10ea8c:	e5933000 	ldr	r3, [r3]
  10ea90:	e1d330dc 	ldrsb	r3, [r3, #12]
  10ea94:	e373000c 	cmn	r3, #12
  10ea98:	ba000004 	blt	10eab0 <lwip_netconn_do_connect+0x324>
  10ea9c:	e51b3008 	ldr	r3, [fp, #-8]
  10eaa0:	e5933000 	ldr	r3, [r3]
  10eaa4:	e51b2008 	ldr	r2, [fp, #-8]
  10eaa8:	e1d220d4 	ldrsb	r2, [r2, #4]
  10eaac:	e5c3200c 	strb	r2, [r3, #12]
  10eab0:	ebffcde7 	bl	102254 <rt_exit_critical>
  10eab4:	ea000000 	b	10eabc <lwip_netconn_do_connect+0x330>
            return;
  10eab8:	e320f000 	nop	{0}
}
  10eabc:	e24bd004 	sub	sp, fp, #4
  10eac0:	e8bd8800 	pop	{fp, pc}

0010eac4 <lwip_netconn_do_disconnect>:
 *
 * @param m the api_msg_msg pointing to the connection to disconnect
 */
void
lwip_netconn_do_disconnect(void *m)
{
  10eac4:	e92d4800 	push	{fp, lr}
  10eac8:	e28db004 	add	fp, sp, #4
  10eacc:	e24dd010 	sub	sp, sp, #16
  10ead0:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10ead4:	e51b3010 	ldr	r3, [fp, #-16]
  10ead8:	e50b3008 	str	r3, [fp, #-8]

#if LWIP_UDP
  if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_UDP) {
  10eadc:	e51b3008 	ldr	r3, [fp, #-8]
  10eae0:	e5933000 	ldr	r3, [r3]
  10eae4:	e5933000 	ldr	r3, [r3]
  10eae8:	e20330f0 	and	r3, r3, #240	; 0xf0
  10eaec:	e3530020 	cmp	r3, #32
  10eaf0:	1a000008 	bne	10eb18 <lwip_netconn_do_disconnect+0x54>
    udp_disconnect(msg->conn->pcb.udp);
  10eaf4:	e51b3008 	ldr	r3, [fp, #-8]
  10eaf8:	e5933000 	ldr	r3, [r3]
  10eafc:	e5933008 	ldr	r3, [r3, #8]
  10eb00:	e1a00003 	mov	r0, r3
  10eb04:	eb006811 	bl	128b50 <udp_disconnect>
    msg->err = ERR_OK;
  10eb08:	e51b3008 	ldr	r3, [fp, #-8]
  10eb0c:	e3a02000 	mov	r2, #0
  10eb10:	e5c32004 	strb	r2, [r3, #4]
  10eb14:	ea000002 	b	10eb24 <lwip_netconn_do_disconnect+0x60>
  } else
#endif /* LWIP_UDP */
  {
    msg->err = ERR_VAL;
  10eb18:	e51b3008 	ldr	r3, [fp, #-8]
  10eb1c:	e3e02005 	mvn	r2, #5
  10eb20:	e5c32004 	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
  10eb24:	e51b3008 	ldr	r3, [fp, #-8]
  10eb28:	e5933000 	ldr	r3, [r3]
  10eb2c:	e3530000 	cmp	r3, #0
  10eb30:	0a00000b 	beq	10eb64 <lwip_netconn_do_disconnect+0xa0>
  10eb34:	ebffcdc0 	bl	10223c <rt_enter_critical>
  10eb38:	e51b3008 	ldr	r3, [fp, #-8]
  10eb3c:	e5933000 	ldr	r3, [r3]
  10eb40:	e1d330dc 	ldrsb	r3, [r3, #12]
  10eb44:	e373000c 	cmn	r3, #12
  10eb48:	ba000004 	blt	10eb60 <lwip_netconn_do_disconnect+0x9c>
  10eb4c:	e51b3008 	ldr	r3, [fp, #-8]
  10eb50:	e5933000 	ldr	r3, [r3]
  10eb54:	e51b2008 	ldr	r2, [fp, #-8]
  10eb58:	e1d220d4 	ldrsb	r2, [r2, #4]
  10eb5c:	e5c3200c 	strb	r2, [r3, #12]
  10eb60:	ebffcdbb 	bl	102254 <rt_exit_critical>
}
  10eb64:	e320f000 	nop	{0}
  10eb68:	e24bd004 	sub	sp, fp, #4
  10eb6c:	e8bd8800 	pop	{fp, pc}

0010eb70 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
  10eb70:	e92d4800 	push	{fp, lr}
  10eb74:	e28db004 	add	fp, sp, #4
  10eb78:	e24dd018 	sub	sp, sp, #24
  10eb7c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct api_msg *msg = (struct api_msg*)m;
  10eb80:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10eb84:	e50b3008 	str	r3, [fp, #-8]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
  10eb88:	e51b3008 	ldr	r3, [fp, #-8]
  10eb8c:	e5933000 	ldr	r3, [r3]
  10eb90:	e1d330dc 	ldrsb	r3, [r3, #12]
  10eb94:	e373000c 	cmn	r3, #12
  10eb98:	aa000005 	bge	10ebb4 <lwip_netconn_do_listen+0x44>
    msg->err = msg->conn->last_err;
  10eb9c:	e51b3008 	ldr	r3, [fp, #-8]
  10eba0:	e5933000 	ldr	r3, [r3]
  10eba4:	e1d320dc 	ldrsb	r2, [r3, #12]
  10eba8:	e51b3008 	ldr	r3, [fp, #-8]
  10ebac:	e5c32004 	strb	r2, [r3, #4]
  10ebb0:	ea000083 	b	10edc4 <lwip_netconn_do_listen+0x254>
  } else {
    msg->err = ERR_CONN;
  10ebb4:	e51b3008 	ldr	r3, [fp, #-8]
  10ebb8:	e3e0200a 	mvn	r2, #10
  10ebbc:	e5c32004 	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
  10ebc0:	e51b3008 	ldr	r3, [fp, #-8]
  10ebc4:	e5933000 	ldr	r3, [r3]
  10ebc8:	e5933008 	ldr	r3, [r3, #8]
  10ebcc:	e3530000 	cmp	r3, #0
  10ebd0:	0a00007b 	beq	10edc4 <lwip_netconn_do_listen+0x254>
      if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
  10ebd4:	e51b3008 	ldr	r3, [fp, #-8]
  10ebd8:	e5933000 	ldr	r3, [r3]
  10ebdc:	e5933000 	ldr	r3, [r3]
  10ebe0:	e20330f0 	and	r3, r3, #240	; 0xf0
  10ebe4:	e3530010 	cmp	r3, #16
  10ebe8:	1a000072 	bne	10edb8 <lwip_netconn_do_listen+0x248>
        if (msg->conn->state == NETCONN_NONE) {
  10ebec:	e51b3008 	ldr	r3, [fp, #-8]
  10ebf0:	e5933000 	ldr	r3, [r3]
  10ebf4:	e5933004 	ldr	r3, [r3, #4]
  10ebf8:	e3530000 	cmp	r3, #0
  10ebfc:	1a000064 	bne	10ed94 <lwip_netconn_do_listen+0x224>
          struct tcp_pcb* lpcb;
          if (msg->conn->pcb.tcp->state != CLOSED) {
  10ec00:	e51b3008 	ldr	r3, [fp, #-8]
  10ec04:	e5933000 	ldr	r3, [r3]
  10ec08:	e5933008 	ldr	r3, [r3, #8]
  10ec0c:	e5933014 	ldr	r3, [r3, #20]
  10ec10:	e3530000 	cmp	r3, #0
  10ec14:	0a000003 	beq	10ec28 <lwip_netconn_do_listen+0xb8>
            /* connection is not closed, cannot listen */
            msg->err = ERR_VAL;
  10ec18:	e51b3008 	ldr	r3, [fp, #-8]
  10ec1c:	e3e02005 	mvn	r2, #5
  10ec20:	e5c32004 	strb	r2, [r3, #4]
  10ec24:	ea000066 	b	10edc4 <lwip_netconn_do_listen+0x254>
            err_t err;
            u8_t backlog;
#if TCP_LISTEN_BACKLOG
            backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
            backlog = TCP_DEFAULT_LISTEN_BACKLOG;
  10ec28:	e3e03000 	mvn	r3, #0
  10ec2c:	e54b3009 	strb	r3, [fp, #-9]
              IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
              IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
            }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

            lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
  10ec30:	e51b3008 	ldr	r3, [fp, #-8]
  10ec34:	e5933000 	ldr	r3, [r3]
  10ec38:	e5933008 	ldr	r3, [r3, #8]
  10ec3c:	e24b2011 	sub	r2, fp, #17
  10ec40:	e55b1009 	ldrb	r1, [fp, #-9]
  10ec44:	e1a00003 	mov	r0, r3
  10ec48:	eb003ca6 	bl	11dee8 <tcp_listen_with_backlog_and_err>
  10ec4c:	e50b0010 	str	r0, [fp, #-16]

            if (lpcb == NULL) {
  10ec50:	e51b3010 	ldr	r3, [fp, #-16]
  10ec54:	e3530000 	cmp	r3, #0
  10ec58:	1a000003 	bne	10ec6c <lwip_netconn_do_listen+0xfc>
              /* in this case, the old pcb is still allocated */
              msg->err = err;
  10ec5c:	e15b21d1 	ldrsb	r2, [fp, #-17]	; 0xffffffef
  10ec60:	e51b3008 	ldr	r3, [fp, #-8]
  10ec64:	e5c32004 	strb	r2, [r3, #4]
  10ec68:	ea000055 	b	10edc4 <lwip_netconn_do_listen+0x254>
            } else {
              /* delete the recvmbox and allocate the acceptmbox */
              if (sys_mbox_valid(&msg->conn->recvmbox)) {
  10ec6c:	e51b3008 	ldr	r3, [fp, #-8]
  10ec70:	e5933000 	ldr	r3, [r3]
  10ec74:	e2833014 	add	r3, r3, #20
  10ec78:	e1a00003 	mov	r0, r3
  10ec7c:	ebfff0af 	bl	10af40 <sys_mbox_valid>
  10ec80:	e1a03000 	mov	r3, r0
  10ec84:	e3530000 	cmp	r3, #0
  10ec88:	0a000009 	beq	10ecb4 <lwip_netconn_do_listen+0x144>
                /** @todo: should we drain the recvmbox here? */
                sys_mbox_free(&msg->conn->recvmbox);
  10ec8c:	e51b3008 	ldr	r3, [fp, #-8]
  10ec90:	e5933000 	ldr	r3, [r3]
  10ec94:	e2833014 	add	r3, r3, #20
  10ec98:	e1a00003 	mov	r0, r3
  10ec9c:	ebffefe9 	bl	10ac48 <sys_mbox_free>
                sys_mbox_set_invalid(&msg->conn->recvmbox);
  10eca0:	e51b3008 	ldr	r3, [fp, #-8]
  10eca4:	e5933000 	ldr	r3, [r3]
  10eca8:	e2833014 	add	r3, r3, #20
  10ecac:	e1a00003 	mov	r0, r3
  10ecb0:	ebfff0ac 	bl	10af68 <sys_mbox_set_invalid>
              }
              msg->err = ERR_OK;
  10ecb4:	e51b3008 	ldr	r3, [fp, #-8]
  10ecb8:	e3a02000 	mov	r2, #0
  10ecbc:	e5c32004 	strb	r2, [r3, #4]
              if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
  10ecc0:	e51b3008 	ldr	r3, [fp, #-8]
  10ecc4:	e5933000 	ldr	r3, [r3]
  10ecc8:	e2833018 	add	r3, r3, #24
  10eccc:	e1a00003 	mov	r0, r3
  10ecd0:	ebfff09a 	bl	10af40 <sys_mbox_valid>
  10ecd4:	e1a03000 	mov	r3, r0
  10ecd8:	e3530000 	cmp	r3, #0
  10ecdc:	1a000009 	bne	10ed08 <lwip_netconn_do_listen+0x198>
                msg->err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
  10ece0:	e51b3008 	ldr	r3, [fp, #-8]
  10ece4:	e5933000 	ldr	r3, [r3]
  10ece8:	e2833018 	add	r3, r3, #24
  10ecec:	e3a0100a 	mov	r1, #10
  10ecf0:	e1a00003 	mov	r0, r3
  10ecf4:	ebffef8e 	bl	10ab34 <sys_mbox_new>
  10ecf8:	e1a03000 	mov	r3, r0
  10ecfc:	e1a02003 	mov	r2, r3
  10ed00:	e51b3008 	ldr	r3, [fp, #-8]
  10ed04:	e5c32004 	strb	r2, [r3, #4]
              }
              if (msg->err == ERR_OK) {
  10ed08:	e51b3008 	ldr	r3, [fp, #-8]
  10ed0c:	e1d330d4 	ldrsb	r3, [r3, #4]
  10ed10:	e3530000 	cmp	r3, #0
  10ed14:	1a000017 	bne	10ed78 <lwip_netconn_do_listen+0x208>
                msg->conn->state = NETCONN_LISTEN;
  10ed18:	e51b3008 	ldr	r3, [fp, #-8]
  10ed1c:	e5933000 	ldr	r3, [r3]
  10ed20:	e3a02002 	mov	r2, #2
  10ed24:	e5832004 	str	r2, [r3, #4]
                msg->conn->pcb.tcp = lpcb;
  10ed28:	e51b3008 	ldr	r3, [fp, #-8]
  10ed2c:	e5933000 	ldr	r3, [r3]
  10ed30:	e51b2010 	ldr	r2, [fp, #-16]
  10ed34:	e5832008 	str	r2, [r3, #8]
                tcp_arg(msg->conn->pcb.tcp, msg->conn);
  10ed38:	e51b3008 	ldr	r3, [fp, #-8]
  10ed3c:	e5933000 	ldr	r3, [r3]
  10ed40:	e5932008 	ldr	r2, [r3, #8]
  10ed44:	e51b3008 	ldr	r3, [fp, #-8]
  10ed48:	e5933000 	ldr	r3, [r3]
  10ed4c:	e1a01003 	mov	r1, r3
  10ed50:	e1a00002 	mov	r0, r2
  10ed54:	eb0043fd 	bl	11fd50 <tcp_arg>
                tcp_accept(msg->conn->pcb.tcp, accept_function);
  10ed58:	e51b3008 	ldr	r3, [fp, #-8]
  10ed5c:	e5933000 	ldr	r3, [r3]
  10ed60:	e5933008 	ldr	r3, [r3, #8]
  10ed64:	e30d11e8 	movw	r1, #53736	; 0xd1e8
  10ed68:	e3401010 	movt	r1, #16
  10ed6c:	e1a00003 	mov	r0, r3
  10ed70:	eb004450 	bl	11feb8 <tcp_accept>
  10ed74:	ea000012 	b	10edc4 <lwip_netconn_do_listen+0x254>
              } else {
                /* since the old pcb is already deallocated, free lpcb now */
                tcp_close(lpcb);
  10ed78:	e51b0010 	ldr	r0, [fp, #-16]
  10ed7c:	eb003aac 	bl	11d834 <tcp_close>
                msg->conn->pcb.tcp = NULL;
  10ed80:	e51b3008 	ldr	r3, [fp, #-8]
  10ed84:	e5933000 	ldr	r3, [r3]
  10ed88:	e3a02000 	mov	r2, #0
  10ed8c:	e5832008 	str	r2, [r3, #8]
  10ed90:	ea00000b 	b	10edc4 <lwip_netconn_do_listen+0x254>
              }
            }
          }
        } else if (msg->conn->state == NETCONN_LISTEN) {
  10ed94:	e51b3008 	ldr	r3, [fp, #-8]
  10ed98:	e5933000 	ldr	r3, [r3]
  10ed9c:	e5933004 	ldr	r3, [r3, #4]
  10eda0:	e3530002 	cmp	r3, #2
  10eda4:	1a000006 	bne	10edc4 <lwip_netconn_do_listen+0x254>
          /* already listening, allow updating of the backlog */
          msg->err = ERR_OK;
  10eda8:	e51b3008 	ldr	r3, [fp, #-8]
  10edac:	e3a02000 	mov	r2, #0
  10edb0:	e5c32004 	strb	r2, [r3, #4]
  10edb4:	ea000002 	b	10edc4 <lwip_netconn_do_listen+0x254>
          tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
        }
      } else {
        msg->err = ERR_ARG;
  10edb8:	e51b3008 	ldr	r3, [fp, #-8]
  10edbc:	e3e0200f 	mvn	r2, #15
  10edc0:	e5c32004 	strb	r2, [r3, #4]
      }
    }
  }
  TCPIP_APIMSG_ACK(msg);
  10edc4:	e51b3008 	ldr	r3, [fp, #-8]
  10edc8:	e5933000 	ldr	r3, [r3]
  10edcc:	e3530000 	cmp	r3, #0
  10edd0:	0a00000b 	beq	10ee04 <lwip_netconn_do_listen+0x294>
  10edd4:	ebffcd18 	bl	10223c <rt_enter_critical>
  10edd8:	e51b3008 	ldr	r3, [fp, #-8]
  10eddc:	e5933000 	ldr	r3, [r3]
  10ede0:	e1d330dc 	ldrsb	r3, [r3, #12]
  10ede4:	e373000c 	cmn	r3, #12
  10ede8:	ba000004 	blt	10ee00 <lwip_netconn_do_listen+0x290>
  10edec:	e51b3008 	ldr	r3, [fp, #-8]
  10edf0:	e5933000 	ldr	r3, [r3]
  10edf4:	e51b2008 	ldr	r2, [fp, #-8]
  10edf8:	e1d220d4 	ldrsb	r2, [r2, #4]
  10edfc:	e5c3200c 	strb	r2, [r3, #12]
  10ee00:	ebffcd13 	bl	102254 <rt_exit_critical>
}
  10ee04:	e320f000 	nop	{0}
  10ee08:	e24bd004 	sub	sp, fp, #4
  10ee0c:	e8bd8800 	pop	{fp, pc}

0010ee10 <lwip_netconn_do_send>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
  10ee10:	e92d4800 	push	{fp, lr}
  10ee14:	e28db004 	add	fp, sp, #4
  10ee18:	e24dd010 	sub	sp, sp, #16
  10ee1c:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10ee20:	e51b3010 	ldr	r3, [fp, #-16]
  10ee24:	e50b3008 	str	r3, [fp, #-8]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
  10ee28:	e51b3008 	ldr	r3, [fp, #-8]
  10ee2c:	e5933000 	ldr	r3, [r3]
  10ee30:	e1d330dc 	ldrsb	r3, [r3, #12]
  10ee34:	e373000c 	cmn	r3, #12
  10ee38:	aa000005 	bge	10ee54 <lwip_netconn_do_send+0x44>
    msg->err = msg->conn->last_err;
  10ee3c:	e51b3008 	ldr	r3, [fp, #-8]
  10ee40:	e5933000 	ldr	r3, [r3]
  10ee44:	e1d320dc 	ldrsb	r2, [r3, #12]
  10ee48:	e51b3008 	ldr	r3, [fp, #-8]
  10ee4c:	e5c32004 	strb	r2, [r3, #4]
  10ee50:	ea00005e 	b	10efd0 <lwip_netconn_do_send+0x1c0>
  } else {
    msg->err = ERR_CONN;
  10ee54:	e51b3008 	ldr	r3, [fp, #-8]
  10ee58:	e3e0200a 	mvn	r2, #10
  10ee5c:	e5c32004 	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
  10ee60:	e51b3008 	ldr	r3, [fp, #-8]
  10ee64:	e5933000 	ldr	r3, [r3]
  10ee68:	e5933008 	ldr	r3, [r3, #8]
  10ee6c:	e3530000 	cmp	r3, #0
  10ee70:	0a000055 	beq	10efcc <lwip_netconn_do_send+0x1bc>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
  10ee74:	e51b3008 	ldr	r3, [fp, #-8]
  10ee78:	e5933000 	ldr	r3, [r3]
  10ee7c:	e5933000 	ldr	r3, [r3]
  10ee80:	e20330f0 	and	r3, r3, #240	; 0xf0
  10ee84:	e3530020 	cmp	r3, #32
  10ee88:	0a00002a 	beq	10ef38 <lwip_netconn_do_send+0x128>
  10ee8c:	e3530040 	cmp	r3, #64	; 0x40
  10ee90:	0a000000 	beq	10ee98 <lwip_netconn_do_send+0x88>
        }
#endif /* LWIP_CHECKSUM_ON_COPY */
        break;
#endif /* LWIP_UDP */
      default:
        break;
  10ee94:	ea00004d 	b	10efd0 <lwip_netconn_do_send+0x1c0>
        if (ip_addr_isany(&msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
  10ee98:	e51b3008 	ldr	r3, [fp, #-8]
  10ee9c:	e5933008 	ldr	r3, [r3, #8]
  10eea0:	e2833008 	add	r3, r3, #8
  10eea4:	e3530000 	cmp	r3, #0
  10eea8:	0a000004 	beq	10eec0 <lwip_netconn_do_send+0xb0>
  10eeac:	e51b3008 	ldr	r3, [fp, #-8]
  10eeb0:	e5933008 	ldr	r3, [r3, #8]
  10eeb4:	e5933008 	ldr	r3, [r3, #8]
  10eeb8:	e3530000 	cmp	r3, #0
  10eebc:	1a00000d 	bne	10eef8 <lwip_netconn_do_send+0xe8>
          msg->err = raw_send(msg->conn->pcb.raw, msg->msg.b->p);
  10eec0:	e51b3008 	ldr	r3, [fp, #-8]
  10eec4:	e5933000 	ldr	r3, [r3]
  10eec8:	e5932008 	ldr	r2, [r3, #8]
  10eecc:	e51b3008 	ldr	r3, [fp, #-8]
  10eed0:	e5933008 	ldr	r3, [r3, #8]
  10eed4:	e5933000 	ldr	r3, [r3]
  10eed8:	e1a01003 	mov	r1, r3
  10eedc:	e1a00002 	mov	r0, r2
  10eee0:	eb00367a 	bl	11c8d0 <raw_send>
  10eee4:	e1a03000 	mov	r3, r0
  10eee8:	e1a02003 	mov	r2, r3
  10eeec:	e51b3008 	ldr	r3, [fp, #-8]
  10eef0:	e5c32004 	strb	r2, [r3, #4]
        break;
  10eef4:	ea000035 	b	10efd0 <lwip_netconn_do_send+0x1c0>
          msg->err = raw_sendto(msg->conn->pcb.raw, msg->msg.b->p, &msg->msg.b->addr);
  10eef8:	e51b3008 	ldr	r3, [fp, #-8]
  10eefc:	e5933000 	ldr	r3, [r3]
  10ef00:	e5930008 	ldr	r0, [r3, #8]
  10ef04:	e51b3008 	ldr	r3, [fp, #-8]
  10ef08:	e5933008 	ldr	r3, [r3, #8]
  10ef0c:	e5931000 	ldr	r1, [r3]
  10ef10:	e51b3008 	ldr	r3, [fp, #-8]
  10ef14:	e5933008 	ldr	r3, [r3, #8]
  10ef18:	e2833008 	add	r3, r3, #8
  10ef1c:	e1a02003 	mov	r2, r3
  10ef20:	eb0035dc 	bl	11c698 <raw_sendto>
  10ef24:	e1a03000 	mov	r3, r0
  10ef28:	e1a02003 	mov	r2, r3
  10ef2c:	e51b3008 	ldr	r3, [fp, #-8]
  10ef30:	e5c32004 	strb	r2, [r3, #4]
        break;
  10ef34:	ea000025 	b	10efd0 <lwip_netconn_do_send+0x1c0>
        if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
  10ef38:	e51b3008 	ldr	r3, [fp, #-8]
  10ef3c:	e5933008 	ldr	r3, [r3, #8]
  10ef40:	e5933008 	ldr	r3, [r3, #8]
  10ef44:	e3530000 	cmp	r3, #0
  10ef48:	1a00000d 	bne	10ef84 <lwip_netconn_do_send+0x174>
          msg->err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
  10ef4c:	e51b3008 	ldr	r3, [fp, #-8]
  10ef50:	e5933000 	ldr	r3, [r3]
  10ef54:	e5932008 	ldr	r2, [r3, #8]
  10ef58:	e51b3008 	ldr	r3, [fp, #-8]
  10ef5c:	e5933008 	ldr	r3, [r3, #8]
  10ef60:	e5933000 	ldr	r3, [r3]
  10ef64:	e1a01003 	mov	r1, r3
  10ef68:	e1a00002 	mov	r0, r2
  10ef6c:	eb0064d3 	bl	1282c0 <udp_send>
  10ef70:	e1a03000 	mov	r3, r0
  10ef74:	e1a02003 	mov	r2, r3
  10ef78:	e51b3008 	ldr	r3, [fp, #-8]
  10ef7c:	e5c32004 	strb	r2, [r3, #4]
        break;
  10ef80:	ea000012 	b	10efd0 <lwip_netconn_do_send+0x1c0>
          msg->err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
  10ef84:	e51b3008 	ldr	r3, [fp, #-8]
  10ef88:	e5933000 	ldr	r3, [r3]
  10ef8c:	e5930008 	ldr	r0, [r3, #8]
  10ef90:	e51b3008 	ldr	r3, [fp, #-8]
  10ef94:	e5933008 	ldr	r3, [r3, #8]
  10ef98:	e5931000 	ldr	r1, [r3]
  10ef9c:	e51b3008 	ldr	r3, [fp, #-8]
  10efa0:	e5933008 	ldr	r3, [r3, #8]
  10efa4:	e2832008 	add	r2, r3, #8
  10efa8:	e51b3008 	ldr	r3, [fp, #-8]
  10efac:	e5933008 	ldr	r3, [r3, #8]
  10efb0:	e1d330bc 	ldrh	r3, [r3, #12]
  10efb4:	eb0064d6 	bl	128314 <udp_sendto>
  10efb8:	e1a03000 	mov	r3, r0
  10efbc:	e1a02003 	mov	r2, r3
  10efc0:	e51b3008 	ldr	r3, [fp, #-8]
  10efc4:	e5c32004 	strb	r2, [r3, #4]
        break;
  10efc8:	ea000000 	b	10efd0 <lwip_netconn_do_send+0x1c0>
      }
    }
  10efcc:	e320f000 	nop	{0}
  }
  TCPIP_APIMSG_ACK(msg);
  10efd0:	e51b3008 	ldr	r3, [fp, #-8]
  10efd4:	e5933000 	ldr	r3, [r3]
  10efd8:	e3530000 	cmp	r3, #0
  10efdc:	0a00000b 	beq	10f010 <lwip_netconn_do_send+0x200>
  10efe0:	ebffcc95 	bl	10223c <rt_enter_critical>
  10efe4:	e51b3008 	ldr	r3, [fp, #-8]
  10efe8:	e5933000 	ldr	r3, [r3]
  10efec:	e1d330dc 	ldrsb	r3, [r3, #12]
  10eff0:	e373000c 	cmn	r3, #12
  10eff4:	ba000004 	blt	10f00c <lwip_netconn_do_send+0x1fc>
  10eff8:	e51b3008 	ldr	r3, [fp, #-8]
  10effc:	e5933000 	ldr	r3, [r3]
  10f000:	e51b2008 	ldr	r2, [fp, #-8]
  10f004:	e1d220d4 	ldrsb	r2, [r2, #4]
  10f008:	e5c3200c 	strb	r2, [r3, #12]
  10f00c:	ebffcc90 	bl	102254 <rt_exit_critical>
}
  10f010:	e320f000 	nop	{0}
  10f014:	e24bd004 	sub	sp, fp, #4
  10f018:	e8bd8800 	pop	{fp, pc}

0010f01c <lwip_netconn_do_recv>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
  10f01c:	e92d4800 	push	{fp, lr}
  10f020:	e28db004 	add	fp, sp, #4
  10f024:	e24dd018 	sub	sp, sp, #24
  10f028:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct api_msg *msg = (struct api_msg*)m;
  10f02c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10f030:	e50b300c 	str	r3, [fp, #-12]

  msg->err = ERR_OK;
  10f034:	e51b300c 	ldr	r3, [fp, #-12]
  10f038:	e3a02000 	mov	r2, #0
  10f03c:	e5c32004 	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
  10f040:	e51b300c 	ldr	r3, [fp, #-12]
  10f044:	e5933000 	ldr	r3, [r3]
  10f048:	e5933008 	ldr	r3, [r3, #8]
  10f04c:	e3530000 	cmp	r3, #0
  10f050:	0a00001e 	beq	10f0d0 <lwip_netconn_do_recv+0xb4>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
  10f054:	e51b300c 	ldr	r3, [fp, #-12]
  10f058:	e5933000 	ldr	r3, [r3]
  10f05c:	e5933000 	ldr	r3, [r3]
  10f060:	e20330f0 	and	r3, r3, #240	; 0xf0
  10f064:	e3530010 	cmp	r3, #16
  10f068:	1a000018 	bne	10f0d0 <lwip_netconn_do_recv+0xb4>
      u32_t remaining = msg->msg.r.len;
  10f06c:	e51b300c 	ldr	r3, [fp, #-12]
  10f070:	e5933008 	ldr	r3, [r3, #8]
  10f074:	e50b3008 	str	r3, [fp, #-8]
      do {
        u16_t recved = (remaining > 0xffff) ? 0xffff : (u16_t)remaining;
  10f078:	e51b3008 	ldr	r3, [fp, #-8]
  10f07c:	e3530801 	cmp	r3, #65536	; 0x10000
  10f080:	2a000002 	bcs	10f090 <lwip_netconn_do_recv+0x74>
  10f084:	e51b3008 	ldr	r3, [fp, #-8]
  10f088:	e6ff3073 	uxth	r3, r3
  10f08c:	ea000000 	b	10f094 <lwip_netconn_do_recv+0x78>
  10f090:	e30f3fff 	movw	r3, #65535	; 0xffff
  10f094:	e14b30be 	strh	r3, [fp, #-14]
        tcp_recved(msg->conn->pcb.tcp, recved);
  10f098:	e51b300c 	ldr	r3, [fp, #-12]
  10f09c:	e5933000 	ldr	r3, [r3]
  10f0a0:	e5933008 	ldr	r3, [r3, #8]
  10f0a4:	e15b20be 	ldrh	r2, [fp, #-14]
  10f0a8:	e1a01002 	mov	r1, r2
  10f0ac:	e1a00003 	mov	r0, r3
  10f0b0:	eb003c85 	bl	11e2cc <tcp_recved>
        remaining -= recved;
  10f0b4:	e15b30be 	ldrh	r3, [fp, #-14]
  10f0b8:	e51b2008 	ldr	r2, [fp, #-8]
  10f0bc:	e0423003 	sub	r3, r2, r3
  10f0c0:	e50b3008 	str	r3, [fp, #-8]
      } while (remaining != 0);
  10f0c4:	e51b3008 	ldr	r3, [fp, #-8]
  10f0c8:	e3530000 	cmp	r3, #0
  10f0cc:	1affffe9 	bne	10f078 <lwip_netconn_do_recv+0x5c>
    }
  }
  TCPIP_APIMSG_ACK(msg);
  10f0d0:	e51b300c 	ldr	r3, [fp, #-12]
  10f0d4:	e5933000 	ldr	r3, [r3]
  10f0d8:	e3530000 	cmp	r3, #0
  10f0dc:	0a00000b 	beq	10f110 <lwip_netconn_do_recv+0xf4>
  10f0e0:	ebffcc55 	bl	10223c <rt_enter_critical>
  10f0e4:	e51b300c 	ldr	r3, [fp, #-12]
  10f0e8:	e5933000 	ldr	r3, [r3]
  10f0ec:	e1d330dc 	ldrsb	r3, [r3, #12]
  10f0f0:	e373000c 	cmn	r3, #12
  10f0f4:	ba000004 	blt	10f10c <lwip_netconn_do_recv+0xf0>
  10f0f8:	e51b300c 	ldr	r3, [fp, #-12]
  10f0fc:	e5933000 	ldr	r3, [r3]
  10f100:	e51b200c 	ldr	r2, [fp, #-12]
  10f104:	e1d220d4 	ldrsb	r2, [r2, #4]
  10f108:	e5c3200c 	strb	r2, [r3, #12]
  10f10c:	ebffcc50 	bl	102254 <rt_exit_critical>
}
  10f110:	e320f000 	nop	{0}
  10f114:	e24bd004 	sub	sp, fp, #4
  10f118:	e8bd8800 	pop	{fp, pc}

0010f11c <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
  10f11c:	e92d4800 	push	{fp, lr}
  10f120:	e28db004 	add	fp, sp, #4
  10f124:	e24dd020 	sub	sp, sp, #32
  10f128:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  10f12c:	e1a03001 	mov	r3, r1
  10f130:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
  10f134:	e3a03000 	mov	r3, #0
  10f138:	e54b3009 	strb	r3, [fp, #-9]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;

  LWIP_ASSERT("conn != NULL", conn != NULL);
  10f13c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f140:	e3530000 	cmp	r3, #0
  10f144:	1a000006 	bne	10f164 <lwip_netconn_do_writemore+0x48>
  10f148:	e306096c 	movw	r0, #26988	; 0x696c
  10f14c:	e3400014 	movt	r0, #20
  10f150:	ebffcfef 	bl	103114 <rt_kprintf>
  10f154:	e30015dd 	movw	r1, #1501	; 0x5dd
  10f158:	e3060874 	movw	r0, #26740	; 0x6874
  10f15c:	e3400014 	movt	r0, #20
  10f160:	ebffefbf 	bl	10b064 <sys_arch_assert>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
  10f164:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f168:	e5933004 	ldr	r3, [r3, #4]
  10f16c:	e3530001 	cmp	r3, #1
  10f170:	0a000006 	beq	10f190 <lwip_netconn_do_writemore+0x74>
  10f174:	e3060c4c 	movw	r0, #27724	; 0x6c4c
  10f178:	e3400014 	movt	r0, #20
  10f17c:	ebffcfe4 	bl	103114 <rt_kprintf>
  10f180:	e30015de 	movw	r1, #1502	; 0x5de
  10f184:	e3060874 	movw	r0, #26740	; 0x6874
  10f188:	e3400014 	movt	r0, #20
  10f18c:	ebffefb4 	bl	10b064 <sys_arch_assert>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
  10f190:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f194:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f198:	e3530000 	cmp	r3, #0
  10f19c:	1a000006 	bne	10f1bc <lwip_netconn_do_writemore+0xa0>
  10f1a0:	e306097c 	movw	r0, #27004	; 0x697c
  10f1a4:	e3400014 	movt	r0, #20
  10f1a8:	ebffcfd9 	bl	103114 <rt_kprintf>
  10f1ac:	e30015df 	movw	r1, #1503	; 0x5df
  10f1b0:	e3060874 	movw	r0, #26740	; 0x6874
  10f1b4:	e3400014 	movt	r0, #20
  10f1b8:	ebffefa9 	bl	10b064 <sys_arch_assert>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
  10f1bc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f1c0:	e5933008 	ldr	r3, [r3, #8]
  10f1c4:	e3530000 	cmp	r3, #0
  10f1c8:	1a000006 	bne	10f1e8 <lwip_netconn_do_writemore+0xcc>
  10f1cc:	e3060c6c 	movw	r0, #27756	; 0x6c6c
  10f1d0:	e3400014 	movt	r0, #20
  10f1d4:	ebffcfce 	bl	103114 <rt_kprintf>
  10f1d8:	e3a01e5e 	mov	r1, #1504	; 0x5e0
  10f1dc:	e3060874 	movw	r0, #26740	; 0x6874
  10f1e0:	e3400014 	movt	r0, #20
  10f1e4:	ebffef9e 	bl	10b064 <sys_arch_assert>
  LWIP_ASSERT("conn->write_offset < conn->current_msg->msg.w.len",
  10f1e8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f1ec:	e5932034 	ldr	r2, [r3, #52]	; 0x34
  10f1f0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f1f4:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f1f8:	e593300c 	ldr	r3, [r3, #12]
  10f1fc:	e1520003 	cmp	r2, r3
  10f200:	3a000006 	bcc	10f220 <lwip_netconn_do_writemore+0x104>
  10f204:	e3060c84 	movw	r0, #27780	; 0x6c84
  10f208:	e3400014 	movt	r0, #20
  10f20c:	ebffcfc0 	bl	103114 <rt_kprintf>
  10f210:	e30015e2 	movw	r1, #1506	; 0x5e2
  10f214:	e3060874 	movw	r0, #26740	; 0x6874
  10f218:	e3400014 	movt	r0, #20
  10f21c:	ebffef90 	bl	10b064 <sys_arch_assert>
    conn->write_offset < conn->current_msg->msg.w.len);

  apiflags = conn->current_msg->msg.w.apiflags;
  10f220:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f224:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f228:	e5d33010 	ldrb	r3, [r3, #16]
  10f22c:	e54b300a 	strb	r3, [fp, #-10]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
  10f230:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f234:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10f238:	e2033002 	and	r3, r3, #2
  10f23c:	e3530000 	cmp	r3, #0
  10f240:	1a000003 	bne	10f254 <lwip_netconn_do_writemore+0x138>
  10f244:	e55b300a 	ldrb	r3, [fp, #-10]
  10f248:	e2033004 	and	r3, r3, #4
  10f24c:	e3530000 	cmp	r3, #0
  10f250:	0a000001 	beq	10f25c <lwip_netconn_do_writemore+0x140>
  10f254:	e3a03001 	mov	r3, #1
  10f258:	ea000000 	b	10f260 <lwip_netconn_do_writemore+0x144>
  10f25c:	e3a03000 	mov	r3, #0
  10f260:	e54b300b 	strb	r3, [fp, #-11]

#if LWIP_SO_SNDTIMEO
  if ((conn->send_timeout != 0) &&
  10f264:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f268:	e5933020 	ldr	r3, [r3, #32]
  10f26c:	e3530000 	cmp	r3, #0
  10f270:	0a000022 	beq	10f300 <lwip_netconn_do_writemore+0x1e4>
      ((s32_t)(sys_now() - conn->current_msg->msg.w.time_started) >= conn->send_timeout)) {
  10f274:	ebffef93 	bl	10b0c8 <sys_now>
  10f278:	e1a02000 	mov	r2, r0
  10f27c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f280:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f284:	e5933014 	ldr	r3, [r3, #20]
  10f288:	e0423003 	sub	r3, r2, r3
  10f28c:	e1a02003 	mov	r2, r3
  10f290:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f294:	e5933020 	ldr	r3, [r3, #32]
  if ((conn->send_timeout != 0) &&
  10f298:	e1520003 	cmp	r2, r3
  10f29c:	ba000017 	blt	10f300 <lwip_netconn_do_writemore+0x1e4>
    write_finished = 1;
  10f2a0:	e3a03001 	mov	r3, #1
  10f2a4:	e54b3009 	strb	r3, [fp, #-9]
    if (conn->write_offset == 0) {
  10f2a8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f2ac:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  10f2b0:	e3530000 	cmp	r3, #0
  10f2b4:	1a000006 	bne	10f2d4 <lwip_netconn_do_writemore+0x1b8>
      /* nothing has been written */
      err = ERR_WOULDBLOCK;
  10f2b8:	e3e03006 	mvn	r3, #6
  10f2bc:	e54b3005 	strb	r3, [fp, #-5]
      conn->current_msg->msg.w.len = 0;
  10f2c0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f2c4:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f2c8:	e3a02000 	mov	r2, #0
  10f2cc:	e583200c 	str	r2, [r3, #12]
    if (conn->write_offset == 0) {
  10f2d0:	ea0000df 	b	10f654 <lwip_netconn_do_writemore+0x538>
    } else {
      /* partial write */
      err = ERR_OK;
  10f2d4:	e3a03000 	mov	r3, #0
  10f2d8:	e54b3005 	strb	r3, [fp, #-5]
      conn->current_msg->msg.w.len = conn->write_offset;
  10f2dc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f2e0:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f2e4:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  10f2e8:	e5922034 	ldr	r2, [r2, #52]	; 0x34
  10f2ec:	e583200c 	str	r2, [r3, #12]
      conn->write_offset = 0;
  10f2f0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f2f4:	e3a02000 	mov	r2, #0
  10f2f8:	e5832034 	str	r2, [r3, #52]	; 0x34
    if (conn->write_offset == 0) {
  10f2fc:	ea0000d4 	b	10f654 <lwip_netconn_do_writemore+0x538>
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    dataptr = (const u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
  10f300:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f304:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f308:	e5932008 	ldr	r2, [r3, #8]
  10f30c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f310:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  10f314:	e0823003 	add	r3, r2, r3
  10f318:	e50b3010 	str	r3, [fp, #-16]
    diff = conn->current_msg->msg.w.len - conn->write_offset;
  10f31c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f320:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f324:	e593200c 	ldr	r2, [r3, #12]
  10f328:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f32c:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  10f330:	e0423003 	sub	r3, r2, r3
  10f334:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    if (diff > 0xffffUL) { /* max_u16_t */
  10f338:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10f33c:	e3530801 	cmp	r3, #65536	; 0x10000
  10f340:	3a000005 	bcc	10f35c <lwip_netconn_do_writemore+0x240>
      len = 0xffff;
  10f344:	e3e03000 	mvn	r3, #0
  10f348:	e14b30b8 	strh	r3, [fp, #-8]
      apiflags |= TCP_WRITE_FLAG_MORE;
  10f34c:	e55b300a 	ldrb	r3, [fp, #-10]
  10f350:	e3833002 	orr	r3, r3, #2
  10f354:	e54b300a 	strb	r3, [fp, #-10]
  10f358:	ea000001 	b	10f364 <lwip_netconn_do_writemore+0x248>
    } else {
      len = (u16_t)diff;
  10f35c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10f360:	e14b30b8 	strh	r3, [fp, #-8]
    }
    available = tcp_sndbuf(conn->pcb.tcp);
  10f364:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f368:	e5933008 	ldr	r3, [r3, #8]
  10f36c:	e1d336b4 	ldrh	r3, [r3, #100]	; 0x64
  10f370:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
    if (available < len) {
  10f374:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  10f378:	e15b30b8 	ldrh	r3, [fp, #-8]
  10f37c:	e1520003 	cmp	r2, r3
  10f380:	2a00000d 	bcs	10f3bc <lwip_netconn_do_writemore+0x2a0>
      /* don't try to write more than sendbuf */
      len = available;
  10f384:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  10f388:	e14b30b8 	strh	r3, [fp, #-8]
      if (dontblock) {
  10f38c:	e55b300b 	ldrb	r3, [fp, #-11]
  10f390:	e3530000 	cmp	r3, #0
  10f394:	0a000005 	beq	10f3b0 <lwip_netconn_do_writemore+0x294>
        if (!len) {
  10f398:	e15b30b8 	ldrh	r3, [fp, #-8]
  10f39c:	e3530000 	cmp	r3, #0
  10f3a0:	1a000005 	bne	10f3bc <lwip_netconn_do_writemore+0x2a0>
          err = ERR_WOULDBLOCK;
  10f3a4:	e3e03006 	mvn	r3, #6
  10f3a8:	e54b3005 	strb	r3, [fp, #-5]
          goto err_mem;
  10f3ac:	ea000021 	b	10f438 <lwip_netconn_do_writemore+0x31c>
        }
      } else {
        apiflags |= TCP_WRITE_FLAG_MORE;
  10f3b0:	e55b300a 	ldrb	r3, [fp, #-10]
  10f3b4:	e3833002 	orr	r3, r3, #2
  10f3b8:	e54b300a 	strb	r3, [fp, #-10]
      }
    }
    LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!", ((conn->write_offset + len) <= conn->current_msg->msg.w.len));
  10f3bc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f3c0:	e5932034 	ldr	r2, [r3, #52]	; 0x34
  10f3c4:	e15b30b8 	ldrh	r3, [fp, #-8]
  10f3c8:	e0822003 	add	r2, r2, r3
  10f3cc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f3d0:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f3d4:	e593300c 	ldr	r3, [r3, #12]
  10f3d8:	e1520003 	cmp	r2, r3
  10f3dc:	9a000006 	bls	10f3fc <lwip_netconn_do_writemore+0x2e0>
  10f3e0:	e3060cb8 	movw	r0, #27832	; 0x6cb8
  10f3e4:	e3400014 	movt	r0, #20
  10f3e8:	ebffcf49 	bl	103114 <rt_kprintf>
  10f3ec:	e300160d 	movw	r1, #1549	; 0x60d
  10f3f0:	e3060874 	movw	r0, #26740	; 0x6874
  10f3f4:	e3400014 	movt	r0, #20
  10f3f8:	ebffef19 	bl	10b064 <sys_arch_assert>
    err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
  10f3fc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f400:	e5930008 	ldr	r0, [r3, #8]
  10f404:	e55b300a 	ldrb	r3, [fp, #-10]
  10f408:	e15b20b8 	ldrh	r2, [fp, #-8]
  10f40c:	e51b1010 	ldr	r1, [fp, #-16]
  10f410:	eb00571a 	bl	125080 <tcp_write>
  10f414:	e1a03000 	mov	r3, r0
  10f418:	e54b3005 	strb	r3, [fp, #-5]
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
  10f41c:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10f420:	e3530000 	cmp	r3, #0
  10f424:	0a000002 	beq	10f434 <lwip_netconn_do_writemore+0x318>
  10f428:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10f42c:	e3730001 	cmn	r3, #1
  10f430:	1a00002e 	bne	10f4f0 <lwip_netconn_do_writemore+0x3d4>
err_mem:
  10f434:	e320f000 	nop	{0}
      if (dontblock && (len < conn->current_msg->msg.w.len)) {
  10f438:	e55b300b 	ldrb	r3, [fp, #-11]
  10f43c:	e3530000 	cmp	r3, #0
  10f440:	0a000016 	beq	10f4a0 <lwip_netconn_do_writemore+0x384>
  10f444:	e15b20b8 	ldrh	r2, [fp, #-8]
  10f448:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f44c:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f450:	e593300c 	ldr	r3, [r3, #12]
  10f454:	e1520003 	cmp	r2, r3
  10f458:	2a000010 	bcs	10f4a0 <lwip_netconn_do_writemore+0x384>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
  10f45c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f460:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10f464:	e3530000 	cmp	r3, #0
  10f468:	0a000005 	beq	10f484 <lwip_netconn_do_writemore+0x368>
  10f46c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f470:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10f474:	e15b20b8 	ldrh	r2, [fp, #-8]
  10f478:	e3a01003 	mov	r1, #3
  10f47c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  10f480:	e12fff33 	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
  10f484:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f488:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  10f48c:	e3833010 	orr	r3, r3, #16
  10f490:	e6ef2073 	uxtb	r2, r3
  10f494:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f498:	e5c32030 	strb	r2, [r3, #48]	; 0x30
  10f49c:	ea000013 	b	10f4f0 <lwip_netconn_do_writemore+0x3d4>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
  10f4a0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f4a4:	e5933008 	ldr	r3, [r3, #8]
  10f4a8:	e1d336b4 	ldrh	r3, [r3, #100]	; 0x64
  10f4ac:	e3530a01 	cmp	r3, #4096	; 0x1000
  10f4b0:	9a000004 	bls	10f4c8 <lwip_netconn_do_writemore+0x3ac>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
  10f4b4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f4b8:	e5933008 	ldr	r3, [r3, #8]
  10f4bc:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
  10f4c0:	e353000a 	cmp	r3, #10
  10f4c4:	9a000009 	bls	10f4f0 <lwip_netconn_do_writemore+0x3d4>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
  10f4c8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f4cc:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10f4d0:	e3530000 	cmp	r3, #0
  10f4d4:	0a000005 	beq	10f4f0 <lwip_netconn_do_writemore+0x3d4>
  10f4d8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f4dc:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  10f4e0:	e15b20b8 	ldrh	r2, [fp, #-8]
  10f4e4:	e3a01003 	mov	r1, #3
  10f4e8:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  10f4ec:	e12fff33 	blx	r3
      }
    }

    if (err == ERR_OK) {
  10f4f0:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10f4f4:	e3530000 	cmp	r3, #0
  10f4f8:	1a00002b 	bne	10f5ac <lwip_netconn_do_writemore+0x490>
      err_t out_err;
      conn->write_offset += len;
  10f4fc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f500:	e5932034 	ldr	r2, [r3, #52]	; 0x34
  10f504:	e15b30b8 	ldrh	r3, [fp, #-8]
  10f508:	e0822003 	add	r2, r2, r3
  10f50c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f510:	e5832034 	str	r2, [r3, #52]	; 0x34
      if ((conn->write_offset == conn->current_msg->msg.w.len) || dontblock) {
  10f514:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f518:	e5932034 	ldr	r2, [r3, #52]	; 0x34
  10f51c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f520:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f524:	e593300c 	ldr	r3, [r3, #12]
  10f528:	e1520003 	cmp	r2, r3
  10f52c:	0a000002 	beq	10f53c <lwip_netconn_do_writemore+0x420>
  10f530:	e55b300b 	ldrb	r3, [fp, #-11]
  10f534:	e3530000 	cmp	r3, #0
  10f538:	0a000006 	beq	10f558 <lwip_netconn_do_writemore+0x43c>
        /* return sent length */
        conn->current_msg->msg.w.len = conn->write_offset;
  10f53c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f540:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f544:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  10f548:	e5922034 	ldr	r2, [r2, #52]	; 0x34
  10f54c:	e583200c 	str	r2, [r3, #12]
        /* everything was written */
        write_finished = 1;
  10f550:	e3a03001 	mov	r3, #1
  10f554:	e54b3009 	strb	r3, [fp, #-9]
      }
      out_err = tcp_output(conn->pcb.tcp);
  10f558:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f55c:	e5933008 	ldr	r3, [r3, #8]
  10f560:	e1a00003 	mov	r0, r3
  10f564:	eb005af6 	bl	126144 <tcp_output>
  10f568:	e1a03000 	mov	r3, r0
  10f56c:	e54b3018 	strb	r3, [fp, #-24]	; 0xffffffe8
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
  10f570:	e15b31d8 	ldrsb	r3, [fp, #-24]	; 0xffffffe8
  10f574:	e373000c 	cmn	r3, #12
  10f578:	ba000002 	blt	10f588 <lwip_netconn_do_writemore+0x46c>
  10f57c:	e15b31d8 	ldrsb	r3, [fp, #-24]	; 0xffffffe8
  10f580:	e3730004 	cmn	r3, #4
  10f584:	1a000032 	bne	10f654 <lwip_netconn_do_writemore+0x538>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
  10f588:	e55b3018 	ldrb	r3, [fp, #-24]	; 0xffffffe8
  10f58c:	e54b3005 	strb	r3, [fp, #-5]
        write_finished = 1;
  10f590:	e3a03001 	mov	r3, #1
  10f594:	e54b3009 	strb	r3, [fp, #-9]
        conn->current_msg->msg.w.len = 0;
  10f598:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f59c:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f5a0:	e3a02000 	mov	r2, #0
  10f5a4:	e583200c 	str	r2, [r3, #12]
  10f5a8:	ea000029 	b	10f654 <lwip_netconn_do_writemore+0x538>
      }
    } else if (err == ERR_MEM) {
  10f5ac:	e15b30d5 	ldrsb	r3, [fp, #-5]
  10f5b0:	e3730001 	cmn	r3, #1
  10f5b4:	1a000020 	bne	10f63c <lwip_netconn_do_writemore+0x520>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
  10f5b8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f5bc:	e5933008 	ldr	r3, [r3, #8]
  10f5c0:	e1a00003 	mov	r0, r3
  10f5c4:	eb005ade 	bl	126144 <tcp_output>
  10f5c8:	e1a03000 	mov	r3, r0
  10f5cc:	e54b3017 	strb	r3, [fp, #-23]	; 0xffffffe9
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
  10f5d0:	e15b31d7 	ldrsb	r3, [fp, #-23]	; 0xffffffe9
  10f5d4:	e373000c 	cmn	r3, #12
  10f5d8:	ba000002 	blt	10f5e8 <lwip_netconn_do_writemore+0x4cc>
  10f5dc:	e15b31d7 	ldrsb	r3, [fp, #-23]	; 0xffffffe9
  10f5e0:	e3730004 	cmn	r3, #4
  10f5e4:	1a000008 	bne	10f60c <lwip_netconn_do_writemore+0x4f0>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
  10f5e8:	e55b3017 	ldrb	r3, [fp, #-23]	; 0xffffffe9
  10f5ec:	e54b3005 	strb	r3, [fp, #-5]
        write_finished = 1;
  10f5f0:	e3a03001 	mov	r3, #1
  10f5f4:	e54b3009 	strb	r3, [fp, #-9]
        conn->current_msg->msg.w.len = 0;
  10f5f8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f5fc:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f600:	e3a02000 	mov	r2, #0
  10f604:	e583200c 	str	r2, [r3, #12]
  10f608:	ea000011 	b	10f654 <lwip_netconn_do_writemore+0x538>
      } else if (dontblock) {
  10f60c:	e55b300b 	ldrb	r3, [fp, #-11]
  10f610:	e3530000 	cmp	r3, #0
  10f614:	0a00000e 	beq	10f654 <lwip_netconn_do_writemore+0x538>
        /* non-blocking write is done on ERR_MEM */
        err = ERR_WOULDBLOCK;
  10f618:	e3e03006 	mvn	r3, #6
  10f61c:	e54b3005 	strb	r3, [fp, #-5]
        write_finished = 1;
  10f620:	e3a03001 	mov	r3, #1
  10f624:	e54b3009 	strb	r3, [fp, #-9]
        conn->current_msg->msg.w.len = 0;
  10f628:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f62c:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f630:	e3a02000 	mov	r2, #0
  10f634:	e583200c 	str	r2, [r3, #12]
  10f638:	ea000005 	b	10f654 <lwip_netconn_do_writemore+0x538>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
  10f63c:	e3a03001 	mov	r3, #1
  10f640:	e54b3009 	strb	r3, [fp, #-9]
      conn->current_msg->msg.w.len = 0;
  10f644:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f648:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f64c:	e3a02000 	mov	r2, #0
  10f650:	e583200c 	str	r2, [r3, #12]
    }
  }
  if (write_finished) {
  10f654:	e55b3009 	ldrb	r3, [fp, #-9]
  10f658:	e3530000 	cmp	r3, #0
  10f65c:	0a000023 	beq	10f6f0 <lwip_netconn_do_writemore+0x5d4>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
  10f660:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f664:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f668:	e5933000 	ldr	r3, [r3]
  10f66c:	e2833010 	add	r3, r3, #16
  10f670:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    conn->current_msg->err = err;
  10f674:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f678:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f67c:	e55b2005 	ldrb	r2, [fp, #-5]
  10f680:	e5c32004 	strb	r2, [r3, #4]
    conn->current_msg = NULL;
  10f684:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f688:	e3a02000 	mov	r2, #0
  10f68c:	e5832038 	str	r2, [r3, #56]	; 0x38
    conn->write_offset = 0;
  10f690:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f694:	e3a02000 	mov	r2, #0
  10f698:	e5832034 	str	r2, [r3, #52]	; 0x34
    conn->state = NETCONN_NONE;
  10f69c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f6a0:	e3a02000 	mov	r2, #0
  10f6a4:	e5832004 	str	r2, [r3, #4]
    NETCONN_SET_SAFE_ERR(conn, err);
  10f6a8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f6ac:	e3530000 	cmp	r3, #0
  10f6b0:	0a000008 	beq	10f6d8 <lwip_netconn_do_writemore+0x5bc>
  10f6b4:	ebffcae0 	bl	10223c <rt_enter_critical>
  10f6b8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f6bc:	e1d330dc 	ldrsb	r3, [r3, #12]
  10f6c0:	e373000c 	cmn	r3, #12
  10f6c4:	ba000002 	blt	10f6d4 <lwip_netconn_do_writemore+0x5b8>
  10f6c8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  10f6cc:	e55b2005 	ldrb	r2, [fp, #-5]
  10f6d0:	e5c3200c 	strb	r2, [r3, #12]
  10f6d4:	ebffcade 	bl	102254 <rt_exit_critical>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
  10f6d8:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  10f6dc:	e3530000 	cmp	r3, #0
  10f6e0:	0a000004 	beq	10f6f8 <lwip_netconn_do_writemore+0x5dc>
#endif
    {
      sys_sem_signal(op_completed_sem);
  10f6e4:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  10f6e8:	ebffec01 	bl	10a6f4 <sys_sem_signal>
  10f6ec:	ea000001 	b	10f6f8 <lwip_netconn_do_writemore+0x5dc>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
  10f6f0:	e3e03000 	mvn	r3, #0
  10f6f4:	ea000000 	b	10f6fc <lwip_netconn_do_writemore+0x5e0>
  }
#endif
  return ERR_OK;
  10f6f8:	e3a03000 	mov	r3, #0
}
  10f6fc:	e1a00003 	mov	r0, r3
  10f700:	e24bd004 	sub	sp, fp, #4
  10f704:	e8bd8800 	pop	{fp, pc}

0010f708 <lwip_netconn_do_write>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
  10f708:	e92d4800 	push	{fp, lr}
  10f70c:	e28db004 	add	fp, sp, #4
  10f710:	e24dd010 	sub	sp, sp, #16
  10f714:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10f718:	e51b3010 	ldr	r3, [fp, #-16]
  10f71c:	e50b3008 	str	r3, [fp, #-8]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
  10f720:	e51b3008 	ldr	r3, [fp, #-8]
  10f724:	e5933000 	ldr	r3, [r3]
  10f728:	e1d330dc 	ldrsb	r3, [r3, #12]
  10f72c:	e373000c 	cmn	r3, #12
  10f730:	aa000005 	bge	10f74c <lwip_netconn_do_write+0x44>
    msg->err = msg->conn->last_err;
  10f734:	e51b3008 	ldr	r3, [fp, #-8]
  10f738:	e5933000 	ldr	r3, [r3]
  10f73c:	e1d320dc 	ldrsb	r2, [r3, #12]
  10f740:	e51b3008 	ldr	r3, [fp, #-8]
  10f744:	e5c32004 	strb	r2, [r3, #4]
  10f748:	ea00006f 	b	10f90c <lwip_netconn_do_write+0x204>
  } else {
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
  10f74c:	e51b3008 	ldr	r3, [fp, #-8]
  10f750:	e5933000 	ldr	r3, [r3]
  10f754:	e5933000 	ldr	r3, [r3]
  10f758:	e20330f0 	and	r3, r3, #240	; 0xf0
  10f75c:	e3530010 	cmp	r3, #16
  10f760:	1a000066 	bne	10f900 <lwip_netconn_do_write+0x1f8>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
  10f764:	e51b3008 	ldr	r3, [fp, #-8]
  10f768:	e5933000 	ldr	r3, [r3]
  10f76c:	e5933004 	ldr	r3, [r3, #4]
  10f770:	e3530000 	cmp	r3, #0
  10f774:	0a000003 	beq	10f788 <lwip_netconn_do_write+0x80>
        /* netconn is connecting, closing or in blocking write */
        msg->err = ERR_INPROGRESS;
  10f778:	e51b3008 	ldr	r3, [fp, #-8]
  10f77c:	e3e02004 	mvn	r2, #4
  10f780:	e5c32004 	strb	r2, [r3, #4]
  10f784:	ea000060 	b	10f90c <lwip_netconn_do_write+0x204>
      } else if (msg->conn->pcb.tcp != NULL) {
  10f788:	e51b3008 	ldr	r3, [fp, #-8]
  10f78c:	e5933000 	ldr	r3, [r3]
  10f790:	e5933008 	ldr	r3, [r3, #8]
  10f794:	e3530000 	cmp	r3, #0
  10f798:	0a000054 	beq	10f8f0 <lwip_netconn_do_write+0x1e8>
        msg->conn->state = NETCONN_WRITE;
  10f79c:	e51b3008 	ldr	r3, [fp, #-8]
  10f7a0:	e5933000 	ldr	r3, [r3]
  10f7a4:	e3a02001 	mov	r2, #1
  10f7a8:	e5832004 	str	r2, [r3, #4]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
  10f7ac:	e51b3008 	ldr	r3, [fp, #-8]
  10f7b0:	e5933000 	ldr	r3, [r3]
  10f7b4:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10f7b8:	e3530000 	cmp	r3, #0
  10f7bc:	1a000004 	bne	10f7d4 <lwip_netconn_do_write+0xcc>
  10f7c0:	e51b3008 	ldr	r3, [fp, #-8]
  10f7c4:	e5933000 	ldr	r3, [r3]
  10f7c8:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  10f7cc:	e3530000 	cmp	r3, #0
  10f7d0:	0a000006 	beq	10f7f0 <lwip_netconn_do_write+0xe8>
  10f7d4:	e3060b90 	movw	r0, #27536	; 0x6b90
  10f7d8:	e3400014 	movt	r0, #20
  10f7dc:	ebffce4c 	bl	103114 <rt_kprintf>
  10f7e0:	e300167d 	movw	r1, #1661	; 0x67d
  10f7e4:	e3060874 	movw	r0, #26740	; 0x6874
  10f7e8:	e3400014 	movt	r0, #20
  10f7ec:	ebffee1c 	bl	10b064 <sys_arch_assert>
          msg->conn->write_offset == 0);
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
  10f7f0:	e51b3008 	ldr	r3, [fp, #-8]
  10f7f4:	e593300c 	ldr	r3, [r3, #12]
  10f7f8:	e3530000 	cmp	r3, #0
  10f7fc:	1a000006 	bne	10f81c <lwip_netconn_do_write+0x114>
  10f800:	e3060ce4 	movw	r0, #27876	; 0x6ce4
  10f804:	e3400014 	movt	r0, #20
  10f808:	ebffce41 	bl	103114 <rt_kprintf>
  10f80c:	e300167e 	movw	r1, #1662	; 0x67e
  10f810:	e3060874 	movw	r0, #26740	; 0x6874
  10f814:	e3400014 	movt	r0, #20
  10f818:	ebffee11 	bl	10b064 <sys_arch_assert>
        msg->conn->current_msg = msg;
  10f81c:	e51b3008 	ldr	r3, [fp, #-8]
  10f820:	e5933000 	ldr	r3, [r3]
  10f824:	e51b2008 	ldr	r2, [fp, #-8]
  10f828:	e5832038 	str	r2, [r3, #56]	; 0x38
        msg->conn->write_offset = 0;
  10f82c:	e51b3008 	ldr	r3, [fp, #-8]
  10f830:	e5933000 	ldr	r3, [r3]
  10f834:	e3a02000 	mov	r2, #0
  10f838:	e5832034 	str	r2, [r3, #52]	; 0x34
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
  10f83c:	e51b3008 	ldr	r3, [fp, #-8]
  10f840:	e5933000 	ldr	r3, [r3]
  10f844:	e3a01000 	mov	r1, #0
  10f848:	e1a00003 	mov	r0, r3
  10f84c:	ebfffe32 	bl	10f11c <lwip_netconn_do_writemore>
  10f850:	e1a03000 	mov	r3, r0
  10f854:	e3530000 	cmp	r3, #0
  10f858:	0a00003c 	beq	10f950 <lwip_netconn_do_write+0x248>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
  10f85c:	e51b3008 	ldr	r3, [fp, #-8]
  10f860:	e5933000 	ldr	r3, [r3]
  10f864:	e5933004 	ldr	r3, [r3, #4]
  10f868:	e3530001 	cmp	r3, #1
  10f86c:	0a000006 	beq	10f88c <lwip_netconn_do_write+0x184>
  10f870:	e3060bac 	movw	r0, #27564	; 0x6bac
  10f874:	e3400014 	movt	r0, #20
  10f878:	ebffce25 	bl	103114 <rt_kprintf>
  10f87c:	e3001683 	movw	r1, #1667	; 0x683
  10f880:	e3060874 	movw	r0, #26740	; 0x6874
  10f884:	e3400014 	movt	r0, #20
  10f888:	ebffedf5 	bl	10b064 <sys_arch_assert>
          UNLOCK_TCPIP_CORE();
  10f88c:	e30005e4 	movw	r0, #1508	; 0x5e4
  10f890:	e3400015 	movt	r0, #21
  10f894:	ebffec1d 	bl	10a910 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
  10f898:	e51b3008 	ldr	r3, [fp, #-8]
  10f89c:	e5933000 	ldr	r3, [r3]
  10f8a0:	e2833010 	add	r3, r3, #16
  10f8a4:	e3a01000 	mov	r1, #0
  10f8a8:	e1a00003 	mov	r0, r3
  10f8ac:	ebffeb9b 	bl	10a720 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
  10f8b0:	e30005e4 	movw	r0, #1508	; 0x5e4
  10f8b4:	e3400015 	movt	r0, #21
  10f8b8:	ebffec08 	bl	10a8e0 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
  10f8bc:	e51b3008 	ldr	r3, [fp, #-8]
  10f8c0:	e5933000 	ldr	r3, [r3]
  10f8c4:	e5933004 	ldr	r3, [r3, #4]
  10f8c8:	e3530001 	cmp	r3, #1
  10f8cc:	1a00001f 	bne	10f950 <lwip_netconn_do_write+0x248>
  10f8d0:	e3060bac 	movw	r0, #27564	; 0x6bac
  10f8d4:	e3400014 	movt	r0, #20
  10f8d8:	ebffce0d 	bl	103114 <rt_kprintf>
  10f8dc:	e3001687 	movw	r1, #1671	; 0x687
  10f8e0:	e3060874 	movw	r0, #26740	; 0x6874
  10f8e4:	e3400014 	movt	r0, #20
  10f8e8:	ebffeddd 	bl	10b064 <sys_arch_assert>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
  10f8ec:	ea000017 	b	10f950 <lwip_netconn_do_write+0x248>
      } else {
        msg->err = ERR_CONN;
  10f8f0:	e51b3008 	ldr	r3, [fp, #-8]
  10f8f4:	e3e0200a 	mvn	r2, #10
  10f8f8:	e5c32004 	strb	r2, [r3, #4]
  10f8fc:	ea000002 	b	10f90c <lwip_netconn_do_write+0x204>
#else /* LWIP_TCP */
      msg->err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      msg->err = ERR_VAL;
  10f900:	e51b3008 	ldr	r3, [fp, #-8]
  10f904:	e3e02005 	mvn	r2, #5
  10f908:	e5c32004 	strb	r2, [r3, #4]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  TCPIP_APIMSG_ACK(msg);
  10f90c:	e51b3008 	ldr	r3, [fp, #-8]
  10f910:	e5933000 	ldr	r3, [r3]
  10f914:	e3530000 	cmp	r3, #0
  10f918:	0a00000d 	beq	10f954 <lwip_netconn_do_write+0x24c>
  10f91c:	ebffca46 	bl	10223c <rt_enter_critical>
  10f920:	e51b3008 	ldr	r3, [fp, #-8]
  10f924:	e5933000 	ldr	r3, [r3]
  10f928:	e1d330dc 	ldrsb	r3, [r3, #12]
  10f92c:	e373000c 	cmn	r3, #12
  10f930:	ba000004 	blt	10f948 <lwip_netconn_do_write+0x240>
  10f934:	e51b3008 	ldr	r3, [fp, #-8]
  10f938:	e5933000 	ldr	r3, [r3]
  10f93c:	e51b2008 	ldr	r2, [fp, #-8]
  10f940:	e1d220d4 	ldrsb	r2, [r2, #4]
  10f944:	e5c3200c 	strb	r2, [r3, #12]
  10f948:	ebffca41 	bl	102254 <rt_exit_critical>
  10f94c:	ea000000 	b	10f954 <lwip_netconn_do_write+0x24c>
        return;
  10f950:	e320f000 	nop	{0}
}
  10f954:	e24bd004 	sub	sp, fp, #4
  10f958:	e8bd8800 	pop	{fp, pc}

0010f95c <lwip_netconn_do_getaddr>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_getaddr(void *m)
{
  10f95c:	e92d4800 	push	{fp, lr}
  10f960:	e28db004 	add	fp, sp, #4
  10f964:	e24dd010 	sub	sp, sp, #16
  10f968:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10f96c:	e51b3010 	ldr	r3, [fp, #-16]
  10f970:	e50b3008 	str	r3, [fp, #-8]

  if (msg->conn->pcb.ip != NULL) {
  10f974:	e51b3008 	ldr	r3, [fp, #-8]
  10f978:	e5933000 	ldr	r3, [r3]
  10f97c:	e5933008 	ldr	r3, [r3, #8]
  10f980:	e3530000 	cmp	r3, #0
  10f984:	0a00007e 	beq	10fb84 <lwip_netconn_do_getaddr+0x228>
    if (msg->msg.ad.local) {
  10f988:	e51b3008 	ldr	r3, [fp, #-8]
  10f98c:	e5d33010 	ldrb	r3, [r3, #16]
  10f990:	e3530000 	cmp	r3, #0
  10f994:	0a000007 	beq	10f9b8 <lwip_netconn_do_getaddr+0x5c>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
  10f998:	e51b3008 	ldr	r3, [fp, #-8]
  10f99c:	e5933000 	ldr	r3, [r3]
  10f9a0:	e5932008 	ldr	r2, [r3, #8]
  10f9a4:	e51b3008 	ldr	r3, [fp, #-8]
  10f9a8:	e5933008 	ldr	r3, [r3, #8]
  10f9ac:	e5922000 	ldr	r2, [r2]
  10f9b0:	e5832000 	str	r2, [r3]
  10f9b4:	ea000006 	b	10f9d4 <lwip_netconn_do_getaddr+0x78>
        msg->conn->pcb.ip->local_ip);
    } else {
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
  10f9b8:	e51b3008 	ldr	r3, [fp, #-8]
  10f9bc:	e5933000 	ldr	r3, [r3]
  10f9c0:	e5932008 	ldr	r2, [r3, #8]
  10f9c4:	e51b3008 	ldr	r3, [fp, #-8]
  10f9c8:	e5933008 	ldr	r3, [r3, #8]
  10f9cc:	e5922004 	ldr	r2, [r2, #4]
  10f9d0:	e5832000 	str	r2, [r3]
        msg->conn->pcb.ip->remote_ip);
    }

    msg->err = ERR_OK;
  10f9d4:	e51b3008 	ldr	r3, [fp, #-8]
  10f9d8:	e3a02000 	mov	r2, #0
  10f9dc:	e5c32004 	strb	r2, [r3, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
  10f9e0:	e51b3008 	ldr	r3, [fp, #-8]
  10f9e4:	e5933000 	ldr	r3, [r3]
  10f9e8:	e5933000 	ldr	r3, [r3]
  10f9ec:	e20330f0 	and	r3, r3, #240	; 0xf0
  10f9f0:	e3530020 	cmp	r3, #32
  10f9f4:	0a000015 	beq	10fa50 <lwip_netconn_do_getaddr+0xf4>
  10f9f8:	e3530040 	cmp	r3, #64	; 0x40
  10f9fc:	0a000002 	beq	10fa0c <lwip_netconn_do_getaddr+0xb0>
  10fa00:	e3530010 	cmp	r3, #16
  10fa04:	0a000030 	beq	10facc <lwip_netconn_do_getaddr+0x170>
  10fa08:	ea000054 	b	10fb60 <lwip_netconn_do_getaddr+0x204>
#if LWIP_RAW
    case NETCONN_RAW:
      if (msg->msg.ad.local) {
  10fa0c:	e51b3008 	ldr	r3, [fp, #-8]
  10fa10:	e5d33010 	ldrb	r3, [r3, #16]
  10fa14:	e3530000 	cmp	r3, #0
  10fa18:	0a000008 	beq	10fa40 <lwip_netconn_do_getaddr+0xe4>
        API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.raw->protocol;
  10fa1c:	e51b3008 	ldr	r3, [fp, #-8]
  10fa20:	e5933000 	ldr	r3, [r3]
  10fa24:	e5933008 	ldr	r3, [r3, #8]
  10fa28:	e5d32010 	ldrb	r2, [r3, #16]
  10fa2c:	e51b3008 	ldr	r3, [fp, #-8]
  10fa30:	e593300c 	ldr	r3, [r3, #12]
  10fa34:	e6ff2072 	uxth	r2, r2
  10fa38:	e1c320b0 	strh	r2, [r3]
      } else {
        /* return an error as connecting is only a helper for upper layers */
        msg->err = ERR_CONN;
      }
      break;
  10fa3c:	ea000053 	b	10fb90 <lwip_netconn_do_getaddr+0x234>
        msg->err = ERR_CONN;
  10fa40:	e51b3008 	ldr	r3, [fp, #-8]
  10fa44:	e3e0200a 	mvn	r2, #10
  10fa48:	e5c32004 	strb	r2, [r3, #4]
      break;
  10fa4c:	ea00004f 	b	10fb90 <lwip_netconn_do_getaddr+0x234>
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      if (msg->msg.ad.local) {
  10fa50:	e51b3008 	ldr	r3, [fp, #-8]
  10fa54:	e5d33010 	ldrb	r3, [r3, #16]
  10fa58:	e3530000 	cmp	r3, #0
  10fa5c:	0a000007 	beq	10fa80 <lwip_netconn_do_getaddr+0x124>
        API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
  10fa60:	e51b3008 	ldr	r3, [fp, #-8]
  10fa64:	e5933000 	ldr	r3, [r3]
  10fa68:	e5932008 	ldr	r2, [r3, #8]
  10fa6c:	e51b3008 	ldr	r3, [fp, #-8]
  10fa70:	e593300c 	ldr	r3, [r3, #12]
  10fa74:	e1d221b2 	ldrh	r2, [r2, #18]
  10fa78:	e1c320b0 	strh	r2, [r3]
          msg->err = ERR_CONN;
        } else {
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
        }
      }
      break;
  10fa7c:	ea000043 	b	10fb90 <lwip_netconn_do_getaddr+0x234>
        if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
  10fa80:	e51b3008 	ldr	r3, [fp, #-8]
  10fa84:	e5933000 	ldr	r3, [r3]
  10fa88:	e5933008 	ldr	r3, [r3, #8]
  10fa8c:	e5d33010 	ldrb	r3, [r3, #16]
  10fa90:	e2033004 	and	r3, r3, #4
  10fa94:	e3530000 	cmp	r3, #0
  10fa98:	1a000003 	bne	10faac <lwip_netconn_do_getaddr+0x150>
          msg->err = ERR_CONN;
  10fa9c:	e51b3008 	ldr	r3, [fp, #-8]
  10faa0:	e3e0200a 	mvn	r2, #10
  10faa4:	e5c32004 	strb	r2, [r3, #4]
      break;
  10faa8:	ea000038 	b	10fb90 <lwip_netconn_do_getaddr+0x234>
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
  10faac:	e51b3008 	ldr	r3, [fp, #-8]
  10fab0:	e5933000 	ldr	r3, [r3]
  10fab4:	e5932008 	ldr	r2, [r3, #8]
  10fab8:	e51b3008 	ldr	r3, [fp, #-8]
  10fabc:	e593300c 	ldr	r3, [r3, #12]
  10fac0:	e1d221b4 	ldrh	r2, [r2, #20]
  10fac4:	e1c320b0 	strh	r2, [r3]
      break;
  10fac8:	ea000030 	b	10fb90 <lwip_netconn_do_getaddr+0x234>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      if ((msg->msg.ad.local == 0) &&
  10facc:	e51b3008 	ldr	r3, [fp, #-8]
  10fad0:	e5d33010 	ldrb	r3, [r3, #16]
  10fad4:	e3530000 	cmp	r3, #0
  10fad8:	1a00000f 	bne	10fb1c <lwip_netconn_do_getaddr+0x1c0>
          ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
  10fadc:	e51b3008 	ldr	r3, [fp, #-8]
  10fae0:	e5933000 	ldr	r3, [r3]
  10fae4:	e5933008 	ldr	r3, [r3, #8]
  10fae8:	e5933014 	ldr	r3, [r3, #20]
      if ((msg->msg.ad.local == 0) &&
  10faec:	e3530000 	cmp	r3, #0
  10faf0:	0a000005 	beq	10fb0c <lwip_netconn_do_getaddr+0x1b0>
          ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
  10faf4:	e51b3008 	ldr	r3, [fp, #-8]
  10faf8:	e5933000 	ldr	r3, [r3]
  10fafc:	e5933008 	ldr	r3, [r3, #8]
  10fb00:	e5933014 	ldr	r3, [r3, #20]
  10fb04:	e3530001 	cmp	r3, #1
  10fb08:	1a000003 	bne	10fb1c <lwip_netconn_do_getaddr+0x1c0>
        /* pcb is not connected and remote name is requested */
        msg->err = ERR_CONN;
  10fb0c:	e51b3008 	ldr	r3, [fp, #-8]
  10fb10:	e3e0200a 	mvn	r2, #10
  10fb14:	e5c32004 	strb	r2, [r3, #4]
      } else {
        API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
      }
      break;
  10fb18:	ea00001c 	b	10fb90 <lwip_netconn_do_getaddr+0x234>
        API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
  10fb1c:	e51b3008 	ldr	r3, [fp, #-8]
  10fb20:	e5d33010 	ldrb	r3, [r3, #16]
  10fb24:	e3530000 	cmp	r3, #0
  10fb28:	0a000004 	beq	10fb40 <lwip_netconn_do_getaddr+0x1e4>
  10fb2c:	e51b3008 	ldr	r3, [fp, #-8]
  10fb30:	e5933000 	ldr	r3, [r3]
  10fb34:	e5933008 	ldr	r3, [r3, #8]
  10fb38:	e1d331ba 	ldrh	r3, [r3, #26]
  10fb3c:	ea000003 	b	10fb50 <lwip_netconn_do_getaddr+0x1f4>
  10fb40:	e51b3008 	ldr	r3, [fp, #-8]
  10fb44:	e5933000 	ldr	r3, [r3]
  10fb48:	e5933008 	ldr	r3, [r3, #8]
  10fb4c:	e1d331bc 	ldrh	r3, [r3, #28]
  10fb50:	e51b2008 	ldr	r2, [fp, #-8]
  10fb54:	e592200c 	ldr	r2, [r2, #12]
  10fb58:	e1c230b0 	strh	r3, [r2]
      break;
  10fb5c:	ea00000b 	b	10fb90 <lwip_netconn_do_getaddr+0x234>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("invalid netconn_type", 0);
  10fb60:	e3060cf8 	movw	r0, #27896	; 0x6cf8
  10fb64:	e3400014 	movt	r0, #20
  10fb68:	ebffcd69 	bl	103114 <rt_kprintf>
  10fb6c:	e30016d7 	movw	r1, #1751	; 0x6d7
  10fb70:	e3060874 	movw	r0, #26740	; 0x6874
  10fb74:	e3400014 	movt	r0, #20
  10fb78:	ebffed39 	bl	10b064 <sys_arch_assert>
      break;
  10fb7c:	e320f000 	nop	{0}
  10fb80:	ea000002 	b	10fb90 <lwip_netconn_do_getaddr+0x234>
    }
  } else {
    msg->err = ERR_CONN;
  10fb84:	e51b3008 	ldr	r3, [fp, #-8]
  10fb88:	e3e0200a 	mvn	r2, #10
  10fb8c:	e5c32004 	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
  10fb90:	e51b3008 	ldr	r3, [fp, #-8]
  10fb94:	e5933000 	ldr	r3, [r3]
  10fb98:	e3530000 	cmp	r3, #0
  10fb9c:	0a00000b 	beq	10fbd0 <lwip_netconn_do_getaddr+0x274>
  10fba0:	ebffc9a5 	bl	10223c <rt_enter_critical>
  10fba4:	e51b3008 	ldr	r3, [fp, #-8]
  10fba8:	e5933000 	ldr	r3, [r3]
  10fbac:	e1d330dc 	ldrsb	r3, [r3, #12]
  10fbb0:	e373000c 	cmn	r3, #12
  10fbb4:	ba000004 	blt	10fbcc <lwip_netconn_do_getaddr+0x270>
  10fbb8:	e51b3008 	ldr	r3, [fp, #-8]
  10fbbc:	e5933000 	ldr	r3, [r3]
  10fbc0:	e51b2008 	ldr	r2, [fp, #-8]
  10fbc4:	e1d220d4 	ldrsb	r2, [r2, #4]
  10fbc8:	e5c3200c 	strb	r2, [r3, #12]
  10fbcc:	ebffc9a0 	bl	102254 <rt_exit_critical>
}
  10fbd0:	e320f000 	nop	{0}
  10fbd4:	e24bd004 	sub	sp, fp, #4
  10fbd8:	e8bd8800 	pop	{fp, pc}

0010fbdc <lwip_netconn_do_close>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
  10fbdc:	e92d4800 	push	{fp, lr}
  10fbe0:	e28db004 	add	fp, sp, #4
  10fbe4:	e24dd010 	sub	sp, sp, #16
  10fbe8:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10fbec:	e51b3010 	ldr	r3, [fp, #-16]
  10fbf0:	e50b3008 	str	r3, [fp, #-8]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
  10fbf4:	e51b3008 	ldr	r3, [fp, #-8]
  10fbf8:	e5933000 	ldr	r3, [r3]
  10fbfc:	e5933004 	ldr	r3, [r3, #4]
  10fc00:	e50b300c 	str	r3, [fp, #-12]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
  10fc04:	e51b3008 	ldr	r3, [fp, #-8]
  10fc08:	e5933000 	ldr	r3, [r3]
  10fc0c:	e5933008 	ldr	r3, [r3, #8]
  10fc10:	e3530000 	cmp	r3, #0
  10fc14:	0a000069 	beq	10fdc0 <lwip_netconn_do_close+0x1e4>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
  10fc18:	e51b3008 	ldr	r3, [fp, #-8]
  10fc1c:	e5933000 	ldr	r3, [r3]
  10fc20:	e5933000 	ldr	r3, [r3]
  10fc24:	e20330f0 	and	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
  10fc28:	e3530010 	cmp	r3, #16
  10fc2c:	1a000063 	bne	10fdc0 <lwip_netconn_do_close+0x1e4>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
  10fc30:	e51b3008 	ldr	r3, [fp, #-8]
  10fc34:	e5d33008 	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
  10fc38:	e3530003 	cmp	r3, #3
  10fc3c:	0a000002 	beq	10fc4c <lwip_netconn_do_close+0x70>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
  10fc40:	e51b300c 	ldr	r3, [fp, #-12]
  10fc44:	e3530002 	cmp	r3, #2
  10fc48:	0a00005c 	beq	10fdc0 <lwip_netconn_do_close+0x1e4>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
  10fc4c:	e51b300c 	ldr	r3, [fp, #-12]
  10fc50:	e3530003 	cmp	r3, #3
  10fc54:	1a000003 	bne	10fc68 <lwip_netconn_do_close+0x8c>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
  10fc58:	e51b3008 	ldr	r3, [fp, #-8]
  10fc5c:	e3e0200a 	mvn	r2, #10
  10fc60:	e5c32004 	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
  10fc64:	ea000058 	b	10fdcc <lwip_netconn_do_close+0x1f0>
    } else if (state == NETCONN_WRITE) {
  10fc68:	e51b300c 	ldr	r3, [fp, #-12]
  10fc6c:	e3530001 	cmp	r3, #1
  10fc70:	1a000003 	bne	10fc84 <lwip_netconn_do_close+0xa8>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
  10fc74:	e51b3008 	ldr	r3, [fp, #-8]
  10fc78:	e3e02004 	mvn	r2, #4
  10fc7c:	e5c32004 	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
  10fc80:	ea000051 	b	10fdcc <lwip_netconn_do_close+0x1f0>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
  10fc84:	e51b3008 	ldr	r3, [fp, #-8]
  10fc88:	e5d33008 	ldrb	r3, [r3, #8]
  10fc8c:	e2033001 	and	r3, r3, #1
  10fc90:	e3530000 	cmp	r3, #0
  10fc94:	0a000003 	beq	10fca8 <lwip_netconn_do_close+0xcc>
        /* Drain and delete mboxes */
        netconn_drain(msg->conn);
  10fc98:	e51b3008 	ldr	r3, [fp, #-8]
  10fc9c:	e5933000 	ldr	r3, [r3]
  10fca0:	e1a00003 	mov	r0, r3
  10fca4:	ebfff72a 	bl	10d954 <netconn_drain>
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
  10fca8:	e51b3008 	ldr	r3, [fp, #-8]
  10fcac:	e5933000 	ldr	r3, [r3]
  10fcb0:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  10fcb4:	e3530000 	cmp	r3, #0
  10fcb8:	1a000004 	bne	10fcd0 <lwip_netconn_do_close+0xf4>
  10fcbc:	e51b3008 	ldr	r3, [fp, #-8]
  10fcc0:	e5933000 	ldr	r3, [r3]
  10fcc4:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  10fcc8:	e3530000 	cmp	r3, #0
  10fccc:	0a000006 	beq	10fcec <lwip_netconn_do_close+0x110>
  10fcd0:	e3060b90 	movw	r0, #27536	; 0x6b90
  10fcd4:	e3400014 	movt	r0, #20
  10fcd8:	ebffcd0d 	bl	103114 <rt_kprintf>
  10fcdc:	e3001716 	movw	r1, #1814	; 0x716
  10fce0:	e3060874 	movw	r0, #26740	; 0x6874
  10fce4:	e3400014 	movt	r0, #20
  10fce8:	ebffecdd 	bl	10b064 <sys_arch_assert>
        msg->conn->write_offset == 0);
      msg->conn->state = NETCONN_CLOSE;
  10fcec:	e51b3008 	ldr	r3, [fp, #-8]
  10fcf0:	e5933000 	ldr	r3, [r3]
  10fcf4:	e3a02004 	mov	r2, #4
  10fcf8:	e5832004 	str	r2, [r3, #4]
      msg->conn->current_msg = msg;
  10fcfc:	e51b3008 	ldr	r3, [fp, #-8]
  10fd00:	e5933000 	ldr	r3, [r3]
  10fd04:	e51b2008 	ldr	r2, [fp, #-8]
  10fd08:	e5832038 	str	r2, [r3, #56]	; 0x38
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
  10fd0c:	e51b3008 	ldr	r3, [fp, #-8]
  10fd10:	e5933000 	ldr	r3, [r3]
  10fd14:	e3a01000 	mov	r1, #0
  10fd18:	e1a00003 	mov	r0, r3
  10fd1c:	ebfff776 	bl	10dafc <lwip_netconn_do_close_internal>
  10fd20:	e1a03000 	mov	r3, r0
  10fd24:	e3530000 	cmp	r3, #0
  10fd28:	0a000038 	beq	10fe10 <lwip_netconn_do_close+0x234>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
  10fd2c:	e51b3008 	ldr	r3, [fp, #-8]
  10fd30:	e5933000 	ldr	r3, [r3]
  10fd34:	e5933004 	ldr	r3, [r3, #4]
  10fd38:	e3530004 	cmp	r3, #4
  10fd3c:	0a000006 	beq	10fd5c <lwip_netconn_do_close+0x180>
  10fd40:	e3060bac 	movw	r0, #27564	; 0x6bac
  10fd44:	e3400014 	movt	r0, #20
  10fd48:	ebffccf1 	bl	103114 <rt_kprintf>
  10fd4c:	e300171b 	movw	r1, #1819	; 0x71b
  10fd50:	e3060874 	movw	r0, #26740	; 0x6874
  10fd54:	e3400014 	movt	r0, #20
  10fd58:	ebffecc1 	bl	10b064 <sys_arch_assert>
        UNLOCK_TCPIP_CORE();
  10fd5c:	e30005e4 	movw	r0, #1508	; 0x5e4
  10fd60:	e3400015 	movt	r0, #21
  10fd64:	ebffeae9 	bl	10a910 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
  10fd68:	e51b3008 	ldr	r3, [fp, #-8]
  10fd6c:	e5933000 	ldr	r3, [r3]
  10fd70:	e2833010 	add	r3, r3, #16
  10fd74:	e3a01000 	mov	r1, #0
  10fd78:	e1a00003 	mov	r0, r3
  10fd7c:	ebffea67 	bl	10a720 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
  10fd80:	e30005e4 	movw	r0, #1508	; 0x5e4
  10fd84:	e3400015 	movt	r0, #21
  10fd88:	ebffead4 	bl	10a8e0 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
  10fd8c:	e51b3008 	ldr	r3, [fp, #-8]
  10fd90:	e5933000 	ldr	r3, [r3]
  10fd94:	e5933004 	ldr	r3, [r3, #4]
  10fd98:	e3530000 	cmp	r3, #0
  10fd9c:	0a00001b 	beq	10fe10 <lwip_netconn_do_close+0x234>
  10fda0:	e3060bac 	movw	r0, #27564	; 0x6bac
  10fda4:	e3400014 	movt	r0, #20
  10fda8:	ebffccd9 	bl	103114 <rt_kprintf>
  10fdac:	e300171f 	movw	r1, #1823	; 0x71f
  10fdb0:	e3060874 	movw	r0, #26740	; 0x6874
  10fdb4:	e3400014 	movt	r0, #20
  10fdb8:	ebffeca9 	bl	10b064 <sys_arch_assert>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
  10fdbc:	ea000013 	b	10fe10 <lwip_netconn_do_close+0x234>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
  10fdc0:	e51b3008 	ldr	r3, [fp, #-8]
  10fdc4:	e3e0200a 	mvn	r2, #10
  10fdc8:	e5c32004 	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
  10fdcc:	e51b3008 	ldr	r3, [fp, #-8]
  10fdd0:	e5933000 	ldr	r3, [r3]
  10fdd4:	e3530000 	cmp	r3, #0
  10fdd8:	0a00000d 	beq	10fe14 <lwip_netconn_do_close+0x238>
  10fddc:	ebffc916 	bl	10223c <rt_enter_critical>
  10fde0:	e51b3008 	ldr	r3, [fp, #-8]
  10fde4:	e5933000 	ldr	r3, [r3]
  10fde8:	e1d330dc 	ldrsb	r3, [r3, #12]
  10fdec:	e373000c 	cmn	r3, #12
  10fdf0:	ba000004 	blt	10fe08 <lwip_netconn_do_close+0x22c>
  10fdf4:	e51b3008 	ldr	r3, [fp, #-8]
  10fdf8:	e5933000 	ldr	r3, [r3]
  10fdfc:	e51b2008 	ldr	r2, [fp, #-8]
  10fe00:	e1d220d4 	ldrsb	r2, [r2, #4]
  10fe04:	e5c3200c 	strb	r2, [r3, #12]
  10fe08:	ebffc911 	bl	102254 <rt_exit_critical>
  10fe0c:	ea000000 	b	10fe14 <lwip_netconn_do_close+0x238>
      return;
  10fe10:	e320f000 	nop	{0}
}
  10fe14:	e24bd004 	sub	sp, fp, #4
  10fe18:	e8bd8800 	pop	{fp, pc}

0010fe1c <lwip_netconn_do_join_leave_group>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_join_leave_group(void *m)
{
  10fe1c:	e92d4800 	push	{fp, lr}
  10fe20:	e28db004 	add	fp, sp, #4
  10fe24:	e24dd010 	sub	sp, sp, #16
  10fe28:	e50b0010 	str	r0, [fp, #-16]
  struct api_msg *msg = (struct api_msg*)m;
  10fe2c:	e51b3010 	ldr	r3, [fp, #-16]
  10fe30:	e50b3008 	str	r3, [fp, #-8]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
  10fe34:	e51b3008 	ldr	r3, [fp, #-8]
  10fe38:	e5933000 	ldr	r3, [r3]
  10fe3c:	e1d330dc 	ldrsb	r3, [r3, #12]
  10fe40:	e373000c 	cmn	r3, #12
  10fe44:	aa000005 	bge	10fe60 <lwip_netconn_do_join_leave_group+0x44>
    msg->err = msg->conn->last_err;
  10fe48:	e51b3008 	ldr	r3, [fp, #-8]
  10fe4c:	e5933000 	ldr	r3, [r3]
  10fe50:	e1d320dc 	ldrsb	r2, [r3, #12]
  10fe54:	e51b3008 	ldr	r3, [fp, #-8]
  10fe58:	e5c32004 	strb	r2, [r3, #4]
  10fe5c:	ea00002d 	b	10ff18 <lwip_netconn_do_join_leave_group+0xfc>
  } else {
    if (msg->conn->pcb.tcp != NULL) {
  10fe60:	e51b3008 	ldr	r3, [fp, #-8]
  10fe64:	e5933000 	ldr	r3, [r3]
  10fe68:	e5933008 	ldr	r3, [r3, #8]
  10fe6c:	e3530000 	cmp	r3, #0
  10fe70:	0a000025 	beq	10ff0c <lwip_netconn_do_join_leave_group+0xf0>
      if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_UDP) {
  10fe74:	e51b3008 	ldr	r3, [fp, #-8]
  10fe78:	e5933000 	ldr	r3, [r3]
  10fe7c:	e5933000 	ldr	r3, [r3]
  10fe80:	e20330f0 	and	r3, r3, #240	; 0xf0
  10fe84:	e3530020 	cmp	r3, #32
  10fe88:	1a00001b 	bne	10fefc <lwip_netconn_do_join_leave_group+0xe0>
        }
        else
#endif /* LWIP_IPV6 && LWIP_IPV6_MLD */
        {
#if LWIP_IGMP
          if (msg->msg.jl.join_or_leave == NETCONN_JOIN) {
  10fe8c:	e51b3008 	ldr	r3, [fp, #-8]
  10fe90:	e5933010 	ldr	r3, [r3, #16]
  10fe94:	e3530000 	cmp	r3, #0
  10fe98:	1a00000b 	bne	10fecc <lwip_netconn_do_join_leave_group+0xb0>
            msg->err = igmp_joingroup(ip_2_ip4(API_EXPR_REF(msg->msg.jl.netif_addr)),
  10fe9c:	e51b3008 	ldr	r3, [fp, #-8]
  10fea0:	e593200c 	ldr	r2, [r3, #12]
              ip_2_ip4(API_EXPR_REF(msg->msg.jl.multiaddr)));
  10fea4:	e51b3008 	ldr	r3, [fp, #-8]
  10fea8:	e5933008 	ldr	r3, [r3, #8]
            msg->err = igmp_joingroup(ip_2_ip4(API_EXPR_REF(msg->msg.jl.netif_addr)),
  10feac:	e1a01003 	mov	r1, r3
  10feb0:	e1a00002 	mov	r0, r2
  10feb4:	eb00828d 	bl	1308f0 <igmp_joingroup>
  10feb8:	e1a03000 	mov	r3, r0
  10febc:	e1a02003 	mov	r2, r3
  10fec0:	e51b3008 	ldr	r3, [fp, #-8]
  10fec4:	e5c32004 	strb	r2, [r3, #4]
  10fec8:	ea000012 	b	10ff18 <lwip_netconn_do_join_leave_group+0xfc>
          } else {
            msg->err = igmp_leavegroup(ip_2_ip4(API_EXPR_REF(msg->msg.jl.netif_addr)),
  10fecc:	e51b3008 	ldr	r3, [fp, #-8]
  10fed0:	e593200c 	ldr	r2, [r3, #12]
              ip_2_ip4(API_EXPR_REF(msg->msg.jl.multiaddr)));
  10fed4:	e51b3008 	ldr	r3, [fp, #-8]
  10fed8:	e5933008 	ldr	r3, [r3, #8]
            msg->err = igmp_leavegroup(ip_2_ip4(API_EXPR_REF(msg->msg.jl.netif_addr)),
  10fedc:	e1a01003 	mov	r1, r3
  10fee0:	e1a00002 	mov	r0, r2
  10fee4:	eb00833a 	bl	130bd4 <igmp_leavegroup>
  10fee8:	e1a03000 	mov	r3, r0
  10feec:	e1a02003 	mov	r2, r3
  10fef0:	e51b3008 	ldr	r3, [fp, #-8]
  10fef4:	e5c32004 	strb	r2, [r3, #4]
  10fef8:	ea000006 	b	10ff18 <lwip_netconn_do_join_leave_group+0xfc>
#endif /* LWIP_IGMP */
        }
#endif /* LWIP_UDP */
#if (LWIP_TCP || LWIP_RAW)
      } else {
        msg->err = ERR_VAL;
  10fefc:	e51b3008 	ldr	r3, [fp, #-8]
  10ff00:	e3e02005 	mvn	r2, #5
  10ff04:	e5c32004 	strb	r2, [r3, #4]
  10ff08:	ea000002 	b	10ff18 <lwip_netconn_do_join_leave_group+0xfc>
#endif /* (LWIP_TCP || LWIP_RAW) */
      }
    } else {
      msg->err = ERR_CONN;
  10ff0c:	e51b3008 	ldr	r3, [fp, #-8]
  10ff10:	e3e0200a 	mvn	r2, #10
  10ff14:	e5c32004 	strb	r2, [r3, #4]
    }
  }
  TCPIP_APIMSG_ACK(msg);
  10ff18:	e51b3008 	ldr	r3, [fp, #-8]
  10ff1c:	e5933000 	ldr	r3, [r3]
  10ff20:	e3530000 	cmp	r3, #0
  10ff24:	0a00000b 	beq	10ff58 <lwip_netconn_do_join_leave_group+0x13c>
  10ff28:	ebffc8c3 	bl	10223c <rt_enter_critical>
  10ff2c:	e51b3008 	ldr	r3, [fp, #-8]
  10ff30:	e5933000 	ldr	r3, [r3]
  10ff34:	e1d330dc 	ldrsb	r3, [r3, #12]
  10ff38:	e373000c 	cmn	r3, #12
  10ff3c:	ba000004 	blt	10ff54 <lwip_netconn_do_join_leave_group+0x138>
  10ff40:	e51b3008 	ldr	r3, [fp, #-8]
  10ff44:	e5933000 	ldr	r3, [r3]
  10ff48:	e51b2008 	ldr	r2, [fp, #-8]
  10ff4c:	e1d220d4 	ldrsb	r2, [r2, #4]
  10ff50:	e5c3200c 	strb	r2, [r3, #12]
  10ff54:	ebffc8be 	bl	102254 <rt_exit_critical>
}
  10ff58:	e320f000 	nop	{0}
  10ff5c:	e24bd004 	sub	sp, fp, #4
  10ff60:	e8bd8800 	pop	{fp, pc}

0010ff64 <lwip_netconn_do_dns_found>:
 * (or on timeout). A waiting application thread is waked up by
 * signaling the semaphore.
 */
static void
lwip_netconn_do_dns_found(const char *name, const ip_addr_t *ipaddr, void *arg)
{
  10ff64:	e92d4800 	push	{fp, lr}
  10ff68:	e28db004 	add	fp, sp, #4
  10ff6c:	e24dd018 	sub	sp, sp, #24
  10ff70:	e50b0010 	str	r0, [fp, #-16]
  10ff74:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  10ff78:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  struct dns_api_msg *msg = (struct dns_api_msg*)arg;
  10ff7c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10ff80:	e50b3008 	str	r3, [fp, #-8]

  /* we trust the internal implementation to be correct :-) */
  LWIP_UNUSED_ARG(name);

  if (ipaddr == NULL) {
  10ff84:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  10ff88:	e3530000 	cmp	r3, #0
  10ff8c:	1a000004 	bne	10ffa4 <lwip_netconn_do_dns_found+0x40>
    /* timeout or memory error */
    API_EXPR_DEREF(msg->err) = ERR_VAL;
  10ff90:	e51b3008 	ldr	r3, [fp, #-8]
  10ff94:	e593300c 	ldr	r3, [r3, #12]
  10ff98:	e3e02005 	mvn	r2, #5
  10ff9c:	e5c32000 	strb	r2, [r3]
  10ffa0:	ea000008 	b	10ffc8 <lwip_netconn_do_dns_found+0x64>
  } else {
    /* address was resolved */
    API_EXPR_DEREF(msg->err) = ERR_OK;
  10ffa4:	e51b3008 	ldr	r3, [fp, #-8]
  10ffa8:	e593300c 	ldr	r3, [r3, #12]
  10ffac:	e3a02000 	mov	r2, #0
  10ffb0:	e5c32000 	strb	r2, [r3]
    API_EXPR_DEREF(msg->addr) = *ipaddr;
  10ffb4:	e51b3008 	ldr	r3, [fp, #-8]
  10ffb8:	e5933004 	ldr	r3, [r3, #4]
  10ffbc:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  10ffc0:	e5922000 	ldr	r2, [r2]
  10ffc4:	e5832000 	str	r2, [r3]
  }
  /* wake up the application task waiting in netconn_gethostbyname */
  sys_sem_signal(API_EXPR_REF_SEM(msg->sem));
  10ffc8:	e51b3008 	ldr	r3, [fp, #-8]
  10ffcc:	e5933008 	ldr	r3, [r3, #8]
  10ffd0:	e1a00003 	mov	r0, r3
  10ffd4:	ebffe9c6 	bl	10a6f4 <sys_sem_signal>
}
  10ffd8:	e320f000 	nop	{0}
  10ffdc:	e24bd004 	sub	sp, fp, #4
  10ffe0:	e8bd8800 	pop	{fp, pc}

0010ffe4 <lwip_netconn_do_gethostbyname>:
 *
 * @param arg the dns_api_msg pointing to the query
 */
void
lwip_netconn_do_gethostbyname(void *arg)
{
  10ffe4:	e92d4810 	push	{r4, fp, lr}
  10ffe8:	e28db008 	add	fp, sp, #8
  10ffec:	e24dd01c 	sub	sp, sp, #28
  10fff0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct dns_api_msg *msg = (struct dns_api_msg*)arg;
  10fff4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  10fff8:	e50b3010 	str	r3, [fp, #-16]
  u8_t addrtype =
  10fffc:	e3a03000 	mov	r3, #0
  110000:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    msg->dns_addrtype;
#else
    LWIP_DNS_ADDRTYPE_DEFAULT;
#endif

  API_EXPR_DEREF(msg->err) = dns_gethostbyname_addrtype(msg->name,
  110004:	e51b3010 	ldr	r3, [fp, #-16]
  110008:	e5930000 	ldr	r0, [r3]
  11000c:	e51b3010 	ldr	r3, [fp, #-16]
  110010:	e5931004 	ldr	r1, [r3, #4]
  110014:	e51b3010 	ldr	r3, [fp, #-16]
  110018:	e593400c 	ldr	r4, [r3, #12]
  11001c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  110020:	e58d3000 	str	r3, [sp]
  110024:	e51b3010 	ldr	r3, [fp, #-16]
  110028:	e30f2f64 	movw	r2, #65380	; 0xff64
  11002c:	e3402010 	movt	r2, #16
  110030:	eb0020d2 	bl	118380 <dns_gethostbyname_addrtype>
  110034:	e1a03000 	mov	r3, r0
  110038:	e5c43000 	strb	r3, [r4]
    API_EXPR_REF(msg->addr), lwip_netconn_do_dns_found, msg, addrtype);
  if (API_EXPR_DEREF(msg->err) != ERR_INPROGRESS) {
  11003c:	e51b3010 	ldr	r3, [fp, #-16]
  110040:	e593300c 	ldr	r3, [r3, #12]
  110044:	e1d330d0 	ldrsb	r3, [r3]
  110048:	e3730005 	cmn	r3, #5
  11004c:	0a000003 	beq	110060 <lwip_netconn_do_gethostbyname+0x7c>
    /* on error or immediate success, wake up the application
     * task waiting in netconn_gethostbyname */
    sys_sem_signal(API_EXPR_REF_SEM(msg->sem));
  110050:	e51b3010 	ldr	r3, [fp, #-16]
  110054:	e5933008 	ldr	r3, [r3, #8]
  110058:	e1a00003 	mov	r0, r3
  11005c:	ebffe9a4 	bl	10a6f4 <sys_sem_signal>
  }
}
  110060:	e320f000 	nop	{0}
  110064:	e24bd008 	sub	sp, fp, #8
  110068:	e8bd8810 	pop	{r4, fp, pc}

0011006c <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
  11006c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  110070:	e28db000 	add	fp, sp, #0
  110074:	e24dd00c 	sub	sp, sp, #12
  110078:	e1a03000 	mov	r3, r0
  11007c:	e54b3005 	strb	r3, [fp, #-5]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
  110080:	e15b30d5 	ldrsb	r3, [fp, #-5]
  110084:	e3530000 	cmp	r3, #0
  110088:	ca000003 	bgt	11009c <err_to_errno+0x30>
  11008c:	e15b30d5 	ldrsb	r3, [fp, #-5]
  110090:	e2633000 	rsb	r3, r3, #0
  110094:	e3530010 	cmp	r3, #16
  110098:	da000001 	ble	1100a4 <err_to_errno+0x38>
    return EIO;
  11009c:	e3a03005 	mov	r3, #5
  1100a0:	ea000004 	b	1100b8 <err_to_errno+0x4c>
  }
  return err_to_errno_table[-err];
  1100a4:	e15b30d5 	ldrsb	r3, [fp, #-5]
  1100a8:	e2632000 	rsb	r2, r3, #0
  1100ac:	e3063d10 	movw	r3, #27920	; 0x6d10
  1100b0:	e3403014 	movt	r3, #20
  1100b4:	e7933102 	ldr	r3, [r3, r2, lsl #2]
}
  1100b8:	e1a00003 	mov	r0, r3
  1100bc:	e28bd000 	add	sp, fp, #0
  1100c0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1100c4:	e12fff1e 	bx	lr

001100c8 <netbuf_new>:
 * @return a pointer to a new netbuf
 *         NULL on lack of memory
 */
struct
netbuf *netbuf_new(void)
{
  1100c8:	e92d4800 	push	{fp, lr}
  1100cc:	e28db004 	add	fp, sp, #4
  1100d0:	e24dd008 	sub	sp, sp, #8
  struct netbuf *buf;

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
  1100d4:	e3a02043 	mov	r2, #67	; 0x43
  1100d8:	e3061d54 	movw	r1, #27988	; 0x6d54
  1100dc:	e3401014 	movt	r1, #20
  1100e0:	e3a00007 	mov	r0, #7
  1100e4:	eb002476 	bl	1192c4 <memp_malloc_fn>
  1100e8:	e50b0008 	str	r0, [fp, #-8]
  if (buf != NULL) {
  1100ec:	e51b3008 	ldr	r3, [fp, #-8]
  1100f0:	e3530000 	cmp	r3, #0
  1100f4:	0a000003 	beq	110108 <netbuf_new+0x40>
    memset(buf, 0, sizeof(struct netbuf));
  1100f8:	e3a02010 	mov	r2, #16
  1100fc:	e3a01000 	mov	r1, #0
  110100:	e51b0008 	ldr	r0, [fp, #-8]
  110104:	eb00c4d4 	bl	14145c <memset>
  }
  return buf;
  110108:	e51b3008 	ldr	r3, [fp, #-8]
}
  11010c:	e1a00003 	mov	r0, r3
  110110:	e24bd004 	sub	sp, fp, #4
  110114:	e8bd8800 	pop	{fp, pc}

00110118 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
  110118:	e92d4800 	push	{fp, lr}
  11011c:	e28db004 	add	fp, sp, #4
  110120:	e24dd008 	sub	sp, sp, #8
  110124:	e50b0008 	str	r0, [fp, #-8]
  if (buf != NULL) {
  110128:	e51b3008 	ldr	r3, [fp, #-8]
  11012c:	e3530000 	cmp	r3, #0
  110130:	0a000011 	beq	11017c <netbuf_delete+0x64>
    if (buf->p != NULL) {
  110134:	e51b3008 	ldr	r3, [fp, #-8]
  110138:	e5933000 	ldr	r3, [r3]
  11013c:	e3530000 	cmp	r3, #0
  110140:	0a00000a 	beq	110170 <netbuf_delete+0x58>
      pbuf_free(buf->p);
  110144:	e51b3008 	ldr	r3, [fp, #-8]
  110148:	e5933000 	ldr	r3, [r3]
  11014c:	e1a00003 	mov	r0, r3
  110150:	eb002bd1 	bl	11b09c <pbuf_free>
      buf->p = buf->ptr = NULL;
  110154:	e51b3008 	ldr	r3, [fp, #-8]
  110158:	e3a02000 	mov	r2, #0
  11015c:	e5832004 	str	r2, [r3, #4]
  110160:	e51b3008 	ldr	r3, [fp, #-8]
  110164:	e5932004 	ldr	r2, [r3, #4]
  110168:	e51b3008 	ldr	r3, [fp, #-8]
  11016c:	e5832000 	str	r2, [r3]
    }
    memp_free(MEMP_NETBUF, buf);
  110170:	e51b1008 	ldr	r1, [fp, #-8]
  110174:	e3a00007 	mov	r0, #7
  110178:	eb0024b9 	bl	119464 <memp_free>
  }
}
  11017c:	e320f000 	nop	{0}
  110180:	e24bd004 	sub	sp, fp, #4
  110184:	e8bd8800 	pop	{fp, pc}

00110188 <netbuf_alloc>:
 * @return pointer to the allocated memory
 *         NULL if no memory could be allocated
 */
void *
netbuf_alloc(struct netbuf *buf, u16_t size)
{
  110188:	e92d4800 	push	{fp, lr}
  11018c:	e28db004 	add	fp, sp, #4
  110190:	e24dd008 	sub	sp, sp, #8
  110194:	e50b0008 	str	r0, [fp, #-8]
  110198:	e1a03001 	mov	r3, r1
  11019c:	e14b30ba 	strh	r3, [fp, #-10]
  LWIP_ERROR("netbuf_alloc: invalid buf", (buf != NULL), return NULL;);
  1101a0:	e51b3008 	ldr	r3, [fp, #-8]
  1101a4:	e3530000 	cmp	r3, #0
  1101a8:	1a000008 	bne	1101d0 <netbuf_alloc+0x48>
  1101ac:	e3060d84 	movw	r0, #28036	; 0x6d84
  1101b0:	e3400014 	movt	r0, #20
  1101b4:	ebffcbd6 	bl	103114 <rt_kprintf>
  1101b8:	e3a01068 	mov	r1, #104	; 0x68
  1101bc:	e3060d54 	movw	r0, #27988	; 0x6d54
  1101c0:	e3400014 	movt	r0, #20
  1101c4:	ebffeba6 	bl	10b064 <sys_arch_assert>
  1101c8:	e3a03000 	mov	r3, #0
  1101cc:	ea000029 	b	110278 <netbuf_alloc+0xf0>

  /* Deallocate any previously allocated memory. */
  if (buf->p != NULL) {
  1101d0:	e51b3008 	ldr	r3, [fp, #-8]
  1101d4:	e5933000 	ldr	r3, [r3]
  1101d8:	e3530000 	cmp	r3, #0
  1101dc:	0a000003 	beq	1101f0 <netbuf_alloc+0x68>
    pbuf_free(buf->p);
  1101e0:	e51b3008 	ldr	r3, [fp, #-8]
  1101e4:	e5933000 	ldr	r3, [r3]
  1101e8:	e1a00003 	mov	r0, r3
  1101ec:	eb002baa 	bl	11b09c <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, size, PBUF_RAM);
  1101f0:	e15b30ba 	ldrh	r3, [fp, #-10]
  1101f4:	e3a02000 	mov	r2, #0
  1101f8:	e1a01003 	mov	r1, r3
  1101fc:	e3a00000 	mov	r0, #0
  110200:	eb00289e 	bl	11a480 <pbuf_alloc>
  110204:	e1a02000 	mov	r2, r0
  110208:	e51b3008 	ldr	r3, [fp, #-8]
  11020c:	e5832000 	str	r2, [r3]
  if (buf->p == NULL) {
  110210:	e51b3008 	ldr	r3, [fp, #-8]
  110214:	e5933000 	ldr	r3, [r3]
  110218:	e3530000 	cmp	r3, #0
  11021c:	1a000001 	bne	110228 <netbuf_alloc+0xa0>
     return NULL;
  110220:	e3a03000 	mov	r3, #0
  110224:	ea000013 	b	110278 <netbuf_alloc+0xf0>
  }
  LWIP_ASSERT("check that first pbuf can hold size",
  110228:	e51b3008 	ldr	r3, [fp, #-8]
  11022c:	e5933000 	ldr	r3, [r3]
  110230:	e1d330ba 	ldrh	r3, [r3, #10]
  110234:	e15b20ba 	ldrh	r2, [fp, #-10]
  110238:	e1520003 	cmp	r2, r3
  11023c:	9a000006 	bls	11025c <netbuf_alloc+0xd4>
  110240:	e3060da0 	movw	r0, #28064	; 0x6da0
  110244:	e3400014 	movt	r0, #20
  110248:	ebffcbb1 	bl	103114 <rt_kprintf>
  11024c:	e3a01073 	mov	r1, #115	; 0x73
  110250:	e3060d54 	movw	r0, #27988	; 0x6d54
  110254:	e3400014 	movt	r0, #20
  110258:	ebffeb81 	bl	10b064 <sys_arch_assert>
             (buf->p->len >= size));
  buf->ptr = buf->p;
  11025c:	e51b3008 	ldr	r3, [fp, #-8]
  110260:	e5932000 	ldr	r2, [r3]
  110264:	e51b3008 	ldr	r3, [fp, #-8]
  110268:	e5832004 	str	r2, [r3, #4]
  return buf->p->payload;
  11026c:	e51b3008 	ldr	r3, [fp, #-8]
  110270:	e5933000 	ldr	r3, [r3]
  110274:	e5933004 	ldr	r3, [r3, #4]
}
  110278:	e1a00003 	mov	r0, r3
  11027c:	e24bd004 	sub	sp, fp, #4
  110280:	e8bd8800 	pop	{fp, pc}

00110284 <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
  110284:	e92d4800 	push	{fp, lr}
  110288:	e28db004 	add	fp, sp, #4
  11028c:	e24dd008 	sub	sp, sp, #8
  110290:	e50b0008 	str	r0, [fp, #-8]
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
  110294:	e51b3008 	ldr	r3, [fp, #-8]
  110298:	e3530000 	cmp	r3, #0
  11029c:	1a000007 	bne	1102c0 <netbuf_free+0x3c>
  1102a0:	e3060dc4 	movw	r0, #28100	; 0x6dc4
  1102a4:	e3400014 	movt	r0, #20
  1102a8:	ebffcb99 	bl	103114 <rt_kprintf>
  1102ac:	e3a01081 	mov	r1, #129	; 0x81
  1102b0:	e3060d54 	movw	r0, #27988	; 0x6d54
  1102b4:	e3400014 	movt	r0, #20
  1102b8:	ebffeb69 	bl	10b064 <sys_arch_assert>
  1102bc:	ea00000e 	b	1102fc <netbuf_free+0x78>
  if (buf->p != NULL) {
  1102c0:	e51b3008 	ldr	r3, [fp, #-8]
  1102c4:	e5933000 	ldr	r3, [r3]
  1102c8:	e3530000 	cmp	r3, #0
  1102cc:	0a000003 	beq	1102e0 <netbuf_free+0x5c>
    pbuf_free(buf->p);
  1102d0:	e51b3008 	ldr	r3, [fp, #-8]
  1102d4:	e5933000 	ldr	r3, [r3]
  1102d8:	e1a00003 	mov	r0, r3
  1102dc:	eb002b6e 	bl	11b09c <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
  1102e0:	e51b3008 	ldr	r3, [fp, #-8]
  1102e4:	e3a02000 	mov	r2, #0
  1102e8:	e5832004 	str	r2, [r3, #4]
  1102ec:	e51b3008 	ldr	r3, [fp, #-8]
  1102f0:	e5932004 	ldr	r2, [r3, #4]
  1102f4:	e51b3008 	ldr	r3, [fp, #-8]
  1102f8:	e5832000 	str	r2, [r3]
}
  1102fc:	e24bd004 	sub	sp, fp, #4
  110300:	e8bd8800 	pop	{fp, pc}

00110304 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
  110304:	e92d4800 	push	{fp, lr}
  110308:	e28db004 	add	fp, sp, #4
  11030c:	e24dd010 	sub	sp, sp, #16
  110310:	e50b0008 	str	r0, [fp, #-8]
  110314:	e50b100c 	str	r1, [fp, #-12]
  110318:	e1a03002 	mov	r3, r2
  11031c:	e14b30be 	strh	r3, [fp, #-14]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
  110320:	e51b3008 	ldr	r3, [fp, #-8]
  110324:	e3530000 	cmp	r3, #0
  110328:	1a000008 	bne	110350 <netbuf_ref+0x4c>
  11032c:	e3060de0 	movw	r0, #28128	; 0x6de0
  110330:	e3400014 	movt	r0, #20
  110334:	ebffcb76 	bl	103114 <rt_kprintf>
  110338:	e3a01095 	mov	r1, #149	; 0x95
  11033c:	e3060d54 	movw	r0, #27988	; 0x6d54
  110340:	e3400014 	movt	r0, #20
  110344:	ebffeb46 	bl	10b064 <sys_arch_assert>
  110348:	e3e0300f 	mvn	r3, #15
  11034c:	ea000028 	b	1103f4 <netbuf_ref+0xf0>
  if (buf->p != NULL) {
  110350:	e51b3008 	ldr	r3, [fp, #-8]
  110354:	e5933000 	ldr	r3, [r3]
  110358:	e3530000 	cmp	r3, #0
  11035c:	0a000003 	beq	110370 <netbuf_ref+0x6c>
    pbuf_free(buf->p);
  110360:	e51b3008 	ldr	r3, [fp, #-8]
  110364:	e5933000 	ldr	r3, [r3]
  110368:	e1a00003 	mov	r0, r3
  11036c:	eb002b4a 	bl	11b09c <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
  110370:	e3a02002 	mov	r2, #2
  110374:	e3a01000 	mov	r1, #0
  110378:	e3a00000 	mov	r0, #0
  11037c:	eb00283f 	bl	11a480 <pbuf_alloc>
  110380:	e1a02000 	mov	r2, r0
  110384:	e51b3008 	ldr	r3, [fp, #-8]
  110388:	e5832000 	str	r2, [r3]
  if (buf->p == NULL) {
  11038c:	e51b3008 	ldr	r3, [fp, #-8]
  110390:	e5933000 	ldr	r3, [r3]
  110394:	e3530000 	cmp	r3, #0
  110398:	1a000004 	bne	1103b0 <netbuf_ref+0xac>
    buf->ptr = NULL;
  11039c:	e51b3008 	ldr	r3, [fp, #-8]
  1103a0:	e3a02000 	mov	r2, #0
  1103a4:	e5832004 	str	r2, [r3, #4]
    return ERR_MEM;
  1103a8:	e3e03000 	mvn	r3, #0
  1103ac:	ea000010 	b	1103f4 <netbuf_ref+0xf0>
  }
  ((struct pbuf_rom*)buf->p)->payload = dataptr;
  1103b0:	e51b3008 	ldr	r3, [fp, #-8]
  1103b4:	e5933000 	ldr	r3, [r3]
  1103b8:	e51b200c 	ldr	r2, [fp, #-12]
  1103bc:	e5832004 	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
  1103c0:	e51b3008 	ldr	r3, [fp, #-8]
  1103c4:	e5933000 	ldr	r3, [r3]
  1103c8:	e15b20be 	ldrh	r2, [fp, #-14]
  1103cc:	e1c320b8 	strh	r2, [r3, #8]
  1103d0:	e51b2008 	ldr	r2, [fp, #-8]
  1103d4:	e5922000 	ldr	r2, [r2]
  1103d8:	e1d330b8 	ldrh	r3, [r3, #8]
  1103dc:	e1c230ba 	strh	r3, [r2, #10]
  buf->ptr = buf->p;
  1103e0:	e51b3008 	ldr	r3, [fp, #-8]
  1103e4:	e5932000 	ldr	r2, [r3]
  1103e8:	e51b3008 	ldr	r3, [fp, #-8]
  1103ec:	e5832004 	str	r2, [r3, #4]
  return ERR_OK;
  1103f0:	e3a03000 	mov	r3, #0
}
  1103f4:	e1a00003 	mov	r0, r3
  1103f8:	e24bd004 	sub	sp, fp, #4
  1103fc:	e8bd8800 	pop	{fp, pc}

00110400 <netbuf_chain>:
 * @param head the first netbuf
 * @param tail netbuf to chain after head, freed by this function, may not be reference after returning
 */
void
netbuf_chain(struct netbuf *head, struct netbuf *tail)
{
  110400:	e92d4800 	push	{fp, lr}
  110404:	e28db004 	add	fp, sp, #4
  110408:	e24dd008 	sub	sp, sp, #8
  11040c:	e50b0008 	str	r0, [fp, #-8]
  110410:	e50b100c 	str	r1, [fp, #-12]
  LWIP_ERROR("netbuf_chain: invalid head", (head != NULL), return;);
  110414:	e51b3008 	ldr	r3, [fp, #-8]
  110418:	e3530000 	cmp	r3, #0
  11041c:	1a000007 	bne	110440 <netbuf_chain+0x40>
  110420:	e3060df8 	movw	r0, #28152	; 0x6df8
  110424:	e3400014 	movt	r0, #20
  110428:	ebffcb39 	bl	103114 <rt_kprintf>
  11042c:	e3a010ae 	mov	r1, #174	; 0xae
  110430:	e3060d54 	movw	r0, #27988	; 0x6d54
  110434:	e3400014 	movt	r0, #20
  110438:	ebffeb09 	bl	10b064 <sys_arch_assert>
  11043c:	ea000018 	b	1104a4 <netbuf_chain+0xa4>
  LWIP_ERROR("netbuf_chain: invalid tail", (tail != NULL), return;);
  110440:	e51b300c 	ldr	r3, [fp, #-12]
  110444:	e3530000 	cmp	r3, #0
  110448:	1a000007 	bne	11046c <netbuf_chain+0x6c>
  11044c:	e3060e14 	movw	r0, #28180	; 0x6e14
  110450:	e3400014 	movt	r0, #20
  110454:	ebffcb2e 	bl	103114 <rt_kprintf>
  110458:	e3a010af 	mov	r1, #175	; 0xaf
  11045c:	e3060d54 	movw	r0, #27988	; 0x6d54
  110460:	e3400014 	movt	r0, #20
  110464:	ebffeafe 	bl	10b064 <sys_arch_assert>
  110468:	ea00000d 	b	1104a4 <netbuf_chain+0xa4>
  pbuf_cat(head->p, tail->p);
  11046c:	e51b3008 	ldr	r3, [fp, #-8]
  110470:	e5932000 	ldr	r2, [r3]
  110474:	e51b300c 	ldr	r3, [fp, #-12]
  110478:	e5933000 	ldr	r3, [r3]
  11047c:	e1a01003 	mov	r1, r3
  110480:	e1a00002 	mov	r0, r2
  110484:	eb002bbb 	bl	11b378 <pbuf_cat>
  head->ptr = head->p;
  110488:	e51b3008 	ldr	r3, [fp, #-8]
  11048c:	e5932000 	ldr	r2, [r3]
  110490:	e51b3008 	ldr	r3, [fp, #-8]
  110494:	e5832004 	str	r2, [r3, #4]
  memp_free(MEMP_NETBUF, tail);
  110498:	e51b100c 	ldr	r1, [fp, #-12]
  11049c:	e3a00007 	mov	r0, #7
  1104a0:	eb0023ef 	bl	119464 <memp_free>
}
  1104a4:	e24bd004 	sub	sp, fp, #4
  1104a8:	e8bd8800 	pop	{fp, pc}

001104ac <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
  1104ac:	e92d4800 	push	{fp, lr}
  1104b0:	e28db004 	add	fp, sp, #4
  1104b4:	e24dd010 	sub	sp, sp, #16
  1104b8:	e50b0008 	str	r0, [fp, #-8]
  1104bc:	e50b100c 	str	r1, [fp, #-12]
  1104c0:	e50b2010 	str	r2, [fp, #-16]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
  1104c4:	e51b3008 	ldr	r3, [fp, #-8]
  1104c8:	e3530000 	cmp	r3, #0
  1104cc:	1a000008 	bne	1104f4 <netbuf_data+0x48>
  1104d0:	e3060e30 	movw	r0, #28208	; 0x6e30
  1104d4:	e3400014 	movt	r0, #20
  1104d8:	ebffcb0d 	bl	103114 <rt_kprintf>
  1104dc:	e3a010c2 	mov	r1, #194	; 0xc2
  1104e0:	e3060d54 	movw	r0, #27988	; 0x6d54
  1104e4:	e3400014 	movt	r0, #20
  1104e8:	ebffeadd 	bl	10b064 <sys_arch_assert>
  1104ec:	e3e0300f 	mvn	r3, #15
  1104f0:	ea000028 	b	110598 <netbuf_data+0xec>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
  1104f4:	e51b300c 	ldr	r3, [fp, #-12]
  1104f8:	e3530000 	cmp	r3, #0
  1104fc:	1a000008 	bne	110524 <netbuf_data+0x78>
  110500:	e3060e4c 	movw	r0, #28236	; 0x6e4c
  110504:	e3400014 	movt	r0, #20
  110508:	ebffcb01 	bl	103114 <rt_kprintf>
  11050c:	e3a010c3 	mov	r1, #195	; 0xc3
  110510:	e3060d54 	movw	r0, #27988	; 0x6d54
  110514:	e3400014 	movt	r0, #20
  110518:	ebffead1 	bl	10b064 <sys_arch_assert>
  11051c:	e3e0300f 	mvn	r3, #15
  110520:	ea00001c 	b	110598 <netbuf_data+0xec>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
  110524:	e51b3010 	ldr	r3, [fp, #-16]
  110528:	e3530000 	cmp	r3, #0
  11052c:	1a000008 	bne	110554 <netbuf_data+0xa8>
  110530:	e3060e6c 	movw	r0, #28268	; 0x6e6c
  110534:	e3400014 	movt	r0, #20
  110538:	ebffcaf5 	bl	103114 <rt_kprintf>
  11053c:	e3a010c4 	mov	r1, #196	; 0xc4
  110540:	e3060d54 	movw	r0, #27988	; 0x6d54
  110544:	e3400014 	movt	r0, #20
  110548:	ebffeac5 	bl	10b064 <sys_arch_assert>
  11054c:	e3e0300f 	mvn	r3, #15
  110550:	ea000010 	b	110598 <netbuf_data+0xec>

  if (buf->ptr == NULL) {
  110554:	e51b3008 	ldr	r3, [fp, #-8]
  110558:	e5933004 	ldr	r3, [r3, #4]
  11055c:	e3530000 	cmp	r3, #0
  110560:	1a000001 	bne	11056c <netbuf_data+0xc0>
    return ERR_BUF;
  110564:	e3e03001 	mvn	r3, #1
  110568:	ea00000a 	b	110598 <netbuf_data+0xec>
  }
  *dataptr = buf->ptr->payload;
  11056c:	e51b3008 	ldr	r3, [fp, #-8]
  110570:	e5933004 	ldr	r3, [r3, #4]
  110574:	e5932004 	ldr	r2, [r3, #4]
  110578:	e51b300c 	ldr	r3, [fp, #-12]
  11057c:	e5832000 	str	r2, [r3]
  *len = buf->ptr->len;
  110580:	e51b3008 	ldr	r3, [fp, #-8]
  110584:	e5933004 	ldr	r3, [r3, #4]
  110588:	e1d320ba 	ldrh	r2, [r3, #10]
  11058c:	e51b3010 	ldr	r3, [fp, #-16]
  110590:	e1c320b0 	strh	r2, [r3]
  return ERR_OK;
  110594:	e3a03000 	mov	r3, #0
}
  110598:	e1a00003 	mov	r0, r3
  11059c:	e24bd004 	sub	sp, fp, #4
  1105a0:	e8bd8800 	pop	{fp, pc}

001105a4 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
  1105a4:	e92d4800 	push	{fp, lr}
  1105a8:	e28db004 	add	fp, sp, #4
  1105ac:	e24dd008 	sub	sp, sp, #8
  1105b0:	e50b0008 	str	r0, [fp, #-8]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
  1105b4:	e51b3008 	ldr	r3, [fp, #-8]
  1105b8:	e3530000 	cmp	r3, #0
  1105bc:	1a000008 	bne	1105e4 <netbuf_next+0x40>
  1105c0:	e3060e88 	movw	r0, #28296	; 0x6e88
  1105c4:	e3400014 	movt	r0, #20
  1105c8:	ebffcad1 	bl	103114 <rt_kprintf>
  1105cc:	e3a010dc 	mov	r1, #220	; 0xdc
  1105d0:	e3060d54 	movw	r0, #27988	; 0x6d54
  1105d4:	e3400014 	movt	r0, #20
  1105d8:	ebffeaa1 	bl	10b064 <sys_arch_assert>
  1105dc:	e3e03000 	mvn	r3, #0
  1105e0:	ea000013 	b	110634 <netbuf_next+0x90>
  if (buf->ptr->next == NULL) {
  1105e4:	e51b3008 	ldr	r3, [fp, #-8]
  1105e8:	e5933004 	ldr	r3, [r3, #4]
  1105ec:	e5933000 	ldr	r3, [r3]
  1105f0:	e3530000 	cmp	r3, #0
  1105f4:	1a000001 	bne	110600 <netbuf_next+0x5c>
    return -1;
  1105f8:	e3e03000 	mvn	r3, #0
  1105fc:	ea00000c 	b	110634 <netbuf_next+0x90>
  }
  buf->ptr = buf->ptr->next;
  110600:	e51b3008 	ldr	r3, [fp, #-8]
  110604:	e5933004 	ldr	r3, [r3, #4]
  110608:	e5932000 	ldr	r2, [r3]
  11060c:	e51b3008 	ldr	r3, [fp, #-8]
  110610:	e5832004 	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
  110614:	e51b3008 	ldr	r3, [fp, #-8]
  110618:	e5933004 	ldr	r3, [r3, #4]
  11061c:	e5933000 	ldr	r3, [r3]
  110620:	e3530000 	cmp	r3, #0
  110624:	1a000001 	bne	110630 <netbuf_next+0x8c>
    return 1;
  110628:	e3a03001 	mov	r3, #1
  11062c:	ea000000 	b	110634 <netbuf_next+0x90>
  }
  return 0;
  110630:	e3a03000 	mov	r3, #0
}
  110634:	e1a00003 	mov	r0, r3
  110638:	e24bd004 	sub	sp, fp, #4
  11063c:	e8bd8800 	pop	{fp, pc}

00110640 <netbuf_first>:
 *
 * @param buf the netbuf to modify
 */
void
netbuf_first(struct netbuf *buf)
{
  110640:	e92d4800 	push	{fp, lr}
  110644:	e28db004 	add	fp, sp, #4
  110648:	e24dd008 	sub	sp, sp, #8
  11064c:	e50b0008 	str	r0, [fp, #-8]
  LWIP_ERROR("netbuf_first: invalid buf", (buf != NULL), return;);
  110650:	e51b3008 	ldr	r3, [fp, #-8]
  110654:	e3530000 	cmp	r3, #0
  110658:	1a000007 	bne	11067c <netbuf_first+0x3c>
  11065c:	e3060ea4 	movw	r0, #28324	; 0x6ea4
  110660:	e3400014 	movt	r0, #20
  110664:	ebffcaaa 	bl	103114 <rt_kprintf>
  110668:	e3a010f2 	mov	r1, #242	; 0xf2
  11066c:	e3060d54 	movw	r0, #27988	; 0x6d54
  110670:	e3400014 	movt	r0, #20
  110674:	ebffea7a 	bl	10b064 <sys_arch_assert>
  110678:	ea000003 	b	11068c <netbuf_first+0x4c>
  buf->ptr = buf->p;
  11067c:	e51b3008 	ldr	r3, [fp, #-8]
  110680:	e5932000 	ldr	r2, [r3]
  110684:	e51b3008 	ldr	r3, [fp, #-8]
  110688:	e5832004 	str	r2, [r3, #4]
}
  11068c:	e24bd004 	sub	sp, fp, #4
  110690:	e8bd8800 	pop	{fp, pc}

00110694 <lwip_gethostbyname>:
 * @return an entry containing addresses of address family AF_INET
 *         for the host with name name
 */
struct hostent*
lwip_gethostbyname(const char *name)
{
  110694:	e92d4800 	push	{fp, lr}
  110698:	e28db004 	add	fp, sp, #4
  11069c:	e24dd010 	sub	sp, sp, #16
  1106a0:	e50b0010 	str	r0, [fp, #-16]
  HOSTENT_STORAGE ip_addr_t s_hostent_addr;
  HOSTENT_STORAGE ip_addr_t *s_phostent_addr[2];
  HOSTENT_STORAGE char s_hostname[DNS_MAX_NAME_LENGTH + 1];

  /* query host IP address */
  err = netconn_gethostbyname(name, &addr);
  1106a4:	e24b300c 	sub	r3, fp, #12
  1106a8:	e1a01003 	mov	r1, r3
  1106ac:	e51b0010 	ldr	r0, [fp, #-16]
  1106b0:	ebffef98 	bl	10c518 <netconn_gethostbyname>
  1106b4:	e1a03000 	mov	r3, r0
  1106b8:	e54b3005 	strb	r3, [fp, #-5]
  if (err != ERR_OK) {
  1106bc:	e15b30d5 	ldrsb	r3, [fp, #-5]
  1106c0:	e3530000 	cmp	r3, #0
  1106c4:	0a000005 	beq	1106e0 <lwip_gethostbyname+0x4c>
    LWIP_DEBUGF(DNS_DEBUG, ("lwip_gethostbyname(%s) failed, err=%d\n", name, err));
    h_errno = HOST_NOT_FOUND;
  1106c8:	e3003580 	movw	r3, #1408	; 0x580
  1106cc:	e3403015 	movt	r3, #21
  1106d0:	e3a020d2 	mov	r2, #210	; 0xd2
  1106d4:	e5832000 	str	r2, [r3]
    return NULL;
  1106d8:	e3a03000 	mov	r3, #0
  1106dc:	ea000032 	b	1107ac <lwip_gethostbyname+0x118>
  }

  /* fill hostent */
  s_hostent_addr = addr;
  1106e0:	e30e3a58 	movw	r3, #59992	; 0xea58
  1106e4:	e3403014 	movt	r3, #20
  1106e8:	e51b200c 	ldr	r2, [fp, #-12]
  1106ec:	e5832000 	str	r2, [r3]
  s_phostent_addr[0] = &s_hostent_addr;
  1106f0:	e30e3a5c 	movw	r3, #59996	; 0xea5c
  1106f4:	e3403014 	movt	r3, #20
  1106f8:	e30e2a58 	movw	r2, #59992	; 0xea58
  1106fc:	e3402014 	movt	r2, #20
  110700:	e5832000 	str	r2, [r3]
  s_phostent_addr[1] = NULL;
  110704:	e30e3a5c 	movw	r3, #59996	; 0xea5c
  110708:	e3403014 	movt	r3, #20
  11070c:	e3a02000 	mov	r2, #0
  110710:	e5832004 	str	r2, [r3, #4]
  strncpy(s_hostname, name, DNS_MAX_NAME_LENGTH);
  110714:	e3a02c01 	mov	r2, #256	; 0x100
  110718:	e51b1010 	ldr	r1, [fp, #-16]
  11071c:	e30e0a64 	movw	r0, #60004	; 0xea64
  110720:	e3400014 	movt	r0, #20
  110724:	eb00c42e 	bl	1417e4 <strncpy>
  s_hostname[DNS_MAX_NAME_LENGTH] = 0;
  110728:	e30e3a64 	movw	r3, #60004	; 0xea64
  11072c:	e3403014 	movt	r3, #20
  110730:	e3a02000 	mov	r2, #0
  110734:	e5c32100 	strb	r2, [r3, #256]	; 0x100
  s_hostent.h_name = s_hostname;
  110738:	e30e3b68 	movw	r3, #60264	; 0xeb68
  11073c:	e3403014 	movt	r3, #20
  110740:	e30e2a64 	movw	r2, #60004	; 0xea64
  110744:	e3402014 	movt	r2, #20
  110748:	e5832000 	str	r2, [r3]
  s_aliases = NULL;
  11074c:	e30e3b7c 	movw	r3, #60284	; 0xeb7c
  110750:	e3403014 	movt	r3, #20
  110754:	e3a02000 	mov	r2, #0
  110758:	e5832000 	str	r2, [r3]
  s_hostent.h_aliases = &s_aliases;
  11075c:	e30e3b68 	movw	r3, #60264	; 0xeb68
  110760:	e3403014 	movt	r3, #20
  110764:	e30e2b7c 	movw	r2, #60284	; 0xeb7c
  110768:	e3402014 	movt	r2, #20
  11076c:	e5832004 	str	r2, [r3, #4]
  s_hostent.h_addrtype = AF_INET;
  110770:	e30e3b68 	movw	r3, #60264	; 0xeb68
  110774:	e3403014 	movt	r3, #20
  110778:	e3a02002 	mov	r2, #2
  11077c:	e5832008 	str	r2, [r3, #8]
  s_hostent.h_length = sizeof(ip_addr_t);
  110780:	e30e3b68 	movw	r3, #60264	; 0xeb68
  110784:	e3403014 	movt	r3, #20
  110788:	e3a02004 	mov	r2, #4
  11078c:	e583200c 	str	r2, [r3, #12]
  s_hostent.h_addr_list = (char**)&s_phostent_addr;
  110790:	e30e3b68 	movw	r3, #60264	; 0xeb68
  110794:	e3403014 	movt	r3, #20
  110798:	e30e2a5c 	movw	r2, #59996	; 0xea5c
  11079c:	e3402014 	movt	r2, #20
  1107a0:	e5832010 	str	r2, [r3, #16]

#if LWIP_DNS_API_HOSTENT_STORAGE
  /* this function should return the "per-thread" hostent after copy from s_hostent */
  return sys_thread_hostent(&s_hostent);
#else
  return &s_hostent;
  1107a4:	e30e3b68 	movw	r3, #60264	; 0xeb68
  1107a8:	e3403014 	movt	r3, #20
#endif /* LWIP_DNS_API_HOSTENT_STORAGE */
}
  1107ac:	e1a00003 	mov	r0, r3
  1107b0:	e24bd004 	sub	sp, fp, #4
  1107b4:	e8bd8800 	pop	{fp, pc}

001107b8 <lwip_gethostbyname_r>:
 *         is stored in *h_errnop instead of h_errno to be thread-safe
 */
int
lwip_gethostbyname_r(const char *name, struct hostent *ret, char *buf,
                size_t buflen, struct hostent **result, int *h_errnop)
{
  1107b8:	e92d4800 	push	{fp, lr}
  1107bc:	e28db004 	add	fp, sp, #4
  1107c0:	e24dd028 	sub	sp, sp, #40	; 0x28
  1107c4:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  1107c8:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  1107cc:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  1107d0:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
  struct gethostbyname_r_helper *h;
  char *hostname;
  size_t namelen;
  int lh_errno;

  if (h_errnop == NULL) {
  1107d4:	e59b3008 	ldr	r3, [fp, #8]
  1107d8:	e3530000 	cmp	r3, #0
  1107dc:	1a000001 	bne	1107e8 <lwip_gethostbyname_r+0x30>
    /* ensure h_errnop is never NULL */
    h_errnop = &lh_errno;
  1107e0:	e24b3018 	sub	r3, fp, #24
  1107e4:	e58b3008 	str	r3, [fp, #8]
  }

  if (result == NULL) {
  1107e8:	e59b3004 	ldr	r3, [fp, #4]
  1107ec:	e3530000 	cmp	r3, #0
  1107f0:	1a000004 	bne	110808 <lwip_gethostbyname_r+0x50>
    /* not all arguments given */
    *h_errnop = EINVAL;
  1107f4:	e59b3008 	ldr	r3, [fp, #8]
  1107f8:	e3a02016 	mov	r2, #22
  1107fc:	e5832000 	str	r2, [r3]
    return -1;
  110800:	e3e03000 	mvn	r3, #0
  110804:	ea00005a 	b	110974 <lwip_gethostbyname_r+0x1bc>
  }
  /* first thing to do: set *result to nothing */
  *result = NULL;
  110808:	e59b3004 	ldr	r3, [fp, #4]
  11080c:	e3a02000 	mov	r2, #0
  110810:	e5832000 	str	r2, [r3]
  if ((name == NULL) || (ret == NULL) || (buf == NULL)) {
  110814:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  110818:	e3530000 	cmp	r3, #0
  11081c:	0a000005 	beq	110838 <lwip_gethostbyname_r+0x80>
  110820:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  110824:	e3530000 	cmp	r3, #0
  110828:	0a000002 	beq	110838 <lwip_gethostbyname_r+0x80>
  11082c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  110830:	e3530000 	cmp	r3, #0
  110834:	1a000004 	bne	11084c <lwip_gethostbyname_r+0x94>
    /* not all arguments given */
    *h_errnop = EINVAL;
  110838:	e59b3008 	ldr	r3, [fp, #8]
  11083c:	e3a02016 	mov	r2, #22
  110840:	e5832000 	str	r2, [r3]
    return -1;
  110844:	e3e03000 	mvn	r3, #0
  110848:	ea000049 	b	110974 <lwip_gethostbyname_r+0x1bc>
  }

  namelen = strlen(name);
  11084c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  110850:	eb00c392 	bl	1416a0 <strlen>
  110854:	e50b0008 	str	r0, [fp, #-8]
  if (buflen < (sizeof(struct gethostbyname_r_helper) + namelen + 1 + (MEM_ALIGNMENT - 1))) {
  110858:	e51b3008 	ldr	r3, [fp, #-8]
  11085c:	e2833014 	add	r3, r3, #20
  110860:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  110864:	e1520003 	cmp	r2, r3
  110868:	2a000004 	bcs	110880 <lwip_gethostbyname_r+0xc8>
    /* buf can't hold the data needed + a copy of name */
    *h_errnop = ERANGE;
  11086c:	e59b3008 	ldr	r3, [fp, #8]
  110870:	e3a02022 	mov	r2, #34	; 0x22
  110874:	e5832000 	str	r2, [r3]
    return -1;
  110878:	e3e03000 	mvn	r3, #0
  11087c:	ea00003c 	b	110974 <lwip_gethostbyname_r+0x1bc>
  }

  h = (struct gethostbyname_r_helper*)LWIP_MEM_ALIGN(buf);
  110880:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  110884:	e2833003 	add	r3, r3, #3
  110888:	e3c33003 	bic	r3, r3, #3
  11088c:	e50b300c 	str	r3, [fp, #-12]
  hostname = ((char*)h) + sizeof(struct gethostbyname_r_helper);
  110890:	e51b300c 	ldr	r3, [fp, #-12]
  110894:	e2833010 	add	r3, r3, #16
  110898:	e50b3010 	str	r3, [fp, #-16]

  /* query host IP address */
  err = netconn_gethostbyname(name, &h->addr);
  11089c:	e51b300c 	ldr	r3, [fp, #-12]
  1108a0:	e2833008 	add	r3, r3, #8
  1108a4:	e1a01003 	mov	r1, r3
  1108a8:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  1108ac:	ebffef19 	bl	10c518 <netconn_gethostbyname>
  1108b0:	e1a03000 	mov	r3, r0
  1108b4:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  if (err != ERR_OK) {
  1108b8:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  1108bc:	e3530000 	cmp	r3, #0
  1108c0:	0a000004 	beq	1108d8 <lwip_gethostbyname_r+0x120>
    LWIP_DEBUGF(DNS_DEBUG, ("lwip_gethostbyname(%s) failed, err=%d\n", name, err));
    *h_errnop = HOST_NOT_FOUND;
  1108c4:	e59b3008 	ldr	r3, [fp, #8]
  1108c8:	e3a020d2 	mov	r2, #210	; 0xd2
  1108cc:	e5832000 	str	r2, [r3]
    return -1;
  1108d0:	e3e03000 	mvn	r3, #0
  1108d4:	ea000026 	b	110974 <lwip_gethostbyname_r+0x1bc>
  }

  /* copy the hostname into buf */
  MEMCPY(hostname, name, namelen);
  1108d8:	e51b2008 	ldr	r2, [fp, #-8]
  1108dc:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  1108e0:	e51b0010 	ldr	r0, [fp, #-16]
  1108e4:	eb00c1a4 	bl	140f7c <memcpy>
  hostname[namelen] = 0;
  1108e8:	e51b2010 	ldr	r2, [fp, #-16]
  1108ec:	e51b3008 	ldr	r3, [fp, #-8]
  1108f0:	e0823003 	add	r3, r2, r3
  1108f4:	e3a02000 	mov	r2, #0
  1108f8:	e5c32000 	strb	r2, [r3]

  /* fill hostent */
  h->addr_list[0] = &h->addr;
  1108fc:	e51b300c 	ldr	r3, [fp, #-12]
  110900:	e2832008 	add	r2, r3, #8
  110904:	e51b300c 	ldr	r3, [fp, #-12]
  110908:	e5832000 	str	r2, [r3]
  h->addr_list[1] = NULL;
  11090c:	e51b300c 	ldr	r3, [fp, #-12]
  110910:	e3a02000 	mov	r2, #0
  110914:	e5832004 	str	r2, [r3, #4]
  h->aliases = NULL;
  110918:	e51b300c 	ldr	r3, [fp, #-12]
  11091c:	e3a02000 	mov	r2, #0
  110920:	e583200c 	str	r2, [r3, #12]
  ret->h_name = hostname;
  110924:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  110928:	e51b2010 	ldr	r2, [fp, #-16]
  11092c:	e5832000 	str	r2, [r3]
  ret->h_aliases = &h->aliases;
  110930:	e51b300c 	ldr	r3, [fp, #-12]
  110934:	e283200c 	add	r2, r3, #12
  110938:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11093c:	e5832004 	str	r2, [r3, #4]
  ret->h_addrtype = AF_INET;
  110940:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  110944:	e3a02002 	mov	r2, #2
  110948:	e5832008 	str	r2, [r3, #8]
  ret->h_length = sizeof(ip_addr_t);
  11094c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  110950:	e3a02004 	mov	r2, #4
  110954:	e583200c 	str	r2, [r3, #12]
  ret->h_addr_list = (char**)&h->addr_list;
  110958:	e51b200c 	ldr	r2, [fp, #-12]
  11095c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  110960:	e5832010 	str	r2, [r3, #16]

  /* set result != NULL */
  *result = ret;
  110964:	e59b3004 	ldr	r3, [fp, #4]
  110968:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  11096c:	e5832000 	str	r2, [r3]

  /* return success */
  return 0;
  110970:	e3a03000 	mov	r3, #0
}
  110974:	e1a00003 	mov	r0, r3
  110978:	e24bd004 	sub	sp, fp, #4
  11097c:	e8bd8800 	pop	{fp, pc}

00110980 <lwip_freeaddrinfo>:
 *
 * @param ai struct addrinfo to free
 */
void
lwip_freeaddrinfo(struct addrinfo *ai)
{
  110980:	e92d4800 	push	{fp, lr}
  110984:	e28db004 	add	fp, sp, #4
  110988:	e24dd010 	sub	sp, sp, #16
  11098c:	e50b0010 	str	r0, [fp, #-16]
  struct addrinfo *next;

  while (ai != NULL) {
  110990:	ea000007 	b	1109b4 <lwip_freeaddrinfo+0x34>
    next = ai->ai_next;
  110994:	e51b3010 	ldr	r3, [fp, #-16]
  110998:	e593301c 	ldr	r3, [r3, #28]
  11099c:	e50b3008 	str	r3, [fp, #-8]
    memp_free(MEMP_NETDB, ai);
  1109a0:	e51b1010 	ldr	r1, [fp, #-16]
  1109a4:	e3a0000e 	mov	r0, #14
  1109a8:	eb0022ad 	bl	119464 <memp_free>
    ai = next;
  1109ac:	e51b3008 	ldr	r3, [fp, #-8]
  1109b0:	e50b3010 	str	r3, [fp, #-16]
  while (ai != NULL) {
  1109b4:	e51b3010 	ldr	r3, [fp, #-16]
  1109b8:	e3530000 	cmp	r3, #0
  1109bc:	1afffff4 	bne	110994 <lwip_freeaddrinfo+0x14>
  }
}
  1109c0:	e320f000 	nop	{0}
  1109c4:	e24bd004 	sub	sp, fp, #4
  1109c8:	e8bd8800 	pop	{fp, pc}

001109cc <lwip_getaddrinfo>:
 * @todo: implement AI_V4MAPPED, AI_ADDRCONFIG
 */
int
lwip_getaddrinfo(const char *nodename, const char *servname,
       const struct addrinfo *hints, struct addrinfo **res)
{
  1109cc:	e92d4800 	push	{fp, lr}
  1109d0:	e28db004 	add	fp, sp, #4
  1109d4:	e24dd038 	sub	sp, sp, #56	; 0x38
  1109d8:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  1109dc:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
  1109e0:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
  1109e4:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  err_t err;
  ip_addr_t addr;
  struct addrinfo *ai;
  struct sockaddr_storage *sa = NULL;
  1109e8:	e3a03000 	mov	r3, #0
  1109ec:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  int port_nr = 0;
  1109f0:	e3a03000 	mov	r3, #0
  1109f4:	e50b3008 	str	r3, [fp, #-8]
  size_t total_size;
  size_t namelen = 0;
  1109f8:	e3a03000 	mov	r3, #0
  1109fc:	e50b3010 	str	r3, [fp, #-16]
  int ai_family;

  if (res == NULL) {
  110a00:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  110a04:	e3530000 	cmp	r3, #0
  110a08:	1a000001 	bne	110a14 <lwip_getaddrinfo+0x48>
    return EAI_FAIL;
  110a0c:	e3a030ca 	mov	r3, #202	; 0xca
  110a10:	ea0000d0 	b	110d58 <lwip_getaddrinfo+0x38c>
  }
  *res = NULL;
  110a14:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  110a18:	e3a02000 	mov	r2, #0
  110a1c:	e5832000 	str	r2, [r3]
  if ((nodename == NULL) && (servname == NULL)) {
  110a20:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  110a24:	e3530000 	cmp	r3, #0
  110a28:	1a000004 	bne	110a40 <lwip_getaddrinfo+0x74>
  110a2c:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  110a30:	e3530000 	cmp	r3, #0
  110a34:	1a000001 	bne	110a40 <lwip_getaddrinfo+0x74>
    return EAI_NONAME;
  110a38:	e3a030c8 	mov	r3, #200	; 0xc8
  110a3c:	ea0000c5 	b	110d58 <lwip_getaddrinfo+0x38c>
  }

  if (hints != NULL) {
  110a40:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110a44:	e3530000 	cmp	r3, #0
  110a48:	0a00000a 	beq	110a78 <lwip_getaddrinfo+0xac>
    ai_family = hints->ai_family;
  110a4c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110a50:	e5933004 	ldr	r3, [r3, #4]
  110a54:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    if ((ai_family != AF_UNSPEC)
  110a58:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  110a5c:	e3530000 	cmp	r3, #0
  110a60:	0a000006 	beq	110a80 <lwip_getaddrinfo+0xb4>
#if LWIP_IPV4
      && (ai_family != AF_INET)
  110a64:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  110a68:	e3530002 	cmp	r3, #2
  110a6c:	0a000003 	beq	110a80 <lwip_getaddrinfo+0xb4>
#endif /* LWIP_IPV4 */
#if LWIP_IPV6
      && (ai_family != AF_INET6)
#endif /* LWIP_IPV6 */
      ) {
      return EAI_FAMILY;
  110a70:	e3a030cc 	mov	r3, #204	; 0xcc
  110a74:	ea0000b7 	b	110d58 <lwip_getaddrinfo+0x38c>
    }
  } else {
    ai_family = AF_UNSPEC;
  110a78:	e3a03000 	mov	r3, #0
  110a7c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  }

  if (servname != NULL) {
  110a80:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  110a84:	e3530000 	cmp	r3, #0
  110a88:	0a00000a 	beq	110ab8 <lwip_getaddrinfo+0xec>
    /* service name specified: convert to port number
     * @todo?: currently, only ASCII integers (port numbers) are supported (AI_NUMERICSERV)! */
    port_nr = atoi(servname);
  110a8c:	e51b0034 	ldr	r0, [fp, #-52]	; 0xffffffcc
  110a90:	eb00c10d 	bl	140ecc <atoi>
  110a94:	e50b0008 	str	r0, [fp, #-8]
    if ((port_nr <= 0) || (port_nr > 0xffff)) {
  110a98:	e51b3008 	ldr	r3, [fp, #-8]
  110a9c:	e3530000 	cmp	r3, #0
  110aa0:	da000002 	ble	110ab0 <lwip_getaddrinfo+0xe4>
  110aa4:	e51b3008 	ldr	r3, [fp, #-8]
  110aa8:	e3530801 	cmp	r3, #65536	; 0x10000
  110aac:	ba000001 	blt	110ab8 <lwip_getaddrinfo+0xec>
      return EAI_SERVICE;
  110ab0:	e3a030c9 	mov	r3, #201	; 0xc9
  110ab4:	ea0000a7 	b	110d58 <lwip_getaddrinfo+0x38c>
    }
  }

  if (nodename != NULL) {
  110ab8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  110abc:	e3530000 	cmp	r3, #0
  110ac0:	0a00001b 	beq	110b34 <lwip_getaddrinfo+0x168>
    /* service location specified, try to resolve */
    if ((hints != NULL) && (hints->ai_flags & AI_NUMERICHOST)) {
  110ac4:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110ac8:	e3530000 	cmp	r3, #0
  110acc:	0a00000d 	beq	110b08 <lwip_getaddrinfo+0x13c>
  110ad0:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110ad4:	e5933000 	ldr	r3, [r3]
  110ad8:	e2033004 	and	r3, r3, #4
  110adc:	e3530000 	cmp	r3, #0
  110ae0:	0a000008 	beq	110b08 <lwip_getaddrinfo+0x13c>
      /* no DNS lookup, just parse for an address string */
      if (!ipaddr_aton(nodename, &addr)) {
  110ae4:	e24b3028 	sub	r3, fp, #40	; 0x28
  110ae8:	e1a01003 	mov	r1, r3
  110aec:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  110af0:	eb008775 	bl	1328cc <ip4addr_aton>
  110af4:	e1a03000 	mov	r3, r0
  110af8:	e3530000 	cmp	r3, #0
  110afc:	1a00001a 	bne	110b6c <lwip_getaddrinfo+0x1a0>
        return EAI_NONAME;
  110b00:	e3a030c8 	mov	r3, #200	; 0xc8
  110b04:	ea000093 	b	110d58 <lwip_getaddrinfo+0x38c>
        type = NETCONN_DNS_IPV4;
      } else if (ai_family == AF_INET6) {
        type = NETCONN_DNS_IPV6;
      }
#endif /* LWIP_IPV4 && LWIP_IPV6 */
      err = netconn_gethostbyname_addrtype(nodename, &addr, type);
  110b08:	e24b3028 	sub	r3, fp, #40	; 0x28
  110b0c:	e1a01003 	mov	r1, r3
  110b10:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  110b14:	ebffee7f 	bl	10c518 <netconn_gethostbyname>
  110b18:	e1a03000 	mov	r3, r0
  110b1c:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
      if (err != ERR_OK) {
  110b20:	e15b31d9 	ldrsb	r3, [fp, #-25]	; 0xffffffe7
  110b24:	e3530000 	cmp	r3, #0
  110b28:	0a00000f 	beq	110b6c <lwip_getaddrinfo+0x1a0>
        return EAI_FAIL;
  110b2c:	e3a030ca 	mov	r3, #202	; 0xca
  110b30:	ea000088 	b	110d58 <lwip_getaddrinfo+0x38c>
      }
    }
  } else {
    /* service location specified, use loopback address */
    if ((hints != NULL) && (hints->ai_flags & AI_PASSIVE)) {
  110b34:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110b38:	e3530000 	cmp	r3, #0
  110b3c:	0a000007 	beq	110b60 <lwip_getaddrinfo+0x194>
  110b40:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110b44:	e5933000 	ldr	r3, [r3]
  110b48:	e2033001 	and	r3, r3, #1
  110b4c:	e3530000 	cmp	r3, #0
  110b50:	0a000002 	beq	110b60 <lwip_getaddrinfo+0x194>
      ip_addr_set_any(ai_family == AF_INET6, &addr);
  110b54:	e3a03000 	mov	r3, #0
  110b58:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  110b5c:	ea000002 	b	110b6c <lwip_getaddrinfo+0x1a0>
    } else {
      ip_addr_set_loopback(ai_family == AF_INET6, &addr);
  110b60:	e3a0307f 	mov	r3, #127	; 0x7f
  110b64:	e3403100 	movt	r3, #256	; 0x100
  110b68:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
    }
  }

  total_size = sizeof(struct addrinfo) + sizeof(struct sockaddr_storage);
  110b6c:	e3a03030 	mov	r3, #48	; 0x30
  110b70:	e50b300c 	str	r3, [fp, #-12]
  if (nodename != NULL) {
  110b74:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  110b78:	e3530000 	cmp	r3, #0
  110b7c:	0a00001a 	beq	110bec <lwip_getaddrinfo+0x220>
    namelen = strlen(nodename);
  110b80:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  110b84:	eb00c2c5 	bl	1416a0 <strlen>
  110b88:	e50b0010 	str	r0, [fp, #-16]
    if (namelen > DNS_MAX_NAME_LENGTH) {
  110b8c:	e51b3010 	ldr	r3, [fp, #-16]
  110b90:	e3530c01 	cmp	r3, #256	; 0x100
  110b94:	9a000001 	bls	110ba0 <lwip_getaddrinfo+0x1d4>
      /* invalid name length */
      return EAI_FAIL;
  110b98:	e3a030ca 	mov	r3, #202	; 0xca
  110b9c:	ea00006d 	b	110d58 <lwip_getaddrinfo+0x38c>
    }
    LWIP_ASSERT("namelen is too long", total_size + namelen + 1 > total_size);
  110ba0:	e51b200c 	ldr	r2, [fp, #-12]
  110ba4:	e51b3010 	ldr	r3, [fp, #-16]
  110ba8:	e0823003 	add	r3, r2, r3
  110bac:	e2833001 	add	r3, r3, #1
  110bb0:	e51b200c 	ldr	r2, [fp, #-12]
  110bb4:	e1520003 	cmp	r2, r3
  110bb8:	3a000006 	bcc	110bd8 <lwip_getaddrinfo+0x20c>
  110bbc:	e3060ec0 	movw	r0, #28352	; 0x6ec0
  110bc0:	e3400014 	movt	r0, #20
  110bc4:	ebffc952 	bl	103114 <rt_kprintf>
  110bc8:	e3001166 	movw	r1, #358	; 0x166
  110bcc:	e3060ed4 	movw	r0, #28372	; 0x6ed4
  110bd0:	e3400014 	movt	r0, #20
  110bd4:	ebffe922 	bl	10b064 <sys_arch_assert>
    total_size += namelen + 1;
  110bd8:	e51b2010 	ldr	r2, [fp, #-16]
  110bdc:	e51b300c 	ldr	r3, [fp, #-12]
  110be0:	e0823003 	add	r3, r2, r3
  110be4:	e2833001 	add	r3, r3, #1
  110be8:	e50b300c 	str	r3, [fp, #-12]
  }
  /* If this fails, please report to lwip-devel! :-) */
  LWIP_ASSERT("total_size <= NETDB_ELEM_SIZE: please report this!",
  110bec:	e51b300c 	ldr	r3, [fp, #-12]
  110bf0:	e3002131 	movw	r2, #305	; 0x131
  110bf4:	e1530002 	cmp	r3, r2
  110bf8:	9a000006 	bls	110c18 <lwip_getaddrinfo+0x24c>
  110bfc:	e3060f00 	movw	r0, #28416	; 0x6f00
  110c00:	e3400014 	movt	r0, #20
  110c04:	ebffc942 	bl	103114 <rt_kprintf>
  110c08:	e300116b 	movw	r1, #363	; 0x16b
  110c0c:	e3060ed4 	movw	r0, #28372	; 0x6ed4
  110c10:	e3400014 	movt	r0, #20
  110c14:	ebffe912 	bl	10b064 <sys_arch_assert>
    total_size <= NETDB_ELEM_SIZE);
  ai = (struct addrinfo *)memp_malloc(MEMP_NETDB);
  110c18:	e3a02f5b 	mov	r2, #364	; 0x16c
  110c1c:	e3061ed4 	movw	r1, #28372	; 0x6ed4
  110c20:	e3401014 	movt	r1, #20
  110c24:	e3a0000e 	mov	r0, #14
  110c28:	eb0021a5 	bl	1192c4 <memp_malloc_fn>
  110c2c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  if (ai == NULL) {
  110c30:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  110c34:	e3530000 	cmp	r3, #0
  110c38:	1a000001 	bne	110c44 <lwip_getaddrinfo+0x278>
    return EAI_MEMORY;
  110c3c:	e3a030cb 	mov	r3, #203	; 0xcb
  110c40:	ea000044 	b	110d58 <lwip_getaddrinfo+0x38c>
  }
  memset(ai, 0, total_size);
  110c44:	e51b200c 	ldr	r2, [fp, #-12]
  110c48:	e3a01000 	mov	r1, #0
  110c4c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  110c50:	eb00c201 	bl	14145c <memset>
  /* cast through void* to get rid of alignment warnings */
  sa = (struct sockaddr_storage *)(void*)((u8_t*)ai + sizeof(struct addrinfo));
  110c54:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  110c58:	e2833020 	add	r3, r3, #32
  110c5c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    sa6->sin6_port = lwip_htons((u16_t)port_nr);
    ai->ai_family = AF_INET6;
#endif /* LWIP_IPV6 */
  } else {
#if LWIP_IPV4
    struct sockaddr_in *sa4 = (struct sockaddr_in*)sa;
  110c60:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  110c64:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    /* set up sockaddr */
    inet_addr_from_ip4addr(&sa4->sin_addr, ip_2_ip4(&addr));
  110c68:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  110c6c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  110c70:	e5832004 	str	r2, [r3, #4]
    sa4->sin_family = AF_INET;
  110c74:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  110c78:	e3a02002 	mov	r2, #2
  110c7c:	e5c32001 	strb	r2, [r3, #1]
    sa4->sin_len = sizeof(struct sockaddr_in);
  110c80:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  110c84:	e3a02010 	mov	r2, #16
  110c88:	e5c32000 	strb	r2, [r3]
    sa4->sin_port = lwip_htons((u16_t)port_nr);
  110c8c:	e51b3008 	ldr	r3, [fp, #-8]
  110c90:	e6ff3073 	uxth	r3, r3
  110c94:	e1a00003 	mov	r0, r3
  110c98:	eb0016c8 	bl	1167c0 <lwip_htons>
  110c9c:	e1a03000 	mov	r3, r0
  110ca0:	e1a02003 	mov	r2, r3
  110ca4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  110ca8:	e1c320b2 	strh	r2, [r3, #2]
    ai->ai_family = AF_INET;
  110cac:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  110cb0:	e3a02002 	mov	r2, #2
  110cb4:	e5832004 	str	r2, [r3, #4]
#endif /* LWIP_IPV4 */
  }

  /* set up addrinfo */
  if (hints != NULL) {
  110cb8:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110cbc:	e3530000 	cmp	r3, #0
  110cc0:	0a000007 	beq	110ce4 <lwip_getaddrinfo+0x318>
    /* copy socktype & protocol from hints if specified */
    ai->ai_socktype = hints->ai_socktype;
  110cc4:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110cc8:	e5932008 	ldr	r2, [r3, #8]
  110ccc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  110cd0:	e5832008 	str	r2, [r3, #8]
    ai->ai_protocol = hints->ai_protocol;
  110cd4:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110cd8:	e593200c 	ldr	r2, [r3, #12]
  110cdc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  110ce0:	e583200c 	str	r2, [r3, #12]
  }
  if (nodename != NULL) {
  110ce4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  110ce8:	e3530000 	cmp	r3, #0
  110cec:	0a00000f 	beq	110d30 <lwip_getaddrinfo+0x364>
    /* copy nodename to canonname if specified */
    ai->ai_canonname = ((char*)ai + sizeof(struct addrinfo) + sizeof(struct sockaddr_storage));
  110cf0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  110cf4:	e2832030 	add	r2, r3, #48	; 0x30
  110cf8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  110cfc:	e5832018 	str	r2, [r3, #24]
    MEMCPY(ai->ai_canonname, nodename, namelen);
  110d00:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  110d04:	e5933018 	ldr	r3, [r3, #24]
  110d08:	e51b2010 	ldr	r2, [fp, #-16]
  110d0c:	e51b1030 	ldr	r1, [fp, #-48]	; 0xffffffd0
  110d10:	e1a00003 	mov	r0, r3
  110d14:	eb00c098 	bl	140f7c <memcpy>
    ai->ai_canonname[namelen] = 0;
  110d18:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  110d1c:	e5932018 	ldr	r2, [r3, #24]
  110d20:	e51b3010 	ldr	r3, [fp, #-16]
  110d24:	e0823003 	add	r3, r2, r3
  110d28:	e3a02000 	mov	r2, #0
  110d2c:	e5c32000 	strb	r2, [r3]
  }
  ai->ai_addrlen = sizeof(struct sockaddr_storage);
  110d30:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  110d34:	e3a02010 	mov	r2, #16
  110d38:	e5832010 	str	r2, [r3, #16]
  ai->ai_addr = (struct sockaddr*)sa;
  110d3c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  110d40:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  110d44:	e5832014 	str	r2, [r3, #20]

  *res = ai;
  110d48:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  110d4c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  110d50:	e5832000 	str	r2, [r3]

  return 0;
  110d54:	e3a03000 	mov	r3, #0
}
  110d58:	e1a00003 	mov	r0, r3
  110d5c:	e24bd004 	sub	sp, fp, #4
  110d60:	e8bd8800 	pop	{fp, pc}

00110d64 <netifapi_do_netif_add>:
/**
 * Call netif_add() inside the tcpip_thread context.
 */
static err_t
netifapi_do_netif_add(struct tcpip_api_call_data *m)
{
  110d64:	e92d4810 	push	{r4, fp, lr}
  110d68:	e28db008 	add	fp, sp, #8
  110d6c:	e24dd024 	sub	sp, sp, #36	; 0x24
  110d70:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  /* cast through void* to silence alignment warnings. 
   * We know it works because the structs have been instantiated as struct netifapi_msg */
  struct netifapi_msg *msg = (struct netifapi_msg*)(void*)m;
  110d74:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  110d78:	e50b3010 	str	r3, [fp, #-16]
  if (!netif_add( msg->netif,
  110d7c:	e51b3010 	ldr	r3, [fp, #-16]
  110d80:	e5930004 	ldr	r0, [r3, #4]
  110d84:	e51b3010 	ldr	r3, [fp, #-16]
  110d88:	e593c008 	ldr	ip, [r3, #8]
  110d8c:	e51b3010 	ldr	r3, [fp, #-16]
  110d90:	e593e00c 	ldr	lr, [r3, #12]
  110d94:	e51b3010 	ldr	r3, [fp, #-16]
  110d98:	e5934010 	ldr	r4, [r3, #16]
  110d9c:	e51b3010 	ldr	r3, [fp, #-16]
  110da0:	e5933014 	ldr	r3, [r3, #20]
  110da4:	e51b2010 	ldr	r2, [fp, #-16]
  110da8:	e5922018 	ldr	r2, [r2, #24]
  110dac:	e51b1010 	ldr	r1, [fp, #-16]
  110db0:	e591101c 	ldr	r1, [r1, #28]
  110db4:	e58d1008 	str	r1, [sp, #8]
  110db8:	e58d2004 	str	r2, [sp, #4]
  110dbc:	e58d3000 	str	r3, [sp]
  110dc0:	e1a03004 	mov	r3, r4
  110dc4:	e1a0200e 	mov	r2, lr
  110dc8:	e1a0100c 	mov	r1, ip
  110dcc:	eb0021de 	bl	11954c <netif_add>
  110dd0:	e1a03000 	mov	r3, r0
  110dd4:	e3530000 	cmp	r3, #0
  110dd8:	1a000001 	bne	110de4 <netifapi_do_netif_add+0x80>
                  API_EXPR_REF(msg->msg.add.gw),
#endif /* LWIP_IPV4 */
                  msg->msg.add.state,
                  msg->msg.add.init,
                  msg->msg.add.input)) {
    return ERR_IF;
  110ddc:	e3e0300b 	mvn	r3, #11
  110de0:	ea000000 	b	110de8 <netifapi_do_netif_add+0x84>
  } else {
    return ERR_OK;
  110de4:	e3a03000 	mov	r3, #0
  }
}
  110de8:	e1a00003 	mov	r0, r3
  110dec:	e24bd008 	sub	sp, fp, #8
  110df0:	e8bd8810 	pop	{r4, fp, pc}

00110df4 <netifapi_do_netif_set_addr>:
/**
 * Call netif_set_addr() inside the tcpip_thread context.
 */
static err_t
netifapi_do_netif_set_addr(struct tcpip_api_call_data *m)
{
  110df4:	e92d4800 	push	{fp, lr}
  110df8:	e28db004 	add	fp, sp, #4
  110dfc:	e24dd010 	sub	sp, sp, #16
  110e00:	e50b0010 	str	r0, [fp, #-16]
  /* cast through void* to silence alignment warnings. 
   * We know it works because the structs have been instantiated as struct netifapi_msg */
  struct netifapi_msg *msg = (struct netifapi_msg*)(void*)m;
  110e04:	e51b3010 	ldr	r3, [fp, #-16]
  110e08:	e50b3008 	str	r3, [fp, #-8]

  netif_set_addr( msg->netif,
  110e0c:	e51b3008 	ldr	r3, [fp, #-8]
  110e10:	e5930004 	ldr	r0, [r3, #4]
  110e14:	e51b3008 	ldr	r3, [fp, #-8]
  110e18:	e5931008 	ldr	r1, [r3, #8]
  110e1c:	e51b3008 	ldr	r3, [fp, #-8]
  110e20:	e593200c 	ldr	r2, [r3, #12]
  110e24:	e51b3008 	ldr	r3, [fp, #-8]
  110e28:	e5933010 	ldr	r3, [r3, #16]
  110e2c:	eb00222c 	bl	1196e4 <netif_set_addr>
                  API_EXPR_REF(msg->msg.add.ipaddr),
                  API_EXPR_REF(msg->msg.add.netmask),
                  API_EXPR_REF(msg->msg.add.gw));
  return ERR_OK;
  110e30:	e3a03000 	mov	r3, #0
}
  110e34:	e1a00003 	mov	r0, r3
  110e38:	e24bd004 	sub	sp, fp, #4
  110e3c:	e8bd8800 	pop	{fp, pc}

00110e40 <netifapi_do_netif_common>:
 * Call the "errtfunc" (or the "voidfunc" if "errtfunc" is NULL) inside the
 * tcpip_thread context.
 */
static err_t
netifapi_do_netif_common(struct tcpip_api_call_data *m)
{
  110e40:	e92d4800 	push	{fp, lr}
  110e44:	e28db004 	add	fp, sp, #4
  110e48:	e24dd010 	sub	sp, sp, #16
  110e4c:	e50b0010 	str	r0, [fp, #-16]
  /* cast through void* to silence alignment warnings. 
   * We know it works because the structs have been instantiated as struct netifapi_msg */
  struct netifapi_msg *msg = (struct netifapi_msg*)(void*)m;
  110e50:	e51b3010 	ldr	r3, [fp, #-16]
  110e54:	e50b3008 	str	r3, [fp, #-8]

  if (msg->msg.common.errtfunc != NULL) {
  110e58:	e51b3008 	ldr	r3, [fp, #-8]
  110e5c:	e593300c 	ldr	r3, [r3, #12]
  110e60:	e3530000 	cmp	r3, #0
  110e64:	0a000007 	beq	110e88 <netifapi_do_netif_common+0x48>
    return msg->msg.common.errtfunc(msg->netif);
  110e68:	e51b3008 	ldr	r3, [fp, #-8]
  110e6c:	e593300c 	ldr	r3, [r3, #12]
  110e70:	e51b2008 	ldr	r2, [fp, #-8]
  110e74:	e5922004 	ldr	r2, [r2, #4]
  110e78:	e1a00002 	mov	r0, r2
  110e7c:	e12fff33 	blx	r3
  110e80:	e1a03000 	mov	r3, r0
  110e84:	ea000006 	b	110ea4 <netifapi_do_netif_common+0x64>
  } else {
    msg->msg.common.voidfunc(msg->netif);
  110e88:	e51b3008 	ldr	r3, [fp, #-8]
  110e8c:	e5933008 	ldr	r3, [r3, #8]
  110e90:	e51b2008 	ldr	r2, [fp, #-8]
  110e94:	e5922004 	ldr	r2, [r2, #4]
  110e98:	e1a00002 	mov	r0, r2
  110e9c:	e12fff33 	blx	r3
    return ERR_OK;
  110ea0:	e3a03000 	mov	r3, #0
  }
}
  110ea4:	e1a00003 	mov	r0, r3
  110ea8:	e24bd004 	sub	sp, fp, #4
  110eac:	e8bd8800 	pop	{fp, pc}

00110eb0 <netifapi_netif_add>:
netifapi_netif_add(struct netif *netif,
#if LWIP_IPV4
                   const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
                   void *state, netif_init_fn init, netif_input_fn input)
{
  110eb0:	e92d4800 	push	{fp, lr}
  110eb4:	e28db004 	add	fp, sp, #4
  110eb8:	e24dd038 	sub	sp, sp, #56	; 0x38
  110ebc:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  110ec0:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
  110ec4:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
  110ec8:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  err_t err;
  NETIFAPI_VAR_DECLARE(msg);
  NETIFAPI_VAR_ALLOC(msg);

#if LWIP_IPV4
  if (ipaddr == NULL) {
  110ecc:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  110ed0:	e3530000 	cmp	r3, #0
  110ed4:	1a000002 	bne	110ee4 <netifapi_netif_add+0x34>
    ipaddr = IP4_ADDR_ANY4;
  110ed8:	e3093adc 	movw	r3, #39644	; 0x9adc
  110edc:	e3403014 	movt	r3, #20
  110ee0:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
  }
  if (netmask == NULL) {
  110ee4:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110ee8:	e3530000 	cmp	r3, #0
  110eec:	1a000002 	bne	110efc <netifapi_netif_add+0x4c>
    netmask = IP4_ADDR_ANY4;
  110ef0:	e3093adc 	movw	r3, #39644	; 0x9adc
  110ef4:	e3403014 	movt	r3, #20
  110ef8:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
  }
  if (gw == NULL) {
  110efc:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  110f00:	e3530000 	cmp	r3, #0
  110f04:	1a000002 	bne	110f14 <netifapi_netif_add+0x64>
    gw = IP4_ADDR_ANY4;
  110f08:	e3093adc 	movw	r3, #39644	; 0x9adc
  110f0c:	e3403014 	movt	r3, #20
  110f10:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  }
#endif /* LWIP_IPV4 */

  NETIFAPI_VAR_REF(msg).netif = netif;
  110f14:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  110f18:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
#if LWIP_IPV4
  NETIFAPI_VAR_REF(msg).msg.add.ipaddr  = NETIFAPI_VAR_REF(ipaddr);
  110f1c:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  110f20:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  NETIFAPI_VAR_REF(msg).msg.add.netmask = NETIFAPI_VAR_REF(netmask);
  110f24:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110f28:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  NETIFAPI_VAR_REF(msg).msg.add.gw      = NETIFAPI_VAR_REF(gw);
  110f2c:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  110f30:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
#endif /* LWIP_IPV4 */
  NETIFAPI_VAR_REF(msg).msg.add.state   = state;
  110f34:	e59b3004 	ldr	r3, [fp, #4]
  110f38:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  NETIFAPI_VAR_REF(msg).msg.add.init    = init;
  110f3c:	e59b3008 	ldr	r3, [fp, #8]
  110f40:	e50b3010 	str	r3, [fp, #-16]
  NETIFAPI_VAR_REF(msg).msg.add.input   = input;
  110f44:	e59b300c 	ldr	r3, [fp, #12]
  110f48:	e50b300c 	str	r3, [fp, #-12]
  err = tcpip_api_call(netifapi_do_netif_add, &API_VAR_REF(msg).call);
  110f4c:	e24b3028 	sub	r3, fp, #40	; 0x28
  110f50:	e1a01003 	mov	r1, r3
  110f54:	e3000d64 	movw	r0, #3428	; 0xd64
  110f58:	e3400011 	movt	r0, #17
  110f5c:	eb001569 	bl	116508 <tcpip_api_call>
  110f60:	e1a03000 	mov	r3, r0
  110f64:	e54b3005 	strb	r3, [fp, #-5]
  NETIFAPI_VAR_FREE(msg);
  return err;
  110f68:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  110f6c:	e1a00003 	mov	r0, r3
  110f70:	e24bd004 	sub	sp, fp, #4
  110f74:	e8bd8800 	pop	{fp, pc}

00110f78 <netifapi_netif_set_addr>:
err_t
netifapi_netif_set_addr(struct netif *netif,
                        const ip4_addr_t *ipaddr,
                        const ip4_addr_t *netmask,
                        const ip4_addr_t *gw)
{
  110f78:	e92d4800 	push	{fp, lr}
  110f7c:	e28db004 	add	fp, sp, #4
  110f80:	e24dd038 	sub	sp, sp, #56	; 0x38
  110f84:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  110f88:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
  110f8c:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
  110f90:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  err_t err;
  NETIFAPI_VAR_DECLARE(msg);
  NETIFAPI_VAR_ALLOC(msg);

  if (ipaddr == NULL) {
  110f94:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  110f98:	e3530000 	cmp	r3, #0
  110f9c:	1a000002 	bne	110fac <netifapi_netif_set_addr+0x34>
    ipaddr = IP4_ADDR_ANY4;
  110fa0:	e3093adc 	movw	r3, #39644	; 0x9adc
  110fa4:	e3403014 	movt	r3, #20
  110fa8:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
  }
  if (netmask == NULL) {
  110fac:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110fb0:	e3530000 	cmp	r3, #0
  110fb4:	1a000002 	bne	110fc4 <netifapi_netif_set_addr+0x4c>
    netmask = IP4_ADDR_ANY4;
  110fb8:	e3093adc 	movw	r3, #39644	; 0x9adc
  110fbc:	e3403014 	movt	r3, #20
  110fc0:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
  }
  if (gw == NULL) {
  110fc4:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  110fc8:	e3530000 	cmp	r3, #0
  110fcc:	1a000002 	bne	110fdc <netifapi_netif_set_addr+0x64>
    gw = IP4_ADDR_ANY4;
  110fd0:	e3093adc 	movw	r3, #39644	; 0x9adc
  110fd4:	e3403014 	movt	r3, #20
  110fd8:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  }

  NETIFAPI_VAR_REF(msg).netif = netif;
  110fdc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  110fe0:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  NETIFAPI_VAR_REF(msg).msg.add.ipaddr  = NETIFAPI_VAR_REF(ipaddr);
  110fe4:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  110fe8:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  NETIFAPI_VAR_REF(msg).msg.add.netmask = NETIFAPI_VAR_REF(netmask);
  110fec:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  110ff0:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  NETIFAPI_VAR_REF(msg).msg.add.gw      = NETIFAPI_VAR_REF(gw);
  110ff4:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  110ff8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  err = tcpip_api_call(netifapi_do_netif_set_addr, &API_VAR_REF(msg).call);
  110ffc:	e24b3028 	sub	r3, fp, #40	; 0x28
  111000:	e1a01003 	mov	r1, r3
  111004:	e3000df4 	movw	r0, #3572	; 0xdf4
  111008:	e3400011 	movt	r0, #17
  11100c:	eb00153d 	bl	116508 <tcpip_api_call>
  111010:	e1a03000 	mov	r3, r0
  111014:	e54b3005 	strb	r3, [fp, #-5]
  NETIFAPI_VAR_FREE(msg);
  return err;
  111018:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  11101c:	e1a00003 	mov	r0, r3
  111020:	e24bd004 	sub	sp, fp, #4
  111024:	e8bd8800 	pop	{fp, pc}

00111028 <netifapi_netif_common>:
 * @note use only for functions where there is only "netif" parameter.
 */
err_t
netifapi_netif_common(struct netif *netif, netifapi_void_fn voidfunc,
                       netifapi_errt_fn errtfunc)
{
  111028:	e92d4800 	push	{fp, lr}
  11102c:	e28db004 	add	fp, sp, #4
  111030:	e24dd038 	sub	sp, sp, #56	; 0x38
  111034:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  111038:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
  11103c:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
  err_t err;
  NETIFAPI_VAR_DECLARE(msg);
  NETIFAPI_VAR_ALLOC(msg);

  NETIFAPI_VAR_REF(msg).netif = netif;
  111040:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  111044:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  NETIFAPI_VAR_REF(msg).msg.common.voidfunc = voidfunc;
  111048:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  11104c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  NETIFAPI_VAR_REF(msg).msg.common.errtfunc = errtfunc;
  111050:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  111054:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  err = tcpip_api_call(netifapi_do_netif_common, &API_VAR_REF(msg).call);
  111058:	e24b3028 	sub	r3, fp, #40	; 0x28
  11105c:	e1a01003 	mov	r1, r3
  111060:	e3000e40 	movw	r0, #3648	; 0xe40
  111064:	e3400011 	movt	r0, #17
  111068:	eb001526 	bl	116508 <tcpip_api_call>
  11106c:	e1a03000 	mov	r3, r0
  111070:	e54b3005 	strb	r3, [fp, #-5]
  NETIFAPI_VAR_FREE(msg);
  return err;
  111074:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  111078:	e1a00003 	mov	r0, r3
  11107c:	e24bd004 	sub	sp, fp, #4
  111080:	e8bd8800 	pop	{fp, pc}

00111084 <access_is_blocking>:
static u8_t lwip_getsockopt_impl(int s, int level, int optname, void *optval, socklen_t *optlen);
static u8_t lwip_setsockopt_impl(int s, int level, int optname, const void *optval, socklen_t optlen);

/* *RT-Thread* */
int access_is_blocking(u32_t flags, struct lwip_sock *sock)
{
  111084:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  111088:	e28db000 	add	fp, sp, #0
  11108c:	e24dd00c 	sub	sp, sp, #12
  111090:	e50b0008 	str	r0, [fp, #-8]
  111094:	e50b100c 	str	r1, [fp, #-12]
  return !((flags & MSG_DONTWAIT) || netconn_is_nonblocking(sock->conn));
  111098:	e51b3008 	ldr	r3, [fp, #-8]
  11109c:	e2033008 	and	r3, r3, #8
  1110a0:	e3530000 	cmp	r3, #0
  1110a4:	1a000007 	bne	1110c8 <access_is_blocking+0x44>
  1110a8:	e51b300c 	ldr	r3, [fp, #-12]
  1110ac:	e5933000 	ldr	r3, [r3]
  1110b0:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  1110b4:	e2033002 	and	r3, r3, #2
  1110b8:	e3530000 	cmp	r3, #0
  1110bc:	1a000001 	bne	1110c8 <access_is_blocking+0x44>
  1110c0:	e3a03001 	mov	r3, #1
  1110c4:	ea000000 	b	1110cc <access_is_blocking+0x48>
  1110c8:	e3a03000 	mov	r3, #0
}
  1110cc:	e1a00003 	mov	r0, r3
  1110d0:	e28bd000 	add	sp, fp, #0
  1110d4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1110d8:	e12fff1e 	bx	lr

001110dc <lwip_socket_thread_init>:
#endif /* LWIP_IPV4 && LWIP_IPV6 */

/** LWIP_NETCONN_SEM_PER_THREAD==1: initialize thread-local semaphore */
void
lwip_socket_thread_init(void)
{
  1110dc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1110e0:	e28db000 	add	fp, sp, #0
   netconn_thread_init();
}
  1110e4:	e320f000 	nop	{0}
  1110e8:	e28bd000 	add	sp, fp, #0
  1110ec:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1110f0:	e12fff1e 	bx	lr

001110f4 <lwip_socket_thread_cleanup>:

/** LWIP_NETCONN_SEM_PER_THREAD==1: destroy thread-local semaphore */
void
lwip_socket_thread_cleanup(void)
{
  1110f4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1110f8:	e28db000 	add	fp, sp, #0
   netconn_thread_cleanup();
}
  1110fc:	e320f000 	nop	{0}
  111100:	e28bd000 	add	sp, fp, #0
  111104:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  111108:	e12fff1e 	bx	lr

0011110c <get_socket>:
 * @param s externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
struct lwip_sock *
get_socket(int s)
{
  11110c:	e92d4800 	push	{fp, lr}
  111110:	e28db004 	add	fp, sp, #4
  111114:	e24dd010 	sub	sp, sp, #16
  111118:	e50b0010 	str	r0, [fp, #-16]
  struct lwip_sock *sock;

  s -= LWIP_SOCKET_OFFSET;

  if ((s < 0) || (s >= NUM_SOCKETS)) {
  11111c:	e51b3010 	ldr	r3, [fp, #-16]
  111120:	e3530000 	cmp	r3, #0
  111124:	ba000002 	blt	111134 <get_socket+0x28>
  111128:	e51b3010 	ldr	r3, [fp, #-16]
  11112c:	e3530007 	cmp	r3, #7
  111130:	da000005 	ble	11114c <get_socket+0x40>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", s + LWIP_SOCKET_OFFSET));
    set_errno(EBADF);
  111134:	eb009fe1 	bl	1390c0 <__errno_location>
  111138:	e1a02000 	mov	r2, r0
  11113c:	e3a03009 	mov	r3, #9
  111140:	e5823000 	str	r3, [r2]
    return NULL;
  111144:	e3a03000 	mov	r3, #0
  111148:	ea000011 	b	111194 <get_socket+0x88>
  }

  sock = &sockets[s];
  11114c:	e51b3010 	ldr	r3, [fp, #-16]
  111150:	e3a02014 	mov	r2, #20
  111154:	e0020392 	mul	r2, r2, r3
  111158:	e30e3b80 	movw	r3, #60288	; 0xeb80
  11115c:	e3403014 	movt	r3, #20
  111160:	e0823003 	add	r3, r2, r3
  111164:	e50b3008 	str	r3, [fp, #-8]

  if (!sock->conn) {
  111168:	e51b3008 	ldr	r3, [fp, #-8]
  11116c:	e5933000 	ldr	r3, [r3]
  111170:	e3530000 	cmp	r3, #0
  111174:	1a000005 	bne	111190 <get_socket+0x84>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): not active\n", s + LWIP_SOCKET_OFFSET));
    set_errno(EBADF);
  111178:	eb009fd0 	bl	1390c0 <__errno_location>
  11117c:	e1a02000 	mov	r2, r0
  111180:	e3a03009 	mov	r3, #9
  111184:	e5823000 	str	r3, [r2]
    return NULL;
  111188:	e3a03000 	mov	r3, #0
  11118c:	ea000000 	b	111194 <get_socket+0x88>
  }

  return sock;
  111190:	e51b3008 	ldr	r3, [fp, #-8]
}
  111194:	e1a00003 	mov	r0, r3
  111198:	e24bd004 	sub	sp, fp, #4
  11119c:	e8bd8800 	pop	{fp, pc}

001111a0 <tryget_socket>:
 * @param s externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int s)
{
  1111a0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1111a4:	e28db000 	add	fp, sp, #0
  1111a8:	e24dd00c 	sub	sp, sp, #12
  1111ac:	e50b0008 	str	r0, [fp, #-8]
  s -= LWIP_SOCKET_OFFSET;
  if ((s < 0) || (s >= NUM_SOCKETS)) {
  1111b0:	e51b3008 	ldr	r3, [fp, #-8]
  1111b4:	e3530000 	cmp	r3, #0
  1111b8:	ba000002 	blt	1111c8 <tryget_socket+0x28>
  1111bc:	e51b3008 	ldr	r3, [fp, #-8]
  1111c0:	e3530007 	cmp	r3, #7
  1111c4:	da000001 	ble	1111d0 <tryget_socket+0x30>
    return NULL;
  1111c8:	e3a03000 	mov	r3, #0
  1111cc:	ea000010 	b	111214 <tryget_socket+0x74>
  }
  if (!sockets[s].conn) {
  1111d0:	e30e3b80 	movw	r3, #60288	; 0xeb80
  1111d4:	e3403014 	movt	r3, #20
  1111d8:	e51b2008 	ldr	r2, [fp, #-8]
  1111dc:	e3a01014 	mov	r1, #20
  1111e0:	e0020291 	mul	r2, r1, r2
  1111e4:	e0833002 	add	r3, r3, r2
  1111e8:	e5933000 	ldr	r3, [r3]
  1111ec:	e3530000 	cmp	r3, #0
  1111f0:	1a000001 	bne	1111fc <tryget_socket+0x5c>
    return NULL;
  1111f4:	e3a03000 	mov	r3, #0
  1111f8:	ea000005 	b	111214 <tryget_socket+0x74>
  }
  return &sockets[s];
  1111fc:	e51b3008 	ldr	r3, [fp, #-8]
  111200:	e3a02014 	mov	r2, #20
  111204:	e0020392 	mul	r2, r2, r3
  111208:	e30e3b80 	movw	r3, #60288	; 0xeb80
  11120c:	e3403014 	movt	r3, #20
  111210:	e0823003 	add	r3, r2, r3
}
  111214:	e1a00003 	mov	r0, r3
  111218:	e28bd000 	add	sp, fp, #0
  11121c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  111220:	e12fff1e 	bx	lr

00111224 <lwip_tryget_socket>:
 * @param s externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
struct lwip_sock *
lwip_tryget_socket(int s)
{
  111224:	e92d4800 	push	{fp, lr}
  111228:	e28db004 	add	fp, sp, #4
  11122c:	e24dd008 	sub	sp, sp, #8
  111230:	e50b0008 	str	r0, [fp, #-8]
	return tryget_socket(s);
  111234:	e51b0008 	ldr	r0, [fp, #-8]
  111238:	ebffffd8 	bl	1111a0 <tryget_socket>
  11123c:	e1a03000 	mov	r3, r0
}
  111240:	e1a00003 	mov	r0, r3
  111244:	e24bd004 	sub	sp, fp, #4
  111248:	e8bd8800 	pop	{fp, pc}

0011124c <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
  11124c:	e92d4800 	push	{fp, lr}
  111250:	e28db004 	add	fp, sp, #4
  111254:	e24dd010 	sub	sp, sp, #16
  111258:	e50b0010 	str	r0, [fp, #-16]
  11125c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  int i;
  SYS_ARCH_DECL_PROTECT(lev);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
  111260:	e3a03000 	mov	r3, #0
  111264:	e50b3008 	str	r3, [fp, #-8]
  111268:	ea000063 	b	1113fc <alloc_socket+0x1b0>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
  11126c:	ebffc3f2 	bl	10223c <rt_enter_critical>
    if (!sockets[i].conn && (sockets[i].select_waiting == 0)) {
  111270:	e30e3b80 	movw	r3, #60288	; 0xeb80
  111274:	e3403014 	movt	r3, #20
  111278:	e51b2008 	ldr	r2, [fp, #-8]
  11127c:	e3a01014 	mov	r1, #20
  111280:	e0020291 	mul	r2, r1, r2
  111284:	e0833002 	add	r3, r3, r2
  111288:	e5933000 	ldr	r3, [r3]
  11128c:	e3530000 	cmp	r3, #0
  111290:	1a000055 	bne	1113ec <alloc_socket+0x1a0>
  111294:	e30e3b80 	movw	r3, #60288	; 0xeb80
  111298:	e3403014 	movt	r3, #20
  11129c:	e51b2008 	ldr	r2, [fp, #-8]
  1112a0:	e3a01014 	mov	r1, #20
  1112a4:	e0020291 	mul	r2, r1, r2
  1112a8:	e0833002 	add	r3, r3, r2
  1112ac:	e2833011 	add	r3, r3, #17
  1112b0:	e5d33000 	ldrb	r3, [r3]
  1112b4:	e3530000 	cmp	r3, #0
  1112b8:	1a00004b 	bne	1113ec <alloc_socket+0x1a0>
      sockets[i].conn       = newconn;
  1112bc:	e30e3b80 	movw	r3, #60288	; 0xeb80
  1112c0:	e3403014 	movt	r3, #20
  1112c4:	e51b2008 	ldr	r2, [fp, #-8]
  1112c8:	e3a01014 	mov	r1, #20
  1112cc:	e0020291 	mul	r2, r1, r2
  1112d0:	e0833002 	add	r3, r3, r2
  1112d4:	e51b2010 	ldr	r2, [fp, #-16]
  1112d8:	e5832000 	str	r2, [r3]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
  1112dc:	ebffc3dc 	bl	102254 <rt_exit_critical>
      sockets[i].lastdata   = NULL;
  1112e0:	e30e3b80 	movw	r3, #60288	; 0xeb80
  1112e4:	e3403014 	movt	r3, #20
  1112e8:	e51b2008 	ldr	r2, [fp, #-8]
  1112ec:	e3a01014 	mov	r1, #20
  1112f0:	e0020291 	mul	r2, r1, r2
  1112f4:	e0833002 	add	r3, r3, r2
  1112f8:	e2833004 	add	r3, r3, #4
  1112fc:	e3a02000 	mov	r2, #0
  111300:	e5832000 	str	r2, [r3]
      sockets[i].lastoffset = 0;
  111304:	e30e3b80 	movw	r3, #60288	; 0xeb80
  111308:	e3403014 	movt	r3, #20
  11130c:	e51b2008 	ldr	r2, [fp, #-8]
  111310:	e3a01014 	mov	r1, #20
  111314:	e0020291 	mul	r2, r1, r2
  111318:	e0833002 	add	r3, r3, r2
  11131c:	e2833008 	add	r3, r3, #8
  111320:	e3a02000 	mov	r2, #0
  111324:	e1c320b0 	strh	r2, [r3]
      sockets[i].rcvevent   = 0;
  111328:	e30e3b80 	movw	r3, #60288	; 0xeb80
  11132c:	e3403014 	movt	r3, #20
  111330:	e51b2008 	ldr	r2, [fp, #-8]
  111334:	e3a01014 	mov	r1, #20
  111338:	e0020291 	mul	r2, r1, r2
  11133c:	e0833002 	add	r3, r3, r2
  111340:	e283300a 	add	r3, r3, #10
  111344:	e3a02000 	mov	r2, #0
  111348:	e1c320b0 	strh	r2, [r3]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
  11134c:	e51b3010 	ldr	r3, [fp, #-16]
  111350:	e5933000 	ldr	r3, [r3]
  111354:	e20330f0 	and	r3, r3, #240	; 0xf0
  111358:	e3530010 	cmp	r3, #16
  11135c:	1a000002 	bne	11136c <alloc_socket+0x120>
  111360:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  111364:	e3530000 	cmp	r3, #0
  111368:	0a000001 	beq	111374 <alloc_socket+0x128>
  11136c:	e3a03001 	mov	r3, #1
  111370:	ea000000 	b	111378 <alloc_socket+0x12c>
  111374:	e3a03000 	mov	r3, #0
  111378:	e6ff2073 	uxth	r2, r3
  11137c:	e30e3b80 	movw	r3, #60288	; 0xeb80
  111380:	e3403014 	movt	r3, #20
  111384:	e51b1008 	ldr	r1, [fp, #-8]
  111388:	e3a00014 	mov	r0, #20
  11138c:	e0010190 	mul	r1, r0, r1
  111390:	e0833001 	add	r3, r3, r1
  111394:	e283300c 	add	r3, r3, #12
  111398:	e1c320b0 	strh	r2, [r3]
      sockets[i].errevent   = 0;
  11139c:	e30e3b80 	movw	r3, #60288	; 0xeb80
  1113a0:	e3403014 	movt	r3, #20
  1113a4:	e51b2008 	ldr	r2, [fp, #-8]
  1113a8:	e3a01014 	mov	r1, #20
  1113ac:	e0020291 	mul	r2, r1, r2
  1113b0:	e0833002 	add	r3, r3, r2
  1113b4:	e283300e 	add	r3, r3, #14
  1113b8:	e3a02000 	mov	r2, #0
  1113bc:	e1c320b0 	strh	r2, [r3]
      sockets[i].err        = 0;
  1113c0:	e30e3b80 	movw	r3, #60288	; 0xeb80
  1113c4:	e3403014 	movt	r3, #20
  1113c8:	e51b2008 	ldr	r2, [fp, #-8]
  1113cc:	e3a01014 	mov	r1, #20
  1113d0:	e0020291 	mul	r2, r1, r2
  1113d4:	e0833002 	add	r3, r3, r2
  1113d8:	e2833010 	add	r3, r3, #16
  1113dc:	e3a02000 	mov	r2, #0
  1113e0:	e5c32000 	strb	r2, [r3]
      return i + LWIP_SOCKET_OFFSET;
  1113e4:	e51b3008 	ldr	r3, [fp, #-8]
  1113e8:	ea000007 	b	11140c <alloc_socket+0x1c0>
    }
    SYS_ARCH_UNPROTECT(lev);
  1113ec:	ebffc398 	bl	102254 <rt_exit_critical>
  for (i = 0; i < NUM_SOCKETS; ++i) {
  1113f0:	e51b3008 	ldr	r3, [fp, #-8]
  1113f4:	e2833001 	add	r3, r3, #1
  1113f8:	e50b3008 	str	r3, [fp, #-8]
  1113fc:	e51b3008 	ldr	r3, [fp, #-8]
  111400:	e3530007 	cmp	r3, #7
  111404:	daffff98 	ble	11126c <alloc_socket+0x20>
  }
  return -1;
  111408:	e3e03000 	mvn	r3, #0
}
  11140c:	e1a00003 	mov	r0, r3
  111410:	e24bd004 	sub	sp, fp, #4
  111414:	e8bd8800 	pop	{fp, pc}

00111418 <free_socket>:
 * @param sock the socket to free
 * @param is_tcp != 0 for TCP sockets, used to free lastdata
 */
static void
free_socket(struct lwip_sock *sock, int is_tcp)
{
  111418:	e92d4800 	push	{fp, lr}
  11141c:	e28db004 	add	fp, sp, #4
  111420:	e24dd010 	sub	sp, sp, #16
  111424:	e50b0010 	str	r0, [fp, #-16]
  111428:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  void *lastdata;

  lastdata         = sock->lastdata;
  11142c:	e51b3010 	ldr	r3, [fp, #-16]
  111430:	e5933004 	ldr	r3, [r3, #4]
  111434:	e50b3008 	str	r3, [fp, #-8]
  sock->lastdata   = NULL;
  111438:	e51b3010 	ldr	r3, [fp, #-16]
  11143c:	e3a02000 	mov	r2, #0
  111440:	e5832004 	str	r2, [r3, #4]
  sock->lastoffset = 0;
  111444:	e51b3010 	ldr	r3, [fp, #-16]
  111448:	e3a02000 	mov	r2, #0
  11144c:	e1c320b8 	strh	r2, [r3, #8]
  sock->err        = 0;
  111450:	e51b3010 	ldr	r3, [fp, #-16]
  111454:	e3a02000 	mov	r2, #0
  111458:	e5c32010 	strb	r2, [r3, #16]

  /* Protect socket array */
  SYS_ARCH_SET(sock->conn, NULL);
  11145c:	ebffc376 	bl	10223c <rt_enter_critical>
  111460:	e51b3010 	ldr	r3, [fp, #-16]
  111464:	e3a02000 	mov	r2, #0
  111468:	e5832000 	str	r2, [r3]
  11146c:	ebffc378 	bl	102254 <rt_exit_critical>
  /* don't use 'sock' after this line, as another task might have allocated it */

  if (lastdata != NULL) {
  111470:	e51b3008 	ldr	r3, [fp, #-8]
  111474:	e3530000 	cmp	r3, #0
  111478:	0a000007 	beq	11149c <free_socket+0x84>
    if (is_tcp) {
  11147c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  111480:	e3530000 	cmp	r3, #0
  111484:	0a000002 	beq	111494 <free_socket+0x7c>
      pbuf_free((struct pbuf *)lastdata);
  111488:	e51b0008 	ldr	r0, [fp, #-8]
  11148c:	eb002702 	bl	11b09c <pbuf_free>
    } else {
      netbuf_delete((struct netbuf *)lastdata);
    }
  }
}
  111490:	ea000001 	b	11149c <free_socket+0x84>
      netbuf_delete((struct netbuf *)lastdata);
  111494:	e51b0008 	ldr	r0, [fp, #-8]
  111498:	ebfffb1e 	bl	110118 <netbuf_delete>
}
  11149c:	e320f000 	nop	{0}
  1114a0:	e24bd004 	sub	sp, fp, #4
  1114a4:	e8bd8800 	pop	{fp, pc}

001114a8 <lwip_accept>:
 * Exceptions are documented!
 */

int
lwip_accept(int s, struct sockaddr *addr, socklen_t *addrlen)
{
  1114a8:	e92d4810 	push	{r4, fp, lr}
  1114ac:	e28db008 	add	fp, sp, #8
  1114b0:	e24dd05c 	sub	sp, sp, #92	; 0x5c
  1114b4:	e50b0058 	str	r0, [fp, #-88]	; 0xffffffa8
  1114b8:	e50b105c 	str	r1, [fp, #-92]	; 0xffffffa4
  1114bc:	e50b2060 	str	r2, [fp, #-96]	; 0xffffffa0
  struct lwip_sock *sock, *nsock;
  struct netconn *newconn;
  ip_addr_t naddr;
  u16_t port = 0;
  1114c0:	e3a03000 	mov	r3, #0
  1114c4:	e14b33be 	strh	r3, [fp, #-62]	; 0xffffffc2
  int newsock;
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d)...\n", s));
  sock = get_socket(s);
  1114c8:	e51b0058 	ldr	r0, [fp, #-88]	; 0xffffffa8
  1114cc:	ebffff0e 	bl	11110c <get_socket>
  1114d0:	e50b0010 	str	r0, [fp, #-16]
  if (!sock) {
  1114d4:	e51b3010 	ldr	r3, [fp, #-16]
  1114d8:	e3530000 	cmp	r3, #0
  1114dc:	1a000001 	bne	1114e8 <lwip_accept+0x40>
    return -1;
  1114e0:	e3e03000 	mvn	r3, #0
  1114e4:	ea0000fa 	b	1118d4 <lwip_accept+0x42c>
  }

  if (netconn_is_nonblocking(sock->conn) && (sock->rcvevent <= 0)) {
  1114e8:	e51b3010 	ldr	r3, [fp, #-16]
  1114ec:	e5933000 	ldr	r3, [r3]
  1114f0:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  1114f4:	e2033002 	and	r3, r3, #2
  1114f8:	e3530000 	cmp	r3, #0
  1114fc:	0a000009 	beq	111528 <lwip_accept+0x80>
  111500:	e51b3010 	ldr	r3, [fp, #-16]
  111504:	e1d330fa 	ldrsh	r3, [r3, #10]
  111508:	e3530000 	cmp	r3, #0
  11150c:	ca000005 	bgt	111528 <lwip_accept+0x80>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): returning EWOULDBLOCK\n", s));
    set_errno(EWOULDBLOCK);
  111510:	eb009eea 	bl	1390c0 <__errno_location>
  111514:	e1a02000 	mov	r2, r0
  111518:	e3a0300b 	mov	r3, #11
  11151c:	e5823000 	str	r3, [r2]
    return -1;
  111520:	e3e03000 	mvn	r3, #0
  111524:	ea0000ea 	b	1118d4 <lwip_accept+0x42c>
  }

  /* wait for a new connection */
  err = netconn_accept(sock->conn, &newconn);
  111528:	e51b3010 	ldr	r3, [fp, #-16]
  11152c:	e5933000 	ldr	r3, [r3]
  111530:	e24b2038 	sub	r2, fp, #56	; 0x38
  111534:	e1a01002 	mov	r1, r2
  111538:	e1a00003 	mov	r0, r3
  11153c:	ebffe924 	bl	10b9d4 <netconn_accept>
  111540:	e1a03000 	mov	r3, r0
  111544:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  if (err != ERR_OK) {
  111548:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  11154c:	e3530000 	cmp	r3, #0
  111550:	0a000035 	beq	11162c <lwip_accept+0x184>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_acept failed, err=%d\n", s, err));
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
  111554:	e51b3010 	ldr	r3, [fp, #-16]
  111558:	e5933000 	ldr	r3, [r3]
  11155c:	e5933000 	ldr	r3, [r3]
  111560:	e20330f0 	and	r3, r3, #240	; 0xf0
  111564:	e3530010 	cmp	r3, #16
  111568:	0a00000d 	beq	1115a4 <lwip_accept+0xfc>
      sock_set_errno(sock, EOPNOTSUPP);
  11156c:	e3a0305f 	mov	r3, #95	; 0x5f
  111570:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
  111574:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  111578:	e6ef2073 	uxtb	r2, r3
  11157c:	e51b3010 	ldr	r3, [fp, #-16]
  111580:	e5c32010 	strb	r2, [r3, #16]
  111584:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  111588:	e3530000 	cmp	r3, #0
  11158c:	0a000024 	beq	111624 <lwip_accept+0x17c>
  111590:	eb009eca 	bl	1390c0 <__errno_location>
  111594:	e1a02000 	mov	r2, r0
  111598:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  11159c:	e5823000 	str	r3, [r2]
  1115a0:	ea00001f 	b	111624 <lwip_accept+0x17c>
    } else if (err == ERR_CLSD) {
  1115a4:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  1115a8:	e373000f 	cmn	r3, #15
  1115ac:	1a00000d 	bne	1115e8 <lwip_accept+0x140>
      sock_set_errno(sock, EINVAL);
  1115b0:	e3a03016 	mov	r3, #22
  1115b4:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
  1115b8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1115bc:	e6ef2073 	uxtb	r2, r3
  1115c0:	e51b3010 	ldr	r3, [fp, #-16]
  1115c4:	e5c32010 	strb	r2, [r3, #16]
  1115c8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1115cc:	e3530000 	cmp	r3, #0
  1115d0:	0a000013 	beq	111624 <lwip_accept+0x17c>
  1115d4:	eb009eb9 	bl	1390c0 <__errno_location>
  1115d8:	e1a02000 	mov	r2, r0
  1115dc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1115e0:	e5823000 	str	r3, [r2]
  1115e4:	ea00000e 	b	111624 <lwip_accept+0x17c>
    } else {
      sock_set_errno(sock, err_to_errno(err));
  1115e8:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  1115ec:	e1a00003 	mov	r0, r3
  1115f0:	ebfffa9d 	bl	11006c <err_to_errno>
  1115f4:	e50b002c 	str	r0, [fp, #-44]	; 0xffffffd4
  1115f8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1115fc:	e6ef2073 	uxtb	r2, r3
  111600:	e51b3010 	ldr	r3, [fp, #-16]
  111604:	e5c32010 	strb	r2, [r3, #16]
  111608:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11160c:	e3530000 	cmp	r3, #0
  111610:	0a000003 	beq	111624 <lwip_accept+0x17c>
  111614:	eb009ea9 	bl	1390c0 <__errno_location>
  111618:	e1a02000 	mov	r2, r0
  11161c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  111620:	e5823000 	str	r3, [r2]
    }
    return -1;
  111624:	e3e03000 	mvn	r3, #0
  111628:	ea0000a9 	b	1118d4 <lwip_accept+0x42c>
  }
  LWIP_ASSERT("newconn != NULL", newconn != NULL);
  11162c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  111630:	e3530000 	cmp	r3, #0
  111634:	1a000006 	bne	111654 <lwip_accept+0x1ac>
  111638:	e3060f34 	movw	r0, #28468	; 0x6f34
  11163c:	e3400014 	movt	r0, #20
  111640:	ebffc6b3 	bl	103114 <rt_kprintf>
  111644:	e300120a 	movw	r1, #522	; 0x20a
  111648:	e3060f44 	movw	r0, #28484	; 0x6f44
  11164c:	e3400014 	movt	r0, #20
  111650:	ebffe683 	bl	10b064 <sys_arch_assert>

  newsock = alloc_socket(newconn, 1);
  111654:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  111658:	e3a01001 	mov	r1, #1
  11165c:	e1a00003 	mov	r0, r3
  111660:	ebfffef9 	bl	11124c <alloc_socket>
  111664:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  if (newsock == -1) {
  111668:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11166c:	e3730001 	cmn	r3, #1
  111670:	1a000011 	bne	1116bc <lwip_accept+0x214>
    netconn_delete(newconn);
  111674:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  111678:	e1a00003 	mov	r0, r3
  11167c:	ebffe7e6 	bl	10b61c <netconn_delete>
    sock_set_errno(sock, ENFILE);
  111680:	e3a03017 	mov	r3, #23
  111684:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  111688:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11168c:	e6ef2073 	uxtb	r2, r3
  111690:	e51b3010 	ldr	r3, [fp, #-16]
  111694:	e5c32010 	strb	r2, [r3, #16]
  111698:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11169c:	e3530000 	cmp	r3, #0
  1116a0:	0a000003 	beq	1116b4 <lwip_accept+0x20c>
  1116a4:	eb009e85 	bl	1390c0 <__errno_location>
  1116a8:	e1a02000 	mov	r2, r0
  1116ac:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1116b0:	e5823000 	str	r3, [r2]
    return -1;
  1116b4:	e3e03000 	mvn	r3, #0
  1116b8:	ea000085 	b	1118d4 <lwip_accept+0x42c>
  }
  LWIP_ASSERT("invalid socket index", (newsock >= LWIP_SOCKET_OFFSET) && (newsock < NUM_SOCKETS + LWIP_SOCKET_OFFSET));
  1116bc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1116c0:	e3530000 	cmp	r3, #0
  1116c4:	ba000002 	blt	1116d4 <lwip_accept+0x22c>
  1116c8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1116cc:	e3530007 	cmp	r3, #7
  1116d0:	da000006 	ble	1116f0 <lwip_accept+0x248>
  1116d4:	e3060f74 	movw	r0, #28532	; 0x6f74
  1116d8:	e3400014 	movt	r0, #20
  1116dc:	ebffc68c 	bl	103114 <rt_kprintf>
  1116e0:	e3001212 	movw	r1, #530	; 0x212
  1116e4:	e3060f44 	movw	r0, #28484	; 0x6f44
  1116e8:	e3400014 	movt	r0, #20
  1116ec:	ebffe65c 	bl	10b064 <sys_arch_assert>
  // LWIP_ASSERT("newconn->callback == event_callback", newconn->callback == event_callback);
  nsock = &sockets[newsock - LWIP_SOCKET_OFFSET];
  1116f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1116f4:	e3a02014 	mov	r2, #20
  1116f8:	e0020392 	mul	r2, r2, r3
  1116fc:	e30e3b80 	movw	r3, #60288	; 0xeb80
  111700:	e3403014 	movt	r3, #20
  111704:	e0823003 	add	r3, r2, r3
  111708:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  /* See event_callback: If data comes in right away after an accept, even
   * though the server task might not have created a new socket yet.
   * In that case, newconn->socket is counted down (newconn->socket--),
   * so nsock->rcvevent is >= 1 here!
   */
  SYS_ARCH_PROTECT(lev);
  11170c:	ebffc2ca 	bl	10223c <rt_enter_critical>
  nsock->rcvevent += (s16_t)(-1 - newconn->socket);
  111710:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  111714:	e1d330fa 	ldrsh	r3, [r3, #10]
  111718:	e6ff2073 	uxth	r2, r3
  11171c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  111720:	e593301c 	ldr	r3, [r3, #28]
  111724:	e6ff3073 	uxth	r3, r3
  111728:	e0423003 	sub	r3, r2, r3
  11172c:	e6ff3073 	uxth	r3, r3
  111730:	e2433001 	sub	r3, r3, #1
  111734:	e6ff3073 	uxth	r3, r3
  111738:	e6bf2073 	sxth	r2, r3
  11173c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  111740:	e1c320ba 	strh	r2, [r3, #10]
  newconn->socket = newsock;
  111744:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  111748:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  11174c:	e583201c 	str	r2, [r3, #28]
  SYS_ARCH_UNPROTECT(lev);
  111750:	ebffc2bf 	bl	102254 <rt_exit_critical>

  /* Note that POSIX only requires us to check addr is non-NULL. addrlen must
   * not be NULL if addr is valid.
   */
  if (addr != NULL) {
  111754:	e51b305c 	ldr	r3, [fp, #-92]	; 0xffffffa4
  111758:	e3530000 	cmp	r3, #0
  11175c:	0a00004e 	beq	11189c <lwip_accept+0x3f4>
    union sockaddr_aligned tempaddr;
    /* get the IP address and port of the remote host */
    err = netconn_peer(newconn, &naddr, &port);
  111760:	e51b0038 	ldr	r0, [fp, #-56]	; 0xffffffc8
  111764:	e24b203e 	sub	r2, fp, #62	; 0x3e
  111768:	e24b103c 	sub	r1, fp, #60	; 0x3c
  11176c:	e3a03000 	mov	r3, #0
  111770:	ebffe7c9 	bl	10b69c <netconn_getaddr>
  111774:	e1a03000 	mov	r3, r0
  111778:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    if (err != ERR_OK) {
  11177c:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  111780:	e3530000 	cmp	r3, #0
  111784:	0a000016 	beq	1117e4 <lwip_accept+0x33c>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_peer failed, err=%d\n", s, err));
      netconn_delete(newconn);
  111788:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  11178c:	e1a00003 	mov	r0, r3
  111790:	ebffe7a1 	bl	10b61c <netconn_delete>
      free_socket(nsock, 1);
  111794:	e3a01001 	mov	r1, #1
  111798:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  11179c:	ebffff1d 	bl	111418 <free_socket>
      sock_set_errno(sock, err_to_errno(err));
  1117a0:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  1117a4:	e1a00003 	mov	r0, r3
  1117a8:	ebfffa2f 	bl	11006c <err_to_errno>
  1117ac:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  1117b0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1117b4:	e6ef2073 	uxtb	r2, r3
  1117b8:	e51b3010 	ldr	r3, [fp, #-16]
  1117bc:	e5c32010 	strb	r2, [r3, #16]
  1117c0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1117c4:	e3530000 	cmp	r3, #0
  1117c8:	0a000003 	beq	1117dc <lwip_accept+0x334>
  1117cc:	eb009e3b 	bl	1390c0 <__errno_location>
  1117d0:	e1a02000 	mov	r2, r0
  1117d4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1117d8:	e5823000 	str	r3, [r2]
      return -1;
  1117dc:	e3e03000 	mvn	r3, #0
  1117e0:	ea00003b 	b	1118d4 <lwip_accept+0x42c>
    }
    LWIP_ASSERT("addr valid but addrlen NULL", addrlen != NULL);
  1117e4:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
  1117e8:	e3530000 	cmp	r3, #0
  1117ec:	1a000006 	bne	11180c <lwip_accept+0x364>
  1117f0:	e3060f8c 	movw	r0, #28556	; 0x6f8c
  1117f4:	e3400014 	movt	r0, #20
  1117f8:	ebffc645 	bl	103114 <rt_kprintf>
  1117fc:	e300122e 	movw	r1, #558	; 0x22e
  111800:	e3060f44 	movw	r0, #28484	; 0x6f44
  111804:	e3400014 	movt	r0, #20
  111808:	ebffe615 	bl	10b064 <sys_arch_assert>

    IPADDR_PORT_TO_SOCKADDR(&tempaddr, &naddr, port);
  11180c:	e24b3050 	sub	r3, fp, #80	; 0x50
  111810:	e3a02010 	mov	r2, #16
  111814:	e5c32000 	strb	r2, [r3]
  111818:	e24b3050 	sub	r3, fp, #80	; 0x50
  11181c:	e3a02002 	mov	r2, #2
  111820:	e5c32001 	strb	r2, [r3, #1]
  111824:	e15b33be 	ldrh	r3, [fp, #-62]	; 0xffffffc2
  111828:	e24b4050 	sub	r4, fp, #80	; 0x50
  11182c:	e1a00003 	mov	r0, r3
  111830:	eb0013e2 	bl	1167c0 <lwip_htons>
  111834:	e1a03000 	mov	r3, r0
  111838:	e1c430b2 	strh	r3, [r4, #2]
  11183c:	e24b3050 	sub	r3, fp, #80	; 0x50
  111840:	e51b203c 	ldr	r2, [fp, #-60]	; 0xffffffc4
  111844:	e5832004 	str	r2, [r3, #4]
  111848:	e24b3050 	sub	r3, fp, #80	; 0x50
  11184c:	e2833008 	add	r3, r3, #8
  111850:	e3a02008 	mov	r2, #8
  111854:	e3a01000 	mov	r1, #0
  111858:	e1a00003 	mov	r0, r3
  11185c:	eb00befe 	bl	14145c <memset>
    if (*addrlen > tempaddr.sa.sa_len) {
  111860:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
  111864:	e5933000 	ldr	r3, [r3]
  111868:	e55b2050 	ldrb	r2, [fp, #-80]	; 0xffffffb0
  11186c:	e1530002 	cmp	r3, r2
  111870:	9a000003 	bls	111884 <lwip_accept+0x3dc>
      *addrlen = tempaddr.sa.sa_len;
  111874:	e55b3050 	ldrb	r3, [fp, #-80]	; 0xffffffb0
  111878:	e1a02003 	mov	r2, r3
  11187c:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
  111880:	e5832000 	str	r2, [r3]
    }
    MEMCPY(addr, &tempaddr, *addrlen);
  111884:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
  111888:	e5932000 	ldr	r2, [r3]
  11188c:	e24b3050 	sub	r3, fp, #80	; 0x50
  111890:	e1a01003 	mov	r1, r3
  111894:	e51b005c 	ldr	r0, [fp, #-92]	; 0xffffffa4
  111898:	eb00bdb7 	bl	140f7c <memcpy>
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F"\n", port));
  } else {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d) returning new sock=%d", s, newsock));
  }

  sock_set_errno(sock, 0);
  11189c:	e3a03000 	mov	r3, #0
  1118a0:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  1118a4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1118a8:	e6ef2073 	uxtb	r2, r3
  1118ac:	e51b3010 	ldr	r3, [fp, #-16]
  1118b0:	e5c32010 	strb	r2, [r3, #16]
  1118b4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1118b8:	e3530000 	cmp	r3, #0
  1118bc:	0a000003 	beq	1118d0 <lwip_accept+0x428>
  1118c0:	eb009dfe 	bl	1390c0 <__errno_location>
  1118c4:	e1a02000 	mov	r2, r0
  1118c8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1118cc:	e5823000 	str	r3, [r2]
  return newsock;
  1118d0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
}
  1118d4:	e1a00003 	mov	r0, r3
  1118d8:	e24bd008 	sub	sp, fp, #8
  1118dc:	e8bd8810 	pop	{r4, fp, pc}

001118e0 <lwip_bind>:
#include <stdio.h>
int
lwip_bind(int s, const struct sockaddr *name, socklen_t namelen)
{
  1118e0:	e92d4800 	push	{fp, lr}
  1118e4:	e28db004 	add	fp, sp, #4
  1118e8:	e24dd028 	sub	sp, sp, #40	; 0x28
  1118ec:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  1118f0:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  1118f4:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  struct lwip_sock *sock;
  ip_addr_t local_addr;
  u16_t local_port;
  err_t err;

  sock = get_socket(s);
  1118f8:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  1118fc:	ebfffe02 	bl	11110c <get_socket>
  111900:	e50b0008 	str	r0, [fp, #-8]
  if (!sock) {
  111904:	e51b3008 	ldr	r3, [fp, #-8]
  111908:	e3530000 	cmp	r3, #0
  11190c:	1a000001 	bne	111918 <lwip_bind+0x38>
    return -1;
  111910:	e3e03000 	mvn	r3, #0
  111914:	ea000054 	b	111a6c <lwip_bind+0x18c>
    sock_set_errno(sock, err_to_errno(ERR_VAL));
    return -1;
  }

  /* check size, family and alignment of 'name' */
  LWIP_ERROR("lwip_bind: invalid address", (IS_SOCK_ADDR_LEN_VALID(namelen) &&
  111918:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11191c:	e3530010 	cmp	r3, #16
  111920:	1a000007 	bne	111944 <lwip_bind+0x64>
  111924:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111928:	e5d33001 	ldrb	r3, [r3, #1]
  11192c:	e3530002 	cmp	r3, #2
  111930:	1a000003 	bne	111944 <lwip_bind+0x64>
  111934:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111938:	e2033003 	and	r3, r3, #3
  11193c:	e3530000 	cmp	r3, #0
  111940:	0a000016 	beq	1119a0 <lwip_bind+0xc0>
  111944:	e3060fa8 	movw	r0, #28584	; 0x6fa8
  111948:	e3400014 	movt	r0, #20
  11194c:	ebffc5f0 	bl	103114 <rt_kprintf>
  111950:	e3001257 	movw	r1, #599	; 0x257
  111954:	e3060f44 	movw	r0, #28484	; 0x6f44
  111958:	e3400014 	movt	r0, #20
  11195c:	ebffe5c0 	bl	10b064 <sys_arch_assert>
  111960:	e3e0000f 	mvn	r0, #15
  111964:	ebfff9c0 	bl	11006c <err_to_errno>
  111968:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  11196c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111970:	e6ef2073 	uxtb	r2, r3
  111974:	e51b3008 	ldr	r3, [fp, #-8]
  111978:	e5c32010 	strb	r2, [r3, #16]
  11197c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111980:	e3530000 	cmp	r3, #0
  111984:	0a000003 	beq	111998 <lwip_bind+0xb8>
  111988:	eb009dcc 	bl	1390c0 <__errno_location>
  11198c:	e1a02000 	mov	r2, r0
  111990:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111994:	e5823000 	str	r3, [r2]
  111998:	e3e03000 	mvn	r3, #0
  11199c:	ea000032 	b	111a6c <lwip_bind+0x18c>
             IS_SOCK_ADDR_TYPE_VALID(name) && IS_SOCK_ADDR_ALIGNED(name)),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); return -1;);
  LWIP_UNUSED_ARG(namelen);

  SOCKADDR_TO_IPADDR_PORT(name, &local_addr, local_port);
  1119a0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1119a4:	e5933004 	ldr	r3, [r3, #4]
  1119a8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  1119ac:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1119b0:	e1d330b2 	ldrh	r3, [r3, #2]
  1119b4:	e1a00003 	mov	r0, r3
  1119b8:	eb001380 	bl	1167c0 <lwip_htons>
  1119bc:	e1a03000 	mov	r3, r0
  1119c0:	e14b30ba 	strh	r3, [fp, #-10]
    unmap_ipv4_mapped_ipv6(ip_2_ip4(&local_addr), ip_2_ip6(&local_addr));
    IP_SET_TYPE_VAL(local_addr, IPADDR_TYPE_V4);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  err = netconn_bind(sock->conn, &local_addr, local_port);
  1119c4:	e51b3008 	ldr	r3, [fp, #-8]
  1119c8:	e5933000 	ldr	r3, [r3]
  1119cc:	e15b20ba 	ldrh	r2, [fp, #-10]
  1119d0:	e24b101c 	sub	r1, fp, #28
  1119d4:	e1a00003 	mov	r0, r3
  1119d8:	ebffe76d 	bl	10b794 <netconn_bind>
  1119dc:	e1a03000 	mov	r3, r0
  1119e0:	e54b300b 	strb	r3, [fp, #-11]

  if (err != ERR_OK) {
  1119e4:	e15b30db 	ldrsb	r3, [fp, #-11]
  1119e8:	e3530000 	cmp	r3, #0
  1119ec:	0a000010 	beq	111a34 <lwip_bind+0x154>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
  1119f0:	e15b30db 	ldrsb	r3, [fp, #-11]
  1119f4:	e1a00003 	mov	r0, r3
  1119f8:	ebfff99b 	bl	11006c <err_to_errno>
  1119fc:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  111a00:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  111a04:	e6ef2073 	uxtb	r2, r3
  111a08:	e51b3008 	ldr	r3, [fp, #-8]
  111a0c:	e5c32010 	strb	r2, [r3, #16]
  111a10:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  111a14:	e3530000 	cmp	r3, #0
  111a18:	0a000003 	beq	111a2c <lwip_bind+0x14c>
  111a1c:	eb009da7 	bl	1390c0 <__errno_location>
  111a20:	e1a02000 	mov	r2, r0
  111a24:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  111a28:	e5823000 	str	r3, [r2]
    return -1;
  111a2c:	e3e03000 	mvn	r3, #0
  111a30:	ea00000d 	b	111a6c <lwip_bind+0x18c>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
  111a34:	e3a03000 	mov	r3, #0
  111a38:	e50b3010 	str	r3, [fp, #-16]
  111a3c:	e51b3010 	ldr	r3, [fp, #-16]
  111a40:	e6ef2073 	uxtb	r2, r3
  111a44:	e51b3008 	ldr	r3, [fp, #-8]
  111a48:	e5c32010 	strb	r2, [r3, #16]
  111a4c:	e51b3010 	ldr	r3, [fp, #-16]
  111a50:	e3530000 	cmp	r3, #0
  111a54:	0a000003 	beq	111a68 <lwip_bind+0x188>
  111a58:	eb009d98 	bl	1390c0 <__errno_location>
  111a5c:	e1a02000 	mov	r2, r0
  111a60:	e51b3010 	ldr	r3, [fp, #-16]
  111a64:	e5823000 	str	r3, [r2]
  return 0;
  111a68:	e3a03000 	mov	r3, #0
}
  111a6c:	e1a00003 	mov	r0, r3
  111a70:	e24bd004 	sub	sp, fp, #4
  111a74:	e8bd8800 	pop	{fp, pc}

00111a78 <lwip_close>:

int
lwip_close(int s)
{
  111a78:	e92d4800 	push	{fp, lr}
  111a7c:	e28db004 	add	fp, sp, #4
  111a80:	e24dd018 	sub	sp, sp, #24
  111a84:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct lwip_sock *sock;
  int is_tcp = 0;
  111a88:	e3a03000 	mov	r3, #0
  111a8c:	e50b3008 	str	r3, [fp, #-8]
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_close(%d)\n", s));

  sock = get_socket(s);
  111a90:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  111a94:	ebfffd9c 	bl	11110c <get_socket>
  111a98:	e50b000c 	str	r0, [fp, #-12]
  if (!sock) {
  111a9c:	e51b300c 	ldr	r3, [fp, #-12]
  111aa0:	e3530000 	cmp	r3, #0
  111aa4:	1a000001 	bne	111ab0 <lwip_close+0x38>
    return -1;
  111aa8:	e3e03000 	mvn	r3, #0
  111aac:	ea000038 	b	111b94 <lwip_close+0x11c>
  }

  if (sock->conn != NULL) {
  111ab0:	e51b300c 	ldr	r3, [fp, #-12]
  111ab4:	e5933000 	ldr	r3, [r3]
  111ab8:	e3530000 	cmp	r3, #0
  111abc:	0a000009 	beq	111ae8 <lwip_close+0x70>
    is_tcp = NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP;
  111ac0:	e51b300c 	ldr	r3, [fp, #-12]
  111ac4:	e5933000 	ldr	r3, [r3]
  111ac8:	e5933000 	ldr	r3, [r3]
  111acc:	e20330f0 	and	r3, r3, #240	; 0xf0
  111ad0:	e3530010 	cmp	r3, #16
  111ad4:	03a03001 	moveq	r3, #1
  111ad8:	13a03000 	movne	r3, #0
  111adc:	e6ef3073 	uxtb	r3, r3
  111ae0:	e50b3008 	str	r3, [fp, #-8]
  111ae4:	ea00000a 	b	111b14 <lwip_close+0x9c>
  } else {
    LWIP_ASSERT("sock->lastdata == NULL", sock->lastdata == NULL);
  111ae8:	e51b300c 	ldr	r3, [fp, #-12]
  111aec:	e5933004 	ldr	r3, [r3, #4]
  111af0:	e3530000 	cmp	r3, #0
  111af4:	0a000006 	beq	111b14 <lwip_close+0x9c>
  111af8:	e3060fc4 	movw	r0, #28612	; 0x6fc4
  111afc:	e3400014 	movt	r0, #20
  111b00:	ebffc583 	bl	103114 <rt_kprintf>
  111b04:	e3001285 	movw	r1, #645	; 0x285
  111b08:	e3060f44 	movw	r0, #28484	; 0x6f44
  111b0c:	e3400014 	movt	r0, #20
  111b10:	ebffe553 	bl	10b064 <sys_arch_assert>
  }

#if LWIP_IGMP
  /* drop all possibly joined IGMP memberships */
  lwip_socket_drop_registered_memberships(s);
  111b14:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  111b18:	eb001126 	bl	115fb8 <lwip_socket_drop_registered_memberships>
#endif /* LWIP_IGMP */

  err = netconn_delete(sock->conn);
  111b1c:	e51b300c 	ldr	r3, [fp, #-12]
  111b20:	e5933000 	ldr	r3, [r3]
  111b24:	e1a00003 	mov	r0, r3
  111b28:	ebffe6bb 	bl	10b61c <netconn_delete>
  111b2c:	e1a03000 	mov	r3, r0
  111b30:	e54b300d 	strb	r3, [fp, #-13]
  if (err != ERR_OK) {
  111b34:	e15b30dd 	ldrsb	r3, [fp, #-13]
  111b38:	e3530000 	cmp	r3, #0
  111b3c:	0a000010 	beq	111b84 <lwip_close+0x10c>
    sock_set_errno(sock, err_to_errno(err));
  111b40:	e15b30dd 	ldrsb	r3, [fp, #-13]
  111b44:	e1a00003 	mov	r0, r3
  111b48:	ebfff947 	bl	11006c <err_to_errno>
  111b4c:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  111b50:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  111b54:	e6ef2073 	uxtb	r2, r3
  111b58:	e51b300c 	ldr	r3, [fp, #-12]
  111b5c:	e5c32010 	strb	r2, [r3, #16]
  111b60:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  111b64:	e3530000 	cmp	r3, #0
  111b68:	0a000003 	beq	111b7c <lwip_close+0x104>
  111b6c:	eb009d53 	bl	1390c0 <__errno_location>
  111b70:	e1a02000 	mov	r2, r0
  111b74:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  111b78:	e5823000 	str	r3, [r2]
    return -1;
  111b7c:	e3e03000 	mvn	r3, #0
  111b80:	ea000003 	b	111b94 <lwip_close+0x11c>
  }

  free_socket(sock, is_tcp);
  111b84:	e51b1008 	ldr	r1, [fp, #-8]
  111b88:	e51b000c 	ldr	r0, [fp, #-12]
  111b8c:	ebfffe21 	bl	111418 <free_socket>
  set_errno(0);
  return 0;
  111b90:	e3a03000 	mov	r3, #0
}
  111b94:	e1a00003 	mov	r0, r3
  111b98:	e24bd004 	sub	sp, fp, #4
  111b9c:	e8bd8800 	pop	{fp, pc}

00111ba0 <lwip_connect>:

int
lwip_connect(int s, const struct sockaddr *name, socklen_t namelen)
{
  111ba0:	e92d4800 	push	{fp, lr}
  111ba4:	e28db004 	add	fp, sp, #4
  111ba8:	e24dd030 	sub	sp, sp, #48	; 0x30
  111bac:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  111bb0:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  111bb4:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
  struct lwip_sock *sock;
  err_t err;

  sock = get_socket(s);
  111bb8:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  111bbc:	ebfffd52 	bl	11110c <get_socket>
  111bc0:	e50b000c 	str	r0, [fp, #-12]
  if (!sock) {
  111bc4:	e51b300c 	ldr	r3, [fp, #-12]
  111bc8:	e3530000 	cmp	r3, #0
  111bcc:	1a000001 	bne	111bd8 <lwip_connect+0x38>
    return -1;
  111bd0:	e3e03000 	mvn	r3, #0
  111bd4:	ea000063 	b	111d68 <lwip_connect+0x1c8>
    sock_set_errno(sock, err_to_errno(ERR_VAL));
    return -1;
  }

  LWIP_UNUSED_ARG(namelen);
  if (name->sa_family == AF_UNSPEC) {
  111bd8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  111bdc:	e5d33001 	ldrb	r3, [r3, #1]
  111be0:	e3530000 	cmp	r3, #0
  111be4:	1a000006 	bne	111c04 <lwip_connect+0x64>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d, AF_UNSPEC)\n", s));
    err = netconn_disconnect(sock->conn);
  111be8:	e51b300c 	ldr	r3, [fp, #-12]
  111bec:	e5933000 	ldr	r3, [r3]
  111bf0:	e1a00003 	mov	r0, r3
  111bf4:	ebffe73a 	bl	10b8e4 <netconn_disconnect>
  111bf8:	e1a03000 	mov	r3, r0
  111bfc:	e54b3005 	strb	r3, [fp, #-5]
  111c00:	ea000036 	b	111ce0 <lwip_connect+0x140>
  } else {
    ip_addr_t remote_addr;
    u16_t remote_port;

    /* check size, family and alignment of 'name' */
    LWIP_ERROR("lwip_connect: invalid address", IS_SOCK_ADDR_LEN_VALID(namelen) &&
  111c04:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  111c08:	e3530010 	cmp	r3, #16
  111c0c:	1a00000b 	bne	111c40 <lwip_connect+0xa0>
  111c10:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  111c14:	e5d33001 	ldrb	r3, [r3, #1]
  111c18:	e3530000 	cmp	r3, #0
  111c1c:	0a000003 	beq	111c30 <lwip_connect+0x90>
  111c20:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  111c24:	e5d33001 	ldrb	r3, [r3, #1]
  111c28:	e3530002 	cmp	r3, #2
  111c2c:	1a000003 	bne	111c40 <lwip_connect+0xa0>
  111c30:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  111c34:	e2033003 	and	r3, r3, #3
  111c38:	e3530000 	cmp	r3, #0
  111c3c:	0a000016 	beq	111c9c <lwip_connect+0xfc>
  111c40:	e3060fdc 	movw	r0, #28636	; 0x6fdc
  111c44:	e3400014 	movt	r0, #20
  111c48:	ebffc531 	bl	103114 <rt_kprintf>
  111c4c:	e3a01fad 	mov	r1, #692	; 0x2b4
  111c50:	e3060f44 	movw	r0, #28484	; 0x6f44
  111c54:	e3400014 	movt	r0, #20
  111c58:	ebffe501 	bl	10b064 <sys_arch_assert>
  111c5c:	e3e0000f 	mvn	r0, #15
  111c60:	ebfff901 	bl	11006c <err_to_errno>
  111c64:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  111c68:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  111c6c:	e6ef2073 	uxtb	r2, r3
  111c70:	e51b300c 	ldr	r3, [fp, #-12]
  111c74:	e5c32010 	strb	r2, [r3, #16]
  111c78:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  111c7c:	e3530000 	cmp	r3, #0
  111c80:	0a000003 	beq	111c94 <lwip_connect+0xf4>
  111c84:	eb009d0d 	bl	1390c0 <__errno_location>
  111c88:	e1a02000 	mov	r2, r0
  111c8c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  111c90:	e5823000 	str	r3, [r2]
  111c94:	e3e03000 	mvn	r3, #0
  111c98:	ea000032 	b	111d68 <lwip_connect+0x1c8>
               IS_SOCK_ADDR_TYPE_VALID_OR_UNSPEC(name) && IS_SOCK_ADDR_ALIGNED(name),
               sock_set_errno(sock, err_to_errno(ERR_ARG)); return -1;);

    SOCKADDR_TO_IPADDR_PORT(name, &remote_addr, remote_port);
  111c9c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  111ca0:	e5933004 	ldr	r3, [r3, #4]
  111ca4:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  111ca8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  111cac:	e1d330b2 	ldrh	r3, [r3, #2]
  111cb0:	e1a00003 	mov	r0, r3
  111cb4:	eb0012c1 	bl	1167c0 <lwip_htons>
  111cb8:	e1a03000 	mov	r3, r0
  111cbc:	e14b30be 	strh	r3, [fp, #-14]
      unmap_ipv4_mapped_ipv6(ip_2_ip4(&remote_addr), ip_2_ip6(&remote_addr));
      IP_SET_TYPE_VAL(remote_addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    err = netconn_connect(sock->conn, &remote_addr, remote_port);
  111cc0:	e51b300c 	ldr	r3, [fp, #-12]
  111cc4:	e5933000 	ldr	r3, [r3]
  111cc8:	e15b20be 	ldrh	r2, [fp, #-14]
  111ccc:	e24b1020 	sub	r1, fp, #32
  111cd0:	e1a00003 	mov	r0, r3
  111cd4:	ebffe6d8 	bl	10b83c <netconn_connect>
  111cd8:	e1a03000 	mov	r3, r0
  111cdc:	e54b3005 	strb	r3, [fp, #-5]
  }

  if (err != ERR_OK) {
  111ce0:	e15b30d5 	ldrsb	r3, [fp, #-5]
  111ce4:	e3530000 	cmp	r3, #0
  111ce8:	0a000010 	beq	111d30 <lwip_connect+0x190>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
  111cec:	e15b30d5 	ldrsb	r3, [fp, #-5]
  111cf0:	e1a00003 	mov	r0, r3
  111cf4:	ebfff8dc 	bl	11006c <err_to_errno>
  111cf8:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
  111cfc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  111d00:	e6ef2073 	uxtb	r2, r3
  111d04:	e51b300c 	ldr	r3, [fp, #-12]
  111d08:	e5c32010 	strb	r2, [r3, #16]
  111d0c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  111d10:	e3530000 	cmp	r3, #0
  111d14:	0a000003 	beq	111d28 <lwip_connect+0x188>
  111d18:	eb009ce8 	bl	1390c0 <__errno_location>
  111d1c:	e1a02000 	mov	r2, r0
  111d20:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  111d24:	e5823000 	str	r3, [r2]
    return -1;
  111d28:	e3e03000 	mvn	r3, #0
  111d2c:	ea00000d 	b	111d68 <lwip_connect+0x1c8>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
  111d30:	e3a03000 	mov	r3, #0
  111d34:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  111d38:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111d3c:	e6ef2073 	uxtb	r2, r3
  111d40:	e51b300c 	ldr	r3, [fp, #-12]
  111d44:	e5c32010 	strb	r2, [r3, #16]
  111d48:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111d4c:	e3530000 	cmp	r3, #0
  111d50:	0a000003 	beq	111d64 <lwip_connect+0x1c4>
  111d54:	eb009cd9 	bl	1390c0 <__errno_location>
  111d58:	e1a02000 	mov	r2, r0
  111d5c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111d60:	e5823000 	str	r3, [r2]
  return 0;
  111d64:	e3a03000 	mov	r3, #0
}
  111d68:	e1a00003 	mov	r0, r3
  111d6c:	e24bd004 	sub	sp, fp, #4
  111d70:	e8bd8800 	pop	{fp, pc}

00111d74 <lwip_listen>:
 * @param backlog (ATTENTION: needs TCP_LISTEN_BACKLOG=1)
 * @return 0 on success, non-zero on failure
 */
int
lwip_listen(int s, int backlog)
{
  111d74:	e92d4800 	push	{fp, lr}
  111d78:	e28db004 	add	fp, sp, #4
  111d7c:	e24dd020 	sub	sp, sp, #32
  111d80:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  111d84:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  struct lwip_sock *sock;
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d, backlog=%d)\n", s, backlog));

  sock = get_socket(s);
  111d88:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  111d8c:	ebfffcde 	bl	11110c <get_socket>
  111d90:	e50b0008 	str	r0, [fp, #-8]
  if (!sock) {
  111d94:	e51b3008 	ldr	r3, [fp, #-8]
  111d98:	e3530000 	cmp	r3, #0
  111d9c:	1a000001 	bne	111da8 <lwip_listen+0x34>
    return -1;
  111da0:	e3e03000 	mvn	r3, #0
  111da4:	ea000047 	b	111ec8 <lwip_listen+0x154>
  }

  /* limit the "backlog" parameter to fit in an u8_t */
  backlog = LWIP_MIN(LWIP_MAX(backlog, 0), 0xff);
  111da8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111dac:	e35300fe 	cmp	r3, #254	; 0xfe
  111db0:	ca000002 	bgt	111dc0 <lwip_listen+0x4c>
  111db4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111db8:	e1c33fc3 	bic	r3, r3, r3, asr #31
  111dbc:	ea000000 	b	111dc4 <lwip_listen+0x50>
  111dc0:	e3a030ff 	mov	r3, #255	; 0xff
  111dc4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc

  err = netconn_listen_with_backlog(sock->conn, (u8_t)backlog);
  111dc8:	e51b3008 	ldr	r3, [fp, #-8]
  111dcc:	e5933000 	ldr	r3, [r3]
  111dd0:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  111dd4:	e6ef2072 	uxtb	r2, r2
  111dd8:	e1a01002 	mov	r1, r2
  111ddc:	e1a00003 	mov	r0, r3
  111de0:	ebffe6dc 	bl	10b958 <netconn_listen_with_backlog>
  111de4:	e1a03000 	mov	r3, r0
  111de8:	e54b3009 	strb	r3, [fp, #-9]

  if (err != ERR_OK) {
  111dec:	e15b30d9 	ldrsb	r3, [fp, #-9]
  111df0:	e3530000 	cmp	r3, #0
  111df4:	0a000025 	beq	111e90 <lwip_listen+0x11c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d) failed, err=%d\n", s, err));
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
  111df8:	e51b3008 	ldr	r3, [fp, #-8]
  111dfc:	e5933000 	ldr	r3, [r3]
  111e00:	e5933000 	ldr	r3, [r3]
  111e04:	e20330f0 	and	r3, r3, #240	; 0xf0
  111e08:	e3530010 	cmp	r3, #16
  111e0c:	0a00000e 	beq	111e4c <lwip_listen+0xd8>
      sock_set_errno(sock, EOPNOTSUPP);
  111e10:	e3a0305f 	mov	r3, #95	; 0x5f
  111e14:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  111e18:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111e1c:	e6ef2073 	uxtb	r2, r3
  111e20:	e51b3008 	ldr	r3, [fp, #-8]
  111e24:	e5c32010 	strb	r2, [r3, #16]
  111e28:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111e2c:	e3530000 	cmp	r3, #0
  111e30:	0a000003 	beq	111e44 <lwip_listen+0xd0>
  111e34:	eb009ca1 	bl	1390c0 <__errno_location>
  111e38:	e1a02000 	mov	r2, r0
  111e3c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111e40:	e5823000 	str	r3, [r2]
      return -1;
  111e44:	e3e03000 	mvn	r3, #0
  111e48:	ea00001e 	b	111ec8 <lwip_listen+0x154>
    }
    sock_set_errno(sock, err_to_errno(err));
  111e4c:	e15b30d9 	ldrsb	r3, [fp, #-9]
  111e50:	e1a00003 	mov	r0, r3
  111e54:	ebfff884 	bl	11006c <err_to_errno>
  111e58:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  111e5c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  111e60:	e6ef2073 	uxtb	r2, r3
  111e64:	e51b3008 	ldr	r3, [fp, #-8]
  111e68:	e5c32010 	strb	r2, [r3, #16]
  111e6c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  111e70:	e3530000 	cmp	r3, #0
  111e74:	0a000003 	beq	111e88 <lwip_listen+0x114>
  111e78:	eb009c90 	bl	1390c0 <__errno_location>
  111e7c:	e1a02000 	mov	r2, r0
  111e80:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  111e84:	e5823000 	str	r3, [r2]
    return -1;
  111e88:	e3e03000 	mvn	r3, #0
  111e8c:	ea00000d 	b	111ec8 <lwip_listen+0x154>
  }

  sock_set_errno(sock, 0);
  111e90:	e3a03000 	mov	r3, #0
  111e94:	e50b3010 	str	r3, [fp, #-16]
  111e98:	e51b3010 	ldr	r3, [fp, #-16]
  111e9c:	e6ef2073 	uxtb	r2, r3
  111ea0:	e51b3008 	ldr	r3, [fp, #-8]
  111ea4:	e5c32010 	strb	r2, [r3, #16]
  111ea8:	e51b3010 	ldr	r3, [fp, #-16]
  111eac:	e3530000 	cmp	r3, #0
  111eb0:	0a000003 	beq	111ec4 <lwip_listen+0x150>
  111eb4:	eb009c81 	bl	1390c0 <__errno_location>
  111eb8:	e1a02000 	mov	r2, r0
  111ebc:	e51b3010 	ldr	r3, [fp, #-16]
  111ec0:	e5823000 	str	r3, [r2]
  return 0;
  111ec4:	e3a03000 	mov	r3, #0
}
  111ec8:	e1a00003 	mov	r0, r3
  111ecc:	e24bd004 	sub	sp, fp, #4
  111ed0:	e8bd8800 	pop	{fp, pc}

00111ed4 <lwip_recvfrom>:

int
lwip_recvfrom(int s, void *mem, size_t len, int flags,
              struct sockaddr *from, socklen_t *fromlen)
{
  111ed4:	e92d4810 	push	{r4, fp, lr}
  111ed8:	e28db008 	add	fp, sp, #8
  111edc:	e24dd05c 	sub	sp, sp, #92	; 0x5c
  111ee0:	e50b0058 	str	r0, [fp, #-88]	; 0xffffffa8
  111ee4:	e50b105c 	str	r1, [fp, #-92]	; 0xffffffa4
  111ee8:	e50b2060 	str	r2, [fp, #-96]	; 0xffffffa0
  111eec:	e50b3064 	str	r3, [fp, #-100]	; 0xffffff9c
  struct lwip_sock *sock;
  void             *buf = NULL;
  111ef0:	e3a03000 	mov	r3, #0
  111ef4:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  struct pbuf      *p;
  u16_t            buflen, copylen;
  int              off = 0;
  111ef8:	e3a03000 	mov	r3, #0
  111efc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  u8_t             done = 0;
  111f00:	e3a03000 	mov	r3, #0
  111f04:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
  err_t            err;
  
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d, %p, %"SZT_F", 0x%x, ..)\n", s, mem, len, flags));
  sock = get_socket(s);
  111f08:	e51b0058 	ldr	r0, [fp, #-88]	; 0xffffffa8
  111f0c:	ebfffc7e 	bl	11110c <get_socket>
  111f10:	e50b0024 	str	r0, [fp, #-36]	; 0xffffffdc
  if (!sock) {
  111f14:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111f18:	e3530000 	cmp	r3, #0
  111f1c:	1a000001 	bne	111f28 <lwip_recvfrom+0x54>
    return -1;
  111f20:	e3e03000 	mvn	r3, #0
  111f24:	ea00015b 	b	112498 <lwip_recvfrom+0x5c4>
  }

  do {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: top while sock->lastdata=%p\n", sock->lastdata));
    /* Check if there is data left from the last recv operation. */
    if (sock->lastdata) {
  111f28:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111f2c:	e5933004 	ldr	r3, [r3, #4]
  111f30:	e3530000 	cmp	r3, #0
  111f34:	0a000003 	beq	111f48 <lwip_recvfrom+0x74>
      buf = sock->lastdata;
  111f38:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111f3c:	e5933004 	ldr	r3, [r3, #4]
  111f40:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  111f44:	ea00007d 	b	112140 <lwip_recvfrom+0x26c>
    } else {
      /* If this is non-blocking call, then check first */
      if (((flags & MSG_DONTWAIT) || netconn_is_nonblocking(sock->conn)) &&
  111f48:	e51b3064 	ldr	r3, [fp, #-100]	; 0xffffff9c
  111f4c:	e2033008 	and	r3, r3, #8
  111f50:	e3530000 	cmp	r3, #0
  111f54:	1a000005 	bne	111f70 <lwip_recvfrom+0x9c>
  111f58:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111f5c:	e5933000 	ldr	r3, [r3]
  111f60:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  111f64:	e2033002 	and	r3, r3, #2
  111f68:	e3530000 	cmp	r3, #0
  111f6c:	0a00001b 	beq	111fe0 <lwip_recvfrom+0x10c>
          (sock->rcvevent <= 0)) {
  111f70:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111f74:	e1d330fa 	ldrsh	r3, [r3, #10]
      if (((flags & MSG_DONTWAIT) || netconn_is_nonblocking(sock->conn)) &&
  111f78:	e3530000 	cmp	r3, #0
  111f7c:	ca000017 	bgt	111fe0 <lwip_recvfrom+0x10c>
        if (off > 0) {
  111f80:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111f84:	e3530000 	cmp	r3, #0
  111f88:	da00000e 	ble	111fc8 <lwip_recvfrom+0xf4>
          /* already received data, return that */
          sock_set_errno(sock, 0);
  111f8c:	e3a03000 	mov	r3, #0
  111f90:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  111f94:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  111f98:	e6ef2073 	uxtb	r2, r3
  111f9c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111fa0:	e5c32010 	strb	r2, [r3, #16]
  111fa4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  111fa8:	e3530000 	cmp	r3, #0
  111fac:	0a000003 	beq	111fc0 <lwip_recvfrom+0xec>
  111fb0:	eb009c42 	bl	1390c0 <__errno_location>
  111fb4:	e1a02000 	mov	r2, r0
  111fb8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  111fbc:	e5823000 	str	r3, [r2]
          return off;
  111fc0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  111fc4:	ea000133 	b	112498 <lwip_recvfrom+0x5c4>
        }

        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d): returning EWOULDBLOCK\n", s));
        set_errno(EWOULDBLOCK);
  111fc8:	eb009c3c 	bl	1390c0 <__errno_location>
  111fcc:	e1a02000 	mov	r2, r0
  111fd0:	e3a0300b 	mov	r3, #11
  111fd4:	e5823000 	str	r3, [r2]
        return -1;
  111fd8:	e3e03000 	mvn	r3, #0
  111fdc:	ea00012d 	b	112498 <lwip_recvfrom+0x5c4>
      }
      /* No data was left from the previous operation, so we try to get
         some from the network. */
      if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
  111fe0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111fe4:	e5933000 	ldr	r3, [r3]
  111fe8:	e5933000 	ldr	r3, [r3]
  111fec:	e20330f0 	and	r3, r3, #240	; 0xf0
  111ff0:	e3530010 	cmp	r3, #16
  111ff4:	1a000008 	bne	11201c <lwip_recvfrom+0x148>
        err = netconn_recv_tcp_pbuf(sock->conn, (struct pbuf **)&buf);
  111ff8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  111ffc:	e5933000 	ldr	r3, [r3]
  112000:	e24b203c 	sub	r2, fp, #60	; 0x3c
  112004:	e1a01002 	mov	r1, r2
  112008:	e1a00003 	mov	r0, r3
  11200c:	ebffe794 	bl	10be64 <netconn_recv_tcp_pbuf>
  112010:	e1a03000 	mov	r3, r0
  112014:	e54b301a 	strb	r3, [fp, #-26]	; 0xffffffe6
  112018:	ea000007 	b	11203c <lwip_recvfrom+0x168>
      } else {
        err = netconn_recv(sock->conn, (struct netbuf **)&buf);
  11201c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  112020:	e5933000 	ldr	r3, [r3]
  112024:	e24b203c 	sub	r2, fp, #60	; 0x3c
  112028:	e1a01002 	mov	r1, r2
  11202c:	e1a00003 	mov	r0, r3
  112030:	ebffe7a8 	bl	10bed8 <netconn_recv>
  112034:	e1a03000 	mov	r3, r0
  112038:	e54b301a 	strb	r3, [fp, #-26]	; 0xffffffe6
      }
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: netconn_recv err=%d, netbuf=%p\n",
        err, buf));

      if (err != ERR_OK) {
  11203c:	e15b31da 	ldrsb	r3, [fp, #-26]	; 0xffffffe6
  112040:	e3530000 	cmp	r3, #0
  112044:	0a000030 	beq	11210c <lwip_recvfrom+0x238>
        if (off > 0) {
  112048:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11204c:	e3530000 	cmp	r3, #0
  112050:	da000017 	ble	1120b4 <lwip_recvfrom+0x1e0>
          if (err == ERR_CLSD) {
  112054:	e15b31da 	ldrsb	r3, [fp, #-26]	; 0xffffffe6
  112058:	e373000f 	cmn	r3, #15
  11205c:	1a000005 	bne	112078 <lwip_recvfrom+0x1a4>
            /* closed but already received data, ensure select gets the FIN, too */
            event_callback(sock->conn, NETCONN_EVT_RCVPLUS, 0);
  112060:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  112064:	e5933000 	ldr	r3, [r3]
  112068:	e3a02000 	mov	r2, #0
  11206c:	e3a01000 	mov	r1, #0
  112070:	e1a00003 	mov	r0, r3
  112074:	eb0006bc 	bl	113b6c <event_callback>
          }
          /* already received data, return that */
          sock_set_errno(sock, 0);
  112078:	e3a03000 	mov	r3, #0
  11207c:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
  112080:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  112084:	e6ef2073 	uxtb	r2, r3
  112088:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11208c:	e5c32010 	strb	r2, [r3, #16]
  112090:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  112094:	e3530000 	cmp	r3, #0
  112098:	0a000003 	beq	1120ac <lwip_recvfrom+0x1d8>
  11209c:	eb009c07 	bl	1390c0 <__errno_location>
  1120a0:	e1a02000 	mov	r2, r0
  1120a4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1120a8:	e5823000 	str	r3, [r2]
          return off;
  1120ac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1120b0:	ea0000f8 	b	112498 <lwip_recvfrom+0x5c4>
        }
        /* We should really do some error checking here. */
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d): buf == NULL, error is \"%s\"!\n",
          s, lwip_strerr(err)));
        sock_set_errno(sock, err_to_errno(err));
  1120b4:	e15b31da 	ldrsb	r3, [fp, #-26]	; 0xffffffe6
  1120b8:	e1a00003 	mov	r0, r3
  1120bc:	ebfff7ea 	bl	11006c <err_to_errno>
  1120c0:	e50b002c 	str	r0, [fp, #-44]	; 0xffffffd4
  1120c4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1120c8:	e6ef2073 	uxtb	r2, r3
  1120cc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1120d0:	e5c32010 	strb	r2, [r3, #16]
  1120d4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1120d8:	e3530000 	cmp	r3, #0
  1120dc:	0a000003 	beq	1120f0 <lwip_recvfrom+0x21c>
  1120e0:	eb009bf6 	bl	1390c0 <__errno_location>
  1120e4:	e1a02000 	mov	r2, r0
  1120e8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1120ec:	e5823000 	str	r3, [r2]
        if (err == ERR_CLSD) {
  1120f0:	e15b31da 	ldrsb	r3, [fp, #-26]	; 0xffffffe6
  1120f4:	e373000f 	cmn	r3, #15
  1120f8:	1a000001 	bne	112104 <lwip_recvfrom+0x230>
          return 0;
  1120fc:	e3a03000 	mov	r3, #0
  112100:	ea0000e4 	b	112498 <lwip_recvfrom+0x5c4>
        } else {
          return -1;
  112104:	e3e03000 	mvn	r3, #0
  112108:	ea0000e2 	b	112498 <lwip_recvfrom+0x5c4>
        }
      }
      LWIP_ASSERT("buf != NULL", buf != NULL);
  11210c:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  112110:	e3530000 	cmp	r3, #0
  112114:	1a000006 	bne	112134 <lwip_recvfrom+0x260>
  112118:	e3060ffc 	movw	r0, #28668	; 0x6ffc
  11211c:	e3400014 	movt	r0, #20
  112120:	ebffc3fb 	bl	103114 <rt_kprintf>
  112124:	e3a01fcf 	mov	r1, #828	; 0x33c
  112128:	e3060f44 	movw	r0, #28484	; 0x6f44
  11212c:	e3400014 	movt	r0, #20
  112130:	ebffe3cb 	bl	10b064 <sys_arch_assert>
      sock->lastdata = buf;
  112134:	e51b203c 	ldr	r2, [fp, #-60]	; 0xffffffc4
  112138:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11213c:	e5832004 	str	r2, [r3, #4]
    }

    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
  112140:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  112144:	e5933000 	ldr	r3, [r3]
  112148:	e5933000 	ldr	r3, [r3]
  11214c:	e20330f0 	and	r3, r3, #240	; 0xf0
  112150:	e3530010 	cmp	r3, #16
  112154:	1a000002 	bne	112164 <lwip_recvfrom+0x290>
      p = (struct pbuf *)buf;
  112158:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  11215c:	e50b3010 	str	r3, [fp, #-16]
  112160:	ea000002 	b	112170 <lwip_recvfrom+0x29c>
    } else {
      p = ((struct netbuf *)buf)->p;
  112164:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  112168:	e5933000 	ldr	r3, [r3]
  11216c:	e50b3010 	str	r3, [fp, #-16]
    }
    buflen = p->tot_len;
  112170:	e51b3010 	ldr	r3, [fp, #-16]
  112174:	e1d330b8 	ldrh	r3, [r3, #8]
  112178:	e14b33b2 	strh	r3, [fp, #-50]	; 0xffffffce
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: buflen=%"U16_F" len=%"SZT_F" off=%d sock->lastoffset=%"U16_F"\n",
      buflen, len, off, sock->lastoffset));

    buflen -= sock->lastoffset;
  11217c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  112180:	e1d330b8 	ldrh	r3, [r3, #8]
  112184:	e15b23b2 	ldrh	r2, [fp, #-50]	; 0xffffffce
  112188:	e0423003 	sub	r3, r2, r3
  11218c:	e14b33b2 	strh	r3, [fp, #-50]	; 0xffffffce

    if (len > buflen) {
  112190:	e15b33b2 	ldrh	r3, [fp, #-50]	; 0xffffffce
  112194:	e51b2060 	ldr	r2, [fp, #-96]	; 0xffffffa0
  112198:	e1520003 	cmp	r2, r3
  11219c:	9a000002 	bls	1121ac <lwip_recvfrom+0x2d8>
      copylen = buflen;
  1121a0:	e15b33b2 	ldrh	r3, [fp, #-50]	; 0xffffffce
  1121a4:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  1121a8:	ea000001 	b	1121b4 <lwip_recvfrom+0x2e0>
    } else {
      copylen = (u16_t)len;
  1121ac:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
  1121b0:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
    }

    /* copy the contents of the received buffer into
    the supplied memory pointer mem */
    pbuf_copy_partial(p, (u8_t*)mem + off, copylen, sock->lastoffset);
  1121b4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1121b8:	e51b205c 	ldr	r2, [fp, #-92]	; 0xffffffa4
  1121bc:	e0821003 	add	r1, r2, r3
  1121c0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1121c4:	e1d330b8 	ldrh	r3, [r3, #8]
  1121c8:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
  1121cc:	e51b0010 	ldr	r0, [fp, #-16]
  1121d0:	eb0025bc 	bl	11b8c8 <pbuf_copy_partial>

    off += copylen;
  1121d4:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  1121d8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1121dc:	e0823003 	add	r3, r2, r3
  1121e0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
  1121e4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1121e8:	e5933000 	ldr	r3, [r3]
  1121ec:	e5933000 	ldr	r3, [r3]
  1121f0:	e20330f0 	and	r3, r3, #240	; 0xf0
  1121f4:	e3530010 	cmp	r3, #16
  1121f8:	1a000021 	bne	112284 <lwip_recvfrom+0x3b0>
      LWIP_ASSERT("invalid copylen, len would underflow", len >= copylen);
  1121fc:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  112200:	e51b2060 	ldr	r2, [fp, #-96]	; 0xffffffa0
  112204:	e1520003 	cmp	r2, r3
  112208:	2a000006 	bcs	112228 <lwip_recvfrom+0x354>
  11220c:	e3070008 	movw	r0, #28680	; 0x7008
  112210:	e3400014 	movt	r0, #20
  112214:	ebffc3be 	bl	103114 <rt_kprintf>
  112218:	e3a01fd6 	mov	r1, #856	; 0x358
  11221c:	e3060f44 	movw	r0, #28484	; 0x6f44
  112220:	e3400014 	movt	r0, #20
  112224:	ebffe38e 	bl	10b064 <sys_arch_assert>
      len -= copylen;
  112228:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11222c:	e51b2060 	ldr	r2, [fp, #-96]	; 0xffffffa0
  112230:	e0423003 	sub	r3, r2, r3
  112234:	e50b3060 	str	r3, [fp, #-96]	; 0xffffffa0
      if ((len <= 0) ||
  112238:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
  11223c:	e3530000 	cmp	r3, #0
  112240:	0a00000c 	beq	112278 <lwip_recvfrom+0x3a4>
          (p->flags & PBUF_FLAG_PUSH) ||
  112244:	e51b3010 	ldr	r3, [fp, #-16]
  112248:	e5d3300d 	ldrb	r3, [r3, #13]
  11224c:	e2033001 	and	r3, r3, #1
      if ((len <= 0) ||
  112250:	e3530000 	cmp	r3, #0
  112254:	1a000007 	bne	112278 <lwip_recvfrom+0x3a4>
          (sock->rcvevent <= 0) ||
  112258:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11225c:	e1d330fa 	ldrsh	r3, [r3, #10]
          (p->flags & PBUF_FLAG_PUSH) ||
  112260:	e3530000 	cmp	r3, #0
  112264:	da000003 	ble	112278 <lwip_recvfrom+0x3a4>
          ((flags & MSG_PEEK) != 0)) {
  112268:	e51b3064 	ldr	r3, [fp, #-100]	; 0xffffff9c
  11226c:	e2033001 	and	r3, r3, #1
          (sock->rcvevent <= 0) ||
  112270:	e3530000 	cmp	r3, #0
  112274:	0a000004 	beq	11228c <lwip_recvfrom+0x3b8>
        done = 1;
  112278:	e3a03001 	mov	r3, #1
  11227c:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
  112280:	ea000001 	b	11228c <lwip_recvfrom+0x3b8>
      }
    } else {
      done = 1;
  112284:	e3a03001 	mov	r3, #1
  112288:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
    }

    /* Check to see from where the data was.*/
    if (done) {
  11228c:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
  112290:	e3530000 	cmp	r3, #0
  112294:	0a00003f 	beq	112398 <lwip_recvfrom+0x4c4>
#if !SOCKETS_DEBUG
      if (from && fromlen)
  112298:	e59b3004 	ldr	r3, [fp, #4]
  11229c:	e3530000 	cmp	r3, #0
  1122a0:	0a00003c 	beq	112398 <lwip_recvfrom+0x4c4>
  1122a4:	e59b3008 	ldr	r3, [fp, #8]
  1122a8:	e3530000 	cmp	r3, #0
  1122ac:	0a000039 	beq	112398 <lwip_recvfrom+0x4c4>
        u16_t port;
        ip_addr_t tmpaddr;
        ip_addr_t *fromaddr;
        union sockaddr_aligned saddr;
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d): addr=", s));
        if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
  1122b0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1122b4:	e5933000 	ldr	r3, [r3]
  1122b8:	e5933000 	ldr	r3, [r3]
  1122bc:	e20330f0 	and	r3, r3, #240	; 0xf0
  1122c0:	e3530010 	cmp	r3, #16
  1122c4:	1a000008 	bne	1122ec <lwip_recvfrom+0x418>
          fromaddr = &tmpaddr;
  1122c8:	e24b3044 	sub	r3, fp, #68	; 0x44
  1122cc:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
          netconn_getaddr(sock->conn, fromaddr, &port, 0);
  1122d0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1122d4:	e5930000 	ldr	r0, [r3]
  1122d8:	e24b203e 	sub	r2, fp, #62	; 0x3e
  1122dc:	e3a03000 	mov	r3, #0
  1122e0:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  1122e4:	ebffe4ec 	bl	10b69c <netconn_getaddr>
  1122e8:	ea000005 	b	112304 <lwip_recvfrom+0x430>
        } else {
          port = netbuf_fromport((struct netbuf *)buf);
  1122ec:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  1122f0:	e1d330bc 	ldrh	r3, [r3, #12]
  1122f4:	e14b33be 	strh	r3, [fp, #-62]	; 0xffffffc2
          fromaddr = netbuf_fromaddr((struct netbuf *)buf);
  1122f8:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  1122fc:	e2833008 	add	r3, r3, #8
  112300:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
          ip4_2_ipv4_mapped_ipv6(ip_2_ip6(fromaddr), ip_2_ip4(fromaddr));
          IP_SET_TYPE(fromaddr, IPADDR_TYPE_V6);
        }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

        IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
  112304:	e24b3054 	sub	r3, fp, #84	; 0x54
  112308:	e3a02010 	mov	r2, #16
  11230c:	e5c32000 	strb	r2, [r3]
  112310:	e24b3054 	sub	r3, fp, #84	; 0x54
  112314:	e3a02002 	mov	r2, #2
  112318:	e5c32001 	strb	r2, [r3, #1]
  11231c:	e15b33be 	ldrh	r3, [fp, #-62]	; 0xffffffc2
  112320:	e24b4054 	sub	r4, fp, #84	; 0x54
  112324:	e1a00003 	mov	r0, r3
  112328:	eb001124 	bl	1167c0 <lwip_htons>
  11232c:	e1a03000 	mov	r3, r0
  112330:	e1c430b2 	strh	r3, [r4, #2]
  112334:	e24b3054 	sub	r3, fp, #84	; 0x54
  112338:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  11233c:	e5922000 	ldr	r2, [r2]
  112340:	e5832004 	str	r2, [r3, #4]
  112344:	e24b3054 	sub	r3, fp, #84	; 0x54
  112348:	e2833008 	add	r3, r3, #8
  11234c:	e3a02008 	mov	r2, #8
  112350:	e3a01000 	mov	r1, #0
  112354:	e1a00003 	mov	r0, r3
  112358:	eb00bc3f 	bl	14145c <memset>
        LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", port, off));
#if SOCKETS_DEBUG
        if (from && fromlen)
#endif /* SOCKETS_DEBUG */
        {
          if (*fromlen > saddr.sa.sa_len) {
  11235c:	e59b3008 	ldr	r3, [fp, #8]
  112360:	e5933000 	ldr	r3, [r3]
  112364:	e55b2054 	ldrb	r2, [fp, #-84]	; 0xffffffac
  112368:	e1530002 	cmp	r3, r2
  11236c:	9a000003 	bls	112380 <lwip_recvfrom+0x4ac>
            *fromlen = saddr.sa.sa_len;
  112370:	e55b3054 	ldrb	r3, [fp, #-84]	; 0xffffffac
  112374:	e1a02003 	mov	r2, r3
  112378:	e59b3008 	ldr	r3, [fp, #8]
  11237c:	e5832000 	str	r2, [r3]
          }
          MEMCPY(from, &saddr, *fromlen);
  112380:	e59b3008 	ldr	r3, [fp, #8]
  112384:	e5932000 	ldr	r2, [r3]
  112388:	e24b3054 	sub	r3, fp, #84	; 0x54
  11238c:	e1a01003 	mov	r1, r3
  112390:	e59b0004 	ldr	r0, [fp, #4]
  112394:	eb00baf8 	bl	140f7c <memcpy>
        }
      }
    }

    /* If we don't peek the incoming message... */
    if ((flags & MSG_PEEK) == 0) {
  112398:	e51b3064 	ldr	r3, [fp, #-100]	; 0xffffff9c
  11239c:	e2033001 	and	r3, r3, #1
  1123a0:	e3530000 	cmp	r3, #0
  1123a4:	1a00002a 	bne	112454 <lwip_recvfrom+0x580>
      /* If this is a TCP socket, check if there is data left in the
         buffer. If so, it should be saved in the sock structure for next
         time around. */
      if ((NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) && (buflen - copylen > 0)) {
  1123a8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1123ac:	e5933000 	ldr	r3, [r3]
  1123b0:	e5933000 	ldr	r3, [r3]
  1123b4:	e20330f0 	and	r3, r3, #240	; 0xf0
  1123b8:	e3530010 	cmp	r3, #16
  1123bc:	1a00000f 	bne	112400 <lwip_recvfrom+0x52c>
  1123c0:	e15b23b2 	ldrh	r2, [fp, #-50]	; 0xffffffce
  1123c4:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  1123c8:	e0423003 	sub	r3, r2, r3
  1123cc:	e3530000 	cmp	r3, #0
  1123d0:	da00000a 	ble	112400 <lwip_recvfrom+0x52c>
        sock->lastdata = buf;
  1123d4:	e51b203c 	ldr	r2, [fp, #-60]	; 0xffffffc4
  1123d8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1123dc:	e5832004 	str	r2, [r3, #4]
        sock->lastoffset += copylen;
  1123e0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1123e4:	e1d320b8 	ldrh	r2, [r3, #8]
  1123e8:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  1123ec:	e0823003 	add	r3, r2, r3
  1123f0:	e6ff2073 	uxth	r2, r3
  1123f4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1123f8:	e1c320b8 	strh	r2, [r3, #8]
  1123fc:	ea000014 	b	112454 <lwip_recvfrom+0x580>
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: lastdata now netbuf=%p\n", buf));
      } else {
        sock->lastdata = NULL;
  112400:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  112404:	e3a02000 	mov	r2, #0
  112408:	e5832004 	str	r2, [r3, #4]
        sock->lastoffset = 0;
  11240c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  112410:	e3a02000 	mov	r2, #0
  112414:	e1c320b8 	strh	r2, [r3, #8]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom: deleting netbuf=%p\n", buf));
        if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
  112418:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11241c:	e5933000 	ldr	r3, [r3]
  112420:	e5933000 	ldr	r3, [r3]
  112424:	e20330f0 	and	r3, r3, #240	; 0xf0
  112428:	e3530010 	cmp	r3, #16
  11242c:	1a000003 	bne	112440 <lwip_recvfrom+0x56c>
          pbuf_free((struct pbuf *)buf);
  112430:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  112434:	e1a00003 	mov	r0, r3
  112438:	eb002317 	bl	11b09c <pbuf_free>
  11243c:	ea000002 	b	11244c <lwip_recvfrom+0x578>
        } else {
          netbuf_delete((struct netbuf *)buf);
  112440:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  112444:	e1a00003 	mov	r0, r3
  112448:	ebfff732 	bl	110118 <netbuf_delete>
        }
        buf = NULL;
  11244c:	e3a03000 	mov	r3, #0
  112450:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
      }
    }
  } while (!done);
  112454:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
  112458:	e3530000 	cmp	r3, #0
  11245c:	0afffeb1 	beq	111f28 <lwip_recvfrom+0x54>

  sock_set_errno(sock, 0);
  112460:	e3a03000 	mov	r3, #0
  112464:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
  112468:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  11246c:	e6ef2073 	uxtb	r2, r3
  112470:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  112474:	e5c32010 	strb	r2, [r3, #16]
  112478:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  11247c:	e3530000 	cmp	r3, #0
  112480:	0a000003 	beq	112494 <lwip_recvfrom+0x5c0>
  112484:	eb009b0d 	bl	1390c0 <__errno_location>
  112488:	e1a02000 	mov	r2, r0
  11248c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  112490:	e5823000 	str	r3, [r2]
  return off;
  112494:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
}
  112498:	e1a00003 	mov	r0, r3
  11249c:	e24bd008 	sub	sp, fp, #8
  1124a0:	e8bd8810 	pop	{r4, fp, pc}

001124a4 <lwip_read>:

int
lwip_read(int s, void *mem, size_t len)
{
  1124a4:	e92d4800 	push	{fp, lr}
  1124a8:	e28db004 	add	fp, sp, #4
  1124ac:	e24dd018 	sub	sp, sp, #24
  1124b0:	e50b0008 	str	r0, [fp, #-8]
  1124b4:	e50b100c 	str	r1, [fp, #-12]
  1124b8:	e50b2010 	str	r2, [fp, #-16]
  return lwip_recvfrom(s, mem, len, 0, NULL, NULL);
  1124bc:	e3a03000 	mov	r3, #0
  1124c0:	e58d3004 	str	r3, [sp, #4]
  1124c4:	e3a03000 	mov	r3, #0
  1124c8:	e58d3000 	str	r3, [sp]
  1124cc:	e3a03000 	mov	r3, #0
  1124d0:	e51b2010 	ldr	r2, [fp, #-16]
  1124d4:	e51b100c 	ldr	r1, [fp, #-12]
  1124d8:	e51b0008 	ldr	r0, [fp, #-8]
  1124dc:	ebfffe7c 	bl	111ed4 <lwip_recvfrom>
  1124e0:	e1a03000 	mov	r3, r0
}
  1124e4:	e1a00003 	mov	r0, r3
  1124e8:	e24bd004 	sub	sp, fp, #4
  1124ec:	e8bd8800 	pop	{fp, pc}

001124f0 <lwip_recv>:

int
lwip_recv(int s, void *mem, size_t len, int flags)
{
  1124f0:	e92d4800 	push	{fp, lr}
  1124f4:	e28db004 	add	fp, sp, #4
  1124f8:	e24dd018 	sub	sp, sp, #24
  1124fc:	e50b0008 	str	r0, [fp, #-8]
  112500:	e50b100c 	str	r1, [fp, #-12]
  112504:	e50b2010 	str	r2, [fp, #-16]
  112508:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  return lwip_recvfrom(s, mem, len, flags, NULL, NULL);
  11250c:	e3a03000 	mov	r3, #0
  112510:	e58d3004 	str	r3, [sp, #4]
  112514:	e3a03000 	mov	r3, #0
  112518:	e58d3000 	str	r3, [sp]
  11251c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112520:	e51b2010 	ldr	r2, [fp, #-16]
  112524:	e51b100c 	ldr	r1, [fp, #-12]
  112528:	e51b0008 	ldr	r0, [fp, #-8]
  11252c:	ebfffe68 	bl	111ed4 <lwip_recvfrom>
  112530:	e1a03000 	mov	r3, r0
}
  112534:	e1a00003 	mov	r0, r3
  112538:	e24bd004 	sub	sp, fp, #4
  11253c:	e8bd8800 	pop	{fp, pc}

00112540 <lwip_send>:

int
lwip_send(int s, const void *data, size_t size, int flags)
{
  112540:	e92d4800 	push	{fp, lr}
  112544:	e28db004 	add	fp, sp, #4
  112548:	e24dd028 	sub	sp, sp, #40	; 0x28
  11254c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  112550:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  112554:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  112558:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  size_t written;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%"SZT_F", flags=0x%x)\n",
                              s, data, size, flags));

  sock = get_socket(s);
  11255c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  112560:	ebfffae9 	bl	11110c <get_socket>
  112564:	e50b0008 	str	r0, [fp, #-8]
  if (!sock) {
  112568:	e51b3008 	ldr	r3, [fp, #-8]
  11256c:	e3530000 	cmp	r3, #0
  112570:	1a000001 	bne	11257c <lwip_send+0x3c>
    return -1;
  112574:	e3e03000 	mvn	r3, #0
  112578:	ea000041 	b	112684 <lwip_send+0x144>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
  11257c:	e51b3008 	ldr	r3, [fp, #-8]
  112580:	e5933000 	ldr	r3, [r3]
  112584:	e5933000 	ldr	r3, [r3]
  112588:	e20330f0 	and	r3, r3, #240	; 0xf0
  11258c:	e3530010 	cmp	r3, #16
  112590:	0a00000a 	beq	1125c0 <lwip_send+0x80>
#if (LWIP_UDP || LWIP_RAW)
    return lwip_sendto(s, data, size, flags, NULL, 0);
  112594:	e3a03000 	mov	r3, #0
  112598:	e58d3004 	str	r3, [sp, #4]
  11259c:	e3a03000 	mov	r3, #0
  1125a0:	e58d3000 	str	r3, [sp]
  1125a4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1125a8:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1125ac:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  1125b0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1125b4:	eb0001b1 	bl	112c80 <lwip_sendto>
  1125b8:	e1a03000 	mov	r3, r0
  1125bc:	ea000030 	b	112684 <lwip_send+0x144>
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = NETCONN_COPY |
    ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
  1125c0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1125c4:	e1a031c3 	asr	r3, r3, #3
  1125c8:	e6af3073 	sxtb	r3, r3
  1125cc:	e2033002 	and	r3, r3, #2
  1125d0:	e6af3073 	sxtb	r3, r3
  write_flags = NETCONN_COPY |
  1125d4:	e3833001 	orr	r3, r3, #1
  1125d8:	e6af2073 	sxtb	r2, r3
    ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0);
  1125dc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1125e0:	e1a030c3 	asr	r3, r3, #1
  1125e4:	e6af3073 	sxtb	r3, r3
  1125e8:	e2033004 	and	r3, r3, #4
  1125ec:	e6af3073 	sxtb	r3, r3
    ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
  1125f0:	e1823003 	orr	r3, r2, r3
  1125f4:	e6af3073 	sxtb	r3, r3
  write_flags = NETCONN_COPY |
  1125f8:	e54b3009 	strb	r3, [fp, #-9]
  written = 0;
  1125fc:	e3a03000 	mov	r3, #0
  112600:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
  112604:	e51b3008 	ldr	r3, [fp, #-8]
  112608:	e5930000 	ldr	r0, [r3]
  11260c:	e55b2009 	ldrb	r2, [fp, #-9]
  112610:	e24b3014 	sub	r3, fp, #20
  112614:	e58d3000 	str	r3, [sp]
  112618:	e1a03002 	mov	r3, r2
  11261c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  112620:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  112624:	ebffe6ce 	bl	10c164 <netconn_write_partly>
  112628:	e1a03000 	mov	r3, r0
  11262c:	e54b300a 	strb	r3, [fp, #-10]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d written=%"SZT_F"\n", s, err, written));
  sock_set_errno(sock, err_to_errno(err));
  112630:	e15b30da 	ldrsb	r3, [fp, #-10]
  112634:	e1a00003 	mov	r0, r3
  112638:	ebfff68b 	bl	11006c <err_to_errno>
  11263c:	e50b0010 	str	r0, [fp, #-16]
  112640:	e51b3010 	ldr	r3, [fp, #-16]
  112644:	e6ef2073 	uxtb	r2, r3
  112648:	e51b3008 	ldr	r3, [fp, #-8]
  11264c:	e5c32010 	strb	r2, [r3, #16]
  112650:	e51b3010 	ldr	r3, [fp, #-16]
  112654:	e3530000 	cmp	r3, #0
  112658:	0a000003 	beq	11266c <lwip_send+0x12c>
  11265c:	eb009a97 	bl	1390c0 <__errno_location>
  112660:	e1a02000 	mov	r2, r0
  112664:	e51b3010 	ldr	r3, [fp, #-16]
  112668:	e5823000 	str	r3, [r2]
  return (err == ERR_OK ? (int)written : -1);
  11266c:	e15b30da 	ldrsb	r3, [fp, #-10]
  112670:	e3530000 	cmp	r3, #0
  112674:	1a000001 	bne	112680 <lwip_send+0x140>
  112678:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11267c:	ea000000 	b	112684 <lwip_send+0x144>
  112680:	e3e03000 	mvn	r3, #0
}
  112684:	e1a00003 	mov	r0, r3
  112688:	e24bd004 	sub	sp, fp, #4
  11268c:	e8bd8800 	pop	{fp, pc}

00112690 <lwip_sendmsg>:

int
lwip_sendmsg(int s, const struct msghdr *msg, int flags)
{
  112690:	e92d4800 	push	{fp, lr}
  112694:	e28db004 	add	fp, sp, #4
  112698:	e24dd058 	sub	sp, sp, #88	; 0x58
  11269c:	e50b0048 	str	r0, [fp, #-72]	; 0xffffffb8
  1126a0:	e50b104c 	str	r1, [fp, #-76]	; 0xffffffb4
  1126a4:	e50b2050 	str	r2, [fp, #-80]	; 0xffffffb0
  int i;
#if LWIP_TCP
  u8_t write_flags;
  size_t written;
#endif
  int size = 0;
  1126a8:	e3a03000 	mov	r3, #0
  1126ac:	e50b300c 	str	r3, [fp, #-12]
  err_t err = ERR_OK;
  1126b0:	e3a03000 	mov	r3, #0
  1126b4:	e54b300d 	strb	r3, [fp, #-13]

  sock = get_socket(s);
  1126b8:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
  1126bc:	ebfffa92 	bl	11110c <get_socket>
  1126c0:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  if (!sock) {
  1126c4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1126c8:	e3530000 	cmp	r3, #0
  1126cc:	1a000001 	bne	1126d8 <lwip_sendmsg+0x48>
    return -1;
  1126d0:	e3e03000 	mvn	r3, #0
  1126d4:	ea000166 	b	112c74 <lwip_sendmsg+0x5e4>
  }

  LWIP_ERROR("lwip_sendmsg: invalid msghdr", msg != NULL,
  1126d8:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  1126dc:	e3530000 	cmp	r3, #0
  1126e0:	1a000016 	bne	112740 <lwip_sendmsg+0xb0>
  1126e4:	e3070030 	movw	r0, #28720	; 0x7030
  1126e8:	e3400014 	movt	r0, #20
  1126ec:	ebffc288 	bl	103114 <rt_kprintf>
  1126f0:	e30013eb 	movw	r1, #1003	; 0x3eb
  1126f4:	e3060f44 	movw	r0, #28484	; 0x6f44
  1126f8:	e3400014 	movt	r0, #20
  1126fc:	ebffe258 	bl	10b064 <sys_arch_assert>
  112700:	e3e0000f 	mvn	r0, #15
  112704:	ebfff658 	bl	11006c <err_to_errno>
  112708:	e50b003c 	str	r0, [fp, #-60]	; 0xffffffc4
  11270c:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  112710:	e6ef2073 	uxtb	r2, r3
  112714:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112718:	e5c32010 	strb	r2, [r3, #16]
  11271c:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  112720:	e3530000 	cmp	r3, #0
  112724:	0a000003 	beq	112738 <lwip_sendmsg+0xa8>
  112728:	eb009a64 	bl	1390c0 <__errno_location>
  11272c:	e1a02000 	mov	r2, r0
  112730:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  112734:	e5823000 	str	r3, [r2]
  112738:	e3e03000 	mvn	r3, #0
  11273c:	ea00014c 	b	112c74 <lwip_sendmsg+0x5e4>
             sock_set_errno(sock, err_to_errno(ERR_ARG)); return -1;);

  LWIP_UNUSED_ARG(msg->msg_control);
  LWIP_UNUSED_ARG(msg->msg_controllen);
  LWIP_UNUSED_ARG(msg->msg_flags);
  LWIP_ERROR("lwip_sendmsg: invalid msghdr iov", (msg->msg_iov != NULL && msg->msg_iovlen != 0),
  112740:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  112744:	e5933008 	ldr	r3, [r3, #8]
  112748:	e3530000 	cmp	r3, #0
  11274c:	0a000003 	beq	112760 <lwip_sendmsg+0xd0>
  112750:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  112754:	e593300c 	ldr	r3, [r3, #12]
  112758:	e3530000 	cmp	r3, #0
  11275c:	1a000016 	bne	1127bc <lwip_sendmsg+0x12c>
  112760:	e3070050 	movw	r0, #28752	; 0x7050
  112764:	e3400014 	movt	r0, #20
  112768:	ebffc269 	bl	103114 <rt_kprintf>
  11276c:	e30013f1 	movw	r1, #1009	; 0x3f1
  112770:	e3060f44 	movw	r0, #28484	; 0x6f44
  112774:	e3400014 	movt	r0, #20
  112778:	ebffe239 	bl	10b064 <sys_arch_assert>
  11277c:	e3e0000f 	mvn	r0, #15
  112780:	ebfff639 	bl	11006c <err_to_errno>
  112784:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
  112788:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  11278c:	e6ef2073 	uxtb	r2, r3
  112790:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112794:	e5c32010 	strb	r2, [r3, #16]
  112798:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  11279c:	e3530000 	cmp	r3, #0
  1127a0:	0a000003 	beq	1127b4 <lwip_sendmsg+0x124>
  1127a4:	eb009a45 	bl	1390c0 <__errno_location>
  1127a8:	e1a02000 	mov	r2, r0
  1127ac:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1127b0:	e5823000 	str	r3, [r2]
  1127b4:	e3e03000 	mvn	r3, #0
  1127b8:	ea00012d 	b	112c74 <lwip_sendmsg+0x5e4>
             sock_set_errno(sock, err_to_errno(ERR_ARG)); return -1;);

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
  1127bc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1127c0:	e5933000 	ldr	r3, [r3]
  1127c4:	e5933000 	ldr	r3, [r3]
  1127c8:	e20330f0 	and	r3, r3, #240	; 0xf0
  1127cc:	e3530010 	cmp	r3, #16
  1127d0:	1a000069 	bne	11297c <lwip_sendmsg+0x2ec>
#if LWIP_TCP
    write_flags = NETCONN_COPY |
    ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
  1127d4:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
  1127d8:	e1a031c3 	asr	r3, r3, #3
  1127dc:	e6af3073 	sxtb	r3, r3
  1127e0:	e2033002 	and	r3, r3, #2
  1127e4:	e6af3073 	sxtb	r3, r3
    write_flags = NETCONN_COPY |
  1127e8:	e3833001 	orr	r3, r3, #1
  1127ec:	e6af2073 	sxtb	r2, r3
    ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0);
  1127f0:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
  1127f4:	e1a030c3 	asr	r3, r3, #1
  1127f8:	e6af3073 	sxtb	r3, r3
  1127fc:	e2033004 	and	r3, r3, #4
  112800:	e6af3073 	sxtb	r3, r3
    ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
  112804:	e1823003 	orr	r3, r2, r3
  112808:	e6af3073 	sxtb	r3, r3
    write_flags = NETCONN_COPY |
  11280c:	e54b302d 	strb	r3, [fp, #-45]	; 0xffffffd3

    for (i = 0; i < msg->msg_iovlen; i++) {
  112810:	e3a03000 	mov	r3, #0
  112814:	e50b3008 	str	r3, [fp, #-8]
  112818:	ea000041 	b	112924 <lwip_sendmsg+0x294>
      u8_t apiflags = write_flags;
  11281c:	e55b302d 	ldrb	r3, [fp, #-45]	; 0xffffffd3
  112820:	e54b302e 	strb	r3, [fp, #-46]	; 0xffffffd2
      if (i + 1 < msg->msg_iovlen) {
  112824:	e51b3008 	ldr	r3, [fp, #-8]
  112828:	e2832001 	add	r2, r3, #1
  11282c:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  112830:	e593300c 	ldr	r3, [r3, #12]
  112834:	e1520003 	cmp	r2, r3
  112838:	aa000002 	bge	112848 <lwip_sendmsg+0x1b8>
        apiflags |= NETCONN_MORE;
  11283c:	e55b302e 	ldrb	r3, [fp, #-46]	; 0xffffffd2
  112840:	e3833002 	orr	r3, r3, #2
  112844:	e54b302e 	strb	r3, [fp, #-46]	; 0xffffffd2
      }
      written = 0;
  112848:	e3a03000 	mov	r3, #0
  11284c:	e50b3040 	str	r3, [fp, #-64]	; 0xffffffc0
      err = netconn_write_partly(sock->conn, msg->msg_iov[i].iov_base, msg->msg_iov[i].iov_len, write_flags, &written);
  112850:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112854:	e5930000 	ldr	r0, [r3]
  112858:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  11285c:	e5932008 	ldr	r2, [r3, #8]
  112860:	e51b3008 	ldr	r3, [fp, #-8]
  112864:	e1a03183 	lsl	r3, r3, #3
  112868:	e0823003 	add	r3, r2, r3
  11286c:	e5931000 	ldr	r1, [r3]
  112870:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  112874:	e5932008 	ldr	r2, [r3, #8]
  112878:	e51b3008 	ldr	r3, [fp, #-8]
  11287c:	e1a03183 	lsl	r3, r3, #3
  112880:	e0823003 	add	r3, r2, r3
  112884:	e5932004 	ldr	r2, [r3, #4]
  112888:	e55bc02d 	ldrb	ip, [fp, #-45]	; 0xffffffd3
  11288c:	e24b3040 	sub	r3, fp, #64	; 0x40
  112890:	e58d3000 	str	r3, [sp]
  112894:	e1a0300c 	mov	r3, ip
  112898:	ebffe631 	bl	10c164 <netconn_write_partly>
  11289c:	e1a03000 	mov	r3, r0
  1128a0:	e54b300d 	strb	r3, [fp, #-13]
      if (err == ERR_OK) {
  1128a4:	e15b30dd 	ldrsb	r3, [fp, #-13]
  1128a8:	e3530000 	cmp	r3, #0
  1128ac:	1a00000d 	bne	1128e8 <lwip_sendmsg+0x258>
        size += written;
  1128b0:	e51b200c 	ldr	r2, [fp, #-12]
  1128b4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1128b8:	e0823003 	add	r3, r2, r3
  1128bc:	e50b300c 	str	r3, [fp, #-12]
        /* check that the entire IO vector was accepected, if not return a partial write */
        if (written != msg->msg_iov[i].iov_len)
  1128c0:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  1128c4:	e5932008 	ldr	r2, [r3, #8]
  1128c8:	e51b3008 	ldr	r3, [fp, #-8]
  1128cc:	e1a03183 	lsl	r3, r3, #3
  1128d0:	e0823003 	add	r3, r2, r3
  1128d4:	e5932004 	ldr	r2, [r3, #4]
  1128d8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1128dc:	e1520003 	cmp	r2, r3
  1128e0:	0a00000c 	beq	112918 <lwip_sendmsg+0x288>
          break;
  1128e4:	ea000013 	b	112938 <lwip_sendmsg+0x2a8>
      }
      /* none of this IO vector was accepted, but previous was, return partial write and conceal ERR_WOULDBLOCK */
      else if (err == ERR_WOULDBLOCK && size > 0) {
  1128e8:	e15b30dd 	ldrsb	r3, [fp, #-13]
  1128ec:	e3730007 	cmn	r3, #7
  1128f0:	1a000005 	bne	11290c <lwip_sendmsg+0x27c>
  1128f4:	e51b300c 	ldr	r3, [fp, #-12]
  1128f8:	e3530000 	cmp	r3, #0
  1128fc:	da000002 	ble	11290c <lwip_sendmsg+0x27c>
        err = ERR_OK;
  112900:	e3a03000 	mov	r3, #0
  112904:	e54b300d 	strb	r3, [fp, #-13]
        /* let ERR_WOULDBLOCK persist on the netconn since we are returning ERR_OK */
        break;
  112908:	ea00000a 	b	112938 <lwip_sendmsg+0x2a8>
      } else {
        size = -1;
  11290c:	e3e03000 	mvn	r3, #0
  112910:	e50b300c 	str	r3, [fp, #-12]
        break;
  112914:	ea000007 	b	112938 <lwip_sendmsg+0x2a8>
    for (i = 0; i < msg->msg_iovlen; i++) {
  112918:	e51b3008 	ldr	r3, [fp, #-8]
  11291c:	e2833001 	add	r3, r3, #1
  112920:	e50b3008 	str	r3, [fp, #-8]
  112924:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  112928:	e593300c 	ldr	r3, [r3, #12]
  11292c:	e51b2008 	ldr	r2, [fp, #-8]
  112930:	e1520003 	cmp	r2, r3
  112934:	baffffb8 	blt	11281c <lwip_sendmsg+0x18c>
      }
    }
    sock_set_errno(sock, err_to_errno(err));
  112938:	e15b30dd 	ldrsb	r3, [fp, #-13]
  11293c:	e1a00003 	mov	r0, r3
  112940:	ebfff5c9 	bl	11006c <err_to_errno>
  112944:	e50b0034 	str	r0, [fp, #-52]	; 0xffffffcc
  112948:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  11294c:	e6ef2073 	uxtb	r2, r3
  112950:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112954:	e5c32010 	strb	r2, [r3, #16]
  112958:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  11295c:	e3530000 	cmp	r3, #0
  112960:	0a000003 	beq	112974 <lwip_sendmsg+0x2e4>
  112964:	eb0099d5 	bl	1390c0 <__errno_location>
  112968:	e1a02000 	mov	r2, r0
  11296c:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  112970:	e5823000 	str	r3, [r2]
    return size;
  112974:	e51b300c 	ldr	r3, [fp, #-12]
  112978:	ea0000bd 	b	112c74 <lwip_sendmsg+0x5e4>
#if LWIP_UDP || LWIP_RAW
  {
    struct netbuf *chain_buf;

    LWIP_UNUSED_ARG(flags);
    LWIP_ERROR("lwip_sendmsg: invalid msghdr name", (((msg->msg_name == NULL) && (msg->msg_namelen == 0)) ||
  11297c:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  112980:	e5933000 	ldr	r3, [r3]
  112984:	e3530000 	cmp	r3, #0
  112988:	1a000003 	bne	11299c <lwip_sendmsg+0x30c>
  11298c:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  112990:	e5933004 	ldr	r3, [r3, #4]
  112994:	e3530000 	cmp	r3, #0
  112998:	0a00001a 	beq	112a08 <lwip_sendmsg+0x378>
  11299c:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  1129a0:	e5933004 	ldr	r3, [r3, #4]
  1129a4:	e3530010 	cmp	r3, #16
  1129a8:	0a000016 	beq	112a08 <lwip_sendmsg+0x378>
  1129ac:	e3070074 	movw	r0, #28788	; 0x7074
  1129b0:	e3400014 	movt	r0, #20
  1129b4:	ebffc1d6 	bl	103114 <rt_kprintf>
  1129b8:	e300141f 	movw	r1, #1055	; 0x41f
  1129bc:	e3060f44 	movw	r0, #28484	; 0x6f44
  1129c0:	e3400014 	movt	r0, #20
  1129c4:	ebffe1a6 	bl	10b064 <sys_arch_assert>
  1129c8:	e3e0000f 	mvn	r0, #15
  1129cc:	ebfff5a6 	bl	11006c <err_to_errno>
  1129d0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1129d4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1129d8:	e6ef2073 	uxtb	r2, r3
  1129dc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1129e0:	e5c32010 	strb	r2, [r3, #16]
  1129e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1129e8:	e3530000 	cmp	r3, #0
  1129ec:	0a000003 	beq	112a00 <lwip_sendmsg+0x370>
  1129f0:	eb0099b2 	bl	1390c0 <__errno_location>
  1129f4:	e1a02000 	mov	r2, r0
  1129f8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1129fc:	e5823000 	str	r3, [r2]
  112a00:	e3e03000 	mvn	r3, #0
  112a04:	ea00009a 	b	112c74 <lwip_sendmsg+0x5e4>
               IS_SOCK_ADDR_LEN_VALID(msg->msg_namelen)) ,
               sock_set_errno(sock, err_to_errno(ERR_ARG)); return -1;);

    /* initialize chain buffer with destination */
    chain_buf = netbuf_new();
  112a08:	ebfff5ae 	bl	1100c8 <netbuf_new>
  112a0c:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
    if (!chain_buf) {
  112a10:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  112a14:	e3530000 	cmp	r3, #0
  112a18:	1a00000f 	bne	112a5c <lwip_sendmsg+0x3cc>
      sock_set_errno(sock, err_to_errno(ERR_MEM));
  112a1c:	e3e00000 	mvn	r0, #0
  112a20:	ebfff591 	bl	11006c <err_to_errno>
  112a24:	e50b002c 	str	r0, [fp, #-44]	; 0xffffffd4
  112a28:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  112a2c:	e6ef2073 	uxtb	r2, r3
  112a30:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112a34:	e5c32010 	strb	r2, [r3, #16]
  112a38:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  112a3c:	e3530000 	cmp	r3, #0
  112a40:	0a000003 	beq	112a54 <lwip_sendmsg+0x3c4>
  112a44:	eb00999d 	bl	1390c0 <__errno_location>
  112a48:	e1a02000 	mov	r2, r0
  112a4c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  112a50:	e5823000 	str	r3, [r2]
      return -1;
  112a54:	e3e03000 	mvn	r3, #0
  112a58:	ea000085 	b	112c74 <lwip_sendmsg+0x5e4>
    }
    if (msg->msg_name) {
  112a5c:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  112a60:	e5933000 	ldr	r3, [r3]
  112a64:	e3530000 	cmp	r3, #0
  112a68:	0a00000e 	beq	112aa8 <lwip_sendmsg+0x418>
      u16_t remote_port;
      SOCKADDR_TO_IPADDR_PORT((const struct sockaddr *)msg->msg_name, &chain_buf->addr, remote_port);
  112a6c:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  112a70:	e5933000 	ldr	r3, [r3]
  112a74:	e5932004 	ldr	r2, [r3, #4]
  112a78:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  112a7c:	e5832008 	str	r2, [r3, #8]
  112a80:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  112a84:	e5933000 	ldr	r3, [r3]
  112a88:	e1d330b2 	ldrh	r3, [r3, #2]
  112a8c:	e1a00003 	mov	r0, r3
  112a90:	eb000f4a 	bl	1167c0 <lwip_htons>
  112a94:	e1a03000 	mov	r3, r0
  112a98:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
      netbuf_fromport(chain_buf) = remote_port;
  112a9c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  112aa0:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
  112aa4:	e1c320bc 	strh	r2, [r3, #12]
      err = ERR_OK;
    }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
    /* create a chained netbuf from the IO vectors. NOTE: we assemble a pbuf chain
       manually to avoid having to allocate, chain, and delete a netbuf for each iov */
    for (i = 0; i < msg->msg_iovlen; i++) {
  112aa8:	e3a03000 	mov	r3, #0
  112aac:	e50b3008 	str	r3, [fp, #-8]
  112ab0:	ea000042 	b	112bc0 <lwip_sendmsg+0x530>
      struct pbuf *p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
  112ab4:	e3a02002 	mov	r2, #2
  112ab8:	e3a01000 	mov	r1, #0
  112abc:	e3a00000 	mov	r0, #0
  112ac0:	eb001e6e 	bl	11a480 <pbuf_alloc>
  112ac4:	e50b0024 	str	r0, [fp, #-36]	; 0xffffffdc
      if (p == NULL) {
  112ac8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  112acc:	e3530000 	cmp	r3, #0
  112ad0:	1a000002 	bne	112ae0 <lwip_sendmsg+0x450>
        err = ERR_MEM; /* let netbuf_delete() cleanup chain_buf */
  112ad4:	e3e03000 	mvn	r3, #0
  112ad8:	e54b300d 	strb	r3, [fp, #-13]
        break;
  112adc:	ea00003c 	b	112bd4 <lwip_sendmsg+0x544>
      }
      p->payload = msg->msg_iov[i].iov_base;
  112ae0:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  112ae4:	e5932008 	ldr	r2, [r3, #8]
  112ae8:	e51b3008 	ldr	r3, [fp, #-8]
  112aec:	e1a03183 	lsl	r3, r3, #3
  112af0:	e0823003 	add	r3, r2, r3
  112af4:	e5932000 	ldr	r2, [r3]
  112af8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  112afc:	e5832004 	str	r2, [r3, #4]
      LWIP_ASSERT("iov_len < u16_t", msg->msg_iov[i].iov_len <= 0xFFFF);
  112b00:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  112b04:	e5932008 	ldr	r2, [r3, #8]
  112b08:	e51b3008 	ldr	r3, [fp, #-8]
  112b0c:	e1a03183 	lsl	r3, r3, #3
  112b10:	e0823003 	add	r3, r2, r3
  112b14:	e5933004 	ldr	r3, [r3, #4]
  112b18:	e3530801 	cmp	r3, #65536	; 0x10000
  112b1c:	3a000006 	bcc	112b3c <lwip_sendmsg+0x4ac>
  112b20:	e3070098 	movw	r0, #28824	; 0x7098
  112b24:	e3400014 	movt	r0, #20
  112b28:	ebffc179 	bl	103114 <rt_kprintf>
  112b2c:	e300144d 	movw	r1, #1101	; 0x44d
  112b30:	e3060f44 	movw	r0, #28484	; 0x6f44
  112b34:	e3400014 	movt	r0, #20
  112b38:	ebffe149 	bl	10b064 <sys_arch_assert>
      p->len = p->tot_len = (u16_t)msg->msg_iov[i].iov_len;
  112b3c:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  112b40:	e5932008 	ldr	r2, [r3, #8]
  112b44:	e51b3008 	ldr	r3, [fp, #-8]
  112b48:	e1a03183 	lsl	r3, r3, #3
  112b4c:	e0823003 	add	r3, r2, r3
  112b50:	e5933004 	ldr	r3, [r3, #4]
  112b54:	e6ff2073 	uxth	r2, r3
  112b58:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  112b5c:	e1c320b8 	strh	r2, [r3, #8]
  112b60:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  112b64:	e1d320b8 	ldrh	r2, [r3, #8]
  112b68:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  112b6c:	e1c320ba 	strh	r2, [r3, #10]
      /* netbuf empty, add new pbuf */
      if (chain_buf->p == NULL) {
  112b70:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  112b74:	e5933000 	ldr	r3, [r3]
  112b78:	e3530000 	cmp	r3, #0
  112b7c:	1a000007 	bne	112ba0 <lwip_sendmsg+0x510>
        chain_buf->p = chain_buf->ptr = p;
  112b80:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  112b84:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  112b88:	e5832004 	str	r2, [r3, #4]
  112b8c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  112b90:	e5932004 	ldr	r2, [r3, #4]
  112b94:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  112b98:	e5832000 	str	r2, [r3]
  112b9c:	ea000004 	b	112bb4 <lwip_sendmsg+0x524>
        /* add pbuf to existing pbuf chain */
      } else {
        pbuf_cat(chain_buf->p, p);
  112ba0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  112ba4:	e5933000 	ldr	r3, [r3]
  112ba8:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  112bac:	e1a00003 	mov	r0, r3
  112bb0:	eb0021f0 	bl	11b378 <pbuf_cat>
    for (i = 0; i < msg->msg_iovlen; i++) {
  112bb4:	e51b3008 	ldr	r3, [fp, #-8]
  112bb8:	e2833001 	add	r3, r3, #1
  112bbc:	e50b3008 	str	r3, [fp, #-8]
  112bc0:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  112bc4:	e593300c 	ldr	r3, [r3, #12]
  112bc8:	e51b2008 	ldr	r2, [fp, #-8]
  112bcc:	e1520003 	cmp	r2, r3
  112bd0:	baffffb7 	blt	112ab4 <lwip_sendmsg+0x424>
      }
    }
    /* save size of total chain */
    if (err == ERR_OK) {
  112bd4:	e15b30dd 	ldrsb	r3, [fp, #-13]
  112bd8:	e3530000 	cmp	r3, #0
  112bdc:	1a000003 	bne	112bf0 <lwip_sendmsg+0x560>
      size = netbuf_len(chain_buf);
  112be0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  112be4:	e5933000 	ldr	r3, [r3]
  112be8:	e1d330b8 	ldrh	r3, [r3, #8]
  112bec:	e50b300c 	str	r3, [fp, #-12]
    }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    if (err == ERR_OK) {
  112bf0:	e15b30dd 	ldrsb	r3, [fp, #-13]
  112bf4:	e3530000 	cmp	r3, #0
  112bf8:	1a000006 	bne	112c18 <lwip_sendmsg+0x588>
        IP_SET_TYPE_VAL(chain_buf->addr, IPADDR_TYPE_V4);
      }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

      /* send the data */
      err = netconn_send(sock->conn, chain_buf);
  112bfc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112c00:	e5933000 	ldr	r3, [r3]
  112c04:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  112c08:	e1a00003 	mov	r0, r3
  112c0c:	ebffe534 	bl	10c0e4 <netconn_send>
  112c10:	e1a03000 	mov	r3, r0
  112c14:	e54b300d 	strb	r3, [fp, #-13]
    }

    /* deallocated the buffer */
    netbuf_delete(chain_buf);
  112c18:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  112c1c:	ebfff53d 	bl	110118 <netbuf_delete>

    sock_set_errno(sock, err_to_errno(err));
  112c20:	e15b30dd 	ldrsb	r3, [fp, #-13]
  112c24:	e1a00003 	mov	r0, r3
  112c28:	ebfff50f 	bl	11006c <err_to_errno>
  112c2c:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  112c30:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  112c34:	e6ef2073 	uxtb	r2, r3
  112c38:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112c3c:	e5c32010 	strb	r2, [r3, #16]
  112c40:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  112c44:	e3530000 	cmp	r3, #0
  112c48:	0a000003 	beq	112c5c <lwip_sendmsg+0x5cc>
  112c4c:	eb00991b 	bl	1390c0 <__errno_location>
  112c50:	e1a02000 	mov	r2, r0
  112c54:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  112c58:	e5823000 	str	r3, [r2]
    return (err == ERR_OK ? size : -1);
  112c5c:	e15b30dd 	ldrsb	r3, [fp, #-13]
  112c60:	e3530000 	cmp	r3, #0
  112c64:	1a000001 	bne	112c70 <lwip_sendmsg+0x5e0>
  112c68:	e51b300c 	ldr	r3, [fp, #-12]
  112c6c:	ea000000 	b	112c74 <lwip_sendmsg+0x5e4>
  112c70:	e3e03000 	mvn	r3, #0
  }
#else /* LWIP_UDP || LWIP_RAW */
  sock_set_errno(sock, err_to_errno(ERR_ARG));
  return -1;
#endif /* LWIP_UDP || LWIP_RAW */
}
  112c74:	e1a00003 	mov	r0, r3
  112c78:	e24bd004 	sub	sp, fp, #4
  112c7c:	e8bd8800 	pop	{fp, pc}

00112c80 <lwip_sendto>:

int
lwip_sendto(int s, const void *data, size_t size, int flags,
       const struct sockaddr *to, socklen_t tolen)
{
  112c80:	e92d4800 	push	{fp, lr}
  112c84:	e28db004 	add	fp, sp, #4
  112c88:	e24dd038 	sub	sp, sp, #56	; 0x38
  112c8c:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  112c90:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
  112c94:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
  112c98:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  struct lwip_sock *sock;
  err_t err;
  u16_t short_size;
  u16_t remote_port;
  struct netbuf buf;
  sock = get_socket(s);
  112c9c:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  112ca0:	ebfff919 	bl	11110c <get_socket>
  112ca4:	e50b000c 	str	r0, [fp, #-12]
  if (!sock) {
  112ca8:	e51b300c 	ldr	r3, [fp, #-12]
  112cac:	e3530000 	cmp	r3, #0
  112cb0:	1a000001 	bne	112cbc <lwip_sendto+0x3c>
    return -1;
  112cb4:	e3e03000 	mvn	r3, #0
  112cb8:	ea000081 	b	112ec4 <lwip_sendto+0x244>
  }
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
  112cbc:	e51b300c 	ldr	r3, [fp, #-12]
  112cc0:	e5933000 	ldr	r3, [r3]
  112cc4:	e5933000 	ldr	r3, [r3]
  112cc8:	e20330f0 	and	r3, r3, #240	; 0xf0
  112ccc:	e3530010 	cmp	r3, #16
  112cd0:	1a000006 	bne	112cf0 <lwip_sendto+0x70>
#if LWIP_TCP
    return lwip_send(s, data, size, flags);
  112cd4:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  112cd8:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
  112cdc:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  112ce0:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  112ce4:	ebfffe15 	bl	112540 <lwip_send>
  112ce8:	e1a03000 	mov	r3, r0
  112cec:	ea000074 	b	112ec4 <lwip_sendto+0x244>
    return -1;
#endif /* LWIP_TCP */
  }

  /* @todo: split into multiple sendto's? */
  LWIP_ASSERT("lwip_sendto: size must fit in u16_t", size <= 0xffff);
  112cf0:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  112cf4:	e3530801 	cmp	r3, #65536	; 0x10000
  112cf8:	3a000006 	bcc	112d18 <lwip_sendto+0x98>
  112cfc:	e30700a8 	movw	r0, #28840	; 0x70a8
  112d00:	e3400014 	movt	r0, #20
  112d04:	ebffc102 	bl	103114 <rt_kprintf>
  112d08:	e300148e 	movw	r1, #1166	; 0x48e
  112d0c:	e3060f44 	movw	r0, #28484	; 0x6f44
  112d10:	e3400014 	movt	r0, #20
  112d14:	ebffe0d2 	bl	10b064 <sys_arch_assert>
  short_size = (u16_t)size;
  112d18:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  112d1c:	e14b30be 	strh	r3, [fp, #-14]
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
  112d20:	e59b3004 	ldr	r3, [fp, #4]
  112d24:	e3530000 	cmp	r3, #0
  112d28:	1a000002 	bne	112d38 <lwip_sendto+0xb8>
  112d2c:	e59b3008 	ldr	r3, [fp, #8]
  112d30:	e3530000 	cmp	r3, #0
  112d34:	0a000021 	beq	112dc0 <lwip_sendto+0x140>
  112d38:	e59b3008 	ldr	r3, [fp, #8]
  112d3c:	e3530010 	cmp	r3, #16
  112d40:	1a000007 	bne	112d64 <lwip_sendto+0xe4>
  112d44:	e59b3004 	ldr	r3, [fp, #4]
  112d48:	e5d33001 	ldrb	r3, [r3, #1]
  112d4c:	e3530002 	cmp	r3, #2
  112d50:	1a000003 	bne	112d64 <lwip_sendto+0xe4>
  112d54:	e59b3004 	ldr	r3, [fp, #4]
  112d58:	e2033003 	and	r3, r3, #3
  112d5c:	e3530000 	cmp	r3, #0
  112d60:	0a000016 	beq	112dc0 <lwip_sendto+0x140>
  112d64:	e30700cc 	movw	r0, #28876	; 0x70cc
  112d68:	e3400014 	movt	r0, #20
  112d6c:	ebffc0e8 	bl	103114 <rt_kprintf>
  112d70:	e3001493 	movw	r1, #1171	; 0x493
  112d74:	e3060f44 	movw	r0, #28484	; 0x6f44
  112d78:	e3400014 	movt	r0, #20
  112d7c:	ebffe0b8 	bl	10b064 <sys_arch_assert>
  112d80:	e3e0000f 	mvn	r0, #15
  112d84:	ebfff4b8 	bl	11006c <err_to_errno>
  112d88:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  112d8c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112d90:	e6ef2073 	uxtb	r2, r3
  112d94:	e51b300c 	ldr	r3, [fp, #-12]
  112d98:	e5c32010 	strb	r2, [r3, #16]
  112d9c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112da0:	e3530000 	cmp	r3, #0
  112da4:	0a000003 	beq	112db8 <lwip_sendto+0x138>
  112da8:	eb0098c4 	bl	1390c0 <__errno_location>
  112dac:	e1a02000 	mov	r2, r0
  112db0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112db4:	e5823000 	str	r3, [r2]
  112db8:	e3e03000 	mvn	r3, #0
  112dbc:	ea000040 	b	112ec4 <lwip_sendto+0x244>
             IS_SOCK_ADDR_TYPE_VALID(to) && IS_SOCK_ADDR_ALIGNED(to))),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); return -1;);
  LWIP_UNUSED_ARG(tolen);

  /* initialize a buffer */
  buf.p = buf.ptr = NULL;
  112dc0:	e3a03000 	mov	r3, #0
  112dc4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  112dc8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  112dcc:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
#if LWIP_CHECKSUM_ON_COPY
  buf.flags = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
  if (to) {
  112dd0:	e59b3004 	ldr	r3, [fp, #4]
  112dd4:	e3530000 	cmp	r3, #0
  112dd8:	0a000009 	beq	112e04 <lwip_sendto+0x184>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
  112ddc:	e59b3004 	ldr	r3, [fp, #4]
  112de0:	e5933004 	ldr	r3, [r3, #4]
  112de4:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  112de8:	e59b3004 	ldr	r3, [fp, #4]
  112dec:	e1d330b2 	ldrh	r3, [r3, #2]
  112df0:	e1a00003 	mov	r0, r3
  112df4:	eb000e71 	bl	1167c0 <lwip_htons>
  112df8:	e1a03000 	mov	r3, r0
  112dfc:	e14b30b8 	strh	r3, [fp, #-8]
  112e00:	ea000003 	b	112e14 <lwip_sendto+0x194>
  } else {
    remote_port = 0;
  112e04:	e3a03000 	mov	r3, #0
  112e08:	e14b30b8 	strh	r3, [fp, #-8]
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
  112e0c:	e3a03000 	mov	r3, #0
  112e10:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  }
  netbuf_fromport(&buf) = remote_port;
  112e14:	e15b30b8 	ldrh	r3, [fp, #-8]
  112e18:	e14b31bc 	strh	r3, [fp, #-28]	; 0xffffffe4
      MEMCPY(buf.p->payload, data, short_size);
    }
    err = ERR_OK;
  }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  err = netbuf_ref(&buf, data, short_size);
  112e1c:	e15b20be 	ldrh	r2, [fp, #-14]
  112e20:	e24b3028 	sub	r3, fp, #40	; 0x28
  112e24:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  112e28:	e1a00003 	mov	r0, r3
  112e2c:	ebfff534 	bl	110304 <netbuf_ref>
  112e30:	e1a03000 	mov	r3, r0
  112e34:	e54b3005 	strb	r3, [fp, #-5]
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (err == ERR_OK) {
  112e38:	e15b30d5 	ldrsb	r3, [fp, #-5]
  112e3c:	e3530000 	cmp	r3, #0
  112e40:	1a000007 	bne	112e64 <lwip_sendto+0x1e4>
      IP_SET_TYPE_VAL(buf.addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    /* send the data */
    err = netconn_send(sock->conn, &buf);
  112e44:	e51b300c 	ldr	r3, [fp, #-12]
  112e48:	e5933000 	ldr	r3, [r3]
  112e4c:	e24b2028 	sub	r2, fp, #40	; 0x28
  112e50:	e1a01002 	mov	r1, r2
  112e54:	e1a00003 	mov	r0, r3
  112e58:	ebffe4a1 	bl	10c0e4 <netconn_send>
  112e5c:	e1a03000 	mov	r3, r0
  112e60:	e54b3005 	strb	r3, [fp, #-5]
  }

  /* deallocated the buffer */
  netbuf_free(&buf);
  112e64:	e24b3028 	sub	r3, fp, #40	; 0x28
  112e68:	e1a00003 	mov	r0, r3
  112e6c:	ebfff504 	bl	110284 <netbuf_free>

  sock_set_errno(sock, err_to_errno(err));
  112e70:	e15b30d5 	ldrsb	r3, [fp, #-5]
  112e74:	e1a00003 	mov	r0, r3
  112e78:	ebfff47b 	bl	11006c <err_to_errno>
  112e7c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  112e80:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  112e84:	e6ef2073 	uxtb	r2, r3
  112e88:	e51b300c 	ldr	r3, [fp, #-12]
  112e8c:	e5c32010 	strb	r2, [r3, #16]
  112e90:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  112e94:	e3530000 	cmp	r3, #0
  112e98:	0a000003 	beq	112eac <lwip_sendto+0x22c>
  112e9c:	eb009887 	bl	1390c0 <__errno_location>
  112ea0:	e1a02000 	mov	r2, r0
  112ea4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  112ea8:	e5823000 	str	r3, [r2]
  return (err == ERR_OK ? short_size : -1);
  112eac:	e15b30d5 	ldrsb	r3, [fp, #-5]
  112eb0:	e3530000 	cmp	r3, #0
  112eb4:	1a000001 	bne	112ec0 <lwip_sendto+0x240>
  112eb8:	e15b30be 	ldrh	r3, [fp, #-14]
  112ebc:	ea000000 	b	112ec4 <lwip_sendto+0x244>
  112ec0:	e3e03000 	mvn	r3, #0
}
  112ec4:	e1a00003 	mov	r0, r3
  112ec8:	e24bd004 	sub	sp, fp, #4
  112ecc:	e8bd8800 	pop	{fp, pc}

00112ed0 <lwip_socket>:

int
lwip_socket(int domain, int type, int protocol)
{
  112ed0:	e92d4800 	push	{fp, lr}
  112ed4:	e28db004 	add	fp, sp, #4
  112ed8:	e24dd018 	sub	sp, sp, #24
  112edc:	e50b0010 	str	r0, [fp, #-16]
  112ee0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  112ee4:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
  112ee8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  112eec:	e3530002 	cmp	r3, #2
  112ef0:	0a00000d 	beq	112f2c <lwip_socket+0x5c>
  112ef4:	e3530003 	cmp	r3, #3
  112ef8:	0a000002 	beq	112f08 <lwip_socket+0x38>
  112efc:	e3530001 	cmp	r3, #1
  112f00:	0a000016 	beq	112f60 <lwip_socket+0x90>
  112f04:	ea00001c 	b	112f7c <lwip_socket+0xac>
  case SOCK_RAW:
    conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
  112f08:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  112f0c:	e6ef3073 	uxtb	r3, r3
  112f10:	e3032b6c 	movw	r2, #15212	; 0x3b6c
  112f14:	e3402011 	movt	r2, #17
  112f18:	e1a01003 	mov	r1, r3
  112f1c:	e3a00040 	mov	r0, #64	; 0x40
  112f20:	ebffe15b 	bl	10b494 <netconn_new_with_proto_and_callback>
  112f24:	e50b0008 	str	r0, [fp, #-8]
                                               (u8_t)protocol, event_callback);
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                 domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
    break;
  112f28:	ea000019 	b	112f94 <lwip_socket+0xc4>
  case SOCK_DGRAM:
    conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
  112f2c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  112f30:	e3530088 	cmp	r3, #136	; 0x88
  112f34:	1a000001 	bne	112f40 <lwip_socket+0x70>
  112f38:	e3a03021 	mov	r3, #33	; 0x21
  112f3c:	ea000000 	b	112f44 <lwip_socket+0x74>
  112f40:	e3a03020 	mov	r3, #32
  112f44:	e3032b6c 	movw	r2, #15212	; 0x3b6c
  112f48:	e3402011 	movt	r2, #17
  112f4c:	e3a01000 	mov	r1, #0
  112f50:	e1a00003 	mov	r0, r3
  112f54:	ebffe14e 	bl	10b494 <netconn_new_with_proto_and_callback>
  112f58:	e50b0008 	str	r0, [fp, #-8]
                 ((protocol == IPPROTO_UDPLITE) ? NETCONN_UDPLITE : NETCONN_UDP)) ,
                 event_callback);
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_DGRAM, %d) = ",
                                 domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
    break;
  112f5c:	ea00000c 	b	112f94 <lwip_socket+0xc4>
  case SOCK_STREAM:
    conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), event_callback);
  112f60:	e3032b6c 	movw	r2, #15212	; 0x3b6c
  112f64:	e3402011 	movt	r2, #17
  112f68:	e3a01000 	mov	r1, #0
  112f6c:	e3a00010 	mov	r0, #16
  112f70:	ebffe147 	bl	10b494 <netconn_new_with_proto_and_callback>
  112f74:	e50b0008 	str	r0, [fp, #-8]
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                 domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
    break;
  112f78:	ea000005 	b	112f94 <lwip_socket+0xc4>
  default:
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                 domain, type, protocol));
    set_errno(EINVAL);
  112f7c:	eb00984f 	bl	1390c0 <__errno_location>
  112f80:	e1a02000 	mov	r2, r0
  112f84:	e3a03016 	mov	r3, #22
  112f88:	e5823000 	str	r3, [r2]
    return -1;
  112f8c:	e3e03000 	mvn	r3, #0
  112f90:	ea00001b 	b	113004 <lwip_socket+0x134>
  }

  if (!conn) {
  112f94:	e51b3008 	ldr	r3, [fp, #-8]
  112f98:	e3530000 	cmp	r3, #0
  112f9c:	1a000005 	bne	112fb8 <lwip_socket+0xe8>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
  112fa0:	eb009846 	bl	1390c0 <__errno_location>
  112fa4:	e1a02000 	mov	r2, r0
  112fa8:	e3a03069 	mov	r3, #105	; 0x69
  112fac:	e5823000 	str	r3, [r2]
    return -1;
  112fb0:	e3e03000 	mvn	r3, #0
  112fb4:	ea000012 	b	113004 <lwip_socket+0x134>
  }

  i = alloc_socket(conn, 0);
  112fb8:	e3a01000 	mov	r1, #0
  112fbc:	e51b0008 	ldr	r0, [fp, #-8]
  112fc0:	ebfff8a1 	bl	11124c <alloc_socket>
  112fc4:	e50b000c 	str	r0, [fp, #-12]

  if (i == -1) {
  112fc8:	e51b300c 	ldr	r3, [fp, #-12]
  112fcc:	e3730001 	cmn	r3, #1
  112fd0:	1a000007 	bne	112ff4 <lwip_socket+0x124>
    netconn_delete(conn);
  112fd4:	e51b0008 	ldr	r0, [fp, #-8]
  112fd8:	ebffe18f 	bl	10b61c <netconn_delete>
    set_errno(ENFILE);
  112fdc:	eb009837 	bl	1390c0 <__errno_location>
  112fe0:	e1a02000 	mov	r2, r0
  112fe4:	e3a03017 	mov	r3, #23
  112fe8:	e5823000 	str	r3, [r2]
    return -1;
  112fec:	e3e03000 	mvn	r3, #0
  112ff0:	ea000003 	b	113004 <lwip_socket+0x134>
  }
  conn->socket = i;
  112ff4:	e51b3008 	ldr	r3, [fp, #-8]
  112ff8:	e51b200c 	ldr	r2, [fp, #-12]
  112ffc:	e583201c 	str	r2, [r3, #28]
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
  113000:	e51b300c 	ldr	r3, [fp, #-12]
}
  113004:	e1a00003 	mov	r0, r3
  113008:	e24bd004 	sub	sp, fp, #4
  11300c:	e8bd8800 	pop	{fp, pc}

00113010 <lwip_write>:

int
lwip_write(int s, const void *data, size_t size)
{
  113010:	e92d4800 	push	{fp, lr}
  113014:	e28db004 	add	fp, sp, #4
  113018:	e24dd010 	sub	sp, sp, #16
  11301c:	e50b0008 	str	r0, [fp, #-8]
  113020:	e50b100c 	str	r1, [fp, #-12]
  113024:	e50b2010 	str	r2, [fp, #-16]
  return lwip_send(s, data, size, 0);
  113028:	e3a03000 	mov	r3, #0
  11302c:	e51b2010 	ldr	r2, [fp, #-16]
  113030:	e51b100c 	ldr	r1, [fp, #-12]
  113034:	e51b0008 	ldr	r0, [fp, #-8]
  113038:	ebfffd40 	bl	112540 <lwip_send>
  11303c:	e1a03000 	mov	r3, r0
}
  113040:	e1a00003 	mov	r0, r3
  113044:	e24bd004 	sub	sp, fp, #4
  113048:	e8bd8800 	pop	{fp, pc}

0011304c <lwip_writev>:

int
lwip_writev(int s, const struct iovec *iov, int iovcnt)
{
  11304c:	e92d4800 	push	{fp, lr}
  113050:	e28db004 	add	fp, sp, #4
  113054:	e24dd030 	sub	sp, sp, #48	; 0x30
  113058:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  11305c:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  113060:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
  struct msghdr msg;

  msg.msg_name = NULL;
  113064:	e3a03000 	mov	r3, #0
  113068:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  msg.msg_namelen = 0;
  11306c:	e3a03000 	mov	r3, #0
  113070:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  /* Hack: we have to cast via number to cast from 'const' pointer to non-const.
     Blame the opengroup standard for this inconsistency. */
  msg.msg_iov = LWIP_CONST_CAST(struct iovec *, iov);
  113074:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  113078:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  msg.msg_iovlen = iovcnt;
  11307c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  113080:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  msg.msg_control = NULL;
  113084:	e3a03000 	mov	r3, #0
  113088:	e50b3010 	str	r3, [fp, #-16]
  msg.msg_controllen = 0;
  11308c:	e3a03000 	mov	r3, #0
  113090:	e50b300c 	str	r3, [fp, #-12]
  msg.msg_flags = 0;
  113094:	e3a03000 	mov	r3, #0
  113098:	e50b3008 	str	r3, [fp, #-8]
  return lwip_sendmsg(s, &msg, 0);
  11309c:	e24b3020 	sub	r3, fp, #32
  1130a0:	e3a02000 	mov	r2, #0
  1130a4:	e1a01003 	mov	r1, r3
  1130a8:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  1130ac:	ebfffd77 	bl	112690 <lwip_sendmsg>
  1130b0:	e1a03000 	mov	r3, r0
}
  1130b4:	e1a00003 	mov	r0, r3
  1130b8:	e24bd004 	sub	sp, fp, #4
  1130bc:	e8bd8800 	pop	{fp, pc}

001130c0 <lwip_selscan>:
 * @return number of sockets that had events (read/write/exception) (>= 0)
 */
static int
lwip_selscan(int maxfdp1, fd_set *readset_in, fd_set *writeset_in, fd_set *exceptset_in,
             fd_set *readset_out, fd_set *writeset_out, fd_set *exceptset_out)
{
  1130c0:	e92d4800 	push	{fp, lr}
  1130c4:	e28db004 	add	fp, sp, #4
  1130c8:	e24ddd07 	sub	sp, sp, #448	; 0x1c0
  1130cc:	e50b01b8 	str	r0, [fp, #-440]	; 0xfffffe48
  1130d0:	e50b11bc 	str	r1, [fp, #-444]	; 0xfffffe44
  1130d4:	e50b21c0 	str	r2, [fp, #-448]	; 0xfffffe40
  1130d8:	e50b31c4 	str	r3, [fp, #-452]	; 0xfffffe3c
  int i, nready = 0;
  1130dc:	e3a03000 	mov	r3, #0
  1130e0:	e50b300c 	str	r3, [fp, #-12]
  fd_set lreadset, lwriteset, lexceptset;
  struct lwip_sock *sock;
  SYS_ARCH_DECL_PROTECT(lev);

  FD_ZERO(&lreadset);
  1130e4:	e24b30b4 	sub	r3, fp, #180	; 0xb4
  1130e8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  1130ec:	e3a03020 	mov	r3, #32
  1130f0:	e50b3010 	str	r3, [fp, #-16]
  1130f4:	ea000007 	b	113118 <lwip_selscan+0x58>
  1130f8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1130fc:	e2832004 	add	r2, r3, #4
  113100:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
  113104:	e3a02000 	mov	r2, #0
  113108:	e5832000 	str	r2, [r3]
  11310c:	e51b3010 	ldr	r3, [fp, #-16]
  113110:	e2433001 	sub	r3, r3, #1
  113114:	e50b3010 	str	r3, [fp, #-16]
  113118:	e51b3010 	ldr	r3, [fp, #-16]
  11311c:	e3530000 	cmp	r3, #0
  113120:	1afffff4 	bne	1130f8 <lwip_selscan+0x38>
  FD_ZERO(&lwriteset);
  113124:	e24b3f4d 	sub	r3, fp, #308	; 0x134
  113128:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  11312c:	e3a03020 	mov	r3, #32
  113130:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  113134:	ea000007 	b	113158 <lwip_selscan+0x98>
  113138:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11313c:	e2832004 	add	r2, r3, #4
  113140:	e50b201c 	str	r2, [fp, #-28]	; 0xffffffe4
  113144:	e3a02000 	mov	r2, #0
  113148:	e5832000 	str	r2, [r3]
  11314c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113150:	e2433001 	sub	r3, r3, #1
  113154:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  113158:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11315c:	e3530000 	cmp	r3, #0
  113160:	1afffff4 	bne	113138 <lwip_selscan+0x78>
  FD_ZERO(&lexceptset);
  113164:	e24b3f6d 	sub	r3, fp, #436	; 0x1b4
  113168:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  11316c:	e3a03020 	mov	r3, #32
  113170:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  113174:	ea000007 	b	113198 <lwip_selscan+0xd8>
  113178:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11317c:	e2832004 	add	r2, r3, #4
  113180:	e50b2024 	str	r2, [fp, #-36]	; 0xffffffdc
  113184:	e3a02000 	mov	r2, #0
  113188:	e5832000 	str	r2, [r3]
  11318c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  113190:	e2433001 	sub	r3, r3, #1
  113194:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  113198:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11319c:	e3530000 	cmp	r3, #0
  1131a0:	1afffff4 	bne	113178 <lwip_selscan+0xb8>

  /* Go through each socket in each list to count number of sockets which
     currently match */
  for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
  1131a4:	e3a03000 	mov	r3, #0
  1131a8:	e50b3008 	str	r3, [fp, #-8]
  1131ac:	ea0000aa 	b	11345c <lwip_selscan+0x39c>
    /* if this FD is not in the set, continue */
    if (!(readset_in && FD_ISSET(i, readset_in)) &&
  1131b0:	e51b31bc 	ldr	r3, [fp, #-444]	; 0xfffffe44
  1131b4:	e3530000 	cmp	r3, #0
  1131b8:	0a000009 	beq	1131e4 <lwip_selscan+0x124>
  1131bc:	e51b3008 	ldr	r3, [fp, #-8]
  1131c0:	e1a022a3 	lsr	r2, r3, #5
  1131c4:	e51b31bc 	ldr	r3, [fp, #-444]	; 0xfffffe44
  1131c8:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  1131cc:	e51b3008 	ldr	r3, [fp, #-8]
  1131d0:	e203301f 	and	r3, r3, #31
  1131d4:	e1a03332 	lsr	r3, r2, r3
  1131d8:	e2033001 	and	r3, r3, #1
  1131dc:	e3530000 	cmp	r3, #0
  1131e0:	1a000019 	bne	11324c <lwip_selscan+0x18c>
  1131e4:	e51b31c0 	ldr	r3, [fp, #-448]	; 0xfffffe40
  1131e8:	e3530000 	cmp	r3, #0
  1131ec:	0a000009 	beq	113218 <lwip_selscan+0x158>
        !(writeset_in && FD_ISSET(i, writeset_in)) &&
  1131f0:	e51b3008 	ldr	r3, [fp, #-8]
  1131f4:	e1a022a3 	lsr	r2, r3, #5
  1131f8:	e51b31c0 	ldr	r3, [fp, #-448]	; 0xfffffe40
  1131fc:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  113200:	e51b3008 	ldr	r3, [fp, #-8]
  113204:	e203301f 	and	r3, r3, #31
  113208:	e1a03332 	lsr	r3, r2, r3
  11320c:	e2033001 	and	r3, r3, #1
  113210:	e3530000 	cmp	r3, #0
  113214:	1a00000c 	bne	11324c <lwip_selscan+0x18c>
  113218:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  11321c:	e3530000 	cmp	r3, #0
  113220:	0a000089 	beq	11344c <lwip_selscan+0x38c>
        !(exceptset_in && FD_ISSET(i, exceptset_in))) {
  113224:	e51b3008 	ldr	r3, [fp, #-8]
  113228:	e1a022a3 	lsr	r2, r3, #5
  11322c:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  113230:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  113234:	e51b3008 	ldr	r3, [fp, #-8]
  113238:	e203301f 	and	r3, r3, #31
  11323c:	e1a03332 	lsr	r3, r2, r3
  113240:	e2033001 	and	r3, r3, #1
  113244:	e3530000 	cmp	r3, #0
  113248:	0a00007f 	beq	11344c <lwip_selscan+0x38c>
      continue;
    }
    /* First get the socket's status (protected)... */
    SYS_ARCH_PROTECT(lev);
  11324c:	ebffbbfa 	bl	10223c <rt_enter_critical>
    sock = tryget_socket(i);
  113250:	e51b0008 	ldr	r0, [fp, #-8]
  113254:	ebfff7d1 	bl	1111a0 <tryget_socket>
  113258:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
    if (sock != NULL) {
  11325c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  113260:	e3530000 	cmp	r3, #0
  113264:	0a000076 	beq	113444 <lwip_selscan+0x384>
      void* lastdata = sock->lastdata;
  113268:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11326c:	e5933004 	ldr	r3, [r3, #4]
  113270:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
      s16_t rcvevent = sock->rcvevent;
  113274:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  113278:	e1d330ba 	ldrh	r3, [r3, #10]
  11327c:	e14b32be 	strh	r3, [fp, #-46]	; 0xffffffd2
      u16_t sendevent = sock->sendevent;
  113280:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  113284:	e1d330bc 	ldrh	r3, [r3, #12]
  113288:	e14b33b0 	strh	r3, [fp, #-48]	; 0xffffffd0
      u16_t errevent = sock->errevent;
  11328c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  113290:	e1d330be 	ldrh	r3, [r3, #14]
  113294:	e14b33b2 	strh	r3, [fp, #-50]	; 0xffffffce
      SYS_ARCH_UNPROTECT(lev);
  113298:	ebffbbed 	bl	102254 <rt_exit_critical>

      /* ... then examine it: */
      /* See if netconn of this socket is ready for read */
      if (readset_in && FD_ISSET(i, readset_in) && ((lastdata != NULL) || (rcvevent > 0))) {
  11329c:	e51b31bc 	ldr	r3, [fp, #-444]	; 0xfffffe44
  1132a0:	e3530000 	cmp	r3, #0
  1132a4:	0a000021 	beq	113330 <lwip_selscan+0x270>
  1132a8:	e51b3008 	ldr	r3, [fp, #-8]
  1132ac:	e1a022a3 	lsr	r2, r3, #5
  1132b0:	e51b31bc 	ldr	r3, [fp, #-444]	; 0xfffffe44
  1132b4:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  1132b8:	e51b3008 	ldr	r3, [fp, #-8]
  1132bc:	e203301f 	and	r3, r3, #31
  1132c0:	e1a03332 	lsr	r3, r2, r3
  1132c4:	e2033001 	and	r3, r3, #1
  1132c8:	e3530000 	cmp	r3, #0
  1132cc:	0a000017 	beq	113330 <lwip_selscan+0x270>
  1132d0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1132d4:	e3530000 	cmp	r3, #0
  1132d8:	1a000002 	bne	1132e8 <lwip_selscan+0x228>
  1132dc:	e15b32fe 	ldrsh	r3, [fp, #-46]	; 0xffffffd2
  1132e0:	e3530000 	cmp	r3, #0
  1132e4:	da000011 	ble	113330 <lwip_selscan+0x270>
        FD_SET(i, &lreadset);
  1132e8:	e51b3008 	ldr	r3, [fp, #-8]
  1132ec:	e1a022a3 	lsr	r2, r3, #5
  1132f0:	e1a03102 	lsl	r3, r2, #2
  1132f4:	e24b1004 	sub	r1, fp, #4
  1132f8:	e0813003 	add	r3, r1, r3
  1132fc:	e51310b0 	ldr	r1, [r3, #-176]	; 0xffffff50
  113300:	e51b3008 	ldr	r3, [fp, #-8]
  113304:	e203301f 	and	r3, r3, #31
  113308:	e3a00001 	mov	r0, #1
  11330c:	e1a03310 	lsl	r3, r0, r3
  113310:	e1811003 	orr	r1, r1, r3
  113314:	e1a03102 	lsl	r3, r2, #2
  113318:	e24b2004 	sub	r2, fp, #4
  11331c:	e0823003 	add	r3, r2, r3
  113320:	e50310b0 	str	r1, [r3, #-176]	; 0xffffff50
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for reading\n", i));
        nready++;
  113324:	e51b300c 	ldr	r3, [fp, #-12]
  113328:	e2833001 	add	r3, r3, #1
  11332c:	e50b300c 	str	r3, [fp, #-12]
      }
      /* See if netconn of this socket is ready for write */
      if (writeset_in && FD_ISSET(i, writeset_in) && (sendevent != 0)) {
  113330:	e51b31c0 	ldr	r3, [fp, #-448]	; 0xfffffe40
  113334:	e3530000 	cmp	r3, #0
  113338:	0a00001e 	beq	1133b8 <lwip_selscan+0x2f8>
  11333c:	e51b3008 	ldr	r3, [fp, #-8]
  113340:	e1a022a3 	lsr	r2, r3, #5
  113344:	e51b31c0 	ldr	r3, [fp, #-448]	; 0xfffffe40
  113348:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  11334c:	e51b3008 	ldr	r3, [fp, #-8]
  113350:	e203301f 	and	r3, r3, #31
  113354:	e1a03332 	lsr	r3, r2, r3
  113358:	e2033001 	and	r3, r3, #1
  11335c:	e3530000 	cmp	r3, #0
  113360:	0a000014 	beq	1133b8 <lwip_selscan+0x2f8>
  113364:	e15b33b0 	ldrh	r3, [fp, #-48]	; 0xffffffd0
  113368:	e3530000 	cmp	r3, #0
  11336c:	0a000011 	beq	1133b8 <lwip_selscan+0x2f8>
        FD_SET(i, &lwriteset);
  113370:	e51b3008 	ldr	r3, [fp, #-8]
  113374:	e1a022a3 	lsr	r2, r3, #5
  113378:	e1a03102 	lsl	r3, r2, #2
  11337c:	e24b1004 	sub	r1, fp, #4
  113380:	e0813003 	add	r3, r1, r3
  113384:	e5131130 	ldr	r1, [r3, #-304]	; 0xfffffed0
  113388:	e51b3008 	ldr	r3, [fp, #-8]
  11338c:	e203301f 	and	r3, r3, #31
  113390:	e3a00001 	mov	r0, #1
  113394:	e1a03310 	lsl	r3, r0, r3
  113398:	e1811003 	orr	r1, r1, r3
  11339c:	e1a03102 	lsl	r3, r2, #2
  1133a0:	e24b2004 	sub	r2, fp, #4
  1133a4:	e0823003 	add	r3, r2, r3
  1133a8:	e5031130 	str	r1, [r3, #-304]	; 0xfffffed0
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for writing\n", i));
        nready++;
  1133ac:	e51b300c 	ldr	r3, [fp, #-12]
  1133b0:	e2833001 	add	r3, r3, #1
  1133b4:	e50b300c 	str	r3, [fp, #-12]
      }
      /* See if netconn of this socket had an error */
      if (exceptset_in && FD_ISSET(i, exceptset_in) && (errevent != 0)) {
  1133b8:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  1133bc:	e3530000 	cmp	r3, #0
  1133c0:	0a000022 	beq	113450 <lwip_selscan+0x390>
  1133c4:	e51b3008 	ldr	r3, [fp, #-8]
  1133c8:	e1a022a3 	lsr	r2, r3, #5
  1133cc:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  1133d0:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  1133d4:	e51b3008 	ldr	r3, [fp, #-8]
  1133d8:	e203301f 	and	r3, r3, #31
  1133dc:	e1a03332 	lsr	r3, r2, r3
  1133e0:	e2033001 	and	r3, r3, #1
  1133e4:	e3530000 	cmp	r3, #0
  1133e8:	0a000018 	beq	113450 <lwip_selscan+0x390>
  1133ec:	e15b33b2 	ldrh	r3, [fp, #-50]	; 0xffffffce
  1133f0:	e3530000 	cmp	r3, #0
  1133f4:	0a000015 	beq	113450 <lwip_selscan+0x390>
        FD_SET(i, &lexceptset);
  1133f8:	e51b3008 	ldr	r3, [fp, #-8]
  1133fc:	e1a022a3 	lsr	r2, r3, #5
  113400:	e1a03102 	lsl	r3, r2, #2
  113404:	e24b1004 	sub	r1, fp, #4
  113408:	e0813003 	add	r3, r1, r3
  11340c:	e51311b0 	ldr	r1, [r3, #-432]	; 0xfffffe50
  113410:	e51b3008 	ldr	r3, [fp, #-8]
  113414:	e203301f 	and	r3, r3, #31
  113418:	e3a00001 	mov	r0, #1
  11341c:	e1a03310 	lsl	r3, r0, r3
  113420:	e1811003 	orr	r1, r1, r3
  113424:	e1a03102 	lsl	r3, r2, #2
  113428:	e24b2004 	sub	r2, fp, #4
  11342c:	e0823003 	add	r3, r2, r3
  113430:	e50311b0 	str	r1, [r3, #-432]	; 0xfffffe50
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for exception\n", i));
        nready++;
  113434:	e51b300c 	ldr	r3, [fp, #-12]
  113438:	e2833001 	add	r3, r3, #1
  11343c:	e50b300c 	str	r3, [fp, #-12]
  113440:	ea000002 	b	113450 <lwip_selscan+0x390>
      }
    } else {
      SYS_ARCH_UNPROTECT(lev);
  113444:	ebffbb82 	bl	102254 <rt_exit_critical>
  113448:	ea000000 	b	113450 <lwip_selscan+0x390>
      continue;
  11344c:	e320f000 	nop	{0}
  for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
  113450:	e51b3008 	ldr	r3, [fp, #-8]
  113454:	e2833001 	add	r3, r3, #1
  113458:	e50b3008 	str	r3, [fp, #-8]
  11345c:	e51b2008 	ldr	r2, [fp, #-8]
  113460:	e51b31b8 	ldr	r3, [fp, #-440]	; 0xfffffe48
  113464:	e1520003 	cmp	r2, r3
  113468:	baffff50 	blt	1131b0 <lwip_selscan+0xf0>
      /* continue on to next FD in list */
    }
  }
  /* copy local sets to the ones provided as arguments */
  *readset_out = lreadset;
  11346c:	e59b3004 	ldr	r3, [fp, #4]
  113470:	e1a00003 	mov	r0, r3
  113474:	e24b30b4 	sub	r3, fp, #180	; 0xb4
  113478:	e3a02080 	mov	r2, #128	; 0x80
  11347c:	e1a01003 	mov	r1, r3
  113480:	eb00b6bd 	bl	140f7c <memcpy>
  *writeset_out = lwriteset;
  113484:	e59b3008 	ldr	r3, [fp, #8]
  113488:	e1a00003 	mov	r0, r3
  11348c:	e24b3f4d 	sub	r3, fp, #308	; 0x134
  113490:	e3a02080 	mov	r2, #128	; 0x80
  113494:	e1a01003 	mov	r1, r3
  113498:	eb00b6b7 	bl	140f7c <memcpy>
  *exceptset_out = lexceptset;
  11349c:	e59b300c 	ldr	r3, [fp, #12]
  1134a0:	e1a00003 	mov	r0, r3
  1134a4:	e24b3f6d 	sub	r3, fp, #436	; 0x1b4
  1134a8:	e3a02080 	mov	r2, #128	; 0x80
  1134ac:	e1a01003 	mov	r1, r3
  1134b0:	eb00b6b1 	bl	140f7c <memcpy>

  LWIP_ASSERT("nready >= 0", nready >= 0);
  1134b4:	e51b300c 	ldr	r3, [fp, #-12]
  1134b8:	e3530000 	cmp	r3, #0
  1134bc:	aa000006 	bge	1134dc <lwip_selscan+0x41c>
  1134c0:	e30700ec 	movw	r0, #28908	; 0x70ec
  1134c4:	e3400014 	movt	r0, #20
  1134c8:	ebffbf11 	bl	103114 <rt_kprintf>
  1134cc:	e3001569 	movw	r1, #1385	; 0x569
  1134d0:	e3060f44 	movw	r0, #28484	; 0x6f44
  1134d4:	e3400014 	movt	r0, #20
  1134d8:	ebffdee1 	bl	10b064 <sys_arch_assert>
  return nready;
  1134dc:	e51b300c 	ldr	r3, [fp, #-12]
}
  1134e0:	e1a00003 	mov	r0, r3
  1134e4:	e24bd004 	sub	sp, fp, #4
  1134e8:	e8bd8800 	pop	{fp, pc}

001134ec <lwip_select>:

int
lwip_select(int maxfdp1, fd_set *readset, fd_set *writeset, fd_set *exceptset,
            struct timeval *timeout)
{
  1134ec:	e92d4800 	push	{fp, lr}
  1134f0:	e28db004 	add	fp, sp, #4
  1134f4:	e24ddf76 	sub	sp, sp, #472	; 0x1d8
  1134f8:	e50b01c0 	str	r0, [fp, #-448]	; 0xfffffe40
  1134fc:	e50b11c4 	str	r1, [fp, #-452]	; 0xfffffe3c
  113500:	e50b21c8 	str	r2, [fp, #-456]	; 0xfffffe38
  113504:	e50b31cc 	str	r3, [fp, #-460]	; 0xfffffe34
  u32_t waitres = 0;
  113508:	e3a03000 	mov	r3, #0
  11350c:	e50b3008 	str	r3, [fp, #-8]
                  timeout ? (s32_t)timeout->tv_sec : (s32_t)-1,
                  timeout ? (s32_t)timeout->tv_usec : (s32_t)-1));

  /* Go through each socket in each list to count number of sockets which
     currently match */
  nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
  113510:	e24b3e1a 	sub	r3, fp, #416	; 0x1a0
  113514:	e58d3008 	str	r3, [sp, #8]
  113518:	e24b3e12 	sub	r3, fp, #288	; 0x120
  11351c:	e58d3004 	str	r3, [sp, #4]
  113520:	e24b30a0 	sub	r3, fp, #160	; 0xa0
  113524:	e58d3000 	str	r3, [sp]
  113528:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  11352c:	e51b21c8 	ldr	r2, [fp, #-456]	; 0xfffffe38
  113530:	e51b11c4 	ldr	r1, [fp, #-452]	; 0xfffffe3c
  113534:	e51b01c0 	ldr	r0, [fp, #-448]	; 0xfffffe40
  113538:	ebfffee0 	bl	1130c0 <lwip_selscan>
  11353c:	e50b000c 	str	r0, [fp, #-12]

  /* If we don't have any current events, then suspend if we are supposed to */
  if (!nready) {
  113540:	e51b300c 	ldr	r3, [fp, #-12]
  113544:	e3530000 	cmp	r3, #0
  113548:	1a000163 	bne	113adc <lwip_select+0x5f0>
    if (timeout && timeout->tv_sec == 0 && timeout->tv_usec == 0) {
  11354c:	e59b3004 	ldr	r3, [fp, #4]
  113550:	e3530000 	cmp	r3, #0
  113554:	0a000007 	beq	113578 <lwip_select+0x8c>
  113558:	e59b3004 	ldr	r3, [fp, #4]
  11355c:	e1c320d0 	ldrd	r2, [r3]
  113560:	e1923003 	orrs	r3, r2, r3
  113564:	1a000003 	bne	113578 <lwip_select+0x8c>
  113568:	e59b3004 	ldr	r3, [fp, #4]
  11356c:	e5933008 	ldr	r3, [r3, #8]
  113570:	e3530000 	cmp	r3, #0
  113574:	0a00015a 	beq	113ae4 <lwip_select+0x5f8>
    /* None ready: add our semaphore to list:
       We don't actually need any dynamic memory. Our entry on the
       list is only valid while we are in this function, so it's ok
       to use local variables. */

    select_cb.next = NULL;
  113578:	e3a03000 	mov	r3, #0
  11357c:	e50b31bc 	str	r3, [fp, #-444]	; 0xfffffe44
    select_cb.prev = NULL;
  113580:	e3a03000 	mov	r3, #0
  113584:	e50b31b8 	str	r3, [fp, #-440]	; 0xfffffe48
    select_cb.readset = readset;
  113588:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  11358c:	e50b31b4 	str	r3, [fp, #-436]	; 0xfffffe4c
    select_cb.writeset = writeset;
  113590:	e51b31c8 	ldr	r3, [fp, #-456]	; 0xfffffe38
  113594:	e50b31b0 	str	r3, [fp, #-432]	; 0xfffffe50
    select_cb.exceptset = exceptset;
  113598:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  11359c:	e50b31ac 	str	r3, [fp, #-428]	; 0xfffffe54
    select_cb.sem_signalled = 0;
  1135a0:	e3a03000 	mov	r3, #0
  1135a4:	e50b31a8 	str	r3, [fp, #-424]	; 0xfffffe58
#if LWIP_NETCONN_SEM_PER_THREAD
    select_cb.sem = LWIP_NETCONN_THREAD_SEM_GET();
#else /* LWIP_NETCONN_SEM_PER_THREAD */
    if (sys_sem_new(&select_cb.sem, 0) != ERR_OK) {
  1135a8:	e24b3f6f 	sub	r3, fp, #444	; 0x1bc
  1135ac:	e2833018 	add	r3, r3, #24
  1135b0:	e3a01000 	mov	r1, #0
  1135b4:	e1a00003 	mov	r0, r3
  1135b8:	ebffdc17 	bl	10a61c <sys_sem_new>
  1135bc:	e1a03000 	mov	r3, r0
  1135c0:	e3530000 	cmp	r3, #0
  1135c4:	0a000005 	beq	1135e0 <lwip_select+0xf4>
      /* failed to create semaphore */
      set_errno(ENOMEM);
  1135c8:	eb0096bc 	bl	1390c0 <__errno_location>
  1135cc:	e1a02000 	mov	r2, r0
  1135d0:	e3a0300c 	mov	r3, #12
  1135d4:	e5823000 	str	r3, [r2]
      return -1;
  1135d8:	e3e03000 	mvn	r3, #0
  1135dc:	ea00015f 	b	113b60 <lwip_select+0x674>
    }
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

    /* Protect the select_cb_list */
    SYS_ARCH_PROTECT(lev);
  1135e0:	ebffbb15 	bl	10223c <rt_enter_critical>

    /* Put this select_cb on top of list */
    select_cb.next = select_cb_list;
  1135e4:	e30e3c20 	movw	r3, #60448	; 0xec20
  1135e8:	e3403014 	movt	r3, #20
  1135ec:	e5933000 	ldr	r3, [r3]
  1135f0:	e50b31bc 	str	r3, [fp, #-444]	; 0xfffffe44
    if (select_cb_list != NULL) {
  1135f4:	e30e3c20 	movw	r3, #60448	; 0xec20
  1135f8:	e3403014 	movt	r3, #20
  1135fc:	e5933000 	ldr	r3, [r3]
  113600:	e3530000 	cmp	r3, #0
  113604:	0a000004 	beq	11361c <lwip_select+0x130>
      select_cb_list->prev = &select_cb;
  113608:	e30e3c20 	movw	r3, #60448	; 0xec20
  11360c:	e3403014 	movt	r3, #20
  113610:	e5933000 	ldr	r3, [r3]
  113614:	e24b2f6f 	sub	r2, fp, #444	; 0x1bc
  113618:	e5832004 	str	r2, [r3, #4]
    }
    select_cb_list = &select_cb;
  11361c:	e30e3c20 	movw	r3, #60448	; 0xec20
  113620:	e3403014 	movt	r3, #20
  113624:	e24b2f6f 	sub	r2, fp, #444	; 0x1bc
  113628:	e5832000 	str	r2, [r3]
    /* Increasing this counter tells event_callback that the list has changed. */
    select_cb_ctr++;
  11362c:	e30e3c24 	movw	r3, #60452	; 0xec24
  113630:	e3403014 	movt	r3, #20
  113634:	e5933000 	ldr	r3, [r3]
  113638:	e2832001 	add	r2, r3, #1
  11363c:	e30e3c24 	movw	r3, #60452	; 0xec24
  113640:	e3403014 	movt	r3, #20
  113644:	e5832000 	str	r2, [r3]

    /* Now we can safely unprotect */
    SYS_ARCH_UNPROTECT(lev);
  113648:	ebffbb01 	bl	102254 <rt_exit_critical>

    /* Increase select_waiting for each socket we are interested in */
    maxfdp2 = maxfdp1;
  11364c:	e51b31c0 	ldr	r3, [fp, #-448]	; 0xfffffe40
  113650:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
  113654:	e3a03000 	mov	r3, #0
  113658:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  11365c:	ea000049 	b	113788 <lwip_select+0x29c>
      if ((readset && FD_ISSET(i, readset)) ||
  113660:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  113664:	e3530000 	cmp	r3, #0
  113668:	0a000009 	beq	113694 <lwip_select+0x1a8>
  11366c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113670:	e1a022a3 	lsr	r2, r3, #5
  113674:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  113678:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  11367c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113680:	e203301f 	and	r3, r3, #31
  113684:	e1a03332 	lsr	r3, r2, r3
  113688:	e2033001 	and	r3, r3, #1
  11368c:	e3530000 	cmp	r3, #0
  113690:	1a000019 	bne	1136fc <lwip_select+0x210>
  113694:	e51b31c8 	ldr	r3, [fp, #-456]	; 0xfffffe38
  113698:	e3530000 	cmp	r3, #0
  11369c:	0a000009 	beq	1136c8 <lwip_select+0x1dc>
          (writeset && FD_ISSET(i, writeset)) ||
  1136a0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1136a4:	e1a022a3 	lsr	r2, r3, #5
  1136a8:	e51b31c8 	ldr	r3, [fp, #-456]	; 0xfffffe38
  1136ac:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  1136b0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1136b4:	e203301f 	and	r3, r3, #31
  1136b8:	e1a03332 	lsr	r3, r2, r3
  1136bc:	e2033001 	and	r3, r3, #1
  1136c0:	e3530000 	cmp	r3, #0
  1136c4:	1a00000c 	bne	1136fc <lwip_select+0x210>
  1136c8:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  1136cc:	e3530000 	cmp	r3, #0
  1136d0:	0a000029 	beq	11377c <lwip_select+0x290>
          (exceptset && FD_ISSET(i, exceptset))) {
  1136d4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1136d8:	e1a022a3 	lsr	r2, r3, #5
  1136dc:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  1136e0:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  1136e4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1136e8:	e203301f 	and	r3, r3, #31
  1136ec:	e1a03332 	lsr	r3, r2, r3
  1136f0:	e2033001 	and	r3, r3, #1
  1136f4:	e3530000 	cmp	r3, #0
  1136f8:	0a00001f 	beq	11377c <lwip_select+0x290>
        struct lwip_sock *sock;
        SYS_ARCH_PROTECT(lev);
  1136fc:	ebffbace 	bl	10223c <rt_enter_critical>
        sock = tryget_socket(i);
  113700:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  113704:	ebfff6a5 	bl	1111a0 <tryget_socket>
  113708:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
        if (sock != NULL) {
  11370c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  113710:	e3530000 	cmp	r3, #0
  113714:	0a000011 	beq	113760 <lwip_select+0x274>
          sock->select_waiting++;
  113718:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11371c:	e5d33011 	ldrb	r3, [r3, #17]
  113720:	e2833001 	add	r3, r3, #1
  113724:	e6ef2073 	uxtb	r2, r3
  113728:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11372c:	e5c32011 	strb	r2, [r3, #17]
          LWIP_ASSERT("sock->select_waiting > 0", sock->select_waiting > 0);
  113730:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  113734:	e5d33011 	ldrb	r3, [r3, #17]
  113738:	e3530000 	cmp	r3, #0
  11373c:	1a00000d 	bne	113778 <lwip_select+0x28c>
  113740:	e30700f8 	movw	r0, #28920	; 0x70f8
  113744:	e3400014 	movt	r0, #20
  113748:	ebffbe71 	bl	103114 <rt_kprintf>
  11374c:	e30015be 	movw	r1, #1470	; 0x5be
  113750:	e3060f44 	movw	r0, #28484	; 0x6f44
  113754:	e3400014 	movt	r0, #20
  113758:	ebffde41 	bl	10b064 <sys_arch_assert>
  11375c:	ea000005 	b	113778 <lwip_select+0x28c>
        } else {
          /* Not a valid socket */
          nready = -1;
  113760:	e3e03000 	mvn	r3, #0
  113764:	e50b300c 	str	r3, [fp, #-12]
          maxfdp2 = i;
  113768:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11376c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
          SYS_ARCH_UNPROTECT(lev);
  113770:	ebffbab7 	bl	102254 <rt_exit_critical>
          break;
  113774:	ea000007 	b	113798 <lwip_select+0x2ac>
        }
        SYS_ARCH_UNPROTECT(lev);
  113778:	ebffbab5 	bl	102254 <rt_exit_critical>
    for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
  11377c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113780:	e2833001 	add	r3, r3, #1
  113784:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  113788:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11378c:	e51b31c0 	ldr	r3, [fp, #-448]	; 0xfffffe40
  113790:	e1520003 	cmp	r2, r3
  113794:	baffffb1 	blt	113660 <lwip_select+0x174>
      }
    }

    if (nready >= 0) {
  113798:	e51b300c 	ldr	r3, [fp, #-12]
  11379c:	e3530000 	cmp	r3, #0
  1137a0:	ba00002e 	blt	113860 <lwip_select+0x374>
      /* Call lwip_selscan again: there could have been events between
         the last scan (without us on the list) and putting us on the list! */
      nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
  1137a4:	e24b3e1a 	sub	r3, fp, #416	; 0x1a0
  1137a8:	e58d3008 	str	r3, [sp, #8]
  1137ac:	e24b3e12 	sub	r3, fp, #288	; 0x120
  1137b0:	e58d3004 	str	r3, [sp, #4]
  1137b4:	e24b30a0 	sub	r3, fp, #160	; 0xa0
  1137b8:	e58d3000 	str	r3, [sp]
  1137bc:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  1137c0:	e51b21c8 	ldr	r2, [fp, #-456]	; 0xfffffe38
  1137c4:	e51b11c4 	ldr	r1, [fp, #-452]	; 0xfffffe3c
  1137c8:	e51b01c0 	ldr	r0, [fp, #-448]	; 0xfffffe40
  1137cc:	ebfffe3b 	bl	1130c0 <lwip_selscan>
  1137d0:	e50b000c 	str	r0, [fp, #-12]
      if (!nready) {
  1137d4:	e51b300c 	ldr	r3, [fp, #-12]
  1137d8:	e3530000 	cmp	r3, #0
  1137dc:	1a00001f 	bne	113860 <lwip_select+0x374>
        /* Still none ready, just wait to be woken */
        if (timeout == 0) {
  1137e0:	e59b3004 	ldr	r3, [fp, #4]
  1137e4:	e3530000 	cmp	r3, #0
  1137e8:	1a000002 	bne	1137f8 <lwip_select+0x30c>
          /* Wait forever */
          msectimeout = 0;
  1137ec:	e3a03000 	mov	r3, #0
  1137f0:	e50b3010 	str	r3, [fp, #-16]
  1137f4:	ea000013 	b	113848 <lwip_select+0x35c>
        } else {
          msectimeout =  ((timeout->tv_sec * 1000) + ((timeout->tv_usec + 500)/1000));
  1137f8:	e59b3004 	ldr	r3, [fp, #4]
  1137fc:	e1c320d0 	ldrd	r2, [r3]
  113800:	e3a03ffa 	mov	r3, #1000	; 0x3e8
  113804:	e0000293 	mul	r0, r3, r2
  113808:	e59b3004 	ldr	r3, [fp, #4]
  11380c:	e5933008 	ldr	r3, [r3, #8]
  113810:	e2831f7d 	add	r1, r3, #500	; 0x1f4
  113814:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  113818:	e3413062 	movt	r3, #4194	; 0x1062
  11381c:	e0c32391 	smull	r2, r3, r1, r3
  113820:	e1a02343 	asr	r2, r3, #6
  113824:	e1a03fc1 	asr	r3, r1, #31
  113828:	e0423003 	sub	r3, r2, r3
  11382c:	e0803003 	add	r3, r0, r3
  113830:	e50b3010 	str	r3, [fp, #-16]
          if (msectimeout == 0) {
  113834:	e51b3010 	ldr	r3, [fp, #-16]
  113838:	e3530000 	cmp	r3, #0
  11383c:	1a000001 	bne	113848 <lwip_select+0x35c>
            /* Wait 1ms at least (0 means wait forever) */
            msectimeout = 1;
  113840:	e3a03001 	mov	r3, #1
  113844:	e50b3010 	str	r3, [fp, #-16]
          }
        }

        waitres = sys_arch_sem_wait(SELECT_SEM_PTR(select_cb.sem), msectimeout);
  113848:	e24b3f6f 	sub	r3, fp, #444	; 0x1bc
  11384c:	e2833018 	add	r3, r3, #24
  113850:	e51b1010 	ldr	r1, [fp, #-16]
  113854:	e1a00003 	mov	r0, r3
  113858:	ebffdbb0 	bl	10a720 <sys_arch_sem_wait>
  11385c:	e50b0008 	str	r0, [fp, #-8]
#endif
      }
    }

    /* Decrease select_waiting for each socket we are interested in */
    for (i = LWIP_SOCKET_OFFSET; i < maxfdp2; i++) {
  113860:	e3a03000 	mov	r3, #0
  113864:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  113868:	ea000049 	b	113994 <lwip_select+0x4a8>
      if ((readset && FD_ISSET(i, readset)) ||
  11386c:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  113870:	e3530000 	cmp	r3, #0
  113874:	0a000009 	beq	1138a0 <lwip_select+0x3b4>
  113878:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11387c:	e1a022a3 	lsr	r2, r3, #5
  113880:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  113884:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  113888:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11388c:	e203301f 	and	r3, r3, #31
  113890:	e1a03332 	lsr	r3, r2, r3
  113894:	e2033001 	and	r3, r3, #1
  113898:	e3530000 	cmp	r3, #0
  11389c:	1a000019 	bne	113908 <lwip_select+0x41c>
  1138a0:	e51b31c8 	ldr	r3, [fp, #-456]	; 0xfffffe38
  1138a4:	e3530000 	cmp	r3, #0
  1138a8:	0a000009 	beq	1138d4 <lwip_select+0x3e8>
          (writeset && FD_ISSET(i, writeset)) ||
  1138ac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1138b0:	e1a022a3 	lsr	r2, r3, #5
  1138b4:	e51b31c8 	ldr	r3, [fp, #-456]	; 0xfffffe38
  1138b8:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  1138bc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1138c0:	e203301f 	and	r3, r3, #31
  1138c4:	e1a03332 	lsr	r3, r2, r3
  1138c8:	e2033001 	and	r3, r3, #1
  1138cc:	e3530000 	cmp	r3, #0
  1138d0:	1a00000c 	bne	113908 <lwip_select+0x41c>
  1138d4:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  1138d8:	e3530000 	cmp	r3, #0
  1138dc:	0a000029 	beq	113988 <lwip_select+0x49c>
          (exceptset && FD_ISSET(i, exceptset))) {
  1138e0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1138e4:	e1a022a3 	lsr	r2, r3, #5
  1138e8:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  1138ec:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  1138f0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1138f4:	e203301f 	and	r3, r3, #31
  1138f8:	e1a03332 	lsr	r3, r2, r3
  1138fc:	e2033001 	and	r3, r3, #1
  113900:	e3530000 	cmp	r3, #0
  113904:	0a00001f 	beq	113988 <lwip_select+0x49c>
        struct lwip_sock *sock;
        SYS_ARCH_PROTECT(lev);
  113908:	ebffba4b 	bl	10223c <rt_enter_critical>
        sock = tryget_socket(i);
  11390c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  113910:	ebfff622 	bl	1111a0 <tryget_socket>
  113914:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
        if (sock != NULL) {
  113918:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11391c:	e3530000 	cmp	r3, #0
  113920:	0a000015 	beq	11397c <lwip_select+0x490>
          /* for now, handle select_waiting==0... */
          LWIP_ASSERT("sock->select_waiting > 0", sock->select_waiting > 0);
  113924:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  113928:	e5d33011 	ldrb	r3, [r3, #17]
  11392c:	e3530000 	cmp	r3, #0
  113930:	1a000006 	bne	113950 <lwip_select+0x464>
  113934:	e30700f8 	movw	r0, #28920	; 0x70f8
  113938:	e3400014 	movt	r0, #20
  11393c:	ebffbdf4 	bl	103114 <rt_kprintf>
  113940:	e30015ec 	movw	r1, #1516	; 0x5ec
  113944:	e3060f44 	movw	r0, #28484	; 0x6f44
  113948:	e3400014 	movt	r0, #20
  11394c:	ebffddc4 	bl	10b064 <sys_arch_assert>
          if (sock->select_waiting > 0) {
  113950:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  113954:	e5d33011 	ldrb	r3, [r3, #17]
  113958:	e3530000 	cmp	r3, #0
  11395c:	0a000008 	beq	113984 <lwip_select+0x498>
            sock->select_waiting--;
  113960:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  113964:	e5d33011 	ldrb	r3, [r3, #17]
  113968:	e2433001 	sub	r3, r3, #1
  11396c:	e6ef2073 	uxtb	r2, r3
  113970:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  113974:	e5c32011 	strb	r2, [r3, #17]
  113978:	ea000001 	b	113984 <lwip_select+0x498>
          }
        } else {
          /* Not a valid socket */
          nready = -1;
  11397c:	e3e03000 	mvn	r3, #0
  113980:	e50b300c 	str	r3, [fp, #-12]
        }
        SYS_ARCH_UNPROTECT(lev);
  113984:	ebffba32 	bl	102254 <rt_exit_critical>
    for (i = LWIP_SOCKET_OFFSET; i < maxfdp2; i++) {
  113988:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11398c:	e2833001 	add	r3, r3, #1
  113990:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  113994:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  113998:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11399c:	e1520003 	cmp	r2, r3
  1139a0:	baffffb1 	blt	11386c <lwip_select+0x380>
      }
    }
    /* Take us off the list */
    SYS_ARCH_PROTECT(lev);
  1139a4:	ebffba24 	bl	10223c <rt_enter_critical>
    if (select_cb.next != NULL) {
  1139a8:	e51b31bc 	ldr	r3, [fp, #-444]	; 0xfffffe44
  1139ac:	e3530000 	cmp	r3, #0
  1139b0:	0a000002 	beq	1139c0 <lwip_select+0x4d4>
      select_cb.next->prev = select_cb.prev;
  1139b4:	e51b31bc 	ldr	r3, [fp, #-444]	; 0xfffffe44
  1139b8:	e51b21b8 	ldr	r2, [fp, #-440]	; 0xfffffe48
  1139bc:	e5832004 	str	r2, [r3, #4]
    }
    if (select_cb_list == &select_cb) {
  1139c0:	e30e3c20 	movw	r3, #60448	; 0xec20
  1139c4:	e3403014 	movt	r3, #20
  1139c8:	e5932000 	ldr	r2, [r3]
  1139cc:	e24b3f6f 	sub	r3, fp, #444	; 0x1bc
  1139d0:	e1520003 	cmp	r2, r3
  1139d4:	1a00000e 	bne	113a14 <lwip_select+0x528>
      LWIP_ASSERT("select_cb.prev == NULL", select_cb.prev == NULL);
  1139d8:	e51b31b8 	ldr	r3, [fp, #-440]	; 0xfffffe48
  1139dc:	e3530000 	cmp	r3, #0
  1139e0:	0a000006 	beq	113a00 <lwip_select+0x514>
  1139e4:	e3070114 	movw	r0, #28948	; 0x7114
  1139e8:	e3400014 	movt	r0, #20
  1139ec:	ebffbdc8 	bl	103114 <rt_kprintf>
  1139f0:	e30015fd 	movw	r1, #1533	; 0x5fd
  1139f4:	e3060f44 	movw	r0, #28484	; 0x6f44
  1139f8:	e3400014 	movt	r0, #20
  1139fc:	ebffdd98 	bl	10b064 <sys_arch_assert>
      select_cb_list = select_cb.next;
  113a00:	e51b21bc 	ldr	r2, [fp, #-444]	; 0xfffffe44
  113a04:	e30e3c20 	movw	r3, #60448	; 0xec20
  113a08:	e3403014 	movt	r3, #20
  113a0c:	e5832000 	str	r2, [r3]
  113a10:	ea00000c 	b	113a48 <lwip_select+0x55c>
    } else {
      LWIP_ASSERT("select_cb.prev != NULL", select_cb.prev != NULL);
  113a14:	e51b31b8 	ldr	r3, [fp, #-440]	; 0xfffffe48
  113a18:	e3530000 	cmp	r3, #0
  113a1c:	1a000006 	bne	113a3c <lwip_select+0x550>
  113a20:	e307012c 	movw	r0, #28972	; 0x712c
  113a24:	e3400014 	movt	r0, #20
  113a28:	ebffbdb9 	bl	103114 <rt_kprintf>
  113a2c:	e3a01c06 	mov	r1, #1536	; 0x600
  113a30:	e3060f44 	movw	r0, #28484	; 0x6f44
  113a34:	e3400014 	movt	r0, #20
  113a38:	ebffdd89 	bl	10b064 <sys_arch_assert>
      select_cb.prev->next = select_cb.next;
  113a3c:	e51b31b8 	ldr	r3, [fp, #-440]	; 0xfffffe48
  113a40:	e51b21bc 	ldr	r2, [fp, #-444]	; 0xfffffe44
  113a44:	e5832000 	str	r2, [r3]
    }
    /* Increasing this counter tells event_callback that the list has changed. */
    select_cb_ctr++;
  113a48:	e30e3c24 	movw	r3, #60452	; 0xec24
  113a4c:	e3403014 	movt	r3, #20
  113a50:	e5933000 	ldr	r3, [r3]
  113a54:	e2832001 	add	r2, r3, #1
  113a58:	e30e3c24 	movw	r3, #60452	; 0xec24
  113a5c:	e3403014 	movt	r3, #20
  113a60:	e5832000 	str	r2, [r3]
    SYS_ARCH_UNPROTECT(lev);
  113a64:	ebffb9fa 	bl	102254 <rt_exit_critical>
    if (select_cb.sem_signalled && (!waited || (waitres == SYS_ARCH_TIMEOUT))) {
      /* don't leave the thread-local semaphore signalled */
      sys_arch_sem_wait(select_cb.sem, 1);
    }
#else /* LWIP_NETCONN_SEM_PER_THREAD */
    sys_sem_free(&select_cb.sem);
  113a68:	e24b3f6f 	sub	r3, fp, #444	; 0x1bc
  113a6c:	e2833018 	add	r3, r3, #24
  113a70:	e1a00003 	mov	r0, r3
  113a74:	ebffdb13 	bl	10a6c8 <sys_sem_free>
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

    if (nready < 0) {
  113a78:	e51b300c 	ldr	r3, [fp, #-12]
  113a7c:	e3530000 	cmp	r3, #0
  113a80:	aa000005 	bge	113a9c <lwip_select+0x5b0>
      /* This happens when a socket got closed while waiting */
      set_errno(EBADF);
  113a84:	eb00958d 	bl	1390c0 <__errno_location>
  113a88:	e1a02000 	mov	r2, r0
  113a8c:	e3a03009 	mov	r3, #9
  113a90:	e5823000 	str	r3, [r2]
      return -1;
  113a94:	e3e03000 	mvn	r3, #0
  113a98:	ea000030 	b	113b60 <lwip_select+0x674>
    }

    if (waitres == SYS_ARCH_TIMEOUT) {
  113a9c:	e51b3008 	ldr	r3, [fp, #-8]
  113aa0:	e3730001 	cmn	r3, #1
  113aa4:	0a000010 	beq	113aec <lwip_select+0x600>
         or we would have returned earlier. */
      goto return_copy_fdsets;
    }

    /* See what's set */
    nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
  113aa8:	e24b3e1a 	sub	r3, fp, #416	; 0x1a0
  113aac:	e58d3008 	str	r3, [sp, #8]
  113ab0:	e24b3e12 	sub	r3, fp, #288	; 0x120
  113ab4:	e58d3004 	str	r3, [sp, #4]
  113ab8:	e24b30a0 	sub	r3, fp, #160	; 0xa0
  113abc:	e58d3000 	str	r3, [sp]
  113ac0:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  113ac4:	e51b21c8 	ldr	r2, [fp, #-456]	; 0xfffffe38
  113ac8:	e51b11c4 	ldr	r1, [fp, #-452]	; 0xfffffe3c
  113acc:	e51b01c0 	ldr	r0, [fp, #-448]	; 0xfffffe40
  113ad0:	ebfffd7a 	bl	1130c0 <lwip_selscan>
  113ad4:	e50b000c 	str	r0, [fp, #-12]
  113ad8:	ea000004 	b	113af0 <lwip_select+0x604>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_select: nready=%d\n", nready));
return_copy_fdsets:
  113adc:	e320f000 	nop	{0}
  113ae0:	ea000002 	b	113af0 <lwip_select+0x604>
      goto return_copy_fdsets;
  113ae4:	e320f000 	nop	{0}
  113ae8:	ea000000 	b	113af0 <lwip_select+0x604>
      goto return_copy_fdsets;
  113aec:	e320f000 	nop	{0}
  set_errno(0);
  if (readset) {
  113af0:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  113af4:	e3530000 	cmp	r3, #0
  113af8:	0a000005 	beq	113b14 <lwip_select+0x628>
    *readset = lreadset;
  113afc:	e51b31c4 	ldr	r3, [fp, #-452]	; 0xfffffe3c
  113b00:	e1a00003 	mov	r0, r3
  113b04:	e24b30a0 	sub	r3, fp, #160	; 0xa0
  113b08:	e3a02080 	mov	r2, #128	; 0x80
  113b0c:	e1a01003 	mov	r1, r3
  113b10:	eb00b519 	bl	140f7c <memcpy>
  }
  if (writeset) {
  113b14:	e51b31c8 	ldr	r3, [fp, #-456]	; 0xfffffe38
  113b18:	e3530000 	cmp	r3, #0
  113b1c:	0a000005 	beq	113b38 <lwip_select+0x64c>
    *writeset = lwriteset;
  113b20:	e51b31c8 	ldr	r3, [fp, #-456]	; 0xfffffe38
  113b24:	e1a00003 	mov	r0, r3
  113b28:	e24b3e12 	sub	r3, fp, #288	; 0x120
  113b2c:	e3a02080 	mov	r2, #128	; 0x80
  113b30:	e1a01003 	mov	r1, r3
  113b34:	eb00b510 	bl	140f7c <memcpy>
  }
  if (exceptset) {
  113b38:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  113b3c:	e3530000 	cmp	r3, #0
  113b40:	0a000005 	beq	113b5c <lwip_select+0x670>
    *exceptset = lexceptset;
  113b44:	e51b31cc 	ldr	r3, [fp, #-460]	; 0xfffffe34
  113b48:	e1a00003 	mov	r0, r3
  113b4c:	e24b3e1a 	sub	r3, fp, #416	; 0x1a0
  113b50:	e3a02080 	mov	r2, #128	; 0x80
  113b54:	e1a01003 	mov	r1, r3
  113b58:	eb00b507 	bl	140f7c <memcpy>
  }
  return nready;
  113b5c:	e51b300c 	ldr	r3, [fp, #-12]
}
  113b60:	e1a00003 	mov	r0, r3
  113b64:	e24bd004 	sub	sp, fp, #4
  113b68:	e8bd8800 	pop	{fp, pc}

00113b6c <event_callback>:
#define POLLOUT    0x2
#define POLLERR    0x4
#define UNET_WAKEUP_REQUEST         45
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
  113b6c:	e92d4800 	push	{fp, lr}
  113b70:	e28db004 	add	fp, sp, #4
  113b74:	e24dd028 	sub	sp, sp, #40	; 0x28
  113b78:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  113b7c:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  113b80:	e1a03002 	mov	r3, r2
  113b84:	e14b32b6 	strh	r3, [fp, #-38]	; 0xffffffda
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
  113b88:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  113b8c:	e3530000 	cmp	r3, #0
  113b90:	0a0000e5 	beq	113f2c <event_callback+0x3c0>
    s = conn->socket;
  113b94:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  113b98:	e593301c 	ldr	r3, [r3, #28]
  113b9c:	e50b3008 	str	r3, [fp, #-8]
    if (s < 0) {
  113ba0:	e51b3008 	ldr	r3, [fp, #-8]
  113ba4:	e3530000 	cmp	r3, #0
  113ba8:	aa000012 	bge	113bf8 <event_callback+0x8c>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
  113bac:	ebffb9a2 	bl	10223c <rt_enter_critical>
      if (conn->socket < 0) {
  113bb0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  113bb4:	e593301c 	ldr	r3, [r3, #28]
  113bb8:	e3530000 	cmp	r3, #0
  113bbc:	aa000009 	bge	113be8 <event_callback+0x7c>
        if (evt == NETCONN_EVT_RCVPLUS) {
  113bc0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  113bc4:	e3530000 	cmp	r3, #0
  113bc8:	1a000004 	bne	113be0 <event_callback+0x74>
          conn->socket--;
  113bcc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  113bd0:	e593301c 	ldr	r3, [r3, #28]
  113bd4:	e2432001 	sub	r2, r3, #1
  113bd8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  113bdc:	e583201c 	str	r2, [r3, #28]
        }
        SYS_ARCH_UNPROTECT(lev);
  113be0:	ebffb99b 	bl	102254 <rt_exit_critical>
        return;
  113be4:	ea0000d3 	b	113f38 <event_callback+0x3cc>
      }
      s = conn->socket;
  113be8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  113bec:	e593301c 	ldr	r3, [r3, #28]
  113bf0:	e50b3008 	str	r3, [fp, #-8]
      SYS_ARCH_UNPROTECT(lev);
  113bf4:	ebffb996 	bl	102254 <rt_exit_critical>
    }

    sock = get_socket(s);
  113bf8:	e51b0008 	ldr	r0, [fp, #-8]
  113bfc:	ebfff542 	bl	11110c <get_socket>
  113c00:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    if (!sock) {
  113c04:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113c08:	e3530000 	cmp	r3, #0
  113c0c:	0a0000c8 	beq	113f34 <event_callback+0x3c8>
    }
  } else {
    return;
  }

  SYS_ARCH_PROTECT(lev);
  113c10:	ebffb989 	bl	10223c <rt_enter_critical>
  /* Set event as required */
  switch (evt) {
  113c14:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  113c18:	e3530004 	cmp	r3, #4
  113c1c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  113c20:	ea000022 	b	113cb0 <event_callback+0x144>
  113c24:	00113c38 	.word	0x00113c38
  113c28:	00113c5c 	.word	0x00113c5c
  113c2c:	00113c80 	.word	0x00113c80
  113c30:	00113c90 	.word	0x00113c90
  113c34:	00113ca0 	.word	0x00113ca0
    case NETCONN_EVT_RCVPLUS:
      /* *RT-Thread* need to be notified in kernel */
      sock->rcvevent++;
  113c38:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113c3c:	e1d330fa 	ldrsh	r3, [r3, #10]
  113c40:	e6ff3073 	uxth	r3, r3
  113c44:	e2833001 	add	r3, r3, #1
  113c48:	e6ff3073 	uxth	r3, r3
  113c4c:	e6bf2073 	sxth	r2, r3
  113c50:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113c54:	e1c320ba 	strh	r2, [r3, #10]
      break;
  113c58:	ea00001c 	b	113cd0 <event_callback+0x164>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
  113c5c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113c60:	e1d330fa 	ldrsh	r3, [r3, #10]
  113c64:	e6ff3073 	uxth	r3, r3
  113c68:	e2433001 	sub	r3, r3, #1
  113c6c:	e6ff3073 	uxth	r3, r3
  113c70:	e6bf2073 	sxth	r2, r3
  113c74:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113c78:	e1c320ba 	strh	r2, [r3, #10]
      break;
  113c7c:	ea000013 	b	113cd0 <event_callback+0x164>
    case NETCONN_EVT_SENDPLUS:
      sock->sendevent = 1;
  113c80:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113c84:	e3a02001 	mov	r2, #1
  113c88:	e1c320bc 	strh	r2, [r3, #12]
      break;
  113c8c:	ea00000f 	b	113cd0 <event_callback+0x164>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
  113c90:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113c94:	e3a02000 	mov	r2, #0
  113c98:	e1c320bc 	strh	r2, [r3, #12]
      break;
  113c9c:	ea00000b 	b	113cd0 <event_callback+0x164>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
  113ca0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113ca4:	e3a02001 	mov	r2, #1
  113ca8:	e1c320be 	strh	r2, [r3, #14]
      break;
  113cac:	ea000007 	b	113cd0 <event_callback+0x164>
    default:
      LWIP_ASSERT("unknown event", 0);
  113cb0:	e3070144 	movw	r0, #28996	; 0x7144
  113cb4:	e3400014 	movt	r0, #20
  113cb8:	ebffbd15 	bl	103114 <rt_kprintf>
  113cbc:	e3001679 	movw	r1, #1657	; 0x679
  113cc0:	e3060f44 	movw	r0, #28484	; 0x6f44
  113cc4:	e3400014 	movt	r0, #20
  113cc8:	ebffdce5 	bl	10b064 <sys_arch_assert>
      break;
  113ccc:	e320f000 	nop	{0}
  }

  int mask = 0;
  113cd0:	e3a03000 	mov	r3, #0
  113cd4:	e50b3010 	str	r3, [fp, #-16]
  if (sock != NULL)
  113cd8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113cdc:	e3530000 	cmp	r3, #0
  113ce0:	0a00001b 	beq	113d54 <event_callback+0x1e8>
  {
#if LWIP_VERSION >= 0x20100ff
      if ((void*)(sock->lastdata.pbuf) || sock->rcvevent)
#else
      if ((void *)(sock->lastdata) || sock->rcvevent)
  113ce4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113ce8:	e5933004 	ldr	r3, [r3, #4]
  113cec:	e3530000 	cmp	r3, #0
  113cf0:	1a000003 	bne	113d04 <event_callback+0x198>
  113cf4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113cf8:	e1d330fa 	ldrsh	r3, [r3, #10]
  113cfc:	e3530000 	cmp	r3, #0
  113d00:	0a000002 	beq	113d10 <event_callback+0x1a4>
#endif
      {
          mask |= POLLIN;
  113d04:	e51b3010 	ldr	r3, [fp, #-16]
  113d08:	e3833001 	orr	r3, r3, #1
  113d0c:	e50b3010 	str	r3, [fp, #-16]
      }
      if (sock->sendevent)
  113d10:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113d14:	e1d330bc 	ldrh	r3, [r3, #12]
  113d18:	e3530000 	cmp	r3, #0
  113d1c:	0a000002 	beq	113d2c <event_callback+0x1c0>
      {
          mask |= POLLOUT;
  113d20:	e51b3010 	ldr	r3, [fp, #-16]
  113d24:	e3833002 	orr	r3, r3, #2
  113d28:	e50b3010 	str	r3, [fp, #-16]
      }
      if (sock->errevent)
  113d2c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113d30:	e1d330be 	ldrh	r3, [r3, #14]
  113d34:	e3530000 	cmp	r3, #0
  113d38:	0a000005 	beq	113d54 <event_callback+0x1e8>
      {
          mask |= POLLERR;
  113d3c:	e51b3010 	ldr	r3, [fp, #-16]
  113d40:	e3833004 	orr	r3, r3, #4
  113d44:	e50b3010 	str	r3, [fp, #-16]
          /* clean error event */
          sock->errevent = 0;
  113d48:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113d4c:	e3a02000 	mov	r2, #0
  113d50:	e1c320be 	strh	r2, [r3, #14]
  //     {
  //       rt_kprintf("create msg error\n");
  //     }
  // }

  if (sock->select_waiting == 0) {
  113d54:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113d58:	e5d33011 	ldrb	r3, [r3, #17]
  113d5c:	e3530000 	cmp	r3, #0
  113d60:	1a000001 	bne	113d6c <event_callback+0x200>
    /* noone is waiting for this socket, no need to check select_cb_list */
    SYS_ARCH_UNPROTECT(lev);
  113d64:	ebffb93a 	bl	102254 <rt_exit_critical>
    return;
  113d68:	ea000072 	b	113f38 <event_callback+0x3cc>
  /* NOTE: This code goes through the select_cb_list list multiple times
     ONLY IF a select was actually waiting. We go through the list the number
     of waiting select calls + 1. This list is expected to be small. */

  /* At this point, SYS_ARCH is still protected! */
again:
  113d6c:	e320f000 	nop	{0}
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
  113d70:	e30e3c20 	movw	r3, #60448	; 0xec20
  113d74:	e3403014 	movt	r3, #20
  113d78:	e5933000 	ldr	r3, [r3]
  113d7c:	e50b300c 	str	r3, [fp, #-12]
  113d80:	ea000064 	b	113f18 <event_callback+0x3ac>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
  113d84:	e30e3c24 	movw	r3, #60452	; 0xec24
  113d88:	e3403014 	movt	r3, #20
  113d8c:	e5933000 	ldr	r3, [r3]
  113d90:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    if (scb->sem_signalled == 0) {
  113d94:	e51b300c 	ldr	r3, [fp, #-12]
  113d98:	e5933014 	ldr	r3, [r3, #20]
  113d9c:	e3530000 	cmp	r3, #0
  113da0:	1a000050 	bne	113ee8 <event_callback+0x37c>
      /* semaphore not signalled yet */
      int do_signal = 0;
  113da4:	e3a03000 	mov	r3, #0
  113da8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
      /* Test this select call for our socket */
      if (sock->rcvevent > 0) {
  113dac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113db0:	e1d330fa 	ldrsh	r3, [r3, #10]
  113db4:	e3530000 	cmp	r3, #0
  113db8:	da000010 	ble	113e00 <event_callback+0x294>
        if (scb->readset && FD_ISSET(s, scb->readset)) {
  113dbc:	e51b300c 	ldr	r3, [fp, #-12]
  113dc0:	e5933008 	ldr	r3, [r3, #8]
  113dc4:	e3530000 	cmp	r3, #0
  113dc8:	0a00000c 	beq	113e00 <event_callback+0x294>
  113dcc:	e51b300c 	ldr	r3, [fp, #-12]
  113dd0:	e5933008 	ldr	r3, [r3, #8]
  113dd4:	e51b2008 	ldr	r2, [fp, #-8]
  113dd8:	e1a022a2 	lsr	r2, r2, #5
  113ddc:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  113de0:	e51b3008 	ldr	r3, [fp, #-8]
  113de4:	e203301f 	and	r3, r3, #31
  113de8:	e1a03332 	lsr	r3, r2, r3
  113dec:	e2033001 	and	r3, r3, #1
  113df0:	e3530000 	cmp	r3, #0
  113df4:	0a000001 	beq	113e00 <event_callback+0x294>
          do_signal = 1;
  113df8:	e3a03001 	mov	r3, #1
  113dfc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        }
      }
      if (sock->sendevent != 0) {
  113e00:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113e04:	e1d330bc 	ldrh	r3, [r3, #12]
  113e08:	e3530000 	cmp	r3, #0
  113e0c:	0a000013 	beq	113e60 <event_callback+0x2f4>
        if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
  113e10:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113e14:	e3530000 	cmp	r3, #0
  113e18:	1a000010 	bne	113e60 <event_callback+0x2f4>
  113e1c:	e51b300c 	ldr	r3, [fp, #-12]
  113e20:	e593300c 	ldr	r3, [r3, #12]
  113e24:	e3530000 	cmp	r3, #0
  113e28:	0a00000c 	beq	113e60 <event_callback+0x2f4>
  113e2c:	e51b300c 	ldr	r3, [fp, #-12]
  113e30:	e593300c 	ldr	r3, [r3, #12]
  113e34:	e51b2008 	ldr	r2, [fp, #-8]
  113e38:	e1a022a2 	lsr	r2, r2, #5
  113e3c:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  113e40:	e51b3008 	ldr	r3, [fp, #-8]
  113e44:	e203301f 	and	r3, r3, #31
  113e48:	e1a03332 	lsr	r3, r2, r3
  113e4c:	e2033001 	and	r3, r3, #1
  113e50:	e3530000 	cmp	r3, #0
  113e54:	0a000001 	beq	113e60 <event_callback+0x2f4>
          do_signal = 1;
  113e58:	e3a03001 	mov	r3, #1
  113e5c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        }
      }
      if (sock->errevent != 0) {
  113e60:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  113e64:	e1d330be 	ldrh	r3, [r3, #14]
  113e68:	e3530000 	cmp	r3, #0
  113e6c:	0a000013 	beq	113ec0 <event_callback+0x354>
        if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
  113e70:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113e74:	e3530000 	cmp	r3, #0
  113e78:	1a000010 	bne	113ec0 <event_callback+0x354>
  113e7c:	e51b300c 	ldr	r3, [fp, #-12]
  113e80:	e5933010 	ldr	r3, [r3, #16]
  113e84:	e3530000 	cmp	r3, #0
  113e88:	0a00000c 	beq	113ec0 <event_callback+0x354>
  113e8c:	e51b300c 	ldr	r3, [fp, #-12]
  113e90:	e5933010 	ldr	r3, [r3, #16]
  113e94:	e51b2008 	ldr	r2, [fp, #-8]
  113e98:	e1a022a2 	lsr	r2, r2, #5
  113e9c:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  113ea0:	e51b3008 	ldr	r3, [fp, #-8]
  113ea4:	e203301f 	and	r3, r3, #31
  113ea8:	e1a03332 	lsr	r3, r2, r3
  113eac:	e2033001 	and	r3, r3, #1
  113eb0:	e3530000 	cmp	r3, #0
  113eb4:	0a000001 	beq	113ec0 <event_callback+0x354>
          do_signal = 1;
  113eb8:	e3a03001 	mov	r3, #1
  113ebc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        }
      }
      if (do_signal) {
  113ec0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  113ec4:	e3530000 	cmp	r3, #0
  113ec8:	0a000006 	beq	113ee8 <event_callback+0x37c>
        scb->sem_signalled = 1;
  113ecc:	e51b300c 	ldr	r3, [fp, #-12]
  113ed0:	e3a02001 	mov	r2, #1
  113ed4:	e5832014 	str	r2, [r3, #20]
        /* Don't call SYS_ARCH_UNPROTECT() before signaling the semaphore, as this might
           lead to the select thread taking itself off the list, invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
  113ed8:	e51b300c 	ldr	r3, [fp, #-12]
  113edc:	e2833018 	add	r3, r3, #24
  113ee0:	e1a00003 	mov	r0, r3
  113ee4:	ebffda02 	bl	10a6f4 <sys_sem_signal>
      }
    }
    /* unlock interrupts with each step */
    SYS_ARCH_UNPROTECT(lev);
  113ee8:	ebffb8d9 	bl	102254 <rt_exit_critical>
    /* this makes sure interrupt protection time is short */
    SYS_ARCH_PROTECT(lev);
  113eec:	ebffb8d2 	bl	10223c <rt_enter_critical>
    if (last_select_cb_ctr != select_cb_ctr) {
  113ef0:	e30e3c24 	movw	r3, #60452	; 0xec24
  113ef4:	e3403014 	movt	r3, #20
  113ef8:	e5933000 	ldr	r3, [r3]
  113efc:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  113f00:	e1520003 	cmp	r2, r3
  113f04:	0a000000 	beq	113f0c <event_callback+0x3a0>
      /* someone has changed select_cb_list, restart at the beginning */
      goto again;
  113f08:	eaffff98 	b	113d70 <event_callback+0x204>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
  113f0c:	e51b300c 	ldr	r3, [fp, #-12]
  113f10:	e5933000 	ldr	r3, [r3]
  113f14:	e50b300c 	str	r3, [fp, #-12]
  113f18:	e51b300c 	ldr	r3, [fp, #-12]
  113f1c:	e3530000 	cmp	r3, #0
  113f20:	1affff97 	bne	113d84 <event_callback+0x218>
    }
  }
  SYS_ARCH_UNPROTECT(lev);
  113f24:	ebffb8ca 	bl	102254 <rt_exit_critical>
  113f28:	ea000002 	b	113f38 <event_callback+0x3cc>
    return;
  113f2c:	e320f000 	nop	{0}
  113f30:	ea000000 	b	113f38 <event_callback+0x3cc>
      return;
  113f34:	e320f000 	nop	{0}
}
  113f38:	e24bd004 	sub	sp, fp, #4
  113f3c:	e8bd8800 	pop	{fp, pc}

00113f40 <lwip_shutdown>:
/**
 * Close one end of a full-duplex connection.
 */
int
lwip_shutdown(int s, int how)
{
  113f40:	e92d4800 	push	{fp, lr}
  113f44:	e28db004 	add	fp, sp, #4
  113f48:	e24dd028 	sub	sp, sp, #40	; 0x28
  113f4c:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  113f50:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  struct lwip_sock *sock;
  err_t err;
  u8_t shut_rx = 0, shut_tx = 0;
  113f54:	e3a03000 	mov	r3, #0
  113f58:	e54b3005 	strb	r3, [fp, #-5]
  113f5c:	e3a03000 	mov	r3, #0
  113f60:	e54b3006 	strb	r3, [fp, #-6]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_shutdown(%d, how=%d)\n", s, how));

  sock = get_socket(s);
  113f64:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  113f68:	ebfff467 	bl	11110c <get_socket>
  113f6c:	e50b000c 	str	r0, [fp, #-12]
  if (!sock) {
  113f70:	e51b300c 	ldr	r3, [fp, #-12]
  113f74:	e3530000 	cmp	r3, #0
  113f78:	1a000001 	bne	113f84 <lwip_shutdown+0x44>
    return -1;
  113f7c:	e3e03000 	mvn	r3, #0
  113f80:	ea000067 	b	114124 <lwip_shutdown+0x1e4>
  }

  if (sock->conn != NULL) {
  113f84:	e51b300c 	ldr	r3, [fp, #-12]
  113f88:	e5933000 	ldr	r3, [r3]
  113f8c:	e3530000 	cmp	r3, #0
  113f90:	0a000014 	beq	113fe8 <lwip_shutdown+0xa8>
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
  113f94:	e51b300c 	ldr	r3, [fp, #-12]
  113f98:	e5933000 	ldr	r3, [r3]
  113f9c:	e5933000 	ldr	r3, [r3]
  113fa0:	e20330f0 	and	r3, r3, #240	; 0xf0
  113fa4:	e3530010 	cmp	r3, #16
  113fa8:	0a00001d 	beq	114024 <lwip_shutdown+0xe4>
      sock_set_errno(sock, EOPNOTSUPP);
  113fac:	e3a0305f 	mov	r3, #95	; 0x5f
  113fb0:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  113fb4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  113fb8:	e6ef2073 	uxtb	r2, r3
  113fbc:	e51b300c 	ldr	r3, [fp, #-12]
  113fc0:	e5c32010 	strb	r2, [r3, #16]
  113fc4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  113fc8:	e3530000 	cmp	r3, #0
  113fcc:	0a000003 	beq	113fe0 <lwip_shutdown+0xa0>
  113fd0:	eb00943a 	bl	1390c0 <__errno_location>
  113fd4:	e1a02000 	mov	r2, r0
  113fd8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  113fdc:	e5823000 	str	r3, [r2]
      return -1;
  113fe0:	e3e03000 	mvn	r3, #0
  113fe4:	ea00004e 	b	114124 <lwip_shutdown+0x1e4>
    }
  } else {
    sock_set_errno(sock, ENOTCONN);
  113fe8:	e3a0306b 	mov	r3, #107	; 0x6b
  113fec:	e50b3010 	str	r3, [fp, #-16]
  113ff0:	e51b3010 	ldr	r3, [fp, #-16]
  113ff4:	e6ef2073 	uxtb	r2, r3
  113ff8:	e51b300c 	ldr	r3, [fp, #-12]
  113ffc:	e5c32010 	strb	r2, [r3, #16]
  114000:	e51b3010 	ldr	r3, [fp, #-16]
  114004:	e3530000 	cmp	r3, #0
  114008:	0a000003 	beq	11401c <lwip_shutdown+0xdc>
  11400c:	eb00942b 	bl	1390c0 <__errno_location>
  114010:	e1a02000 	mov	r2, r0
  114014:	e51b3010 	ldr	r3, [fp, #-16]
  114018:	e5823000 	str	r3, [r2]
    return -1;
  11401c:	e3e03000 	mvn	r3, #0
  114020:	ea00003f 	b	114124 <lwip_shutdown+0x1e4>
  }

  if (how == SHUT_RD) {
  114024:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114028:	e3530000 	cmp	r3, #0
  11402c:	1a000002 	bne	11403c <lwip_shutdown+0xfc>
    shut_rx = 1;
  114030:	e3a03001 	mov	r3, #1
  114034:	e54b3005 	strb	r3, [fp, #-5]
  114038:	ea00001c 	b	1140b0 <lwip_shutdown+0x170>
  } else if (how == SHUT_WR) {
  11403c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114040:	e3530001 	cmp	r3, #1
  114044:	1a000002 	bne	114054 <lwip_shutdown+0x114>
    shut_tx = 1;
  114048:	e3a03001 	mov	r3, #1
  11404c:	e54b3006 	strb	r3, [fp, #-6]
  114050:	ea000016 	b	1140b0 <lwip_shutdown+0x170>
  } else if (how == SHUT_RDWR) {
  114054:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114058:	e3530002 	cmp	r3, #2
  11405c:	1a000004 	bne	114074 <lwip_shutdown+0x134>
    shut_rx = 1;
  114060:	e3a03001 	mov	r3, #1
  114064:	e54b3005 	strb	r3, [fp, #-5]
    shut_tx = 1;
  114068:	e3a03001 	mov	r3, #1
  11406c:	e54b3006 	strb	r3, [fp, #-6]
  114070:	ea00000e 	b	1140b0 <lwip_shutdown+0x170>
  } else {
    sock_set_errno(sock, EINVAL);
  114074:	e3a03016 	mov	r3, #22
  114078:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  11407c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  114080:	e6ef2073 	uxtb	r2, r3
  114084:	e51b300c 	ldr	r3, [fp, #-12]
  114088:	e5c32010 	strb	r2, [r3, #16]
  11408c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  114090:	e3530000 	cmp	r3, #0
  114094:	0a000003 	beq	1140a8 <lwip_shutdown+0x168>
  114098:	eb009408 	bl	1390c0 <__errno_location>
  11409c:	e1a02000 	mov	r2, r0
  1140a0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1140a4:	e5823000 	str	r3, [r2]
    return -1;
  1140a8:	e3e03000 	mvn	r3, #0
  1140ac:	ea00001c 	b	114124 <lwip_shutdown+0x1e4>
  }
  err = netconn_shutdown(sock->conn, shut_rx, shut_tx);
  1140b0:	e51b300c 	ldr	r3, [fp, #-12]
  1140b4:	e5933000 	ldr	r3, [r3]
  1140b8:	e55b2006 	ldrb	r2, [fp, #-6]
  1140bc:	e55b1005 	ldrb	r1, [fp, #-5]
  1140c0:	e1a00003 	mov	r0, r3
  1140c4:	ebffe0c3 	bl	10c3d8 <netconn_shutdown>
  1140c8:	e1a03000 	mov	r3, r0
  1140cc:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb

  sock_set_errno(sock, err_to_errno(err));
  1140d0:	e15b31d5 	ldrsb	r3, [fp, #-21]	; 0xffffffeb
  1140d4:	e1a00003 	mov	r0, r3
  1140d8:	ebffefe3 	bl	11006c <err_to_errno>
  1140dc:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
  1140e0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1140e4:	e6ef2073 	uxtb	r2, r3
  1140e8:	e51b300c 	ldr	r3, [fp, #-12]
  1140ec:	e5c32010 	strb	r2, [r3, #16]
  1140f0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1140f4:	e3530000 	cmp	r3, #0
  1140f8:	0a000003 	beq	11410c <lwip_shutdown+0x1cc>
  1140fc:	eb0093ef 	bl	1390c0 <__errno_location>
  114100:	e1a02000 	mov	r2, r0
  114104:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  114108:	e5823000 	str	r3, [r2]
  return (err == ERR_OK ? 0 : -1);
  11410c:	e15b31d5 	ldrsb	r3, [fp, #-21]	; 0xffffffeb
  114110:	e3530000 	cmp	r3, #0
  114114:	1a000001 	bne	114120 <lwip_shutdown+0x1e0>
  114118:	e3a03000 	mov	r3, #0
  11411c:	ea000000 	b	114124 <lwip_shutdown+0x1e4>
  114120:	e3e03000 	mvn	r3, #0
}
  114124:	e1a00003 	mov	r0, r3
  114128:	e24bd004 	sub	sp, fp, #4
  11412c:	e8bd8800 	pop	{fp, pc}

00114130 <lwip_getaddrname>:

static int
lwip_getaddrname(int s, struct sockaddr *name, socklen_t *namelen, u8_t local)
{
  114130:	e92d4810 	push	{r4, fp, lr}
  114134:	e28db008 	add	fp, sp, #8
  114138:	e24dd03c 	sub	sp, sp, #60	; 0x3c
  11413c:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
  114140:	e50b103c 	str	r1, [fp, #-60]	; 0xffffffc4
  114144:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
  114148:	e54b3041 	strb	r3, [fp, #-65]	; 0xffffffbf
  union sockaddr_aligned saddr;
  ip_addr_t naddr;
  u16_t port;
  err_t err;

  sock = get_socket(s);
  11414c:	e51b0038 	ldr	r0, [fp, #-56]	; 0xffffffc8
  114150:	ebfff3ed 	bl	11110c <get_socket>
  114154:	e50b0010 	str	r0, [fp, #-16]
  if (!sock) {
  114158:	e51b3010 	ldr	r3, [fp, #-16]
  11415c:	e3530000 	cmp	r3, #0
  114160:	1a000001 	bne	11416c <lwip_getaddrname+0x3c>
    return -1;
  114164:	e3e03000 	mvn	r3, #0
  114168:	ea00004d 	b	1142a4 <lwip_getaddrname+0x174>
  }

  /* get the IP address and port */
  err = netconn_getaddr(sock->conn, &naddr, &port, local);
  11416c:	e51b3010 	ldr	r3, [fp, #-16]
  114170:	e5930000 	ldr	r0, [r3]
  114174:	e55b3041 	ldrb	r3, [fp, #-65]	; 0xffffffbf
  114178:	e24b2032 	sub	r2, fp, #50	; 0x32
  11417c:	e24b1030 	sub	r1, fp, #48	; 0x30
  114180:	ebffdd45 	bl	10b69c <netconn_getaddr>
  114184:	e1a03000 	mov	r3, r0
  114188:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  if (err != ERR_OK) {
  11418c:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  114190:	e3530000 	cmp	r3, #0
  114194:	0a000010 	beq	1141dc <lwip_getaddrname+0xac>
    sock_set_errno(sock, err_to_errno(err));
  114198:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  11419c:	e1a00003 	mov	r0, r3
  1141a0:	ebffefb1 	bl	11006c <err_to_errno>
  1141a4:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
  1141a8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1141ac:	e6ef2073 	uxtb	r2, r3
  1141b0:	e51b3010 	ldr	r3, [fp, #-16]
  1141b4:	e5c32010 	strb	r2, [r3, #16]
  1141b8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1141bc:	e3530000 	cmp	r3, #0
  1141c0:	0a000003 	beq	1141d4 <lwip_getaddrname+0xa4>
  1141c4:	eb0093bd 	bl	1390c0 <__errno_location>
  1141c8:	e1a02000 	mov	r2, r0
  1141cc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1141d0:	e5823000 	str	r3, [r2]
    return -1;
  1141d4:	e3e03000 	mvn	r3, #0
  1141d8:	ea000031 	b	1142a4 <lwip_getaddrname+0x174>
    ip4_2_ipv4_mapped_ipv6(ip_2_ip6(&naddr), ip_2_ip4(&naddr));
    IP_SET_TYPE_VAL(naddr, IPADDR_TYPE_V6);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  IPADDR_PORT_TO_SOCKADDR(&saddr, &naddr, port);
  1141dc:	e24b302c 	sub	r3, fp, #44	; 0x2c
  1141e0:	e3a02010 	mov	r2, #16
  1141e4:	e5c32000 	strb	r2, [r3]
  1141e8:	e24b302c 	sub	r3, fp, #44	; 0x2c
  1141ec:	e3a02002 	mov	r2, #2
  1141f0:	e5c32001 	strb	r2, [r3, #1]
  1141f4:	e15b33b2 	ldrh	r3, [fp, #-50]	; 0xffffffce
  1141f8:	e24b402c 	sub	r4, fp, #44	; 0x2c
  1141fc:	e1a00003 	mov	r0, r3
  114200:	eb00096e 	bl	1167c0 <lwip_htons>
  114204:	e1a03000 	mov	r3, r0
  114208:	e1c430b2 	strh	r3, [r4, #2]
  11420c:	e24b302c 	sub	r3, fp, #44	; 0x2c
  114210:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  114214:	e5832004 	str	r2, [r3, #4]
  114218:	e24b302c 	sub	r3, fp, #44	; 0x2c
  11421c:	e2833008 	add	r3, r3, #8
  114220:	e3a02008 	mov	r2, #8
  114224:	e3a01000 	mov	r1, #0
  114228:	e1a00003 	mov	r0, r3
  11422c:	eb00b48a 	bl	14145c <memset>

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getaddrname(%d, addr=", s));
  ip_addr_debug_print_val(SOCKETS_DEBUG, naddr);
  LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F")\n", port));

  if (*namelen > saddr.sa.sa_len) {
  114230:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  114234:	e5933000 	ldr	r3, [r3]
  114238:	e55b202c 	ldrb	r2, [fp, #-44]	; 0xffffffd4
  11423c:	e1530002 	cmp	r3, r2
  114240:	9a000003 	bls	114254 <lwip_getaddrname+0x124>
    *namelen = saddr.sa.sa_len;
  114244:	e55b302c 	ldrb	r3, [fp, #-44]	; 0xffffffd4
  114248:	e1a02003 	mov	r2, r3
  11424c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  114250:	e5832000 	str	r2, [r3]
  }
  MEMCPY(name, &saddr, *namelen);
  114254:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  114258:	e5932000 	ldr	r2, [r3]
  11425c:	e24b302c 	sub	r3, fp, #44	; 0x2c
  114260:	e1a01003 	mov	r1, r3
  114264:	e51b003c 	ldr	r0, [fp, #-60]	; 0xffffffc4
  114268:	eb00b343 	bl	140f7c <memcpy>

  sock_set_errno(sock, 0);
  11426c:	e3a03000 	mov	r3, #0
  114270:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  114274:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  114278:	e6ef2073 	uxtb	r2, r3
  11427c:	e51b3010 	ldr	r3, [fp, #-16]
  114280:	e5c32010 	strb	r2, [r3, #16]
  114284:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  114288:	e3530000 	cmp	r3, #0
  11428c:	0a000003 	beq	1142a0 <lwip_getaddrname+0x170>
  114290:	eb00938a 	bl	1390c0 <__errno_location>
  114294:	e1a02000 	mov	r2, r0
  114298:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11429c:	e5823000 	str	r3, [r2]
  return 0;
  1142a0:	e3a03000 	mov	r3, #0
}
  1142a4:	e1a00003 	mov	r0, r3
  1142a8:	e24bd008 	sub	sp, fp, #8
  1142ac:	e8bd8810 	pop	{r4, fp, pc}

001142b0 <lwip_getpeername>:

int
lwip_getpeername(int s, struct sockaddr *name, socklen_t *namelen)
{
  1142b0:	e92d4800 	push	{fp, lr}
  1142b4:	e28db004 	add	fp, sp, #4
  1142b8:	e24dd010 	sub	sp, sp, #16
  1142bc:	e50b0008 	str	r0, [fp, #-8]
  1142c0:	e50b100c 	str	r1, [fp, #-12]
  1142c4:	e50b2010 	str	r2, [fp, #-16]
  return lwip_getaddrname(s, name, namelen, 0);
  1142c8:	e3a03000 	mov	r3, #0
  1142cc:	e51b2010 	ldr	r2, [fp, #-16]
  1142d0:	e51b100c 	ldr	r1, [fp, #-12]
  1142d4:	e51b0008 	ldr	r0, [fp, #-8]
  1142d8:	ebffff94 	bl	114130 <lwip_getaddrname>
  1142dc:	e1a03000 	mov	r3, r0
}
  1142e0:	e1a00003 	mov	r0, r3
  1142e4:	e24bd004 	sub	sp, fp, #4
  1142e8:	e8bd8800 	pop	{fp, pc}

001142ec <lwip_getsockname>:

int
lwip_getsockname(int s, struct sockaddr *name, socklen_t *namelen)
{
  1142ec:	e92d4800 	push	{fp, lr}
  1142f0:	e28db004 	add	fp, sp, #4
  1142f4:	e24dd010 	sub	sp, sp, #16
  1142f8:	e50b0008 	str	r0, [fp, #-8]
  1142fc:	e50b100c 	str	r1, [fp, #-12]
  114300:	e50b2010 	str	r2, [fp, #-16]
  return lwip_getaddrname(s, name, namelen, 1);
  114304:	e3a03001 	mov	r3, #1
  114308:	e51b2010 	ldr	r2, [fp, #-16]
  11430c:	e51b100c 	ldr	r1, [fp, #-12]
  114310:	e51b0008 	ldr	r0, [fp, #-8]
  114314:	ebffff85 	bl	114130 <lwip_getaddrname>
  114318:	e1a03000 	mov	r3, r0
}
  11431c:	e1a00003 	mov	r0, r3
  114320:	e24bd004 	sub	sp, fp, #4
  114324:	e8bd8800 	pop	{fp, pc}

00114328 <lwip_getsockopt>:

int
lwip_getsockopt(int s, int level, int optname, void *optval, socklen_t *optlen)
{
  114328:	e92d4800 	push	{fp, lr}
  11432c:	e28db004 	add	fp, sp, #4
  114330:	e24dd028 	sub	sp, sp, #40	; 0x28
  114334:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  114338:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  11433c:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  114340:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  u8_t err;
  struct lwip_sock *sock = get_socket(s);
  114344:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  114348:	ebfff36f 	bl	11110c <get_socket>
  11434c:	e50b0008 	str	r0, [fp, #-8]
#if !LWIP_TCPIP_CORE_LOCKING
  LWIP_SETGETSOCKOPT_DATA_VAR_DECLARE(data);
#endif /* !LWIP_TCPIP_CORE_LOCKING */

  if (!sock) {
  114350:	e51b3008 	ldr	r3, [fp, #-8]
  114354:	e3530000 	cmp	r3, #0
  114358:	1a000001 	bne	114364 <lwip_getsockopt+0x3c>
    return -1;
  11435c:	e3e03000 	mvn	r3, #0
  114360:	ea000036 	b	114440 <lwip_getsockopt+0x118>
  }

  if ((NULL == optval) || (NULL == optlen)) {
  114364:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  114368:	e3530000 	cmp	r3, #0
  11436c:	0a000002 	beq	11437c <lwip_getsockopt+0x54>
  114370:	e59b3004 	ldr	r3, [fp, #4]
  114374:	e3530000 	cmp	r3, #0
  114378:	1a00000e 	bne	1143b8 <lwip_getsockopt+0x90>
    sock_set_errno(sock, EFAULT);
  11437c:	e3a0300e 	mov	r3, #14
  114380:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  114384:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  114388:	e6ef2073 	uxtb	r2, r3
  11438c:	e51b3008 	ldr	r3, [fp, #-8]
  114390:	e5c32010 	strb	r2, [r3, #16]
  114394:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  114398:	e3530000 	cmp	r3, #0
  11439c:	0a000003 	beq	1143b0 <lwip_getsockopt+0x88>
  1143a0:	eb009346 	bl	1390c0 <__errno_location>
  1143a4:	e1a02000 	mov	r2, r0
  1143a8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1143ac:	e5823000 	str	r3, [r2]
    return -1;
  1143b0:	e3e03000 	mvn	r3, #0
  1143b4:	ea000021 	b	114440 <lwip_getsockopt+0x118>
  }

#if LWIP_TCPIP_CORE_LOCKING
  /* core-locking can just call the -impl function */
  LOCK_TCPIP_CORE();
  1143b8:	e30005e4 	movw	r0, #1508	; 0x5e4
  1143bc:	e3400015 	movt	r0, #21
  1143c0:	ebffd946 	bl	10a8e0 <sys_mutex_lock>
  err = lwip_getsockopt_impl(s, level, optname, optval, optlen);
  1143c4:	e59b3004 	ldr	r3, [fp, #4]
  1143c8:	e58d3000 	str	r3, [sp]
  1143cc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1143d0:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1143d4:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  1143d8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1143dc:	eb00001a 	bl	11444c <lwip_getsockopt_impl>
  1143e0:	e1a03000 	mov	r3, r0
  1143e4:	e54b3009 	strb	r3, [fp, #-9]
  UNLOCK_TCPIP_CORE();
  1143e8:	e30005e4 	movw	r0, #1508	; 0x5e4
  1143ec:	e3400015 	movt	r0, #21
  1143f0:	ebffd946 	bl	10a910 <sys_mutex_unlock>
  /* maybe lwip_getsockopt_internal has changed err */
  err = LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).err;
  LWIP_SETGETSOCKOPT_DATA_VAR_FREE(data);
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sock_set_errno(sock, err);
  1143f4:	e55b3009 	ldrb	r3, [fp, #-9]
  1143f8:	e50b3010 	str	r3, [fp, #-16]
  1143fc:	e51b3010 	ldr	r3, [fp, #-16]
  114400:	e6ef2073 	uxtb	r2, r3
  114404:	e51b3008 	ldr	r3, [fp, #-8]
  114408:	e5c32010 	strb	r2, [r3, #16]
  11440c:	e51b3010 	ldr	r3, [fp, #-16]
  114410:	e3530000 	cmp	r3, #0
  114414:	0a000003 	beq	114428 <lwip_getsockopt+0x100>
  114418:	eb009328 	bl	1390c0 <__errno_location>
  11441c:	e1a02000 	mov	r2, r0
  114420:	e51b3010 	ldr	r3, [fp, #-16]
  114424:	e5823000 	str	r3, [r2]
  return err ? -1 : 0;
  114428:	e55b3009 	ldrb	r3, [fp, #-9]
  11442c:	e3530000 	cmp	r3, #0
  114430:	0a000001 	beq	11443c <lwip_getsockopt+0x114>
  114434:	e3e03000 	mvn	r3, #0
  114438:	ea000000 	b	114440 <lwip_getsockopt+0x118>
  11443c:	e3a03000 	mov	r3, #0
}
  114440:	e1a00003 	mov	r0, r3
  114444:	e24bd004 	sub	sp, fp, #4
  114448:	e8bd8800 	pop	{fp, pc}

0011444c <lwip_getsockopt_impl>:
/** lwip_getsockopt_impl: the actual implementation of getsockopt:
 * same argument as lwip_getsockopt, either called directly or through callback
 */
static u8_t
lwip_getsockopt_impl(int s, int level, int optname, void *optval, socklen_t *optlen)
{
  11444c:	e92d4800 	push	{fp, lr}
  114450:	e28db004 	add	fp, sp, #4
  114454:	e24dd028 	sub	sp, sp, #40	; 0x28
  114458:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  11445c:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  114460:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  114464:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
  u8_t err = 0;
  114468:	e3a03000 	mov	r3, #0
  11446c:	e54b3005 	strb	r3, [fp, #-5]
  struct lwip_sock *sock = tryget_socket(s);
  114470:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  114474:	ebfff349 	bl	1111a0 <tryget_socket>
  114478:	e50b000c 	str	r0, [fp, #-12]
  if (!sock) {
  11447c:	e51b300c 	ldr	r3, [fp, #-12]
  114480:	e3530000 	cmp	r3, #0
  114484:	1a000001 	bne	114490 <lwip_getsockopt_impl+0x44>
    return EBADF;
  114488:	e3a03009 	mov	r3, #9
  11448c:	ea00026a 	b	114e3c <lwip_getsockopt_impl+0x9f0>
  }

  switch (level) {
  114490:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  114494:	e3530006 	cmp	r3, #6
  114498:	0a0001fb 	beq	114c8c <lwip_getsockopt_impl+0x840>
  11449c:	e3530006 	cmp	r3, #6
  1144a0:	ca000002 	bgt	1144b0 <lwip_getsockopt_impl+0x64>
  1144a4:	e3530000 	cmp	r3, #0
  1144a8:	0a000155 	beq	114a04 <lwip_getsockopt_impl+0x5b8>
  1144ac:	ea00025e 	b	114e2c <lwip_getsockopt_impl+0x9e0>
  1144b0:	e35300ff 	cmp	r3, #255	; 0xff
  1144b4:	0a000258 	beq	114e1c <lwip_getsockopt_impl+0x9d0>
  1144b8:	e3002fff 	movw	r2, #4095	; 0xfff
  1144bc:	e1530002 	cmp	r3, r2
  1144c0:	1a000259 	bne	114e2c <lwip_getsockopt_impl+0x9e0>

/* Level: SOL_SOCKET */
  case SOL_SOCKET:
    switch (optname) {
  1144c4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1144c8:	e3012002 	movw	r2, #4098	; 0x1002
  1144cc:	e1530002 	cmp	r3, r2
  1144d0:	0a000114 	beq	114928 <lwip_getsockopt_impl+0x4dc>
  1144d4:	e3012002 	movw	r2, #4098	; 0x1002
  1144d8:	e1530002 	cmp	r3, r2
  1144dc:	ca00000b 	bgt	114510 <lwip_getsockopt_impl+0xc4>
  1144e0:	e3530004 	cmp	r3, #4
  1144e4:	0a000049 	beq	114610 <lwip_getsockopt_impl+0x1c4>
  1144e8:	e3530004 	cmp	r3, #4
  1144ec:	ca000002 	bgt	1144fc <lwip_getsockopt_impl+0xb0>
  1144f0:	e3530002 	cmp	r3, #2
  1144f4:	0a000019 	beq	114560 <lwip_getsockopt_impl+0x114>
  1144f8:	ea00013d 	b	1149f4 <lwip_getsockopt_impl+0x5a8>
  1144fc:	e3530008 	cmp	r3, #8
  114500:	0a000042 	beq	114610 <lwip_getsockopt_impl+0x1c4>
  114504:	e3530020 	cmp	r3, #32
  114508:	0a000040 	beq	114610 <lwip_getsockopt_impl+0x1c4>
  11450c:	ea000138 	b	1149f4 <lwip_getsockopt_impl+0x5a8>
  114510:	e3012007 	movw	r2, #4103	; 0x1007
  114514:	e1530002 	cmp	r3, r2
  114518:	0a000082 	beq	114728 <lwip_getsockopt_impl+0x2dc>
  11451c:	e3012007 	movw	r2, #4103	; 0x1007
  114520:	e1530002 	cmp	r3, r2
  114524:	ca000006 	bgt	114544 <lwip_getsockopt_impl+0xf8>
  114528:	e3012005 	movw	r2, #4101	; 0x1005
  11452c:	e1530002 	cmp	r3, r2
  114530:	0a0000ae 	beq	1147f0 <lwip_getsockopt_impl+0x3a4>
  114534:	e3012006 	movw	r2, #4102	; 0x1006
  114538:	e1530002 	cmp	r3, r2
  11453c:	0a0000d2 	beq	11488c <lwip_getsockopt_impl+0x440>
  114540:	ea00012b 	b	1149f4 <lwip_getsockopt_impl+0x5a8>
  114544:	e3012008 	movw	r2, #4104	; 0x1008
  114548:	e1530002 	cmp	r3, r2
  11454c:	0a00004a 	beq	11467c <lwip_getsockopt_impl+0x230>
  114550:	e301200a 	movw	r2, #4106	; 0x100a
  114554:	e1530002 	cmp	r3, r2
  114558:	0a000104 	beq	114970 <lwip_getsockopt_impl+0x524>
  11455c:	ea000124 	b	1149f4 <lwip_getsockopt_impl+0x5a8>

#if LWIP_TCP
    case SO_ACCEPTCONN:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, *optlen, int);
  114560:	e59b3004 	ldr	r3, [fp, #4]
  114564:	e5933000 	ldr	r3, [r3]
  114568:	e3530003 	cmp	r3, #3
  11456c:	8a000001 	bhi	114578 <lwip_getsockopt_impl+0x12c>
  114570:	e3a03016 	mov	r3, #22
  114574:	ea000230 	b	114e3c <lwip_getsockopt_impl+0x9f0>
  114578:	e51b300c 	ldr	r3, [fp, #-12]
  11457c:	e5933000 	ldr	r3, [r3]
  114580:	e3530000 	cmp	r3, #0
  114584:	0a000004 	beq	11459c <lwip_getsockopt_impl+0x150>
  114588:	e51b300c 	ldr	r3, [fp, #-12]
  11458c:	e5933000 	ldr	r3, [r3]
  114590:	e5933008 	ldr	r3, [r3, #8]
  114594:	e3530000 	cmp	r3, #0
  114598:	1a000001 	bne	1145a4 <lwip_getsockopt_impl+0x158>
  11459c:	e3a03016 	mov	r3, #22
  1145a0:	ea000225 	b	114e3c <lwip_getsockopt_impl+0x9f0>
      if (NETCONNTYPE_GROUP(sock->conn->type) != NETCONN_TCP) {
  1145a4:	e51b300c 	ldr	r3, [fp, #-12]
  1145a8:	e5933000 	ldr	r3, [r3]
  1145ac:	e5933000 	ldr	r3, [r3]
  1145b0:	e20330f0 	and	r3, r3, #240	; 0xf0
  1145b4:	e3530010 	cmp	r3, #16
  1145b8:	0a000001 	beq	1145c4 <lwip_getsockopt_impl+0x178>
        return ENOPROTOOPT;
  1145bc:	e3a0305c 	mov	r3, #92	; 0x5c
  1145c0:	ea00021d 	b	114e3c <lwip_getsockopt_impl+0x9f0>
      }
      if ((sock->conn->pcb.tcp != NULL) && (sock->conn->pcb.tcp->state == LISTEN)) {
  1145c4:	e51b300c 	ldr	r3, [fp, #-12]
  1145c8:	e5933000 	ldr	r3, [r3]
  1145cc:	e5933008 	ldr	r3, [r3, #8]
  1145d0:	e3530000 	cmp	r3, #0
  1145d4:	0a000009 	beq	114600 <lwip_getsockopt_impl+0x1b4>
  1145d8:	e51b300c 	ldr	r3, [fp, #-12]
  1145dc:	e5933000 	ldr	r3, [r3]
  1145e0:	e5933008 	ldr	r3, [r3, #8]
  1145e4:	e5933014 	ldr	r3, [r3, #20]
  1145e8:	e3530001 	cmp	r3, #1
  1145ec:	1a000003 	bne	114600 <lwip_getsockopt_impl+0x1b4>
        *(int*)optval = 1;
  1145f0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1145f4:	e3a02001 	mov	r2, #1
  1145f8:	e5832000 	str	r2, [r3]
      } else {
        *(int*)optval = 0;
      }
      break;
  1145fc:	ea0000ff 	b	114a00 <lwip_getsockopt_impl+0x5b4>
        *(int*)optval = 0;
  114600:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114604:	e3a02000 	mov	r2, #0
  114608:	e5832000 	str	r2, [r3]
      break;
  11460c:	ea0000fb 	b	114a00 <lwip_getsockopt_impl+0x5b4>
    case SO_BROADCAST:
    case SO_KEEPALIVE:
#if SO_REUSE
    case SO_REUSEADDR:
#endif /* SO_REUSE */
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, *optlen, int);
  114610:	e59b3004 	ldr	r3, [fp, #4]
  114614:	e5933000 	ldr	r3, [r3]
  114618:	e3530003 	cmp	r3, #3
  11461c:	8a000001 	bhi	114628 <lwip_getsockopt_impl+0x1dc>
  114620:	e3a03016 	mov	r3, #22
  114624:	ea000204 	b	114e3c <lwip_getsockopt_impl+0x9f0>
  114628:	e51b300c 	ldr	r3, [fp, #-12]
  11462c:	e5933000 	ldr	r3, [r3]
  114630:	e3530000 	cmp	r3, #0
  114634:	0a000004 	beq	11464c <lwip_getsockopt_impl+0x200>
  114638:	e51b300c 	ldr	r3, [fp, #-12]
  11463c:	e5933000 	ldr	r3, [r3]
  114640:	e5933008 	ldr	r3, [r3, #8]
  114644:	e3530000 	cmp	r3, #0
  114648:	1a000001 	bne	114654 <lwip_getsockopt_impl+0x208>
  11464c:	e3a03016 	mov	r3, #22
  114650:	ea0001f9 	b	114e3c <lwip_getsockopt_impl+0x9f0>
      *(int*)optval = ip_get_option(sock->conn->pcb.ip, optname);
  114654:	e51b300c 	ldr	r3, [fp, #-12]
  114658:	e5933000 	ldr	r3, [r3]
  11465c:	e5933008 	ldr	r3, [r3, #8]
  114660:	e5d33008 	ldrb	r3, [r3, #8]
  114664:	e1a02003 	mov	r2, r3
  114668:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11466c:	e0022003 	and	r2, r2, r3
  114670:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114674:	e5832000 	str	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, SOL_SOCKET, optname=0x%x, ..) = %s\n",
                                  s, optname, (*(int*)optval?"on":"off")));
      break;
  114678:	ea0000e0 	b	114a00 <lwip_getsockopt_impl+0x5b4>

    case SO_TYPE:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, *optlen, int);
  11467c:	e59b3004 	ldr	r3, [fp, #4]
  114680:	e5933000 	ldr	r3, [r3]
  114684:	e3530003 	cmp	r3, #3
  114688:	8a000001 	bhi	114694 <lwip_getsockopt_impl+0x248>
  11468c:	e3a03016 	mov	r3, #22
  114690:	ea0001e9 	b	114e3c <lwip_getsockopt_impl+0x9f0>
  114694:	e51b300c 	ldr	r3, [fp, #-12]
  114698:	e5933000 	ldr	r3, [r3]
  11469c:	e3530000 	cmp	r3, #0
  1146a0:	1a000001 	bne	1146ac <lwip_getsockopt_impl+0x260>
  1146a4:	e3a03016 	mov	r3, #22
  1146a8:	ea0001e3 	b	114e3c <lwip_getsockopt_impl+0x9f0>
      switch (NETCONNTYPE_GROUP(netconn_type(sock->conn))) {
  1146ac:	e51b300c 	ldr	r3, [fp, #-12]
  1146b0:	e5933000 	ldr	r3, [r3]
  1146b4:	e5933000 	ldr	r3, [r3]
  1146b8:	e20330f0 	and	r3, r3, #240	; 0xf0
  1146bc:	e3530020 	cmp	r3, #32
  1146c0:	0a00000c 	beq	1146f8 <lwip_getsockopt_impl+0x2ac>
  1146c4:	e3530040 	cmp	r3, #64	; 0x40
  1146c8:	0a000002 	beq	1146d8 <lwip_getsockopt_impl+0x28c>
  1146cc:	e3530010 	cmp	r3, #16
  1146d0:	0a000004 	beq	1146e8 <lwip_getsockopt_impl+0x29c>
  1146d4:	ea00000b 	b	114708 <lwip_getsockopt_impl+0x2bc>
      case NETCONN_RAW:
        *(int*)optval = SOCK_RAW;
  1146d8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1146dc:	e3a02003 	mov	r2, #3
  1146e0:	e5832000 	str	r2, [r3]
        break;
  1146e4:	ea00000e 	b	114724 <lwip_getsockopt_impl+0x2d8>
      case NETCONN_TCP:
        *(int*)optval = SOCK_STREAM;
  1146e8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1146ec:	e3a02001 	mov	r2, #1
  1146f0:	e5832000 	str	r2, [r3]
        break;
  1146f4:	ea00000a 	b	114724 <lwip_getsockopt_impl+0x2d8>
      case NETCONN_UDP:
        *(int*)optval = SOCK_DGRAM;
  1146f8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1146fc:	e3a02002 	mov	r2, #2
  114700:	e5832000 	str	r2, [r3]
        break;
  114704:	ea000006 	b	114724 <lwip_getsockopt_impl+0x2d8>
      default: /* unrecognized socket type */
        *(int*)optval = netconn_type(sock->conn);
  114708:	e51b300c 	ldr	r3, [fp, #-12]
  11470c:	e5933000 	ldr	r3, [r3]
  114710:	e5933000 	ldr	r3, [r3]
  114714:	e1a02003 	mov	r2, r3
  114718:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11471c:	e5832000 	str	r2, [r3]
                    ("lwip_getsockopt(%d, SOL_SOCKET, SO_TYPE): unrecognized socket type %d\n",
                    s, *(int *)optval));
      }  /* switch (netconn_type(sock->conn)) */
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, SOL_SOCKET, SO_TYPE) = %d\n",
                  s, *(int *)optval));
      break;
  114720:	ea0000b6 	b	114a00 <lwip_getsockopt_impl+0x5b4>
  114724:	ea0000b5 	b	114a00 <lwip_getsockopt_impl+0x5b4>

    case SO_ERROR:
      LWIP_SOCKOPT_CHECK_OPTLEN(*optlen, int);
  114728:	e59b3004 	ldr	r3, [fp, #4]
  11472c:	e5933000 	ldr	r3, [r3]
  114730:	e3530003 	cmp	r3, #3
  114734:	8a000001 	bhi	114740 <lwip_getsockopt_impl+0x2f4>
  114738:	e3a03016 	mov	r3, #22
  11473c:	ea0001be 	b	114e3c <lwip_getsockopt_impl+0x9f0>
      /* only overwrite ERR_OK or temporary errors */
      if (((sock->err == 0) || (sock->err == EINPROGRESS)) && (sock->conn != NULL)) {
  114740:	e51b300c 	ldr	r3, [fp, #-12]
  114744:	e5d33010 	ldrb	r3, [r3, #16]
  114748:	e3530000 	cmp	r3, #0
  11474c:	0a000003 	beq	114760 <lwip_getsockopt_impl+0x314>
  114750:	e51b300c 	ldr	r3, [fp, #-12]
  114754:	e5d33010 	ldrb	r3, [r3, #16]
  114758:	e3530073 	cmp	r3, #115	; 0x73
  11475c:	1a000014 	bne	1147b4 <lwip_getsockopt_impl+0x368>
  114760:	e51b300c 	ldr	r3, [fp, #-12]
  114764:	e5933000 	ldr	r3, [r3]
  114768:	e3530000 	cmp	r3, #0
  11476c:	0a000010 	beq	1147b4 <lwip_getsockopt_impl+0x368>
        sock_set_errno(sock, err_to_errno(sock->conn->last_err));
  114770:	e51b300c 	ldr	r3, [fp, #-12]
  114774:	e5933000 	ldr	r3, [r3]
  114778:	e1d330dc 	ldrsb	r3, [r3, #12]
  11477c:	e1a00003 	mov	r0, r3
  114780:	ebffee39 	bl	11006c <err_to_errno>
  114784:	e50b0010 	str	r0, [fp, #-16]
  114788:	e51b3010 	ldr	r3, [fp, #-16]
  11478c:	e6ef2073 	uxtb	r2, r3
  114790:	e51b300c 	ldr	r3, [fp, #-12]
  114794:	e5c32010 	strb	r2, [r3, #16]
  114798:	e51b3010 	ldr	r3, [fp, #-16]
  11479c:	e3530000 	cmp	r3, #0
  1147a0:	0a000003 	beq	1147b4 <lwip_getsockopt_impl+0x368>
  1147a4:	eb009245 	bl	1390c0 <__errno_location>
  1147a8:	e1a02000 	mov	r2, r0
  1147ac:	e51b3010 	ldr	r3, [fp, #-16]
  1147b0:	e5823000 	str	r3, [r2]
      }
      *(int *)optval = (sock->err == 0xFF ? (int)-1 : (int)sock->err);
  1147b4:	e51b300c 	ldr	r3, [fp, #-12]
  1147b8:	e5d33010 	ldrb	r3, [r3, #16]
  1147bc:	e35300ff 	cmp	r3, #255	; 0xff
  1147c0:	0a000003 	beq	1147d4 <lwip_getsockopt_impl+0x388>
  1147c4:	e51b300c 	ldr	r3, [fp, #-12]
  1147c8:	e5d33010 	ldrb	r3, [r3, #16]
  1147cc:	e1a02003 	mov	r2, r3
  1147d0:	ea000000 	b	1147d8 <lwip_getsockopt_impl+0x38c>
  1147d4:	e3e02000 	mvn	r2, #0
  1147d8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1147dc:	e5832000 	str	r2, [r3]
      sock->err = 0;
  1147e0:	e51b300c 	ldr	r3, [fp, #-12]
  1147e4:	e3a02000 	mov	r2, #0
  1147e8:	e5c32010 	strb	r2, [r3, #16]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, SOL_SOCKET, SO_ERROR) = %d\n",
                  s, *(int *)optval));
      break;
  1147ec:	ea000083 	b	114a00 <lwip_getsockopt_impl+0x5b4>

#if LWIP_SO_SNDTIMEO
    case SO_SNDTIMEO:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, *optlen, LWIP_SO_SNDRCVTIMEO_OPTTYPE);
  1147f0:	e59b3004 	ldr	r3, [fp, #4]
  1147f4:	e5933000 	ldr	r3, [r3]
  1147f8:	e353000f 	cmp	r3, #15
  1147fc:	8a000001 	bhi	114808 <lwip_getsockopt_impl+0x3bc>
  114800:	e3a03016 	mov	r3, #22
  114804:	ea00018c 	b	114e3c <lwip_getsockopt_impl+0x9f0>
  114808:	e51b300c 	ldr	r3, [fp, #-12]
  11480c:	e5933000 	ldr	r3, [r3]
  114810:	e3530000 	cmp	r3, #0
  114814:	1a000001 	bne	114820 <lwip_getsockopt_impl+0x3d4>
  114818:	e3a03016 	mov	r3, #22
  11481c:	ea000186 	b	114e3c <lwip_getsockopt_impl+0x9f0>
      LWIP_SO_SNDRCVTIMEO_SET(optval, netconn_get_sendtimeout(sock->conn));
  114820:	e51b300c 	ldr	r3, [fp, #-12]
  114824:	e5933000 	ldr	r3, [r3]
  114828:	e5933020 	ldr	r3, [r3, #32]
  11482c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  114830:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  114834:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  114838:	e3413062 	movt	r3, #4194	; 0x1062
  11483c:	e0832392 	umull	r2, r3, r2, r3
  114840:	e1a03323 	lsr	r3, r3, #6
  114844:	e1a02003 	mov	r2, r3
  114848:	e3a03000 	mov	r3, #0
  11484c:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  114850:	e1c120f0 	strd	r2, [r1]
  114854:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  114858:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  11485c:	e3413062 	movt	r3, #4194	; 0x1062
  114860:	e0832391 	umull	r2, r3, r1, r3
  114864:	e1a03323 	lsr	r3, r3, #6
  114868:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  11486c:	e0030392 	mul	r3, r2, r3
  114870:	e0413003 	sub	r3, r1, r3
  114874:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  114878:	e0030392 	mul	r3, r2, r3
  11487c:	e1a02003 	mov	r2, r3
  114880:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114884:	e5832008 	str	r2, [r3, #8]
      break;
  114888:	ea00005c 	b	114a00 <lwip_getsockopt_impl+0x5b4>
#endif /* LWIP_SO_SNDTIMEO */
#if LWIP_SO_RCVTIMEO
    case SO_RCVTIMEO:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, *optlen, LWIP_SO_SNDRCVTIMEO_OPTTYPE);
  11488c:	e59b3004 	ldr	r3, [fp, #4]
  114890:	e5933000 	ldr	r3, [r3]
  114894:	e353000f 	cmp	r3, #15
  114898:	8a000001 	bhi	1148a4 <lwip_getsockopt_impl+0x458>
  11489c:	e3a03016 	mov	r3, #22
  1148a0:	ea000165 	b	114e3c <lwip_getsockopt_impl+0x9f0>
  1148a4:	e51b300c 	ldr	r3, [fp, #-12]
  1148a8:	e5933000 	ldr	r3, [r3]
  1148ac:	e3530000 	cmp	r3, #0
  1148b0:	1a000001 	bne	1148bc <lwip_getsockopt_impl+0x470>
  1148b4:	e3a03016 	mov	r3, #22
  1148b8:	ea00015f 	b	114e3c <lwip_getsockopt_impl+0x9f0>
      LWIP_SO_SNDRCVTIMEO_SET(optval, netconn_get_recvtimeout(sock->conn));
  1148bc:	e51b300c 	ldr	r3, [fp, #-12]
  1148c0:	e5933000 	ldr	r3, [r3]
  1148c4:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  1148c8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  1148cc:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1148d0:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  1148d4:	e3413062 	movt	r3, #4194	; 0x1062
  1148d8:	e0832392 	umull	r2, r3, r2, r3
  1148dc:	e1a03323 	lsr	r3, r3, #6
  1148e0:	e1a02003 	mov	r2, r3
  1148e4:	e3a03000 	mov	r3, #0
  1148e8:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  1148ec:	e1c120f0 	strd	r2, [r1]
  1148f0:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1148f4:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  1148f8:	e3413062 	movt	r3, #4194	; 0x1062
  1148fc:	e0832391 	umull	r2, r3, r1, r3
  114900:	e1a03323 	lsr	r3, r3, #6
  114904:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  114908:	e0030392 	mul	r3, r2, r3
  11490c:	e0413003 	sub	r3, r1, r3
  114910:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  114914:	e0030392 	mul	r3, r2, r3
  114918:	e1a02003 	mov	r2, r3
  11491c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114920:	e5832008 	str	r2, [r3, #8]
      break;
  114924:	ea000035 	b	114a00 <lwip_getsockopt_impl+0x5b4>
#endif /* LWIP_SO_RCVTIMEO */
#if LWIP_SO_RCVBUF
    case SO_RCVBUF:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, *optlen, int);
  114928:	e59b3004 	ldr	r3, [fp, #4]
  11492c:	e5933000 	ldr	r3, [r3]
  114930:	e3530003 	cmp	r3, #3
  114934:	8a000001 	bhi	114940 <lwip_getsockopt_impl+0x4f4>
  114938:	e3a03016 	mov	r3, #22
  11493c:	ea00013e 	b	114e3c <lwip_getsockopt_impl+0x9f0>
  114940:	e51b300c 	ldr	r3, [fp, #-12]
  114944:	e5933000 	ldr	r3, [r3]
  114948:	e3530000 	cmp	r3, #0
  11494c:	1a000001 	bne	114958 <lwip_getsockopt_impl+0x50c>
  114950:	e3a03016 	mov	r3, #22
  114954:	ea000138 	b	114e3c <lwip_getsockopt_impl+0x9f0>
      *(int *)optval = netconn_get_recvbufsize(sock->conn);
  114958:	e51b300c 	ldr	r3, [fp, #-12]
  11495c:	e5933000 	ldr	r3, [r3]
  114960:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  114964:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114968:	e5832000 	str	r2, [r3]
      break;
  11496c:	ea000023 	b	114a00 <lwip_getsockopt_impl+0x5b4>
      }
      break;
#endif /* LWIP_SO_LINGER */
#if LWIP_UDP
    case SO_NO_CHECK:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, *optlen, int, NETCONN_UDP);
  114970:	e59b3004 	ldr	r3, [fp, #4]
  114974:	e5933000 	ldr	r3, [r3]
  114978:	e3530003 	cmp	r3, #3
  11497c:	8a000001 	bhi	114988 <lwip_getsockopt_impl+0x53c>
  114980:	e3a03016 	mov	r3, #22
  114984:	ea00012c 	b	114e3c <lwip_getsockopt_impl+0x9f0>
  114988:	e51b300c 	ldr	r3, [fp, #-12]
  11498c:	e5933000 	ldr	r3, [r3]
  114990:	e3530000 	cmp	r3, #0
  114994:	0a000004 	beq	1149ac <lwip_getsockopt_impl+0x560>
  114998:	e51b300c 	ldr	r3, [fp, #-12]
  11499c:	e5933000 	ldr	r3, [r3]
  1149a0:	e5933008 	ldr	r3, [r3, #8]
  1149a4:	e3530000 	cmp	r3, #0
  1149a8:	1a000001 	bne	1149b4 <lwip_getsockopt_impl+0x568>
  1149ac:	e3a03016 	mov	r3, #22
  1149b0:	ea000121 	b	114e3c <lwip_getsockopt_impl+0x9f0>
  1149b4:	e51b300c 	ldr	r3, [fp, #-12]
  1149b8:	e5933000 	ldr	r3, [r3]
  1149bc:	e5933000 	ldr	r3, [r3]
  1149c0:	e20330f0 	and	r3, r3, #240	; 0xf0
  1149c4:	e3530020 	cmp	r3, #32
  1149c8:	0a000001 	beq	1149d4 <lwip_getsockopt_impl+0x588>
  1149cc:	e3a0305c 	mov	r3, #92	; 0x5c
  1149d0:	ea000119 	b	114e3c <lwip_getsockopt_impl+0x9f0>
      if ((udp_flags(sock->conn->pcb.udp) & UDP_FLAGS_UDPLITE) != 0) {
        /* this flag is only available for UDP, not for UDP lite */
        return EAFNOSUPPORT;
      }
#endif /* LWIP_UDPLITE */
      *(int*)optval = (udp_flags(sock->conn->pcb.udp) & UDP_FLAGS_NOCHKSUM) ? 1 : 0;
  1149d4:	e51b300c 	ldr	r3, [fp, #-12]
  1149d8:	e5933000 	ldr	r3, [r3]
  1149dc:	e5933008 	ldr	r3, [r3, #8]
  1149e0:	e5d33010 	ldrb	r3, [r3, #16]
  1149e4:	e2032001 	and	r2, r3, #1
  1149e8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1149ec:	e5832000 	str	r2, [r3]
      break;
  1149f0:	ea000002 	b	114a00 <lwip_getsockopt_impl+0x5b4>
#endif /* LWIP_UDP*/
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, SOL_SOCKET, UNIMPL: optname=0x%x, ..)\n",
                  s, optname));
      err = ENOPROTOOPT;
  1149f4:	e3a0305c 	mov	r3, #92	; 0x5c
  1149f8:	e54b3005 	strb	r3, [fp, #-5]
      break;
  1149fc:	e320f000 	nop	{0}
    }  /* switch (optname) */
    break;
  114a00:	ea00010c 	b	114e38 <lwip_getsockopt_impl+0x9ec>

/* Level: IPPROTO_IP */
  case IPPROTO_IP:
    switch (optname) {
  114a04:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  114a08:	e2433001 	sub	r3, r3, #1
  114a0c:	e3530006 	cmp	r3, #6
  114a10:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  114a14:	ea000098 	b	114c7c <lwip_getsockopt_impl+0x830>
  114a18:	00114a98 	.word	0x00114a98
  114a1c:	00114a34 	.word	0x00114a34
  114a20:	00114c7c 	.word	0x00114c7c
  114a24:	00114c7c 	.word	0x00114c7c
  114a28:	00114afc 	.word	0x00114afc
  114a2c:	00114b7c 	.word	0x00114b7c
  114a30:	00114bfc 	.word	0x00114bfc
    case IP_TTL:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, *optlen, int);
  114a34:	e59b3004 	ldr	r3, [fp, #4]
  114a38:	e5933000 	ldr	r3, [r3]
  114a3c:	e3530003 	cmp	r3, #3
  114a40:	8a000001 	bhi	114a4c <lwip_getsockopt_impl+0x600>
  114a44:	e3a03016 	mov	r3, #22
  114a48:	ea0000fb 	b	114e3c <lwip_getsockopt_impl+0x9f0>
  114a4c:	e51b300c 	ldr	r3, [fp, #-12]
  114a50:	e5933000 	ldr	r3, [r3]
  114a54:	e3530000 	cmp	r3, #0
  114a58:	0a000004 	beq	114a70 <lwip_getsockopt_impl+0x624>
  114a5c:	e51b300c 	ldr	r3, [fp, #-12]
  114a60:	e5933000 	ldr	r3, [r3]
  114a64:	e5933008 	ldr	r3, [r3, #8]
  114a68:	e3530000 	cmp	r3, #0
  114a6c:	1a000001 	bne	114a78 <lwip_getsockopt_impl+0x62c>
  114a70:	e3a03016 	mov	r3, #22
  114a74:	ea0000f0 	b	114e3c <lwip_getsockopt_impl+0x9f0>
      *(int*)optval = sock->conn->pcb.ip->ttl;
  114a78:	e51b300c 	ldr	r3, [fp, #-12]
  114a7c:	e5933000 	ldr	r3, [r3]
  114a80:	e5933008 	ldr	r3, [r3, #8]
  114a84:	e5d3300a 	ldrb	r3, [r3, #10]
  114a88:	e1a02003 	mov	r2, r3
  114a8c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114a90:	e5832000 	str	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, IP_TTL) = %d\n",
                  s, *(int *)optval));
      break;
  114a94:	ea00007b 	b	114c88 <lwip_getsockopt_impl+0x83c>
    case IP_TOS:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, *optlen, int);
  114a98:	e59b3004 	ldr	r3, [fp, #4]
  114a9c:	e5933000 	ldr	r3, [r3]
  114aa0:	e3530003 	cmp	r3, #3
  114aa4:	8a000001 	bhi	114ab0 <lwip_getsockopt_impl+0x664>
  114aa8:	e3a03016 	mov	r3, #22
  114aac:	ea0000e2 	b	114e3c <lwip_getsockopt_impl+0x9f0>
  114ab0:	e51b300c 	ldr	r3, [fp, #-12]
  114ab4:	e5933000 	ldr	r3, [r3]
  114ab8:	e3530000 	cmp	r3, #0
  114abc:	0a000004 	beq	114ad4 <lwip_getsockopt_impl+0x688>
  114ac0:	e51b300c 	ldr	r3, [fp, #-12]
  114ac4:	e5933000 	ldr	r3, [r3]
  114ac8:	e5933008 	ldr	r3, [r3, #8]
  114acc:	e3530000 	cmp	r3, #0
  114ad0:	1a000001 	bne	114adc <lwip_getsockopt_impl+0x690>
  114ad4:	e3a03016 	mov	r3, #22
  114ad8:	ea0000d7 	b	114e3c <lwip_getsockopt_impl+0x9f0>
      *(int*)optval = sock->conn->pcb.ip->tos;
  114adc:	e51b300c 	ldr	r3, [fp, #-12]
  114ae0:	e5933000 	ldr	r3, [r3]
  114ae4:	e5933008 	ldr	r3, [r3, #8]
  114ae8:	e5d33009 	ldrb	r3, [r3, #9]
  114aec:	e1a02003 	mov	r2, r3
  114af0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114af4:	e5832000 	str	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, IP_TOS) = %d\n",
                  s, *(int *)optval));
      break;
  114af8:	ea000062 	b	114c88 <lwip_getsockopt_impl+0x83c>
#if LWIP_MULTICAST_TX_OPTIONS
    case IP_MULTICAST_TTL:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, *optlen, u8_t);
  114afc:	e59b3004 	ldr	r3, [fp, #4]
  114b00:	e5933000 	ldr	r3, [r3]
  114b04:	e3530000 	cmp	r3, #0
  114b08:	1a000001 	bne	114b14 <lwip_getsockopt_impl+0x6c8>
  114b0c:	e3a03016 	mov	r3, #22
  114b10:	ea0000c9 	b	114e3c <lwip_getsockopt_impl+0x9f0>
  114b14:	e51b300c 	ldr	r3, [fp, #-12]
  114b18:	e5933000 	ldr	r3, [r3]
  114b1c:	e3530000 	cmp	r3, #0
  114b20:	0a000004 	beq	114b38 <lwip_getsockopt_impl+0x6ec>
  114b24:	e51b300c 	ldr	r3, [fp, #-12]
  114b28:	e5933000 	ldr	r3, [r3]
  114b2c:	e5933008 	ldr	r3, [r3, #8]
  114b30:	e3530000 	cmp	r3, #0
  114b34:	1a000001 	bne	114b40 <lwip_getsockopt_impl+0x6f4>
  114b38:	e3a03016 	mov	r3, #22
  114b3c:	ea0000be 	b	114e3c <lwip_getsockopt_impl+0x9f0>
      if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_UDP) {
  114b40:	e51b300c 	ldr	r3, [fp, #-12]
  114b44:	e5933000 	ldr	r3, [r3]
  114b48:	e5933000 	ldr	r3, [r3]
  114b4c:	e20330f0 	and	r3, r3, #240	; 0xf0
  114b50:	e3530020 	cmp	r3, #32
  114b54:	0a000001 	beq	114b60 <lwip_getsockopt_impl+0x714>
        return ENOPROTOOPT;
  114b58:	e3a0305c 	mov	r3, #92	; 0x5c
  114b5c:	ea0000b6 	b	114e3c <lwip_getsockopt_impl+0x9f0>
      }
      *(u8_t*)optval = udp_get_multicast_ttl(sock->conn->pcb.udp);
  114b60:	e51b300c 	ldr	r3, [fp, #-12]
  114b64:	e5933000 	ldr	r3, [r3]
  114b68:	e5933008 	ldr	r3, [r3, #8]
  114b6c:	e5d3201c 	ldrb	r2, [r3, #28]
  114b70:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114b74:	e5c32000 	strb	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, IP_MULTICAST_TTL) = %d\n",
                  s, *(int *)optval));
      break;
  114b78:	ea000042 	b	114c88 <lwip_getsockopt_impl+0x83c>
    case IP_MULTICAST_IF:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, *optlen, struct in_addr);
  114b7c:	e59b3004 	ldr	r3, [fp, #4]
  114b80:	e5933000 	ldr	r3, [r3]
  114b84:	e3530003 	cmp	r3, #3
  114b88:	8a000001 	bhi	114b94 <lwip_getsockopt_impl+0x748>
  114b8c:	e3a03016 	mov	r3, #22
  114b90:	ea0000a9 	b	114e3c <lwip_getsockopt_impl+0x9f0>
  114b94:	e51b300c 	ldr	r3, [fp, #-12]
  114b98:	e5933000 	ldr	r3, [r3]
  114b9c:	e3530000 	cmp	r3, #0
  114ba0:	0a000004 	beq	114bb8 <lwip_getsockopt_impl+0x76c>
  114ba4:	e51b300c 	ldr	r3, [fp, #-12]
  114ba8:	e5933000 	ldr	r3, [r3]
  114bac:	e5933008 	ldr	r3, [r3, #8]
  114bb0:	e3530000 	cmp	r3, #0
  114bb4:	1a000001 	bne	114bc0 <lwip_getsockopt_impl+0x774>
  114bb8:	e3a03016 	mov	r3, #22
  114bbc:	ea00009e 	b	114e3c <lwip_getsockopt_impl+0x9f0>
      if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_UDP) {
  114bc0:	e51b300c 	ldr	r3, [fp, #-12]
  114bc4:	e5933000 	ldr	r3, [r3]
  114bc8:	e5933000 	ldr	r3, [r3]
  114bcc:	e20330f0 	and	r3, r3, #240	; 0xf0
  114bd0:	e3530020 	cmp	r3, #32
  114bd4:	0a000001 	beq	114be0 <lwip_getsockopt_impl+0x794>
        return ENOPROTOOPT;
  114bd8:	e3a0305c 	mov	r3, #92	; 0x5c
  114bdc:	ea000096 	b	114e3c <lwip_getsockopt_impl+0x9f0>
      }
      inet_addr_from_ip4addr((struct in_addr*)optval, udp_get_multicast_netif_addr(sock->conn->pcb.udp));
  114be0:	e51b300c 	ldr	r3, [fp, #-12]
  114be4:	e5933000 	ldr	r3, [r3]
  114be8:	e5933008 	ldr	r3, [r3, #8]
  114bec:	e5932018 	ldr	r2, [r3, #24]
  114bf0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114bf4:	e5832000 	str	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, IP_MULTICAST_IF) = 0x%"X32_F"\n",
                  s, *(u32_t *)optval));
      break;
  114bf8:	ea000022 	b	114c88 <lwip_getsockopt_impl+0x83c>
    case IP_MULTICAST_LOOP:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, *optlen, u8_t);
  114bfc:	e59b3004 	ldr	r3, [fp, #4]
  114c00:	e5933000 	ldr	r3, [r3]
  114c04:	e3530000 	cmp	r3, #0
  114c08:	1a000001 	bne	114c14 <lwip_getsockopt_impl+0x7c8>
  114c0c:	e3a03016 	mov	r3, #22
  114c10:	ea000089 	b	114e3c <lwip_getsockopt_impl+0x9f0>
  114c14:	e51b300c 	ldr	r3, [fp, #-12]
  114c18:	e5933000 	ldr	r3, [r3]
  114c1c:	e3530000 	cmp	r3, #0
  114c20:	0a000004 	beq	114c38 <lwip_getsockopt_impl+0x7ec>
  114c24:	e51b300c 	ldr	r3, [fp, #-12]
  114c28:	e5933000 	ldr	r3, [r3]
  114c2c:	e5933008 	ldr	r3, [r3, #8]
  114c30:	e3530000 	cmp	r3, #0
  114c34:	1a000001 	bne	114c40 <lwip_getsockopt_impl+0x7f4>
  114c38:	e3a03016 	mov	r3, #22
  114c3c:	ea00007e 	b	114e3c <lwip_getsockopt_impl+0x9f0>
      if ((sock->conn->pcb.udp->flags & UDP_FLAGS_MULTICAST_LOOP) != 0) {
  114c40:	e51b300c 	ldr	r3, [fp, #-12]
  114c44:	e5933000 	ldr	r3, [r3]
  114c48:	e5933008 	ldr	r3, [r3, #8]
  114c4c:	e5d33010 	ldrb	r3, [r3, #16]
  114c50:	e2033008 	and	r3, r3, #8
  114c54:	e3530000 	cmp	r3, #0
  114c58:	0a000003 	beq	114c6c <lwip_getsockopt_impl+0x820>
        *(u8_t*)optval = 1;
  114c5c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114c60:	e3a02001 	mov	r2, #1
  114c64:	e5c32000 	strb	r2, [r3]
      } else {
        *(u8_t*)optval = 0;
      }
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, IP_MULTICAST_LOOP) = %d\n",
                  s, *(int *)optval));
      break;
  114c68:	ea000006 	b	114c88 <lwip_getsockopt_impl+0x83c>
        *(u8_t*)optval = 0;
  114c6c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114c70:	e3a02000 	mov	r2, #0
  114c74:	e5c32000 	strb	r2, [r3]
      break;
  114c78:	ea000002 	b	114c88 <lwip_getsockopt_impl+0x83c>
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_IP, UNIMPL: optname=0x%x, ..)\n",
                  s, optname));
      err = ENOPROTOOPT;
  114c7c:	e3a0305c 	mov	r3, #92	; 0x5c
  114c80:	e54b3005 	strb	r3, [fp, #-5]
      break;
  114c84:	e320f000 	nop	{0}
    }  /* switch (optname) */
    break;
  114c88:	ea00006a 	b	114e38 <lwip_getsockopt_impl+0x9ec>

#if LWIP_TCP
/* Level: IPPROTO_TCP */
  case IPPROTO_TCP:
    /* Special case: all IPPROTO_TCP option take an int */
    LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, *optlen, int, NETCONN_TCP);
  114c8c:	e59b3004 	ldr	r3, [fp, #4]
  114c90:	e5933000 	ldr	r3, [r3]
  114c94:	e3530003 	cmp	r3, #3
  114c98:	8a000001 	bhi	114ca4 <lwip_getsockopt_impl+0x858>
  114c9c:	e3a03016 	mov	r3, #22
  114ca0:	ea000065 	b	114e3c <lwip_getsockopt_impl+0x9f0>
  114ca4:	e51b300c 	ldr	r3, [fp, #-12]
  114ca8:	e5933000 	ldr	r3, [r3]
  114cac:	e3530000 	cmp	r3, #0
  114cb0:	0a000004 	beq	114cc8 <lwip_getsockopt_impl+0x87c>
  114cb4:	e51b300c 	ldr	r3, [fp, #-12]
  114cb8:	e5933000 	ldr	r3, [r3]
  114cbc:	e5933008 	ldr	r3, [r3, #8]
  114cc0:	e3530000 	cmp	r3, #0
  114cc4:	1a000001 	bne	114cd0 <lwip_getsockopt_impl+0x884>
  114cc8:	e3a03016 	mov	r3, #22
  114ccc:	ea00005a 	b	114e3c <lwip_getsockopt_impl+0x9f0>
  114cd0:	e51b300c 	ldr	r3, [fp, #-12]
  114cd4:	e5933000 	ldr	r3, [r3]
  114cd8:	e5933000 	ldr	r3, [r3]
  114cdc:	e20330f0 	and	r3, r3, #240	; 0xf0
  114ce0:	e3530010 	cmp	r3, #16
  114ce4:	0a000001 	beq	114cf0 <lwip_getsockopt_impl+0x8a4>
  114ce8:	e3a0305c 	mov	r3, #92	; 0x5c
  114cec:	ea000052 	b	114e3c <lwip_getsockopt_impl+0x9f0>
    if (sock->conn->pcb.tcp->state == LISTEN) {
  114cf0:	e51b300c 	ldr	r3, [fp, #-12]
  114cf4:	e5933000 	ldr	r3, [r3]
  114cf8:	e5933008 	ldr	r3, [r3, #8]
  114cfc:	e5933014 	ldr	r3, [r3, #20]
  114d00:	e3530001 	cmp	r3, #1
  114d04:	1a000001 	bne	114d10 <lwip_getsockopt_impl+0x8c4>
      return EINVAL;
  114d08:	e3a03016 	mov	r3, #22
  114d0c:	ea00004a 	b	114e3c <lwip_getsockopt_impl+0x9f0>
    }
    switch (optname) {
  114d10:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  114d14:	e2433001 	sub	r3, r3, #1
  114d18:	e3530004 	cmp	r3, #4
  114d1c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  114d20:	ea000039 	b	114e0c <lwip_getsockopt_impl+0x9c0>
  114d24:	00114d38 	.word	0x00114d38
  114d28:	00114d6c 	.word	0x00114d6c
  114d2c:	00114d8c 	.word	0x00114d8c
  114d30:	00114dbc 	.word	0x00114dbc
  114d34:	00114dec 	.word	0x00114dec
    case TCP_NODELAY:
      *(int*)optval = tcp_nagle_disabled(sock->conn->pcb.tcp);
  114d38:	e51b300c 	ldr	r3, [fp, #-12]
  114d3c:	e5933000 	ldr	r3, [r3]
  114d40:	e5933008 	ldr	r3, [r3, #8]
  114d44:	e5d3301e 	ldrb	r3, [r3, #30]
  114d48:	e2033040 	and	r3, r3, #64	; 0x40
  114d4c:	e3530000 	cmp	r3, #0
  114d50:	13a03001 	movne	r3, #1
  114d54:	03a03000 	moveq	r3, #0
  114d58:	e6ef3073 	uxtb	r3, r3
  114d5c:	e1a02003 	mov	r2, r3
  114d60:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114d64:	e5832000 	str	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_TCP, TCP_NODELAY) = %s\n",
                  s, (*(int*)optval)?"on":"off") );
      break;
  114d68:	ea00002a 	b	114e18 <lwip_getsockopt_impl+0x9cc>
    case TCP_KEEPALIVE:
      *(int*)optval = (int)sock->conn->pcb.tcp->keep_idle;
  114d6c:	e51b300c 	ldr	r3, [fp, #-12]
  114d70:	e5933000 	ldr	r3, [r3]
  114d74:	e5933008 	ldr	r3, [r3, #8]
  114d78:	e5933094 	ldr	r3, [r3, #148]	; 0x94
  114d7c:	e1a02003 	mov	r2, r3
  114d80:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114d84:	e5832000 	str	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_TCP, TCP_KEEPALIVE) = %d\n",
                  s, *(int *)optval));
      break;
  114d88:	ea000022 	b	114e18 <lwip_getsockopt_impl+0x9cc>

#if LWIP_TCP_KEEPALIVE
    case TCP_KEEPIDLE:
      *(int*)optval = (int)(sock->conn->pcb.tcp->keep_idle/1000);
  114d8c:	e51b300c 	ldr	r3, [fp, #-12]
  114d90:	e5933000 	ldr	r3, [r3]
  114d94:	e5933008 	ldr	r3, [r3, #8]
  114d98:	e5932094 	ldr	r2, [r3, #148]	; 0x94
  114d9c:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  114da0:	e3413062 	movt	r3, #4194	; 0x1062
  114da4:	e0832392 	umull	r2, r3, r2, r3
  114da8:	e1a03323 	lsr	r3, r3, #6
  114dac:	e1a02003 	mov	r2, r3
  114db0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114db4:	e5832000 	str	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_TCP, TCP_KEEPIDLE) = %d\n",
                  s, *(int *)optval));
      break;
  114db8:	ea000016 	b	114e18 <lwip_getsockopt_impl+0x9cc>
    case TCP_KEEPINTVL:
      *(int*)optval = (int)(sock->conn->pcb.tcp->keep_intvl/1000);
  114dbc:	e51b300c 	ldr	r3, [fp, #-12]
  114dc0:	e5933000 	ldr	r3, [r3]
  114dc4:	e5933008 	ldr	r3, [r3, #8]
  114dc8:	e5932098 	ldr	r2, [r3, #152]	; 0x98
  114dcc:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  114dd0:	e3413062 	movt	r3, #4194	; 0x1062
  114dd4:	e0832392 	umull	r2, r3, r2, r3
  114dd8:	e1a03323 	lsr	r3, r3, #6
  114ddc:	e1a02003 	mov	r2, r3
  114de0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114de4:	e5832000 	str	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_TCP, TCP_KEEPINTVL) = %d\n",
                  s, *(int *)optval));
      break;
  114de8:	ea00000a 	b	114e18 <lwip_getsockopt_impl+0x9cc>
    case TCP_KEEPCNT:
      *(int*)optval = (int)sock->conn->pcb.tcp->keep_cnt;
  114dec:	e51b300c 	ldr	r3, [fp, #-12]
  114df0:	e5933000 	ldr	r3, [r3]
  114df4:	e5933008 	ldr	r3, [r3, #8]
  114df8:	e593309c 	ldr	r3, [r3, #156]	; 0x9c
  114dfc:	e1a02003 	mov	r2, r3
  114e00:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  114e04:	e5832000 	str	r2, [r3]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_TCP, TCP_KEEPCNT) = %d\n",
                  s, *(int *)optval));
      break;
  114e08:	ea000002 	b	114e18 <lwip_getsockopt_impl+0x9cc>
#endif /* LWIP_TCP_KEEPALIVE */
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_TCP, UNIMPL: optname=0x%x, ..)\n",
                  s, optname));
      err = ENOPROTOOPT;
  114e0c:	e3a0305c 	mov	r3, #92	; 0x5c
  114e10:	e54b3005 	strb	r3, [fp, #-5]
      break;
  114e14:	e320f000 	nop	{0}
    }  /* switch (optname) */
    break;
  114e18:	ea000006 	b	114e38 <lwip_getsockopt_impl+0x9ec>
      break;
#endif /* LWIP_IPV6 && LWIP_RAW */
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, IPPROTO_RAW, UNIMPL: optname=0x%x, ..)\n",
                  s, optname));
      err = ENOPROTOOPT;
  114e1c:	e3a0305c 	mov	r3, #92	; 0x5c
  114e20:	e54b3005 	strb	r3, [fp, #-5]
      break;
  114e24:	e320f000 	nop	{0}
    }  /* switch (optname) */
    break;
  114e28:	ea000002 	b	114e38 <lwip_getsockopt_impl+0x9ec>
  default:
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_getsockopt(%d, level=0x%x, UNIMPL: optname=0x%x, ..)\n",
                                s, level, optname));
    err = ENOPROTOOPT;
  114e2c:	e3a0305c 	mov	r3, #92	; 0x5c
  114e30:	e54b3005 	strb	r3, [fp, #-5]
    break;
  114e34:	e320f000 	nop	{0}
  } /* switch (level) */

  return err;
  114e38:	e55b3005 	ldrb	r3, [fp, #-5]
}
  114e3c:	e1a00003 	mov	r0, r3
  114e40:	e24bd004 	sub	sp, fp, #4
  114e44:	e8bd8800 	pop	{fp, pc}

00114e48 <lwip_setsockopt>:

int
lwip_setsockopt(int s, int level, int optname, const void *optval, socklen_t optlen)
{
  114e48:	e92d4800 	push	{fp, lr}
  114e4c:	e28db004 	add	fp, sp, #4
  114e50:	e24dd028 	sub	sp, sp, #40	; 0x28
  114e54:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  114e58:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  114e5c:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  114e60:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  u8_t err = 0;
  114e64:	e3a03000 	mov	r3, #0
  114e68:	e54b3005 	strb	r3, [fp, #-5]
  struct lwip_sock *sock = get_socket(s);
  114e6c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  114e70:	ebfff0a5 	bl	11110c <get_socket>
  114e74:	e50b000c 	str	r0, [fp, #-12]
#if !LWIP_TCPIP_CORE_LOCKING
  LWIP_SETGETSOCKOPT_DATA_VAR_DECLARE(data);
#endif /* !LWIP_TCPIP_CORE_LOCKING */

  if (!sock) {
  114e78:	e51b300c 	ldr	r3, [fp, #-12]
  114e7c:	e3530000 	cmp	r3, #0
  114e80:	1a000001 	bne	114e8c <lwip_setsockopt+0x44>
    return -1;
  114e84:	e3e03000 	mvn	r3, #0
  114e88:	ea000033 	b	114f5c <lwip_setsockopt+0x114>
  }

  if (NULL == optval) {
  114e8c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  114e90:	e3530000 	cmp	r3, #0
  114e94:	1a00000e 	bne	114ed4 <lwip_setsockopt+0x8c>
    sock_set_errno(sock, EFAULT);
  114e98:	e3a0300e 	mov	r3, #14
  114e9c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  114ea0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  114ea4:	e6ef2073 	uxtb	r2, r3
  114ea8:	e51b300c 	ldr	r3, [fp, #-12]
  114eac:	e5c32010 	strb	r2, [r3, #16]
  114eb0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  114eb4:	e3530000 	cmp	r3, #0
  114eb8:	0a000003 	beq	114ecc <lwip_setsockopt+0x84>
  114ebc:	eb00907f 	bl	1390c0 <__errno_location>
  114ec0:	e1a02000 	mov	r2, r0
  114ec4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  114ec8:	e5823000 	str	r3, [r2]
    return -1;
  114ecc:	e3e03000 	mvn	r3, #0
  114ed0:	ea000021 	b	114f5c <lwip_setsockopt+0x114>
  }

#if LWIP_TCPIP_CORE_LOCKING
  /* core-locking can just call the -impl function */
  LOCK_TCPIP_CORE();
  114ed4:	e30005e4 	movw	r0, #1508	; 0x5e4
  114ed8:	e3400015 	movt	r0, #21
  114edc:	ebffd67f 	bl	10a8e0 <sys_mutex_lock>
  err = lwip_setsockopt_impl(s, level, optname, optval, optlen);
  114ee0:	e59b3004 	ldr	r3, [fp, #4]
  114ee4:	e58d3000 	str	r3, [sp]
  114ee8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  114eec:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  114ef0:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  114ef4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  114ef8:	eb00001a 	bl	114f68 <lwip_setsockopt_impl>
  114efc:	e1a03000 	mov	r3, r0
  114f00:	e54b3005 	strb	r3, [fp, #-5]
  UNLOCK_TCPIP_CORE();
  114f04:	e30005e4 	movw	r0, #1508	; 0x5e4
  114f08:	e3400015 	movt	r0, #21
  114f0c:	ebffd67f 	bl	10a910 <sys_mutex_unlock>
  /* maybe lwip_getsockopt_internal has changed err */
  err = LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).err;
  LWIP_SETGETSOCKOPT_DATA_VAR_FREE(data);
#endif  /* LWIP_TCPIP_CORE_LOCKING */

  sock_set_errno(sock, err);
  114f10:	e55b3005 	ldrb	r3, [fp, #-5]
  114f14:	e50b3010 	str	r3, [fp, #-16]
  114f18:	e51b3010 	ldr	r3, [fp, #-16]
  114f1c:	e6ef2073 	uxtb	r2, r3
  114f20:	e51b300c 	ldr	r3, [fp, #-12]
  114f24:	e5c32010 	strb	r2, [r3, #16]
  114f28:	e51b3010 	ldr	r3, [fp, #-16]
  114f2c:	e3530000 	cmp	r3, #0
  114f30:	0a000003 	beq	114f44 <lwip_setsockopt+0xfc>
  114f34:	eb009061 	bl	1390c0 <__errno_location>
  114f38:	e1a02000 	mov	r2, r0
  114f3c:	e51b3010 	ldr	r3, [fp, #-16]
  114f40:	e5823000 	str	r3, [r2]
  return err ? -1 : 0;
  114f44:	e55b3005 	ldrb	r3, [fp, #-5]
  114f48:	e3530000 	cmp	r3, #0
  114f4c:	0a000001 	beq	114f58 <lwip_setsockopt+0x110>
  114f50:	e3e03000 	mvn	r3, #0
  114f54:	ea000000 	b	114f5c <lwip_setsockopt+0x114>
  114f58:	e3a03000 	mov	r3, #0
}
  114f5c:	e1a00003 	mov	r0, r3
  114f60:	e24bd004 	sub	sp, fp, #4
  114f64:	e8bd8800 	pop	{fp, pc}

00114f68 <lwip_setsockopt_impl>:
/** lwip_setsockopt_impl: the actual implementation of setsockopt:
 * same argument as lwip_setsockopt, either called directly or through callback
 */
static u8_t
lwip_setsockopt_impl(int s, int level, int optname, const void *optval, socklen_t optlen)
{
  114f68:	e92d4800 	push	{fp, lr}
  114f6c:	e28db004 	add	fp, sp, #4
  114f70:	e24dd028 	sub	sp, sp, #40	; 0x28
  114f74:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  114f78:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  114f7c:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  114f80:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
  u8_t err = 0;
  114f84:	e3a03000 	mov	r3, #0
  114f88:	e54b3005 	strb	r3, [fp, #-5]
  struct lwip_sock *sock = tryget_socket(s);
  114f8c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  114f90:	ebfff082 	bl	1111a0 <tryget_socket>
  114f94:	e50b000c 	str	r0, [fp, #-12]
  if (!sock) {
  114f98:	e51b300c 	ldr	r3, [fp, #-12]
  114f9c:	e3530000 	cmp	r3, #0
  114fa0:	1a000001 	bne	114fac <lwip_setsockopt_impl+0x44>
    return EBADF;
  114fa4:	e3a03009 	mov	r3, #9
  114fa8:	ea000248 	b	1158d0 <lwip_setsockopt_impl+0x968>
  }

  switch (level) {
  114fac:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  114fb0:	e3530006 	cmp	r3, #6
  114fb4:	0a0001d3 	beq	115708 <lwip_setsockopt_impl+0x7a0>
  114fb8:	e3530006 	cmp	r3, #6
  114fbc:	ca000002 	bgt	114fcc <lwip_setsockopt_impl+0x64>
  114fc0:	e3530000 	cmp	r3, #0
  114fc4:	0a0000d2 	beq	115314 <lwip_setsockopt_impl+0x3ac>
  114fc8:	ea00023c 	b	1158c0 <lwip_setsockopt_impl+0x958>
  114fcc:	e35300ff 	cmp	r3, #255	; 0xff
  114fd0:	0a000236 	beq	1158b0 <lwip_setsockopt_impl+0x948>
  114fd4:	e3002fff 	movw	r2, #4095	; 0xfff
  114fd8:	e1530002 	cmp	r3, r2
  114fdc:	1a000237 	bne	1158c0 <lwip_setsockopt_impl+0x958>

/* Level: SOL_SOCKET */
  case SOL_SOCKET:
    switch (optname) {
  114fe0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  114fe4:	e3012002 	movw	r2, #4098	; 0x1002
  114fe8:	e1530002 	cmp	r3, r2
  114fec:	0a000081 	beq	1151f8 <lwip_setsockopt_impl+0x290>
  114ff0:	e3012002 	movw	r2, #4098	; 0x1002
  114ff4:	e1530002 	cmp	r3, r2
  114ff8:	ca000006 	bgt	115018 <lwip_setsockopt_impl+0xb0>
  114ffc:	e3530008 	cmp	r3, #8
  115000:	0a00000e 	beq	115040 <lwip_setsockopt_impl+0xd8>
  115004:	e3530020 	cmp	r3, #32
  115008:	0a00000c 	beq	115040 <lwip_setsockopt_impl+0xd8>
  11500c:	e3530004 	cmp	r3, #4
  115010:	0a00000a 	beq	115040 <lwip_setsockopt_impl+0xd8>
  115014:	ea0000ba 	b	115304 <lwip_setsockopt_impl+0x39c>
  115018:	e3012006 	movw	r2, #4102	; 0x1006
  11501c:	e1530002 	cmp	r3, r2
  115020:	0a000057 	beq	115184 <lwip_setsockopt_impl+0x21c>
  115024:	e301200a 	movw	r2, #4106	; 0x100a
  115028:	e1530002 	cmp	r3, r2
  11502c:	0a000082 	beq	11523c <lwip_setsockopt_impl+0x2d4>
  115030:	e3012005 	movw	r2, #4101	; 0x1005
  115034:	e1530002 	cmp	r3, r2
  115038:	0a000034 	beq	115110 <lwip_setsockopt_impl+0x1a8>
  11503c:	ea0000b0 	b	115304 <lwip_setsockopt_impl+0x39c>
    case SO_BROADCAST:
    case SO_KEEPALIVE:
#if SO_REUSE
    case SO_REUSEADDR:
#endif /* SO_REUSE */
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
  115040:	e59b3004 	ldr	r3, [fp, #4]
  115044:	e3530003 	cmp	r3, #3
  115048:	8a000001 	bhi	115054 <lwip_setsockopt_impl+0xec>
  11504c:	e3a03016 	mov	r3, #22
  115050:	ea00021e 	b	1158d0 <lwip_setsockopt_impl+0x968>
  115054:	e51b300c 	ldr	r3, [fp, #-12]
  115058:	e5933000 	ldr	r3, [r3]
  11505c:	e3530000 	cmp	r3, #0
  115060:	0a000004 	beq	115078 <lwip_setsockopt_impl+0x110>
  115064:	e51b300c 	ldr	r3, [fp, #-12]
  115068:	e5933000 	ldr	r3, [r3]
  11506c:	e5933008 	ldr	r3, [r3, #8]
  115070:	e3530000 	cmp	r3, #0
  115074:	1a000001 	bne	115080 <lwip_setsockopt_impl+0x118>
  115078:	e3a03016 	mov	r3, #22
  11507c:	ea000213 	b	1158d0 <lwip_setsockopt_impl+0x968>
      if (*(const int*)optval) {
  115080:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  115084:	e5933000 	ldr	r3, [r3]
  115088:	e3530000 	cmp	r3, #0
  11508c:	0a00000e 	beq	1150cc <lwip_setsockopt_impl+0x164>
        ip_set_option(sock->conn->pcb.ip, optname);
  115090:	e51b300c 	ldr	r3, [fp, #-12]
  115094:	e5933000 	ldr	r3, [r3]
  115098:	e5933008 	ldr	r3, [r3, #8]
  11509c:	e5d33008 	ldrb	r3, [r3, #8]
  1150a0:	e6af2073 	sxtb	r2, r3
  1150a4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1150a8:	e6af3073 	sxtb	r3, r3
  1150ac:	e1823003 	orr	r3, r2, r3
  1150b0:	e6af2073 	sxtb	r2, r3
  1150b4:	e51b300c 	ldr	r3, [fp, #-12]
  1150b8:	e5933000 	ldr	r3, [r3]
  1150bc:	e5933008 	ldr	r3, [r3, #8]
  1150c0:	e6ef2072 	uxtb	r2, r2
  1150c4:	e5c32008 	strb	r2, [r3, #8]
      } else {
        ip_reset_option(sock->conn->pcb.ip, optname);
      }
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, SOL_SOCKET, optname=0x%x, ..) -> %s\n",
                  s, optname, (*(const int*)optval?"on":"off")));
      break;
  1150c8:	ea000090 	b	115310 <lwip_setsockopt_impl+0x3a8>
        ip_reset_option(sock->conn->pcb.ip, optname);
  1150cc:	e51b300c 	ldr	r3, [fp, #-12]
  1150d0:	e5933000 	ldr	r3, [r3]
  1150d4:	e5933008 	ldr	r3, [r3, #8]
  1150d8:	e5d33008 	ldrb	r3, [r3, #8]
  1150dc:	e6af2073 	sxtb	r2, r3
  1150e0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1150e4:	e6af3073 	sxtb	r3, r3
  1150e8:	e1e03003 	mvn	r3, r3
  1150ec:	e6af3073 	sxtb	r3, r3
  1150f0:	e0033002 	and	r3, r3, r2
  1150f4:	e6af2073 	sxtb	r2, r3
  1150f8:	e51b300c 	ldr	r3, [fp, #-12]
  1150fc:	e5933000 	ldr	r3, [r3]
  115100:	e5933008 	ldr	r3, [r3, #8]
  115104:	e6ef2072 	uxtb	r2, r2
  115108:	e5c32008 	strb	r2, [r3, #8]
      break;
  11510c:	ea00007f 	b	115310 <lwip_setsockopt_impl+0x3a8>
    /* SO_TYPE is get-only */
    /* SO_ERROR is get-only */

#if LWIP_SO_SNDTIMEO
    case SO_SNDTIMEO:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, optlen, LWIP_SO_SNDRCVTIMEO_OPTTYPE);
  115110:	e59b3004 	ldr	r3, [fp, #4]
  115114:	e353000f 	cmp	r3, #15
  115118:	8a000001 	bhi	115124 <lwip_setsockopt_impl+0x1bc>
  11511c:	e3a03016 	mov	r3, #22
  115120:	ea0001ea 	b	1158d0 <lwip_setsockopt_impl+0x968>
  115124:	e51b300c 	ldr	r3, [fp, #-12]
  115128:	e5933000 	ldr	r3, [r3]
  11512c:	e3530000 	cmp	r3, #0
  115130:	1a000001 	bne	11513c <lwip_setsockopt_impl+0x1d4>
  115134:	e3a03016 	mov	r3, #22
  115138:	ea0001e4 	b	1158d0 <lwip_setsockopt_impl+0x968>
      netconn_set_sendtimeout(sock->conn, LWIP_SO_SNDRCVTIMEO_GET_MS(optval));
  11513c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  115140:	e1c320d0 	ldrd	r2, [r3]
  115144:	e3a03ffa 	mov	r3, #1000	; 0x3e8
  115148:	e0010293 	mul	r1, r3, r2
  11514c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  115150:	e5933008 	ldr	r3, [r3, #8]
  115154:	e2833ff9 	add	r3, r3, #996	; 0x3e4
  115158:	e2833003 	add	r3, r3, #3
  11515c:	e1a02003 	mov	r2, r3
  115160:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  115164:	e3413062 	movt	r3, #4194	; 0x1062
  115168:	e0832392 	umull	r2, r3, r2, r3
  11516c:	e1a03323 	lsr	r3, r3, #6
  115170:	e0812003 	add	r2, r1, r3
  115174:	e51b300c 	ldr	r3, [fp, #-12]
  115178:	e5933000 	ldr	r3, [r3]
  11517c:	e5832020 	str	r2, [r3, #32]
      break;
  115180:	ea000062 	b	115310 <lwip_setsockopt_impl+0x3a8>
#endif /* LWIP_SO_SNDTIMEO */
#if LWIP_SO_RCVTIMEO
    case SO_RCVTIMEO:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, optlen, LWIP_SO_SNDRCVTIMEO_OPTTYPE);
  115184:	e59b3004 	ldr	r3, [fp, #4]
  115188:	e353000f 	cmp	r3, #15
  11518c:	8a000001 	bhi	115198 <lwip_setsockopt_impl+0x230>
  115190:	e3a03016 	mov	r3, #22
  115194:	ea0001cd 	b	1158d0 <lwip_setsockopt_impl+0x968>
  115198:	e51b300c 	ldr	r3, [fp, #-12]
  11519c:	e5933000 	ldr	r3, [r3]
  1151a0:	e3530000 	cmp	r3, #0
  1151a4:	1a000001 	bne	1151b0 <lwip_setsockopt_impl+0x248>
  1151a8:	e3a03016 	mov	r3, #22
  1151ac:	ea0001c7 	b	1158d0 <lwip_setsockopt_impl+0x968>
      netconn_set_recvtimeout(sock->conn, (int)LWIP_SO_SNDRCVTIMEO_GET_MS(optval));
  1151b0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1151b4:	e1c320d0 	ldrd	r2, [r3]
  1151b8:	e3a03ffa 	mov	r3, #1000	; 0x3e8
  1151bc:	e0010293 	mul	r1, r3, r2
  1151c0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1151c4:	e5933008 	ldr	r3, [r3, #8]
  1151c8:	e2833ff9 	add	r3, r3, #996	; 0x3e4
  1151cc:	e2833003 	add	r3, r3, #3
  1151d0:	e1a02003 	mov	r2, r3
  1151d4:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  1151d8:	e3413062 	movt	r3, #4194	; 0x1062
  1151dc:	e0832392 	umull	r2, r3, r2, r3
  1151e0:	e1a03323 	lsr	r3, r3, #6
  1151e4:	e0812003 	add	r2, r1, r3
  1151e8:	e51b300c 	ldr	r3, [fp, #-12]
  1151ec:	e5933000 	ldr	r3, [r3]
  1151f0:	e5832024 	str	r2, [r3, #36]	; 0x24
      break;
  1151f4:	ea000045 	b	115310 <lwip_setsockopt_impl+0x3a8>
#endif /* LWIP_SO_RCVTIMEO */
#if LWIP_SO_RCVBUF
    case SO_RCVBUF:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, optlen, int);
  1151f8:	e59b3004 	ldr	r3, [fp, #4]
  1151fc:	e3530003 	cmp	r3, #3
  115200:	8a000001 	bhi	11520c <lwip_setsockopt_impl+0x2a4>
  115204:	e3a03016 	mov	r3, #22
  115208:	ea0001b0 	b	1158d0 <lwip_setsockopt_impl+0x968>
  11520c:	e51b300c 	ldr	r3, [fp, #-12]
  115210:	e5933000 	ldr	r3, [r3]
  115214:	e3530000 	cmp	r3, #0
  115218:	1a000001 	bne	115224 <lwip_setsockopt_impl+0x2bc>
  11521c:	e3a03016 	mov	r3, #22
  115220:	ea0001aa 	b	1158d0 <lwip_setsockopt_impl+0x968>
      netconn_set_recvbufsize(sock->conn, *(const int*)optval);
  115224:	e51b300c 	ldr	r3, [fp, #-12]
  115228:	e5933000 	ldr	r3, [r3]
  11522c:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  115230:	e5922000 	ldr	r2, [r2]
  115234:	e5832028 	str	r2, [r3, #40]	; 0x28
      break;
  115238:	ea000034 	b	115310 <lwip_setsockopt_impl+0x3a8>
      }
      break;
#endif /* LWIP_SO_LINGER */
#if LWIP_UDP
    case SO_NO_CHECK:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, int, NETCONN_UDP);
  11523c:	e59b3004 	ldr	r3, [fp, #4]
  115240:	e3530003 	cmp	r3, #3
  115244:	8a000001 	bhi	115250 <lwip_setsockopt_impl+0x2e8>
  115248:	e3a03016 	mov	r3, #22
  11524c:	ea00019f 	b	1158d0 <lwip_setsockopt_impl+0x968>
  115250:	e51b300c 	ldr	r3, [fp, #-12]
  115254:	e5933000 	ldr	r3, [r3]
  115258:	e3530000 	cmp	r3, #0
  11525c:	0a000004 	beq	115274 <lwip_setsockopt_impl+0x30c>
  115260:	e51b300c 	ldr	r3, [fp, #-12]
  115264:	e5933000 	ldr	r3, [r3]
  115268:	e5933008 	ldr	r3, [r3, #8]
  11526c:	e3530000 	cmp	r3, #0
  115270:	1a000001 	bne	11527c <lwip_setsockopt_impl+0x314>
  115274:	e3a03016 	mov	r3, #22
  115278:	ea000194 	b	1158d0 <lwip_setsockopt_impl+0x968>
  11527c:	e51b300c 	ldr	r3, [fp, #-12]
  115280:	e5933000 	ldr	r3, [r3]
  115284:	e5933000 	ldr	r3, [r3]
  115288:	e20330f0 	and	r3, r3, #240	; 0xf0
  11528c:	e3530020 	cmp	r3, #32
  115290:	0a000001 	beq	11529c <lwip_setsockopt_impl+0x334>
  115294:	e3a0305c 	mov	r3, #92	; 0x5c
  115298:	ea00018c 	b	1158d0 <lwip_setsockopt_impl+0x968>
      if ((udp_flags(sock->conn->pcb.udp) & UDP_FLAGS_UDPLITE) != 0) {
        /* this flag is only available for UDP, not for UDP lite */
        return EAFNOSUPPORT;
      }
#endif /* LWIP_UDPLITE */
      if (*(const int*)optval) {
  11529c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1152a0:	e5933000 	ldr	r3, [r3]
  1152a4:	e3530000 	cmp	r3, #0
  1152a8:	0a00000a 	beq	1152d8 <lwip_setsockopt_impl+0x370>
        udp_setflags(sock->conn->pcb.udp, udp_flags(sock->conn->pcb.udp) | UDP_FLAGS_NOCHKSUM);
  1152ac:	e51b300c 	ldr	r3, [fp, #-12]
  1152b0:	e5933000 	ldr	r3, [r3]
  1152b4:	e5933008 	ldr	r3, [r3, #8]
  1152b8:	e5d32010 	ldrb	r2, [r3, #16]
  1152bc:	e51b300c 	ldr	r3, [fp, #-12]
  1152c0:	e5933000 	ldr	r3, [r3]
  1152c4:	e5933008 	ldr	r3, [r3, #8]
  1152c8:	e3822001 	orr	r2, r2, #1
  1152cc:	e6ef2072 	uxtb	r2, r2
  1152d0:	e5c32010 	strb	r2, [r3, #16]
      } else {
        udp_setflags(sock->conn->pcb.udp, udp_flags(sock->conn->pcb.udp) & ~UDP_FLAGS_NOCHKSUM);
      }
      break;
  1152d4:	ea00000d 	b	115310 <lwip_setsockopt_impl+0x3a8>
        udp_setflags(sock->conn->pcb.udp, udp_flags(sock->conn->pcb.udp) & ~UDP_FLAGS_NOCHKSUM);
  1152d8:	e51b300c 	ldr	r3, [fp, #-12]
  1152dc:	e5933000 	ldr	r3, [r3]
  1152e0:	e5933008 	ldr	r3, [r3, #8]
  1152e4:	e5d32010 	ldrb	r2, [r3, #16]
  1152e8:	e51b300c 	ldr	r3, [fp, #-12]
  1152ec:	e5933000 	ldr	r3, [r3]
  1152f0:	e5933008 	ldr	r3, [r3, #8]
  1152f4:	e3c22001 	bic	r2, r2, #1
  1152f8:	e6ef2072 	uxtb	r2, r2
  1152fc:	e5c32010 	strb	r2, [r3, #16]
      break;
  115300:	ea000002 	b	115310 <lwip_setsockopt_impl+0x3a8>
#endif /* LWIP_UDP */
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, SOL_SOCKET, UNIMPL: optname=0x%x, ..)\n",
                  s, optname));
      err = ENOPROTOOPT;
  115304:	e3a0305c 	mov	r3, #92	; 0x5c
  115308:	e54b3005 	strb	r3, [fp, #-5]
      break;
  11530c:	e320f000 	nop	{0}
    }  /* switch (optname) */
    break;
  115310:	ea00016d 	b	1158cc <lwip_setsockopt_impl+0x964>

/* Level: IPPROTO_IP */
  case IPPROTO_IP:
    switch (optname) {
  115314:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  115318:	e2433001 	sub	r3, r3, #1
  11531c:	e3530006 	cmp	r3, #6
  115320:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  115324:	ea0000f2 	b	1156f4 <lwip_setsockopt_impl+0x78c>
  115328:	001153a4 	.word	0x001153a4
  11532c:	00115344 	.word	0x00115344
  115330:	001155cc 	.word	0x001155cc
  115334:	001155cc 	.word	0x001155cc
  115338:	00115404 	.word	0x00115404
  11533c:	00115480 	.word	0x00115480
  115340:	00115504 	.word	0x00115504
    case IP_TTL:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
  115344:	e59b3004 	ldr	r3, [fp, #4]
  115348:	e3530003 	cmp	r3, #3
  11534c:	8a000001 	bhi	115358 <lwip_setsockopt_impl+0x3f0>
  115350:	e3a03016 	mov	r3, #22
  115354:	ea00015d 	b	1158d0 <lwip_setsockopt_impl+0x968>
  115358:	e51b300c 	ldr	r3, [fp, #-12]
  11535c:	e5933000 	ldr	r3, [r3]
  115360:	e3530000 	cmp	r3, #0
  115364:	0a000004 	beq	11537c <lwip_setsockopt_impl+0x414>
  115368:	e51b300c 	ldr	r3, [fp, #-12]
  11536c:	e5933000 	ldr	r3, [r3]
  115370:	e5933008 	ldr	r3, [r3, #8]
  115374:	e3530000 	cmp	r3, #0
  115378:	1a000001 	bne	115384 <lwip_setsockopt_impl+0x41c>
  11537c:	e3a03016 	mov	r3, #22
  115380:	ea000152 	b	1158d0 <lwip_setsockopt_impl+0x968>
      sock->conn->pcb.ip->ttl = (u8_t)(*(const int*)optval);
  115384:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  115388:	e5932000 	ldr	r2, [r3]
  11538c:	e51b300c 	ldr	r3, [fp, #-12]
  115390:	e5933000 	ldr	r3, [r3]
  115394:	e5933008 	ldr	r3, [r3, #8]
  115398:	e6ef2072 	uxtb	r2, r2
  11539c:	e5c3200a 	strb	r2, [r3, #10]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, IP_TTL, ..) -> %d\n",
                  s, sock->conn->pcb.ip->ttl));
      break;
  1153a0:	ea0000d7 	b	115704 <lwip_setsockopt_impl+0x79c>
    case IP_TOS:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
  1153a4:	e59b3004 	ldr	r3, [fp, #4]
  1153a8:	e3530003 	cmp	r3, #3
  1153ac:	8a000001 	bhi	1153b8 <lwip_setsockopt_impl+0x450>
  1153b0:	e3a03016 	mov	r3, #22
  1153b4:	ea000145 	b	1158d0 <lwip_setsockopt_impl+0x968>
  1153b8:	e51b300c 	ldr	r3, [fp, #-12]
  1153bc:	e5933000 	ldr	r3, [r3]
  1153c0:	e3530000 	cmp	r3, #0
  1153c4:	0a000004 	beq	1153dc <lwip_setsockopt_impl+0x474>
  1153c8:	e51b300c 	ldr	r3, [fp, #-12]
  1153cc:	e5933000 	ldr	r3, [r3]
  1153d0:	e5933008 	ldr	r3, [r3, #8]
  1153d4:	e3530000 	cmp	r3, #0
  1153d8:	1a000001 	bne	1153e4 <lwip_setsockopt_impl+0x47c>
  1153dc:	e3a03016 	mov	r3, #22
  1153e0:	ea00013a 	b	1158d0 <lwip_setsockopt_impl+0x968>
      sock->conn->pcb.ip->tos = (u8_t)(*(const int*)optval);
  1153e4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1153e8:	e5932000 	ldr	r2, [r3]
  1153ec:	e51b300c 	ldr	r3, [fp, #-12]
  1153f0:	e5933000 	ldr	r3, [r3]
  1153f4:	e5933008 	ldr	r3, [r3, #8]
  1153f8:	e6ef2072 	uxtb	r2, r2
  1153fc:	e5c32009 	strb	r2, [r3, #9]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, IP_TOS, ..)-> %d\n",
                  s, sock->conn->pcb.ip->tos));
      break;
  115400:	ea0000bf 	b	115704 <lwip_setsockopt_impl+0x79c>
#if LWIP_MULTICAST_TX_OPTIONS
    case IP_MULTICAST_TTL:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, u8_t, NETCONN_UDP);
  115404:	e59b3004 	ldr	r3, [fp, #4]
  115408:	e3530000 	cmp	r3, #0
  11540c:	1a000001 	bne	115418 <lwip_setsockopt_impl+0x4b0>
  115410:	e3a03016 	mov	r3, #22
  115414:	ea00012d 	b	1158d0 <lwip_setsockopt_impl+0x968>
  115418:	e51b300c 	ldr	r3, [fp, #-12]
  11541c:	e5933000 	ldr	r3, [r3]
  115420:	e3530000 	cmp	r3, #0
  115424:	0a000004 	beq	11543c <lwip_setsockopt_impl+0x4d4>
  115428:	e51b300c 	ldr	r3, [fp, #-12]
  11542c:	e5933000 	ldr	r3, [r3]
  115430:	e5933008 	ldr	r3, [r3, #8]
  115434:	e3530000 	cmp	r3, #0
  115438:	1a000001 	bne	115444 <lwip_setsockopt_impl+0x4dc>
  11543c:	e3a03016 	mov	r3, #22
  115440:	ea000122 	b	1158d0 <lwip_setsockopt_impl+0x968>
  115444:	e51b300c 	ldr	r3, [fp, #-12]
  115448:	e5933000 	ldr	r3, [r3]
  11544c:	e5933000 	ldr	r3, [r3]
  115450:	e20330f0 	and	r3, r3, #240	; 0xf0
  115454:	e3530020 	cmp	r3, #32
  115458:	0a000001 	beq	115464 <lwip_setsockopt_impl+0x4fc>
  11545c:	e3a0305c 	mov	r3, #92	; 0x5c
  115460:	ea00011a 	b	1158d0 <lwip_setsockopt_impl+0x968>
      udp_set_multicast_ttl(sock->conn->pcb.udp, (u8_t)(*(const u8_t*)optval));
  115464:	e51b300c 	ldr	r3, [fp, #-12]
  115468:	e5933000 	ldr	r3, [r3]
  11546c:	e5933008 	ldr	r3, [r3, #8]
  115470:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  115474:	e5d22000 	ldrb	r2, [r2]
  115478:	e5c3201c 	strb	r2, [r3, #28]
      break;
  11547c:	ea0000a0 	b	115704 <lwip_setsockopt_impl+0x79c>
    case IP_MULTICAST_IF:
      {
        ip4_addr_t if_addr;
        LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, struct in_addr, NETCONN_UDP);
  115480:	e59b3004 	ldr	r3, [fp, #4]
  115484:	e3530003 	cmp	r3, #3
  115488:	8a000001 	bhi	115494 <lwip_setsockopt_impl+0x52c>
  11548c:	e3a03016 	mov	r3, #22
  115490:	ea00010e 	b	1158d0 <lwip_setsockopt_impl+0x968>
  115494:	e51b300c 	ldr	r3, [fp, #-12]
  115498:	e5933000 	ldr	r3, [r3]
  11549c:	e3530000 	cmp	r3, #0
  1154a0:	0a000004 	beq	1154b8 <lwip_setsockopt_impl+0x550>
  1154a4:	e51b300c 	ldr	r3, [fp, #-12]
  1154a8:	e5933000 	ldr	r3, [r3]
  1154ac:	e5933008 	ldr	r3, [r3, #8]
  1154b0:	e3530000 	cmp	r3, #0
  1154b4:	1a000001 	bne	1154c0 <lwip_setsockopt_impl+0x558>
  1154b8:	e3a03016 	mov	r3, #22
  1154bc:	ea000103 	b	1158d0 <lwip_setsockopt_impl+0x968>
  1154c0:	e51b300c 	ldr	r3, [fp, #-12]
  1154c4:	e5933000 	ldr	r3, [r3]
  1154c8:	e5933000 	ldr	r3, [r3]
  1154cc:	e20330f0 	and	r3, r3, #240	; 0xf0
  1154d0:	e3530020 	cmp	r3, #32
  1154d4:	0a000001 	beq	1154e0 <lwip_setsockopt_impl+0x578>
  1154d8:	e3a0305c 	mov	r3, #92	; 0x5c
  1154dc:	ea0000fb 	b	1158d0 <lwip_setsockopt_impl+0x968>
        inet_addr_to_ip4addr(&if_addr, (const struct in_addr*)optval);
  1154e0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1154e4:	e5933000 	ldr	r3, [r3]
  1154e8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        udp_set_multicast_netif_addr(sock->conn->pcb.udp, &if_addr);
  1154ec:	e51b300c 	ldr	r3, [fp, #-12]
  1154f0:	e5933000 	ldr	r3, [r3]
  1154f4:	e5933008 	ldr	r3, [r3, #8]
  1154f8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1154fc:	e5832018 	str	r2, [r3, #24]
      }
      break;
  115500:	ea00007f 	b	115704 <lwip_setsockopt_impl+0x79c>
    case IP_MULTICAST_LOOP:
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, u8_t, NETCONN_UDP);
  115504:	e59b3004 	ldr	r3, [fp, #4]
  115508:	e3530000 	cmp	r3, #0
  11550c:	1a000001 	bne	115518 <lwip_setsockopt_impl+0x5b0>
  115510:	e3a03016 	mov	r3, #22
  115514:	ea0000ed 	b	1158d0 <lwip_setsockopt_impl+0x968>
  115518:	e51b300c 	ldr	r3, [fp, #-12]
  11551c:	e5933000 	ldr	r3, [r3]
  115520:	e3530000 	cmp	r3, #0
  115524:	0a000004 	beq	11553c <lwip_setsockopt_impl+0x5d4>
  115528:	e51b300c 	ldr	r3, [fp, #-12]
  11552c:	e5933000 	ldr	r3, [r3]
  115530:	e5933008 	ldr	r3, [r3, #8]
  115534:	e3530000 	cmp	r3, #0
  115538:	1a000001 	bne	115544 <lwip_setsockopt_impl+0x5dc>
  11553c:	e3a03016 	mov	r3, #22
  115540:	ea0000e2 	b	1158d0 <lwip_setsockopt_impl+0x968>
  115544:	e51b300c 	ldr	r3, [fp, #-12]
  115548:	e5933000 	ldr	r3, [r3]
  11554c:	e5933000 	ldr	r3, [r3]
  115550:	e20330f0 	and	r3, r3, #240	; 0xf0
  115554:	e3530020 	cmp	r3, #32
  115558:	0a000001 	beq	115564 <lwip_setsockopt_impl+0x5fc>
  11555c:	e3a0305c 	mov	r3, #92	; 0x5c
  115560:	ea0000da 	b	1158d0 <lwip_setsockopt_impl+0x968>
      if (*(const u8_t*)optval) {
  115564:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  115568:	e5d33000 	ldrb	r3, [r3]
  11556c:	e3530000 	cmp	r3, #0
  115570:	0a00000a 	beq	1155a0 <lwip_setsockopt_impl+0x638>
        udp_setflags(sock->conn->pcb.udp, udp_flags(sock->conn->pcb.udp) | UDP_FLAGS_MULTICAST_LOOP);
  115574:	e51b300c 	ldr	r3, [fp, #-12]
  115578:	e5933000 	ldr	r3, [r3]
  11557c:	e5933008 	ldr	r3, [r3, #8]
  115580:	e5d32010 	ldrb	r2, [r3, #16]
  115584:	e51b300c 	ldr	r3, [fp, #-12]
  115588:	e5933000 	ldr	r3, [r3]
  11558c:	e5933008 	ldr	r3, [r3, #8]
  115590:	e3822008 	orr	r2, r2, #8
  115594:	e6ef2072 	uxtb	r2, r2
  115598:	e5c32010 	strb	r2, [r3, #16]
      } else {
        udp_setflags(sock->conn->pcb.udp, udp_flags(sock->conn->pcb.udp) & ~UDP_FLAGS_MULTICAST_LOOP);
      }
      break;
  11559c:	ea000058 	b	115704 <lwip_setsockopt_impl+0x79c>
        udp_setflags(sock->conn->pcb.udp, udp_flags(sock->conn->pcb.udp) & ~UDP_FLAGS_MULTICAST_LOOP);
  1155a0:	e51b300c 	ldr	r3, [fp, #-12]
  1155a4:	e5933000 	ldr	r3, [r3]
  1155a8:	e5933008 	ldr	r3, [r3, #8]
  1155ac:	e5d32010 	ldrb	r2, [r3, #16]
  1155b0:	e51b300c 	ldr	r3, [fp, #-12]
  1155b4:	e5933000 	ldr	r3, [r3]
  1155b8:	e5933008 	ldr	r3, [r3, #8]
  1155bc:	e3c22008 	bic	r2, r2, #8
  1155c0:	e6ef2072 	uxtb	r2, r2
  1155c4:	e5c32010 	strb	r2, [r3, #16]
      break;
  1155c8:	ea00004d 	b	115704 <lwip_setsockopt_impl+0x79c>
    case IP_DROP_MEMBERSHIP:
      {
        /* If this is a TCP or a RAW socket, ignore these options. */
        /* @todo: assign membership to this socket so that it is dropped when closing the socket */
        err_t igmp_err;
        const struct ip_mreq *imr = (const struct ip_mreq *)optval;
  1155cc:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1155d0:	e50b3010 	str	r3, [fp, #-16]
        ip4_addr_t if_addr;
        ip4_addr_t multi_addr;
        LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, struct ip_mreq, NETCONN_UDP);
  1155d4:	e59b3004 	ldr	r3, [fp, #4]
  1155d8:	e3530007 	cmp	r3, #7
  1155dc:	8a000001 	bhi	1155e8 <lwip_setsockopt_impl+0x680>
  1155e0:	e3a03016 	mov	r3, #22
  1155e4:	ea0000b9 	b	1158d0 <lwip_setsockopt_impl+0x968>
  1155e8:	e51b300c 	ldr	r3, [fp, #-12]
  1155ec:	e5933000 	ldr	r3, [r3]
  1155f0:	e3530000 	cmp	r3, #0
  1155f4:	0a000004 	beq	11560c <lwip_setsockopt_impl+0x6a4>
  1155f8:	e51b300c 	ldr	r3, [fp, #-12]
  1155fc:	e5933000 	ldr	r3, [r3]
  115600:	e5933008 	ldr	r3, [r3, #8]
  115604:	e3530000 	cmp	r3, #0
  115608:	1a000001 	bne	115614 <lwip_setsockopt_impl+0x6ac>
  11560c:	e3a03016 	mov	r3, #22
  115610:	ea0000ae 	b	1158d0 <lwip_setsockopt_impl+0x968>
  115614:	e51b300c 	ldr	r3, [fp, #-12]
  115618:	e5933000 	ldr	r3, [r3]
  11561c:	e5933000 	ldr	r3, [r3]
  115620:	e20330f0 	and	r3, r3, #240	; 0xf0
  115624:	e3530020 	cmp	r3, #32
  115628:	0a000001 	beq	115634 <lwip_setsockopt_impl+0x6cc>
  11562c:	e3a0305c 	mov	r3, #92	; 0x5c
  115630:	ea0000a6 	b	1158d0 <lwip_setsockopt_impl+0x968>
        inet_addr_to_ip4addr(&if_addr, &imr->imr_interface);
  115634:	e51b3010 	ldr	r3, [fp, #-16]
  115638:	e5933004 	ldr	r3, [r3, #4]
  11563c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        inet_addr_to_ip4addr(&multi_addr, &imr->imr_multiaddr);
  115640:	e51b3010 	ldr	r3, [fp, #-16]
  115644:	e5933000 	ldr	r3, [r3]
  115648:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
        if (optname == IP_ADD_MEMBERSHIP) {
  11564c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  115650:	e3530003 	cmp	r3, #3
  115654:	1a000014 	bne	1156ac <lwip_setsockopt_impl+0x744>
          if (!lwip_socket_register_membership(s, &if_addr, &multi_addr)) {
  115658:	e24b201c 	sub	r2, fp, #28
  11565c:	e24b3018 	sub	r3, fp, #24
  115660:	e1a01003 	mov	r1, r3
  115664:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  115668:	eb0001ba 	bl	115d58 <lwip_socket_register_membership>
  11566c:	e1a03000 	mov	r3, r0
  115670:	e3530000 	cmp	r3, #0
  115674:	1a000004 	bne	11568c <lwip_setsockopt_impl+0x724>
            /* cannot track membership (out of memory) */
            err = ENOMEM;
  115678:	e3a0300c 	mov	r3, #12
  11567c:	e54b3005 	strb	r3, [fp, #-5]
            igmp_err = ERR_OK;
  115680:	e3a03000 	mov	r3, #0
  115684:	e54b3006 	strb	r3, [fp, #-6]
  115688:	ea000013 	b	1156dc <lwip_setsockopt_impl+0x774>
          } else {
            igmp_err = igmp_joingroup(&if_addr, &multi_addr);
  11568c:	e24b201c 	sub	r2, fp, #28
  115690:	e24b3018 	sub	r3, fp, #24
  115694:	e1a01002 	mov	r1, r2
  115698:	e1a00003 	mov	r0, r3
  11569c:	eb006c93 	bl	1308f0 <igmp_joingroup>
  1156a0:	e1a03000 	mov	r3, r0
  1156a4:	e54b3006 	strb	r3, [fp, #-6]
  1156a8:	ea00000b 	b	1156dc <lwip_setsockopt_impl+0x774>
          }
        } else {
          igmp_err = igmp_leavegroup(&if_addr, &multi_addr);
  1156ac:	e24b201c 	sub	r2, fp, #28
  1156b0:	e24b3018 	sub	r3, fp, #24
  1156b4:	e1a01002 	mov	r1, r2
  1156b8:	e1a00003 	mov	r0, r3
  1156bc:	eb006d44 	bl	130bd4 <igmp_leavegroup>
  1156c0:	e1a03000 	mov	r3, r0
  1156c4:	e54b3006 	strb	r3, [fp, #-6]
          lwip_socket_unregister_membership(s, &if_addr, &multi_addr);
  1156c8:	e24b201c 	sub	r2, fp, #28
  1156cc:	e24b3018 	sub	r3, fp, #24
  1156d0:	e1a01003 	mov	r1, r3
  1156d4:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  1156d8:	eb0001e0 	bl	115e60 <lwip_socket_unregister_membership>
        }
        if (igmp_err != ERR_OK) {
  1156dc:	e15b30d6 	ldrsb	r3, [fp, #-6]
  1156e0:	e3530000 	cmp	r3, #0
  1156e4:	0a000005 	beq	115700 <lwip_setsockopt_impl+0x798>
          err = EADDRNOTAVAIL;
  1156e8:	e3a03063 	mov	r3, #99	; 0x63
  1156ec:	e54b3005 	strb	r3, [fp, #-5]
        }
      }
      break;
  1156f0:	ea000002 	b	115700 <lwip_setsockopt_impl+0x798>
#endif /* LWIP_IGMP */
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, UNIMPL: optname=0x%x, ..)\n",
                  s, optname));
      err = ENOPROTOOPT;
  1156f4:	e3a0305c 	mov	r3, #92	; 0x5c
  1156f8:	e54b3005 	strb	r3, [fp, #-5]
      break;
  1156fc:	ea000000 	b	115704 <lwip_setsockopt_impl+0x79c>
      break;
  115700:	e320f000 	nop	{0}
    }  /* switch (optname) */
    break;
  115704:	ea000070 	b	1158cc <lwip_setsockopt_impl+0x964>

#if LWIP_TCP
/* Level: IPPROTO_TCP */
  case IPPROTO_TCP:
    /* Special case: all IPPROTO_TCP option take an int */
    LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, int, NETCONN_TCP);
  115708:	e59b3004 	ldr	r3, [fp, #4]
  11570c:	e3530003 	cmp	r3, #3
  115710:	8a000001 	bhi	11571c <lwip_setsockopt_impl+0x7b4>
  115714:	e3a03016 	mov	r3, #22
  115718:	ea00006c 	b	1158d0 <lwip_setsockopt_impl+0x968>
  11571c:	e51b300c 	ldr	r3, [fp, #-12]
  115720:	e5933000 	ldr	r3, [r3]
  115724:	e3530000 	cmp	r3, #0
  115728:	0a000004 	beq	115740 <lwip_setsockopt_impl+0x7d8>
  11572c:	e51b300c 	ldr	r3, [fp, #-12]
  115730:	e5933000 	ldr	r3, [r3]
  115734:	e5933008 	ldr	r3, [r3, #8]
  115738:	e3530000 	cmp	r3, #0
  11573c:	1a000001 	bne	115748 <lwip_setsockopt_impl+0x7e0>
  115740:	e3a03016 	mov	r3, #22
  115744:	ea000061 	b	1158d0 <lwip_setsockopt_impl+0x968>
  115748:	e51b300c 	ldr	r3, [fp, #-12]
  11574c:	e5933000 	ldr	r3, [r3]
  115750:	e5933000 	ldr	r3, [r3]
  115754:	e20330f0 	and	r3, r3, #240	; 0xf0
  115758:	e3530010 	cmp	r3, #16
  11575c:	0a000001 	beq	115768 <lwip_setsockopt_impl+0x800>
  115760:	e3a0305c 	mov	r3, #92	; 0x5c
  115764:	ea000059 	b	1158d0 <lwip_setsockopt_impl+0x968>
    if (sock->conn->pcb.tcp->state == LISTEN) {
  115768:	e51b300c 	ldr	r3, [fp, #-12]
  11576c:	e5933000 	ldr	r3, [r3]
  115770:	e5933008 	ldr	r3, [r3, #8]
  115774:	e5933014 	ldr	r3, [r3, #20]
  115778:	e3530001 	cmp	r3, #1
  11577c:	1a000001 	bne	115788 <lwip_setsockopt_impl+0x820>
      return EINVAL;
  115780:	e3a03016 	mov	r3, #22
  115784:	ea000051 	b	1158d0 <lwip_setsockopt_impl+0x968>
    }
    switch (optname) {
  115788:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11578c:	e2433001 	sub	r3, r3, #1
  115790:	e3530004 	cmp	r3, #4
  115794:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  115798:	ea000040 	b	1158a0 <lwip_setsockopt_impl+0x938>
  11579c:	001157b0 	.word	0x001157b0
  1157a0:	00115818 	.word	0x00115818
  1157a4:	00115834 	.word	0x00115834
  1157a8:	0011585c 	.word	0x0011585c
  1157ac:	00115884 	.word	0x00115884
    case TCP_NODELAY:
      if (*(const int*)optval) {
  1157b0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1157b4:	e5933000 	ldr	r3, [r3]
  1157b8:	e3530000 	cmp	r3, #0
  1157bc:	0a00000a 	beq	1157ec <lwip_setsockopt_impl+0x884>
        tcp_nagle_disable(sock->conn->pcb.tcp);
  1157c0:	e51b300c 	ldr	r3, [fp, #-12]
  1157c4:	e5933000 	ldr	r3, [r3]
  1157c8:	e5933008 	ldr	r3, [r3, #8]
  1157cc:	e5d3201e 	ldrb	r2, [r3, #30]
  1157d0:	e51b300c 	ldr	r3, [fp, #-12]
  1157d4:	e5933000 	ldr	r3, [r3]
  1157d8:	e5933008 	ldr	r3, [r3, #8]
  1157dc:	e3822040 	orr	r2, r2, #64	; 0x40
  1157e0:	e6ef2072 	uxtb	r2, r2
  1157e4:	e5c3201e 	strb	r2, [r3, #30]
      } else {
        tcp_nagle_enable(sock->conn->pcb.tcp);
      }
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_NODELAY) -> %s\n",
                  s, (*(const int *)optval)?"on":"off") );
      break;
  1157e8:	ea00002f 	b	1158ac <lwip_setsockopt_impl+0x944>
        tcp_nagle_enable(sock->conn->pcb.tcp);
  1157ec:	e51b300c 	ldr	r3, [fp, #-12]
  1157f0:	e5933000 	ldr	r3, [r3]
  1157f4:	e5933008 	ldr	r3, [r3, #8]
  1157f8:	e5d3201e 	ldrb	r2, [r3, #30]
  1157fc:	e51b300c 	ldr	r3, [fp, #-12]
  115800:	e5933000 	ldr	r3, [r3]
  115804:	e5933008 	ldr	r3, [r3, #8]
  115808:	e3c22040 	bic	r2, r2, #64	; 0x40
  11580c:	e6ef2072 	uxtb	r2, r2
  115810:	e5c3201e 	strb	r2, [r3, #30]
      break;
  115814:	ea000024 	b	1158ac <lwip_setsockopt_impl+0x944>
    case TCP_KEEPALIVE:
      sock->conn->pcb.tcp->keep_idle = (u32_t)(*(const int*)optval);
  115818:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11581c:	e5932000 	ldr	r2, [r3]
  115820:	e51b300c 	ldr	r3, [fp, #-12]
  115824:	e5933000 	ldr	r3, [r3]
  115828:	e5933008 	ldr	r3, [r3, #8]
  11582c:	e5832094 	str	r2, [r3, #148]	; 0x94
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPALIVE) -> %"U32_F"\n",
                  s, sock->conn->pcb.tcp->keep_idle));
      break;
  115830:	ea00001d 	b	1158ac <lwip_setsockopt_impl+0x944>

#if LWIP_TCP_KEEPALIVE
    case TCP_KEEPIDLE:
      sock->conn->pcb.tcp->keep_idle = 1000*(u32_t)(*(const int*)optval);
  115834:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  115838:	e5933000 	ldr	r3, [r3]
  11583c:	e1a01003 	mov	r1, r3
  115840:	e51b300c 	ldr	r3, [fp, #-12]
  115844:	e5933000 	ldr	r3, [r3]
  115848:	e5933008 	ldr	r3, [r3, #8]
  11584c:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  115850:	e0020192 	mul	r2, r2, r1
  115854:	e5832094 	str	r2, [r3, #148]	; 0x94
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPIDLE) -> %"U32_F"\n",
                  s, sock->conn->pcb.tcp->keep_idle));
      break;
  115858:	ea000013 	b	1158ac <lwip_setsockopt_impl+0x944>
    case TCP_KEEPINTVL:
      sock->conn->pcb.tcp->keep_intvl = 1000*(u32_t)(*(const int*)optval);
  11585c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  115860:	e5933000 	ldr	r3, [r3]
  115864:	e1a01003 	mov	r1, r3
  115868:	e51b300c 	ldr	r3, [fp, #-12]
  11586c:	e5933000 	ldr	r3, [r3]
  115870:	e5933008 	ldr	r3, [r3, #8]
  115874:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  115878:	e0020192 	mul	r2, r2, r1
  11587c:	e5832098 	str	r2, [r3, #152]	; 0x98
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPINTVL) -> %"U32_F"\n",
                  s, sock->conn->pcb.tcp->keep_intvl));
      break;
  115880:	ea000009 	b	1158ac <lwip_setsockopt_impl+0x944>
    case TCP_KEEPCNT:
      sock->conn->pcb.tcp->keep_cnt = (u32_t)(*(const int*)optval);
  115884:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  115888:	e5932000 	ldr	r2, [r3]
  11588c:	e51b300c 	ldr	r3, [fp, #-12]
  115890:	e5933000 	ldr	r3, [r3]
  115894:	e5933008 	ldr	r3, [r3, #8]
  115898:	e583209c 	str	r2, [r3, #156]	; 0x9c
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPCNT) -> %"U32_F"\n",
                  s, sock->conn->pcb.tcp->keep_cnt));
      break;
  11589c:	ea000002 	b	1158ac <lwip_setsockopt_impl+0x944>
#endif /* LWIP_TCP_KEEPALIVE */
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, UNIMPL: optname=0x%x, ..)\n",
                  s, optname));
      err = ENOPROTOOPT;
  1158a0:	e3a0305c 	mov	r3, #92	; 0x5c
  1158a4:	e54b3005 	strb	r3, [fp, #-5]
      break;
  1158a8:	e320f000 	nop	{0}
    }  /* switch (optname) */
    break;
  1158ac:	ea000006 	b	1158cc <lwip_setsockopt_impl+0x964>
      break;
#endif /* LWIP_IPV6 && LWIP_RAW */
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_RAW, UNIMPL: optname=0x%x, ..)\n",
                                  s, optname));
      err = ENOPROTOOPT;
  1158b0:	e3a0305c 	mov	r3, #92	; 0x5c
  1158b4:	e54b3005 	strb	r3, [fp, #-5]
      break;
  1158b8:	e320f000 	nop	{0}
    }  /* switch (optname) */
    break;
  1158bc:	ea000002 	b	1158cc <lwip_setsockopt_impl+0x964>
  default:
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, level=0x%x, UNIMPL: optname=0x%x, ..)\n",
                s, level, optname));
    err = ENOPROTOOPT;
  1158c0:	e3a0305c 	mov	r3, #92	; 0x5c
  1158c4:	e54b3005 	strb	r3, [fp, #-5]
    break;
  1158c8:	e320f000 	nop	{0}
  }  /* switch (level) */

  return err;
  1158cc:	e55b3005 	ldrb	r3, [fp, #-5]
}
  1158d0:	e1a00003 	mov	r0, r3
  1158d4:	e24bd004 	sub	sp, fp, #4
  1158d8:	e8bd8800 	pop	{fp, pc}

001158dc <lwip_ioctl>:

int
lwip_ioctl(int s, long cmd, void *argp)
{
  1158dc:	e92d4800 	push	{fp, lr}
  1158e0:	e28db004 	add	fp, sp, #4
  1158e4:	e24dd038 	sub	sp, sp, #56	; 0x38
  1158e8:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  1158ec:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
  1158f0:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
  struct lwip_sock *sock = get_socket(s);
  1158f4:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  1158f8:	ebffee03 	bl	11110c <get_socket>
  1158fc:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  u8_t val;
#if LWIP_SO_RCVBUF
  u16_t buflen = 0;
  115900:	e3a03000 	mov	r3, #0
  115904:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  if (!sock) {
  115908:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11590c:	e3530000 	cmp	r3, #0
  115910:	1a000001 	bne	11591c <lwip_ioctl+0x40>
    return -1;
  115914:	e3e03000 	mvn	r3, #0
  115918:	ea000093 	b	115b6c <lwip_ioctl+0x290>
  }

  switch (cmd) {
  11591c:	e51b2034 	ldr	r2, [fp, #-52]	; 0xffffffcc
  115920:	e306367f 	movw	r3, #26239	; 0x667f
  115924:	e3483004 	movt	r3, #32772	; 0x8004
  115928:	e1520003 	cmp	r2, r3
  11592c:	0a00000e 	beq	11596c <lwip_ioctl+0x90>
  115930:	e306367e 	movw	r3, #26238	; 0x667e
  115934:	e3443004 	movt	r3, #16388	; 0x4004
  115938:	e1520003 	cmp	r2, r3
  11593c:	0a000057 	beq	115aa0 <lwip_ioctl+0x1c4>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_ioctl(%d, FIONBIO, %d)\n", s, val));
    sock_set_errno(sock, 0);
    return 0;

  default:
    break;
  115940:	e320f000 	nop	{0}
  } /* switch (cmd) */
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_ioctl(%d, UNIMPL: 0x%lx, %p)\n", s, cmd, argp));
  sock_set_errno(sock, ENOSYS); /* not yet implemented */
  115944:	e3a03026 	mov	r3, #38	; 0x26
  115948:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  11594c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  115950:	e6ef2073 	uxtb	r2, r3
  115954:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115958:	e5c32010 	strb	r2, [r3, #16]
  11595c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  115960:	e3530000 	cmp	r3, #0
  115964:	0a00007f 	beq	115b68 <lwip_ioctl+0x28c>
  115968:	ea00007a 	b	115b58 <lwip_ioctl+0x27c>
    if (!argp) {
  11596c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  115970:	e3530000 	cmp	r3, #0
  115974:	1a00000e 	bne	1159b4 <lwip_ioctl+0xd8>
      sock_set_errno(sock, EINVAL);
  115978:	e3a03016 	mov	r3, #22
  11597c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  115980:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  115984:	e6ef2073 	uxtb	r2, r3
  115988:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11598c:	e5c32010 	strb	r2, [r3, #16]
  115990:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  115994:	e3530000 	cmp	r3, #0
  115998:	0a000003 	beq	1159ac <lwip_ioctl+0xd0>
  11599c:	eb008dc7 	bl	1390c0 <__errno_location>
  1159a0:	e1a02000 	mov	r2, r0
  1159a4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1159a8:	e5823000 	str	r3, [r2]
      return -1;
  1159ac:	e3e03000 	mvn	r3, #0
  1159b0:	ea00006d 	b	115b6c <lwip_ioctl+0x290>
    SYS_ARCH_GET(sock->conn->recv_avail, recv_avail);
  1159b4:	ebffb220 	bl	10223c <rt_enter_critical>
  1159b8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1159bc:	e5933000 	ldr	r3, [r3]
  1159c0:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  1159c4:	e50b300c 	str	r3, [fp, #-12]
  1159c8:	ebffb221 	bl	102254 <rt_exit_critical>
    if (recv_avail < 0) {
  1159cc:	e51b300c 	ldr	r3, [fp, #-12]
  1159d0:	e3530000 	cmp	r3, #0
  1159d4:	aa000001 	bge	1159e0 <lwip_ioctl+0x104>
      recv_avail = 0;
  1159d8:	e3a03000 	mov	r3, #0
  1159dc:	e50b300c 	str	r3, [fp, #-12]
    *((int*)argp) = recv_avail;
  1159e0:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1159e4:	e51b200c 	ldr	r2, [fp, #-12]
  1159e8:	e5832000 	str	r2, [r3]
    if (sock->lastdata) {
  1159ec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1159f0:	e5933004 	ldr	r3, [r3, #4]
  1159f4:	e3530000 	cmp	r3, #0
  1159f8:	0a000019 	beq	115a64 <lwip_ioctl+0x188>
      struct pbuf *p = (struct pbuf *)sock->lastdata;
  1159fc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115a00:	e5933004 	ldr	r3, [r3, #4]
  115a04:	e50b3010 	str	r3, [fp, #-16]
      if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
  115a08:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115a0c:	e5933000 	ldr	r3, [r3]
  115a10:	e5933000 	ldr	r3, [r3]
  115a14:	e20330f0 	and	r3, r3, #240	; 0xf0
  115a18:	e3530010 	cmp	r3, #16
  115a1c:	0a000002 	beq	115a2c <lwip_ioctl+0x150>
        p = ((struct netbuf *)p)->p;
  115a20:	e51b3010 	ldr	r3, [fp, #-16]
  115a24:	e5933000 	ldr	r3, [r3]
  115a28:	e50b3010 	str	r3, [fp, #-16]
      buflen = p->tot_len;
  115a2c:	e51b3010 	ldr	r3, [fp, #-16]
  115a30:	e1d330b8 	ldrh	r3, [r3, #8]
  115a34:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
      buflen -= sock->lastoffset;
  115a38:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115a3c:	e1d330b8 	ldrh	r3, [r3, #8]
  115a40:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  115a44:	e0423003 	sub	r3, r2, r3
  115a48:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
      *((int*)argp) += buflen;
  115a4c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  115a50:	e5932000 	ldr	r2, [r3]
  115a54:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  115a58:	e0822003 	add	r2, r2, r3
  115a5c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  115a60:	e5832000 	str	r2, [r3]
    sock_set_errno(sock, 0);
  115a64:	e3a03000 	mov	r3, #0
  115a68:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  115a6c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  115a70:	e6ef2073 	uxtb	r2, r3
  115a74:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115a78:	e5c32010 	strb	r2, [r3, #16]
  115a7c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  115a80:	e3530000 	cmp	r3, #0
  115a84:	0a000003 	beq	115a98 <lwip_ioctl+0x1bc>
  115a88:	eb008d8c 	bl	1390c0 <__errno_location>
  115a8c:	e1a02000 	mov	r2, r0
  115a90:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  115a94:	e5823000 	str	r3, [r2]
    return 0;
  115a98:	e3a03000 	mov	r3, #0
  115a9c:	ea000032 	b	115b6c <lwip_ioctl+0x290>
    val = 0;
  115aa0:	e3a03000 	mov	r3, #0
  115aa4:	e54b3005 	strb	r3, [fp, #-5]
    if (argp && *(u32_t*)argp) {
  115aa8:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  115aac:	e3530000 	cmp	r3, #0
  115ab0:	0a000005 	beq	115acc <lwip_ioctl+0x1f0>
  115ab4:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  115ab8:	e5933000 	ldr	r3, [r3]
  115abc:	e3530000 	cmp	r3, #0
  115ac0:	0a000001 	beq	115acc <lwip_ioctl+0x1f0>
      val = 1;
  115ac4:	e3a03001 	mov	r3, #1
  115ac8:	e54b3005 	strb	r3, [fp, #-5]
    netconn_set_nonblocking(sock->conn, val);
  115acc:	e55b3005 	ldrb	r3, [fp, #-5]
  115ad0:	e3530000 	cmp	r3, #0
  115ad4:	0a000008 	beq	115afc <lwip_ioctl+0x220>
  115ad8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115adc:	e5933000 	ldr	r3, [r3]
  115ae0:	e5d32030 	ldrb	r2, [r3, #48]	; 0x30
  115ae4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115ae8:	e5933000 	ldr	r3, [r3]
  115aec:	e3822002 	orr	r2, r2, #2
  115af0:	e6ef2072 	uxtb	r2, r2
  115af4:	e5c32030 	strb	r2, [r3, #48]	; 0x30
  115af8:	ea000007 	b	115b1c <lwip_ioctl+0x240>
  115afc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115b00:	e5933000 	ldr	r3, [r3]
  115b04:	e5d32030 	ldrb	r2, [r3, #48]	; 0x30
  115b08:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115b0c:	e5933000 	ldr	r3, [r3]
  115b10:	e3c22002 	bic	r2, r2, #2
  115b14:	e6ef2072 	uxtb	r2, r2
  115b18:	e5c32030 	strb	r2, [r3, #48]	; 0x30
    sock_set_errno(sock, 0);
  115b1c:	e3a03000 	mov	r3, #0
  115b20:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  115b24:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  115b28:	e6ef2073 	uxtb	r2, r3
  115b2c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115b30:	e5c32010 	strb	r2, [r3, #16]
  115b34:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  115b38:	e3530000 	cmp	r3, #0
  115b3c:	0a000003 	beq	115b50 <lwip_ioctl+0x274>
  115b40:	eb008d5e 	bl	1390c0 <__errno_location>
  115b44:	e1a02000 	mov	r2, r0
  115b48:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  115b4c:	e5823000 	str	r3, [r2]
    return 0;
  115b50:	e3a03000 	mov	r3, #0
  115b54:	ea000004 	b	115b6c <lwip_ioctl+0x290>
  sock_set_errno(sock, ENOSYS); /* not yet implemented */
  115b58:	eb008d58 	bl	1390c0 <__errno_location>
  115b5c:	e1a02000 	mov	r2, r0
  115b60:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  115b64:	e5823000 	str	r3, [r2]
  return -1;
  115b68:	e3e03000 	mvn	r3, #0
}
  115b6c:	e1a00003 	mov	r0, r3
  115b70:	e24bd004 	sub	sp, fp, #4
  115b74:	e8bd8800 	pop	{fp, pc}

00115b78 <lwip_fcntl>:
 * Currently only the commands F_GETFL and F_SETFL are implemented.
 * Only the flag O_NONBLOCK is implemented.
 */
int
lwip_fcntl(int s, int cmd, int val)
{
  115b78:	e92d4800 	push	{fp, lr}
  115b7c:	e28db004 	add	fp, sp, #4
  115b80:	e24dd028 	sub	sp, sp, #40	; 0x28
  115b84:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  115b88:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  115b8c:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  struct lwip_sock *sock = get_socket(s);
  115b90:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  115b94:	ebffed5c 	bl	11110c <get_socket>
  115b98:	e50b000c 	str	r0, [fp, #-12]
  int ret = -1;
  115b9c:	e3e03000 	mvn	r3, #0
  115ba0:	e50b3008 	str	r3, [fp, #-8]

  if (!sock) {
  115ba4:	e51b300c 	ldr	r3, [fp, #-12]
  115ba8:	e3530000 	cmp	r3, #0
  115bac:	1a000001 	bne	115bb8 <lwip_fcntl+0x40>
    return -1;
  115bb0:	e3e03000 	mvn	r3, #0
  115bb4:	ea000064 	b	115d4c <lwip_fcntl+0x1d4>
  }

  switch (cmd) {
  115bb8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  115bbc:	e3530003 	cmp	r3, #3
  115bc0:	0a000002 	beq	115bd0 <lwip_fcntl+0x58>
  115bc4:	e3530004 	cmp	r3, #4
  115bc8:	0a000014 	beq	115c20 <lwip_fcntl+0xa8>
  115bcc:	ea00004a 	b	115cfc <lwip_fcntl+0x184>
  case F_GETFL:
    ret = netconn_is_nonblocking(sock->conn) ? O_NONBLOCK : 0;
  115bd0:	e51b300c 	ldr	r3, [fp, #-12]
  115bd4:	e5933000 	ldr	r3, [r3]
  115bd8:	e5d33030 	ldrb	r3, [r3, #48]	; 0x30
  115bdc:	e1a03503 	lsl	r3, r3, #10
  115be0:	e2033b02 	and	r3, r3, #2048	; 0x800
  115be4:	e50b3008 	str	r3, [fp, #-8]
    sock_set_errno(sock, 0);
  115be8:	e3a03000 	mov	r3, #0
  115bec:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  115bf0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  115bf4:	e6ef2073 	uxtb	r2, r3
  115bf8:	e51b300c 	ldr	r3, [fp, #-12]
  115bfc:	e5c32010 	strb	r2, [r3, #16]
  115c00:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  115c04:	e3530000 	cmp	r3, #0
  115c08:	0a000049 	beq	115d34 <lwip_fcntl+0x1bc>
  115c0c:	eb008d2b 	bl	1390c0 <__errno_location>
  115c10:	e1a02000 	mov	r2, r0
  115c14:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  115c18:	e5823000 	str	r3, [r2]
    break;
  115c1c:	ea000044 	b	115d34 <lwip_fcntl+0x1bc>
  case F_SETFL:
    if ((val & ~O_NONBLOCK) == 0) {
  115c20:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  115c24:	e3c33b02 	bic	r3, r3, #2048	; 0x800
  115c28:	e3530000 	cmp	r3, #0
  115c2c:	1a000024 	bne	115cc4 <lwip_fcntl+0x14c>
      /* only O_NONBLOCK, all other bits are zero */
      netconn_set_nonblocking(sock->conn, val & O_NONBLOCK);
  115c30:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  115c34:	e2033b02 	and	r3, r3, #2048	; 0x800
  115c38:	e3530000 	cmp	r3, #0
  115c3c:	0a000008 	beq	115c64 <lwip_fcntl+0xec>
  115c40:	e51b300c 	ldr	r3, [fp, #-12]
  115c44:	e5933000 	ldr	r3, [r3]
  115c48:	e5d32030 	ldrb	r2, [r3, #48]	; 0x30
  115c4c:	e51b300c 	ldr	r3, [fp, #-12]
  115c50:	e5933000 	ldr	r3, [r3]
  115c54:	e3822002 	orr	r2, r2, #2
  115c58:	e6ef2072 	uxtb	r2, r2
  115c5c:	e5c32030 	strb	r2, [r3, #48]	; 0x30
  115c60:	ea000007 	b	115c84 <lwip_fcntl+0x10c>
  115c64:	e51b300c 	ldr	r3, [fp, #-12]
  115c68:	e5933000 	ldr	r3, [r3]
  115c6c:	e5d32030 	ldrb	r2, [r3, #48]	; 0x30
  115c70:	e51b300c 	ldr	r3, [fp, #-12]
  115c74:	e5933000 	ldr	r3, [r3]
  115c78:	e3c22002 	bic	r2, r2, #2
  115c7c:	e6ef2072 	uxtb	r2, r2
  115c80:	e5c32030 	strb	r2, [r3, #48]	; 0x30
      ret = 0;
  115c84:	e3a03000 	mov	r3, #0
  115c88:	e50b3008 	str	r3, [fp, #-8]
      sock_set_errno(sock, 0);
  115c8c:	e3a03000 	mov	r3, #0
  115c90:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  115c94:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115c98:	e6ef2073 	uxtb	r2, r3
  115c9c:	e51b300c 	ldr	r3, [fp, #-12]
  115ca0:	e5c32010 	strb	r2, [r3, #16]
  115ca4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115ca8:	e3530000 	cmp	r3, #0
  115cac:	0a000022 	beq	115d3c <lwip_fcntl+0x1c4>
  115cb0:	eb008d02 	bl	1390c0 <__errno_location>
  115cb4:	e1a02000 	mov	r2, r0
  115cb8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115cbc:	e5823000 	str	r3, [r2]
    } else {
      sock_set_errno(sock, ENOSYS); /* not yet implemented */
    }
    break;
  115cc0:	ea00001d 	b	115d3c <lwip_fcntl+0x1c4>
      sock_set_errno(sock, ENOSYS); /* not yet implemented */
  115cc4:	e3a03026 	mov	r3, #38	; 0x26
  115cc8:	e50b3010 	str	r3, [fp, #-16]
  115ccc:	e51b3010 	ldr	r3, [fp, #-16]
  115cd0:	e6ef2073 	uxtb	r2, r3
  115cd4:	e51b300c 	ldr	r3, [fp, #-12]
  115cd8:	e5c32010 	strb	r2, [r3, #16]
  115cdc:	e51b3010 	ldr	r3, [fp, #-16]
  115ce0:	e3530000 	cmp	r3, #0
  115ce4:	0a000014 	beq	115d3c <lwip_fcntl+0x1c4>
  115ce8:	eb008cf4 	bl	1390c0 <__errno_location>
  115cec:	e1a02000 	mov	r2, r0
  115cf0:	e51b3010 	ldr	r3, [fp, #-16]
  115cf4:	e5823000 	str	r3, [r2]
    break;
  115cf8:	ea00000f 	b	115d3c <lwip_fcntl+0x1c4>
  default:
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_fcntl(%d, UNIMPL: %d, %d)\n", s, cmd, val));
    sock_set_errno(sock, ENOSYS); /* not yet implemented */
  115cfc:	e3a03026 	mov	r3, #38	; 0x26
  115d00:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  115d04:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  115d08:	e6ef2073 	uxtb	r2, r3
  115d0c:	e51b300c 	ldr	r3, [fp, #-12]
  115d10:	e5c32010 	strb	r2, [r3, #16]
  115d14:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  115d18:	e3530000 	cmp	r3, #0
  115d1c:	0a000008 	beq	115d44 <lwip_fcntl+0x1cc>
  115d20:	eb008ce6 	bl	1390c0 <__errno_location>
  115d24:	e1a02000 	mov	r2, r0
  115d28:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  115d2c:	e5823000 	str	r3, [r2]
    break;
  115d30:	ea000003 	b	115d44 <lwip_fcntl+0x1cc>
    break;
  115d34:	e320f000 	nop	{0}
  115d38:	ea000002 	b	115d48 <lwip_fcntl+0x1d0>
    break;
  115d3c:	e320f000 	nop	{0}
  115d40:	ea000000 	b	115d48 <lwip_fcntl+0x1d0>
    break;
  115d44:	e320f000 	nop	{0}
  }
  return ret;
  115d48:	e51b3008 	ldr	r3, [fp, #-8]
}
  115d4c:	e1a00003 	mov	r0, r3
  115d50:	e24bd004 	sub	sp, fp, #4
  115d54:	e8bd8800 	pop	{fp, pc}

00115d58 <lwip_socket_register_membership>:
 *
 * @return 1 on success, 0 on failure
 */
static int
lwip_socket_register_membership(int s, const ip4_addr_t *if_addr, const ip4_addr_t *multi_addr)
{
  115d58:	e92d4800 	push	{fp, lr}
  115d5c:	e28db004 	add	fp, sp, #4
  115d60:	e24dd018 	sub	sp, sp, #24
  115d64:	e50b0010 	str	r0, [fp, #-16]
  115d68:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  115d6c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  struct lwip_sock *sock = get_socket(s);
  115d70:	e51b0010 	ldr	r0, [fp, #-16]
  115d74:	ebffece4 	bl	11110c <get_socket>
  115d78:	e50b000c 	str	r0, [fp, #-12]
  int i;

  if (!sock) {
  115d7c:	e51b300c 	ldr	r3, [fp, #-12]
  115d80:	e3530000 	cmp	r3, #0
  115d84:	1a000001 	bne	115d90 <lwip_socket_register_membership+0x38>
    return 0;
  115d88:	e3a03000 	mov	r3, #0
  115d8c:	ea000030 	b	115e54 <lwip_socket_register_membership+0xfc>
  }

  for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
  115d90:	e3a03000 	mov	r3, #0
  115d94:	e50b3008 	str	r3, [fp, #-8]
  115d98:	ea000029 	b	115e44 <lwip_socket_register_membership+0xec>
    if (socket_ipv4_multicast_memberships[i].sock == NULL) {
  115d9c:	e3003584 	movw	r3, #1412	; 0x584
  115da0:	e3403015 	movt	r3, #21
  115da4:	e51b2008 	ldr	r2, [fp, #-8]
  115da8:	e3a0100c 	mov	r1, #12
  115dac:	e0020291 	mul	r2, r1, r2
  115db0:	e0833002 	add	r3, r3, r2
  115db4:	e5933000 	ldr	r3, [r3]
  115db8:	e3530000 	cmp	r3, #0
  115dbc:	1a00001d 	bne	115e38 <lwip_socket_register_membership+0xe0>
      socket_ipv4_multicast_memberships[i].sock = sock;
  115dc0:	e3003584 	movw	r3, #1412	; 0x584
  115dc4:	e3403015 	movt	r3, #21
  115dc8:	e51b2008 	ldr	r2, [fp, #-8]
  115dcc:	e3a0100c 	mov	r1, #12
  115dd0:	e0020291 	mul	r2, r1, r2
  115dd4:	e0833002 	add	r3, r3, r2
  115dd8:	e51b200c 	ldr	r2, [fp, #-12]
  115ddc:	e5832000 	str	r2, [r3]
      ip4_addr_copy(socket_ipv4_multicast_memberships[i].if_addr, *if_addr);
  115de0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115de4:	e5932000 	ldr	r2, [r3]
  115de8:	e3003584 	movw	r3, #1412	; 0x584
  115dec:	e3403015 	movt	r3, #21
  115df0:	e51b1008 	ldr	r1, [fp, #-8]
  115df4:	e3a0000c 	mov	r0, #12
  115df8:	e0010190 	mul	r1, r0, r1
  115dfc:	e0833001 	add	r3, r3, r1
  115e00:	e2833004 	add	r3, r3, #4
  115e04:	e5832000 	str	r2, [r3]
      ip4_addr_copy(socket_ipv4_multicast_memberships[i].multi_addr, *multi_addr);
  115e08:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  115e0c:	e5932000 	ldr	r2, [r3]
  115e10:	e3003584 	movw	r3, #1412	; 0x584
  115e14:	e3403015 	movt	r3, #21
  115e18:	e51b1008 	ldr	r1, [fp, #-8]
  115e1c:	e3a0000c 	mov	r0, #12
  115e20:	e0010190 	mul	r1, r0, r1
  115e24:	e0833001 	add	r3, r3, r1
  115e28:	e2833008 	add	r3, r3, #8
  115e2c:	e5832000 	str	r2, [r3]
      return 1;
  115e30:	e3a03001 	mov	r3, #1
  115e34:	ea000006 	b	115e54 <lwip_socket_register_membership+0xfc>
  for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
  115e38:	e51b3008 	ldr	r3, [fp, #-8]
  115e3c:	e2833001 	add	r3, r3, #1
  115e40:	e50b3008 	str	r3, [fp, #-8]
  115e44:	e51b3008 	ldr	r3, [fp, #-8]
  115e48:	e3530007 	cmp	r3, #7
  115e4c:	daffffd2 	ble	115d9c <lwip_socket_register_membership+0x44>
    }
  }
  return 0;
  115e50:	e3a03000 	mov	r3, #0
}
  115e54:	e1a00003 	mov	r0, r3
  115e58:	e24bd004 	sub	sp, fp, #4
  115e5c:	e8bd8800 	pop	{fp, pc}

00115e60 <lwip_socket_unregister_membership>:
 *
 * ATTENTION: this function is called from tcpip_thread (or under CORE_LOCK).
 */
static void
lwip_socket_unregister_membership(int s, const ip4_addr_t *if_addr, const ip4_addr_t *multi_addr)
{
  115e60:	e92d4800 	push	{fp, lr}
  115e64:	e28db004 	add	fp, sp, #4
  115e68:	e24dd018 	sub	sp, sp, #24
  115e6c:	e50b0010 	str	r0, [fp, #-16]
  115e70:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  115e74:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  struct lwip_sock *sock = get_socket(s);
  115e78:	e51b0010 	ldr	r0, [fp, #-16]
  115e7c:	ebffeca2 	bl	11110c <get_socket>
  115e80:	e50b000c 	str	r0, [fp, #-12]
  int i;

  if (!sock) {
  115e84:	e51b300c 	ldr	r3, [fp, #-12]
  115e88:	e3530000 	cmp	r3, #0
  115e8c:	0a000046 	beq	115fac <lwip_socket_unregister_membership+0x14c>
    return;
  }

  for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
  115e90:	e3a03000 	mov	r3, #0
  115e94:	e50b3008 	str	r3, [fp, #-8]
  115e98:	ea00003f 	b	115f9c <lwip_socket_unregister_membership+0x13c>
    if ((socket_ipv4_multicast_memberships[i].sock == sock) &&
  115e9c:	e3003584 	movw	r3, #1412	; 0x584
  115ea0:	e3403015 	movt	r3, #21
  115ea4:	e51b2008 	ldr	r2, [fp, #-8]
  115ea8:	e3a0100c 	mov	r1, #12
  115eac:	e0020291 	mul	r2, r1, r2
  115eb0:	e0833002 	add	r3, r3, r2
  115eb4:	e5933000 	ldr	r3, [r3]
  115eb8:	e51b200c 	ldr	r2, [fp, #-12]
  115ebc:	e1520003 	cmp	r2, r3
  115ec0:	1a000032 	bne	115f90 <lwip_socket_unregister_membership+0x130>
        ip4_addr_cmp(&socket_ipv4_multicast_memberships[i].if_addr, if_addr) &&
  115ec4:	e3003584 	movw	r3, #1412	; 0x584
  115ec8:	e3403015 	movt	r3, #21
  115ecc:	e51b2008 	ldr	r2, [fp, #-8]
  115ed0:	e3a0100c 	mov	r1, #12
  115ed4:	e0020291 	mul	r2, r1, r2
  115ed8:	e0833002 	add	r3, r3, r2
  115edc:	e2833004 	add	r3, r3, #4
  115ee0:	e5932000 	ldr	r2, [r3]
  115ee4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  115ee8:	e5933000 	ldr	r3, [r3]
    if ((socket_ipv4_multicast_memberships[i].sock == sock) &&
  115eec:	e1520003 	cmp	r2, r3
  115ef0:	1a000026 	bne	115f90 <lwip_socket_unregister_membership+0x130>
        ip4_addr_cmp(&socket_ipv4_multicast_memberships[i].multi_addr, multi_addr)) {
  115ef4:	e3003584 	movw	r3, #1412	; 0x584
  115ef8:	e3403015 	movt	r3, #21
  115efc:	e51b2008 	ldr	r2, [fp, #-8]
  115f00:	e3a0100c 	mov	r1, #12
  115f04:	e0020291 	mul	r2, r1, r2
  115f08:	e0833002 	add	r3, r3, r2
  115f0c:	e2833008 	add	r3, r3, #8
  115f10:	e5932000 	ldr	r2, [r3]
  115f14:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  115f18:	e5933000 	ldr	r3, [r3]
        ip4_addr_cmp(&socket_ipv4_multicast_memberships[i].if_addr, if_addr) &&
  115f1c:	e1520003 	cmp	r2, r3
  115f20:	1a00001a 	bne	115f90 <lwip_socket_unregister_membership+0x130>
      socket_ipv4_multicast_memberships[i].sock = NULL;
  115f24:	e3003584 	movw	r3, #1412	; 0x584
  115f28:	e3403015 	movt	r3, #21
  115f2c:	e51b2008 	ldr	r2, [fp, #-8]
  115f30:	e3a0100c 	mov	r1, #12
  115f34:	e0020291 	mul	r2, r1, r2
  115f38:	e0833002 	add	r3, r3, r2
  115f3c:	e3a02000 	mov	r2, #0
  115f40:	e5832000 	str	r2, [r3]
      ip4_addr_set_zero(&socket_ipv4_multicast_memberships[i].if_addr);
  115f44:	e3003584 	movw	r3, #1412	; 0x584
  115f48:	e3403015 	movt	r3, #21
  115f4c:	e51b2008 	ldr	r2, [fp, #-8]
  115f50:	e3a0100c 	mov	r1, #12
  115f54:	e0020291 	mul	r2, r1, r2
  115f58:	e0833002 	add	r3, r3, r2
  115f5c:	e2833004 	add	r3, r3, #4
  115f60:	e3a02000 	mov	r2, #0
  115f64:	e5832000 	str	r2, [r3]
      ip4_addr_set_zero(&socket_ipv4_multicast_memberships[i].multi_addr);
  115f68:	e3003584 	movw	r3, #1412	; 0x584
  115f6c:	e3403015 	movt	r3, #21
  115f70:	e51b2008 	ldr	r2, [fp, #-8]
  115f74:	e3a0100c 	mov	r1, #12
  115f78:	e0020291 	mul	r2, r1, r2
  115f7c:	e0833002 	add	r3, r3, r2
  115f80:	e2833008 	add	r3, r3, #8
  115f84:	e3a02000 	mov	r2, #0
  115f88:	e5832000 	str	r2, [r3]
      return;
  115f8c:	ea000007 	b	115fb0 <lwip_socket_unregister_membership+0x150>
  for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
  115f90:	e51b3008 	ldr	r3, [fp, #-8]
  115f94:	e2833001 	add	r3, r3, #1
  115f98:	e50b3008 	str	r3, [fp, #-8]
  115f9c:	e51b3008 	ldr	r3, [fp, #-8]
  115fa0:	e3530007 	cmp	r3, #7
  115fa4:	daffffbc 	ble	115e9c <lwip_socket_unregister_membership+0x3c>
  115fa8:	ea000000 	b	115fb0 <lwip_socket_unregister_membership+0x150>
    return;
  115fac:	e320f000 	nop	{0}
    }
  }
}
  115fb0:	e24bd004 	sub	sp, fp, #4
  115fb4:	e8bd8800 	pop	{fp, pc}

00115fb8 <lwip_socket_drop_registered_memberships>:
 *
 * ATTENTION: this function is NOT called from tcpip_thread (or under CORE_LOCK).
 */
static void
lwip_socket_drop_registered_memberships(int s)
{
  115fb8:	e92d4800 	push	{fp, lr}
  115fbc:	e28db004 	add	fp, sp, #4
  115fc0:	e24dd018 	sub	sp, sp, #24
  115fc4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct lwip_sock *sock = get_socket(s);
  115fc8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  115fcc:	ebffec4e 	bl	11110c <get_socket>
  115fd0:	e50b000c 	str	r0, [fp, #-12]
  int i;

  if (!sock) {
  115fd4:	e51b300c 	ldr	r3, [fp, #-12]
  115fd8:	e3530000 	cmp	r3, #0
  115fdc:	0a000045 	beq	1160f8 <lwip_socket_drop_registered_memberships+0x140>
    return;
  }

  for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
  115fe0:	e3a03000 	mov	r3, #0
  115fe4:	e50b3008 	str	r3, [fp, #-8]
  115fe8:	ea00003e 	b	1160e8 <lwip_socket_drop_registered_memberships+0x130>
    if (socket_ipv4_multicast_memberships[i].sock == sock) {
  115fec:	e3003584 	movw	r3, #1412	; 0x584
  115ff0:	e3403015 	movt	r3, #21
  115ff4:	e51b2008 	ldr	r2, [fp, #-8]
  115ff8:	e3a0100c 	mov	r1, #12
  115ffc:	e0020291 	mul	r2, r1, r2
  116000:	e0833002 	add	r3, r3, r2
  116004:	e5933000 	ldr	r3, [r3]
  116008:	e51b200c 	ldr	r2, [fp, #-12]
  11600c:	e1520003 	cmp	r2, r3
  116010:	1a000031 	bne	1160dc <lwip_socket_drop_registered_memberships+0x124>
      ip_addr_t multi_addr, if_addr;
      ip_addr_copy_from_ip4(multi_addr, socket_ipv4_multicast_memberships[i].multi_addr);
  116014:	e3003584 	movw	r3, #1412	; 0x584
  116018:	e3403015 	movt	r3, #21
  11601c:	e51b2008 	ldr	r2, [fp, #-8]
  116020:	e3a0100c 	mov	r1, #12
  116024:	e0020291 	mul	r2, r1, r2
  116028:	e0833002 	add	r3, r3, r2
  11602c:	e2833008 	add	r3, r3, #8
  116030:	e5933000 	ldr	r3, [r3]
  116034:	e50b3010 	str	r3, [fp, #-16]
      ip_addr_copy_from_ip4(if_addr, socket_ipv4_multicast_memberships[i].if_addr);
  116038:	e3003584 	movw	r3, #1412	; 0x584
  11603c:	e3403015 	movt	r3, #21
  116040:	e51b2008 	ldr	r2, [fp, #-8]
  116044:	e3a0100c 	mov	r1, #12
  116048:	e0020291 	mul	r2, r1, r2
  11604c:	e0833002 	add	r3, r3, r2
  116050:	e2833004 	add	r3, r3, #4
  116054:	e5933000 	ldr	r3, [r3]
  116058:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
      socket_ipv4_multicast_memberships[i].sock = NULL;
  11605c:	e3003584 	movw	r3, #1412	; 0x584
  116060:	e3403015 	movt	r3, #21
  116064:	e51b2008 	ldr	r2, [fp, #-8]
  116068:	e3a0100c 	mov	r1, #12
  11606c:	e0020291 	mul	r2, r1, r2
  116070:	e0833002 	add	r3, r3, r2
  116074:	e3a02000 	mov	r2, #0
  116078:	e5832000 	str	r2, [r3]
      ip4_addr_set_zero(&socket_ipv4_multicast_memberships[i].if_addr);
  11607c:	e3003584 	movw	r3, #1412	; 0x584
  116080:	e3403015 	movt	r3, #21
  116084:	e51b2008 	ldr	r2, [fp, #-8]
  116088:	e3a0100c 	mov	r1, #12
  11608c:	e0020291 	mul	r2, r1, r2
  116090:	e0833002 	add	r3, r3, r2
  116094:	e2833004 	add	r3, r3, #4
  116098:	e3a02000 	mov	r2, #0
  11609c:	e5832000 	str	r2, [r3]
      ip4_addr_set_zero(&socket_ipv4_multicast_memberships[i].multi_addr);
  1160a0:	e3003584 	movw	r3, #1412	; 0x584
  1160a4:	e3403015 	movt	r3, #21
  1160a8:	e51b2008 	ldr	r2, [fp, #-8]
  1160ac:	e3a0100c 	mov	r1, #12
  1160b0:	e0020291 	mul	r2, r1, r2
  1160b4:	e0833002 	add	r3, r3, r2
  1160b8:	e2833008 	add	r3, r3, #8
  1160bc:	e3a02000 	mov	r2, #0
  1160c0:	e5832000 	str	r2, [r3]

      netconn_join_leave_group(sock->conn, &multi_addr, &if_addr, NETCONN_LEAVE);
  1160c4:	e51b300c 	ldr	r3, [fp, #-12]
  1160c8:	e5930000 	ldr	r0, [r3]
  1160cc:	e24b2014 	sub	r2, fp, #20
  1160d0:	e24b1010 	sub	r1, fp, #16
  1160d4:	e3a03001 	mov	r3, #1
  1160d8:	ebffd8dc 	bl	10c450 <netconn_join_leave_group>
  for (i = 0; i < LWIP_SOCKET_MAX_MEMBERSHIPS; i++) {
  1160dc:	e51b3008 	ldr	r3, [fp, #-8]
  1160e0:	e2833001 	add	r3, r3, #1
  1160e4:	e50b3008 	str	r3, [fp, #-8]
  1160e8:	e51b3008 	ldr	r3, [fp, #-8]
  1160ec:	e3530007 	cmp	r3, #7
  1160f0:	daffffbd 	ble	115fec <lwip_socket_drop_registered_memberships+0x34>
  1160f4:	ea000000 	b	1160fc <lwip_socket_drop_registered_memberships+0x144>
    return;
  1160f8:	e320f000 	nop	{0}
    }
  }
}
  1160fc:	e24bd004 	sub	sp, fp, #4
  116100:	e8bd8800 	pop	{fp, pc}

00116104 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
  116104:	e92d4800 	push	{fp, lr}
  116108:	e28db004 	add	fp, sp, #4
  11610c:	e24dd010 	sub	sp, sp, #16
  116110:	e50b0010 	str	r0, [fp, #-16]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
  116114:	e30e3c28 	movw	r3, #60456	; 0xec28
  116118:	e3403014 	movt	r3, #20
  11611c:	e5933000 	ldr	r3, [r3]
  116120:	e3530000 	cmp	r3, #0
  116124:	0a000007 	beq	116148 <tcpip_thread+0x44>
    tcpip_init_done(tcpip_init_done_arg);
  116128:	e30e3c28 	movw	r3, #60456	; 0xec28
  11612c:	e3403014 	movt	r3, #20
  116130:	e5932000 	ldr	r2, [r3]
  116134:	e30e3c2c 	movw	r3, #60460	; 0xec2c
  116138:	e3403014 	movt	r3, #20
  11613c:	e5933000 	ldr	r3, [r3]
  116140:	e1a00003 	mov	r0, r3
  116144:	e12fff32 	blx	r2
  }

  LOCK_TCPIP_CORE();
  116148:	e30005e4 	movw	r0, #1508	; 0x5e4
  11614c:	e3400015 	movt	r0, #21
  116150:	ebffd1e2 	bl	10a8e0 <sys_mutex_lock>
  while (1) {                          /* MAIN Loop */
    UNLOCK_TCPIP_CORE();
  116154:	e30005e4 	movw	r0, #1508	; 0x5e4
  116158:	e3400015 	movt	r0, #21
  11615c:	ebffd1eb 	bl	10a910 <sys_mutex_unlock>
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
  116160:	e24b3008 	sub	r3, fp, #8
  116164:	e1a01003 	mov	r1, r3
  116168:	e30e0c30 	movw	r0, #60464	; 0xec30
  11616c:	e3400014 	movt	r0, #20
  116170:	eb004661 	bl	127afc <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
  116174:	e30005e4 	movw	r0, #1508	; 0x5e4
  116178:	e3400015 	movt	r0, #21
  11617c:	ebffd1d7 	bl	10a8e0 <sys_mutex_lock>
    if (msg == NULL) {
  116180:	e51b3008 	ldr	r3, [fp, #-8]
  116184:	e3530000 	cmp	r3, #0
  116188:	1a000007 	bne	1161ac <tcpip_thread+0xa8>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
  11618c:	e3070154 	movw	r0, #29012	; 0x7154
  116190:	e3400014 	movt	r0, #20
  116194:	ebffb3de 	bl	103114 <rt_kprintf>
  116198:	e3a01069 	mov	r1, #105	; 0x69
  11619c:	e3070174 	movw	r0, #29044	; 0x7174
  1161a0:	e3400014 	movt	r0, #20
  1161a4:	ebffd3ae 	bl	10b064 <sys_arch_assert>
      continue;
  1161a8:	ea00002e 	b	116268 <tcpip_thread+0x164>
    }
    switch (msg->type) {
  1161ac:	e51b3008 	ldr	r3, [fp, #-8]
  1161b0:	e5933000 	ldr	r3, [r3]
  1161b4:	e3530003 	cmp	r3, #3
  1161b8:	0a000010 	beq	116200 <tcpip_thread+0xfc>
  1161bc:	e3530004 	cmp	r3, #4
  1161c0:	0a000019 	beq	11622c <tcpip_thread+0x128>
  1161c4:	e3530002 	cmp	r3, #2
  1161c8:	1a00001e 	bne	116248 <tcpip_thread+0x144>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
  1161cc:	e51b3008 	ldr	r3, [fp, #-8]
  1161d0:	e593300c 	ldr	r3, [r3, #12]
  1161d4:	e51b2008 	ldr	r2, [fp, #-8]
  1161d8:	e5920004 	ldr	r0, [r2, #4]
  1161dc:	e51b2008 	ldr	r2, [fp, #-8]
  1161e0:	e5922008 	ldr	r2, [r2, #8]
  1161e4:	e1a01002 	mov	r1, r2
  1161e8:	e12fff33 	blx	r3
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
  1161ec:	e51b3008 	ldr	r3, [fp, #-8]
  1161f0:	e1a01003 	mov	r1, r3
  1161f4:	e3a0000a 	mov	r0, #10
  1161f8:	eb000c99 	bl	119464 <memp_free>
      break;
  1161fc:	ea000019 	b	116268 <tcpip_thread+0x164>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
  116200:	e51b3008 	ldr	r3, [fp, #-8]
  116204:	e5933004 	ldr	r3, [r3, #4]
  116208:	e51b2008 	ldr	r2, [fp, #-8]
  11620c:	e5922008 	ldr	r2, [r2, #8]
  116210:	e1a00002 	mov	r0, r2
  116214:	e12fff33 	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
  116218:	e51b3008 	ldr	r3, [fp, #-8]
  11621c:	e1a01003 	mov	r1, r3
  116220:	e3a00009 	mov	r0, #9
  116224:	eb000c8e 	bl	119464 <memp_free>
      break;
  116228:	ea00000e 	b	116268 <tcpip_thread+0x164>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
  11622c:	e51b3008 	ldr	r3, [fp, #-8]
  116230:	e5933004 	ldr	r3, [r3, #4]
  116234:	e51b2008 	ldr	r2, [fp, #-8]
  116238:	e5922008 	ldr	r2, [r2, #8]
  11623c:	e1a00002 	mov	r0, r2
  116240:	e12fff33 	blx	r3
      break;
  116244:	ea000007 	b	116268 <tcpip_thread+0x164>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
  116248:	e3070154 	movw	r0, #29012	; 0x7154
  11624c:	e3400014 	movt	r0, #20
  116250:	ebffb3af 	bl	103114 <rt_kprintf>
  116254:	e3a0109b 	mov	r1, #155	; 0x9b
  116258:	e3070174 	movw	r0, #29044	; 0x7174
  11625c:	e3400014 	movt	r0, #20
  116260:	ebffd37f 	bl	10b064 <sys_arch_assert>
      break;
  116264:	e320f000 	nop	{0}
    UNLOCK_TCPIP_CORE();
  116268:	eaffffb9 	b	116154 <tcpip_thread+0x50>

0011626c <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
  11626c:	e92d4800 	push	{fp, lr}
  116270:	e28db004 	add	fp, sp, #4
  116274:	e24dd018 	sub	sp, sp, #24
  116278:	e50b0010 	str	r0, [fp, #-16]
  11627c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  116280:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
  116284:	e30e0c30 	movw	r0, #60464	; 0xec30
  116288:	e3400014 	movt	r0, #20
  11628c:	ebffd32b 	bl	10af40 <sys_mbox_valid>
  116290:	e1a03000 	mov	r3, r0
  116294:	e3530000 	cmp	r3, #0
  116298:	1a000006 	bne	1162b8 <tcpip_inpkt+0x4c>
  11629c:	e30701a0 	movw	r0, #29088	; 0x71a0
  1162a0:	e3400014 	movt	r0, #20
  1162a4:	ebffb39a 	bl	103114 <rt_kprintf>
  1162a8:	e3a010b5 	mov	r1, #181	; 0xb5
  1162ac:	e3070174 	movw	r0, #29044	; 0x7174
  1162b0:	e3400014 	movt	r0, #20
  1162b4:	ebffd36a 	bl	10b064 <sys_arch_assert>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
  1162b8:	e3a020b7 	mov	r2, #183	; 0xb7
  1162bc:	e3071174 	movw	r1, #29044	; 0x7174
  1162c0:	e3401014 	movt	r1, #20
  1162c4:	e3a0000a 	mov	r0, #10
  1162c8:	eb000bfd 	bl	1192c4 <memp_malloc_fn>
  1162cc:	e50b0008 	str	r0, [fp, #-8]
  if (msg == NULL) {
  1162d0:	e51b3008 	ldr	r3, [fp, #-8]
  1162d4:	e3530000 	cmp	r3, #0
  1162d8:	1a000001 	bne	1162e4 <tcpip_inpkt+0x78>
    return ERR_MEM;
  1162dc:	e3e03000 	mvn	r3, #0
  1162e0:	ea000018 	b	116348 <tcpip_inpkt+0xdc>
  }

  msg->type = TCPIP_MSG_INPKT;
  1162e4:	e51b3008 	ldr	r3, [fp, #-8]
  1162e8:	e3a02002 	mov	r2, #2
  1162ec:	e5832000 	str	r2, [r3]
  msg->msg.inp.p = p;
  1162f0:	e51b3008 	ldr	r3, [fp, #-8]
  1162f4:	e51b2010 	ldr	r2, [fp, #-16]
  1162f8:	e5832004 	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
  1162fc:	e51b3008 	ldr	r3, [fp, #-8]
  116300:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  116304:	e5832008 	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
  116308:	e51b3008 	ldr	r3, [fp, #-8]
  11630c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  116310:	e583200c 	str	r2, [r3, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
  116314:	e51b1008 	ldr	r1, [fp, #-8]
  116318:	e30e0c30 	movw	r0, #60464	; 0xec30
  11631c:	e3400014 	movt	r0, #20
  116320:	ebffd2a8 	bl	10adc8 <sys_mbox_trypost>
  116324:	e1a03000 	mov	r3, r0
  116328:	e3530000 	cmp	r3, #0
  11632c:	0a000004 	beq	116344 <tcpip_inpkt+0xd8>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
  116330:	e51b1008 	ldr	r1, [fp, #-8]
  116334:	e3a0000a 	mov	r0, #10
  116338:	eb000c49 	bl	119464 <memp_free>
    return ERR_MEM;
  11633c:	e3e03000 	mvn	r3, #0
  116340:	ea000000 	b	116348 <tcpip_inpkt+0xdc>
  }
  return ERR_OK;
  116344:	e3a03000 	mov	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
  116348:	e1a00003 	mov	r0, r3
  11634c:	e24bd004 	sub	sp, fp, #4
  116350:	e8bd8800 	pop	{fp, pc}

00116354 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
  116354:	e92d4800 	push	{fp, lr}
  116358:	e28db004 	add	fp, sp, #4
  11635c:	e24dd008 	sub	sp, sp, #8
  116360:	e50b0008 	str	r0, [fp, #-8]
  116364:	e50b100c 	str	r1, [fp, #-12]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
  116368:	e51b300c 	ldr	r3, [fp, #-12]
  11636c:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  116370:	e2033018 	and	r3, r3, #24
  116374:	e3530000 	cmp	r3, #0
  116378:	0a000006 	beq	116398 <tcpip_input+0x44>
    return tcpip_inpkt(p, inp, ethernet_input);
  11637c:	e3082de8 	movw	r2, #36328	; 0x8de8
  116380:	e3402012 	movt	r2, #18
  116384:	e51b100c 	ldr	r1, [fp, #-12]
  116388:	e51b0008 	ldr	r0, [fp, #-8]
  11638c:	ebffffb6 	bl	11626c <tcpip_inpkt>
  116390:	e1a03000 	mov	r3, r0
  116394:	ea000005 	b	1163b0 <tcpip_input+0x5c>
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
  116398:	e3012618 	movw	r2, #5656	; 0x1618
  11639c:	e3402013 	movt	r2, #19
  1163a0:	e51b100c 	ldr	r1, [fp, #-12]
  1163a4:	e51b0008 	ldr	r0, [fp, #-8]
  1163a8:	ebffffaf 	bl	11626c <tcpip_inpkt>
  1163ac:	e1a03000 	mov	r3, r0
}
  1163b0:	e1a00003 	mov	r0, r3
  1163b4:	e24bd004 	sub	sp, fp, #4
  1163b8:	e8bd8800 	pop	{fp, pc}

001163bc <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
  1163bc:	e92d4800 	push	{fp, lr}
  1163c0:	e28db004 	add	fp, sp, #4
  1163c4:	e24dd018 	sub	sp, sp, #24
  1163c8:	e50b0010 	str	r0, [fp, #-16]
  1163cc:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1163d0:	e1a03002 	mov	r3, r2
  1163d4:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
  1163d8:	e30e0c30 	movw	r0, #60464	; 0xec30
  1163dc:	e3400014 	movt	r0, #20
  1163e0:	ebffd2d6 	bl	10af40 <sys_mbox_valid>
  1163e4:	e1a03000 	mov	r3, r0
  1163e8:	e3530000 	cmp	r3, #0
  1163ec:	1a000006 	bne	11640c <tcpip_callback_with_block+0x50>
  1163f0:	e30701a0 	movw	r0, #29088	; 0x71a0
  1163f4:	e3400014 	movt	r0, #20
  1163f8:	ebffb345 	bl	103114 <rt_kprintf>
  1163fc:	e3a010ee 	mov	r1, #238	; 0xee
  116400:	e3070174 	movw	r0, #29044	; 0x7174
  116404:	e3400014 	movt	r0, #20
  116408:	ebffd315 	bl	10b064 <sys_arch_assert>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
  11640c:	e3a020f0 	mov	r2, #240	; 0xf0
  116410:	e3071174 	movw	r1, #29044	; 0x7174
  116414:	e3401014 	movt	r1, #20
  116418:	e3a00009 	mov	r0, #9
  11641c:	eb000ba8 	bl	1192c4 <memp_malloc_fn>
  116420:	e50b0008 	str	r0, [fp, #-8]
  if (msg == NULL) {
  116424:	e51b3008 	ldr	r3, [fp, #-8]
  116428:	e3530000 	cmp	r3, #0
  11642c:	1a000001 	bne	116438 <tcpip_callback_with_block+0x7c>
    return ERR_MEM;
  116430:	e3e03000 	mvn	r3, #0
  116434:	ea00001d 	b	1164b0 <tcpip_callback_with_block+0xf4>
  }

  msg->type = TCPIP_MSG_CALLBACK;
  116438:	e51b3008 	ldr	r3, [fp, #-8]
  11643c:	e3a02003 	mov	r2, #3
  116440:	e5832000 	str	r2, [r3]
  msg->msg.cb.function = function;
  116444:	e51b3008 	ldr	r3, [fp, #-8]
  116448:	e51b2010 	ldr	r2, [fp, #-16]
  11644c:	e5832004 	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
  116450:	e51b3008 	ldr	r3, [fp, #-8]
  116454:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  116458:	e5832008 	str	r2, [r3, #8]
  if (block) {
  11645c:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  116460:	e3530000 	cmp	r3, #0
  116464:	0a000004 	beq	11647c <tcpip_callback_with_block+0xc0>
    sys_mbox_post(&mbox, msg);
  116468:	e51b1008 	ldr	r1, [fp, #-8]
  11646c:	e30e0c30 	movw	r0, #60464	; 0xec30
  116470:	e3400014 	movt	r0, #20
  116474:	ebffd248 	bl	10ad9c <sys_mbox_post>
  116478:	ea00000b 	b	1164ac <tcpip_callback_with_block+0xf0>
  } else {
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
  11647c:	e51b1008 	ldr	r1, [fp, #-8]
  116480:	e30e0c30 	movw	r0, #60464	; 0xec30
  116484:	e3400014 	movt	r0, #20
  116488:	ebffd24e 	bl	10adc8 <sys_mbox_trypost>
  11648c:	e1a03000 	mov	r3, r0
  116490:	e3530000 	cmp	r3, #0
  116494:	0a000004 	beq	1164ac <tcpip_callback_with_block+0xf0>
      memp_free(MEMP_TCPIP_MSG_API, msg);
  116498:	e51b1008 	ldr	r1, [fp, #-8]
  11649c:	e3a00009 	mov	r0, #9
  1164a0:	eb000bef 	bl	119464 <memp_free>
      return ERR_MEM;
  1164a4:	e3e03000 	mvn	r3, #0
  1164a8:	ea000000 	b	1164b0 <tcpip_callback_with_block+0xf4>
    }
  }
  return ERR_OK;
  1164ac:	e3a03000 	mov	r3, #0
}
  1164b0:	e1a00003 	mov	r0, r3
  1164b4:	e24bd004 	sub	sp, fp, #4
  1164b8:	e8bd8800 	pop	{fp, pc}

001164bc <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t* sem)
{
  1164bc:	e92d4800 	push	{fp, lr}
  1164c0:	e28db004 	add	fp, sp, #4
  1164c4:	e24dd010 	sub	sp, sp, #16
  1164c8:	e50b0008 	str	r0, [fp, #-8]
  1164cc:	e50b100c 	str	r1, [fp, #-12]
  1164d0:	e50b2010 	str	r2, [fp, #-16]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
  1164d4:	e30005e4 	movw	r0, #1508	; 0x5e4
  1164d8:	e3400015 	movt	r0, #21
  1164dc:	ebffd0ff 	bl	10a8e0 <sys_mutex_lock>
  fn(apimsg);
  1164e0:	e51b3008 	ldr	r3, [fp, #-8]
  1164e4:	e51b000c 	ldr	r0, [fp, #-12]
  1164e8:	e12fff33 	blx	r3
  UNLOCK_TCPIP_CORE();
  1164ec:	e30005e4 	movw	r0, #1508	; 0x5e4
  1164f0:	e3400015 	movt	r0, #21
  1164f4:	ebffd105 	bl	10a910 <sys_mutex_unlock>
  return ERR_OK;
  1164f8:	e3a03000 	mov	r3, #0
  sys_mbox_post(&mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
  1164fc:	e1a00003 	mov	r0, r3
  116500:	e24bd004 	sub	sp, fp, #4
  116504:	e8bd8800 	pop	{fp, pc}

00116508 <tcpip_api_call>:
 * @param call Call parameters
 * @return Return value from tcpip_api_call_fn
 */
err_t
tcpip_api_call(tcpip_api_call_fn fn, struct tcpip_api_call_data *call)
{
  116508:	e92d4800 	push	{fp, lr}
  11650c:	e28db004 	add	fp, sp, #4
  116510:	e24dd010 	sub	sp, sp, #16
  116514:	e50b0010 	str	r0, [fp, #-16]
  116518:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
#if LWIP_TCPIP_CORE_LOCKING
  err_t err;
  LOCK_TCPIP_CORE();
  11651c:	e30005e4 	movw	r0, #1508	; 0x5e4
  116520:	e3400015 	movt	r0, #21
  116524:	ebffd0ed 	bl	10a8e0 <sys_mutex_lock>
  err = fn(call);
  116528:	e51b3010 	ldr	r3, [fp, #-16]
  11652c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  116530:	e12fff33 	blx	r3
  116534:	e1a03000 	mov	r3, r0
  116538:	e54b3005 	strb	r3, [fp, #-5]
  UNLOCK_TCPIP_CORE();
  11653c:	e30005e4 	movw	r0, #1508	; 0x5e4
  116540:	e3400015 	movt	r0, #21
  116544:	ebffd0f1 	bl	10a910 <sys_mutex_unlock>
  return err;
  116548:	e15b30d5 	ldrsb	r3, [fp, #-5]
  sys_sem_free(&call->sem);
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  return call->err;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
  11654c:	e1a00003 	mov	r0, r3
  116550:	e24bd004 	sub	sp, fp, #4
  116554:	e8bd8800 	pop	{fp, pc}

00116558 <tcpip_callbackmsg_new>:
 * @param ctx parameter passed to function
 * @return a struct pointer to pass to tcpip_trycallback().
 */
struct tcpip_callback_msg*
tcpip_callbackmsg_new(tcpip_callback_fn function, void *ctx)
{
  116558:	e92d4800 	push	{fp, lr}
  11655c:	e28db004 	add	fp, sp, #4
  116560:	e24dd010 	sub	sp, sp, #16
  116564:	e50b0010 	str	r0, [fp, #-16]
  116568:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct tcpip_msg *msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
  11656c:	e30021a1 	movw	r2, #417	; 0x1a1
  116570:	e3071174 	movw	r1, #29044	; 0x7174
  116574:	e3401014 	movt	r1, #20
  116578:	e3a00009 	mov	r0, #9
  11657c:	eb000b50 	bl	1192c4 <memp_malloc_fn>
  116580:	e50b0008 	str	r0, [fp, #-8]
  if (msg == NULL) {
  116584:	e51b3008 	ldr	r3, [fp, #-8]
  116588:	e3530000 	cmp	r3, #0
  11658c:	1a000001 	bne	116598 <tcpip_callbackmsg_new+0x40>
    return NULL;
  116590:	e3a03000 	mov	r3, #0
  116594:	ea000009 	b	1165c0 <tcpip_callbackmsg_new+0x68>
  }
  msg->type = TCPIP_MSG_CALLBACK_STATIC;
  116598:	e51b3008 	ldr	r3, [fp, #-8]
  11659c:	e3a02004 	mov	r2, #4
  1165a0:	e5832000 	str	r2, [r3]
  msg->msg.cb.function = function;
  1165a4:	e51b3008 	ldr	r3, [fp, #-8]
  1165a8:	e51b2010 	ldr	r2, [fp, #-16]
  1165ac:	e5832004 	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
  1165b0:	e51b3008 	ldr	r3, [fp, #-8]
  1165b4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1165b8:	e5832008 	str	r2, [r3, #8]
  return (struct tcpip_callback_msg*)msg;
  1165bc:	e51b3008 	ldr	r3, [fp, #-8]
}
  1165c0:	e1a00003 	mov	r0, r3
  1165c4:	e24bd004 	sub	sp, fp, #4
  1165c8:	e8bd8800 	pop	{fp, pc}

001165cc <tcpip_callbackmsg_delete>:
 *
 * @param msg the message to free
 */
void
tcpip_callbackmsg_delete(struct tcpip_callback_msg* msg)
{
  1165cc:	e92d4800 	push	{fp, lr}
  1165d0:	e28db004 	add	fp, sp, #4
  1165d4:	e24dd008 	sub	sp, sp, #8
  1165d8:	e50b0008 	str	r0, [fp, #-8]
  memp_free(MEMP_TCPIP_MSG_API, msg);
  1165dc:	e51b1008 	ldr	r1, [fp, #-8]
  1165e0:	e3a00009 	mov	r0, #9
  1165e4:	eb000b9e 	bl	119464 <memp_free>
}
  1165e8:	e320f000 	nop	{0}
  1165ec:	e24bd004 	sub	sp, fp, #4
  1165f0:	e8bd8800 	pop	{fp, pc}

001165f4 <tcpip_trycallback>:
 * @param msg pointer to the message to post
 * @return sys_mbox_trypost() return code
 */
err_t
tcpip_trycallback(struct tcpip_callback_msg* msg)
{
  1165f4:	e92d4800 	push	{fp, lr}
  1165f8:	e28db004 	add	fp, sp, #4
  1165fc:	e24dd008 	sub	sp, sp, #8
  116600:	e50b0008 	str	r0, [fp, #-8]
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
  116604:	e30e0c30 	movw	r0, #60464	; 0xec30
  116608:	e3400014 	movt	r0, #20
  11660c:	ebffd24b 	bl	10af40 <sys_mbox_valid>
  116610:	e1a03000 	mov	r3, r0
  116614:	e3530000 	cmp	r3, #0
  116618:	1a000006 	bne	116638 <tcpip_trycallback+0x44>
  11661c:	e30701a0 	movw	r0, #29088	; 0x71a0
  116620:	e3400014 	movt	r0, #20
  116624:	ebffb2ba 	bl	103114 <rt_kprintf>
  116628:	e3a01d07 	mov	r1, #448	; 0x1c0
  11662c:	e3070174 	movw	r0, #29044	; 0x7174
  116630:	e3400014 	movt	r0, #20
  116634:	ebffd28a 	bl	10b064 <sys_arch_assert>
  return sys_mbox_trypost(&mbox, msg);
  116638:	e51b1008 	ldr	r1, [fp, #-8]
  11663c:	e30e0c30 	movw	r0, #60464	; 0xec30
  116640:	e3400014 	movt	r0, #20
  116644:	ebffd1df 	bl	10adc8 <sys_mbox_trypost>
  116648:	e1a03000 	mov	r3, r0
}
  11664c:	e1a00003 	mov	r0, r3
  116650:	e24bd004 	sub	sp, fp, #4
  116654:	e8bd8800 	pop	{fp, pc}

00116658 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
  116658:	e92d4800 	push	{fp, lr}
  11665c:	e28db004 	add	fp, sp, #4
  116660:	e24dd010 	sub	sp, sp, #16
  116664:	e50b0008 	str	r0, [fp, #-8]
  116668:	e50b100c 	str	r1, [fp, #-12]
  lwip_init();
  11666c:	eb0009b8 	bl	118d54 <lwip_init>

  tcpip_init_done = initfunc;
  116670:	e30e3c28 	movw	r3, #60456	; 0xec28
  116674:	e3403014 	movt	r3, #20
  116678:	e51b2008 	ldr	r2, [fp, #-8]
  11667c:	e5832000 	str	r2, [r3]
  tcpip_init_done_arg = arg;
  116680:	e30e3c2c 	movw	r3, #60460	; 0xec2c
  116684:	e3403014 	movt	r3, #20
  116688:	e51b200c 	ldr	r2, [fp, #-12]
  11668c:	e5832000 	str	r2, [r3]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
  116690:	e3001101 	movw	r1, #257	; 0x101
  116694:	e30e0c30 	movw	r0, #60464	; 0xec30
  116698:	e3400014 	movt	r0, #20
  11669c:	ebffd124 	bl	10ab34 <sys_mbox_new>
  1166a0:	e1a03000 	mov	r3, r0
  1166a4:	e3530000 	cmp	r3, #0
  1166a8:	0a000006 	beq	1166c8 <tcpip_init+0x70>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
  1166ac:	e30701b0 	movw	r0, #29104	; 0x71b0
  1166b0:	e3400014 	movt	r0, #20
  1166b4:	ebffb296 	bl	103114 <rt_kprintf>
  1166b8:	e30011d5 	movw	r1, #469	; 0x1d5
  1166bc:	e3070174 	movw	r0, #29044	; 0x7174
  1166c0:	e3400014 	movt	r0, #20
  1166c4:	ebffd266 	bl	10b064 <sys_arch_assert>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
  1166c8:	e30005e4 	movw	r0, #1508	; 0x5e4
  1166cc:	e3400015 	movt	r0, #21
  1166d0:	ebffd05a 	bl	10a840 <sys_mutex_new>
  1166d4:	e1a03000 	mov	r3, r0
  1166d8:	e3530000 	cmp	r3, #0
  1166dc:	0a000006 	beq	1166fc <tcpip_init+0xa4>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
  1166e0:	e30701d4 	movw	r0, #29140	; 0x71d4
  1166e4:	e3400014 	movt	r0, #20
  1166e8:	ebffb289 	bl	103114 <rt_kprintf>
  1166ec:	e30011d9 	movw	r1, #473	; 0x1d9
  1166f0:	e3070174 	movw	r0, #29044	; 0x7174
  1166f4:	e3400014 	movt	r0, #20
  1166f8:	ebffd259 	bl	10b064 <sys_arch_assert>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
  1166fc:	e3a03019 	mov	r3, #25
  116700:	e58d3000 	str	r3, [sp]
  116704:	e3a03a02 	mov	r3, #8192	; 0x2000
  116708:	e3a02000 	mov	r2, #0
  11670c:	e3061104 	movw	r1, #24836	; 0x6104
  116710:	e3401011 	movt	r1, #17
  116714:	e30701f8 	movw	r0, #29176	; 0x71f8
  116718:	e3400014 	movt	r0, #20
  11671c:	ebffd21c 	bl	10af94 <sys_thread_new>
}
  116720:	e320f000 	nop	{0}
  116724:	e24bd004 	sub	sp, fp, #4
  116728:	e8bd8800 	pop	{fp, pc}

0011672c <pbuf_free_int>:
 *
 * @param p The pbuf (chain) to be dereferenced.
 */
static void
pbuf_free_int(void *p)
{
  11672c:	e92d4800 	push	{fp, lr}
  116730:	e28db004 	add	fp, sp, #4
  116734:	e24dd010 	sub	sp, sp, #16
  116738:	e50b0010 	str	r0, [fp, #-16]
  struct pbuf *q = (struct pbuf *)p;
  11673c:	e51b3010 	ldr	r3, [fp, #-16]
  116740:	e50b3008 	str	r3, [fp, #-8]
  pbuf_free(q);
  116744:	e51b0008 	ldr	r0, [fp, #-8]
  116748:	eb001253 	bl	11b09c <pbuf_free>
}
  11674c:	e320f000 	nop	{0}
  116750:	e24bd004 	sub	sp, fp, #4
  116754:	e8bd8800 	pop	{fp, pc}

00116758 <pbuf_free_callback>:
 * @param p The pbuf (chain) to be dereferenced.
 * @return ERR_OK if callback could be enqueued, an err_t if not
 */
err_t
pbuf_free_callback(struct pbuf *p)
{
  116758:	e92d4800 	push	{fp, lr}
  11675c:	e28db004 	add	fp, sp, #4
  116760:	e24dd008 	sub	sp, sp, #8
  116764:	e50b0008 	str	r0, [fp, #-8]
  return tcpip_callback_with_block(pbuf_free_int, p, 0);
  116768:	e3a02000 	mov	r2, #0
  11676c:	e51b1008 	ldr	r1, [fp, #-8]
  116770:	e306072c 	movw	r0, #26412	; 0x672c
  116774:	e3400011 	movt	r0, #17
  116778:	ebffff0f 	bl	1163bc <tcpip_callback_with_block>
  11677c:	e1a03000 	mov	r3, r0
}
  116780:	e1a00003 	mov	r0, r3
  116784:	e24bd004 	sub	sp, fp, #4
  116788:	e8bd8800 	pop	{fp, pc}

0011678c <mem_free_callback>:
 * @param m the heap memory to free
 * @return ERR_OK if callback could be enqueued, an err_t if not
 */
err_t
mem_free_callback(void *m)
{
  11678c:	e92d4800 	push	{fp, lr}
  116790:	e28db004 	add	fp, sp, #4
  116794:	e24dd008 	sub	sp, sp, #8
  116798:	e50b0008 	str	r0, [fp, #-8]
  return tcpip_callback_with_block(mem_free, m, 0);
  11679c:	e3a02000 	mov	r2, #0
  1167a0:	e51b1008 	ldr	r1, [fp, #-8]
  1167a4:	e30b0198 	movw	r0, #45464	; 0xb198
  1167a8:	e3400010 	movt	r0, #16
  1167ac:	ebffff02 	bl	1163bc <tcpip_callback_with_block>
  1167b0:	e1a03000 	mov	r3, r0
}
  1167b4:	e1a00003 	mov	r0, r3
  1167b8:	e24bd004 	sub	sp, fp, #4
  1167bc:	e8bd8800 	pop	{fp, pc}

001167c0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  1167c0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1167c4:	e28db000 	add	fp, sp, #0
  1167c8:	e24dd00c 	sub	sp, sp, #12
  1167cc:	e1a03000 	mov	r3, r0
  1167d0:	e14b30b6 	strh	r3, [fp, #-6]
  return (u16_t)PP_HTONS(n);
  1167d4:	e15b30b6 	ldrh	r3, [fp, #-6]
  1167d8:	e6bf3fb3 	rev16	r3, r3
  1167dc:	e6ff3073 	uxth	r3, r3
}
  1167e0:	e1a00003 	mov	r0, r3
  1167e4:	e28bd000 	add	sp, fp, #0
  1167e8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1167ec:	e12fff1e 	bx	lr

001167f0 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
  1167f0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1167f4:	e28db000 	add	fp, sp, #0
  1167f8:	e24dd00c 	sub	sp, sp, #12
  1167fc:	e50b0008 	str	r0, [fp, #-8]
  return (u32_t)PP_HTONL(n);
  116800:	e51b3008 	ldr	r3, [fp, #-8]
  116804:	e1a02c03 	lsl	r2, r3, #24
  116808:	e51b3008 	ldr	r3, [fp, #-8]
  11680c:	e1a03403 	lsl	r3, r3, #8
  116810:	e20338ff 	and	r3, r3, #16711680	; 0xff0000
  116814:	e1822003 	orr	r2, r2, r3
  116818:	e51b3008 	ldr	r3, [fp, #-8]
  11681c:	e1a03423 	lsr	r3, r3, #8
  116820:	e2033cff 	and	r3, r3, #65280	; 0xff00
  116824:	e1822003 	orr	r2, r2, r3
  116828:	e51b3008 	ldr	r3, [fp, #-8]
  11682c:	e1a03c23 	lsr	r3, r3, #24
  116830:	e1823003 	orr	r3, r2, r3
}
  116834:	e1a00003 	mov	r0, r3
  116838:	e28bd000 	add	sp, fp, #0
  11683c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  116840:	e12fff1e 	bx	lr

00116844 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char*
lwip_strnstr(const char* buffer, const char* token, size_t n)
{
  116844:	e92d4800 	push	{fp, lr}
  116848:	e28db004 	add	fp, sp, #4
  11684c:	e24dd018 	sub	sp, sp, #24
  116850:	e50b0010 	str	r0, [fp, #-16]
  116854:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  116858:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  const char* p;
  size_t tokenlen = strlen(token);
  11685c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  116860:	eb00ab8e 	bl	1416a0 <strlen>
  116864:	e50b000c 	str	r0, [fp, #-12]
  if (tokenlen == 0) {
  116868:	e51b300c 	ldr	r3, [fp, #-12]
  11686c:	e3530000 	cmp	r3, #0
  116870:	1a000001 	bne	11687c <lwip_strnstr+0x38>
    return LWIP_CONST_CAST(char *, buffer);
  116874:	e51b3010 	ldr	r3, [fp, #-16]
  116878:	ea000021 	b	116904 <lwip_strnstr+0xc0>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
  11687c:	e51b3010 	ldr	r3, [fp, #-16]
  116880:	e50b3008 	str	r3, [fp, #-8]
  116884:	ea000011 	b	1168d0 <lwip_strnstr+0x8c>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
  116888:	e51b3008 	ldr	r3, [fp, #-8]
  11688c:	e5d32000 	ldrb	r2, [r3]
  116890:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116894:	e5d33000 	ldrb	r3, [r3]
  116898:	e1520003 	cmp	r2, r3
  11689c:	1a000008 	bne	1168c4 <lwip_strnstr+0x80>
  1168a0:	e51b200c 	ldr	r2, [fp, #-12]
  1168a4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1168a8:	e51b0008 	ldr	r0, [fp, #-8]
  1168ac:	eb00aba7 	bl	141750 <strncmp>
  1168b0:	e1a03000 	mov	r3, r0
  1168b4:	e3530000 	cmp	r3, #0
  1168b8:	1a000001 	bne	1168c4 <lwip_strnstr+0x80>
      return LWIP_CONST_CAST(char *, p);
  1168bc:	e51b3008 	ldr	r3, [fp, #-8]
  1168c0:	ea00000f 	b	116904 <lwip_strnstr+0xc0>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
  1168c4:	e51b3008 	ldr	r3, [fp, #-8]
  1168c8:	e2833001 	add	r3, r3, #1
  1168cc:	e50b3008 	str	r3, [fp, #-8]
  1168d0:	e51b3008 	ldr	r3, [fp, #-8]
  1168d4:	e5d33000 	ldrb	r3, [r3]
  1168d8:	e3530000 	cmp	r3, #0
  1168dc:	0a000007 	beq	116900 <lwip_strnstr+0xbc>
  1168e0:	e51b2008 	ldr	r2, [fp, #-8]
  1168e4:	e51b300c 	ldr	r3, [fp, #-12]
  1168e8:	e0822003 	add	r2, r2, r3
  1168ec:	e51b1010 	ldr	r1, [fp, #-16]
  1168f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1168f4:	e0813003 	add	r3, r1, r3
  1168f8:	e1520003 	cmp	r2, r3
  1168fc:	9affffe1 	bls	116888 <lwip_strnstr+0x44>
    }
  }
  return NULL;
  116900:	e3a03000 	mov	r3, #0
}
  116904:	e1a00003 	mov	r0, r3
  116908:	e24bd004 	sub	sp, fp, #4
  11690c:	e8bd8800 	pop	{fp, pc}

00116910 <lwip_stricmp>:
 * lwIP default implementation for stricmp() non-standard function.
 * This can be \#defined to stricmp() depending on your platform port.
 */
int
lwip_stricmp(const char* str1, const char* str2)
{
  116910:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  116914:	e28db000 	add	fp, sp, #0
  116918:	e24dd014 	sub	sp, sp, #20
  11691c:	e50b0010 	str	r0, [fp, #-16]
  116920:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  char c1, c2;

  do {
    c1 = *str1++;
  116924:	e51b3010 	ldr	r3, [fp, #-16]
  116928:	e2832001 	add	r2, r3, #1
  11692c:	e50b2010 	str	r2, [fp, #-16]
  116930:	e5d33000 	ldrb	r3, [r3]
  116934:	e54b3005 	strb	r3, [fp, #-5]
    c2 = *str2++;
  116938:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11693c:	e2832001 	add	r2, r3, #1
  116940:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
  116944:	e5d33000 	ldrb	r3, [r3]
  116948:	e54b3006 	strb	r3, [fp, #-6]
    if (c1 != c2) {
  11694c:	e55b2005 	ldrb	r2, [fp, #-5]
  116950:	e55b3006 	ldrb	r3, [fp, #-6]
  116954:	e1520003 	cmp	r2, r3
  116958:	0a000014 	beq	1169b0 <lwip_stricmp+0xa0>
      char c1_upc = c1 | 0x20;
  11695c:	e55b3005 	ldrb	r3, [fp, #-5]
  116960:	e3833020 	orr	r3, r3, #32
  116964:	e54b3007 	strb	r3, [fp, #-7]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
  116968:	e55b3007 	ldrb	r3, [fp, #-7]
  11696c:	e3530060 	cmp	r3, #96	; 0x60
  116970:	9a00000b 	bls	1169a4 <lwip_stricmp+0x94>
  116974:	e55b3007 	ldrb	r3, [fp, #-7]
  116978:	e353007a 	cmp	r3, #122	; 0x7a
  11697c:	8a000008 	bhi	1169a4 <lwip_stricmp+0x94>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
  116980:	e55b3006 	ldrb	r3, [fp, #-6]
  116984:	e3833020 	orr	r3, r3, #32
  116988:	e54b3008 	strb	r3, [fp, #-8]
        if (c1_upc != c2_upc) {
  11698c:	e55b2007 	ldrb	r2, [fp, #-7]
  116990:	e55b3008 	ldrb	r3, [fp, #-8]
  116994:	e1520003 	cmp	r2, r3
  116998:	0a000003 	beq	1169ac <lwip_stricmp+0x9c>
          /* still not equal */
          /* don't care for < or > */
          return 1;
  11699c:	e3a03001 	mov	r3, #1
  1169a0:	ea000006 	b	1169c0 <lwip_stricmp+0xb0>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
  1169a4:	e3a03001 	mov	r3, #1
  1169a8:	ea000004 	b	1169c0 <lwip_stricmp+0xb0>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
  1169ac:	e320f000 	nop	{0}
      }
    }
  } while (c1 != 0);
  1169b0:	e55b3005 	ldrb	r3, [fp, #-5]
  1169b4:	e3530000 	cmp	r3, #0
  1169b8:	1affffd9 	bne	116924 <lwip_stricmp+0x14>
  return 0;
  1169bc:	e3a03000 	mov	r3, #0
}
  1169c0:	e1a00003 	mov	r0, r3
  1169c4:	e28bd000 	add	sp, fp, #0
  1169c8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1169cc:	e12fff1e 	bx	lr

001169d0 <lwip_strnicmp>:
 * lwIP default implementation for strnicmp() non-standard function.
 * This can be \#defined to strnicmp() depending on your platform port.
 */
int
lwip_strnicmp(const char* str1, const char* str2, size_t len)
{
  1169d0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1169d4:	e28db000 	add	fp, sp, #0
  1169d8:	e24dd01c 	sub	sp, sp, #28
  1169dc:	e50b0010 	str	r0, [fp, #-16]
  1169e0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1169e4:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  char c1, c2;

  do {
    c1 = *str1++;
  1169e8:	e51b3010 	ldr	r3, [fp, #-16]
  1169ec:	e2832001 	add	r2, r3, #1
  1169f0:	e50b2010 	str	r2, [fp, #-16]
  1169f4:	e5d33000 	ldrb	r3, [r3]
  1169f8:	e54b3005 	strb	r3, [fp, #-5]
    c2 = *str2++;
  1169fc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116a00:	e2832001 	add	r2, r3, #1
  116a04:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
  116a08:	e5d33000 	ldrb	r3, [r3]
  116a0c:	e54b3006 	strb	r3, [fp, #-6]
    if (c1 != c2) {
  116a10:	e55b2005 	ldrb	r2, [fp, #-5]
  116a14:	e55b3006 	ldrb	r3, [fp, #-6]
  116a18:	e1520003 	cmp	r2, r3
  116a1c:	0a000014 	beq	116a74 <lwip_strnicmp+0xa4>
      char c1_upc = c1 | 0x20;
  116a20:	e55b3005 	ldrb	r3, [fp, #-5]
  116a24:	e3833020 	orr	r3, r3, #32
  116a28:	e54b3007 	strb	r3, [fp, #-7]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
  116a2c:	e55b3007 	ldrb	r3, [fp, #-7]
  116a30:	e3530060 	cmp	r3, #96	; 0x60
  116a34:	9a00000b 	bls	116a68 <lwip_strnicmp+0x98>
  116a38:	e55b3007 	ldrb	r3, [fp, #-7]
  116a3c:	e353007a 	cmp	r3, #122	; 0x7a
  116a40:	8a000008 	bhi	116a68 <lwip_strnicmp+0x98>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
  116a44:	e55b3006 	ldrb	r3, [fp, #-6]
  116a48:	e3833020 	orr	r3, r3, #32
  116a4c:	e54b3008 	strb	r3, [fp, #-8]
        if (c1_upc != c2_upc) {
  116a50:	e55b2007 	ldrb	r2, [fp, #-7]
  116a54:	e55b3008 	ldrb	r3, [fp, #-8]
  116a58:	e1520003 	cmp	r2, r3
  116a5c:	0a000003 	beq	116a70 <lwip_strnicmp+0xa0>
          /* still not equal */
          /* don't care for < or > */
          return 1;
  116a60:	e3a03001 	mov	r3, #1
  116a64:	ea00000b 	b	116a98 <lwip_strnicmp+0xc8>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
  116a68:	e3a03001 	mov	r3, #1
  116a6c:	ea000009 	b	116a98 <lwip_strnicmp+0xc8>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
  116a70:	e320f000 	nop	{0}
      }
    }
  } while (len-- && c1 != 0);
  116a74:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  116a78:	e2432001 	sub	r2, r3, #1
  116a7c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  116a80:	e3530000 	cmp	r3, #0
  116a84:	0a000002 	beq	116a94 <lwip_strnicmp+0xc4>
  116a88:	e55b3005 	ldrb	r3, [fp, #-5]
  116a8c:	e3530000 	cmp	r3, #0
  116a90:	1affffd4 	bne	1169e8 <lwip_strnicmp+0x18>
  return 0;
  116a94:	e3a03000 	mov	r3, #0
}
  116a98:	e1a00003 	mov	r0, r3
  116a9c:	e28bd000 	add	sp, fp, #0
  116aa0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  116aa4:	e12fff1e 	bx	lr

00116aa8 <lwip_itoa>:
 * lwIP default implementation for itoa() non-standard function.
 * This can be \#defined to itoa() or snprintf(result, bufsize, "%d", number) depending on your platform port.
 */
void
lwip_itoa(char* result, size_t bufsize, int number)
{
  116aa8:	e92d4800 	push	{fp, lr}
  116aac:	e28db004 	add	fp, sp, #4
  116ab0:	e24dd028 	sub	sp, sp, #40	; 0x28
  116ab4:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  116ab8:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  116abc:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  const int base = 10;
  116ac0:	e3a0300a 	mov	r3, #10
  116ac4:	e50b3010 	str	r3, [fp, #-16]
  char* ptr = result, *ptr1 = result, tmp_char;
  116ac8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  116acc:	e50b3008 	str	r3, [fp, #-8]
  116ad0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  116ad4:	e50b300c 	str	r3, [fp, #-12]
  int tmp_value;
  LWIP_UNUSED_ARG(bufsize);

  do {
    tmp_value = number;
  116ad8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  116adc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    number /= base;
  116ae0:	e51b1010 	ldr	r1, [fp, #-16]
  116ae4:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  116ae8:	eb00885e 	bl	138c68 <__divsi3>
  116aec:	e1a03000 	mov	r3, r0
  116af0:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
    *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz"[35 + (tmp_value - number * base)];
  116af4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  116af8:	e51b2010 	ldr	r2, [fp, #-16]
  116afc:	e0030392 	mul	r3, r2, r3
  116b00:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  116b04:	e0423003 	sub	r3, r2, r3
  116b08:	e2831023 	add	r1, r3, #35	; 0x23
  116b0c:	e51b2008 	ldr	r2, [fp, #-8]
  116b10:	e2823001 	add	r3, r2, #1
  116b14:	e50b3008 	str	r3, [fp, #-8]
  116b18:	e3073200 	movw	r3, #29184	; 0x7200
  116b1c:	e3403014 	movt	r3, #20
  116b20:	e7d33001 	ldrb	r3, [r3, r1]
  116b24:	e5c23000 	strb	r3, [r2]
  } while(number);
  116b28:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  116b2c:	e3530000 	cmp	r3, #0
  116b30:	1affffe8 	bne	116ad8 <lwip_itoa+0x30>

   /* Apply negative sign */
  if (tmp_value < 0) {
  116b34:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116b38:	e3530000 	cmp	r3, #0
  116b3c:	aa000004 	bge	116b54 <lwip_itoa+0xac>
     *ptr++ = '-';
  116b40:	e51b3008 	ldr	r3, [fp, #-8]
  116b44:	e2832001 	add	r2, r3, #1
  116b48:	e50b2008 	str	r2, [fp, #-8]
  116b4c:	e3a0202d 	mov	r2, #45	; 0x2d
  116b50:	e5c32000 	strb	r2, [r3]
  }
  *ptr-- = '\0';
  116b54:	e51b3008 	ldr	r3, [fp, #-8]
  116b58:	e2432001 	sub	r2, r3, #1
  116b5c:	e50b2008 	str	r2, [fp, #-8]
  116b60:	e3a02000 	mov	r2, #0
  116b64:	e5c32000 	strb	r2, [r3]
  while(ptr1 < ptr) {
  116b68:	ea00000d 	b	116ba4 <lwip_itoa+0xfc>
    tmp_char = *ptr;
  116b6c:	e51b3008 	ldr	r3, [fp, #-8]
  116b70:	e5d33000 	ldrb	r3, [r3]
  116b74:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
    *ptr--= *ptr1;
  116b78:	e51b3008 	ldr	r3, [fp, #-8]
  116b7c:	e2432001 	sub	r2, r3, #1
  116b80:	e50b2008 	str	r2, [fp, #-8]
  116b84:	e51b200c 	ldr	r2, [fp, #-12]
  116b88:	e5d22000 	ldrb	r2, [r2]
  116b8c:	e5c32000 	strb	r2, [r3]
    *ptr1++ = tmp_char;
  116b90:	e51b300c 	ldr	r3, [fp, #-12]
  116b94:	e2832001 	add	r2, r3, #1
  116b98:	e50b200c 	str	r2, [fp, #-12]
  116b9c:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
  116ba0:	e5c32000 	strb	r2, [r3]
  while(ptr1 < ptr) {
  116ba4:	e51b200c 	ldr	r2, [fp, #-12]
  116ba8:	e51b3008 	ldr	r3, [fp, #-8]
  116bac:	e1520003 	cmp	r2, r3
  116bb0:	3affffed 	bcc	116b6c <lwip_itoa+0xc4>
  }
}
  116bb4:	e320f000 	nop	{0}
  116bb8:	e24bd004 	sub	sp, fp, #4
  116bbc:	e8bd8800 	pop	{fp, pc}

00116bc0 <dns_init>:
 * Initialize the resolver: set up the UDP pcb and configure the default server
 * (if DNS_SERVER_ADDRESS is set).
 */
void
dns_init(void)
{
  116bc0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  116bc4:	e28db000 	add	fp, sp, #0
#endif

#if DNS_LOCAL_HOSTLIST
  dns_init_local();
#endif
}
  116bc8:	e320f000 	nop	{0}
  116bcc:	e28bd000 	add	sp, fp, #0
  116bd0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  116bd4:	e12fff1e 	bx	lr

00116bd8 <dns_setserver>:
 * @param numdns the index of the DNS server to set must be < DNS_MAX_SERVERS
 * @param dnsserver IP address of the DNS server to set
 */
void
dns_setserver(u8_t numdns, const ip_addr_t *dnsserver)
{
  116bd8:	e92d4800 	push	{fp, lr}
  116bdc:	e28db004 	add	fp, sp, #4
  116be0:	e24dd008 	sub	sp, sp, #8
  116be4:	e1a03000 	mov	r3, r0
  116be8:	e50b100c 	str	r1, [fp, #-12]
  116bec:	e54b3005 	strb	r3, [fp, #-5]
  if (numdns < DNS_MAX_SERVERS) {
  116bf0:	e55b3005 	ldrb	r3, [fp, #-5]
  116bf4:	e3530001 	cmp	r3, #1
  116bf8:	8a00001f 	bhi	116c7c <dns_setserver+0xa4>
    if (dnsserver != NULL) {
  116bfc:	e51b300c 	ldr	r3, [fp, #-12]
  116c00:	e3530000 	cmp	r3, #0
  116c04:	0a000015 	beq	116c60 <dns_setserver+0x88>
      dns_servers[numdns] = (*dnsserver);
  116c08:	e55b2005 	ldrb	r2, [fp, #-5]
  116c0c:	e30f30b8 	movw	r3, #61624	; 0xf0b8
  116c10:	e3403014 	movt	r3, #20
  116c14:	e51b100c 	ldr	r1, [fp, #-12]
  116c18:	e5911000 	ldr	r1, [r1]
  116c1c:	e7831102 	str	r1, [r3, r2, lsl #2]
      extern struct netif *netif_default;
      extern struct netdev *netdev_get_by_name(const char *name);
      extern void netdev_low_level_set_dns_server(struct netdev *netdev, uint8_t dns_num, const ip_addr_t *dns_server);

      /* set network interface device DNS server address */
      if (netif_default) {
  116c20:	e3063838 	movw	r3, #26680	; 0x6838
  116c24:	e3403057 	movt	r3, #87	; 0x57
  116c28:	e5933000 	ldr	r3, [r3]
  116c2c:	e3530000 	cmp	r3, #0
  116c30:	0a000011 	beq	116c7c <dns_setserver+0xa4>
        netdev_low_level_set_dns_server(netdev_get_by_name(netif_default->name), numdns, dnsserver);
  116c34:	e3063838 	movw	r3, #26680	; 0x6838
  116c38:	e3403057 	movt	r3, #87	; 0x57
  116c3c:	e5933000 	ldr	r3, [r3]
  116c40:	e2833042 	add	r3, r3, #66	; 0x42
  116c44:	e1a00003 	mov	r0, r3
  116c48:	ebffba29 	bl	1054f4 <netdev_get_by_name>
  116c4c:	e55b3005 	ldrb	r3, [fp, #-5]
  116c50:	e51b200c 	ldr	r2, [fp, #-12]
  116c54:	e1a01003 	mov	r1, r3
  116c58:	ebffbdb3 	bl	10632c <netdev_low_level_set_dns_server>
#endif /* RT_USING_NETDEV */
    } else {
      dns_servers[numdns] = *IP_ADDR_ANY;
    }
  }
}
  116c5c:	ea000006 	b	116c7c <dns_setserver+0xa4>
      dns_servers[numdns] = *IP_ADDR_ANY;
  116c60:	e55b1005 	ldrb	r1, [fp, #-5]
  116c64:	e30f30b8 	movw	r3, #61624	; 0xf0b8
  116c68:	e3403014 	movt	r3, #20
  116c6c:	e3092adc 	movw	r2, #39644	; 0x9adc
  116c70:	e3402014 	movt	r2, #20
  116c74:	e5922000 	ldr	r2, [r2]
  116c78:	e7832101 	str	r2, [r3, r1, lsl #2]
}
  116c7c:	e320f000 	nop	{0}
  116c80:	e24bd004 	sub	sp, fp, #4
  116c84:	e8bd8800 	pop	{fp, pc}

00116c88 <dns_getserver>:
 * @return IP address of the indexed DNS server or "ip_addr_any" if the DNS
 *         server has not been configured.
 */
const ip_addr_t*
dns_getserver(u8_t numdns)
{
  116c88:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  116c8c:	e28db000 	add	fp, sp, #0
  116c90:	e24dd00c 	sub	sp, sp, #12
  116c94:	e1a03000 	mov	r3, r0
  116c98:	e54b3005 	strb	r3, [fp, #-5]
  if (numdns < DNS_MAX_SERVERS) {
  116c9c:	e55b3005 	ldrb	r3, [fp, #-5]
  116ca0:	e3530001 	cmp	r3, #1
  116ca4:	8a000005 	bhi	116cc0 <dns_getserver+0x38>
    return &dns_servers[numdns];
  116ca8:	e55b3005 	ldrb	r3, [fp, #-5]
  116cac:	e1a02103 	lsl	r2, r3, #2
  116cb0:	e30f30b8 	movw	r3, #61624	; 0xf0b8
  116cb4:	e3403014 	movt	r3, #20
  116cb8:	e0823003 	add	r3, r2, r3
  116cbc:	ea000001 	b	116cc8 <dns_getserver+0x40>
  } else {
    return IP_ADDR_ANY;
  116cc0:	e3093adc 	movw	r3, #39644	; 0x9adc
  116cc4:	e3403014 	movt	r3, #20
  }
}
  116cc8:	e1a00003 	mov	r0, r3
  116ccc:	e28bd000 	add	sp, fp, #0
  116cd0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  116cd4:	e12fff1e 	bx	lr

00116cd8 <dns_tmr>:
 * The DNS resolver client timer - handle retries and timeouts and should
 * be called every DNS_TMR_INTERVAL milliseconds (every second by default).
 */
void
dns_tmr(void)
{
  116cd8:	e92d4800 	push	{fp, lr}
  116cdc:	e28db004 	add	fp, sp, #4
  LWIP_DEBUGF(DNS_DEBUG, ("dns_tmr: dns_check_entries\n"));
  dns_check_entries();
  116ce0:	eb000360 	bl	117a68 <dns_check_entries>
}
  116ce4:	e320f000 	nop	{0}
  116ce8:	e8bd8800 	pop	{fp, pc}

00116cec <dns_lookup>:
 *         was not found in the cached dns_table.
 * @return ERR_OK if found, ERR_ARG if not found
 */
static err_t
dns_lookup(const char *name, ip_addr_t *addr LWIP_DNS_ADDRTYPE_ARG(u8_t dns_addrtype))
{
  116cec:	e92d4800 	push	{fp, lr}
  116cf0:	e28db004 	add	fp, sp, #4
  116cf4:	e24dd010 	sub	sp, sp, #16
  116cf8:	e50b0010 	str	r0, [fp, #-16]
  116cfc:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    return ERR_OK;
  }
#endif /* DNS_LOOKUP_LOCAL_EXTERN */

  /* Walk through name list, return entry if found. If not, return NULL. */
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
  116d00:	e3a03000 	mov	r3, #0
  116d04:	e54b3005 	strb	r3, [fp, #-5]
  116d08:	ea000029 	b	116db4 <dns_lookup+0xc8>
    if ((dns_table[i].state == DNS_STATE_DONE) &&
  116d0c:	e55b2005 	ldrb	r2, [fp, #-5]
  116d10:	e30e3c48 	movw	r3, #60488	; 0xec48
  116d14:	e3403014 	movt	r3, #20
  116d18:	e3a01e11 	mov	r1, #272	; 0x110
  116d1c:	e0020291 	mul	r2, r1, r2
  116d20:	e0833002 	add	r3, r3, r2
  116d24:	e283300a 	add	r3, r3, #10
  116d28:	e5d33000 	ldrb	r3, [r3]
  116d2c:	e3530003 	cmp	r3, #3
  116d30:	1a00001c 	bne	116da8 <dns_lookup+0xbc>
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0) &&
  116d34:	e55b3005 	ldrb	r3, [fp, #-5]
  116d38:	e3a02e11 	mov	r2, #272	; 0x110
  116d3c:	e0030392 	mul	r3, r2, r3
  116d40:	e2832010 	add	r2, r3, #16
  116d44:	e30e3c48 	movw	r3, #60488	; 0xec48
  116d48:	e3403014 	movt	r3, #20
  116d4c:	e0823003 	add	r3, r2, r3
  116d50:	e3a02c01 	mov	r2, #256	; 0x100
  116d54:	e1a01003 	mov	r1, r3
  116d58:	e51b0010 	ldr	r0, [fp, #-16]
  116d5c:	ebffff1b 	bl	1169d0 <lwip_strnicmp>
  116d60:	e1a03000 	mov	r3, r0
    if ((dns_table[i].state == DNS_STATE_DONE) &&
  116d64:	e3530000 	cmp	r3, #0
  116d68:	1a00000e 	bne	116da8 <dns_lookup+0xbc>
        LWIP_DNS_ADDRTYPE_MATCH_IP(dns_addrtype, dns_table[i].ipaddr)) {
      LWIP_DEBUGF(DNS_DEBUG, ("dns_lookup: \"%s\": found = ", name));
      ip_addr_debug_print(DNS_DEBUG, &(dns_table[i].ipaddr));
      LWIP_DEBUGF(DNS_DEBUG, ("\n"));
      if (addr) {
  116d6c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116d70:	e3530000 	cmp	r3, #0
  116d74:	0a000009 	beq	116da0 <dns_lookup+0xb4>
        ip_addr_copy(*addr, dns_table[i].ipaddr);
  116d78:	e55b2005 	ldrb	r2, [fp, #-5]
  116d7c:	e30e3c48 	movw	r3, #60488	; 0xec48
  116d80:	e3403014 	movt	r3, #20
  116d84:	e3a01e11 	mov	r1, #272	; 0x110
  116d88:	e0020291 	mul	r2, r1, r2
  116d8c:	e0833002 	add	r3, r3, r2
  116d90:	e2833004 	add	r3, r3, #4
  116d94:	e5932000 	ldr	r2, [r3]
  116d98:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  116d9c:	e5832000 	str	r2, [r3]
      }
      return ERR_OK;
  116da0:	e3a03000 	mov	r3, #0
  116da4:	ea000006 	b	116dc4 <dns_lookup+0xd8>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
  116da8:	e55b3005 	ldrb	r3, [fp, #-5]
  116dac:	e2833001 	add	r3, r3, #1
  116db0:	e54b3005 	strb	r3, [fp, #-5]
  116db4:	e55b3005 	ldrb	r3, [fp, #-5]
  116db8:	e3530003 	cmp	r3, #3
  116dbc:	9affffd2 	bls	116d0c <dns_lookup+0x20>
    }
  }

  return ERR_ARG;
  116dc0:	e3e0300f 	mvn	r3, #15
}
  116dc4:	e1a00003 	mov	r0, r3
  116dc8:	e24bd004 	sub	sp, fp, #4
  116dcc:	e8bd8800 	pop	{fp, pc}

00116dd0 <dns_compare_name>:
 * @param start_offset offset into p where the name starts
 * @return 0xFFFF: names differ, other: names equal -> offset behind name
 */
static u16_t
dns_compare_name(const char *query, struct pbuf* p, u16_t start_offset)
{
  116dd0:	e92d4800 	push	{fp, lr}
  116dd4:	e28db004 	add	fp, sp, #4
  116dd8:	e24dd020 	sub	sp, sp, #32
  116ddc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  116de0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  116de4:	e1a03002 	mov	r3, r2
  116de8:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
  int n;
  u16_t response_offset = start_offset;
  116dec:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  116df0:	e14b30ba 	strh	r3, [fp, #-10]

  do {
    n = pbuf_try_get_at(p, response_offset++);
  116df4:	e15b30ba 	ldrh	r3, [fp, #-10]
  116df8:	e2832001 	add	r2, r3, #1
  116dfc:	e14b20ba 	strh	r2, [fp, #-10]
  116e00:	e1a01003 	mov	r1, r3
  116e04:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  116e08:	eb001460 	bl	11bf90 <pbuf_try_get_at>
  116e0c:	e50b0008 	str	r0, [fp, #-8]
    if (n < 0) {
  116e10:	e51b3008 	ldr	r3, [fp, #-8]
  116e14:	e3530000 	cmp	r3, #0
  116e18:	aa000001 	bge	116e24 <dns_compare_name+0x54>
      return 0xFFFF;
  116e1c:	e30f3fff 	movw	r3, #65535	; 0xffff
  116e20:	ea000036 	b	116f00 <dns_compare_name+0x130>
    }
    /** @see RFC 1035 - 4.1.4. Message compression */
    if ((n & 0xc0) == 0xc0) {
  116e24:	e51b3008 	ldr	r3, [fp, #-8]
  116e28:	e20330c0 	and	r3, r3, #192	; 0xc0
  116e2c:	e35300c0 	cmp	r3, #192	; 0xc0
  116e30:	1a00001c 	bne	116ea8 <dns_compare_name+0xd8>
      /* Compressed name: cannot be equal since we don't send them */
      return 0xFFFF;
  116e34:	e30f3fff 	movw	r3, #65535	; 0xffff
  116e38:	ea000030 	b	116f00 <dns_compare_name+0x130>
    } else {
      /* Not compressed name */
      while (n > 0) {
        int c = pbuf_try_get_at(p, response_offset);
  116e3c:	e15b30ba 	ldrh	r3, [fp, #-10]
  116e40:	e1a01003 	mov	r1, r3
  116e44:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  116e48:	eb001450 	bl	11bf90 <pbuf_try_get_at>
  116e4c:	e50b0010 	str	r0, [fp, #-16]
        if (c < 0) {
  116e50:	e51b3010 	ldr	r3, [fp, #-16]
  116e54:	e3530000 	cmp	r3, #0
  116e58:	aa000001 	bge	116e64 <dns_compare_name+0x94>
          return 0xFFFF;
  116e5c:	e30f3fff 	movw	r3, #65535	; 0xffff
  116e60:	ea000026 	b	116f00 <dns_compare_name+0x130>
        }
        if ((*query) != (u8_t)c) {
  116e64:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  116e68:	e5d32000 	ldrb	r2, [r3]
  116e6c:	e51b3010 	ldr	r3, [fp, #-16]
  116e70:	e6ef3073 	uxtb	r3, r3
  116e74:	e1520003 	cmp	r2, r3
  116e78:	0a000001 	beq	116e84 <dns_compare_name+0xb4>
          return 0xFFFF;
  116e7c:	e30f3fff 	movw	r3, #65535	; 0xffff
  116e80:	ea00001e 	b	116f00 <dns_compare_name+0x130>
        }
        ++response_offset;
  116e84:	e15b30ba 	ldrh	r3, [fp, #-10]
  116e88:	e2833001 	add	r3, r3, #1
  116e8c:	e14b30ba 	strh	r3, [fp, #-10]
        ++query;
  116e90:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  116e94:	e2833001 	add	r3, r3, #1
  116e98:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        --n;
  116e9c:	e51b3008 	ldr	r3, [fp, #-8]
  116ea0:	e2433001 	sub	r3, r3, #1
  116ea4:	e50b3008 	str	r3, [fp, #-8]
      while (n > 0) {
  116ea8:	e51b3008 	ldr	r3, [fp, #-8]
  116eac:	e3530000 	cmp	r3, #0
  116eb0:	caffffe1 	bgt	116e3c <dns_compare_name+0x6c>
      }
      ++query;
  116eb4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  116eb8:	e2833001 	add	r3, r3, #1
  116ebc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    }
    n = pbuf_try_get_at(p, response_offset);
  116ec0:	e15b30ba 	ldrh	r3, [fp, #-10]
  116ec4:	e1a01003 	mov	r1, r3
  116ec8:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  116ecc:	eb00142f 	bl	11bf90 <pbuf_try_get_at>
  116ed0:	e50b0008 	str	r0, [fp, #-8]
    if (n < 0) {
  116ed4:	e51b3008 	ldr	r3, [fp, #-8]
  116ed8:	e3530000 	cmp	r3, #0
  116edc:	aa000001 	bge	116ee8 <dns_compare_name+0x118>
      return 0xFFFF;
  116ee0:	e30f3fff 	movw	r3, #65535	; 0xffff
  116ee4:	ea000005 	b	116f00 <dns_compare_name+0x130>
    }
  } while (n != 0);
  116ee8:	e51b3008 	ldr	r3, [fp, #-8]
  116eec:	e3530000 	cmp	r3, #0
  116ef0:	1affffbf 	bne	116df4 <dns_compare_name+0x24>

  return response_offset + 1;
  116ef4:	e15b30ba 	ldrh	r3, [fp, #-10]
  116ef8:	e2833001 	add	r3, r3, #1
  116efc:	e6ff3073 	uxth	r3, r3
}
  116f00:	e1a00003 	mov	r0, r3
  116f04:	e24bd004 	sub	sp, fp, #4
  116f08:	e8bd8800 	pop	{fp, pc}

00116f0c <dns_skip_name>:
 * @param query_idx start index into p pointing to encoded DNS name in the DNS server response
 * @return index to end of the name
 */
static u16_t
dns_skip_name(struct pbuf* p, u16_t query_idx)
{
  116f0c:	e92d4800 	push	{fp, lr}
  116f10:	e28db004 	add	fp, sp, #4
  116f14:	e24dd010 	sub	sp, sp, #16
  116f18:	e50b0010 	str	r0, [fp, #-16]
  116f1c:	e1a03001 	mov	r3, r1
  116f20:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  int n;
  u16_t offset = query_idx;
  116f24:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  116f28:	e14b30b6 	strh	r3, [fp, #-6]

  do {
    n = pbuf_try_get_at(p, offset++);
  116f2c:	e15b30b6 	ldrh	r3, [fp, #-6]
  116f30:	e2832001 	add	r2, r3, #1
  116f34:	e14b20b6 	strh	r2, [fp, #-6]
  116f38:	e1a01003 	mov	r1, r3
  116f3c:	e51b0010 	ldr	r0, [fp, #-16]
  116f40:	eb001412 	bl	11bf90 <pbuf_try_get_at>
  116f44:	e50b000c 	str	r0, [fp, #-12]
    if (n < 0) {
  116f48:	e51b300c 	ldr	r3, [fp, #-12]
  116f4c:	e3530000 	cmp	r3, #0
  116f50:	aa000001 	bge	116f5c <dns_skip_name+0x50>
      return 0xFFFF;
  116f54:	e30f3fff 	movw	r3, #65535	; 0xffff
  116f58:	ea000023 	b	116fec <dns_skip_name+0xe0>
    }
    /** @see RFC 1035 - 4.1.4. Message compression */
    if ((n & 0xc0) == 0xc0) {
  116f5c:	e51b300c 	ldr	r3, [fp, #-12]
  116f60:	e20330c0 	and	r3, r3, #192	; 0xc0
  116f64:	e35300c0 	cmp	r3, #192	; 0xc0
  116f68:	0a00001b 	beq	116fdc <dns_skip_name+0xd0>
      /* Compressed name: since we only want to skip it (not check it), stop here */
      break;
    } else {
      /* Not compressed name */
      if (offset + n >= p->tot_len) {
  116f6c:	e15b20b6 	ldrh	r2, [fp, #-6]
  116f70:	e51b300c 	ldr	r3, [fp, #-12]
  116f74:	e0823003 	add	r3, r2, r3
  116f78:	e51b2010 	ldr	r2, [fp, #-16]
  116f7c:	e1d220b8 	ldrh	r2, [r2, #8]
  116f80:	e1530002 	cmp	r3, r2
  116f84:	ba000001 	blt	116f90 <dns_skip_name+0x84>
        return 0xFFFF;
  116f88:	e30f3fff 	movw	r3, #65535	; 0xffff
  116f8c:	ea000016 	b	116fec <dns_skip_name+0xe0>
      }
      offset = (u16_t)(offset + n);
  116f90:	e51b300c 	ldr	r3, [fp, #-12]
  116f94:	e6ff2073 	uxth	r2, r3
  116f98:	e15b30b6 	ldrh	r3, [fp, #-6]
  116f9c:	e0823003 	add	r3, r2, r3
  116fa0:	e14b30b6 	strh	r3, [fp, #-6]
    }
    n = pbuf_try_get_at(p, offset);
  116fa4:	e15b30b6 	ldrh	r3, [fp, #-6]
  116fa8:	e1a01003 	mov	r1, r3
  116fac:	e51b0010 	ldr	r0, [fp, #-16]
  116fb0:	eb0013f6 	bl	11bf90 <pbuf_try_get_at>
  116fb4:	e50b000c 	str	r0, [fp, #-12]
    if (n < 0) {
  116fb8:	e51b300c 	ldr	r3, [fp, #-12]
  116fbc:	e3530000 	cmp	r3, #0
  116fc0:	aa000001 	bge	116fcc <dns_skip_name+0xc0>
      return 0xFFFF;
  116fc4:	e30f3fff 	movw	r3, #65535	; 0xffff
  116fc8:	ea000007 	b	116fec <dns_skip_name+0xe0>
    }
  } while (n != 0);
  116fcc:	e51b300c 	ldr	r3, [fp, #-12]
  116fd0:	e3530000 	cmp	r3, #0
  116fd4:	1affffd4 	bne	116f2c <dns_skip_name+0x20>
  116fd8:	ea000000 	b	116fe0 <dns_skip_name+0xd4>
      break;
  116fdc:	e320f000 	nop	{0}

  return offset + 1;
  116fe0:	e15b30b6 	ldrh	r3, [fp, #-6]
  116fe4:	e2833001 	add	r3, r3, #1
  116fe8:	e6ff3073 	uxth	r3, r3
}
  116fec:	e1a00003 	mov	r0, r3
  116ff0:	e24bd004 	sub	sp, fp, #4
  116ff4:	e8bd8800 	pop	{fp, pc}

00116ff8 <dns_send>:
 * @param idx the DNS table entry index for which to send a request
 * @return ERR_OK if packet is sent; an err_t indicating the problem otherwise
 */
static err_t
dns_send(u8_t idx)
{
  116ff8:	e92d4800 	push	{fp, lr}
  116ffc:	e28db004 	add	fp, sp, #4
  117000:	e24dd040 	sub	sp, sp, #64	; 0x40
  117004:	e1a03000 	mov	r3, r0
  117008:	e54b303d 	strb	r3, [fp, #-61]	; 0xffffffc3
  struct pbuf *p;
  u16_t query_idx, copy_len;
  const char *hostname, *hostname_part;
  u8_t n;
  u8_t pcb_idx;
  struct dns_table_entry* entry = &dns_table[idx];
  11700c:	e55b303d 	ldrb	r3, [fp, #-61]	; 0xffffffc3
  117010:	e3a02e11 	mov	r2, #272	; 0x110
  117014:	e0020392 	mul	r2, r2, r3
  117018:	e30e3c48 	movw	r3, #60488	; 0xec48
  11701c:	e3403014 	movt	r3, #20
  117020:	e0823003 	add	r3, r2, r3
  117024:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

  LWIP_DEBUGF(DNS_DEBUG, ("dns_send: dns_servers[%"U16_F"] \"%s\": request\n",
              (u16_t)(entry->server_idx), entry->name));
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
  117028:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11702c:	e5d3300b 	ldrb	r3, [r3, #11]
  117030:	e3530001 	cmp	r3, #1
  117034:	9a000006 	bls	117054 <dns_send+0x5c>
  117038:	e307024c 	movw	r0, #29260	; 0x724c
  11703c:	e3400014 	movt	r0, #20
  117040:	ebffb033 	bl	103114 <rt_kprintf>
  117044:	e30012fa 	movw	r1, #762	; 0x2fa
  117048:	e3070264 	movw	r0, #29284	; 0x7264
  11704c:	e3400014 	movt	r0, #20
  117050:	ebffd003 	bl	10b064 <sys_arch_assert>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
  117054:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  117058:	e5d3300b 	ldrb	r3, [r3, #11]
  11705c:	e1a02003 	mov	r2, r3
  117060:	e30f30b8 	movw	r3, #61624	; 0xf0b8
  117064:	e3403014 	movt	r3, #20
  117068:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  11706c:	e3530000 	cmp	r3, #0
  117070:	1a000008 	bne	117098 <dns_send+0xa0>
      && !entry->is_mdns
#endif
    ) {
    /* DNS server not valid anymore, e.g. PPP netif has been shut down */
    /* call specified callback function if provided */
    dns_call_found(idx, NULL);
  117074:	e55b303d 	ldrb	r3, [fp, #-61]	; 0xffffffc3
  117078:	e3a01000 	mov	r1, #0
  11707c:	e1a00003 	mov	r0, r3
  117080:	eb00010f 	bl	1174c4 <dns_call_found>
    /* flush this entry */
    entry->state = DNS_STATE_UNUSED;
  117084:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  117088:	e3a02000 	mov	r2, #0
  11708c:	e5c3200a 	strb	r2, [r3, #10]
    return ERR_OK;
  117090:	e3a03000 	mov	r3, #0
  117094:	ea000089 	b	1172c0 <dns_send+0x2c8>
  }

  /* if here, we have either a new query or a retry on a previous query to process */
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
  117098:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11709c:	e2833010 	add	r3, r3, #16
  1170a0:	e1a00003 	mov	r0, r3
  1170a4:	eb00a97d 	bl	1416a0 <strlen>
  1170a8:	e1a03000 	mov	r3, r0
  1170ac:	e6ff3073 	uxth	r3, r3
  1170b0:	e2833012 	add	r3, r3, #18
  1170b4:	e6ff3073 	uxth	r3, r3
  1170b8:	e3a02000 	mov	r2, #0
  1170bc:	e1a01003 	mov	r1, r3
  1170c0:	e3a00000 	mov	r0, #0
  1170c4:	eb000ced 	bl	11a480 <pbuf_alloc>
  1170c8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
                 SIZEOF_DNS_QUERY), PBUF_RAM);
  if (p != NULL) {
  1170cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1170d0:	e3530000 	cmp	r3, #0
  1170d4:	0a000076 	beq	1172b4 <dns_send+0x2bc>
    const ip_addr_t* dst;
    u16_t dst_port;
    /* fill dns header */
    memset(&hdr, 0, SIZEOF_DNS_HDR);
  1170d8:	e24b3034 	sub	r3, fp, #52	; 0x34
  1170dc:	e3a0200c 	mov	r2, #12
  1170e0:	e3a01000 	mov	r1, #0
  1170e4:	e1a00003 	mov	r0, r3
  1170e8:	eb00a8db 	bl	14145c <memset>
    hdr.id = lwip_htons(entry->txid);
  1170ec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1170f0:	e1d330b8 	ldrh	r3, [r3, #8]
  1170f4:	e1a00003 	mov	r0, r3
  1170f8:	ebfffdb0 	bl	1167c0 <lwip_htons>
  1170fc:	e1a03000 	mov	r3, r0
  117100:	e14b33b4 	strh	r3, [fp, #-52]	; 0xffffffcc
    hdr.flags1 = DNS_FLAG1_RD;
  117104:	e3a03001 	mov	r3, #1
  117108:	e54b3032 	strb	r3, [fp, #-50]	; 0xffffffce
    hdr.numquestions = PP_HTONS(1);
  11710c:	e3a03c01 	mov	r3, #256	; 0x100
  117110:	e14b33b0 	strh	r3, [fp, #-48]	; 0xffffffd0
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
  117114:	e24b3034 	sub	r3, fp, #52	; 0x34
  117118:	e3a0200c 	mov	r2, #12
  11711c:	e1a01003 	mov	r1, r3
  117120:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  117124:	eb00128f 	bl	11bb68 <pbuf_take>
    hostname = entry->name;
  117128:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11712c:	e2833010 	add	r3, r3, #16
  117130:	e50b300c 	str	r3, [fp, #-12]
    --hostname;
  117134:	e51b300c 	ldr	r3, [fp, #-12]
  117138:	e2433001 	sub	r3, r3, #1
  11713c:	e50b300c 	str	r3, [fp, #-12]

    /* convert hostname into suitable query format. */
    query_idx = SIZEOF_DNS_HDR;
  117140:	e3a0300c 	mov	r3, #12
  117144:	e14b30b8 	strh	r3, [fp, #-8]
    do {
      ++hostname;
  117148:	e51b300c 	ldr	r3, [fp, #-12]
  11714c:	e2833001 	add	r3, r3, #1
  117150:	e50b300c 	str	r3, [fp, #-12]
      hostname_part = hostname;
  117154:	e51b300c 	ldr	r3, [fp, #-12]
  117158:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
  11715c:	e3a03000 	mov	r3, #0
  117160:	e54b300d 	strb	r3, [fp, #-13]
  117164:	ea000005 	b	117180 <dns_send+0x188>
        ++n;
  117168:	e55b300d 	ldrb	r3, [fp, #-13]
  11716c:	e2833001 	add	r3, r3, #1
  117170:	e54b300d 	strb	r3, [fp, #-13]
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
  117174:	e51b300c 	ldr	r3, [fp, #-12]
  117178:	e2833001 	add	r3, r3, #1
  11717c:	e50b300c 	str	r3, [fp, #-12]
  117180:	e51b300c 	ldr	r3, [fp, #-12]
  117184:	e5d33000 	ldrb	r3, [r3]
  117188:	e353002e 	cmp	r3, #46	; 0x2e
  11718c:	0a000003 	beq	1171a0 <dns_send+0x1a8>
  117190:	e51b300c 	ldr	r3, [fp, #-12]
  117194:	e5d33000 	ldrb	r3, [r3]
  117198:	e3530000 	cmp	r3, #0
  11719c:	1afffff1 	bne	117168 <dns_send+0x170>
      }
      copy_len = (u16_t)(hostname - hostname_part);
  1171a0:	e51b200c 	ldr	r2, [fp, #-12]
  1171a4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1171a8:	e0423003 	sub	r3, r2, r3
  1171ac:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
      pbuf_put_at(p, query_idx, n);
  1171b0:	e55b200d 	ldrb	r2, [fp, #-13]
  1171b4:	e15b30b8 	ldrh	r3, [fp, #-8]
  1171b8:	e1a01003 	mov	r1, r3
  1171bc:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1171c0:	eb001390 	bl	11c008 <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, query_idx + 1);
  1171c4:	e15b30b8 	ldrh	r3, [fp, #-8]
  1171c8:	e2833001 	add	r3, r3, #1
  1171cc:	e6ff3073 	uxth	r3, r3
  1171d0:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
  1171d4:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  1171d8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1171dc:	eb0012de 	bl	11bd5c <pbuf_take_at>
      query_idx += n + 1;
  1171e0:	e55b300d 	ldrb	r3, [fp, #-13]
  1171e4:	e6ff2073 	uxth	r2, r3
  1171e8:	e15b30b8 	ldrh	r3, [fp, #-8]
  1171ec:	e0823003 	add	r3, r2, r3
  1171f0:	e6ff3073 	uxth	r3, r3
  1171f4:	e2833001 	add	r3, r3, #1
  1171f8:	e14b30b8 	strh	r3, [fp, #-8]
    } while (*hostname != 0);
  1171fc:	e51b300c 	ldr	r3, [fp, #-12]
  117200:	e5d33000 	ldrb	r3, [r3]
  117204:	e3530000 	cmp	r3, #0
  117208:	1affffce 	bne	117148 <dns_send+0x150>
    pbuf_put_at(p, query_idx, 0);
  11720c:	e15b30b8 	ldrh	r3, [fp, #-8]
  117210:	e3a02000 	mov	r2, #0
  117214:	e1a01003 	mov	r1, r3
  117218:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  11721c:	eb001379 	bl	11c008 <pbuf_put_at>
    query_idx++;
  117220:	e15b30b8 	ldrh	r3, [fp, #-8]
  117224:	e2833001 	add	r3, r3, #1
  117228:	e14b30b8 	strh	r3, [fp, #-8]

    /* fill dns query */
    if (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype)) {
      qry.type = PP_HTONS(DNS_RRTYPE_AAAA);
    } else {
      qry.type = PP_HTONS(DNS_RRTYPE_A);
  11722c:	e3a03c01 	mov	r3, #256	; 0x100
  117230:	e14b33b8 	strh	r3, [fp, #-56]	; 0xffffffc8
    }
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
  117234:	e3a03c01 	mov	r3, #256	; 0x100
  117238:	e14b33b6 	strh	r3, [fp, #-54]	; 0xffffffca
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
  11723c:	e15b30b8 	ldrh	r3, [fp, #-8]
  117240:	e24b1038 	sub	r1, fp, #56	; 0x38
  117244:	e3a02004 	mov	r2, #4
  117248:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  11724c:	eb0012c2 	bl	11bd5c <pbuf_take_at>

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
    pcb_idx = entry->pcb_idx;
  117250:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  117254:	e5d3300f 	ldrb	r3, [r3, #15]
  117258:	e54b301f 	strb	r3, [fp, #-31]	; 0xffffffe1
      }
#endif
    } else
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
    {
      dst_port = DNS_SERVER_PORT;
  11725c:	e3a03035 	mov	r3, #53	; 0x35
  117260:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
      dst = &dns_servers[entry->server_idx];
  117264:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  117268:	e5d3300b 	ldrb	r3, [r3, #11]
  11726c:	e1a02103 	lsl	r2, r3, #2
  117270:	e30f30b8 	movw	r3, #61624	; 0xf0b8
  117274:	e3403014 	movt	r3, #20
  117278:	e0823003 	add	r3, r2, r3
  11727c:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
    }
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
  117280:	e55b201f 	ldrb	r2, [fp, #-31]	; 0xffffffe1
  117284:	e30e3c34 	movw	r3, #60468	; 0xec34
  117288:	e3403014 	movt	r3, #20
  11728c:	e7930102 	ldr	r0, [r3, r2, lsl #2]
  117290:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  117294:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  117298:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  11729c:	eb00441c 	bl	128314 <udp_sendto>
  1172a0:	e1a03000 	mov	r3, r0
  1172a4:	e54b3005 	strb	r3, [fp, #-5]

    /* free pbuf */
    pbuf_free(p);
  1172a8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1172ac:	eb000f7a 	bl	11b09c <pbuf_free>
  1172b0:	ea000001 	b	1172bc <dns_send+0x2c4>
  } else {
    err = ERR_MEM;
  1172b4:	e3e03000 	mvn	r3, #0
  1172b8:	e54b3005 	strb	r3, [fp, #-5]
  }

  return err;
  1172bc:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  1172c0:	e1a00003 	mov	r0, r3
  1172c4:	e24bd004 	sub	sp, fp, #4
  1172c8:	e8bd8800 	pop	{fp, pc}

001172cc <dns_alloc_random_port>:

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
static struct udp_pcb*
dns_alloc_random_port(void)
{
  1172cc:	e92d4800 	push	{fp, lr}
  1172d0:	e28db004 	add	fp, sp, #4
  1172d4:	e24dd010 	sub	sp, sp, #16
  err_t err;
  struct udp_pcb* ret;

  ret = udp_new_ip_type(IPADDR_TYPE_ANY);
  1172d8:	e3a0002e 	mov	r0, #46	; 0x2e
  1172dc:	eb00468a 	bl	128d0c <udp_new_ip_type>
  1172e0:	e50b000c 	str	r0, [fp, #-12]
  if (ret == NULL) {
  1172e4:	e51b300c 	ldr	r3, [fp, #-12]
  1172e8:	e3530000 	cmp	r3, #0
  1172ec:	1a000001 	bne	1172f8 <dns_alloc_random_port+0x2c>
    /* out of memory, have to reuse an existing pcb */
    return NULL;
  1172f0:	e3a03000 	mov	r3, #0
  1172f4:	ea000020 	b	11737c <dns_alloc_random_port+0xb0>
  }
  do {
    u16_t port = (u16_t)DNS_RAND_TXID();
  1172f8:	eb009c1d 	bl	13e374 <rand>
  1172fc:	e1a03000 	mov	r3, r0
  117300:	e14b30be 	strh	r3, [fp, #-14]
    if (!DNS_PORT_ALLOWED(port)) {
  117304:	e15b30be 	ldrh	r3, [fp, #-14]
  117308:	e3530b01 	cmp	r3, #1024	; 0x400
  11730c:	2a000002 	bcs	11731c <dns_alloc_random_port+0x50>
      /* this port is not allowed, try again */
      err = ERR_USE;
  117310:	e3e03007 	mvn	r3, #7
  117314:	e54b3005 	strb	r3, [fp, #-5]
      continue;
  117318:	ea000007 	b	11733c <dns_alloc_random_port+0x70>
    }
    err = udp_bind(ret, IP_ANY_TYPE, port);
  11731c:	e15b30be 	ldrh	r3, [fp, #-14]
  117320:	e1a02003 	mov	r2, r3
  117324:	e3091adc 	movw	r1, #39644	; 0x9adc
  117328:	e3401014 	movt	r1, #20
  11732c:	e51b000c 	ldr	r0, [fp, #-12]
  117330:	eb004540 	bl	128838 <udp_bind>
  117334:	e1a03000 	mov	r3, r0
  117338:	e54b3005 	strb	r3, [fp, #-5]
  } while (err == ERR_USE);
  11733c:	e15b30d5 	ldrsb	r3, [fp, #-5]
  117340:	e3730008 	cmn	r3, #8
  117344:	0affffeb 	beq	1172f8 <dns_alloc_random_port+0x2c>
  if (err != ERR_OK) {
  117348:	e15b30d5 	ldrsb	r3, [fp, #-5]
  11734c:	e3530000 	cmp	r3, #0
  117350:	0a000003 	beq	117364 <dns_alloc_random_port+0x98>
    udp_remove(ret);
  117354:	e51b000c 	ldr	r0, [fp, #-12]
  117358:	eb004620 	bl	128be0 <udp_remove>
    return NULL;
  11735c:	e3a03000 	mov	r3, #0
  117360:	ea000005 	b	11737c <dns_alloc_random_port+0xb0>
  }
  udp_recv(ret, dns_recv, NULL);
  117364:	e3a02000 	mov	r2, #0
  117368:	e3071b74 	movw	r1, #31604	; 0x7b74
  11736c:	e3401011 	movt	r1, #17
  117370:	e51b000c 	ldr	r0, [fp, #-12]
  117374:	eb004609 	bl	128ba0 <udp_recv>
  return ret;
  117378:	e51b300c 	ldr	r3, [fp, #-12]
}
  11737c:	e1a00003 	mov	r0, r3
  117380:	e24bd004 	sub	sp, fp, #4
  117384:	e8bd8800 	pop	{fp, pc}

00117388 <dns_alloc_pcb>:
 *
 * @return an index into dns_pcbs
 */
static u8_t
dns_alloc_pcb(void)
{
  117388:	e92d4810 	push	{r4, fp, lr}
  11738c:	e28db008 	add	fp, sp, #8
  117390:	e24dd00c 	sub	sp, sp, #12
  u8_t i;
  u8_t idx;

  for (i = 0; i < DNS_MAX_SOURCE_PORTS; i++) {
  117394:	e3a03000 	mov	r3, #0
  117398:	e54b300d 	strb	r3, [fp, #-13]
  11739c:	ea000008 	b	1173c4 <dns_alloc_pcb+0x3c>
    if (dns_pcbs[i] == NULL) {
  1173a0:	e55b200d 	ldrb	r2, [fp, #-13]
  1173a4:	e30e3c34 	movw	r3, #60468	; 0xec34
  1173a8:	e3403014 	movt	r3, #20
  1173ac:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  1173b0:	e3530000 	cmp	r3, #0
  1173b4:	0a000006 	beq	1173d4 <dns_alloc_pcb+0x4c>
  for (i = 0; i < DNS_MAX_SOURCE_PORTS; i++) {
  1173b8:	e55b300d 	ldrb	r3, [fp, #-13]
  1173bc:	e2833001 	add	r3, r3, #1
  1173c0:	e54b300d 	strb	r3, [fp, #-13]
  1173c4:	e55b300d 	ldrb	r3, [fp, #-13]
  1173c8:	e3530003 	cmp	r3, #3
  1173cc:	9afffff3 	bls	1173a0 <dns_alloc_pcb+0x18>
  1173d0:	ea000000 	b	1173d8 <dns_alloc_pcb+0x50>
      break;
  1173d4:	e320f000 	nop	{0}
    }
  }
  if (i < DNS_MAX_SOURCE_PORTS) {
  1173d8:	e55b300d 	ldrb	r3, [fp, #-13]
  1173dc:	e3530003 	cmp	r3, #3
  1173e0:	8a000011 	bhi	11742c <dns_alloc_pcb+0xa4>
    dns_pcbs[i] = dns_alloc_random_port();
  1173e4:	e55b400d 	ldrb	r4, [fp, #-13]
  1173e8:	ebffffb7 	bl	1172cc <dns_alloc_random_port>
  1173ec:	e1a02000 	mov	r2, r0
  1173f0:	e30e3c34 	movw	r3, #60468	; 0xec34
  1173f4:	e3403014 	movt	r3, #20
  1173f8:	e7832104 	str	r2, [r3, r4, lsl #2]
    if (dns_pcbs[i] != NULL) {
  1173fc:	e55b200d 	ldrb	r2, [fp, #-13]
  117400:	e30e3c34 	movw	r3, #60468	; 0xec34
  117404:	e3403014 	movt	r3, #20
  117408:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  11740c:	e3530000 	cmp	r3, #0
  117410:	0a000005 	beq	11742c <dns_alloc_pcb+0xa4>
      /* succeeded */
      dns_last_pcb_idx = i;
  117414:	e30e3c44 	movw	r3, #60484	; 0xec44
  117418:	e3403014 	movt	r3, #20
  11741c:	e55b200d 	ldrb	r2, [fp, #-13]
  117420:	e5c32000 	strb	r2, [r3]
      return i;
  117424:	e55b300d 	ldrb	r3, [fp, #-13]
  117428:	ea000022 	b	1174b8 <dns_alloc_pcb+0x130>
    }
  }
  /* if we come here, creating a new UDP pcb failed, so we have to use
     an already existing one */
  for (i = 0, idx = dns_last_pcb_idx + 1; i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
  11742c:	e3a03000 	mov	r3, #0
  117430:	e54b300d 	strb	r3, [fp, #-13]
  117434:	e30e3c44 	movw	r3, #60484	; 0xec44
  117438:	e3403014 	movt	r3, #20
  11743c:	e5d33000 	ldrb	r3, [r3]
  117440:	e2833001 	add	r3, r3, #1
  117444:	e54b300e 	strb	r3, [fp, #-14]
  117448:	ea000016 	b	1174a8 <dns_alloc_pcb+0x120>
    if (idx >= DNS_MAX_SOURCE_PORTS) {
  11744c:	e55b300e 	ldrb	r3, [fp, #-14]
  117450:	e3530003 	cmp	r3, #3
  117454:	9a000001 	bls	117460 <dns_alloc_pcb+0xd8>
      idx = 0;
  117458:	e3a03000 	mov	r3, #0
  11745c:	e54b300e 	strb	r3, [fp, #-14]
    }
    if (dns_pcbs[idx] != NULL) {
  117460:	e55b200e 	ldrb	r2, [fp, #-14]
  117464:	e30e3c34 	movw	r3, #60468	; 0xec34
  117468:	e3403014 	movt	r3, #20
  11746c:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  117470:	e3530000 	cmp	r3, #0
  117474:	0a000005 	beq	117490 <dns_alloc_pcb+0x108>
      dns_last_pcb_idx = idx;
  117478:	e30e3c44 	movw	r3, #60484	; 0xec44
  11747c:	e3403014 	movt	r3, #20
  117480:	e55b200e 	ldrb	r2, [fp, #-14]
  117484:	e5c32000 	strb	r2, [r3]
      return idx;
  117488:	e55b300e 	ldrb	r3, [fp, #-14]
  11748c:	ea000009 	b	1174b8 <dns_alloc_pcb+0x130>
  for (i = 0, idx = dns_last_pcb_idx + 1; i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
  117490:	e55b300d 	ldrb	r3, [fp, #-13]
  117494:	e2833001 	add	r3, r3, #1
  117498:	e54b300d 	strb	r3, [fp, #-13]
  11749c:	e55b300e 	ldrb	r3, [fp, #-14]
  1174a0:	e2833001 	add	r3, r3, #1
  1174a4:	e54b300e 	strb	r3, [fp, #-14]
  1174a8:	e55b300d 	ldrb	r3, [fp, #-13]
  1174ac:	e3530003 	cmp	r3, #3
  1174b0:	9affffe5 	bls	11744c <dns_alloc_pcb+0xc4>
    }
  }
  return DNS_MAX_SOURCE_PORTS;
  1174b4:	e3a03004 	mov	r3, #4
}
  1174b8:	e1a00003 	mov	r0, r3
  1174bc:	e24bd008 	sub	sp, fp, #8
  1174c0:	e8bd8810 	pop	{r4, fp, pc}

001174c4 <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t* addr)
{
  1174c4:	e92d4810 	push	{r4, fp, lr}
  1174c8:	e28db008 	add	fp, sp, #8
  1174cc:	e24dd014 	sub	sp, sp, #20
  1174d0:	e1a03000 	mov	r3, r0
  1174d4:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  1174d8:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
    }
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
  1174dc:	e3a03000 	mov	r3, #0
  1174e0:	e54b300d 	strb	r3, [fp, #-13]
  1174e4:	ea000037 	b	1175c8 <dns_call_found+0x104>
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
  1174e8:	e55b200d 	ldrb	r2, [fp, #-13]
  1174ec:	e30f3088 	movw	r3, #61576	; 0xf088
  1174f0:	e3403014 	movt	r3, #20
  1174f4:	e3a0100c 	mov	r1, #12
  1174f8:	e0020291 	mul	r2, r1, r2
  1174fc:	e0833002 	add	r3, r3, r2
  117500:	e5933000 	ldr	r3, [r3]
  117504:	e3530000 	cmp	r3, #0
  117508:	0a00002b 	beq	1175bc <dns_call_found+0xf8>
  11750c:	e55b200d 	ldrb	r2, [fp, #-13]
  117510:	e30f3088 	movw	r3, #61576	; 0xf088
  117514:	e3403014 	movt	r3, #20
  117518:	e3a0100c 	mov	r1, #12
  11751c:	e0020291 	mul	r2, r1, r2
  117520:	e0833002 	add	r3, r3, r2
  117524:	e2833008 	add	r3, r3, #8
  117528:	e5d33000 	ldrb	r3, [r3]
  11752c:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
  117530:	e1520003 	cmp	r2, r3
  117534:	1a000020 	bne	1175bc <dns_call_found+0xf8>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
  117538:	e55b200d 	ldrb	r2, [fp, #-13]
  11753c:	e30f3088 	movw	r3, #61576	; 0xf088
  117540:	e3403014 	movt	r3, #20
  117544:	e3a0100c 	mov	r1, #12
  117548:	e0020291 	mul	r2, r1, r2
  11754c:	e0833002 	add	r3, r3, r2
  117550:	e5934000 	ldr	r4, [r3]
  117554:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  117558:	e3a02e11 	mov	r2, #272	; 0x110
  11755c:	e0030392 	mul	r3, r2, r3
  117560:	e2832010 	add	r2, r3, #16
  117564:	e30e3c48 	movw	r3, #60488	; 0xec48
  117568:	e3403014 	movt	r3, #20
  11756c:	e0820003 	add	r0, r2, r3
  117570:	e55b200d 	ldrb	r2, [fp, #-13]
  117574:	e30f3088 	movw	r3, #61576	; 0xf088
  117578:	e3403014 	movt	r3, #20
  11757c:	e3a0100c 	mov	r1, #12
  117580:	e0020291 	mul	r2, r1, r2
  117584:	e0833002 	add	r3, r3, r2
  117588:	e2833004 	add	r3, r3, #4
  11758c:	e5933000 	ldr	r3, [r3]
  117590:	e1a02003 	mov	r2, r3
  117594:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  117598:	e12fff34 	blx	r4
      /* flush this entry */
      dns_requests[i].found = NULL;
  11759c:	e55b200d 	ldrb	r2, [fp, #-13]
  1175a0:	e30f3088 	movw	r3, #61576	; 0xf088
  1175a4:	e3403014 	movt	r3, #20
  1175a8:	e3a0100c 	mov	r1, #12
  1175ac:	e0020291 	mul	r2, r1, r2
  1175b0:	e0833002 	add	r3, r3, r2
  1175b4:	e3a02000 	mov	r2, #0
  1175b8:	e5832000 	str	r2, [r3]
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
  1175bc:	e55b300d 	ldrb	r3, [fp, #-13]
  1175c0:	e2833001 	add	r3, r3, #1
  1175c4:	e54b300d 	strb	r3, [fp, #-13]
  1175c8:	e55b300d 	ldrb	r3, [fp, #-13]
  1175cc:	e3530003 	cmp	r3, #3
  1175d0:	9affffc4 	bls	1174e8 <dns_call_found+0x24>
  }
  dns_requests[idx].found = NULL;
#endif
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  /* close the pcb used unless other request are using it */
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
  1175d4:	e3a03000 	mov	r3, #0
  1175d8:	e54b300d 	strb	r3, [fp, #-13]
  1175dc:	ea00002d 	b	117698 <dns_call_found+0x1d4>
    if (i == idx) {
  1175e0:	e55b200d 	ldrb	r2, [fp, #-13]
  1175e4:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  1175e8:	e1520003 	cmp	r2, r3
  1175ec:	0a000025 	beq	117688 <dns_call_found+0x1c4>
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
  1175f0:	e55b200d 	ldrb	r2, [fp, #-13]
  1175f4:	e30e3c48 	movw	r3, #60488	; 0xec48
  1175f8:	e3403014 	movt	r3, #20
  1175fc:	e3a01e11 	mov	r1, #272	; 0x110
  117600:	e0020291 	mul	r2, r1, r2
  117604:	e0833002 	add	r3, r3, r2
  117608:	e283300a 	add	r3, r3, #10
  11760c:	e5d33000 	ldrb	r3, [r3]
  117610:	e3530002 	cmp	r3, #2
  117614:	1a00001c 	bne	11768c <dns_call_found+0x1c8>
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
  117618:	e55b200d 	ldrb	r2, [fp, #-13]
  11761c:	e30e3c48 	movw	r3, #60488	; 0xec48
  117620:	e3403014 	movt	r3, #20
  117624:	e3a01e11 	mov	r1, #272	; 0x110
  117628:	e0020291 	mul	r2, r1, r2
  11762c:	e0833002 	add	r3, r3, r2
  117630:	e283300f 	add	r3, r3, #15
  117634:	e5d32000 	ldrb	r2, [r3]
  117638:	e55b1015 	ldrb	r1, [fp, #-21]	; 0xffffffeb
  11763c:	e30e3c48 	movw	r3, #60488	; 0xec48
  117640:	e3403014 	movt	r3, #20
  117644:	e3a00e11 	mov	r0, #272	; 0x110
  117648:	e0010190 	mul	r1, r0, r1
  11764c:	e0833001 	add	r3, r3, r1
  117650:	e283300f 	add	r3, r3, #15
  117654:	e5d33000 	ldrb	r3, [r3]
  117658:	e1520003 	cmp	r2, r3
  11765c:	1a00000a 	bne	11768c <dns_call_found+0x1c8>
        /* another request is still using the same pcb */
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
  117660:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
  117664:	e30e3c48 	movw	r3, #60488	; 0xec48
  117668:	e3403014 	movt	r3, #20
  11766c:	e3a01e11 	mov	r1, #272	; 0x110
  117670:	e0020291 	mul	r2, r1, r2
  117674:	e0833002 	add	r3, r3, r2
  117678:	e283300f 	add	r3, r3, #15
  11767c:	e3a02004 	mov	r2, #4
  117680:	e5c32000 	strb	r2, [r3]
        break;
  117684:	ea000006 	b	1176a4 <dns_call_found+0x1e0>
      continue; /* only check other requests */
  117688:	e320f000 	nop	{0}
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
  11768c:	e55b300d 	ldrb	r3, [fp, #-13]
  117690:	e2833001 	add	r3, r3, #1
  117694:	e54b300d 	strb	r3, [fp, #-13]
  117698:	e55b300d 	ldrb	r3, [fp, #-13]
  11769c:	e3530003 	cmp	r3, #3
  1176a0:	9affffce 	bls	1175e0 <dns_call_found+0x11c>
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
  1176a4:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
  1176a8:	e30e3c48 	movw	r3, #60488	; 0xec48
  1176ac:	e3403014 	movt	r3, #20
  1176b0:	e3a01e11 	mov	r1, #272	; 0x110
  1176b4:	e0020291 	mul	r2, r1, r2
  1176b8:	e0833002 	add	r3, r3, r2
  1176bc:	e283300f 	add	r3, r3, #15
  1176c0:	e5d33000 	ldrb	r3, [r3]
  1176c4:	e3530003 	cmp	r3, #3
  1176c8:	8a000023 	bhi	11775c <dns_call_found+0x298>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
  1176cc:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
  1176d0:	e30e3c48 	movw	r3, #60488	; 0xec48
  1176d4:	e3403014 	movt	r3, #20
  1176d8:	e3a01e11 	mov	r1, #272	; 0x110
  1176dc:	e0020291 	mul	r2, r1, r2
  1176e0:	e0833002 	add	r3, r3, r2
  1176e4:	e283300f 	add	r3, r3, #15
  1176e8:	e5d33000 	ldrb	r3, [r3]
  1176ec:	e1a02003 	mov	r2, r3
  1176f0:	e30e3c34 	movw	r3, #60468	; 0xec34
  1176f4:	e3403014 	movt	r3, #20
  1176f8:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  1176fc:	e1a00003 	mov	r0, r3
  117700:	eb004536 	bl	128be0 <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
  117704:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
  117708:	e30e3c48 	movw	r3, #60488	; 0xec48
  11770c:	e3403014 	movt	r3, #20
  117710:	e3a01e11 	mov	r1, #272	; 0x110
  117714:	e0020291 	mul	r2, r1, r2
  117718:	e0833002 	add	r3, r3, r2
  11771c:	e283300f 	add	r3, r3, #15
  117720:	e5d33000 	ldrb	r3, [r3]
  117724:	e1a01003 	mov	r1, r3
  117728:	e30e3c34 	movw	r3, #60468	; 0xec34
  11772c:	e3403014 	movt	r3, #20
  117730:	e3a02000 	mov	r2, #0
  117734:	e7832101 	str	r2, [r3, r1, lsl #2]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
  117738:	e55b2015 	ldrb	r2, [fp, #-21]	; 0xffffffeb
  11773c:	e30e3c48 	movw	r3, #60488	; 0xec48
  117740:	e3403014 	movt	r3, #20
  117744:	e3a01e11 	mov	r1, #272	; 0x110
  117748:	e0020291 	mul	r2, r1, r2
  11774c:	e0833002 	add	r3, r3, r2
  117750:	e283300f 	add	r3, r3, #15
  117754:	e3a02004 	mov	r2, #4
  117758:	e5c32000 	strb	r2, [r3]
  }
#endif
}
  11775c:	e320f000 	nop	{0}
  117760:	e24bd008 	sub	sp, fp, #8
  117764:	e8bd8810 	pop	{r4, fp, pc}

00117768 <dns_create_txid>:

/* Create a query transmission ID that is unique for all outstanding queries */
static u16_t
dns_create_txid(void)
{
  117768:	e92d4800 	push	{fp, lr}
  11776c:	e28db004 	add	fp, sp, #4
  117770:	e24dd008 	sub	sp, sp, #8
  u16_t txid;
  u8_t i;

again:
  txid = (u16_t)DNS_RAND_TXID();
  117774:	eb009afe 	bl	13e374 <rand>
  117778:	e1a03000 	mov	r3, r0
  11777c:	e14b30b8 	strh	r3, [fp, #-8]

  /* check whether the ID is unique */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
  117780:	e3a03000 	mov	r3, #0
  117784:	e54b3005 	strb	r3, [fp, #-5]
  117788:	ea000018 	b	1177f0 <dns_create_txid+0x88>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
  11778c:	e55b2005 	ldrb	r2, [fp, #-5]
  117790:	e30e3c48 	movw	r3, #60488	; 0xec48
  117794:	e3403014 	movt	r3, #20
  117798:	e3a01e11 	mov	r1, #272	; 0x110
  11779c:	e0020291 	mul	r2, r1, r2
  1177a0:	e0833002 	add	r3, r3, r2
  1177a4:	e283300a 	add	r3, r3, #10
  1177a8:	e5d33000 	ldrb	r3, [r3]
  1177ac:	e3530002 	cmp	r3, #2
  1177b0:	1a00000b 	bne	1177e4 <dns_create_txid+0x7c>
        (dns_table[i].txid == txid)) {
  1177b4:	e55b2005 	ldrb	r2, [fp, #-5]
  1177b8:	e30e3c48 	movw	r3, #60488	; 0xec48
  1177bc:	e3403014 	movt	r3, #20
  1177c0:	e3a01e11 	mov	r1, #272	; 0x110
  1177c4:	e0020291 	mul	r2, r1, r2
  1177c8:	e0833002 	add	r3, r3, r2
  1177cc:	e2833008 	add	r3, r3, #8
  1177d0:	e1d330b0 	ldrh	r3, [r3]
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
  1177d4:	e15b20b8 	ldrh	r2, [fp, #-8]
  1177d8:	e1520003 	cmp	r2, r3
  1177dc:	1a000000 	bne	1177e4 <dns_create_txid+0x7c>
      /* ID already used by another pending query */
      goto again;
  1177e0:	eaffffe3 	b	117774 <dns_create_txid+0xc>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
  1177e4:	e55b3005 	ldrb	r3, [fp, #-5]
  1177e8:	e2833001 	add	r3, r3, #1
  1177ec:	e54b3005 	strb	r3, [fp, #-5]
  1177f0:	e55b3005 	ldrb	r3, [fp, #-5]
  1177f4:	e3530003 	cmp	r3, #3
  1177f8:	9affffe3 	bls	11778c <dns_create_txid+0x24>
    }
  }

  return txid;
  1177fc:	e15b30b8 	ldrh	r3, [fp, #-8]
}
  117800:	e1a00003 	mov	r0, r3
  117804:	e24bd004 	sub	sp, fp, #4
  117808:	e8bd8800 	pop	{fp, pc}

0011780c <dns_check_entry>:
 *
 * @param i index of the dns_table entry to check
 */
static void
dns_check_entry(u8_t i)
{
  11780c:	e92d4800 	push	{fp, lr}
  117810:	e28db004 	add	fp, sp, #4
  117814:	e24dd010 	sub	sp, sp, #16
  117818:	e1a03000 	mov	r3, r0
  11781c:	e54b300d 	strb	r3, [fp, #-13]
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];
  117820:	e55b300d 	ldrb	r3, [fp, #-13]
  117824:	e3a02e11 	mov	r2, #272	; 0x110
  117828:	e0020392 	mul	r2, r2, r3
  11782c:	e30e3c48 	movw	r3, #60488	; 0xec48
  117830:	e3403014 	movt	r3, #20
  117834:	e0823003 	add	r3, r2, r3
  117838:	e50b3008 	str	r3, [fp, #-8]

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
  11783c:	e55b300d 	ldrb	r3, [fp, #-13]
  117840:	e3530003 	cmp	r3, #3
  117844:	9a000006 	bls	117864 <dns_check_entry+0x58>
  117848:	e3070290 	movw	r0, #29328	; 0x7290
  11784c:	e3400014 	movt	r0, #20
  117850:	ebffae2f 	bl	103114 <rt_kprintf>
  117854:	e3001405 	movw	r1, #1029	; 0x405
  117858:	e3070264 	movw	r0, #29284	; 0x7264
  11785c:	e3400014 	movt	r0, #20
  117860:	ebffcdff 	bl	10b064 <sys_arch_assert>

  switch (entry->state) {
  117864:	e51b3008 	ldr	r3, [fp, #-8]
  117868:	e5d3300a 	ldrb	r3, [r3, #10]
  11786c:	e3530003 	cmp	r3, #3
  117870:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  117874:	ea00006b 	b	117a28 <dns_check_entry+0x21c>
  117878:	00117a48 	.word	0x00117a48
  11787c:	00117888 	.word	0x00117888
  117880:	001178e4 	.word	0x001178e4
  117884:	001179e4 	.word	0x001179e4
    case DNS_STATE_NEW:
      /* initialize new entry */
      entry->txid = dns_create_txid();
  117888:	ebffffb6 	bl	117768 <dns_create_txid>
  11788c:	e1a03000 	mov	r3, r0
  117890:	e1a02003 	mov	r2, r3
  117894:	e51b3008 	ldr	r3, [fp, #-8]
  117898:	e1c320b8 	strh	r2, [r3, #8]
      entry->state = DNS_STATE_ASKING;
  11789c:	e51b3008 	ldr	r3, [fp, #-8]
  1178a0:	e3a02002 	mov	r2, #2
  1178a4:	e5c3200a 	strb	r2, [r3, #10]
      entry->server_idx = 0;
  1178a8:	e51b3008 	ldr	r3, [fp, #-8]
  1178ac:	e3a02000 	mov	r2, #0
  1178b0:	e5c3200b 	strb	r2, [r3, #11]
      entry->tmr = 1;
  1178b4:	e51b3008 	ldr	r3, [fp, #-8]
  1178b8:	e3a02001 	mov	r2, #1
  1178bc:	e5c3200c 	strb	r2, [r3, #12]
      entry->retries = 0;
  1178c0:	e51b3008 	ldr	r3, [fp, #-8]
  1178c4:	e3a02000 	mov	r2, #0
  1178c8:	e5c3200d 	strb	r2, [r3, #13]

      /* send DNS packet for this entry */
      err = dns_send(i);
  1178cc:	e55b300d 	ldrb	r3, [fp, #-13]
  1178d0:	e1a00003 	mov	r0, r3
  1178d4:	ebfffdc7 	bl	116ff8 <dns_send>
  1178d8:	e1a03000 	mov	r3, r0
  1178dc:	e54b3009 	strb	r3, [fp, #-9]
      if (err != ERR_OK) {
        LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                    ("dns_send returned error: %s\n", lwip_strerr(err)));
      }
      break;
  1178e0:	ea00005d 	b	117a5c <dns_check_entry+0x250>
    case DNS_STATE_ASKING:
      if (--entry->tmr == 0) {
  1178e4:	e51b3008 	ldr	r3, [fp, #-8]
  1178e8:	e5d3300c 	ldrb	r3, [r3, #12]
  1178ec:	e2433001 	sub	r3, r3, #1
  1178f0:	e6ef2073 	uxtb	r2, r3
  1178f4:	e51b3008 	ldr	r3, [fp, #-8]
  1178f8:	e5c3200c 	strb	r2, [r3, #12]
  1178fc:	e51b3008 	ldr	r3, [fp, #-8]
  117900:	e5d3300c 	ldrb	r3, [r3, #12]
  117904:	e3530000 	cmp	r3, #0
  117908:	1a000050 	bne	117a50 <dns_check_entry+0x244>
        if (++entry->retries == DNS_MAX_RETRIES) {
  11790c:	e51b3008 	ldr	r3, [fp, #-8]
  117910:	e5d3300d 	ldrb	r3, [r3, #13]
  117914:	e2833001 	add	r3, r3, #1
  117918:	e6ef2073 	uxtb	r2, r3
  11791c:	e51b3008 	ldr	r3, [fp, #-8]
  117920:	e5c3200d 	strb	r2, [r3, #13]
  117924:	e51b3008 	ldr	r3, [fp, #-8]
  117928:	e5d3300d 	ldrb	r3, [r3, #13]
  11792c:	e3530004 	cmp	r3, #4
  117930:	1a000021 	bne	1179bc <dns_check_entry+0x1b0>
          if ((entry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[entry->server_idx + 1])
  117934:	e51b3008 	ldr	r3, [fp, #-8]
  117938:	e5d3300b 	ldrb	r3, [r3, #11]
  11793c:	e2833001 	add	r3, r3, #1
  117940:	e3530001 	cmp	r3, #1
  117944:	ca000014 	bgt	11799c <dns_check_entry+0x190>
  117948:	e51b3008 	ldr	r3, [fp, #-8]
  11794c:	e5d3300b 	ldrb	r3, [r3, #11]
  117950:	e2832001 	add	r2, r3, #1
  117954:	e30f30b8 	movw	r3, #61624	; 0xf0b8
  117958:	e3403014 	movt	r3, #20
  11795c:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  117960:	e3530000 	cmp	r3, #0
  117964:	0a00000c 	beq	11799c <dns_check_entry+0x190>
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
            && !entry->is_mdns
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
            ) {
            /* change of server */
            entry->server_idx++;
  117968:	e51b3008 	ldr	r3, [fp, #-8]
  11796c:	e5d3300b 	ldrb	r3, [r3, #11]
  117970:	e2833001 	add	r3, r3, #1
  117974:	e6ef2073 	uxtb	r2, r3
  117978:	e51b3008 	ldr	r3, [fp, #-8]
  11797c:	e5c3200b 	strb	r2, [r3, #11]
            entry->tmr = 1;
  117980:	e51b3008 	ldr	r3, [fp, #-8]
  117984:	e3a02001 	mov	r2, #1
  117988:	e5c3200c 	strb	r2, [r3, #12]
            entry->retries = 0;
  11798c:	e51b3008 	ldr	r3, [fp, #-8]
  117990:	e3a02000 	mov	r2, #0
  117994:	e5c3200d 	strb	r2, [r3, #13]
  117998:	ea00000b 	b	1179cc <dns_check_entry+0x1c0>
          } else {
            LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": timeout\n", entry->name));
            /* call specified callback function if provided */
            dns_call_found(i, NULL);
  11799c:	e55b300d 	ldrb	r3, [fp, #-13]
  1179a0:	e3a01000 	mov	r1, #0
  1179a4:	e1a00003 	mov	r0, r3
  1179a8:	ebfffec5 	bl	1174c4 <dns_call_found>
            /* flush this entry */
            entry->state = DNS_STATE_UNUSED;
  1179ac:	e51b3008 	ldr	r3, [fp, #-8]
  1179b0:	e3a02000 	mov	r2, #0
  1179b4:	e5c3200a 	strb	r2, [r3, #10]
            break;
  1179b8:	ea000027 	b	117a5c <dns_check_entry+0x250>
          }
        } else {
          /* wait longer for the next retry */
          entry->tmr = entry->retries;
  1179bc:	e51b3008 	ldr	r3, [fp, #-8]
  1179c0:	e5d3200d 	ldrb	r2, [r3, #13]
  1179c4:	e51b3008 	ldr	r3, [fp, #-8]
  1179c8:	e5c3200c 	strb	r2, [r3, #12]
        }

        /* send DNS packet for this entry */
        err = dns_send(i);
  1179cc:	e55b300d 	ldrb	r3, [fp, #-13]
  1179d0:	e1a00003 	mov	r0, r3
  1179d4:	ebfffd87 	bl	116ff8 <dns_send>
  1179d8:	e1a03000 	mov	r3, r0
  1179dc:	e54b3009 	strb	r3, [fp, #-9]
        if (err != ERR_OK) {
          LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                      ("dns_send returned error: %s\n", lwip_strerr(err)));
        }
      }
      break;
  1179e0:	ea00001a 	b	117a50 <dns_check_entry+0x244>
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
  1179e4:	e51b3008 	ldr	r3, [fp, #-8]
  1179e8:	e5933000 	ldr	r3, [r3]
  1179ec:	e3530000 	cmp	r3, #0
  1179f0:	0a000008 	beq	117a18 <dns_check_entry+0x20c>
  1179f4:	e51b3008 	ldr	r3, [fp, #-8]
  1179f8:	e5933000 	ldr	r3, [r3]
  1179fc:	e2432001 	sub	r2, r3, #1
  117a00:	e51b3008 	ldr	r3, [fp, #-8]
  117a04:	e5832000 	str	r2, [r3]
  117a08:	e51b3008 	ldr	r3, [fp, #-8]
  117a0c:	e5933000 	ldr	r3, [r3]
  117a10:	e3530000 	cmp	r3, #0
  117a14:	1a00000f 	bne	117a58 <dns_check_entry+0x24c>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
  117a18:	e51b3008 	ldr	r3, [fp, #-8]
  117a1c:	e3a02000 	mov	r2, #0
  117a20:	e5c3200a 	strb	r2, [r3, #10]
      }
      break;
  117a24:	ea00000b 	b	117a58 <dns_check_entry+0x24c>
    case DNS_STATE_UNUSED:
      /* nothing to do */
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
  117a28:	e30702ac 	movw	r0, #29356	; 0x72ac
  117a2c:	e3400014 	movt	r0, #20
  117a30:	ebffadb7 	bl	103114 <rt_kprintf>
  117a34:	e3001444 	movw	r1, #1092	; 0x444
  117a38:	e3070264 	movw	r0, #29284	; 0x7264
  117a3c:	e3400014 	movt	r0, #20
  117a40:	ebffcd87 	bl	10b064 <sys_arch_assert>
      break;
  117a44:	ea000004 	b	117a5c <dns_check_entry+0x250>
      break;
  117a48:	e320f000 	nop	{0}
  117a4c:	ea000002 	b	117a5c <dns_check_entry+0x250>
      break;
  117a50:	e320f000 	nop	{0}
  117a54:	ea000000 	b	117a5c <dns_check_entry+0x250>
      break;
  117a58:	e320f000 	nop	{0}
  }
}
  117a5c:	e320f000 	nop	{0}
  117a60:	e24bd004 	sub	sp, fp, #4
  117a64:	e8bd8800 	pop	{fp, pc}

00117a68 <dns_check_entries>:
/**
 * Call dns_check_entry for each entry in dns_table - check all entries.
 */
static void
dns_check_entries(void)
{
  117a68:	e92d4800 	push	{fp, lr}
  117a6c:	e28db004 	add	fp, sp, #4
  117a70:	e24dd008 	sub	sp, sp, #8
  u8_t i;

  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
  117a74:	e3a03000 	mov	r3, #0
  117a78:	e54b3005 	strb	r3, [fp, #-5]
  117a7c:	ea000005 	b	117a98 <dns_check_entries+0x30>
    dns_check_entry(i);
  117a80:	e55b3005 	ldrb	r3, [fp, #-5]
  117a84:	e1a00003 	mov	r0, r3
  117a88:	ebffff5f 	bl	11780c <dns_check_entry>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
  117a8c:	e55b3005 	ldrb	r3, [fp, #-5]
  117a90:	e2833001 	add	r3, r3, #1
  117a94:	e54b3005 	strb	r3, [fp, #-5]
  117a98:	e55b3005 	ldrb	r3, [fp, #-5]
  117a9c:	e3530003 	cmp	r3, #3
  117aa0:	9afffff6 	bls	117a80 <dns_check_entries+0x18>
  }
}
  117aa4:	e320f000 	nop	{0}
  117aa8:	e24bd004 	sub	sp, fp, #4
  117aac:	e8bd8800 	pop	{fp, pc}

00117ab0 <dns_correct_response>:
/**
 * Save TTL and call dns_call_found for correct response.
 */
static void
dns_correct_response(u8_t idx, u32_t ttl)
{
  117ab0:	e92d4800 	push	{fp, lr}
  117ab4:	e28db004 	add	fp, sp, #4
  117ab8:	e24dd010 	sub	sp, sp, #16
  117abc:	e1a03000 	mov	r3, r0
  117ac0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  117ac4:	e54b300d 	strb	r3, [fp, #-13]
  struct dns_table_entry *entry = &dns_table[idx];
  117ac8:	e55b300d 	ldrb	r3, [fp, #-13]
  117acc:	e3a02e11 	mov	r2, #272	; 0x110
  117ad0:	e0020392 	mul	r2, r2, r3
  117ad4:	e30e3c48 	movw	r3, #60488	; 0xec48
  117ad8:	e3403014 	movt	r3, #20
  117adc:	e0823003 	add	r3, r2, r3
  117ae0:	e50b3008 	str	r3, [fp, #-8]

  entry->state = DNS_STATE_DONE;
  117ae4:	e51b3008 	ldr	r3, [fp, #-8]
  117ae8:	e3a02003 	mov	r2, #3
  117aec:	e5c3200a 	strb	r2, [r3, #10]
  LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": response = ", entry->name));
  ip_addr_debug_print(DNS_DEBUG, (&(entry->ipaddr)));
  LWIP_DEBUGF(DNS_DEBUG, ("\n"));

  /* read the answer resource record's TTL, and maximize it if needed */
  entry->ttl = ttl;
  117af0:	e51b3008 	ldr	r3, [fp, #-8]
  117af4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  117af8:	e5832000 	str	r2, [r3]
  if (entry->ttl > DNS_MAX_TTL) {
  117afc:	e51b3008 	ldr	r3, [fp, #-8]
  117b00:	e5932000 	ldr	r2, [r3]
  117b04:	e3a03dea 	mov	r3, #14976	; 0x3a80
  117b08:	e3403009 	movt	r3, #9
  117b0c:	e1520003 	cmp	r2, r3
  117b10:	9a000003 	bls	117b24 <dns_correct_response+0x74>
    entry->ttl = DNS_MAX_TTL;
  117b14:	e51b2008 	ldr	r2, [fp, #-8]
  117b18:	e3a03dea 	mov	r3, #14976	; 0x3a80
  117b1c:	e3403009 	movt	r3, #9
  117b20:	e5823000 	str	r3, [r2]
  }
  dns_call_found(idx, &entry->ipaddr);
  117b24:	e51b3008 	ldr	r3, [fp, #-8]
  117b28:	e2832004 	add	r2, r3, #4
  117b2c:	e55b300d 	ldrb	r3, [fp, #-13]
  117b30:	e1a01002 	mov	r1, r2
  117b34:	e1a00003 	mov	r0, r3
  117b38:	ebfffe61 	bl	1174c4 <dns_call_found>

  if (entry->ttl == 0) {
  117b3c:	e51b3008 	ldr	r3, [fp, #-8]
  117b40:	e5933000 	ldr	r3, [r3]
  117b44:	e3530000 	cmp	r3, #0
  117b48:	1a000006 	bne	117b68 <dns_correct_response+0xb8>
    /* RFC 883, page 29: "Zero values are
       interpreted to mean that the RR can only be used for the
       transaction in progress, and should not be cached."
       -> flush this entry now */
    /* entry reused during callback? */
    if (entry->state == DNS_STATE_DONE) {
  117b4c:	e51b3008 	ldr	r3, [fp, #-8]
  117b50:	e5d3300a 	ldrb	r3, [r3, #10]
  117b54:	e3530003 	cmp	r3, #3
  117b58:	1a000002 	bne	117b68 <dns_correct_response+0xb8>
      entry->state = DNS_STATE_UNUSED;
  117b5c:	e51b3008 	ldr	r3, [fp, #-8]
  117b60:	e3a02000 	mov	r2, #0
  117b64:	e5c3200a 	strb	r2, [r3, #10]
    }
  }
}
  117b68:	e320f000 	nop	{0}
  117b6c:	e24bd004 	sub	sp, fp, #4
  117b70:	e8bd8800 	pop	{fp, pc}

00117b74 <dns_recv>:
/**
 * Receive input function for DNS response packets arriving for the dns UDP pcb.
 */
static void
dns_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
  117b74:	e92d4810 	push	{r4, fp, lr}
  117b78:	e28db008 	add	fp, sp, #8
  117b7c:	e24dd044 	sub	sp, sp, #68	; 0x44
  117b80:	e50b0040 	str	r0, [fp, #-64]	; 0xffffffc0
  117b84:	e50b1044 	str	r1, [fp, #-68]	; 0xffffffbc
  117b88:	e50b2048 	str	r2, [fp, #-72]	; 0xffffffb8
  117b8c:	e50b304c 	str	r3, [fp, #-76]	; 0xffffffb4
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(port);

  /* is the dns message big enough ? */
  if (p->tot_len < (SIZEOF_DNS_HDR + SIZEOF_DNS_QUERY)) {
  117b90:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
  117b94:	e1d330b8 	ldrh	r3, [r3, #8]
  117b98:	e353000f 	cmp	r3, #15
  117b9c:	9a0000c8 	bls	117ec4 <dns_recv+0x350>
    /* free pbuf and return */
    goto memerr;
  }

  /* copy dns payload inside static buffer for processing */
  if (pbuf_copy_partial(p, &hdr, SIZEOF_DNS_HDR, 0) == SIZEOF_DNS_HDR) {
  117ba0:	e24b1028 	sub	r1, fp, #40	; 0x28
  117ba4:	e3a03000 	mov	r3, #0
  117ba8:	e3a0200c 	mov	r2, #12
  117bac:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
  117bb0:	eb000f44 	bl	11b8c8 <pbuf_copy_partial>
  117bb4:	e1a03000 	mov	r3, r0
  117bb8:	e353000c 	cmp	r3, #12
  117bbc:	1a0000c2 	bne	117ecc <dns_recv+0x358>
    /* Match the ID in the DNS header with the name table. */
    txid = lwip_htons(hdr.id);
  117bc0:	e15b32b8 	ldrh	r3, [fp, #-40]	; 0xffffffd8
  117bc4:	e1a00003 	mov	r0, r3
  117bc8:	ebfffafc 	bl	1167c0 <lwip_htons>
  117bcc:	e1a03000 	mov	r3, r0
  117bd0:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
  117bd4:	e3a03000 	mov	r3, #0
  117bd8:	e54b300d 	strb	r3, [fp, #-13]
  117bdc:	ea0000b4 	b	117eb4 <dns_recv+0x340>
      const struct dns_table_entry *entry = &dns_table[i];
  117be0:	e55b300d 	ldrb	r3, [fp, #-13]
  117be4:	e3a02e11 	mov	r2, #272	; 0x110
  117be8:	e0020392 	mul	r2, r2, r3
  117bec:	e30e3c48 	movw	r3, #60488	; 0xec48
  117bf0:	e3403014 	movt	r3, #20
  117bf4:	e0823003 	add	r3, r2, r3
  117bf8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
      if ((entry->state == DNS_STATE_ASKING) &&
  117bfc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  117c00:	e5d3300a 	ldrb	r3, [r3, #10]
  117c04:	e3530002 	cmp	r3, #2
  117c08:	1a0000a6 	bne	117ea8 <dns_recv+0x334>
          (entry->txid == txid)) {
  117c0c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  117c10:	e1d330b8 	ldrh	r3, [r3, #8]
      if ((entry->state == DNS_STATE_ASKING) &&
  117c14:	e15b21b4 	ldrh	r2, [fp, #-20]	; 0xffffffec
  117c18:	e1520003 	cmp	r2, r3
  117c1c:	1a0000a1 	bne	117ea8 <dns_recv+0x334>

        /* We only care about the question(s) and the answers. The authrr
           and the extrarr are simply discarded. */
        nquestions = lwip_htons(hdr.numquestions);
  117c20:	e15b32b4 	ldrh	r3, [fp, #-36]	; 0xffffffdc
  117c24:	e1a00003 	mov	r0, r3
  117c28:	ebfffae4 	bl	1167c0 <lwip_htons>
  117c2c:	e1a03000 	mov	r3, r0
  117c30:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
        nanswers   = lwip_htons(hdr.numanswers);
  117c34:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  117c38:	e1a00003 	mov	r0, r3
  117c3c:	ebfffadf 	bl	1167c0 <lwip_htons>
  117c40:	e1a03000 	mov	r3, r0
  117c44:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee

        /* Check for correct response. */
        if ((hdr.flags1 & DNS_FLAG1_RESPONSE) == 0) {
  117c48:	e55b3026 	ldrb	r3, [fp, #-38]	; 0xffffffda
  117c4c:	e6af3073 	sxtb	r3, r3
  117c50:	e3530000 	cmp	r3, #0
  117c54:	aa00009e 	bge	117ed4 <dns_recv+0x360>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": not a response\n", entry->name));
          goto memerr; /* ignore this packet */
        }
        if (nquestions != 1) {
  117c58:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  117c5c:	e3530001 	cmp	r3, #1
  117c60:	1a00009d 	bne	117edc <dns_recv+0x368>
        if (!entry->is_mdns)
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
        {
          /* Check whether response comes from the same network address to which the
             question was sent. (RFC 5452) */
          if (!ip_addr_cmp(addr, &dns_servers[entry->server_idx])) {
  117c64:	e51b304c 	ldr	r3, [fp, #-76]	; 0xffffffb4
  117c68:	e5932000 	ldr	r2, [r3]
  117c6c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  117c70:	e5d3300b 	ldrb	r3, [r3, #11]
  117c74:	e1a01003 	mov	r1, r3
  117c78:	e30f30b8 	movw	r3, #61624	; 0xf0b8
  117c7c:	e3403014 	movt	r3, #20
  117c80:	e7933101 	ldr	r3, [r3, r1, lsl #2]
  117c84:	e1520003 	cmp	r2, r3
  117c88:	1a000095 	bne	117ee4 <dns_recv+0x370>
          }
        }

        /* Check if the name in the "question" part match with the name in the entry and
           skip it if equal. */
        res_idx = dns_compare_name(entry->name, p, SIZEOF_DNS_HDR);
  117c8c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  117c90:	e2833010 	add	r3, r3, #16
  117c94:	e3a0200c 	mov	r2, #12
  117c98:	e51b1048 	ldr	r1, [fp, #-72]	; 0xffffffb8
  117c9c:	e1a00003 	mov	r0, r3
  117ca0:	ebfffc4a 	bl	116dd0 <dns_compare_name>
  117ca4:	e1a03000 	mov	r3, r0
  117ca8:	e14b31b0 	strh	r3, [fp, #-16]
        if (res_idx == 0xFFFF) {
  117cac:	e15b31b0 	ldrh	r3, [fp, #-16]
  117cb0:	e30f2fff 	movw	r2, #65535	; 0xffff
  117cb4:	e1530002 	cmp	r3, r2
  117cb8:	0a00008b 	beq	117eec <dns_recv+0x378>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": response not match to query\n", entry->name));
          goto memerr; /* ignore this packet */
        }

        /* check if "question" part matches the request */
        if (pbuf_copy_partial(p, &qry, SIZEOF_DNS_QUERY, res_idx) != SIZEOF_DNS_QUERY) {
  117cbc:	e15b31b0 	ldrh	r3, [fp, #-16]
  117cc0:	e24b1038 	sub	r1, fp, #56	; 0x38
  117cc4:	e3a02004 	mov	r2, #4
  117cc8:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
  117ccc:	eb000efd 	bl	11b8c8 <pbuf_copy_partial>
  117cd0:	e1a03000 	mov	r3, r0
  117cd4:	e3530004 	cmp	r3, #4
  117cd8:	1a000085 	bne	117ef4 <dns_recv+0x380>
          goto memerr; /* ignore this packet */
        }
        if ((qry.cls != PP_HTONS(DNS_RRCLASS_IN)) ||
  117cdc:	e15b33b6 	ldrh	r3, [fp, #-54]	; 0xffffffca
  117ce0:	e3530c01 	cmp	r3, #256	; 0x100
  117ce4:	1a000078 	bne	117ecc <dns_recv+0x358>
          (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_AAAA))) ||
          (!LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_A)))) {
  117ce8:	e15b33b8 	ldrh	r3, [fp, #-56]	; 0xffffffc8
          (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_AAAA))) ||
  117cec:	e3530c01 	cmp	r3, #256	; 0x100
  117cf0:	1a000075 	bne	117ecc <dns_recv+0x358>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": response not match to query\n", entry->name));
          goto memerr; /* ignore this packet */
        }
        /* skip the rest of the "question" part */
        res_idx += SIZEOF_DNS_QUERY;
  117cf4:	e15b31b0 	ldrh	r3, [fp, #-16]
  117cf8:	e2833004 	add	r3, r3, #4
  117cfc:	e14b31b0 	strh	r3, [fp, #-16]

        /* Check for error. If so, call callback to inform. */
        if (hdr.flags2 & DNS_FLAG2_ERR_MASK) {
  117d00:	e55b3025 	ldrb	r3, [fp, #-37]	; 0xffffffdb
  117d04:	e203300f 	and	r3, r3, #15
  117d08:	e3530000 	cmp	r3, #0
  117d0c:	1a000055 	bne	117e68 <dns_recv+0x2f4>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": error in flags\n", entry->name));
        } else {
          while ((nanswers > 0) && (res_idx < p->tot_len)) {
  117d10:	ea00004c 	b	117e48 <dns_recv+0x2d4>
            /* skip answer resource record's host name */
            res_idx = dns_skip_name(p, res_idx);
  117d14:	e15b31b0 	ldrh	r3, [fp, #-16]
  117d18:	e1a01003 	mov	r1, r3
  117d1c:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
  117d20:	ebfffc79 	bl	116f0c <dns_skip_name>
  117d24:	e1a03000 	mov	r3, r0
  117d28:	e14b31b0 	strh	r3, [fp, #-16]
            if (res_idx == 0xFFFF) {
  117d2c:	e15b31b0 	ldrh	r3, [fp, #-16]
  117d30:	e30f2fff 	movw	r2, #65535	; 0xffff
  117d34:	e1530002 	cmp	r3, r2
  117d38:	0a00006f 	beq	117efc <dns_recv+0x388>
              goto memerr; /* ignore this packet */
            }

            /* Check for IP address type and Internet class. Others are discarded. */
            if (pbuf_copy_partial(p, &ans, SIZEOF_DNS_ANSWER, res_idx) != SIZEOF_DNS_ANSWER) {
  117d3c:	e15b31b0 	ldrh	r3, [fp, #-16]
  117d40:	e24b1034 	sub	r1, fp, #52	; 0x34
  117d44:	e3a0200a 	mov	r2, #10
  117d48:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
  117d4c:	eb000edd 	bl	11b8c8 <pbuf_copy_partial>
  117d50:	e1a03000 	mov	r3, r0
  117d54:	e353000a 	cmp	r3, #10
  117d58:	1a000069 	bne	117f04 <dns_recv+0x390>
              goto memerr; /* ignore this packet */
            }
            res_idx += SIZEOF_DNS_ANSWER;
  117d5c:	e15b31b0 	ldrh	r3, [fp, #-16]
  117d60:	e283300a 	add	r3, r3, #10
  117d64:	e14b31b0 	strh	r3, [fp, #-16]

            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
  117d68:	e15b33b2 	ldrh	r3, [fp, #-50]	; 0xffffffce
  117d6c:	e3530c01 	cmp	r3, #256	; 0x100
  117d70:	1a000021 	bne	117dfc <dns_recv+0x288>
#if LWIP_IPV4
              if ((ans.type == PP_HTONS(DNS_RRTYPE_A)) && (ans.len == PP_HTONS(sizeof(ip4_addr_t)))) {
  117d74:	e15b33b4 	ldrh	r3, [fp, #-52]	; 0xffffffcc
  117d78:	e3530c01 	cmp	r3, #256	; 0x100
  117d7c:	1a00001e 	bne	117dfc <dns_recv+0x288>
  117d80:	e15b32bc 	ldrh	r3, [fp, #-44]	; 0xffffffd4
  117d84:	e3530b01 	cmp	r3, #1024	; 0x400
  117d88:	1a00001b 	bne	117dfc <dns_recv+0x288>
                if (!LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
                {
                  ip4_addr_t ip4addr;
                  /* read the IP address after answer resource record's header */
                  if (pbuf_copy_partial(p, &ip4addr, sizeof(ip4_addr_t), res_idx) != sizeof(ip4_addr_t)) {
  117d8c:	e15b31b0 	ldrh	r3, [fp, #-16]
  117d90:	e24b103c 	sub	r1, fp, #60	; 0x3c
  117d94:	e3a02004 	mov	r2, #4
  117d98:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
  117d9c:	eb000ec9 	bl	11b8c8 <pbuf_copy_partial>
  117da0:	e1a03000 	mov	r3, r0
  117da4:	e3530004 	cmp	r3, #4
  117da8:	1a000057 	bne	117f0c <dns_recv+0x398>
                    goto memerr; /* ignore this packet */
                  }
                  ip_addr_copy_from_ip4(dns_table[i].ipaddr, ip4addr);
  117dac:	e55b100d 	ldrb	r1, [fp, #-13]
  117db0:	e51b203c 	ldr	r2, [fp, #-60]	; 0xffffffc4
  117db4:	e30e3c48 	movw	r3, #60488	; 0xec48
  117db8:	e3403014 	movt	r3, #20
  117dbc:	e3a00e11 	mov	r0, #272	; 0x110
  117dc0:	e0010190 	mul	r1, r0, r1
  117dc4:	e0833001 	add	r3, r3, r1
  117dc8:	e2833004 	add	r3, r3, #4
  117dcc:	e5832000 	str	r2, [r3]
                  pbuf_free(p);
  117dd0:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
  117dd4:	eb000cb0 	bl	11b09c <pbuf_free>
                  /* handle correct response */
                  dns_correct_response(i, lwip_ntohl(ans.ttl));
  117dd8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  117ddc:	e1a00003 	mov	r0, r3
  117de0:	ebfffa82 	bl	1167f0 <lwip_htonl>
  117de4:	e1a02000 	mov	r2, r0
  117de8:	e55b300d 	ldrb	r3, [fp, #-13]
  117dec:	e1a01002 	mov	r1, r2
  117df0:	e1a00003 	mov	r0, r3
  117df4:	ebffff2d 	bl	117ab0 <dns_correct_response>
  117df8:	ea000049 	b	117f24 <dns_recv+0x3b0>
                }
              }
#endif /* LWIP_IPV6 */
            }
            /* skip this answer */
            if ((int)(res_idx + lwip_htons(ans.len)) > 0xFFFF) {
  117dfc:	e15b41b0 	ldrh	r4, [fp, #-16]
  117e00:	e15b32bc 	ldrh	r3, [fp, #-44]	; 0xffffffd4
  117e04:	e1a00003 	mov	r0, r3
  117e08:	ebfffa6c 	bl	1167c0 <lwip_htons>
  117e0c:	e1a03000 	mov	r3, r0
  117e10:	e0843003 	add	r3, r4, r3
  117e14:	e3530801 	cmp	r3, #65536	; 0x10000
  117e18:	aa00003d 	bge	117f14 <dns_recv+0x3a0>
              goto memerr; /* ignore this packet */
            }
            res_idx += lwip_htons(ans.len);
  117e1c:	e15b32bc 	ldrh	r3, [fp, #-44]	; 0xffffffd4
  117e20:	e1a00003 	mov	r0, r3
  117e24:	ebfffa65 	bl	1167c0 <lwip_htons>
  117e28:	e1a03000 	mov	r3, r0
  117e2c:	e1a02003 	mov	r2, r3
  117e30:	e15b31b0 	ldrh	r3, [fp, #-16]
  117e34:	e0823003 	add	r3, r2, r3
  117e38:	e14b31b0 	strh	r3, [fp, #-16]
            --nanswers;
  117e3c:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  117e40:	e2433001 	sub	r3, r3, #1
  117e44:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
          while ((nanswers > 0) && (res_idx < p->tot_len)) {
  117e48:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  117e4c:	e3530000 	cmp	r3, #0
  117e50:	0a000004 	beq	117e68 <dns_recv+0x2f4>
  117e54:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
  117e58:	e1d330b8 	ldrh	r3, [r3, #8]
  117e5c:	e15b21b0 	ldrh	r2, [fp, #-16]
  117e60:	e1520003 	cmp	r2, r3
  117e64:	3affffaa 	bcc	117d14 <dns_recv+0x1a0>
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": error in response\n", entry->name));
        }
        /* call callback to indicate error, clean up memory and return */
        pbuf_free(p);
  117e68:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
  117e6c:	eb000c8a 	bl	11b09c <pbuf_free>
        dns_call_found(i, NULL);
  117e70:	e55b300d 	ldrb	r3, [fp, #-13]
  117e74:	e3a01000 	mov	r1, #0
  117e78:	e1a00003 	mov	r0, r3
  117e7c:	ebfffd90 	bl	1174c4 <dns_call_found>
        dns_table[i].state = DNS_STATE_UNUSED;
  117e80:	e55b200d 	ldrb	r2, [fp, #-13]
  117e84:	e30e3c48 	movw	r3, #60488	; 0xec48
  117e88:	e3403014 	movt	r3, #20
  117e8c:	e3a01e11 	mov	r1, #272	; 0x110
  117e90:	e0020291 	mul	r2, r1, r2
  117e94:	e0833002 	add	r3, r3, r2
  117e98:	e283300a 	add	r3, r3, #10
  117e9c:	e3a02000 	mov	r2, #0
  117ea0:	e5c32000 	strb	r2, [r3]
        return;
  117ea4:	ea00001e 	b	117f24 <dns_recv+0x3b0>
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
  117ea8:	e55b300d 	ldrb	r3, [fp, #-13]
  117eac:	e2833001 	add	r3, r3, #1
  117eb0:	e54b300d 	strb	r3, [fp, #-13]
  117eb4:	e55b300d 	ldrb	r3, [fp, #-13]
  117eb8:	e3530003 	cmp	r3, #3
  117ebc:	9affff47 	bls	117be0 <dns_recv+0x6c>
      }
    }
  }

memerr:
  117ec0:	ea000001 	b	117ecc <dns_recv+0x358>
    goto memerr;
  117ec4:	e320f000 	nop	{0}
  117ec8:	ea000012 	b	117f18 <dns_recv+0x3a4>
memerr:
  117ecc:	e320f000 	nop	{0}
  117ed0:	ea000010 	b	117f18 <dns_recv+0x3a4>
          goto memerr; /* ignore this packet */
  117ed4:	e320f000 	nop	{0}
  117ed8:	ea00000e 	b	117f18 <dns_recv+0x3a4>
          goto memerr; /* ignore this packet */
  117edc:	e320f000 	nop	{0}
  117ee0:	ea00000c 	b	117f18 <dns_recv+0x3a4>
            goto memerr; /* ignore this packet */
  117ee4:	e320f000 	nop	{0}
  117ee8:	ea00000a 	b	117f18 <dns_recv+0x3a4>
          goto memerr; /* ignore this packet */
  117eec:	e320f000 	nop	{0}
  117ef0:	ea000008 	b	117f18 <dns_recv+0x3a4>
          goto memerr; /* ignore this packet */
  117ef4:	e320f000 	nop	{0}
  117ef8:	ea000006 	b	117f18 <dns_recv+0x3a4>
              goto memerr; /* ignore this packet */
  117efc:	e320f000 	nop	{0}
  117f00:	ea000004 	b	117f18 <dns_recv+0x3a4>
              goto memerr; /* ignore this packet */
  117f04:	e320f000 	nop	{0}
  117f08:	ea000002 	b	117f18 <dns_recv+0x3a4>
                    goto memerr; /* ignore this packet */
  117f0c:	e320f000 	nop	{0}
  117f10:	ea000000 	b	117f18 <dns_recv+0x3a4>
              goto memerr; /* ignore this packet */
  117f14:	e320f000 	nop	{0}
  /* deallocate memory and return */
  pbuf_free(p);
  117f18:	e51b0048 	ldr	r0, [fp, #-72]	; 0xffffffb8
  117f1c:	eb000c5e 	bl	11b09c <pbuf_free>
  return;
  117f20:	e320f000 	nop	{0}
}
  117f24:	e24bd008 	sub	sp, fp, #8
  117f28:	e8bd8810 	pop	{r4, fp, pc}

00117f2c <dns_enqueue>:
 * @return err_t return code.
 */
static err_t
dns_enqueue(const char *name, size_t hostnamelen, dns_found_callback found,
            void *callback_arg LWIP_DNS_ADDRTYPE_ARG(u8_t dns_addrtype) LWIP_DNS_ISMDNS_ARG(u8_t is_mdns))
{
  117f2c:	e92d4800 	push	{fp, lr}
  117f30:	e28db004 	add	fp, sp, #4
  117f34:	e24dd028 	sub	sp, sp, #40	; 0x28
  117f38:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  117f3c:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  117f40:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  117f44:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
  u8_t i;
  u8_t lseq, lseqi;
  struct dns_table_entry *entry = NULL;
  117f48:	e3a03000 	mov	r3, #0
  117f4c:	e50b300c 	str	r3, [fp, #-12]
  struct dns_req_entry* req;

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  u8_t r;
  /* check for duplicate entries */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
  117f50:	e3a03000 	mov	r3, #0
  117f54:	e54b3005 	strb	r3, [fp, #-5]
  117f58:	ea000048 	b	118080 <dns_enqueue+0x154>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
  117f5c:	e55b2005 	ldrb	r2, [fp, #-5]
  117f60:	e30e3c48 	movw	r3, #60488	; 0xec48
  117f64:	e3403014 	movt	r3, #20
  117f68:	e3a01e11 	mov	r1, #272	; 0x110
  117f6c:	e0020291 	mul	r2, r1, r2
  117f70:	e0833002 	add	r3, r3, r2
  117f74:	e283300a 	add	r3, r3, #10
  117f78:	e5d33000 	ldrb	r3, [r3]
  117f7c:	e3530002 	cmp	r3, #2
  117f80:	1a00003b 	bne	118074 <dns_enqueue+0x148>
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0)) {
  117f84:	e55b3005 	ldrb	r3, [fp, #-5]
  117f88:	e3a02e11 	mov	r2, #272	; 0x110
  117f8c:	e0030392 	mul	r3, r2, r3
  117f90:	e2832010 	add	r2, r3, #16
  117f94:	e30e3c48 	movw	r3, #60488	; 0xec48
  117f98:	e3403014 	movt	r3, #20
  117f9c:	e0823003 	add	r3, r2, r3
  117fa0:	e3a02c01 	mov	r2, #256	; 0x100
  117fa4:	e1a01003 	mov	r1, r3
  117fa8:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  117fac:	ebfffa87 	bl	1169d0 <lwip_strnicmp>
  117fb0:	e1a03000 	mov	r3, r0
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
  117fb4:	e3530000 	cmp	r3, #0
  117fb8:	1a00002d 	bne	118074 <dns_enqueue+0x148>
           for the same host should not be that common */
        continue;
      }
#endif /* LWIP_IPV4 && LWIP_IPV6 */
      /* this is a duplicate entry, find a free request entry */
      for (r = 0; r < DNS_MAX_REQUESTS; r++) {
  117fbc:	e3a03000 	mov	r3, #0
  117fc0:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  117fc4:	ea000027 	b	118068 <dns_enqueue+0x13c>
        if (dns_requests[r].found == 0) {
  117fc8:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  117fcc:	e30f3088 	movw	r3, #61576	; 0xf088
  117fd0:	e3403014 	movt	r3, #20
  117fd4:	e3a0100c 	mov	r1, #12
  117fd8:	e0020291 	mul	r2, r1, r2
  117fdc:	e0833002 	add	r3, r3, r2
  117fe0:	e5933000 	ldr	r3, [r3]
  117fe4:	e3530000 	cmp	r3, #0
  117fe8:	1a00001b 	bne	11805c <dns_enqueue+0x130>
          dns_requests[r].found = found;
  117fec:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  117ff0:	e30f3088 	movw	r3, #61576	; 0xf088
  117ff4:	e3403014 	movt	r3, #20
  117ff8:	e3a0100c 	mov	r1, #12
  117ffc:	e0020291 	mul	r2, r1, r2
  118000:	e0833002 	add	r3, r3, r2
  118004:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  118008:	e5832000 	str	r2, [r3]
          dns_requests[r].arg = callback_arg;
  11800c:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  118010:	e30f3088 	movw	r3, #61576	; 0xf088
  118014:	e3403014 	movt	r3, #20
  118018:	e3a0100c 	mov	r1, #12
  11801c:	e0020291 	mul	r2, r1, r2
  118020:	e0833002 	add	r3, r3, r2
  118024:	e2833004 	add	r3, r3, #4
  118028:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  11802c:	e5832000 	str	r2, [r3]
          dns_requests[r].dns_table_idx = i;
  118030:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  118034:	e30f3088 	movw	r3, #61576	; 0xf088
  118038:	e3403014 	movt	r3, #20
  11803c:	e3a0100c 	mov	r1, #12
  118040:	e0020291 	mul	r2, r1, r2
  118044:	e0833002 	add	r3, r3, r2
  118048:	e2833008 	add	r3, r3, #8
  11804c:	e55b2005 	ldrb	r2, [fp, #-5]
  118050:	e5c32000 	strb	r2, [r3]
          LWIP_DNS_SET_ADDRTYPE(dns_requests[r].reqaddrtype, dns_addrtype);
          LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": duplicate request\n", name));
          return ERR_INPROGRESS;
  118054:	e3e03004 	mvn	r3, #4
  118058:	ea0000b3 	b	11832c <dns_enqueue+0x400>
      for (r = 0; r < DNS_MAX_REQUESTS; r++) {
  11805c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  118060:	e2833001 	add	r3, r3, #1
  118064:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  118068:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  11806c:	e3530003 	cmp	r3, #3
  118070:	9affffd4 	bls	117fc8 <dns_enqueue+0x9c>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
  118074:	e55b3005 	ldrb	r3, [fp, #-5]
  118078:	e2833001 	add	r3, r3, #1
  11807c:	e54b3005 	strb	r3, [fp, #-5]
  118080:	e55b3005 	ldrb	r3, [fp, #-5]
  118084:	e3530003 	cmp	r3, #3
  118088:	9affffb3 	bls	117f5c <dns_enqueue+0x30>
  }
  /* no duplicate entries found */
#endif

  /* search an unused entry, or the oldest one */
  lseq = 0;
  11808c:	e3a03000 	mov	r3, #0
  118090:	e54b3006 	strb	r3, [fp, #-6]
  lseqi = DNS_TABLE_SIZE;
  118094:	e3a03004 	mov	r3, #4
  118098:	e54b3007 	strb	r3, [fp, #-7]
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
  11809c:	e3a03000 	mov	r3, #0
  1180a0:	e54b3005 	strb	r3, [fp, #-5]
  1180a4:	ea000020 	b	11812c <dns_enqueue+0x200>
    entry = &dns_table[i];
  1180a8:	e55b3005 	ldrb	r3, [fp, #-5]
  1180ac:	e3a02e11 	mov	r2, #272	; 0x110
  1180b0:	e0020392 	mul	r2, r2, r3
  1180b4:	e30e3c48 	movw	r3, #60488	; 0xec48
  1180b8:	e3403014 	movt	r3, #20
  1180bc:	e0823003 	add	r3, r2, r3
  1180c0:	e50b300c 	str	r3, [fp, #-12]
    /* is it an unused entry ? */
    if (entry->state == DNS_STATE_UNUSED) {
  1180c4:	e51b300c 	ldr	r3, [fp, #-12]
  1180c8:	e5d3300a 	ldrb	r3, [r3, #10]
  1180cc:	e3530000 	cmp	r3, #0
  1180d0:	0a000019 	beq	11813c <dns_enqueue+0x210>
      break;
    }
    /* check if this is the oldest completed entry */
    if (entry->state == DNS_STATE_DONE) {
  1180d4:	e51b300c 	ldr	r3, [fp, #-12]
  1180d8:	e5d3300a 	ldrb	r3, [r3, #10]
  1180dc:	e3530003 	cmp	r3, #3
  1180e0:	1a00000e 	bne	118120 <dns_enqueue+0x1f4>
      u8_t age = dns_seqno - entry->seqno;
  1180e4:	e30e3c45 	movw	r3, #60485	; 0xec45
  1180e8:	e3403014 	movt	r3, #20
  1180ec:	e5d32000 	ldrb	r2, [r3]
  1180f0:	e51b300c 	ldr	r3, [fp, #-12]
  1180f4:	e5d3300e 	ldrb	r3, [r3, #14]
  1180f8:	e0423003 	sub	r3, r2, r3
  1180fc:	e54b3012 	strb	r3, [fp, #-18]	; 0xffffffee
      if (age > lseq) {
  118100:	e55b2012 	ldrb	r2, [fp, #-18]	; 0xffffffee
  118104:	e55b3006 	ldrb	r3, [fp, #-6]
  118108:	e1520003 	cmp	r2, r3
  11810c:	9a000003 	bls	118120 <dns_enqueue+0x1f4>
        lseq = age;
  118110:	e55b3012 	ldrb	r3, [fp, #-18]	; 0xffffffee
  118114:	e54b3006 	strb	r3, [fp, #-6]
        lseqi = i;
  118118:	e55b3005 	ldrb	r3, [fp, #-5]
  11811c:	e54b3007 	strb	r3, [fp, #-7]
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
  118120:	e55b3005 	ldrb	r3, [fp, #-5]
  118124:	e2833001 	add	r3, r3, #1
  118128:	e54b3005 	strb	r3, [fp, #-5]
  11812c:	e55b3005 	ldrb	r3, [fp, #-5]
  118130:	e3530003 	cmp	r3, #3
  118134:	9affffdb 	bls	1180a8 <dns_enqueue+0x17c>
  118138:	ea000000 	b	118140 <dns_enqueue+0x214>
      break;
  11813c:	e320f000 	nop	{0}
      }
    }
  }

  /* if we don't have found an unused entry, use the oldest completed one */
  if (i == DNS_TABLE_SIZE) {
  118140:	e55b3005 	ldrb	r3, [fp, #-5]
  118144:	e3530004 	cmp	r3, #4
  118148:	1a000017 	bne	1181ac <dns_enqueue+0x280>
    if ((lseqi >= DNS_TABLE_SIZE) || (dns_table[lseqi].state != DNS_STATE_DONE)) {
  11814c:	e55b3007 	ldrb	r3, [fp, #-7]
  118150:	e3530003 	cmp	r3, #3
  118154:	8a000009 	bhi	118180 <dns_enqueue+0x254>
  118158:	e55b2007 	ldrb	r2, [fp, #-7]
  11815c:	e30e3c48 	movw	r3, #60488	; 0xec48
  118160:	e3403014 	movt	r3, #20
  118164:	e3a01e11 	mov	r1, #272	; 0x110
  118168:	e0020291 	mul	r2, r1, r2
  11816c:	e0833002 	add	r3, r3, r2
  118170:	e283300a 	add	r3, r3, #10
  118174:	e5d33000 	ldrb	r3, [r3]
  118178:	e3530003 	cmp	r3, #3
  11817c:	0a000001 	beq	118188 <dns_enqueue+0x25c>
      /* no entry can be used now, table is full */
      LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": DNS entries table is full\n", name));
      return ERR_MEM;
  118180:	e3e03000 	mvn	r3, #0
  118184:	ea000068 	b	11832c <dns_enqueue+0x400>
    } else {
      /* use the oldest completed one */
      i = lseqi;
  118188:	e55b3007 	ldrb	r3, [fp, #-7]
  11818c:	e54b3005 	strb	r3, [fp, #-5]
      entry = &dns_table[i];
  118190:	e55b3005 	ldrb	r3, [fp, #-5]
  118194:	e3a02e11 	mov	r2, #272	; 0x110
  118198:	e0020392 	mul	r2, r2, r3
  11819c:	e30e3c48 	movw	r3, #60488	; 0xec48
  1181a0:	e3403014 	movt	r3, #20
  1181a4:	e0823003 	add	r3, r2, r3
  1181a8:	e50b300c 	str	r3, [fp, #-12]
    }
  }

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  /* find a free request entry */
  req = NULL;
  1181ac:	e3a03000 	mov	r3, #0
  1181b0:	e50b3010 	str	r3, [fp, #-16]
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
  1181b4:	e3a03000 	mov	r3, #0
  1181b8:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  1181bc:	ea000013 	b	118210 <dns_enqueue+0x2e4>
    if (dns_requests[r].found == NULL) {
  1181c0:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  1181c4:	e30f3088 	movw	r3, #61576	; 0xf088
  1181c8:	e3403014 	movt	r3, #20
  1181cc:	e3a0100c 	mov	r1, #12
  1181d0:	e0020291 	mul	r2, r1, r2
  1181d4:	e0833002 	add	r3, r3, r2
  1181d8:	e5933000 	ldr	r3, [r3]
  1181dc:	e3530000 	cmp	r3, #0
  1181e0:	1a000007 	bne	118204 <dns_enqueue+0x2d8>
      req = &dns_requests[r];
  1181e4:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  1181e8:	e3a0200c 	mov	r2, #12
  1181ec:	e0020392 	mul	r2, r2, r3
  1181f0:	e30f3088 	movw	r3, #61576	; 0xf088
  1181f4:	e3403014 	movt	r3, #20
  1181f8:	e0823003 	add	r3, r2, r3
  1181fc:	e50b3010 	str	r3, [fp, #-16]
      break;
  118200:	ea000005 	b	11821c <dns_enqueue+0x2f0>
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
  118204:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  118208:	e2833001 	add	r3, r3, #1
  11820c:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  118210:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  118214:	e3530003 	cmp	r3, #3
  118218:	9affffe8 	bls	1181c0 <dns_enqueue+0x294>
    }
  }
  if (req == NULL) {
  11821c:	e51b3010 	ldr	r3, [fp, #-16]
  118220:	e3530000 	cmp	r3, #0
  118224:	1a000001 	bne	118230 <dns_enqueue+0x304>
    /* no request entry can be used now, table is full */
    LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": DNS request entries table is full\n", name));
    return ERR_MEM;
  118228:	e3e03000 	mvn	r3, #0
  11822c:	ea00003e 	b	11832c <dns_enqueue+0x400>
  }
  req->dns_table_idx = i;
  118230:	e51b3010 	ldr	r3, [fp, #-16]
  118234:	e55b2005 	ldrb	r2, [fp, #-5]
  118238:	e5c32008 	strb	r2, [r3, #8]

  /* use this entry */
  LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": use DNS entry %"U16_F"\n", name, (u16_t)(i)));

  /* fill the entry */
  entry->state = DNS_STATE_NEW;
  11823c:	e51b300c 	ldr	r3, [fp, #-12]
  118240:	e3a02001 	mov	r2, #1
  118244:	e5c3200a 	strb	r2, [r3, #10]
  entry->seqno = dns_seqno;
  118248:	e30e3c45 	movw	r3, #60485	; 0xec45
  11824c:	e3403014 	movt	r3, #20
  118250:	e5d32000 	ldrb	r2, [r3]
  118254:	e51b300c 	ldr	r3, [fp, #-12]
  118258:	e5c3200e 	strb	r2, [r3, #14]
  LWIP_DNS_SET_ADDRTYPE(entry->reqaddrtype, dns_addrtype);
  LWIP_DNS_SET_ADDRTYPE(req->reqaddrtype, dns_addrtype);
  req->found = found;
  11825c:	e51b3010 	ldr	r3, [fp, #-16]
  118260:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  118264:	e5832000 	str	r2, [r3]
  req->arg   = callback_arg;
  118268:	e51b3010 	ldr	r3, [fp, #-16]
  11826c:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  118270:	e5832004 	str	r2, [r3, #4]
  namelen = LWIP_MIN(hostnamelen, DNS_MAX_NAME_LENGTH-1);
  118274:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  118278:	e35300ff 	cmp	r3, #255	; 0xff
  11827c:	31a03003 	movcc	r3, r3
  118280:	23a030ff 	movcs	r3, #255	; 0xff
  118284:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  MEMCPY(entry->name, name, namelen);
  118288:	e51b300c 	ldr	r3, [fp, #-12]
  11828c:	e2833010 	add	r3, r3, #16
  118290:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  118294:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  118298:	e1a00003 	mov	r0, r3
  11829c:	eb00a336 	bl	140f7c <memcpy>
  entry->name[namelen] = 0;
  1182a0:	e51b200c 	ldr	r2, [fp, #-12]
  1182a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1182a8:	e0823003 	add	r3, r2, r3
  1182ac:	e2833010 	add	r3, r3, #16
  1182b0:	e3a02000 	mov	r2, #0
  1182b4:	e5c32000 	strb	r2, [r3]

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  entry->pcb_idx = dns_alloc_pcb();
  1182b8:	ebfffc32 	bl	117388 <dns_alloc_pcb>
  1182bc:	e1a03000 	mov	r3, r0
  1182c0:	e1a02003 	mov	r2, r3
  1182c4:	e51b300c 	ldr	r3, [fp, #-12]
  1182c8:	e5c3200f 	strb	r2, [r3, #15]
  if (entry->pcb_idx >= DNS_MAX_SOURCE_PORTS) {
  1182cc:	e51b300c 	ldr	r3, [fp, #-12]
  1182d0:	e5d3300f 	ldrb	r3, [r3, #15]
  1182d4:	e3530003 	cmp	r3, #3
  1182d8:	9a000007 	bls	1182fc <dns_enqueue+0x3d0>
    /* failed to get a UDP pcb */
    LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": failed to allocate a pcb\n", name));
    entry->state = DNS_STATE_UNUSED;
  1182dc:	e51b300c 	ldr	r3, [fp, #-12]
  1182e0:	e3a02000 	mov	r2, #0
  1182e4:	e5c3200a 	strb	r2, [r3, #10]
    req->found = NULL;
  1182e8:	e51b3010 	ldr	r3, [fp, #-16]
  1182ec:	e3a02000 	mov	r2, #0
  1182f0:	e5832000 	str	r2, [r3]
    return ERR_MEM;
  1182f4:	e3e03000 	mvn	r3, #0
  1182f8:	ea00000b 	b	11832c <dns_enqueue+0x400>

#if LWIP_DNS_SUPPORT_MDNS_QUERIES
  entry->is_mdns = is_mdns;
#endif

  dns_seqno++;
  1182fc:	e30e3c45 	movw	r3, #60485	; 0xec45
  118300:	e3403014 	movt	r3, #20
  118304:	e5d33000 	ldrb	r3, [r3]
  118308:	e2833001 	add	r3, r3, #1
  11830c:	e6ef2073 	uxtb	r2, r3
  118310:	e30e3c45 	movw	r3, #60485	; 0xec45
  118314:	e3403014 	movt	r3, #20
  118318:	e5c32000 	strb	r2, [r3]

  /* force to send query without waiting timer */
  dns_check_entry(i);
  11831c:	e55b3005 	ldrb	r3, [fp, #-5]
  118320:	e1a00003 	mov	r0, r3
  118324:	ebfffd38 	bl	11780c <dns_check_entry>

  /* dns query is enqueued */
  return ERR_INPROGRESS;
  118328:	e3e03004 	mvn	r3, #4
}
  11832c:	e1a00003 	mov	r0, r3
  118330:	e24bd004 	sub	sp, fp, #4
  118334:	e8bd8800 	pop	{fp, pc}

00118338 <dns_gethostbyname>:
 * @return a err_t return code.
 */
err_t
dns_gethostbyname(const char *hostname, ip_addr_t *addr, dns_found_callback found,
                  void *callback_arg)
{
  118338:	e92d4800 	push	{fp, lr}
  11833c:	e28db004 	add	fp, sp, #4
  118340:	e24dd018 	sub	sp, sp, #24
  118344:	e50b0008 	str	r0, [fp, #-8]
  118348:	e50b100c 	str	r1, [fp, #-12]
  11834c:	e50b2010 	str	r2, [fp, #-16]
  118350:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  return dns_gethostbyname_addrtype(hostname, addr, found, callback_arg, LWIP_DNS_ADDRTYPE_DEFAULT);
  118354:	e3a03000 	mov	r3, #0
  118358:	e58d3000 	str	r3, [sp]
  11835c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  118360:	e51b2010 	ldr	r2, [fp, #-16]
  118364:	e51b100c 	ldr	r1, [fp, #-12]
  118368:	e51b0008 	ldr	r0, [fp, #-8]
  11836c:	eb000003 	bl	118380 <dns_gethostbyname_addrtype>
  118370:	e1a03000 	mov	r3, r0
}
  118374:	e1a00003 	mov	r0, r3
  118378:	e24bd004 	sub	sp, fp, #4
  11837c:	e8bd8800 	pop	{fp, pc}

00118380 <dns_gethostbyname_addrtype>:
 *                     - LWIP_DNS_ADDRTYPE_IPV6: try to resolve IPv6 only
 */
err_t
dns_gethostbyname_addrtype(const char *hostname, ip_addr_t *addr, dns_found_callback found,
                           void *callback_arg, u8_t dns_addrtype)
{
  118380:	e92d4800 	push	{fp, lr}
  118384:	e28db004 	add	fp, sp, #4
  118388:	e24dd018 	sub	sp, sp, #24
  11838c:	e50b0010 	str	r0, [fp, #-16]
  118390:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  118394:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  118398:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
  u8_t is_mdns;
#endif
  /* not initialized or no valid server yet, or invalid addr pointer
   * or invalid hostname or invalid hostname length */
  if ((addr == NULL) ||
  11839c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1183a0:	e3530000 	cmp	r3, #0
  1183a4:	0a000006 	beq	1183c4 <dns_gethostbyname_addrtype+0x44>
  1183a8:	e51b3010 	ldr	r3, [fp, #-16]
  1183ac:	e3530000 	cmp	r3, #0
  1183b0:	0a000003 	beq	1183c4 <dns_gethostbyname_addrtype+0x44>
      (!hostname) || (!hostname[0])) {
  1183b4:	e51b3010 	ldr	r3, [fp, #-16]
  1183b8:	e5d33000 	ldrb	r3, [r3]
  1183bc:	e3530000 	cmp	r3, #0
  1183c0:	1a000001 	bne	1183cc <dns_gethostbyname_addrtype+0x4c>
    return ERR_ARG;
  1183c4:	e3e0300f 	mvn	r3, #15
  1183c8:	ea000024 	b	118460 <dns_gethostbyname_addrtype+0xe0>
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) == 0)
  if (dns_pcbs[0] == NULL) {
    return ERR_ARG;
  }
#endif
  hostnamelen = strlen(hostname);
  1183cc:	e51b0010 	ldr	r0, [fp, #-16]
  1183d0:	eb00a4b2 	bl	1416a0 <strlen>
  1183d4:	e50b0008 	str	r0, [fp, #-8]
  if (hostnamelen >= DNS_MAX_NAME_LENGTH) {
  1183d8:	e51b3008 	ldr	r3, [fp, #-8]
  1183dc:	e35300ff 	cmp	r3, #255	; 0xff
  1183e0:	9a000001 	bls	1183ec <dns_gethostbyname_addrtype+0x6c>
    LWIP_DEBUGF(DNS_DEBUG, ("dns_gethostbyname: name too long to resolve"));
    return ERR_ARG;
  1183e4:	e3e0300f 	mvn	r3, #15
  1183e8:	ea00001c 	b	118460 <dns_gethostbyname_addrtype+0xe0>
    return ERR_OK;
  }
#endif /* LWIP_HAVE_LOOPIF */

  /* host name already in octet notation? set ip addr and return ERR_OK */
  if (ipaddr_aton(hostname, addr)) {
  1183ec:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1183f0:	e51b0010 	ldr	r0, [fp, #-16]
  1183f4:	eb006934 	bl	1328cc <ip4addr_aton>
  1183f8:	e1a03000 	mov	r3, r0
  1183fc:	e3530000 	cmp	r3, #0
  118400:	0a000001 	beq	11840c <dns_gethostbyname_addrtype+0x8c>
#if LWIP_IPV4 && LWIP_IPV6
    if ((IP_IS_V6(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV4)) ||
        (IP_IS_V4(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV6)))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
    {
      return ERR_OK;
  118404:	e3a03000 	mov	r3, #0
  118408:	ea000014 	b	118460 <dns_gethostbyname_addrtype+0xe0>
    }
  }
  /* already have this address cached? */
  if (dns_lookup(hostname, addr LWIP_DNS_ADDRTYPE_ARG(dns_addrtype)) == ERR_OK) {
  11840c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  118410:	e51b0010 	ldr	r0, [fp, #-16]
  118414:	ebfffa34 	bl	116cec <dns_lookup>
  118418:	e1a03000 	mov	r3, r0
  11841c:	e3530000 	cmp	r3, #0
  118420:	1a000001 	bne	11842c <dns_gethostbyname_addrtype+0xac>
    return ERR_OK;
  118424:	e3a03000 	mov	r3, #0
  118428:	ea00000c 	b	118460 <dns_gethostbyname_addrtype+0xe0>

  if (!is_mdns)
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
  {
    /* prevent calling found callback if no server is set, return error instead */
    if (ip_addr_isany_val(dns_servers[0])) {
  11842c:	e30f30b8 	movw	r3, #61624	; 0xf0b8
  118430:	e3403014 	movt	r3, #20
  118434:	e5933000 	ldr	r3, [r3]
  118438:	e3530000 	cmp	r3, #0
  11843c:	1a000001 	bne	118448 <dns_gethostbyname_addrtype+0xc8>
      return ERR_VAL;
  118440:	e3e03005 	mvn	r3, #5
  118444:	ea000005 	b	118460 <dns_gethostbyname_addrtype+0xe0>
    }
  }

  /* queue query with specified callback */
  return dns_enqueue(hostname, hostnamelen, found, callback_arg LWIP_DNS_ADDRTYPE_ARG(dns_addrtype)
  118448:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11844c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  118450:	e51b1008 	ldr	r1, [fp, #-8]
  118454:	e51b0010 	ldr	r0, [fp, #-16]
  118458:	ebfffeb3 	bl	117f2c <dns_enqueue>
  11845c:	e1a03000 	mov	r3, r0
     LWIP_DNS_ISMDNS_ARG(is_mdns));
}
  118460:	e1a00003 	mov	r0, r3
  118464:	e24bd004 	sub	sp, fp, #4
  118468:	e8bd8800 	pop	{fp, pc}

0011846c <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
  11846c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  118470:	e28db000 	add	fp, sp, #0
  118474:	e24dd024 	sub	sp, sp, #36	; 0x24
  118478:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  11847c:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  const u8_t *pb = (const u8_t *)dataptr;
  118480:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  118484:	e50b3008 	str	r3, [fp, #-8]
  const u16_t *ps;
  u16_t t = 0;
  118488:	e3a03000 	mov	r3, #0
  11848c:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  u32_t sum = 0;
  118490:	e3a03000 	mov	r3, #0
  118494:	e50b3010 	str	r3, [fp, #-16]
  int odd = ((mem_ptr_t)pb & 1);
  118498:	e51b3008 	ldr	r3, [fp, #-8]
  11849c:	e2033001 	and	r3, r3, #1
  1184a0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

  /* Get aligned to u16_t */
  if (odd && len > 0) {
  1184a4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1184a8:	e3530000 	cmp	r3, #0
  1184ac:	0a00000c 	beq	1184e4 <lwip_standard_chksum+0x78>
  1184b0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1184b4:	e3530000 	cmp	r3, #0
  1184b8:	da000009 	ble	1184e4 <lwip_standard_chksum+0x78>
    ((u8_t *)&t)[1] = *pb++;
  1184bc:	e51b2008 	ldr	r2, [fp, #-8]
  1184c0:	e2823001 	add	r3, r2, #1
  1184c4:	e50b3008 	str	r3, [fp, #-8]
  1184c8:	e24b3016 	sub	r3, fp, #22
  1184cc:	e2833001 	add	r3, r3, #1
  1184d0:	e5d22000 	ldrb	r2, [r2]
  1184d4:	e5c32000 	strb	r2, [r3]
    len--;
  1184d8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1184dc:	e2433001 	sub	r3, r3, #1
  1184e0:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
  1184e4:	e51b3008 	ldr	r3, [fp, #-8]
  1184e8:	e50b300c 	str	r3, [fp, #-12]
  while (len > 1) {
  1184ec:	ea00000a 	b	11851c <lwip_standard_chksum+0xb0>
    sum += *ps++;
  1184f0:	e51b300c 	ldr	r3, [fp, #-12]
  1184f4:	e2832002 	add	r2, r3, #2
  1184f8:	e50b200c 	str	r2, [fp, #-12]
  1184fc:	e1d330b0 	ldrh	r3, [r3]
  118500:	e1a02003 	mov	r2, r3
  118504:	e51b3010 	ldr	r3, [fp, #-16]
  118508:	e0833002 	add	r3, r3, r2
  11850c:	e50b3010 	str	r3, [fp, #-16]
    len -= 2;
  118510:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  118514:	e2433002 	sub	r3, r3, #2
  118518:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  while (len > 1) {
  11851c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  118520:	e3530001 	cmp	r3, #1
  118524:	cafffff1 	bgt	1184f0 <lwip_standard_chksum+0x84>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
  118528:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11852c:	e3530000 	cmp	r3, #0
  118530:	da000003 	ble	118544 <lwip_standard_chksum+0xd8>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
  118534:	e24b3016 	sub	r3, fp, #22
  118538:	e51b200c 	ldr	r2, [fp, #-12]
  11853c:	e5d22000 	ldrb	r2, [r2]
  118540:	e5c32000 	strb	r2, [r3]
  }

  /* Add end bytes */
  sum += t;
  118544:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  118548:	e1a02003 	mov	r2, r3
  11854c:	e51b3010 	ldr	r3, [fp, #-16]
  118550:	e0833002 	add	r3, r3, r2
  118554:	e50b3010 	str	r3, [fp, #-16]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
  118558:	e51b3010 	ldr	r3, [fp, #-16]
  11855c:	e1a02823 	lsr	r2, r3, #16
  118560:	e51b3010 	ldr	r3, [fp, #-16]
  118564:	e6ff3073 	uxth	r3, r3
  118568:	e0823003 	add	r3, r2, r3
  11856c:	e50b3010 	str	r3, [fp, #-16]
  sum = FOLD_U32T(sum);
  118570:	e51b3010 	ldr	r3, [fp, #-16]
  118574:	e1a02823 	lsr	r2, r3, #16
  118578:	e51b3010 	ldr	r3, [fp, #-16]
  11857c:	e6ff3073 	uxth	r3, r3
  118580:	e0823003 	add	r3, r2, r3
  118584:	e50b3010 	str	r3, [fp, #-16]

  /* Swap if alignment was odd */
  if (odd) {
  118588:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11858c:	e3530000 	cmp	r3, #0
  118590:	0a000007 	beq	1185b4 <lwip_standard_chksum+0x148>
    sum = SWAP_BYTES_IN_WORD(sum);
  118594:	e51b3010 	ldr	r3, [fp, #-16]
  118598:	e1a03403 	lsl	r3, r3, #8
  11859c:	e6ff2073 	uxth	r2, r3
  1185a0:	e51b3010 	ldr	r3, [fp, #-16]
  1185a4:	e1a03423 	lsr	r3, r3, #8
  1185a8:	e6ef3073 	uxtb	r3, r3
  1185ac:	e1823003 	orr	r3, r2, r3
  1185b0:	e50b3010 	str	r3, [fp, #-16]
  }

  return (u16_t)sum;
  1185b4:	e51b3010 	ldr	r3, [fp, #-16]
  1185b8:	e6ff3073 	uxth	r3, r3
}
  1185bc:	e1a00003 	mov	r0, r3
  1185c0:	e28bd000 	add	sp, fp, #0
  1185c4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1185c8:	e12fff1e 	bx	lr

001185cc <inet_cksum_pseudo_base>:
#endif

/** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
static u16_t
inet_cksum_pseudo_base(struct pbuf *p, u8_t proto, u16_t proto_len, u32_t acc)
{
  1185cc:	e92d4800 	push	{fp, lr}
  1185d0:	e28db004 	add	fp, sp, #4
  1185d4:	e24dd018 	sub	sp, sp, #24
  1185d8:	e50b0010 	str	r0, [fp, #-16]
  1185dc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  1185e0:	e1a03001 	mov	r3, r1
  1185e4:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  1185e8:	e1a03002 	mov	r3, r2
  1185ec:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
  struct pbuf *q;
  u8_t swapped = 0;
  1185f0:	e3a03000 	mov	r3, #0
  1185f4:	e54b3009 	strb	r3, [fp, #-9]

  /* iterate through all pbuf in chain */
  for (q = p; q != NULL; q = q->next) {
  1185f8:	e51b3010 	ldr	r3, [fp, #-16]
  1185fc:	e50b3008 	str	r3, [fp, #-8]
  118600:	ea000025 	b	11869c <inet_cksum_pseudo_base+0xd0>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
      (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
  118604:	e51b3008 	ldr	r3, [fp, #-8]
  118608:	e5932004 	ldr	r2, [r3, #4]
  11860c:	e51b3008 	ldr	r3, [fp, #-8]
  118610:	e1d330ba 	ldrh	r3, [r3, #10]
  118614:	e1a01003 	mov	r1, r3
  118618:	e1a00002 	mov	r0, r2
  11861c:	ebffff92 	bl	11846c <lwip_standard_chksum>
  118620:	e1a03000 	mov	r3, r0
  118624:	e1a02003 	mov	r2, r3
  118628:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11862c:	e0833002 	add	r3, r3, r2
  118630:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
  118634:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  118638:	e1a02823 	lsr	r2, r3, #16
  11863c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  118640:	e6ff3073 	uxth	r3, r3
  118644:	e0823003 	add	r3, r2, r3
  118648:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    if (q->len % 2 != 0) {
  11864c:	e51b3008 	ldr	r3, [fp, #-8]
  118650:	e1d330ba 	ldrh	r3, [r3, #10]
  118654:	e2033001 	and	r3, r3, #1
  118658:	e6ff3073 	uxth	r3, r3
  11865c:	e3530000 	cmp	r3, #0
  118660:	0a00000a 	beq	118690 <inet_cksum_pseudo_base+0xc4>
      swapped = 1 - swapped;
  118664:	e55b3009 	ldrb	r3, [fp, #-9]
  118668:	e2633001 	rsb	r3, r3, #1
  11866c:	e54b3009 	strb	r3, [fp, #-9]
      acc = SWAP_BYTES_IN_WORD(acc);
  118670:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  118674:	e1a03403 	lsl	r3, r3, #8
  118678:	e6ff2073 	uxth	r2, r3
  11867c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  118680:	e1a03423 	lsr	r3, r3, #8
  118684:	e6ef3073 	uxtb	r3, r3
  118688:	e1823003 	orr	r3, r2, r3
  11868c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  for (q = p; q != NULL; q = q->next) {
  118690:	e51b3008 	ldr	r3, [fp, #-8]
  118694:	e5933000 	ldr	r3, [r3]
  118698:	e50b3008 	str	r3, [fp, #-8]
  11869c:	e51b3008 	ldr	r3, [fp, #-8]
  1186a0:	e3530000 	cmp	r3, #0
  1186a4:	1affffd6 	bne	118604 <inet_cksum_pseudo_base+0x38>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
  1186a8:	e55b3009 	ldrb	r3, [fp, #-9]
  1186ac:	e3530000 	cmp	r3, #0
  1186b0:	0a000007 	beq	1186d4 <inet_cksum_pseudo_base+0x108>
    acc = SWAP_BYTES_IN_WORD(acc);
  1186b4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1186b8:	e1a03403 	lsl	r3, r3, #8
  1186bc:	e6ff2073 	uxth	r2, r3
  1186c0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1186c4:	e1a03423 	lsr	r3, r3, #8
  1186c8:	e6ef3073 	uxtb	r3, r3
  1186cc:	e1823003 	orr	r3, r2, r3
  1186d0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  }

  acc += (u32_t)lwip_htons((u16_t)proto);
  1186d4:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  1186d8:	e6ff3073 	uxth	r3, r3
  1186dc:	e1a00003 	mov	r0, r3
  1186e0:	ebfff836 	bl	1167c0 <lwip_htons>
  1186e4:	e1a03000 	mov	r3, r0
  1186e8:	e1a02003 	mov	r2, r3
  1186ec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1186f0:	e0833002 	add	r3, r3, r2
  1186f4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  acc += (u32_t)lwip_htons(proto_len);
  1186f8:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
  1186fc:	e1a00003 	mov	r0, r3
  118700:	ebfff82e 	bl	1167c0 <lwip_htons>
  118704:	e1a03000 	mov	r3, r0
  118708:	e1a02003 	mov	r2, r3
  11870c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  118710:	e0833002 	add	r3, r3, r2
  118714:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  acc = FOLD_U32T(acc);
  118718:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11871c:	e1a02823 	lsr	r2, r3, #16
  118720:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  118724:	e6ff3073 	uxth	r3, r3
  118728:	e0823003 	add	r3, r2, r3
  11872c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  acc = FOLD_U32T(acc);
  118730:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  118734:	e1a02823 	lsr	r2, r3, #16
  118738:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11873c:	e6ff3073 	uxth	r3, r3
  118740:	e0823003 	add	r3, r2, r3
  118744:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
  118748:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11874c:	e6ff3073 	uxth	r3, r3
  118750:	e1e03003 	mvn	r3, r3
  118754:	e6ff3073 	uxth	r3, r3
}
  118758:	e1a00003 	mov	r0, r3
  11875c:	e24bd004 	sub	sp, fp, #4
  118760:	e8bd8800 	pop	{fp, pc}

00118764 <inet_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
       const ip4_addr_t *src, const ip4_addr_t *dest)
{
  118764:	e92d4800 	push	{fp, lr}
  118768:	e28db004 	add	fp, sp, #4
  11876c:	e24dd018 	sub	sp, sp, #24
  118770:	e50b0010 	str	r0, [fp, #-16]
  118774:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  118778:	e1a03001 	mov	r3, r1
  11877c:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  118780:	e1a03002 	mov	r3, r2
  118784:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
  u32_t acc;
  u32_t addr;

  addr = ip4_addr_get_u32(src);
  118788:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11878c:	e5933000 	ldr	r3, [r3]
  118790:	e50b3008 	str	r3, [fp, #-8]
  acc = (addr & 0xffffUL);
  118794:	e51b3008 	ldr	r3, [fp, #-8]
  118798:	e6ff3073 	uxth	r3, r3
  11879c:	e50b300c 	str	r3, [fp, #-12]
  acc += ((addr >> 16) & 0xffffUL);
  1187a0:	e51b3008 	ldr	r3, [fp, #-8]
  1187a4:	e1a03823 	lsr	r3, r3, #16
  1187a8:	e51b200c 	ldr	r2, [fp, #-12]
  1187ac:	e0823003 	add	r3, r2, r3
  1187b0:	e50b300c 	str	r3, [fp, #-12]
  addr = ip4_addr_get_u32(dest);
  1187b4:	e59b3004 	ldr	r3, [fp, #4]
  1187b8:	e5933000 	ldr	r3, [r3]
  1187bc:	e50b3008 	str	r3, [fp, #-8]
  acc += (addr & 0xffffUL);
  1187c0:	e51b3008 	ldr	r3, [fp, #-8]
  1187c4:	e6ff3073 	uxth	r3, r3
  1187c8:	e51b200c 	ldr	r2, [fp, #-12]
  1187cc:	e0823003 	add	r3, r2, r3
  1187d0:	e50b300c 	str	r3, [fp, #-12]
  acc += ((addr >> 16) & 0xffffUL);
  1187d4:	e51b3008 	ldr	r3, [fp, #-8]
  1187d8:	e1a03823 	lsr	r3, r3, #16
  1187dc:	e51b200c 	ldr	r2, [fp, #-12]
  1187e0:	e0823003 	add	r3, r2, r3
  1187e4:	e50b300c 	str	r3, [fp, #-12]
  /* fold down to 16 bits */
  acc = FOLD_U32T(acc);
  1187e8:	e51b300c 	ldr	r3, [fp, #-12]
  1187ec:	e1a02823 	lsr	r2, r3, #16
  1187f0:	e51b300c 	ldr	r3, [fp, #-12]
  1187f4:	e6ff3073 	uxth	r3, r3
  1187f8:	e0823003 	add	r3, r2, r3
  1187fc:	e50b300c 	str	r3, [fp, #-12]
  acc = FOLD_U32T(acc);
  118800:	e51b300c 	ldr	r3, [fp, #-12]
  118804:	e1a02823 	lsr	r2, r3, #16
  118808:	e51b300c 	ldr	r3, [fp, #-12]
  11880c:	e6ff3073 	uxth	r3, r3
  118810:	e0823003 	add	r3, r2, r3
  118814:	e50b300c 	str	r3, [fp, #-12]

  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
  118818:	e15b21b4 	ldrh	r2, [fp, #-20]	; 0xffffffec
  11881c:	e55b1011 	ldrb	r1, [fp, #-17]	; 0xffffffef
  118820:	e51b300c 	ldr	r3, [fp, #-12]
  118824:	e51b0010 	ldr	r0, [fp, #-16]
  118828:	ebffff67 	bl	1185cc <inet_cksum_pseudo_base>
  11882c:	e1a03000 	mov	r3, r0
}
  118830:	e1a00003 	mov	r0, r3
  118834:	e24bd004 	sub	sp, fp, #4
  118838:	e8bd8800 	pop	{fp, pc}

0011883c <ip_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
       const ip_addr_t *src, const ip_addr_t *dest)
{
  11883c:	e92d4800 	push	{fp, lr}
  118840:	e28db004 	add	fp, sp, #4
  118844:	e24dd018 	sub	sp, sp, #24
  118848:	e50b0008 	str	r0, [fp, #-8]
  11884c:	e50b3010 	str	r3, [fp, #-16]
  118850:	e1a03001 	mov	r3, r1
  118854:	e54b3009 	strb	r3, [fp, #-9]
  118858:	e1a03002 	mov	r3, r2
  11885c:	e14b30bc 	strh	r3, [fp, #-12]
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  {
    return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
  118860:	e15b20bc 	ldrh	r2, [fp, #-12]
  118864:	e55b1009 	ldrb	r1, [fp, #-9]
  118868:	e59b3004 	ldr	r3, [fp, #4]
  11886c:	e58d3000 	str	r3, [sp]
  118870:	e51b3010 	ldr	r3, [fp, #-16]
  118874:	e51b0008 	ldr	r0, [fp, #-8]
  118878:	ebffffb9 	bl	118764 <inet_chksum_pseudo>
  11887c:	e1a03000 	mov	r3, r0
  }
#endif /* LWIP_IPV4 */
}
  118880:	e1a00003 	mov	r0, r3
  118884:	e24bd004 	sub	sp, fp, #4
  118888:	e8bd8800 	pop	{fp, pc}

0011888c <inet_cksum_pseudo_partial_base>:

/** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
static u16_t
inet_cksum_pseudo_partial_base(struct pbuf *p, u8_t proto, u16_t proto_len,
       u16_t chksum_len, u32_t acc)
{
  11888c:	e92d4800 	push	{fp, lr}
  118890:	e28db004 	add	fp, sp, #4
  118894:	e24dd018 	sub	sp, sp, #24
  118898:	e50b0010 	str	r0, [fp, #-16]
  11889c:	e1a00001 	mov	r0, r1
  1188a0:	e1a01002 	mov	r1, r2
  1188a4:	e1a02003 	mov	r2, r3
  1188a8:	e1a03000 	mov	r3, r0
  1188ac:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  1188b0:	e1a03001 	mov	r3, r1
  1188b4:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
  1188b8:	e1a03002 	mov	r3, r2
  1188bc:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  struct pbuf *q;
  u8_t swapped = 0;
  1188c0:	e3a03000 	mov	r3, #0
  1188c4:	e54b3009 	strb	r3, [fp, #-9]
  u16_t chklen;

  /* iterate through all pbuf in chain */
  for (q = p; (q != NULL) && (chksum_len > 0); q = q->next) {
  1188c8:	e51b3010 	ldr	r3, [fp, #-16]
  1188cc:	e50b3008 	str	r3, [fp, #-8]
  1188d0:	ea00003c 	b	1189c8 <inet_cksum_pseudo_partial_base+0x13c>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
      (void *)q, (void *)q->next));
    chklen = q->len;
  1188d4:	e51b3008 	ldr	r3, [fp, #-8]
  1188d8:	e1d330ba 	ldrh	r3, [r3, #10]
  1188dc:	e14b30bc 	strh	r3, [fp, #-12]
    if (chklen > chksum_len) {
  1188e0:	e15b20bc 	ldrh	r2, [fp, #-12]
  1188e4:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  1188e8:	e1520003 	cmp	r2, r3
  1188ec:	9a000001 	bls	1188f8 <inet_cksum_pseudo_partial_base+0x6c>
      chklen = chksum_len;
  1188f0:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  1188f4:	e14b30bc 	strh	r3, [fp, #-12]
    }
    acc += LWIP_CHKSUM(q->payload, chklen);
  1188f8:	e51b3008 	ldr	r3, [fp, #-8]
  1188fc:	e5933004 	ldr	r3, [r3, #4]
  118900:	e15b20bc 	ldrh	r2, [fp, #-12]
  118904:	e1a01002 	mov	r1, r2
  118908:	e1a00003 	mov	r0, r3
  11890c:	ebfffed6 	bl	11846c <lwip_standard_chksum>
  118910:	e1a03000 	mov	r3, r0
  118914:	e1a02003 	mov	r2, r3
  118918:	e59b3004 	ldr	r3, [fp, #4]
  11891c:	e0833002 	add	r3, r3, r2
  118920:	e58b3004 	str	r3, [fp, #4]
    chksum_len -= chklen;
  118924:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  118928:	e15b30bc 	ldrh	r3, [fp, #-12]
  11892c:	e0423003 	sub	r3, r2, r3
  118930:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
    LWIP_ASSERT("delete me", chksum_len < 0x7fff);
  118934:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  118938:	e3072ffe 	movw	r2, #32766	; 0x7ffe
  11893c:	e1530002 	cmp	r3, r2
  118940:	9a000006 	bls	118960 <inet_cksum_pseudo_partial_base+0xd4>
  118944:	e30702cc 	movw	r0, #29388	; 0x72cc
  118948:	e3400014 	movt	r0, #20
  11894c:	ebffa9f0 	bl	103114 <rt_kprintf>
  118950:	e3a01e1a 	mov	r1, #416	; 0x1a0
  118954:	e30702d8 	movw	r0, #29400	; 0x72d8
  118958:	e3400014 	movt	r0, #20
  11895c:	ebffc9c0 	bl	10b064 <sys_arch_assert>
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* fold the upper bit down */
    acc = FOLD_U32T(acc);
  118960:	e59b3004 	ldr	r3, [fp, #4]
  118964:	e1a02823 	lsr	r2, r3, #16
  118968:	e59b3004 	ldr	r3, [fp, #4]
  11896c:	e6ff3073 	uxth	r3, r3
  118970:	e0823003 	add	r3, r2, r3
  118974:	e58b3004 	str	r3, [fp, #4]
    if (q->len % 2 != 0) {
  118978:	e51b3008 	ldr	r3, [fp, #-8]
  11897c:	e1d330ba 	ldrh	r3, [r3, #10]
  118980:	e2033001 	and	r3, r3, #1
  118984:	e6ff3073 	uxth	r3, r3
  118988:	e3530000 	cmp	r3, #0
  11898c:	0a00000a 	beq	1189bc <inet_cksum_pseudo_partial_base+0x130>
      swapped = 1 - swapped;
  118990:	e55b3009 	ldrb	r3, [fp, #-9]
  118994:	e2633001 	rsb	r3, r3, #1
  118998:	e54b3009 	strb	r3, [fp, #-9]
      acc = SWAP_BYTES_IN_WORD(acc);
  11899c:	e59b3004 	ldr	r3, [fp, #4]
  1189a0:	e1a03403 	lsl	r3, r3, #8
  1189a4:	e6ff2073 	uxth	r2, r3
  1189a8:	e59b3004 	ldr	r3, [fp, #4]
  1189ac:	e1a03423 	lsr	r3, r3, #8
  1189b0:	e6ef3073 	uxtb	r3, r3
  1189b4:	e1823003 	orr	r3, r2, r3
  1189b8:	e58b3004 	str	r3, [fp, #4]
  for (q = p; (q != NULL) && (chksum_len > 0); q = q->next) {
  1189bc:	e51b3008 	ldr	r3, [fp, #-8]
  1189c0:	e5933000 	ldr	r3, [r3]
  1189c4:	e50b3008 	str	r3, [fp, #-8]
  1189c8:	e51b3008 	ldr	r3, [fp, #-8]
  1189cc:	e3530000 	cmp	r3, #0
  1189d0:	0a000002 	beq	1189e0 <inet_cksum_pseudo_partial_base+0x154>
  1189d4:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  1189d8:	e3530000 	cmp	r3, #0
  1189dc:	1affffbc 	bne	1188d4 <inet_cksum_pseudo_partial_base+0x48>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
  1189e0:	e55b3009 	ldrb	r3, [fp, #-9]
  1189e4:	e3530000 	cmp	r3, #0
  1189e8:	0a000007 	beq	118a0c <inet_cksum_pseudo_partial_base+0x180>
    acc = SWAP_BYTES_IN_WORD(acc);
  1189ec:	e59b3004 	ldr	r3, [fp, #4]
  1189f0:	e1a03403 	lsl	r3, r3, #8
  1189f4:	e6ff2073 	uxth	r2, r3
  1189f8:	e59b3004 	ldr	r3, [fp, #4]
  1189fc:	e1a03423 	lsr	r3, r3, #8
  118a00:	e6ef3073 	uxtb	r3, r3
  118a04:	e1823003 	orr	r3, r2, r3
  118a08:	e58b3004 	str	r3, [fp, #4]
  }

  acc += (u32_t)lwip_htons((u16_t)proto);
  118a0c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  118a10:	e6ff3073 	uxth	r3, r3
  118a14:	e1a00003 	mov	r0, r3
  118a18:	ebfff768 	bl	1167c0 <lwip_htons>
  118a1c:	e1a03000 	mov	r3, r0
  118a20:	e1a02003 	mov	r2, r3
  118a24:	e59b3004 	ldr	r3, [fp, #4]
  118a28:	e0833002 	add	r3, r3, r2
  118a2c:	e58b3004 	str	r3, [fp, #4]
  acc += (u32_t)lwip_htons(proto_len);
  118a30:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
  118a34:	e1a00003 	mov	r0, r3
  118a38:	ebfff760 	bl	1167c0 <lwip_htons>
  118a3c:	e1a03000 	mov	r3, r0
  118a40:	e1a02003 	mov	r2, r3
  118a44:	e59b3004 	ldr	r3, [fp, #4]
  118a48:	e0833002 	add	r3, r3, r2
  118a4c:	e58b3004 	str	r3, [fp, #4]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  acc = FOLD_U32T(acc);
  118a50:	e59b3004 	ldr	r3, [fp, #4]
  118a54:	e1a02823 	lsr	r2, r3, #16
  118a58:	e59b3004 	ldr	r3, [fp, #4]
  118a5c:	e6ff3073 	uxth	r3, r3
  118a60:	e0823003 	add	r3, r2, r3
  118a64:	e58b3004 	str	r3, [fp, #4]
  acc = FOLD_U32T(acc);
  118a68:	e59b3004 	ldr	r3, [fp, #4]
  118a6c:	e1a02823 	lsr	r2, r3, #16
  118a70:	e59b3004 	ldr	r3, [fp, #4]
  118a74:	e6ff3073 	uxth	r3, r3
  118a78:	e0823003 	add	r3, r2, r3
  118a7c:	e58b3004 	str	r3, [fp, #4]
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
  118a80:	e59b3004 	ldr	r3, [fp, #4]
  118a84:	e6ff3073 	uxth	r3, r3
  118a88:	e1e03003 	mvn	r3, r3
  118a8c:	e6ff3073 	uxth	r3, r3
}
  118a90:	e1a00003 	mov	r0, r3
  118a94:	e24bd004 	sub	sp, fp, #4
  118a98:	e8bd8800 	pop	{fp, pc}

00118a9c <inet_chksum_pseudo_partial>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pseudo_partial(struct pbuf *p, u8_t proto, u16_t proto_len,
       u16_t chksum_len, const ip4_addr_t *src, const ip4_addr_t *dest)
{
  118a9c:	e92d4800 	push	{fp, lr}
  118aa0:	e28db004 	add	fp, sp, #4
  118aa4:	e24dd020 	sub	sp, sp, #32
  118aa8:	e50b0010 	str	r0, [fp, #-16]
  118aac:	e1a00001 	mov	r0, r1
  118ab0:	e1a01002 	mov	r1, r2
  118ab4:	e1a02003 	mov	r2, r3
  118ab8:	e1a03000 	mov	r3, r0
  118abc:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  118ac0:	e1a03001 	mov	r3, r1
  118ac4:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
  118ac8:	e1a03002 	mov	r3, r2
  118acc:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  u32_t acc;
  u32_t addr;

  addr = ip4_addr_get_u32(src);
  118ad0:	e59b3004 	ldr	r3, [fp, #4]
  118ad4:	e5933000 	ldr	r3, [r3]
  118ad8:	e50b3008 	str	r3, [fp, #-8]
  acc = (addr & 0xffffUL);
  118adc:	e51b3008 	ldr	r3, [fp, #-8]
  118ae0:	e6ff3073 	uxth	r3, r3
  118ae4:	e50b300c 	str	r3, [fp, #-12]
  acc += ((addr >> 16) & 0xffffUL);
  118ae8:	e51b3008 	ldr	r3, [fp, #-8]
  118aec:	e1a03823 	lsr	r3, r3, #16
  118af0:	e51b200c 	ldr	r2, [fp, #-12]
  118af4:	e0823003 	add	r3, r2, r3
  118af8:	e50b300c 	str	r3, [fp, #-12]
  addr = ip4_addr_get_u32(dest);
  118afc:	e59b3008 	ldr	r3, [fp, #8]
  118b00:	e5933000 	ldr	r3, [r3]
  118b04:	e50b3008 	str	r3, [fp, #-8]
  acc += (addr & 0xffffUL);
  118b08:	e51b3008 	ldr	r3, [fp, #-8]
  118b0c:	e6ff3073 	uxth	r3, r3
  118b10:	e51b200c 	ldr	r2, [fp, #-12]
  118b14:	e0823003 	add	r3, r2, r3
  118b18:	e50b300c 	str	r3, [fp, #-12]
  acc += ((addr >> 16) & 0xffffUL);
  118b1c:	e51b3008 	ldr	r3, [fp, #-8]
  118b20:	e1a03823 	lsr	r3, r3, #16
  118b24:	e51b200c 	ldr	r2, [fp, #-12]
  118b28:	e0823003 	add	r3, r2, r3
  118b2c:	e50b300c 	str	r3, [fp, #-12]
  /* fold down to 16 bits */
  acc = FOLD_U32T(acc);
  118b30:	e51b300c 	ldr	r3, [fp, #-12]
  118b34:	e1a02823 	lsr	r2, r3, #16
  118b38:	e51b300c 	ldr	r3, [fp, #-12]
  118b3c:	e6ff3073 	uxth	r3, r3
  118b40:	e0823003 	add	r3, r2, r3
  118b44:	e50b300c 	str	r3, [fp, #-12]
  acc = FOLD_U32T(acc);
  118b48:	e51b300c 	ldr	r3, [fp, #-12]
  118b4c:	e1a02823 	lsr	r2, r3, #16
  118b50:	e51b300c 	ldr	r3, [fp, #-12]
  118b54:	e6ff3073 	uxth	r3, r3
  118b58:	e0823003 	add	r3, r2, r3
  118b5c:	e50b300c 	str	r3, [fp, #-12]

  return inet_cksum_pseudo_partial_base(p, proto, proto_len, chksum_len, acc);
  118b60:	e15b01b6 	ldrh	r0, [fp, #-22]	; 0xffffffea
  118b64:	e15b21b4 	ldrh	r2, [fp, #-20]	; 0xffffffec
  118b68:	e55b1011 	ldrb	r1, [fp, #-17]	; 0xffffffef
  118b6c:	e51b300c 	ldr	r3, [fp, #-12]
  118b70:	e58d3000 	str	r3, [sp]
  118b74:	e1a03000 	mov	r3, r0
  118b78:	e51b0010 	ldr	r0, [fp, #-16]
  118b7c:	ebffff42 	bl	11888c <inet_cksum_pseudo_partial_base>
  118b80:	e1a03000 	mov	r3, r0
}
  118b84:	e1a00003 	mov	r0, r3
  118b88:	e24bd004 	sub	sp, fp, #4
  118b8c:	e8bd8800 	pop	{fp, pc}

00118b90 <ip_chksum_pseudo_partial>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip_chksum_pseudo_partial(struct pbuf *p, u8_t proto, u16_t proto_len,
       u16_t chksum_len, const ip_addr_t *src, const ip_addr_t *dest)
{
  118b90:	e92d4800 	push	{fp, lr}
  118b94:	e28db004 	add	fp, sp, #4
  118b98:	e24dd018 	sub	sp, sp, #24
  118b9c:	e50b0008 	str	r0, [fp, #-8]
  118ba0:	e1a00001 	mov	r0, r1
  118ba4:	e1a01002 	mov	r1, r2
  118ba8:	e1a02003 	mov	r2, r3
  118bac:	e1a03000 	mov	r3, r0
  118bb0:	e54b3009 	strb	r3, [fp, #-9]
  118bb4:	e1a03001 	mov	r3, r1
  118bb8:	e14b30bc 	strh	r3, [fp, #-12]
  118bbc:	e1a03002 	mov	r3, r2
  118bc0:	e14b30be 	strh	r3, [fp, #-14]
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  {
    return inet_chksum_pseudo_partial(p, proto, proto_len, chksum_len, ip_2_ip4(src), ip_2_ip4(dest));
  118bc4:	e15b00be 	ldrh	r0, [fp, #-14]
  118bc8:	e15b20bc 	ldrh	r2, [fp, #-12]
  118bcc:	e55b1009 	ldrb	r1, [fp, #-9]
  118bd0:	e59b3008 	ldr	r3, [fp, #8]
  118bd4:	e58d3004 	str	r3, [sp, #4]
  118bd8:	e59b3004 	ldr	r3, [fp, #4]
  118bdc:	e58d3000 	str	r3, [sp]
  118be0:	e1a03000 	mov	r3, r0
  118be4:	e51b0008 	ldr	r0, [fp, #-8]
  118be8:	ebffffab 	bl	118a9c <inet_chksum_pseudo_partial>
  118bec:	e1a03000 	mov	r3, r0
  }
#endif /* LWIP_IPV4 */
}
  118bf0:	e1a00003 	mov	r0, r3
  118bf4:	e24bd004 	sub	sp, fp, #4
  118bf8:	e8bd8800 	pop	{fp, pc}

00118bfc <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
  118bfc:	e92d4800 	push	{fp, lr}
  118c00:	e28db004 	add	fp, sp, #4
  118c04:	e24dd008 	sub	sp, sp, #8
  118c08:	e50b0008 	str	r0, [fp, #-8]
  118c0c:	e1a03001 	mov	r3, r1
  118c10:	e14b30ba 	strh	r3, [fp, #-10]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
  118c14:	e15b30ba 	ldrh	r3, [fp, #-10]
  118c18:	e1a01003 	mov	r1, r3
  118c1c:	e51b0008 	ldr	r0, [fp, #-8]
  118c20:	ebfffe11 	bl	11846c <lwip_standard_chksum>
  118c24:	e1a03000 	mov	r3, r0
  118c28:	e1e03003 	mvn	r3, r3
  118c2c:	e6ff3073 	uxth	r3, r3
}
  118c30:	e1a00003 	mov	r0, r3
  118c34:	e24bd004 	sub	sp, fp, #4
  118c38:	e8bd8800 	pop	{fp, pc}

00118c3c <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
  118c3c:	e92d4800 	push	{fp, lr}
  118c40:	e28db004 	add	fp, sp, #4
  118c44:	e24dd018 	sub	sp, sp, #24
  118c48:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  u32_t acc;
  struct pbuf *q;
  u8_t swapped;

  acc = 0;
  118c4c:	e3a03000 	mov	r3, #0
  118c50:	e50b3008 	str	r3, [fp, #-8]
  swapped = 0;
  118c54:	e3a03000 	mov	r3, #0
  118c58:	e54b300d 	strb	r3, [fp, #-13]
  for (q = p; q != NULL; q = q->next) {
  118c5c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  118c60:	e50b300c 	str	r3, [fp, #-12]
  118c64:	ea000025 	b	118d00 <inet_chksum_pbuf+0xc4>
    acc += LWIP_CHKSUM(q->payload, q->len);
  118c68:	e51b300c 	ldr	r3, [fp, #-12]
  118c6c:	e5932004 	ldr	r2, [r3, #4]
  118c70:	e51b300c 	ldr	r3, [fp, #-12]
  118c74:	e1d330ba 	ldrh	r3, [r3, #10]
  118c78:	e1a01003 	mov	r1, r3
  118c7c:	e1a00002 	mov	r0, r2
  118c80:	ebfffdf9 	bl	11846c <lwip_standard_chksum>
  118c84:	e1a03000 	mov	r3, r0
  118c88:	e1a02003 	mov	r2, r3
  118c8c:	e51b3008 	ldr	r3, [fp, #-8]
  118c90:	e0833002 	add	r3, r3, r2
  118c94:	e50b3008 	str	r3, [fp, #-8]
    acc = FOLD_U32T(acc);
  118c98:	e51b3008 	ldr	r3, [fp, #-8]
  118c9c:	e1a02823 	lsr	r2, r3, #16
  118ca0:	e51b3008 	ldr	r3, [fp, #-8]
  118ca4:	e6ff3073 	uxth	r3, r3
  118ca8:	e0823003 	add	r3, r2, r3
  118cac:	e50b3008 	str	r3, [fp, #-8]
    if (q->len % 2 != 0) {
  118cb0:	e51b300c 	ldr	r3, [fp, #-12]
  118cb4:	e1d330ba 	ldrh	r3, [r3, #10]
  118cb8:	e2033001 	and	r3, r3, #1
  118cbc:	e6ff3073 	uxth	r3, r3
  118cc0:	e3530000 	cmp	r3, #0
  118cc4:	0a00000a 	beq	118cf4 <inet_chksum_pbuf+0xb8>
      swapped = 1 - swapped;
  118cc8:	e55b300d 	ldrb	r3, [fp, #-13]
  118ccc:	e2633001 	rsb	r3, r3, #1
  118cd0:	e54b300d 	strb	r3, [fp, #-13]
      acc = SWAP_BYTES_IN_WORD(acc);
  118cd4:	e51b3008 	ldr	r3, [fp, #-8]
  118cd8:	e1a03403 	lsl	r3, r3, #8
  118cdc:	e6ff2073 	uxth	r2, r3
  118ce0:	e51b3008 	ldr	r3, [fp, #-8]
  118ce4:	e1a03423 	lsr	r3, r3, #8
  118ce8:	e6ef3073 	uxtb	r3, r3
  118cec:	e1823003 	orr	r3, r2, r3
  118cf0:	e50b3008 	str	r3, [fp, #-8]
  for (q = p; q != NULL; q = q->next) {
  118cf4:	e51b300c 	ldr	r3, [fp, #-12]
  118cf8:	e5933000 	ldr	r3, [r3]
  118cfc:	e50b300c 	str	r3, [fp, #-12]
  118d00:	e51b300c 	ldr	r3, [fp, #-12]
  118d04:	e3530000 	cmp	r3, #0
  118d08:	1affffd6 	bne	118c68 <inet_chksum_pbuf+0x2c>
    }
  }

  if (swapped) {
  118d0c:	e55b300d 	ldrb	r3, [fp, #-13]
  118d10:	e3530000 	cmp	r3, #0
  118d14:	0a000007 	beq	118d38 <inet_chksum_pbuf+0xfc>
    acc = SWAP_BYTES_IN_WORD(acc);
  118d18:	e51b3008 	ldr	r3, [fp, #-8]
  118d1c:	e1a03403 	lsl	r3, r3, #8
  118d20:	e6ff2073 	uxth	r2, r3
  118d24:	e51b3008 	ldr	r3, [fp, #-8]
  118d28:	e1a03423 	lsr	r3, r3, #8
  118d2c:	e6ef3073 	uxtb	r3, r3
  118d30:	e1823003 	orr	r3, r2, r3
  118d34:	e50b3008 	str	r3, [fp, #-8]
  }
  return (u16_t)~(acc & 0xffffUL);
  118d38:	e51b3008 	ldr	r3, [fp, #-8]
  118d3c:	e6ff3073 	uxth	r3, r3
  118d40:	e1e03003 	mvn	r3, r3
  118d44:	e6ff3073 	uxth	r3, r3
}
  118d48:	e1a00003 	mov	r0, r3
  118d4c:	e24bd004 	sub	sp, fp, #4
  118d50:	e8bd8800 	pop	{fp, pc}

00118d54 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
  118d54:	e92d4800 	push	{fp, lr}
  118d58:	e28db004 	add	fp, sp, #4
  118d5c:	e24dd008 	sub	sp, sp, #8
#ifndef LWIP_SKIP_PACKING_CHECK
  LWIP_ASSERT("Struct packing not implemented correctly. Check your lwIP port.", sizeof(struct packed_struct_test) == PACKED_STRUCT_TEST_EXPECTED_SIZE);
#endif

  /* Modules initialization */
  stats_init();
  118d60:	eb000f7b 	bl	11cb54 <stats_init>
#if !NO_SYS
  sys_init();
  118d64:	ebffc621 	bl	10a5f0 <sys_init>
#endif /* !NO_SYS */
  mem_init();
  118d68:	ebffc8dc 	bl	10b0e0 <mem_init>
  memp_init();
  118d6c:	eb0000c6 	bl	11908c <memp_init>
  pbuf_init();
  netif_init();
  118d70:	eb0001d9 	bl	1194dc <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
  118d74:	eb003b7f 	bl	127b78 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
  118d78:	eb001109 	bl	11d1a4 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
  118d7c:	eb005cdc 	bl	1300f4 <igmp_init>
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
  118d80:	ebfff78e 	bl	116bc0 <dns_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
  118d84:	eb0039d6 	bl	1274e4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
  118d88:	e320f000 	nop	{0}
  118d8c:	e24bd004 	sub	sp, fp, #4
  118d90:	e8bd8800 	pop	{fp, pc}

00118d94 <memp_overflow_check_element_overflow>:
 * @param p the memp element to check
 * @param desc the pool p comes from
 */
static void
memp_overflow_check_element_overflow(struct memp *p, const struct memp_desc *desc)
{
  118d94:	e92d4800 	push	{fp, lr}
  118d98:	e28db004 	add	fp, sp, #4
  118d9c:	e24dd090 	sub	sp, sp, #144	; 0x90
  118da0:	e50b0090 	str	r0, [fp, #-144]	; 0xffffff70
  118da4:	e50b1094 	str	r1, [fp, #-148]	; 0xffffff6c
#if MEMP_SANITY_REGION_AFTER_ALIGNED > 0
  u16_t k;
  u8_t *m;
  m = (u8_t*)p + MEMP_SIZE + desc->size;
  118da8:	e51b3094 	ldr	r3, [fp, #-148]	; 0xffffff6c
  118dac:	e1d330b8 	ldrh	r3, [r3, #8]
  118db0:	e283301c 	add	r3, r3, #28
  118db4:	e51b2090 	ldr	r2, [fp, #-144]	; 0xffffff70
  118db8:	e0823003 	add	r3, r2, r3
  118dbc:	e50b300c 	str	r3, [fp, #-12]
  for (k = 0; k < MEMP_SANITY_REGION_AFTER_ALIGNED; k++) {
  118dc0:	e3a03000 	mov	r3, #0
  118dc4:	e14b30b6 	strh	r3, [fp, #-6]
  118dc8:	ea000022 	b	118e58 <memp_overflow_check_element_overflow+0xc4>
    if (m[k] != 0xcd) {
  118dcc:	e15b30b6 	ldrh	r3, [fp, #-6]
  118dd0:	e51b200c 	ldr	r2, [fp, #-12]
  118dd4:	e0823003 	add	r3, r2, r3
  118dd8:	e5d33000 	ldrb	r3, [r3]
  118ddc:	e35300cd 	cmp	r3, #205	; 0xcd
  118de0:	0a000019 	beq	118e4c <memp_overflow_check_element_overflow+0xb8>
      char errstr[128] = "detected memp overflow in pool ";
  118de4:	e3073590 	movw	r3, #30096	; 0x7590
  118de8:	e3403014 	movt	r3, #20
  118dec:	e24bc08c 	sub	ip, fp, #140	; 0x8c
  118df0:	e1a0e003 	mov	lr, r3
  118df4:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
  118df8:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
  118dfc:	e89e000f 	ldm	lr, {r0, r1, r2, r3}
  118e00:	e88c000f 	stm	ip, {r0, r1, r2, r3}
  118e04:	e24b306c 	sub	r3, fp, #108	; 0x6c
  118e08:	e3a02060 	mov	r2, #96	; 0x60
  118e0c:	e3a01000 	mov	r1, #0
  118e10:	e1a00003 	mov	r0, r3
  118e14:	eb00a190 	bl	14145c <memset>
      strcat(errstr, desc->desc);
  118e18:	e51b3094 	ldr	r3, [fp, #-148]	; 0xffffff6c
  118e1c:	e5932000 	ldr	r2, [r3]
  118e20:	e24b308c 	sub	r3, fp, #140	; 0x8c
  118e24:	e1a01002 	mov	r1, r2
  118e28:	e1a00003 	mov	r0, r3
  118e2c:	eb00a1f0 	bl	1415f4 <strcat>
      LWIP_ASSERT(errstr, 0);
  118e30:	e24b308c 	sub	r3, fp, #140	; 0x8c
  118e34:	e1a00003 	mov	r0, r3
  118e38:	ebffa8b5 	bl	103114 <rt_kprintf>
  118e3c:	e3a0108a 	mov	r1, #138	; 0x8a
  118e40:	e3070564 	movw	r0, #30052	; 0x7564
  118e44:	e3400014 	movt	r0, #20
  118e48:	ebffc885 	bl	10b064 <sys_arch_assert>
  for (k = 0; k < MEMP_SANITY_REGION_AFTER_ALIGNED; k++) {
  118e4c:	e15b30b6 	ldrh	r3, [fp, #-6]
  118e50:	e2833001 	add	r3, r3, #1
  118e54:	e14b30b6 	strh	r3, [fp, #-6]
  118e58:	e15b30b6 	ldrh	r3, [fp, #-6]
  118e5c:	e353000f 	cmp	r3, #15
  118e60:	9affffd9 	bls	118dcc <memp_overflow_check_element_overflow+0x38>
  }
#else /* MEMP_SANITY_REGION_AFTER_ALIGNED > 0 */
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(desc);
#endif /* MEMP_SANITY_REGION_AFTER_ALIGNED > 0 */
}
  118e64:	e320f000 	nop	{0}
  118e68:	e24bd004 	sub	sp, fp, #4
  118e6c:	e8bd8800 	pop	{fp, pc}

00118e70 <memp_overflow_check_element_underflow>:
 * @param p the memp element to check
 * @param desc the pool p comes from
 */
static void
memp_overflow_check_element_underflow(struct memp *p, const struct memp_desc *desc)
{
  118e70:	e92d4800 	push	{fp, lr}
  118e74:	e28db004 	add	fp, sp, #4
  118e78:	e24dd090 	sub	sp, sp, #144	; 0x90
  118e7c:	e50b0090 	str	r0, [fp, #-144]	; 0xffffff70
  118e80:	e50b1094 	str	r1, [fp, #-148]	; 0xffffff6c
#if MEMP_SANITY_REGION_BEFORE_ALIGNED > 0
  u16_t k;
  u8_t *m;
  m = (u8_t*)p + MEMP_SIZE - MEMP_SANITY_REGION_BEFORE_ALIGNED;
  118e84:	e51b3090 	ldr	r3, [fp, #-144]	; 0xffffff70
  118e88:	e283300c 	add	r3, r3, #12
  118e8c:	e50b300c 	str	r3, [fp, #-12]
  for (k = 0; k < MEMP_SANITY_REGION_BEFORE_ALIGNED; k++) {
  118e90:	e3a03000 	mov	r3, #0
  118e94:	e14b30b6 	strh	r3, [fp, #-6]
  118e98:	ea000024 	b	118f30 <memp_overflow_check_element_underflow+0xc0>
    if (m[k] != 0xcd) {
  118e9c:	e15b30b6 	ldrh	r3, [fp, #-6]
  118ea0:	e51b200c 	ldr	r2, [fp, #-12]
  118ea4:	e0823003 	add	r3, r2, r3
  118ea8:	e5d33000 	ldrb	r3, [r3]
  118eac:	e35300cd 	cmp	r3, #205	; 0xcd
  118eb0:	0a00001b 	beq	118f24 <memp_overflow_check_element_underflow+0xb4>
      char errstr[128] = "detected memp underflow in pool ";
  118eb4:	e3073610 	movw	r3, #30224	; 0x7610
  118eb8:	e3403014 	movt	r3, #20
  118ebc:	e24bc08c 	sub	ip, fp, #140	; 0x8c
  118ec0:	e1a0e003 	mov	lr, r3
  118ec4:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
  118ec8:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
  118ecc:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
  118ed0:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
  118ed4:	e59e3000 	ldr	r3, [lr]
  118ed8:	e5cc3000 	strb	r3, [ip]
  118edc:	e24b306b 	sub	r3, fp, #107	; 0x6b
  118ee0:	e3a0205f 	mov	r2, #95	; 0x5f
  118ee4:	e3a01000 	mov	r1, #0
  118ee8:	e1a00003 	mov	r0, r3
  118eec:	eb00a15a 	bl	14145c <memset>
      strcat(errstr, desc->desc);
  118ef0:	e51b3094 	ldr	r3, [fp, #-148]	; 0xffffff6c
  118ef4:	e5932000 	ldr	r2, [r3]
  118ef8:	e24b308c 	sub	r3, fp, #140	; 0x8c
  118efc:	e1a01002 	mov	r1, r2
  118f00:	e1a00003 	mov	r0, r3
  118f04:	eb00a1ba 	bl	1415f4 <strcat>
      LWIP_ASSERT(errstr, 0);
  118f08:	e24b308c 	sub	r3, fp, #140	; 0x8c
  118f0c:	e1a00003 	mov	r0, r3
  118f10:	ebffa87f 	bl	103114 <rt_kprintf>
  118f14:	e3a010a5 	mov	r1, #165	; 0xa5
  118f18:	e3070564 	movw	r0, #30052	; 0x7564
  118f1c:	e3400014 	movt	r0, #20
  118f20:	ebffc84f 	bl	10b064 <sys_arch_assert>
  for (k = 0; k < MEMP_SANITY_REGION_BEFORE_ALIGNED; k++) {
  118f24:	e15b30b6 	ldrh	r3, [fp, #-6]
  118f28:	e2833001 	add	r3, r3, #1
  118f2c:	e14b30b6 	strh	r3, [fp, #-6]
  118f30:	e15b30b6 	ldrh	r3, [fp, #-6]
  118f34:	e353000f 	cmp	r3, #15
  118f38:	9affffd7 	bls	118e9c <memp_overflow_check_element_underflow+0x2c>
  }
#else /* MEMP_SANITY_REGION_BEFORE_ALIGNED > 0 */
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(desc);
#endif /* MEMP_SANITY_REGION_BEFORE_ALIGNED > 0 */
}
  118f3c:	e320f000 	nop	{0}
  118f40:	e24bd004 	sub	sp, fp, #4
  118f44:	e8bd8800 	pop	{fp, pc}

00118f48 <memp_overflow_init_element>:
/**
 * Initialize the restricted area of on memp element.
 */
static void
memp_overflow_init_element(struct memp *p, const struct memp_desc *desc)
{
  118f48:	e92d4800 	push	{fp, lr}
  118f4c:	e28db004 	add	fp, sp, #4
  118f50:	e24dd010 	sub	sp, sp, #16
  118f54:	e50b0010 	str	r0, [fp, #-16]
  118f58:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
#if MEMP_SANITY_REGION_BEFORE_ALIGNED > 0 || MEMP_SANITY_REGION_AFTER_ALIGNED > 0
  u8_t *m;
#if MEMP_SANITY_REGION_BEFORE_ALIGNED > 0
  m = (u8_t*)p + MEMP_SIZE - MEMP_SANITY_REGION_BEFORE_ALIGNED;
  118f5c:	e51b3010 	ldr	r3, [fp, #-16]
  118f60:	e283300c 	add	r3, r3, #12
  118f64:	e50b3008 	str	r3, [fp, #-8]
  memset(m, 0xcd, MEMP_SANITY_REGION_BEFORE_ALIGNED);
  118f68:	e3a02010 	mov	r2, #16
  118f6c:	e3a010cd 	mov	r1, #205	; 0xcd
  118f70:	e51b0008 	ldr	r0, [fp, #-8]
  118f74:	eb00a138 	bl	14145c <memset>
#endif
#if MEMP_SANITY_REGION_AFTER_ALIGNED > 0
  m = (u8_t*)p + MEMP_SIZE + desc->size;
  118f78:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  118f7c:	e1d330b8 	ldrh	r3, [r3, #8]
  118f80:	e283301c 	add	r3, r3, #28
  118f84:	e51b2010 	ldr	r2, [fp, #-16]
  118f88:	e0823003 	add	r3, r2, r3
  118f8c:	e50b3008 	str	r3, [fp, #-8]
  memset(m, 0xcd, MEMP_SANITY_REGION_AFTER_ALIGNED);
  118f90:	e3a02010 	mov	r2, #16
  118f94:	e3a010cd 	mov	r1, #205	; 0xcd
  118f98:	e51b0008 	ldr	r0, [fp, #-8]
  118f9c:	eb00a12e 	bl	14145c <memset>
#endif
#else /* MEMP_SANITY_REGION_BEFORE_ALIGNED > 0 || MEMP_SANITY_REGION_AFTER_ALIGNED > 0 */
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(desc);
#endif /* MEMP_SANITY_REGION_BEFORE_ALIGNED > 0 || MEMP_SANITY_REGION_AFTER_ALIGNED > 0 */
}
  118fa0:	e320f000 	nop	{0}
  118fa4:	e24bd004 	sub	sp, fp, #4
  118fa8:	e8bd8800 	pop	{fp, pc}

00118fac <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
  118fac:	e92d4800 	push	{fp, lr}
  118fb0:	e28db004 	add	fp, sp, #4
  118fb4:	e24dd010 	sub	sp, sp, #16
  118fb8:	e50b0010 	str	r0, [fp, #-16]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
  118fbc:	e51b3010 	ldr	r3, [fp, #-16]
  118fc0:	e5933010 	ldr	r3, [r3, #16]
  118fc4:	e3a02000 	mov	r2, #0
  118fc8:	e5832000 	str	r2, [r3]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
  118fcc:	e51b3010 	ldr	r3, [fp, #-16]
  118fd0:	e593300c 	ldr	r3, [r3, #12]
  118fd4:	e2833003 	add	r3, r3, #3
  118fd8:	e3c33003 	bic	r3, r3, #3
  118fdc:	e50b300c 	str	r3, [fp, #-12]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
  118fe0:	e3a03000 	mov	r3, #0
  118fe4:	e50b3008 	str	r3, [fp, #-8]
  118fe8:	ea000014 	b	119040 <memp_init_pool+0x94>
    memp->next = *desc->tab;
  118fec:	e51b3010 	ldr	r3, [fp, #-16]
  118ff0:	e5933010 	ldr	r3, [r3, #16]
  118ff4:	e5932000 	ldr	r2, [r3]
  118ff8:	e51b300c 	ldr	r3, [fp, #-12]
  118ffc:	e5832000 	str	r2, [r3]
    *desc->tab = memp;
  119000:	e51b3010 	ldr	r3, [fp, #-16]
  119004:	e5933010 	ldr	r3, [r3, #16]
  119008:	e51b200c 	ldr	r2, [fp, #-12]
  11900c:	e5832000 	str	r2, [r3]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
  119010:	e51b1010 	ldr	r1, [fp, #-16]
  119014:	e51b000c 	ldr	r0, [fp, #-12]
  119018:	ebffffca 	bl	118f48 <memp_overflow_init_element>
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
  11901c:	e51b3010 	ldr	r3, [fp, #-16]
  119020:	e1d330b8 	ldrh	r3, [r3, #8]
#if MEMP_OVERFLOW_CHECK
      + MEMP_SANITY_REGION_AFTER_ALIGNED
  119024:	e283302c 	add	r3, r3, #44	; 0x2c
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
  119028:	e51b200c 	ldr	r2, [fp, #-12]
  11902c:	e0823003 	add	r3, r2, r3
  119030:	e50b300c 	str	r3, [fp, #-12]
  for (i = 0; i < desc->num; ++i) {
  119034:	e51b3008 	ldr	r3, [fp, #-8]
  119038:	e2833001 	add	r3, r3, #1
  11903c:	e50b3008 	str	r3, [fp, #-8]
  119040:	e51b3010 	ldr	r3, [fp, #-16]
  119044:	e1d330ba 	ldrh	r3, [r3, #10]
  119048:	e1a02003 	mov	r2, r3
  11904c:	e51b3008 	ldr	r3, [fp, #-8]
  119050:	e1530002 	cmp	r3, r2
  119054:	baffffe4 	blt	118fec <memp_init_pool+0x40>
#endif
    );
  }
#if MEMP_STATS
  desc->stats->avail = desc->num;
  119058:	e51b3010 	ldr	r3, [fp, #-16]
  11905c:	e5933004 	ldr	r3, [r3, #4]
  119060:	e51b2010 	ldr	r2, [fp, #-16]
  119064:	e1d220ba 	ldrh	r2, [r2, #10]
  119068:	e1c320b6 	strh	r2, [r3, #6]
#endif /* MEMP_STATS */
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
  11906c:	e51b3010 	ldr	r3, [fp, #-16]
  119070:	e5933004 	ldr	r3, [r3, #4]
  119074:	e51b2010 	ldr	r2, [fp, #-16]
  119078:	e5922000 	ldr	r2, [r2]
  11907c:	e5832000 	str	r2, [r3]
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
  119080:	e320f000 	nop	{0}
  119084:	e24bd004 	sub	sp, fp, #4
  119088:	e8bd8800 	pop	{fp, pc}

0011908c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
  11908c:	e92d4800 	push	{fp, lr}
  119090:	e28db004 	add	fp, sp, #4
  119094:	e24dd008 	sub	sp, sp, #8
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
  119098:	e3a03000 	mov	r3, #0
  11909c:	e14b30b6 	strh	r3, [fp, #-6]
  1190a0:	ea000014 	b	1190f8 <memp_init+0x6c>
    memp_init_pool(memp_pools[i]);
  1190a4:	e15b20b6 	ldrh	r2, [fp, #-6]
  1190a8:	e3073520 	movw	r3, #29984	; 0x7520
  1190ac:	e3403014 	movt	r3, #20
  1190b0:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  1190b4:	e1a00003 	mov	r0, r3
  1190b8:	ebffffbb 	bl	118fac <memp_init_pool>

#if LWIP_STATS && MEMP_STATS
    lwip_stats.memp[i] = memp_pools[i]->stats;
  1190bc:	e15b20b6 	ldrh	r2, [fp, #-6]
  1190c0:	e3073520 	movw	r3, #29984	; 0x7520
  1190c4:	e3403014 	movt	r3, #20
  1190c8:	e7932102 	ldr	r2, [r3, r2, lsl #2]
  1190cc:	e15b30b6 	ldrh	r3, [fp, #-6]
  1190d0:	e5921004 	ldr	r1, [r2, #4]
  1190d4:	e3062840 	movw	r2, #26688	; 0x6840
  1190d8:	e3402057 	movt	r2, #87	; 0x57
  1190dc:	e2833034 	add	r3, r3, #52	; 0x34
  1190e0:	e1a03103 	lsl	r3, r3, #2
  1190e4:	e0823003 	add	r3, r2, r3
  1190e8:	e5831004 	str	r1, [r3, #4]
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
  1190ec:	e15b30b6 	ldrh	r3, [fp, #-6]
  1190f0:	e2833001 	add	r3, r3, #1
  1190f4:	e14b30b6 	strh	r3, [fp, #-6]
  1190f8:	e15b30b6 	ldrh	r3, [fp, #-6]
  1190fc:	e3530010 	cmp	r3, #16
  119100:	9affffe7 	bls	1190a4 <memp_init+0x18>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
  119104:	e320f000 	nop	{0}
  119108:	e24bd004 	sub	sp, fp, #4
  11910c:	e8bd8800 	pop	{fp, pc}

00119110 <do_memp_malloc_pool_fn>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
  119110:	e92d4800 	push	{fp, lr}
  119114:	e28db004 	add	fp, sp, #4
  119118:	e24dd018 	sub	sp, sp, #24
  11911c:	e50b0010 	str	r0, [fp, #-16]
  119120:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  119124:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
  119128:	ebffa443 	bl	10223c <rt_enter_critical>

  memp = *desc->tab;
  11912c:	e51b3010 	ldr	r3, [fp, #-16]
  119130:	e5933010 	ldr	r3, [r3, #16]
  119134:	e5933000 	ldr	r3, [r3]
  119138:	e50b3008 	str	r3, [fp, #-8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
  11913c:	e51b3008 	ldr	r3, [fp, #-8]
  119140:	e3530000 	cmp	r3, #0
  119144:	0a000036 	beq	119224 <do_memp_malloc_pool_fn+0x114>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
  119148:	e51b1010 	ldr	r1, [fp, #-16]
  11914c:	e51b0008 	ldr	r0, [fp, #-8]
  119150:	ebffff0f 	bl	118d94 <memp_overflow_check_element_overflow>
    memp_overflow_check_element_underflow(memp, desc);
  119154:	e51b1010 	ldr	r1, [fp, #-16]
  119158:	e51b0008 	ldr	r0, [fp, #-8]
  11915c:	ebffff43 	bl	118e70 <memp_overflow_check_element_underflow>
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
  119160:	e51b3010 	ldr	r3, [fp, #-16]
  119164:	e5933010 	ldr	r3, [r3, #16]
  119168:	e51b2008 	ldr	r2, [fp, #-8]
  11916c:	e5922000 	ldr	r2, [r2]
  119170:	e5832000 	str	r2, [r3]
#if MEMP_OVERFLOW_CHECK
    memp->next = NULL;
  119174:	e51b3008 	ldr	r3, [fp, #-8]
  119178:	e3a02000 	mov	r2, #0
  11917c:	e5832000 	str	r2, [r3]
#endif /* MEMP_OVERFLOW_CHECK */
#endif /* !MEMP_MEM_MALLOC */
#if MEMP_OVERFLOW_CHECK
    memp->file = file;
  119180:	e51b3008 	ldr	r3, [fp, #-8]
  119184:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  119188:	e5832004 	str	r2, [r3, #4]
    memp->line = line;
  11918c:	e51b3008 	ldr	r3, [fp, #-8]
  119190:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  119194:	e5832008 	str	r2, [r3, #8]
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
  119198:	e51b3008 	ldr	r3, [fp, #-8]
  11919c:	e2033003 	and	r3, r3, #3
  1191a0:	e3530000 	cmp	r3, #0
  1191a4:	0a000006 	beq	1191c4 <do_memp_malloc_pool_fn+0xb4>
  1191a8:	e3070690 	movw	r0, #30352	; 0x7690
  1191ac:	e3400014 	movt	r0, #20
  1191b0:	ebffa7d7 	bl	103114 <rt_kprintf>
  1191b4:	e3001149 	movw	r1, #329	; 0x149
  1191b8:	e3070564 	movw	r0, #30052	; 0x7564
  1191bc:	e3400014 	movt	r0, #20
  1191c0:	ebffc7a7 	bl	10b064 <sys_arch_assert>
                ((mem_ptr_t)memp % MEM_ALIGNMENT) == 0);
#if MEMP_STATS
    desc->stats->used++;
  1191c4:	e51b3010 	ldr	r3, [fp, #-16]
  1191c8:	e5933004 	ldr	r3, [r3, #4]
  1191cc:	e1d320b8 	ldrh	r2, [r3, #8]
  1191d0:	e2822001 	add	r2, r2, #1
  1191d4:	e6ff2072 	uxth	r2, r2
  1191d8:	e1c320b8 	strh	r2, [r3, #8]
    if (desc->stats->used > desc->stats->max) {
  1191dc:	e51b3010 	ldr	r3, [fp, #-16]
  1191e0:	e5933004 	ldr	r3, [r3, #4]
  1191e4:	e1d320b8 	ldrh	r2, [r3, #8]
  1191e8:	e51b3010 	ldr	r3, [fp, #-16]
  1191ec:	e5933004 	ldr	r3, [r3, #4]
  1191f0:	e1d330ba 	ldrh	r3, [r3, #10]
  1191f4:	e1520003 	cmp	r2, r3
  1191f8:	9a000005 	bls	119214 <do_memp_malloc_pool_fn+0x104>
      desc->stats->max = desc->stats->used;
  1191fc:	e51b3010 	ldr	r3, [fp, #-16]
  119200:	e5932004 	ldr	r2, [r3, #4]
  119204:	e51b3010 	ldr	r3, [fp, #-16]
  119208:	e5933004 	ldr	r3, [r3, #4]
  11920c:	e1d220b8 	ldrh	r2, [r2, #8]
  119210:	e1c320ba 	strh	r2, [r3, #10]
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
  119214:	ebffa40e 	bl	102254 <rt_exit_critical>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
  119218:	e51b3008 	ldr	r3, [fp, #-8]
  11921c:	e283301c 	add	r3, r3, #28
  119220:	ea000007 	b	119244 <do_memp_malloc_pool_fn+0x134>
  } else {
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
#if MEMP_STATS
    desc->stats->err++;
  119224:	e51b3010 	ldr	r3, [fp, #-16]
  119228:	e5933004 	ldr	r3, [r3, #4]
  11922c:	e1d320b4 	ldrh	r2, [r3, #4]
  119230:	e2822001 	add	r2, r2, #1
  119234:	e6ff2072 	uxth	r2, r2
  119238:	e1c320b4 	strh	r2, [r3, #4]
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
  11923c:	ebffa404 	bl	102254 <rt_exit_critical>
  return NULL;
  119240:	e3a03000 	mov	r3, #0
}
  119244:	e1a00003 	mov	r0, r3
  119248:	e24bd004 	sub	sp, fp, #4
  11924c:	e8bd8800 	pop	{fp, pc}

00119250 <memp_malloc_pool_fn>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
  119250:	e92d4800 	push	{fp, lr}
  119254:	e28db004 	add	fp, sp, #4
  119258:	e24dd010 	sub	sp, sp, #16
  11925c:	e50b0008 	str	r0, [fp, #-8]
  119260:	e50b100c 	str	r1, [fp, #-12]
  119264:	e50b2010 	str	r2, [fp, #-16]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
  119268:	e51b3008 	ldr	r3, [fp, #-8]
  11926c:	e3530000 	cmp	r3, #0
  119270:	1a000006 	bne	119290 <memp_malloc_pool_fn+0x40>
  119274:	e30706b4 	movw	r0, #30388	; 0x76b4
  119278:	e3400014 	movt	r0, #20
  11927c:	ebffa7a4 	bl	103114 <rt_kprintf>
  119280:	e3a01f5b 	mov	r1, #364	; 0x16c
  119284:	e3070564 	movw	r0, #30052	; 0x7564
  119288:	e3400014 	movt	r0, #20
  11928c:	ebffc774 	bl	10b064 <sys_arch_assert>
  if (desc == NULL) {
  119290:	e51b3008 	ldr	r3, [fp, #-8]
  119294:	e3530000 	cmp	r3, #0
  119298:	1a000001 	bne	1192a4 <memp_malloc_pool_fn+0x54>
    return NULL;
  11929c:	e3a03000 	mov	r3, #0
  1192a0:	ea000004 	b	1192b8 <memp_malloc_pool_fn+0x68>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
#else
  return do_memp_malloc_pool_fn(desc, file, line);
  1192a4:	e51b2010 	ldr	r2, [fp, #-16]
  1192a8:	e51b100c 	ldr	r1, [fp, #-12]
  1192ac:	e51b0008 	ldr	r0, [fp, #-8]
  1192b0:	ebffff96 	bl	119110 <do_memp_malloc_pool_fn>
  1192b4:	e1a03000 	mov	r3, r0
#endif
}
  1192b8:	e1a00003 	mov	r0, r3
  1192bc:	e24bd004 	sub	sp, fp, #4
  1192c0:	e8bd8800 	pop	{fp, pc}

001192c4 <memp_malloc_fn>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
  1192c4:	e92d4800 	push	{fp, lr}
  1192c8:	e28db004 	add	fp, sp, #4
  1192cc:	e24dd018 	sub	sp, sp, #24
  1192d0:	e50b0010 	str	r0, [fp, #-16]
  1192d4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1192d8:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
  1192dc:	e51b3010 	ldr	r3, [fp, #-16]
  1192e0:	e3530010 	cmp	r3, #16
  1192e4:	9a000008 	bls	11930c <memp_malloc_fn+0x48>
  1192e8:	e30706c8 	movw	r0, #30408	; 0x76c8
  1192ec:	e3400014 	movt	r0, #20
  1192f0:	ebffa787 	bl	103114 <rt_kprintf>
  1192f4:	e3001187 	movw	r1, #391	; 0x187
  1192f8:	e3070564 	movw	r0, #30052	; 0x7564
  1192fc:	e3400014 	movt	r0, #20
  119300:	ebffc757 	bl	10b064 <sys_arch_assert>
  119304:	e3a03000 	mov	r3, #0
  119308:	ea000009 	b	119334 <memp_malloc_fn+0x70>
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
  11930c:	e3073520 	movw	r3, #29984	; 0x7520
  119310:	e3403014 	movt	r3, #20
  119314:	e51b2010 	ldr	r2, [fp, #-16]
  119318:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  11931c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  119320:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  119324:	e1a00003 	mov	r0, r3
  119328:	ebffff78 	bl	119110 <do_memp_malloc_pool_fn>
  11932c:	e50b0008 	str	r0, [fp, #-8]
#endif

  return memp;
  119330:	e51b3008 	ldr	r3, [fp, #-8]
}
  119334:	e1a00003 	mov	r0, r3
  119338:	e24bd004 	sub	sp, fp, #4
  11933c:	e8bd8800 	pop	{fp, pc}

00119340 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
  119340:	e92d4800 	push	{fp, lr}
  119344:	e28db004 	add	fp, sp, #4
  119348:	e24dd010 	sub	sp, sp, #16
  11934c:	e50b0010 	str	r0, [fp, #-16]
  119350:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
  119354:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  119358:	e2033003 	and	r3, r3, #3
  11935c:	e3530000 	cmp	r3, #0
  119360:	0a000006 	beq	119380 <do_memp_free_pool+0x40>
  119364:	e30706e8 	movw	r0, #30440	; 0x76e8
  119368:	e3400014 	movt	r0, #20
  11936c:	ebffa768 	bl	103114 <rt_kprintf>
  119370:	e300119d 	movw	r1, #413	; 0x19d
  119374:	e3070564 	movw	r0, #30052	; 0x7564
  119378:	e3400014 	movt	r0, #20
  11937c:	ebffc738 	bl	10b064 <sys_arch_assert>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
  119380:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  119384:	e243301c 	sub	r3, r3, #28
  119388:	e50b3008 	str	r3, [fp, #-8]

  SYS_ARCH_PROTECT(old_level);
  11938c:	ebffa3aa 	bl	10223c <rt_enter_critical>

#if MEMP_OVERFLOW_CHECK == 1
  memp_overflow_check_element_overflow(memp, desc);
  119390:	e51b1010 	ldr	r1, [fp, #-16]
  119394:	e51b0008 	ldr	r0, [fp, #-8]
  119398:	ebfffe7d 	bl	118d94 <memp_overflow_check_element_overflow>
  memp_overflow_check_element_underflow(memp, desc);
  11939c:	e51b1010 	ldr	r1, [fp, #-16]
  1193a0:	e51b0008 	ldr	r0, [fp, #-8]
  1193a4:	ebfffeb1 	bl	118e70 <memp_overflow_check_element_underflow>
#endif /* MEMP_OVERFLOW_CHECK */

#if MEMP_STATS
  desc->stats->used--;
  1193a8:	e51b3010 	ldr	r3, [fp, #-16]
  1193ac:	e5933004 	ldr	r3, [r3, #4]
  1193b0:	e1d320b8 	ldrh	r2, [r3, #8]
  1193b4:	e2422001 	sub	r2, r2, #1
  1193b8:	e6ff2072 	uxth	r2, r2
  1193bc:	e1c320b8 	strh	r2, [r3, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
  1193c0:	e51b3010 	ldr	r3, [fp, #-16]
  1193c4:	e5933010 	ldr	r3, [r3, #16]
  1193c8:	e5932000 	ldr	r2, [r3]
  1193cc:	e51b3008 	ldr	r3, [fp, #-8]
  1193d0:	e5832000 	str	r2, [r3]
  *desc->tab = memp;
  1193d4:	e51b3010 	ldr	r3, [fp, #-16]
  1193d8:	e5933010 	ldr	r3, [r3, #16]
  1193dc:	e51b2008 	ldr	r2, [fp, #-8]
  1193e0:	e5832000 	str	r2, [r3]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
  1193e4:	ebffa39a 	bl	102254 <rt_exit_critical>
#endif /* !MEMP_MEM_MALLOC */
}
  1193e8:	e320f000 	nop	{0}
  1193ec:	e24bd004 	sub	sp, fp, #4
  1193f0:	e8bd8800 	pop	{fp, pc}

001193f4 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc* desc, void *mem)
{
  1193f4:	e92d4800 	push	{fp, lr}
  1193f8:	e28db004 	add	fp, sp, #4
  1193fc:	e24dd008 	sub	sp, sp, #8
  119400:	e50b0008 	str	r0, [fp, #-8]
  119404:	e50b100c 	str	r1, [fp, #-12]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
  119408:	e51b3008 	ldr	r3, [fp, #-8]
  11940c:	e3530000 	cmp	r3, #0
  119410:	1a000006 	bne	119430 <memp_free_pool+0x3c>
  119414:	e30706b4 	movw	r0, #30388	; 0x76b4
  119418:	e3400014 	movt	r0, #20
  11941c:	ebffa73c 	bl	103114 <rt_kprintf>
  119420:	e30011c6 	movw	r1, #454	; 0x1c6
  119424:	e3070564 	movw	r0, #30052	; 0x7564
  119428:	e3400014 	movt	r0, #20
  11942c:	ebffc70c 	bl	10b064 <sys_arch_assert>
  if ((desc == NULL) || (mem == NULL)) {
  119430:	e51b3008 	ldr	r3, [fp, #-8]
  119434:	e3530000 	cmp	r3, #0
  119438:	0a000006 	beq	119458 <memp_free_pool+0x64>
  11943c:	e51b300c 	ldr	r3, [fp, #-12]
  119440:	e3530000 	cmp	r3, #0
  119444:	0a000003 	beq	119458 <memp_free_pool+0x64>
    return;
  }

  do_memp_free_pool(desc, mem);
  119448:	e51b100c 	ldr	r1, [fp, #-12]
  11944c:	e51b0008 	ldr	r0, [fp, #-8]
  119450:	ebffffba 	bl	119340 <do_memp_free_pool>
  119454:	ea000000 	b	11945c <memp_free_pool+0x68>
    return;
  119458:	e320f000 	nop	{0}
}
  11945c:	e24bd004 	sub	sp, fp, #4
  119460:	e8bd8800 	pop	{fp, pc}

00119464 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
  119464:	e92d4800 	push	{fp, lr}
  119468:	e28db004 	add	fp, sp, #4
  11946c:	e24dd008 	sub	sp, sp, #8
  119470:	e50b0008 	str	r0, [fp, #-8]
  119474:	e50b100c 	str	r1, [fp, #-12]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
  119478:	e51b3008 	ldr	r3, [fp, #-8]
  11947c:	e3530010 	cmp	r3, #16
  119480:	9a000007 	bls	1194a4 <memp_free+0x40>
  119484:	e3070708 	movw	r0, #30472	; 0x7708
  119488:	e3400014 	movt	r0, #20
  11948c:	ebffa720 	bl	103114 <rt_kprintf>
  119490:	e30011db 	movw	r1, #475	; 0x1db
  119494:	e3070564 	movw	r0, #30052	; 0x7564
  119498:	e3400014 	movt	r0, #20
  11949c:	ebffc6f0 	bl	10b064 <sys_arch_assert>
  1194a0:	ea00000b 	b	1194d4 <memp_free+0x70>

  if (mem == NULL) {
  1194a4:	e51b300c 	ldr	r3, [fp, #-12]
  1194a8:	e3530000 	cmp	r3, #0
  1194ac:	0a000007 	beq	1194d0 <memp_free+0x6c>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
  1194b0:	e3073520 	movw	r3, #29984	; 0x7520
  1194b4:	e3403014 	movt	r3, #20
  1194b8:	e51b2008 	ldr	r2, [fp, #-8]
  1194bc:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  1194c0:	e51b100c 	ldr	r1, [fp, #-12]
  1194c4:	e1a00003 	mov	r0, r3
  1194c8:	ebffff9c 	bl	119340 <do_memp_free_pool>
  1194cc:	ea000000 	b	1194d4 <memp_free+0x70>
    return;
  1194d0:	e320f000 	nop	{0}
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
  1194d4:	e24bd004 	sub	sp, fp, #4
  1194d8:	e8bd8800 	pop	{fp, pc}

001194dc <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
  1194dc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1194e0:	e28db000 	add	fp, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
  1194e4:	e320f000 	nop	{0}
  1194e8:	e28bd000 	add	sp, fp, #0
  1194ec:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1194f0:	e12fff1e 	bx	lr

001194f4 <netif_input>:
 * Only works if the netif driver correctly sets
 * NETIF_FLAG_ETHARP and/or NETIF_FLAG_ETHERNET flag!
 */
err_t
netif_input(struct pbuf *p, struct netif *inp)
{
  1194f4:	e92d4800 	push	{fp, lr}
  1194f8:	e28db004 	add	fp, sp, #4
  1194fc:	e24dd008 	sub	sp, sp, #8
  119500:	e50b0008 	str	r0, [fp, #-8]
  119504:	e50b100c 	str	r1, [fp, #-12]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
  119508:	e51b300c 	ldr	r3, [fp, #-12]
  11950c:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119510:	e2033018 	and	r3, r3, #24
  119514:	e3530000 	cmp	r3, #0
  119518:	0a000004 	beq	119530 <netif_input+0x3c>
    return ethernet_input(p, inp);
  11951c:	e51b100c 	ldr	r1, [fp, #-12]
  119520:	e51b0008 	ldr	r0, [fp, #-8]
  119524:	eb003e2f 	bl	128de8 <ethernet_input>
  119528:	e1a03000 	mov	r3, r0
  11952c:	ea000003 	b	119540 <netif_input+0x4c>
  } else
#endif /* LWIP_ETHERNET */
  return ip_input(p, inp);
  119530:	e51b100c 	ldr	r1, [fp, #-12]
  119534:	e51b0008 	ldr	r0, [fp, #-8]
  119538:	eb006036 	bl	131618 <ip4_input>
  11953c:	e1a03000 	mov	r3, r0
}
  119540:	e1a00003 	mov	r0, r3
  119544:	e24bd004 	sub	sp, fp, #4
  119548:	e8bd8800 	pop	{fp, pc}

0011954c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
  11954c:	e92d4800 	push	{fp, lr}
  119550:	e28db004 	add	fp, sp, #4
  119554:	e24dd010 	sub	sp, sp, #16
  119558:	e50b0008 	str	r0, [fp, #-8]
  11955c:	e50b100c 	str	r1, [fp, #-12]
  119560:	e50b2010 	str	r2, [fp, #-16]
  119564:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
#if LWIP_IPV6
  s8_t i;
#endif
  LWIP_ASSERT("No init function given", init != NULL);
  119568:	e59b3008 	ldr	r3, [fp, #8]
  11956c:	e3530000 	cmp	r3, #0
  119570:	1a000006 	bne	119590 <netif_add+0x44>
  119574:	e3070724 	movw	r0, #30500	; 0x7724
  119578:	e3400014 	movt	r0, #20
  11957c:	ebffa6e4 	bl	103114 <rt_kprintf>
  119580:	e3001105 	movw	r1, #261	; 0x105
  119584:	e307073c 	movw	r0, #30524	; 0x773c
  119588:	e3400014 	movt	r0, #20
  11958c:	ebffc6b4 	bl	10b064 <sys_arch_assert>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
  119590:	e51b3008 	ldr	r3, [fp, #-8]
  119594:	e3a02000 	mov	r2, #0
  119598:	e5832004 	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
  11959c:	e51b3008 	ldr	r3, [fp, #-8]
  1195a0:	e3a02000 	mov	r2, #0
  1195a4:	e5832008 	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
  1195a8:	e51b3008 	ldr	r3, [fp, #-8]
  1195ac:	e3a02000 	mov	r2, #0
  1195b0:	e583200c 	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
  1195b4:	e51b3008 	ldr	r3, [fp, #-8]
  1195b8:	e3a02000 	mov	r2, #0
  1195bc:	e5c32041 	strb	r2, [r3, #65]	; 0x41
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
  1195c0:	e51b3008 	ldr	r3, [fp, #-8]
  1195c4:	e2833028 	add	r3, r3, #40	; 0x28
  1195c8:	e3a02008 	mov	r2, #8
  1195cc:	e3a01000 	mov	r1, #0
  1195d0:	e1a00003 	mov	r0, r3
  1195d4:	eb009fa0 	bl	14145c <memset>
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
  1195d8:	e51b3008 	ldr	r3, [fp, #-8]
  1195dc:	e3a02003 	mov	r2, #3
  1195e0:	e5c32030 	strb	r2, [r3, #48]	; 0x30
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
  1195e4:	e51b3008 	ldr	r3, [fp, #-8]
  1195e8:	e3a02000 	mov	r2, #0
  1195ec:	e583201c 	str	r2, [r3, #28]
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
  1195f0:	e51b3008 	ldr	r3, [fp, #-8]
  1195f4:	e3a02000 	mov	r2, #0
  1195f8:	e5832020 	str	r2, [r3, #32]
#endif /* LWIP_NETIF_LINK_CALLBACK */
#if LWIP_IGMP
  netif->igmp_mac_filter = NULL;
  1195fc:	e51b3008 	ldr	r3, [fp, #-8]
  119600:	e3a02000 	mov	r2, #0
  119604:	e583207c 	str	r2, [r3, #124]	; 0x7c
#endif /* LWIP_IGMP */
#if LWIP_IPV6 && LWIP_IPV6_MLD
  netif->mld_mac_filter = NULL;
#endif /* LWIP_IPV6 && LWIP_IPV6_MLD */
#if ENABLE_LOOPBACK
  netif->loop_first = NULL;
  119608:	e51b3008 	ldr	r3, [fp, #-8]
  11960c:	e3a02000 	mov	r2, #0
  119610:	e5832080 	str	r2, [r3, #128]	; 0x80
  netif->loop_last = NULL;
  119614:	e51b3008 	ldr	r3, [fp, #-8]
  119618:	e3a02000 	mov	r2, #0
  11961c:	e5832084 	str	r2, [r3, #132]	; 0x84
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
  119620:	e51b3008 	ldr	r3, [fp, #-8]
  119624:	e59b2004 	ldr	r2, [fp, #4]
  119628:	e5832024 	str	r2, [r3, #36]	; 0x24
  netif->num = netif_num++;
  11962c:	e30f3214 	movw	r3, #61972	; 0xf214
  119630:	e3403014 	movt	r3, #20
  119634:	e5d32000 	ldrb	r2, [r3]
  119638:	e2823001 	add	r3, r2, #1
  11963c:	e6ef1073 	uxtb	r1, r3
  119640:	e30f3214 	movw	r3, #61972	; 0xf214
  119644:	e3403014 	movt	r3, #20
  119648:	e5c31000 	strb	r1, [r3]
  11964c:	e51b3008 	ldr	r3, [fp, #-8]
  119650:	e5c32044 	strb	r2, [r3, #68]	; 0x44
  netif->input = input;
  119654:	e51b3008 	ldr	r3, [fp, #-8]
  119658:	e59b200c 	ldr	r2, [fp, #12]
  11965c:	e5832010 	str	r2, [r3, #16]
  NETIF_SET_HWADDRHINT(netif, NULL);
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */
#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
  119660:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  119664:	e51b2010 	ldr	r2, [fp, #-16]
  119668:	e51b100c 	ldr	r1, [fp, #-12]
  11966c:	e51b0008 	ldr	r0, [fp, #-8]
  119670:	eb00001b 	bl	1196e4 <netif_set_addr>
#endif /* LWIP_IPV4 */
  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
  119674:	e59b3008 	ldr	r3, [fp, #8]
  119678:	e51b0008 	ldr	r0, [fp, #-8]
  11967c:	e12fff33 	blx	r3
  119680:	e1a03000 	mov	r3, r0
  119684:	e3530000 	cmp	r3, #0
  119688:	0a000001 	beq	119694 <netif_add+0x148>
    return NULL;
  11968c:	e3a03000 	mov	r3, #0
  119690:	ea000010 	b	1196d8 <netif_add+0x18c>
  }
  /* add this netif to the list */
  netif->next = netif_list;
  119694:	e3063834 	movw	r3, #26676	; 0x6834
  119698:	e3403057 	movt	r3, #87	; 0x57
  11969c:	e5932000 	ldr	r2, [r3]
  1196a0:	e51b3008 	ldr	r3, [fp, #-8]
  1196a4:	e5832000 	str	r2, [r3]
  netif_list = netif;
  1196a8:	e3063834 	movw	r3, #26676	; 0x6834
  1196ac:	e3403057 	movt	r3, #87	; 0x57
  1196b0:	e51b2008 	ldr	r2, [fp, #-8]
  1196b4:	e5832000 	str	r2, [r3]
  mib2_netif_added(netif);
#if LWIP_IGMP
  /* start IGMP processing */
  if (netif->flags & NETIF_FLAG_IGMP) {
  1196b8:	e51b3008 	ldr	r3, [fp, #-8]
  1196bc:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  1196c0:	e2033020 	and	r3, r3, #32
  1196c4:	e3530000 	cmp	r3, #0
  1196c8:	0a000001 	beq	1196d4 <netif_add+0x188>
    igmp_start(netif);
  1196cc:	e51b0008 	ldr	r0, [fp, #-8]
  1196d0:	eb005a97 	bl	130134 <igmp_start>
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
  1196d4:	e51b3008 	ldr	r3, [fp, #-8]
}
  1196d8:	e1a00003 	mov	r0, r3
  1196dc:	e24bd004 	sub	sp, fp, #4
  1196e0:	e8bd8800 	pop	{fp, pc}

001196e4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
  1196e4:	e92d4800 	push	{fp, lr}
  1196e8:	e28db004 	add	fp, sp, #4
  1196ec:	e24dd010 	sub	sp, sp, #16
  1196f0:	e50b0008 	str	r0, [fp, #-8]
  1196f4:	e50b100c 	str	r1, [fp, #-12]
  1196f8:	e50b2010 	str	r2, [fp, #-16]
  1196fc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  if (ip4_addr_isany(ipaddr)) {
  119700:	e51b300c 	ldr	r3, [fp, #-12]
  119704:	e3530000 	cmp	r3, #0
  119708:	0a000003 	beq	11971c <netif_set_addr+0x38>
  11970c:	e51b300c 	ldr	r3, [fp, #-12]
  119710:	e5933000 	ldr	r3, [r3]
  119714:	e3530000 	cmp	r3, #0
  119718:	1a000009 	bne	119744 <netif_set_addr+0x60>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
  11971c:	e51b100c 	ldr	r1, [fp, #-12]
  119720:	e51b0008 	ldr	r0, [fp, #-8]
  119724:	eb00009d 	bl	1199a0 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
  119728:	e51b1010 	ldr	r1, [fp, #-16]
  11972c:	e51b0008 	ldr	r0, [fp, #-8]
  119730:	eb0000fa 	bl	119b20 <netif_set_netmask>
    netif_set_gw(netif, gw);
  119734:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  119738:	e51b0008 	ldr	r0, [fp, #-8]
  11973c:	eb0000de 	bl	119abc <netif_set_gw>
  119740:	ea000008 	b	119768 <netif_set_addr+0x84>
  } else {
    netif_set_netmask(netif, netmask);
  119744:	e51b1010 	ldr	r1, [fp, #-16]
  119748:	e51b0008 	ldr	r0, [fp, #-8]
  11974c:	eb0000f3 	bl	119b20 <netif_set_netmask>
    netif_set_gw(netif, gw);
  119750:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  119754:	e51b0008 	ldr	r0, [fp, #-8]
  119758:	eb0000d7 	bl	119abc <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
  11975c:	e51b100c 	ldr	r1, [fp, #-12]
  119760:	e51b0008 	ldr	r0, [fp, #-8]
  119764:	eb00008d 	bl	1199a0 <netif_set_ipaddr>
  }
}
  119768:	e320f000 	nop	{0}
  11976c:	e24bd004 	sub	sp, fp, #4
  119770:	e8bd8800 	pop	{fp, pc}

00119774 <netif_remove>:
 *
 * @param netif the network interface to remove
 */
void
netif_remove(struct netif *netif)
{
  119774:	e92d4800 	push	{fp, lr}
  119778:	e28db004 	add	fp, sp, #4
  11977c:	e24dd010 	sub	sp, sp, #16
  119780:	e50b0010 	str	r0, [fp, #-16]
#if LWIP_IPV6
  int i;
#endif

  if (netif == NULL) {
  119784:	e51b3010 	ldr	r3, [fp, #-16]
  119788:	e3530000 	cmp	r3, #0
  11978c:	0a00004e 	beq	1198cc <netif_remove+0x158>
    return;
  }

#if LWIP_IPV4
  if (!ip4_addr_isany_val(*netif_ip4_addr(netif))) {
  119790:	e51b3010 	ldr	r3, [fp, #-16]
  119794:	e2833004 	add	r3, r3, #4
  119798:	e5933000 	ldr	r3, [r3]
  11979c:	e3530000 	cmp	r3, #0
  1197a0:	0a00000e 	beq	1197e0 <netif_remove+0x6c>
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), NULL);
  1197a4:	e51b3010 	ldr	r3, [fp, #-16]
  1197a8:	e2833004 	add	r3, r3, #4
  1197ac:	e3a01000 	mov	r1, #0
  1197b0:	e1a00003 	mov	r0, r3
  1197b4:	eb001aea 	bl	120364 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), NULL);
  1197b8:	e51b3010 	ldr	r3, [fp, #-16]
  1197bc:	e2833004 	add	r3, r3, #4
  1197c0:	e3a01000 	mov	r1, #0
  1197c4:	e1a00003 	mov	r0, r3
  1197c8:	eb003d5a 	bl	128d38 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
    raw_netif_ip_addr_changed(netif_ip_addr4(netif), NULL);
  1197cc:	e51b3010 	ldr	r3, [fp, #-16]
  1197d0:	e2833004 	add	r3, r3, #4
  1197d4:	e3a01000 	mov	r1, #0
  1197d8:	e1a00003 	mov	r0, r3
  1197dc:	eb000cb0 	bl	11caa4 <raw_netif_ip_addr_changed>
#endif /* LWIP_RAW */
  }

#if LWIP_IGMP
  /* stop IGMP processing */
  if (netif->flags & NETIF_FLAG_IGMP) {
  1197e0:	e51b3010 	ldr	r3, [fp, #-16]
  1197e4:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  1197e8:	e2033020 	and	r3, r3, #32
  1197ec:	e3530000 	cmp	r3, #0
  1197f0:	0a000001 	beq	1197fc <netif_remove+0x88>
    igmp_stop(netif);
  1197f4:	e51b0010 	ldr	r0, [fp, #-16]
  1197f8:	eb005a73 	bl	1301cc <igmp_stop>
#if LWIP_IPV6_MLD
  /* stop MLD processing */
  mld6_stop(netif);
#endif /* LWIP_IPV6_MLD */
#endif /* LWIP_IPV6 */
  if (netif_is_up(netif)) {
  1197fc:	e51b3010 	ldr	r3, [fp, #-16]
  119800:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119804:	e2033001 	and	r3, r3, #1
  119808:	e6ef3073 	uxtb	r3, r3
  11980c:	e3530000 	cmp	r3, #0
  119810:	0a000001 	beq	11981c <netif_remove+0xa8>
    /* set netif down before removing (call callback function) */
    netif_set_down(netif);
  119814:	e51b0010 	ldr	r0, [fp, #-16]
  119818:	eb00013a 	bl	119d08 <netif_set_down>
  }

  mib2_remove_ip4(netif);

  /* this netif is default? */
  if (netif_default == netif) {
  11981c:	e3063838 	movw	r3, #26680	; 0x6838
  119820:	e3403057 	movt	r3, #87	; 0x57
  119824:	e5933000 	ldr	r3, [r3]
  119828:	e51b2010 	ldr	r2, [fp, #-16]
  11982c:	e1520003 	cmp	r2, r3
  119830:	1a000001 	bne	11983c <netif_remove+0xc8>
    /* reset default netif */
    netif_set_default(NULL);
  119834:	e3a00000 	mov	r0, #0
  119838:	eb0000d1 	bl	119b84 <netif_set_default>
  }
  /*  is it the first netif? */
  if (netif_list == netif) {
  11983c:	e3063834 	movw	r3, #26676	; 0x6834
  119840:	e3403057 	movt	r3, #87	; 0x57
  119844:	e5933000 	ldr	r3, [r3]
  119848:	e51b2010 	ldr	r2, [fp, #-16]
  11984c:	e1520003 	cmp	r2, r3
  119850:	1a000005 	bne	11986c <netif_remove+0xf8>
    netif_list = netif->next;
  119854:	e51b3010 	ldr	r3, [fp, #-16]
  119858:	e5932000 	ldr	r2, [r3]
  11985c:	e3063834 	movw	r3, #26676	; 0x6834
  119860:	e3403057 	movt	r3, #87	; 0x57
  119864:	e5832000 	str	r2, [r3]
  119868:	ea000018 	b	1198d0 <netif_remove+0x15c>
  } else {
    /*  look for netif further down the list */
    struct netif * tmp_netif;
    for (tmp_netif = netif_list; tmp_netif != NULL; tmp_netif = tmp_netif->next) {
  11986c:	e3063834 	movw	r3, #26676	; 0x6834
  119870:	e3403057 	movt	r3, #87	; 0x57
  119874:	e5933000 	ldr	r3, [r3]
  119878:	e50b3008 	str	r3, [fp, #-8]
  11987c:	ea00000c 	b	1198b4 <netif_remove+0x140>
      if (tmp_netif->next == netif) {
  119880:	e51b3008 	ldr	r3, [fp, #-8]
  119884:	e5933000 	ldr	r3, [r3]
  119888:	e51b2010 	ldr	r2, [fp, #-16]
  11988c:	e1520003 	cmp	r2, r3
  119890:	1a000004 	bne	1198a8 <netif_remove+0x134>
        tmp_netif->next = netif->next;
  119894:	e51b3010 	ldr	r3, [fp, #-16]
  119898:	e5932000 	ldr	r2, [r3]
  11989c:	e51b3008 	ldr	r3, [fp, #-8]
  1198a0:	e5832000 	str	r2, [r3]
        break;
  1198a4:	ea000005 	b	1198c0 <netif_remove+0x14c>
    for (tmp_netif = netif_list; tmp_netif != NULL; tmp_netif = tmp_netif->next) {
  1198a8:	e51b3008 	ldr	r3, [fp, #-8]
  1198ac:	e5933000 	ldr	r3, [r3]
  1198b0:	e50b3008 	str	r3, [fp, #-8]
  1198b4:	e51b3008 	ldr	r3, [fp, #-8]
  1198b8:	e3530000 	cmp	r3, #0
  1198bc:	1affffef 	bne	119880 <netif_remove+0x10c>
      }
    }
    if (tmp_netif == NULL) {
  1198c0:	e51b3008 	ldr	r3, [fp, #-8]
  1198c4:	e3530000 	cmp	r3, #0
  1198c8:	ea000000 	b	1198d0 <netif_remove+0x15c>
    return;
  1198cc:	e320f000 	nop	{0}
  if (netif->remove_callback) {
    netif->remove_callback(netif);
  }
#endif /* LWIP_NETIF_REMOVE_CALLBACK */
  LWIP_DEBUGF( NETIF_DEBUG, ("netif_remove: removed netif\n") );
}
  1198d0:	e24bd004 	sub	sp, fp, #4
  1198d4:	e8bd8800 	pop	{fp, pc}

001198d8 <netif_find>:
 * @param name the name of the netif (like netif->name) plus concatenated number
 * in ascii representation (e.g. 'en0')
 */
struct netif *
netif_find(const char *name)
{
  1198d8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1198dc:	e28db000 	add	fp, sp, #0
  1198e0:	e24dd014 	sub	sp, sp, #20
  1198e4:	e50b0010 	str	r0, [fp, #-16]
  struct netif *netif;
  u8_t num;

  if (name == NULL) {
  1198e8:	e51b3010 	ldr	r3, [fp, #-16]
  1198ec:	e3530000 	cmp	r3, #0
  1198f0:	1a000001 	bne	1198fc <netif_find+0x24>
    return NULL;
  1198f4:	e3a03000 	mov	r3, #0
  1198f8:	ea000024 	b	119990 <netif_find+0xb8>
  }

  num = (u8_t)(name[2] - '0');
  1198fc:	e51b3010 	ldr	r3, [fp, #-16]
  119900:	e2833002 	add	r3, r3, #2
  119904:	e5d33000 	ldrb	r3, [r3]
  119908:	e2433030 	sub	r3, r3, #48	; 0x30
  11990c:	e54b3009 	strb	r3, [fp, #-9]

  for (netif = netif_list; netif != NULL; netif = netif->next) {
  119910:	e3063834 	movw	r3, #26676	; 0x6834
  119914:	e3403057 	movt	r3, #87	; 0x57
  119918:	e5933000 	ldr	r3, [r3]
  11991c:	e50b3008 	str	r3, [fp, #-8]
  119920:	ea000016 	b	119980 <netif_find+0xa8>
    if (num == netif->num &&
  119924:	e51b3008 	ldr	r3, [fp, #-8]
  119928:	e5d33044 	ldrb	r3, [r3, #68]	; 0x44
  11992c:	e55b2009 	ldrb	r2, [fp, #-9]
  119930:	e1520003 	cmp	r2, r3
  119934:	1a00000e 	bne	119974 <netif_find+0x9c>
       name[0] == netif->name[0] &&
  119938:	e51b3010 	ldr	r3, [fp, #-16]
  11993c:	e5d32000 	ldrb	r2, [r3]
  119940:	e51b3008 	ldr	r3, [fp, #-8]
  119944:	e5d33042 	ldrb	r3, [r3, #66]	; 0x42
    if (num == netif->num &&
  119948:	e1520003 	cmp	r2, r3
  11994c:	1a000008 	bne	119974 <netif_find+0x9c>
       name[1] == netif->name[1]) {
  119950:	e51b3010 	ldr	r3, [fp, #-16]
  119954:	e2833001 	add	r3, r3, #1
  119958:	e5d32000 	ldrb	r2, [r3]
  11995c:	e51b3008 	ldr	r3, [fp, #-8]
  119960:	e5d33043 	ldrb	r3, [r3, #67]	; 0x43
       name[0] == netif->name[0] &&
  119964:	e1520003 	cmp	r2, r3
  119968:	1a000001 	bne	119974 <netif_find+0x9c>
      LWIP_DEBUGF(NETIF_DEBUG, ("netif_find: found %c%c\n", name[0], name[1]));
      return netif;
  11996c:	e51b3008 	ldr	r3, [fp, #-8]
  119970:	ea000006 	b	119990 <netif_find+0xb8>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
  119974:	e51b3008 	ldr	r3, [fp, #-8]
  119978:	e5933000 	ldr	r3, [r3]
  11997c:	e50b3008 	str	r3, [fp, #-8]
  119980:	e51b3008 	ldr	r3, [fp, #-8]
  119984:	e3530000 	cmp	r3, #0
  119988:	1affffe5 	bne	119924 <netif_find+0x4c>
    }
  }
  LWIP_DEBUGF(NETIF_DEBUG, ("netif_find: didn't find %c%c\n", name[0], name[1]));
  return NULL;
  11998c:	e3a03000 	mov	r3, #0
}
  119990:	e1a00003 	mov	r0, r3
  119994:	e28bd000 	add	sp, fp, #0
  119998:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11999c:	e12fff1e 	bx	lr

001199a0 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
  1199a0:	e92d4800 	push	{fp, lr}
  1199a4:	e28db004 	add	fp, sp, #4
  1199a8:	e24dd010 	sub	sp, sp, #16
  1199ac:	e50b0010 	str	r0, [fp, #-16]
  1199b0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
  1199b4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1199b8:	e3530000 	cmp	r3, #0
  1199bc:	0a000003 	beq	1199d0 <netif_set_ipaddr+0x30>
  1199c0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1199c4:	e5933000 	ldr	r3, [r3]
  1199c8:	e50b3008 	str	r3, [fp, #-8]
  1199cc:	ea000003 	b	1199e0 <netif_set_ipaddr+0x40>
  1199d0:	e3093adc 	movw	r3, #39644	; 0x9adc
  1199d4:	e3403014 	movt	r3, #20
  1199d8:	e5933000 	ldr	r3, [r3]
  1199dc:	e50b3008 	str	r3, [fp, #-8]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
  1199e0:	e51b2008 	ldr	r2, [fp, #-8]
  1199e4:	e51b3010 	ldr	r3, [fp, #-16]
  1199e8:	e2833004 	add	r3, r3, #4
  1199ec:	e5933000 	ldr	r3, [r3]
  1199f0:	e1520003 	cmp	r2, r3
  1199f4:	0a00002d 	beq	119ab0 <netif_set_ipaddr+0x110>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
  1199f8:	e51b3010 	ldr	r3, [fp, #-16]
  1199fc:	e2833004 	add	r3, r3, #4
  119a00:	e24b2008 	sub	r2, fp, #8
  119a04:	e1a01002 	mov	r1, r2
  119a08:	e1a00003 	mov	r0, r3
  119a0c:	eb001a54 	bl	120364 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
  119a10:	e51b3010 	ldr	r3, [fp, #-16]
  119a14:	e2833004 	add	r3, r3, #4
  119a18:	e24b2008 	sub	r2, fp, #8
  119a1c:	e1a01002 	mov	r1, r2
  119a20:	e1a00003 	mov	r0, r3
  119a24:	eb003cc3 	bl	128d38 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
    raw_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
  119a28:	e51b3010 	ldr	r3, [fp, #-16]
  119a2c:	e2833004 	add	r3, r3, #4
  119a30:	e24b2008 	sub	r2, fp, #8
  119a34:	e1a01002 	mov	r1, r2
  119a38:	e1a00003 	mov	r0, r3
  119a3c:	eb000c18 	bl	11caa4 <raw_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
  119a40:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  119a44:	e3530000 	cmp	r3, #0
  119a48:	0a000002 	beq	119a58 <netif_set_ipaddr+0xb8>
  119a4c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  119a50:	e5933000 	ldr	r3, [r3]
  119a54:	ea000000 	b	119a5c <netif_set_ipaddr+0xbc>
  119a58:	e3a03000 	mov	r3, #0
  119a5c:	e51b2010 	ldr	r2, [fp, #-16]
  119a60:	e5823004 	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
  119a64:	e3a01001 	mov	r1, #1
  119a68:	e51b0010 	ldr	r0, [fp, #-16]
  119a6c:	eb000082 	bl	119c7c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
  119a70:	e51b3010 	ldr	r3, [fp, #-16]
  119a74:	e593301c 	ldr	r3, [r3, #28]
  119a78:	e3530000 	cmp	r3, #0
  119a7c:	0a000003 	beq	119a90 <netif_set_ipaddr+0xf0>
  119a80:	e51b3010 	ldr	r3, [fp, #-16]
  119a84:	e593301c 	ldr	r3, [r3, #28]
  119a88:	e51b0010 	ldr	r0, [fp, #-16]
  119a8c:	e12fff33 	blx	r3

#ifdef RT_USING_NETDEV
    /* rt-thread sal network interface device set IP address operations */
    netdev_low_level_set_ipaddr(netdev_get_by_name(netif->name), (ip_addr_t *)ipaddr);
  119a90:	e51b3010 	ldr	r3, [fp, #-16]
  119a94:	e2833042 	add	r3, r3, #66	; 0x42
  119a98:	e1a00003 	mov	r0, r3
  119a9c:	ebffae94 	bl	1054f4 <netdev_get_by_name>
  119aa0:	e1a03000 	mov	r3, r0
  119aa4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  119aa8:	e1a00003 	mov	r0, r3
  119aac:	ebffb160 	bl	106034 <netdev_low_level_set_ipaddr>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
  119ab0:	e320f000 	nop	{0}
  119ab4:	e24bd004 	sub	sp, fp, #4
  119ab8:	e8bd8800 	pop	{fp, pc}

00119abc <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
  119abc:	e92d4800 	push	{fp, lr}
  119ac0:	e28db004 	add	fp, sp, #4
  119ac4:	e24dd008 	sub	sp, sp, #8
  119ac8:	e50b0008 	str	r0, [fp, #-8]
  119acc:	e50b100c 	str	r1, [fp, #-12]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
  119ad0:	e51b300c 	ldr	r3, [fp, #-12]
  119ad4:	e3530000 	cmp	r3, #0
  119ad8:	0a000002 	beq	119ae8 <netif_set_gw+0x2c>
  119adc:	e51b300c 	ldr	r3, [fp, #-12]
  119ae0:	e5933000 	ldr	r3, [r3]
  119ae4:	ea000000 	b	119aec <netif_set_gw+0x30>
  119ae8:	e3a03000 	mov	r3, #0
  119aec:	e51b2008 	ldr	r2, [fp, #-8]
  119af0:	e582300c 	str	r3, [r2, #12]
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));

#ifdef RT_USING_NETDEV
  /* rt_thread network interface device set gateway address */
  netdev_low_level_set_gw(netdev_get_by_name(netif->name), (ip_addr_t *)gw);
  119af4:	e51b3008 	ldr	r3, [fp, #-8]
  119af8:	e2833042 	add	r3, r3, #66	; 0x42
  119afc:	e1a00003 	mov	r0, r3
  119b00:	ebffae7b 	bl	1054f4 <netdev_get_by_name>
  119b04:	e1a03000 	mov	r3, r0
  119b08:	e51b100c 	ldr	r1, [fp, #-12]
  119b0c:	e1a00003 	mov	r0, r3
  119b10:	ebffb1c3 	bl	106224 <netdev_low_level_set_gw>
#endif /* RT_USING_NETDEV */
}
  119b14:	e320f000 	nop	{0}
  119b18:	e24bd004 	sub	sp, fp, #4
  119b1c:	e8bd8800 	pop	{fp, pc}

00119b20 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
  119b20:	e92d4800 	push	{fp, lr}
  119b24:	e28db004 	add	fp, sp, #4
  119b28:	e24dd008 	sub	sp, sp, #8
  119b2c:	e50b0008 	str	r0, [fp, #-8]
  119b30:	e50b100c 	str	r1, [fp, #-12]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
  119b34:	e51b300c 	ldr	r3, [fp, #-12]
  119b38:	e3530000 	cmp	r3, #0
  119b3c:	0a000002 	beq	119b4c <netif_set_netmask+0x2c>
  119b40:	e51b300c 	ldr	r3, [fp, #-12]
  119b44:	e5933000 	ldr	r3, [r3]
  119b48:	ea000000 	b	119b50 <netif_set_netmask+0x30>
  119b4c:	e3a03000 	mov	r3, #0
  119b50:	e51b2008 	ldr	r2, [fp, #-8]
  119b54:	e5823008 	str	r3, [r2, #8]
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));

#ifdef RT_USING_NETDEV
  /* rt-thread network interface device set netmask address */
  netdev_low_level_set_netmask(netdev_get_by_name(netif->name), (ip_addr_t *)netmask);
  119b58:	e51b3008 	ldr	r3, [fp, #-8]
  119b5c:	e2833042 	add	r3, r3, #66	; 0x42
  119b60:	e1a00003 	mov	r0, r3
  119b64:	ebffae62 	bl	1054f4 <netdev_get_by_name>
  119b68:	e1a03000 	mov	r3, r0
  119b6c:	e51b100c 	ldr	r1, [fp, #-12]
  119b70:	e1a00003 	mov	r0, r3
  119b74:	ebffb168 	bl	10611c <netdev_low_level_set_netmask>
#endif /* RT_USING_NETDEV */
}
  119b78:	e320f000 	nop	{0}
  119b7c:	e24bd004 	sub	sp, fp, #4
  119b80:	e8bd8800 	pop	{fp, pc}

00119b84 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
  119b84:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  119b88:	e28db000 	add	fp, sp, #0
  119b8c:	e24dd00c 	sub	sp, sp, #12
  119b90:	e50b0008 	str	r0, [fp, #-8]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
  119b94:	e3063838 	movw	r3, #26680	; 0x6838
  119b98:	e3403057 	movt	r3, #87	; 0x57
  119b9c:	e51b2008 	ldr	r2, [fp, #-8]
  119ba0:	e5832000 	str	r2, [r3]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
  119ba4:	e320f000 	nop	{0}
  119ba8:	e28bd000 	add	sp, fp, #0
  119bac:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  119bb0:	e12fff1e 	bx	lr

00119bb4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
  119bb4:	e92d4800 	push	{fp, lr}
  119bb8:	e28db004 	add	fp, sp, #4
  119bbc:	e24dd008 	sub	sp, sp, #8
  119bc0:	e50b0008 	str	r0, [fp, #-8]
  if (!(netif->flags & NETIF_FLAG_UP)) {
  119bc4:	e51b3008 	ldr	r3, [fp, #-8]
  119bc8:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119bcc:	e2033001 	and	r3, r3, #1
  119bd0:	e3530000 	cmp	r3, #0
  119bd4:	1a000025 	bne	119c70 <netif_set_up+0xbc>
    netif->flags |= NETIF_FLAG_UP;
  119bd8:	e51b3008 	ldr	r3, [fp, #-8]
  119bdc:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119be0:	e3833001 	orr	r3, r3, #1
  119be4:	e6ef2073 	uxtb	r2, r3
  119be8:	e51b3008 	ldr	r3, [fp, #-8]
  119bec:	e5c32041 	strb	r2, [r3, #65]	; 0x41

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);
  119bf0:	ebffc534 	bl	10b0c8 <sys_now>
  119bf4:	e1a02000 	mov	r2, r0
  119bf8:	e30c3ccd 	movw	r3, #52429	; 0xcccd
  119bfc:	e34c3ccc 	movt	r3, #52428	; 0xcccc
  119c00:	e0832392 	umull	r2, r3, r2, r3
  119c04:	e1a021a3 	lsr	r2, r3, #3
  119c08:	e51b3008 	ldr	r3, [fp, #-8]
  119c0c:	e583204c 	str	r2, [r3, #76]	; 0x4c

    NETIF_STATUS_CALLBACK(netif);
  119c10:	e51b3008 	ldr	r3, [fp, #-8]
  119c14:	e593301c 	ldr	r3, [r3, #28]
  119c18:	e3530000 	cmp	r3, #0
  119c1c:	0a000003 	beq	119c30 <netif_set_up+0x7c>
  119c20:	e51b3008 	ldr	r3, [fp, #-8]
  119c24:	e593301c 	ldr	r3, [r3, #28]
  119c28:	e51b0008 	ldr	r0, [fp, #-8]
  119c2c:	e12fff33 	blx	r3

    if (netif->flags & NETIF_FLAG_LINK_UP) {
  119c30:	e51b3008 	ldr	r3, [fp, #-8]
  119c34:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119c38:	e2033004 	and	r3, r3, #4
  119c3c:	e3530000 	cmp	r3, #0
  119c40:	0a000002 	beq	119c50 <netif_set_up+0x9c>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
  119c44:	e3a01003 	mov	r1, #3
  119c48:	e51b0008 	ldr	r0, [fp, #-8]
  119c4c:	eb00000a 	bl	119c7c <netif_issue_reports>
    }

#ifdef RT_USING_NETDEV
    /* rt-thread network interface device set up status */
    netdev_low_level_set_status(netdev_get_by_name(netif->name), RT_TRUE);
  119c50:	e51b3008 	ldr	r3, [fp, #-8]
  119c54:	e2833042 	add	r3, r3, #66	; 0x42
  119c58:	e1a00003 	mov	r0, r3
  119c5c:	ebffae24 	bl	1054f4 <netdev_get_by_name>
  119c60:	e1a03000 	mov	r3, r0
  119c64:	e3a01001 	mov	r1, #1
  119c68:	e1a00003 	mov	r0, r3
  119c6c:	ebffb1ea 	bl	10641c <netdev_low_level_set_status>
#endif /* RT_USING_NETDEV */
  }
}
  119c70:	e320f000 	nop	{0}
  119c74:	e24bd004 	sub	sp, fp, #4
  119c78:	e8bd8800 	pop	{fp, pc}

00119c7c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
  119c7c:	e92d4800 	push	{fp, lr}
  119c80:	e28db004 	add	fp, sp, #4
  119c84:	e24dd008 	sub	sp, sp, #8
  119c88:	e50b0008 	str	r0, [fp, #-8]
  119c8c:	e1a03001 	mov	r3, r1
  119c90:	e54b3009 	strb	r3, [fp, #-9]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
  119c94:	e55b3009 	ldrb	r3, [fp, #-9]
  119c98:	e2033001 	and	r3, r3, #1
  119c9c:	e3530000 	cmp	r3, #0
  119ca0:	0a000015 	beq	119cfc <netif_issue_reports+0x80>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
  119ca4:	e51b3008 	ldr	r3, [fp, #-8]
  119ca8:	e2833004 	add	r3, r3, #4
  119cac:	e5933000 	ldr	r3, [r3]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
  119cb0:	e3530000 	cmp	r3, #0
  119cb4:	0a000010 	beq	119cfc <netif_issue_reports+0x80>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
  119cb8:	e51b3008 	ldr	r3, [fp, #-8]
  119cbc:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119cc0:	e2033008 	and	r3, r3, #8
  119cc4:	e3530000 	cmp	r3, #0
  119cc8:	0a000004 	beq	119ce0 <netif_issue_reports+0x64>
      etharp_gratuitous(netif);
  119ccc:	e51b3008 	ldr	r3, [fp, #-8]
  119cd0:	e2833004 	add	r3, r3, #4
  119cd4:	e1a01003 	mov	r1, r3
  119cd8:	e51b0008 	ldr	r0, [fp, #-8]
  119cdc:	eb00567f 	bl	12f6e0 <etharp_request>
    }
#endif /* LWIP_ARP */

#if LWIP_IGMP
    /* resend IGMP memberships */
    if (netif->flags & NETIF_FLAG_IGMP) {
  119ce0:	e51b3008 	ldr	r3, [fp, #-8]
  119ce4:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119ce8:	e2033020 	and	r3, r3, #32
  119cec:	e3530000 	cmp	r3, #0
  119cf0:	0a000001 	beq	119cfc <netif_issue_reports+0x80>
      igmp_report_groups(netif);
  119cf4:	e51b0008 	ldr	r0, [fp, #-8]
  119cf8:	eb005958 	bl	130260 <igmp_report_groups>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
  119cfc:	e320f000 	nop	{0}
  119d00:	e24bd004 	sub	sp, fp, #4
  119d04:	e8bd8800 	pop	{fp, pc}

00119d08 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
  119d08:	e92d4800 	push	{fp, lr}
  119d0c:	e28db004 	add	fp, sp, #4
  119d10:	e24dd008 	sub	sp, sp, #8
  119d14:	e50b0008 	str	r0, [fp, #-8]
  if (netif->flags & NETIF_FLAG_UP) {
  119d18:	e51b3008 	ldr	r3, [fp, #-8]
  119d1c:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119d20:	e2033001 	and	r3, r3, #1
  119d24:	e3530000 	cmp	r3, #0
  119d28:	0a000024 	beq	119dc0 <netif_set_down+0xb8>
    netif->flags &= ~NETIF_FLAG_UP;
  119d2c:	e51b3008 	ldr	r3, [fp, #-8]
  119d30:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119d34:	e3c33001 	bic	r3, r3, #1
  119d38:	e6ef2073 	uxtb	r2, r3
  119d3c:	e51b3008 	ldr	r3, [fp, #-8]
  119d40:	e5c32041 	strb	r2, [r3, #65]	; 0x41
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);
  119d44:	ebffc4df 	bl	10b0c8 <sys_now>
  119d48:	e1a02000 	mov	r2, r0
  119d4c:	e30c3ccd 	movw	r3, #52429	; 0xcccd
  119d50:	e34c3ccc 	movt	r3, #52428	; 0xcccc
  119d54:	e0832392 	umull	r2, r3, r2, r3
  119d58:	e1a021a3 	lsr	r2, r3, #3
  119d5c:	e51b3008 	ldr	r3, [fp, #-8]
  119d60:	e583204c 	str	r2, [r3, #76]	; 0x4c

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
  119d64:	e51b3008 	ldr	r3, [fp, #-8]
  119d68:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119d6c:	e2033008 	and	r3, r3, #8
  119d70:	e3530000 	cmp	r3, #0
  119d74:	0a000001 	beq	119d80 <netif_set_down+0x78>
      etharp_cleanup_netif(netif);
  119d78:	e51b0008 	ldr	r0, [fp, #-8]
  119d7c:	eb00519d 	bl	12e3f8 <etharp_cleanup_netif>

#if LWIP_IPV6
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  119d80:	e51b3008 	ldr	r3, [fp, #-8]
  119d84:	e593301c 	ldr	r3, [r3, #28]
  119d88:	e3530000 	cmp	r3, #0
  119d8c:	0a000003 	beq	119da0 <netif_set_down+0x98>
  119d90:	e51b3008 	ldr	r3, [fp, #-8]
  119d94:	e593301c 	ldr	r3, [r3, #28]
  119d98:	e51b0008 	ldr	r0, [fp, #-8]
  119d9c:	e12fff33 	blx	r3

#ifdef RT_USING_NETDEV
    /* rt-thread network interface device set down status */
    netdev_low_level_set_status(netdev_get_by_name(netif->name), RT_FALSE);
  119da0:	e51b3008 	ldr	r3, [fp, #-8]
  119da4:	e2833042 	add	r3, r3, #66	; 0x42
  119da8:	e1a00003 	mov	r0, r3
  119dac:	ebffadd0 	bl	1054f4 <netdev_get_by_name>
  119db0:	e1a03000 	mov	r3, r0
  119db4:	e3a01000 	mov	r1, #0
  119db8:	e1a00003 	mov	r0, r3
  119dbc:	ebffb196 	bl	10641c <netdev_low_level_set_status>
#endif /* RT_USING_NETDEV */
  }
}
  119dc0:	e320f000 	nop	{0}
  119dc4:	e24bd004 	sub	sp, fp, #4
  119dc8:	e8bd8800 	pop	{fp, pc}

00119dcc <netif_set_status_callback>:
 * @ingroup netif
 * Set callback to be called when interface is brought up/down or address is changed while up
 */
void
netif_set_status_callback(struct netif *netif, netif_status_callback_fn status_callback)
{
  119dcc:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  119dd0:	e28db000 	add	fp, sp, #0
  119dd4:	e24dd00c 	sub	sp, sp, #12
  119dd8:	e50b0008 	str	r0, [fp, #-8]
  119ddc:	e50b100c 	str	r1, [fp, #-12]
  if (netif) {
  119de0:	e51b3008 	ldr	r3, [fp, #-8]
  119de4:	e3530000 	cmp	r3, #0
  119de8:	0a000002 	beq	119df8 <netif_set_status_callback+0x2c>
    netif->status_callback = status_callback;
  119dec:	e51b3008 	ldr	r3, [fp, #-8]
  119df0:	e51b200c 	ldr	r2, [fp, #-12]
  119df4:	e583201c 	str	r2, [r3, #28]
  }
}
  119df8:	e320f000 	nop	{0}
  119dfc:	e28bd000 	add	sp, fp, #0
  119e00:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  119e04:	e12fff1e 	bx	lr

00119e08 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
  119e08:	e92d4800 	push	{fp, lr}
  119e0c:	e28db004 	add	fp, sp, #4
  119e10:	e24dd008 	sub	sp, sp, #8
  119e14:	e50b0008 	str	r0, [fp, #-8]
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
  119e18:	e51b3008 	ldr	r3, [fp, #-8]
  119e1c:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119e20:	e2033004 	and	r3, r3, #4
  119e24:	e3530000 	cmp	r3, #0
  119e28:	1a00001f 	bne	119eac <netif_set_link_up+0xa4>
    netif->flags |= NETIF_FLAG_LINK_UP;
  119e2c:	e51b3008 	ldr	r3, [fp, #-8]
  119e30:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119e34:	e3833004 	orr	r3, r3, #4
  119e38:	e6ef2073 	uxtb	r2, r3
  119e3c:	e51b3008 	ldr	r3, [fp, #-8]
  119e40:	e5c32041 	strb	r2, [r3, #65]	; 0x41

#if LWIP_DHCP
    dhcp_network_changed(netif);
  119e44:	e51b0008 	ldr	r0, [fp, #-8]
  119e48:	eb0044de 	bl	12b1c8 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    if (netif->flags & NETIF_FLAG_UP) {
  119e4c:	e51b3008 	ldr	r3, [fp, #-8]
  119e50:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119e54:	e2033001 	and	r3, r3, #1
  119e58:	e3530000 	cmp	r3, #0
  119e5c:	0a000002 	beq	119e6c <netif_set_link_up+0x64>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
  119e60:	e3a01003 	mov	r1, #3
  119e64:	e51b0008 	ldr	r0, [fp, #-8]
  119e68:	ebffff83 	bl	119c7c <netif_issue_reports>
    }
    NETIF_LINK_CALLBACK(netif);
  119e6c:	e51b3008 	ldr	r3, [fp, #-8]
  119e70:	e5933020 	ldr	r3, [r3, #32]
  119e74:	e3530000 	cmp	r3, #0
  119e78:	0a000003 	beq	119e8c <netif_set_link_up+0x84>
  119e7c:	e51b3008 	ldr	r3, [fp, #-8]
  119e80:	e5933020 	ldr	r3, [r3, #32]
  119e84:	e51b0008 	ldr	r0, [fp, #-8]
  119e88:	e12fff33 	blx	r3

#ifdef RT_USING_NETDEV
    /* rt-thread network interface device set link up status */
    netdev_low_level_set_link_status(netdev_get_by_name(netif->name), RT_TRUE);
  119e8c:	e51b3008 	ldr	r3, [fp, #-8]
  119e90:	e2833042 	add	r3, r3, #66	; 0x42
  119e94:	e1a00003 	mov	r0, r3
  119e98:	ebffad95 	bl	1054f4 <netdev_get_by_name>
  119e9c:	e1a03000 	mov	r3, r0
  119ea0:	e3a01001 	mov	r1, #1
  119ea4:	e1a00003 	mov	r0, r3
  119ea8:	ebffb18b 	bl	1064dc <netdev_low_level_set_link_status>
#endif /* RT_USING_NETDEV */
  }
}
  119eac:	e320f000 	nop	{0}
  119eb0:	e24bd004 	sub	sp, fp, #4
  119eb4:	e8bd8800 	pop	{fp, pc}

00119eb8 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif )
{
  119eb8:	e92d4800 	push	{fp, lr}
  119ebc:	e28db004 	add	fp, sp, #4
  119ec0:	e24dd008 	sub	sp, sp, #8
  119ec4:	e50b0008 	str	r0, [fp, #-8]
  if (netif->flags & NETIF_FLAG_LINK_UP) {
  119ec8:	e51b3008 	ldr	r3, [fp, #-8]
  119ecc:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119ed0:	e2033004 	and	r3, r3, #4
  119ed4:	e3530000 	cmp	r3, #0
  119ed8:	0a000015 	beq	119f34 <netif_set_link_down+0x7c>
    netif->flags &= ~NETIF_FLAG_LINK_UP;
  119edc:	e51b3008 	ldr	r3, [fp, #-8]
  119ee0:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  119ee4:	e3c33004 	bic	r3, r3, #4
  119ee8:	e6ef2073 	uxtb	r2, r3
  119eec:	e51b3008 	ldr	r3, [fp, #-8]
  119ef0:	e5c32041 	strb	r2, [r3, #65]	; 0x41
    NETIF_LINK_CALLBACK(netif);
  119ef4:	e51b3008 	ldr	r3, [fp, #-8]
  119ef8:	e5933020 	ldr	r3, [r3, #32]
  119efc:	e3530000 	cmp	r3, #0
  119f00:	0a000003 	beq	119f14 <netif_set_link_down+0x5c>
  119f04:	e51b3008 	ldr	r3, [fp, #-8]
  119f08:	e5933020 	ldr	r3, [r3, #32]
  119f0c:	e51b0008 	ldr	r0, [fp, #-8]
  119f10:	e12fff33 	blx	r3

#ifdef RT_USING_NETDEV
    /* rt-thread network interface device set link down status */
    netdev_low_level_set_link_status(netdev_get_by_name(netif->name), RT_FALSE);
  119f14:	e51b3008 	ldr	r3, [fp, #-8]
  119f18:	e2833042 	add	r3, r3, #66	; 0x42
  119f1c:	e1a00003 	mov	r0, r3
  119f20:	ebffad73 	bl	1054f4 <netdev_get_by_name>
  119f24:	e1a03000 	mov	r3, r0
  119f28:	e3a01000 	mov	r1, #0
  119f2c:	e1a00003 	mov	r0, r3
  119f30:	ebffb169 	bl	1064dc <netdev_low_level_set_link_status>
#endif /* RT_USING_NETDEV */
  }
}
  119f34:	e320f000 	nop	{0}
  119f38:	e24bd004 	sub	sp, fp, #4
  119f3c:	e8bd8800 	pop	{fp, pc}

00119f40 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
  119f40:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  119f44:	e28db000 	add	fp, sp, #0
  119f48:	e24dd00c 	sub	sp, sp, #12
  119f4c:	e50b0008 	str	r0, [fp, #-8]
  119f50:	e50b100c 	str	r1, [fp, #-12]
  if (netif) {
  119f54:	e51b3008 	ldr	r3, [fp, #-8]
  119f58:	e3530000 	cmp	r3, #0
  119f5c:	0a000002 	beq	119f6c <netif_set_link_callback+0x2c>
    netif->link_callback = link_callback;
  119f60:	e51b3008 	ldr	r3, [fp, #-8]
  119f64:	e51b200c 	ldr	r2, [fp, #-12]
  119f68:	e5832020 	str	r2, [r3, #32]
  }
}
  119f6c:	e320f000 	nop	{0}
  119f70:	e28bd000 	add	sp, fp, #0
  119f74:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  119f78:	e12fff1e 	bx	lr

00119f7c <netif_loop_output>:
 * @return ERR_OK if the packet has been sent
 *         ERR_MEM if the pbuf used to copy the packet couldn't be allocated
 */
err_t
netif_loop_output(struct netif *netif, struct pbuf *p)
{
  119f7c:	e92d4800 	push	{fp, lr}
  119f80:	e28db004 	add	fp, sp, #4
  119f84:	e24dd018 	sub	sp, sp, #24
  119f88:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  119f8c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
   * if not they are adjusted for 'netif'. */
#if MIB2_STATS
#if LWIP_HAVE_LOOPIF
  struct netif *stats_if = &loop_netif;
#else /* LWIP_HAVE_LOOPIF */
  struct netif *stats_if = netif;
  119f90:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  119f94:	e50b300c 	str	r3, [fp, #-12]
#endif /* LWIP_HAVE_LOOPIF */
#endif /* MIB2_STATS */
  SYS_ARCH_DECL_PROTECT(lev);

  /* Allocate a new pbuf */
  r = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
  119f98:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  119f9c:	e1d330b8 	ldrh	r3, [r3, #8]
  119fa0:	e3a02000 	mov	r2, #0
  119fa4:	e1a01003 	mov	r1, r3
  119fa8:	e3a00002 	mov	r0, #2
  119fac:	eb000133 	bl	11a480 <pbuf_alloc>
  119fb0:	e50b0010 	str	r0, [fp, #-16]
  if (r == NULL) {
  119fb4:	e51b3010 	ldr	r3, [fp, #-16]
  119fb8:	e3530000 	cmp	r3, #0
  119fbc:	1a000016 	bne	11a01c <netif_loop_output+0xa0>
    LINK_STATS_INC(link.memerr);
  119fc0:	e3063840 	movw	r3, #26688	; 0x6840
  119fc4:	e3403057 	movt	r3, #87	; 0x57
  119fc8:	e1d330bc 	ldrh	r3, [r3, #12]
  119fcc:	e2833001 	add	r3, r3, #1
  119fd0:	e6ff2073 	uxth	r2, r3
  119fd4:	e3063840 	movw	r3, #26688	; 0x6840
  119fd8:	e3403057 	movt	r3, #87	; 0x57
  119fdc:	e1c320bc 	strh	r2, [r3, #12]
    LINK_STATS_INC(link.drop);
  119fe0:	e3063840 	movw	r3, #26688	; 0x6840
  119fe4:	e3403057 	movt	r3, #87	; 0x57
  119fe8:	e1d330b6 	ldrh	r3, [r3, #6]
  119fec:	e2833001 	add	r3, r3, #1
  119ff0:	e6ff2073 	uxth	r2, r3
  119ff4:	e3063840 	movw	r3, #26688	; 0x6840
  119ff8:	e3403057 	movt	r3, #87	; 0x57
  119ffc:	e1c320b6 	strh	r2, [r3, #6]
    MIB2_STATS_NETIF_INC(stats_if, ifoutdiscards);
  11a000:	e51b300c 	ldr	r3, [fp, #-12]
  11a004:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  11a008:	e2832001 	add	r2, r3, #1
  11a00c:	e51b300c 	ldr	r3, [fp, #-12]
  11a010:	e5832074 	str	r2, [r3, #116]	; 0x74
    return ERR_MEM;
  11a014:	e3e03000 	mvn	r3, #0
  11a018:	ea000063 	b	11a1ac <netif_loop_output+0x230>
  }
  netif->loop_cnt_current += clen;
#endif /* LWIP_LOOPBACK_MAX_PBUFS */

  /* Copy the whole pbuf queue p into the single pbuf r */
  if ((err = pbuf_copy(r, p)) != ERR_OK) {
  11a01c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  11a020:	e51b0010 	ldr	r0, [fp, #-16]
  11a024:	eb000571 	bl	11b5f0 <pbuf_copy>
  11a028:	e1a03000 	mov	r3, r0
  11a02c:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  11a030:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  11a034:	e3530000 	cmp	r3, #0
  11a038:	0a000018 	beq	11a0a0 <netif_loop_output+0x124>
    pbuf_free(r);
  11a03c:	e51b0010 	ldr	r0, [fp, #-16]
  11a040:	eb000415 	bl	11b09c <pbuf_free>
    LINK_STATS_INC(link.memerr);
  11a044:	e3063840 	movw	r3, #26688	; 0x6840
  11a048:	e3403057 	movt	r3, #87	; 0x57
  11a04c:	e1d330bc 	ldrh	r3, [r3, #12]
  11a050:	e2833001 	add	r3, r3, #1
  11a054:	e6ff2073 	uxth	r2, r3
  11a058:	e3063840 	movw	r3, #26688	; 0x6840
  11a05c:	e3403057 	movt	r3, #87	; 0x57
  11a060:	e1c320bc 	strh	r2, [r3, #12]
    LINK_STATS_INC(link.drop);
  11a064:	e3063840 	movw	r3, #26688	; 0x6840
  11a068:	e3403057 	movt	r3, #87	; 0x57
  11a06c:	e1d330b6 	ldrh	r3, [r3, #6]
  11a070:	e2833001 	add	r3, r3, #1
  11a074:	e6ff2073 	uxth	r2, r3
  11a078:	e3063840 	movw	r3, #26688	; 0x6840
  11a07c:	e3403057 	movt	r3, #87	; 0x57
  11a080:	e1c320b6 	strh	r2, [r3, #6]
    MIB2_STATS_NETIF_INC(stats_if, ifoutdiscards);
  11a084:	e51b300c 	ldr	r3, [fp, #-12]
  11a088:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  11a08c:	e2832001 	add	r2, r3, #1
  11a090:	e51b300c 	ldr	r3, [fp, #-12]
  11a094:	e5832074 	str	r2, [r3, #116]	; 0x74
    return err;
  11a098:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  11a09c:	ea000042 	b	11a1ac <netif_loop_output+0x230>

  /* Put the packet on a linked list which gets emptied through calling
     netif_poll(). */

  /* let last point to the last pbuf in chain r */
  for (last = r; last->next != NULL; last = last->next);
  11a0a0:	e51b3010 	ldr	r3, [fp, #-16]
  11a0a4:	e50b3008 	str	r3, [fp, #-8]
  11a0a8:	ea000002 	b	11a0b8 <netif_loop_output+0x13c>
  11a0ac:	e51b3008 	ldr	r3, [fp, #-8]
  11a0b0:	e5933000 	ldr	r3, [r3]
  11a0b4:	e50b3008 	str	r3, [fp, #-8]
  11a0b8:	e51b3008 	ldr	r3, [fp, #-8]
  11a0bc:	e5933000 	ldr	r3, [r3]
  11a0c0:	e3530000 	cmp	r3, #0
  11a0c4:	1afffff8 	bne	11a0ac <netif_loop_output+0x130>

  SYS_ARCH_PROTECT(lev);
  11a0c8:	ebffa05b 	bl	10223c <rt_enter_critical>
  if (netif->loop_first != NULL) {
  11a0cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a0d0:	e5933080 	ldr	r3, [r3, #128]	; 0x80
  11a0d4:	e3530000 	cmp	r3, #0
  11a0d8:	0a000012 	beq	11a128 <netif_loop_output+0x1ac>
    LWIP_ASSERT("if first != NULL, last must also be != NULL", netif->loop_last != NULL);
  11a0dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a0e0:	e5933084 	ldr	r3, [r3, #132]	; 0x84
  11a0e4:	e3530000 	cmp	r3, #0
  11a0e8:	1a000006 	bne	11a108 <netif_loop_output+0x18c>
  11a0ec:	e307076c 	movw	r0, #30572	; 0x776c
  11a0f0:	e3400014 	movt	r0, #20
  11a0f4:	ebffa406 	bl	103114 <rt_kprintf>
  11a0f8:	e3001382 	movw	r1, #898	; 0x382
  11a0fc:	e307073c 	movw	r0, #30524	; 0x773c
  11a100:	e3400014 	movt	r0, #20
  11a104:	ebffc3d6 	bl	10b064 <sys_arch_assert>
    netif->loop_last->next = r;
  11a108:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a10c:	e5933084 	ldr	r3, [r3, #132]	; 0x84
  11a110:	e51b2010 	ldr	r2, [fp, #-16]
  11a114:	e5832000 	str	r2, [r3]
    netif->loop_last = last;
  11a118:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a11c:	e51b2008 	ldr	r2, [fp, #-8]
  11a120:	e5832084 	str	r2, [r3, #132]	; 0x84
  11a124:	ea000005 	b	11a140 <netif_loop_output+0x1c4>
  } else {
    netif->loop_first = r;
  11a128:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a12c:	e51b2010 	ldr	r2, [fp, #-16]
  11a130:	e5832080 	str	r2, [r3, #128]	; 0x80
    netif->loop_last = last;
  11a134:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a138:	e51b2008 	ldr	r2, [fp, #-8]
  11a13c:	e5832084 	str	r2, [r3, #132]	; 0x84
  }
  SYS_ARCH_UNPROTECT(lev);
  11a140:	ebffa043 	bl	102254 <rt_exit_critical>

  LINK_STATS_INC(link.xmit);
  11a144:	e3063840 	movw	r3, #26688	; 0x6840
  11a148:	e3403057 	movt	r3, #87	; 0x57
  11a14c:	e1d330b0 	ldrh	r3, [r3]
  11a150:	e2833001 	add	r3, r3, #1
  11a154:	e6ff2073 	uxth	r2, r3
  11a158:	e3063840 	movw	r3, #26688	; 0x6840
  11a15c:	e3403057 	movt	r3, #87	; 0x57
  11a160:	e1c320b0 	strh	r2, [r3]
  MIB2_STATS_NETIF_ADD(stats_if, ifoutoctets, p->tot_len);
  11a164:	e51b300c 	ldr	r3, [fp, #-12]
  11a168:	e5933068 	ldr	r3, [r3, #104]	; 0x68
  11a16c:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  11a170:	e1d220b8 	ldrh	r2, [r2, #8]
  11a174:	e0832002 	add	r2, r3, r2
  11a178:	e51b300c 	ldr	r3, [fp, #-12]
  11a17c:	e5832068 	str	r2, [r3, #104]	; 0x68
  MIB2_STATS_NETIF_INC(stats_if, ifoutucastpkts);
  11a180:	e51b300c 	ldr	r3, [fp, #-12]
  11a184:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  11a188:	e2832001 	add	r2, r3, #1
  11a18c:	e51b300c 	ldr	r3, [fp, #-12]
  11a190:	e583206c 	str	r2, [r3, #108]	; 0x6c

#if LWIP_NETIF_LOOPBACK_MULTITHREADING
  /* For multithreading environment, schedule a call to netif_poll */
  tcpip_callback_with_block((tcpip_callback_fn)netif_poll, netif, 0);
  11a194:	e3a02000 	mov	r2, #0
  11a198:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  11a19c:	e30a01b8 	movw	r0, #41400	; 0xa1b8
  11a1a0:	e3400011 	movt	r0, #17
  11a1a4:	ebfff084 	bl	1163bc <tcpip_callback_with_block>
#endif /* LWIP_NETIF_LOOPBACK_MULTITHREADING */

  return ERR_OK;
  11a1a8:	e3a03000 	mov	r3, #0
}
  11a1ac:	e1a00003 	mov	r0, r3
  11a1b0:	e24bd004 	sub	sp, fp, #4
  11a1b4:	e8bd8800 	pop	{fp, pc}

0011a1b8 <netif_poll>:
 * netif_loop_output() are put on a list that is passed to netif->input() by
 * netif_poll().
 */
void
netif_poll(struct netif *netif)
{
  11a1b8:	e92d4800 	push	{fp, lr}
  11a1bc:	e28db004 	add	fp, sp, #4
  11a1c0:	e24dd018 	sub	sp, sp, #24
  11a1c4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   * if not they are adjusted for 'netif'. */
#if MIB2_STATS
#if LWIP_HAVE_LOOPIF
  struct netif *stats_if = &loop_netif;
#else /* LWIP_HAVE_LOOPIF */
  struct netif *stats_if = netif;
  11a1c8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a1cc:	e50b300c 	str	r3, [fp, #-12]
#endif /* LWIP_HAVE_LOOPIF */
#endif /* MIB2_STATS */
  SYS_ARCH_DECL_PROTECT(lev);

  /* Get a packet from the list. With SYS_LIGHTWEIGHT_PROT=1, this is protected */
  SYS_ARCH_PROTECT(lev);
  11a1d0:	ebffa019 	bl	10223c <rt_enter_critical>
  while (netif->loop_first != NULL) {
  11a1d4:	ea000056 	b	11a334 <netif_poll+0x17c>
    struct pbuf *in, *in_end;
#if LWIP_LOOPBACK_MAX_PBUFS
    u8_t clen = 1;
#endif /* LWIP_LOOPBACK_MAX_PBUFS */

    in = in_end = netif->loop_first;
  11a1d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a1dc:	e5933080 	ldr	r3, [r3, #128]	; 0x80
  11a1e0:	e50b3008 	str	r3, [fp, #-8]
  11a1e4:	e51b3008 	ldr	r3, [fp, #-8]
  11a1e8:	e50b3010 	str	r3, [fp, #-16]
    while (in_end->len != in_end->tot_len) {
  11a1ec:	ea00000d 	b	11a228 <netif_poll+0x70>
      LWIP_ASSERT("bogus pbuf: len != tot_len but next == NULL!", in_end->next != NULL);
  11a1f0:	e51b3008 	ldr	r3, [fp, #-8]
  11a1f4:	e5933000 	ldr	r3, [r3]
  11a1f8:	e3530000 	cmp	r3, #0
  11a1fc:	1a000006 	bne	11a21c <netif_poll+0x64>
  11a200:	e3070798 	movw	r0, #30616	; 0x7798
  11a204:	e3400014 	movt	r0, #20
  11a208:	ebffa3c1 	bl	103114 <rt_kprintf>
  11a20c:	e30013ca 	movw	r1, #970	; 0x3ca
  11a210:	e307073c 	movw	r0, #30524	; 0x773c
  11a214:	e3400014 	movt	r0, #20
  11a218:	ebffc391 	bl	10b064 <sys_arch_assert>
      in_end = in_end->next;
  11a21c:	e51b3008 	ldr	r3, [fp, #-8]
  11a220:	e5933000 	ldr	r3, [r3]
  11a224:	e50b3008 	str	r3, [fp, #-8]
    while (in_end->len != in_end->tot_len) {
  11a228:	e51b3008 	ldr	r3, [fp, #-8]
  11a22c:	e1d320ba 	ldrh	r2, [r3, #10]
  11a230:	e51b3008 	ldr	r3, [fp, #-8]
  11a234:	e1d330b8 	ldrh	r3, [r3, #8]
  11a238:	e1520003 	cmp	r2, r3
  11a23c:	1affffeb 	bne	11a1f0 <netif_poll+0x38>
      ((netif->loop_cnt_current - clen) < netif->loop_cnt_current));
    netif->loop_cnt_current -= clen;
#endif /* LWIP_LOOPBACK_MAX_PBUFS */

    /* 'in_end' now points to the last pbuf from 'in' */
    if (in_end == netif->loop_last) {
  11a240:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a244:	e5933084 	ldr	r3, [r3, #132]	; 0x84
  11a248:	e51b2008 	ldr	r2, [fp, #-8]
  11a24c:	e1520003 	cmp	r2, r3
  11a250:	1a000007 	bne	11a274 <netif_poll+0xbc>
      /* this was the last pbuf in the list */
      netif->loop_first = netif->loop_last = NULL;
  11a254:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a258:	e3a02000 	mov	r2, #0
  11a25c:	e5832084 	str	r2, [r3, #132]	; 0x84
  11a260:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a264:	e5932084 	ldr	r2, [r3, #132]	; 0x84
  11a268:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a26c:	e5832080 	str	r2, [r3, #128]	; 0x80
  11a270:	ea00000e 	b	11a2b0 <netif_poll+0xf8>
    } else {
      /* pop the pbuf off the list */
      netif->loop_first = in_end->next;
  11a274:	e51b3008 	ldr	r3, [fp, #-8]
  11a278:	e5932000 	ldr	r2, [r3]
  11a27c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a280:	e5832080 	str	r2, [r3, #128]	; 0x80
      LWIP_ASSERT("should not be null since first != last!", netif->loop_first != NULL);
  11a284:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a288:	e5933080 	ldr	r3, [r3, #128]	; 0x80
  11a28c:	e3530000 	cmp	r3, #0
  11a290:	1a000006 	bne	11a2b0 <netif_poll+0xf8>
  11a294:	e30707c8 	movw	r0, #30664	; 0x77c8
  11a298:	e3400014 	movt	r0, #20
  11a29c:	ebffa39c 	bl	103114 <rt_kprintf>
  11a2a0:	e30013de 	movw	r1, #990	; 0x3de
  11a2a4:	e307073c 	movw	r0, #30524	; 0x773c
  11a2a8:	e3400014 	movt	r0, #20
  11a2ac:	ebffc36c 	bl	10b064 <sys_arch_assert>
    }
    /* De-queue the pbuf from its successors on the 'loop_' list. */
    in_end->next = NULL;
  11a2b0:	e51b3008 	ldr	r3, [fp, #-8]
  11a2b4:	e3a02000 	mov	r2, #0
  11a2b8:	e5832000 	str	r2, [r3]
    SYS_ARCH_UNPROTECT(lev);
  11a2bc:	ebff9fe4 	bl	102254 <rt_exit_critical>

    LINK_STATS_INC(link.recv);
  11a2c0:	e3063840 	movw	r3, #26688	; 0x6840
  11a2c4:	e3403057 	movt	r3, #87	; 0x57
  11a2c8:	e1d330b2 	ldrh	r3, [r3, #2]
  11a2cc:	e2833001 	add	r3, r3, #1
  11a2d0:	e6ff2073 	uxth	r2, r3
  11a2d4:	e3063840 	movw	r3, #26688	; 0x6840
  11a2d8:	e3403057 	movt	r3, #87	; 0x57
  11a2dc:	e1c320b2 	strh	r2, [r3, #2]
    MIB2_STATS_NETIF_ADD(stats_if, ifinoctets, in->tot_len);
  11a2e0:	e51b300c 	ldr	r3, [fp, #-12]
  11a2e4:	e5933050 	ldr	r3, [r3, #80]	; 0x50
  11a2e8:	e51b2010 	ldr	r2, [fp, #-16]
  11a2ec:	e1d220b8 	ldrh	r2, [r2, #8]
  11a2f0:	e0832002 	add	r2, r3, r2
  11a2f4:	e51b300c 	ldr	r3, [fp, #-12]
  11a2f8:	e5832050 	str	r2, [r3, #80]	; 0x50
    MIB2_STATS_NETIF_INC(stats_if, ifinucastpkts);
  11a2fc:	e51b300c 	ldr	r3, [fp, #-12]
  11a300:	e5933054 	ldr	r3, [r3, #84]	; 0x54
  11a304:	e2832001 	add	r2, r3, #1
  11a308:	e51b300c 	ldr	r3, [fp, #-12]
  11a30c:	e5832054 	str	r2, [r3, #84]	; 0x54
    /* loopback packets are always IP packets! */
    if (ip_input(in, netif) != ERR_OK) {
  11a310:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  11a314:	e51b0010 	ldr	r0, [fp, #-16]
  11a318:	eb005cbe 	bl	131618 <ip4_input>
  11a31c:	e1a03000 	mov	r3, r0
  11a320:	e3530000 	cmp	r3, #0
  11a324:	0a000001 	beq	11a330 <netif_poll+0x178>
      pbuf_free(in);
  11a328:	e51b0010 	ldr	r0, [fp, #-16]
  11a32c:	eb00035a 	bl	11b09c <pbuf_free>
    }
    SYS_ARCH_PROTECT(lev);
  11a330:	ebff9fc1 	bl	10223c <rt_enter_critical>
  while (netif->loop_first != NULL) {
  11a334:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a338:	e5933080 	ldr	r3, [r3, #128]	; 0x80
  11a33c:	e3530000 	cmp	r3, #0
  11a340:	1affffa4 	bne	11a1d8 <netif_poll+0x20>
  }
  SYS_ARCH_UNPROTECT(lev);
  11a344:	ebff9fc2 	bl	102254 <rt_exit_critical>
}
  11a348:	e320f000 	nop	{0}
  11a34c:	e24bd004 	sub	sp, fp, #4
  11a350:	e8bd8800 	pop	{fp, pc}

0011a354 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
  11a354:	e92d4800 	push	{fp, lr}
  11a358:	e28db004 	add	fp, sp, #4
  11a35c:	e24dd008 	sub	sp, sp, #8
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
  11a360:	ebff9fb5 	bl	10223c <rt_enter_critical>
  11a364:	e306383c 	movw	r3, #26684	; 0x683c
  11a368:	e3403057 	movt	r3, #87	; 0x57
  11a36c:	e3a02000 	mov	r2, #0
  11a370:	e5c32000 	strb	r2, [r3]
  11a374:	ebff9fb6 	bl	102254 <rt_exit_critical>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
  11a378:	e3063a30 	movw	r3, #27184	; 0x6a30
  11a37c:	e3403057 	movt	r3, #87	; 0x57
  11a380:	e5933000 	ldr	r3, [r3]
  11a384:	e50b3008 	str	r3, [fp, #-8]
  11a388:	ea00000e 	b	11a3c8 <pbuf_free_ooseq+0x74>
    if (NULL != pcb->ooseq) {
  11a38c:	e51b3008 	ldr	r3, [fp, #-8]
  11a390:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  11a394:	e3530000 	cmp	r3, #0
  11a398:	0a000007 	beq	11a3bc <pbuf_free_ooseq+0x68>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
  11a39c:	e51b3008 	ldr	r3, [fp, #-8]
  11a3a0:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  11a3a4:	e1a00003 	mov	r0, r3
  11a3a8:	eb00149b 	bl	11f61c <tcp_segs_free>
      pcb->ooseq = NULL;
  11a3ac:	e51b3008 	ldr	r3, [fp, #-8]
  11a3b0:	e3a02000 	mov	r2, #0
  11a3b4:	e5832074 	str	r2, [r3, #116]	; 0x74
      return;
  11a3b8:	ea000005 	b	11a3d4 <pbuf_free_ooseq+0x80>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
  11a3bc:	e51b3008 	ldr	r3, [fp, #-8]
  11a3c0:	e593300c 	ldr	r3, [r3, #12]
  11a3c4:	e50b3008 	str	r3, [fp, #-8]
  11a3c8:	e51b3008 	ldr	r3, [fp, #-8]
  11a3cc:	e3530000 	cmp	r3, #0
  11a3d0:	1affffed 	bne	11a38c <pbuf_free_ooseq+0x38>
    }
  }
}
  11a3d4:	e24bd004 	sub	sp, fp, #4
  11a3d8:	e8bd8800 	pop	{fp, pc}

0011a3dc <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
  11a3dc:	e92d4800 	push	{fp, lr}
  11a3e0:	e28db004 	add	fp, sp, #4
  11a3e4:	e24dd008 	sub	sp, sp, #8
  11a3e8:	e50b0008 	str	r0, [fp, #-8]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
  11a3ec:	ebffffd8 	bl	11a354 <pbuf_free_ooseq>
}
  11a3f0:	e320f000 	nop	{0}
  11a3f4:	e24bd004 	sub	sp, fp, #4
  11a3f8:	e8bd8800 	pop	{fp, pc}

0011a3fc <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
  11a3fc:	e92d4800 	push	{fp, lr}
  11a400:	e28db004 	add	fp, sp, #4
  11a404:	e24dd008 	sub	sp, sp, #8
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
  11a408:	ebff9f8b 	bl	10223c <rt_enter_critical>
  queued = pbuf_free_ooseq_pending;
  11a40c:	e306383c 	movw	r3, #26684	; 0x683c
  11a410:	e3403057 	movt	r3, #87	; 0x57
  11a414:	e5d33000 	ldrb	r3, [r3]
  11a418:	e54b3005 	strb	r3, [fp, #-5]
  pbuf_free_ooseq_pending = 1;
  11a41c:	e306383c 	movw	r3, #26684	; 0x683c
  11a420:	e3403057 	movt	r3, #87	; 0x57
  11a424:	e3a02001 	mov	r2, #1
  11a428:	e5c32000 	strb	r2, [r3]
  SYS_ARCH_UNPROTECT(old_level);
  11a42c:	ebff9f88 	bl	102254 <rt_exit_critical>

  if (!queued) {
  11a430:	e55b3005 	ldrb	r3, [fp, #-5]
  11a434:	e3530000 	cmp	r3, #0
  11a438:	1a00000d 	bne	11a474 <pbuf_pool_is_empty+0x78>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  11a43c:	e3a02000 	mov	r2, #0
  11a440:	e3a01000 	mov	r1, #0
  11a444:	e30a03dc 	movw	r0, #41948	; 0xa3dc
  11a448:	e3400011 	movt	r0, #17
  11a44c:	ebffefda 	bl	1163bc <tcpip_callback_with_block>
  11a450:	e1a03000 	mov	r3, r0
  11a454:	e3530000 	cmp	r3, #0
  11a458:	0a000005 	beq	11a474 <pbuf_pool_is_empty+0x78>
  11a45c:	ebff9f76 	bl	10223c <rt_enter_critical>
  11a460:	e306383c 	movw	r3, #26684	; 0x683c
  11a464:	e3403057 	movt	r3, #87	; 0x57
  11a468:	e3a02000 	mov	r2, #0
  11a46c:	e5c32000 	strb	r2, [r3]
  11a470:	ebff9f77 	bl	102254 <rt_exit_critical>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
  11a474:	e320f000 	nop	{0}
  11a478:	e24bd004 	sub	sp, fp, #4
  11a47c:	e8bd8800 	pop	{fp, pc}

0011a480 <pbuf_alloc>:
 * is the first pbuf of a pbuf chain.
 */
#include <stdio.h>
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
  11a480:	e92d4800 	push	{fp, lr}
  11a484:	e28db004 	add	fp, sp, #4
  11a488:	e24dd028 	sub	sp, sp, #40	; 0x28
  11a48c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  11a490:	e1a03001 	mov	r3, r1
  11a494:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  11a498:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
  11a49c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11a4a0:	e3530004 	cmp	r3, #4
  11a4a4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  11a4a8:	ea000013 	b	11a4fc <pbuf_alloc+0x7c>
  11a4ac:	0011a4c0 	.word	0x0011a4c0
  11a4b0:	0011a4cc 	.word	0x0011a4cc
  11a4b4:	0011a4d8 	.word	0x0011a4d8
  11a4b8:	0011a4e4 	.word	0x0011a4e4
  11a4bc:	0011a4f0 	.word	0x0011a4f0
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
  11a4c0:	e3a03038 	mov	r3, #56	; 0x38
  11a4c4:	e14b30be 	strh	r3, [fp, #-14]
    break;
  11a4c8:	ea000014 	b	11a520 <pbuf_alloc+0xa0>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
  11a4cc:	e3a03024 	mov	r3, #36	; 0x24
  11a4d0:	e14b30be 	strh	r3, [fp, #-14]
    break;
  11a4d4:	ea000011 	b	11a520 <pbuf_alloc+0xa0>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
  11a4d8:	e3a03010 	mov	r3, #16
  11a4dc:	e14b30be 	strh	r3, [fp, #-14]
    break;
  11a4e0:	ea00000e 	b	11a520 <pbuf_alloc+0xa0>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
  11a4e4:	e3a03000 	mov	r3, #0
  11a4e8:	e14b30be 	strh	r3, [fp, #-14]
    break;
  11a4ec:	ea00000b 	b	11a520 <pbuf_alloc+0xa0>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
  11a4f0:	e3a03000 	mov	r3, #0
  11a4f4:	e14b30be 	strh	r3, [fp, #-14]
    break;
  11a4f8:	ea000008 	b	11a520 <pbuf_alloc+0xa0>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
  11a4fc:	e30707f0 	movw	r0, #30704	; 0x77f0
  11a500:	e3400014 	movt	r0, #20
  11a504:	ebffa302 	bl	103114 <rt_kprintf>
  11a508:	e3001117 	movw	r1, #279	; 0x117
  11a50c:	e307080c 	movw	r0, #30732	; 0x780c
  11a510:	e3400014 	movt	r0, #20
  11a514:	ebffc2d2 	bl	10b064 <sys_arch_assert>
    return NULL;
  11a518:	e3a03000 	mov	r3, #0
  11a51c:	ea000139 	b	11aa08 <pbuf_alloc+0x588>
  }

  switch (type) {
  11a520:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11a524:	e3530003 	cmp	r3, #3
  11a528:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  11a52c:	ea000124 	b	11a9c4 <pbuf_alloc+0x544>
  11a530:	0011a84c 	.word	0x0011a84c
  11a534:	0011a950 	.word	0x0011a950
  11a538:	0011a950 	.word	0x0011a950
  11a53c:	0011a540 	.word	0x0011a540
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
  11a540:	e300211e 	movw	r2, #286	; 0x11e
  11a544:	e307180c 	movw	r1, #30732	; 0x780c
  11a548:	e3401014 	movt	r1, #20
  11a54c:	e3a00010 	mov	r0, #16
  11a550:	ebfffb5b 	bl	1192c4 <memp_malloc_fn>
  11a554:	e50b0008 	str	r0, [fp, #-8]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
  11a558:	e51b3008 	ldr	r3, [fp, #-8]
  11a55c:	e3530000 	cmp	r3, #0
  11a560:	1a000002 	bne	11a570 <pbuf_alloc+0xf0>
      PBUF_POOL_IS_EMPTY();
  11a564:	ebffffa4 	bl	11a3fc <pbuf_pool_is_empty>
      return NULL;
  11a568:	e3a03000 	mov	r3, #0
  11a56c:	ea000125 	b	11aa08 <pbuf_alloc+0x588>
    }
    p->type = type;
  11a570:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11a574:	e6ef2073 	uxtb	r2, r3
  11a578:	e51b3008 	ldr	r3, [fp, #-8]
  11a57c:	e5c3200c 	strb	r2, [r3, #12]
    p->next = NULL;
  11a580:	e51b3008 	ldr	r3, [fp, #-8]
  11a584:	e3a02000 	mov	r2, #0
  11a588:	e5832000 	str	r2, [r3]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
  11a58c:	e15b30be 	ldrh	r3, [fp, #-14]
  11a590:	e2833010 	add	r3, r3, #16
  11a594:	e51b2008 	ldr	r2, [fp, #-8]
  11a598:	e0823003 	add	r3, r2, r3
  11a59c:	e2833003 	add	r3, r3, #3
  11a5a0:	e3c33003 	bic	r3, r3, #3
  11a5a4:	e1a02003 	mov	r2, r3
  11a5a8:	e51b3008 	ldr	r3, [fp, #-8]
  11a5ac:	e5832004 	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
  11a5b0:	e51b3008 	ldr	r3, [fp, #-8]
  11a5b4:	e5933004 	ldr	r3, [r3, #4]
  11a5b8:	e2033003 	and	r3, r3, #3
  11a5bc:	e3530000 	cmp	r3, #0
  11a5c0:	0a000006 	beq	11a5e0 <pbuf_alloc+0x160>
  11a5c4:	e3070838 	movw	r0, #30776	; 0x7838
  11a5c8:	e3400014 	movt	r0, #20
  11a5cc:	ebffa2d0 	bl	103114 <rt_kprintf>
  11a5d0:	e300112a 	movw	r1, #298	; 0x12a
  11a5d4:	e307080c 	movw	r0, #30732	; 0x780c
  11a5d8:	e3400014 	movt	r0, #20
  11a5dc:	ebffc2a0 	bl	10b064 <sys_arch_assert>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
  11a5e0:	e51b3008 	ldr	r3, [fp, #-8]
  11a5e4:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  11a5e8:	e1c320b8 	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
  11a5ec:	e15b30be 	ldrh	r3, [fp, #-14]
  11a5f0:	e2833003 	add	r3, r3, #3
  11a5f4:	e3c33003 	bic	r3, r3, #3
  11a5f8:	e2633e5e 	rsb	r3, r3, #1504	; 0x5e0
  11a5fc:	e283300c 	add	r3, r3, #12
  11a600:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  11a604:	e1530002 	cmp	r3, r2
  11a608:	31a03003 	movcc	r3, r3
  11a60c:	21a03002 	movcs	r3, r2
  11a610:	e6ff2073 	uxth	r2, r3
  11a614:	e51b3008 	ldr	r3, [fp, #-8]
  11a618:	e1c320ba 	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
  11a61c:	e51b3008 	ldr	r3, [fp, #-8]
  11a620:	e5933004 	ldr	r3, [r3, #4]
  11a624:	e51b2008 	ldr	r2, [fp, #-8]
  11a628:	e1d220ba 	ldrh	r2, [r2, #10]
  11a62c:	e0832002 	add	r2, r3, r2
  11a630:	e51b3008 	ldr	r3, [fp, #-8]
  11a634:	e2833e5f 	add	r3, r3, #1520	; 0x5f0
  11a638:	e283300c 	add	r3, r3, #12
  11a63c:	e1520003 	cmp	r2, r3
  11a640:	9a000006 	bls	11a660 <pbuf_alloc+0x1e0>
  11a644:	e3070868 	movw	r0, #30824	; 0x7868
  11a648:	e3400014 	movt	r0, #20
  11a64c:	ebffa2b0 	bl	103114 <rt_kprintf>
  11a650:	e3001131 	movw	r1, #305	; 0x131
  11a654:	e307080c 	movw	r0, #30732	; 0x780c
  11a658:	e3400014 	movt	r0, #20
  11a65c:	ebffc280 	bl	10b064 <sys_arch_assert>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
  11a660:	e15b30be 	ldrh	r3, [fp, #-14]
  11a664:	e2833003 	add	r3, r3, #3
  11a668:	e3c33003 	bic	r3, r3, #3
  11a66c:	e30025ec 	movw	r2, #1516	; 0x5ec
  11a670:	e1530002 	cmp	r3, r2
  11a674:	1a000006 	bne	11a694 <pbuf_alloc+0x214>
  11a678:	e307089c 	movw	r0, #30876	; 0x789c
  11a67c:	e3400014 	movt	r0, #20
  11a680:	ebffa2a3 	bl	103114 <rt_kprintf>
  11a684:	e3001133 	movw	r1, #307	; 0x133
  11a688:	e307080c 	movw	r0, #30732	; 0x780c
  11a68c:	e3400014 	movt	r0, #20
  11a690:	ebffc273 	bl	10b064 <sys_arch_assert>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
  11a694:	e51b3008 	ldr	r3, [fp, #-8]
  11a698:	e3a02001 	mov	r2, #1
  11a69c:	e1c320be 	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
  11a6a0:	e51b3008 	ldr	r3, [fp, #-8]
  11a6a4:	e50b300c 	str	r3, [fp, #-12]
    /* remaining length to be allocated */
    rem_len = length - p->len;
  11a6a8:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  11a6ac:	e51b2008 	ldr	r2, [fp, #-8]
  11a6b0:	e1d220ba 	ldrh	r2, [r2, #10]
  11a6b4:	e0433002 	sub	r3, r3, r2
  11a6b8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
  11a6bc:	ea00005e 	b	11a83c <pbuf_alloc+0x3bc>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
  11a6c0:	e300213f 	movw	r2, #319	; 0x13f
  11a6c4:	e307180c 	movw	r1, #30732	; 0x780c
  11a6c8:	e3401014 	movt	r1, #20
  11a6cc:	e3a00010 	mov	r0, #16
  11a6d0:	ebfffafb 	bl	1192c4 <memp_malloc_fn>
  11a6d4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
      if (q == NULL) {
  11a6d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a6dc:	e3530000 	cmp	r3, #0
  11a6e0:	1a000004 	bne	11a6f8 <pbuf_alloc+0x278>
        PBUF_POOL_IS_EMPTY();
  11a6e4:	ebffff44 	bl	11a3fc <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
  11a6e8:	e51b0008 	ldr	r0, [fp, #-8]
  11a6ec:	eb00026a 	bl	11b09c <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
  11a6f0:	e3a03000 	mov	r3, #0
  11a6f4:	ea0000c3 	b	11aa08 <pbuf_alloc+0x588>
      }
      q->type = type;
  11a6f8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11a6fc:	e6ef2073 	uxtb	r2, r3
  11a700:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a704:	e5c3200c 	strb	r2, [r3, #12]
      q->flags = 0;
  11a708:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a70c:	e3a02000 	mov	r2, #0
  11a710:	e5c3200d 	strb	r2, [r3, #13]
      q->next = NULL;
  11a714:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a718:	e3a02000 	mov	r2, #0
  11a71c:	e5832000 	str	r2, [r3]
      /* make previous pbuf point to this pbuf */
      r->next = q;
  11a720:	e51b300c 	ldr	r3, [fp, #-12]
  11a724:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  11a728:	e5832000 	str	r2, [r3]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
  11a72c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11a730:	e30f2ffe 	movw	r2, #65534	; 0xfffe
  11a734:	e1530002 	cmp	r3, r2
  11a738:	da000006 	ble	11a758 <pbuf_alloc+0x2d8>
  11a73c:	e30708d0 	movw	r0, #30928	; 0x78d0
  11a740:	e3400014 	movt	r0, #20
  11a744:	ebffa272 	bl	103114 <rt_kprintf>
  11a748:	e300114d 	movw	r1, #333	; 0x14d
  11a74c:	e307080c 	movw	r0, #30732	; 0x780c
  11a750:	e3400014 	movt	r0, #20
  11a754:	ebffc242 	bl	10b064 <sys_arch_assert>
      q->tot_len = (u16_t)rem_len;
  11a758:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11a75c:	e6ff2073 	uxth	r2, r3
  11a760:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a764:	e1c320b8 	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
  11a768:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11a76c:	e6ff3073 	uxth	r3, r3
  11a770:	e30025ec 	movw	r2, #1516	; 0x5ec
  11a774:	e1530002 	cmp	r3, r2
  11a778:	31a03003 	movcc	r3, r3
  11a77c:	21a03002 	movcs	r3, r2
  11a780:	e6ff2073 	uxth	r2, r3
  11a784:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a788:	e1c320ba 	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
  11a78c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a790:	e2832010 	add	r2, r3, #16
  11a794:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a798:	e5832004 	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
  11a79c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a7a0:	e5933004 	ldr	r3, [r3, #4]
  11a7a4:	e2033003 	and	r3, r3, #3
  11a7a8:	e3530000 	cmp	r3, #0
  11a7ac:	0a000006 	beq	11a7cc <pbuf_alloc+0x34c>
  11a7b0:	e30708e4 	movw	r0, #30948	; 0x78e4
  11a7b4:	e3400014 	movt	r0, #20
  11a7b8:	ebffa255 	bl	103114 <rt_kprintf>
  11a7bc:	e3001153 	movw	r1, #339	; 0x153
  11a7c0:	e307080c 	movw	r0, #30732	; 0x780c
  11a7c4:	e3400014 	movt	r0, #20
  11a7c8:	ebffc225 	bl	10b064 <sys_arch_assert>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
  11a7cc:	e51b3008 	ldr	r3, [fp, #-8]
  11a7d0:	e5933004 	ldr	r3, [r3, #4]
  11a7d4:	e51b2008 	ldr	r2, [fp, #-8]
  11a7d8:	e1d220ba 	ldrh	r2, [r2, #10]
  11a7dc:	e0832002 	add	r2, r3, r2
  11a7e0:	e51b3008 	ldr	r3, [fp, #-8]
  11a7e4:	e2833e5f 	add	r3, r3, #1520	; 0x5f0
  11a7e8:	e283300c 	add	r3, r3, #12
  11a7ec:	e1520003 	cmp	r2, r3
  11a7f0:	9a000006 	bls	11a810 <pbuf_alloc+0x390>
  11a7f4:	e3070868 	movw	r0, #30824	; 0x7868
  11a7f8:	e3400014 	movt	r0, #20
  11a7fc:	ebffa244 	bl	103114 <rt_kprintf>
  11a800:	e3001156 	movw	r1, #342	; 0x156
  11a804:	e307080c 	movw	r0, #30732	; 0x780c
  11a808:	e3400014 	movt	r0, #20
  11a80c:	ebffc214 	bl	10b064 <sys_arch_assert>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
  11a810:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a814:	e3a02001 	mov	r2, #1
  11a818:	e1c320be 	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
  11a81c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a820:	e1d330ba 	ldrh	r3, [r3, #10]
  11a824:	e1a02003 	mov	r2, r3
  11a828:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11a82c:	e0433002 	sub	r3, r3, r2
  11a830:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
      /* remember this pbuf for linkage in next iteration */
      r = q;
  11a834:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11a838:	e50b300c 	str	r3, [fp, #-12]
    while (rem_len > 0) {
  11a83c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11a840:	e3530000 	cmp	r3, #0
  11a844:	caffff9d 	bgt	11a6c0 <pbuf_alloc+0x240>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
  11a848:	ea000067 	b	11a9ec <pbuf_alloc+0x56c>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
  11a84c:	e15b30be 	ldrh	r3, [fp, #-14]
  11a850:	e2833013 	add	r3, r3, #19
  11a854:	e6ff3073 	uxth	r3, r3
  11a858:	e3c33003 	bic	r3, r3, #3
  11a85c:	e6ff2073 	uxth	r2, r3
  11a860:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  11a864:	e2833003 	add	r3, r3, #3
  11a868:	e6ff3073 	uxth	r3, r3
  11a86c:	e3c33003 	bic	r3, r3, #3
  11a870:	e6ff3073 	uxth	r3, r3
  11a874:	e0823003 	add	r3, r2, r3
  11a878:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
  11a87c:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
  11a880:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  11a884:	e2833003 	add	r3, r3, #3
  11a888:	e3c33003 	bic	r3, r3, #3
  11a88c:	e1520003 	cmp	r2, r3
  11a890:	2a000001 	bcs	11a89c <pbuf_alloc+0x41c>
        return NULL;
  11a894:	e3a03000 	mov	r3, #0
  11a898:	ea00005a 	b	11aa08 <pbuf_alloc+0x588>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
  11a89c:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  11a8a0:	e1a00003 	mov	r0, r3
  11a8a4:	ebffc22f 	bl	10b168 <mem_malloc>
  11a8a8:	e50b0008 	str	r0, [fp, #-8]
    }

    if (p == NULL) {
  11a8ac:	e51b3008 	ldr	r3, [fp, #-8]
  11a8b0:	e3530000 	cmp	r3, #0
  11a8b4:	1a000001 	bne	11a8c0 <pbuf_alloc+0x440>
      return NULL;
  11a8b8:	e3a03000 	mov	r3, #0
  11a8bc:	ea000051 	b	11aa08 <pbuf_alloc+0x588>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
  11a8c0:	e15b30be 	ldrh	r3, [fp, #-14]
  11a8c4:	e2833010 	add	r3, r3, #16
  11a8c8:	e51b2008 	ldr	r2, [fp, #-8]
  11a8cc:	e0823003 	add	r3, r2, r3
  11a8d0:	e2833003 	add	r3, r3, #3
  11a8d4:	e3c33003 	bic	r3, r3, #3
  11a8d8:	e1a02003 	mov	r2, r3
  11a8dc:	e51b3008 	ldr	r3, [fp, #-8]
  11a8e0:	e5832004 	str	r2, [r3, #4]
    p->len = p->tot_len = length;
  11a8e4:	e51b3008 	ldr	r3, [fp, #-8]
  11a8e8:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  11a8ec:	e1c320b8 	strh	r2, [r3, #8]
  11a8f0:	e51b3008 	ldr	r3, [fp, #-8]
  11a8f4:	e1d320b8 	ldrh	r2, [r3, #8]
  11a8f8:	e51b3008 	ldr	r3, [fp, #-8]
  11a8fc:	e1c320ba 	strh	r2, [r3, #10]
    p->next = NULL;
  11a900:	e51b3008 	ldr	r3, [fp, #-8]
  11a904:	e3a02000 	mov	r2, #0
  11a908:	e5832000 	str	r2, [r3]
    p->type = type;
  11a90c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11a910:	e6ef2073 	uxtb	r2, r3
  11a914:	e51b3008 	ldr	r3, [fp, #-8]
  11a918:	e5c3200c 	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
  11a91c:	e51b3008 	ldr	r3, [fp, #-8]
  11a920:	e5933004 	ldr	r3, [r3, #4]
  11a924:	e2033003 	and	r3, r3, #3
  11a928:	e3530000 	cmp	r3, #0
  11a92c:	0a00002d 	beq	11a9e8 <pbuf_alloc+0x568>
  11a930:	e3070914 	movw	r0, #30996	; 0x7914
  11a934:	e3400014 	movt	r0, #20
  11a938:	ebffa1f5 	bl	103114 <rt_kprintf>
  11a93c:	e3a01f5e 	mov	r1, #376	; 0x178
  11a940:	e307080c 	movw	r0, #30732	; 0x780c
  11a944:	e3400014 	movt	r0, #20
  11a948:	ebffc1c5 	bl	10b064 <sys_arch_assert>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
  11a94c:	ea000025 	b	11a9e8 <pbuf_alloc+0x568>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
  11a950:	e300217f 	movw	r2, #383	; 0x17f
  11a954:	e307180c 	movw	r1, #30732	; 0x780c
  11a958:	e3401014 	movt	r1, #20
  11a95c:	e3a0000f 	mov	r0, #15
  11a960:	ebfffa57 	bl	1192c4 <memp_malloc_fn>
  11a964:	e50b0008 	str	r0, [fp, #-8]
    if (p == NULL) {
  11a968:	e51b3008 	ldr	r3, [fp, #-8]
  11a96c:	e3530000 	cmp	r3, #0
  11a970:	1a000001 	bne	11a97c <pbuf_alloc+0x4fc>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
  11a974:	e3a03000 	mov	r3, #0
  11a978:	ea000022 	b	11aa08 <pbuf_alloc+0x588>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
  11a97c:	e51b3008 	ldr	r3, [fp, #-8]
  11a980:	e3a02000 	mov	r2, #0
  11a984:	e5832004 	str	r2, [r3, #4]
    p->len = p->tot_len = length;
  11a988:	e51b3008 	ldr	r3, [fp, #-8]
  11a98c:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  11a990:	e1c320b8 	strh	r2, [r3, #8]
  11a994:	e51b3008 	ldr	r3, [fp, #-8]
  11a998:	e1d320b8 	ldrh	r2, [r3, #8]
  11a99c:	e51b3008 	ldr	r3, [fp, #-8]
  11a9a0:	e1c320ba 	strh	r2, [r3, #10]
    p->next = NULL;
  11a9a4:	e51b3008 	ldr	r3, [fp, #-8]
  11a9a8:	e3a02000 	mov	r2, #0
  11a9ac:	e5832000 	str	r2, [r3]
    p->type = type;
  11a9b0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11a9b4:	e6ef2073 	uxtb	r2, r3
  11a9b8:	e51b3008 	ldr	r3, [fp, #-8]
  11a9bc:	e5c3200c 	strb	r2, [r3, #12]
    break;
  11a9c0:	ea000009 	b	11a9ec <pbuf_alloc+0x56c>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
  11a9c4:	e3070940 	movw	r0, #31040	; 0x7940
  11a9c8:	e3400014 	movt	r0, #20
  11a9cc:	ebffa1d0 	bl	103114 <rt_kprintf>
  11a9d0:	e300118d 	movw	r1, #397	; 0x18d
  11a9d4:	e307080c 	movw	r0, #30732	; 0x780c
  11a9d8:	e3400014 	movt	r0, #20
  11a9dc:	ebffc1a0 	bl	10b064 <sys_arch_assert>
    return NULL;
  11a9e0:	e3a03000 	mov	r3, #0
  11a9e4:	ea000007 	b	11aa08 <pbuf_alloc+0x588>
    break;
  11a9e8:	e320f000 	nop	{0}
  }
  /* set reference count */
  p->ref = 1;
  11a9ec:	e51b3008 	ldr	r3, [fp, #-8]
  11a9f0:	e3a02001 	mov	r2, #1
  11a9f4:	e1c320be 	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
  11a9f8:	e51b3008 	ldr	r3, [fp, #-8]
  11a9fc:	e3a02000 	mov	r2, #0
  11aa00:	e5c3200d 	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
  11aa04:	e51b3008 	ldr	r3, [fp, #-8]
}
  11aa08:	e1a00003 	mov	r0, r3
  11aa0c:	e24bd004 	sub	sp, fp, #4
  11aa10:	e8bd8800 	pop	{fp, pc}

0011aa14 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
  11aa14:	e92d4800 	push	{fp, lr}
  11aa18:	e28db004 	add	fp, sp, #4
  11aa1c:	e24dd018 	sub	sp, sp, #24
  11aa20:	e50b0010 	str	r0, [fp, #-16]
  11aa24:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  11aa28:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  11aa2c:	e1a03001 	mov	r3, r1
  11aa30:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
  11aa34:	e51b3010 	ldr	r3, [fp, #-16]
  11aa38:	e3530004 	cmp	r3, #4
  11aa3c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  11aa40:	ea000013 	b	11aa94 <pbuf_alloced_custom+0x80>
  11aa44:	0011aa58 	.word	0x0011aa58
  11aa48:	0011aa64 	.word	0x0011aa64
  11aa4c:	0011aa70 	.word	0x0011aa70
  11aa50:	0011aa7c 	.word	0x0011aa7c
  11aa54:	0011aa88 	.word	0x0011aa88
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
  11aa58:	e3a03038 	mov	r3, #56	; 0x38
  11aa5c:	e14b30b6 	strh	r3, [fp, #-6]
    break;
  11aa60:	ea000014 	b	11aab8 <pbuf_alloced_custom+0xa4>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
  11aa64:	e3a03024 	mov	r3, #36	; 0x24
  11aa68:	e14b30b6 	strh	r3, [fp, #-6]
    break;
  11aa6c:	ea000011 	b	11aab8 <pbuf_alloced_custom+0xa4>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
  11aa70:	e3a03010 	mov	r3, #16
  11aa74:	e14b30b6 	strh	r3, [fp, #-6]
    break;
  11aa78:	ea00000e 	b	11aab8 <pbuf_alloced_custom+0xa4>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
  11aa7c:	e3a03000 	mov	r3, #0
  11aa80:	e14b30b6 	strh	r3, [fp, #-6]
    break;
  11aa84:	ea00000b 	b	11aab8 <pbuf_alloced_custom+0xa4>
  case PBUF_RAW:
    offset = 0;
  11aa88:	e3a03000 	mov	r3, #0
  11aa8c:	e14b30b6 	strh	r3, [fp, #-6]
    break;
  11aa90:	ea000008 	b	11aab8 <pbuf_alloced_custom+0xa4>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
  11aa94:	e307095c 	movw	r0, #31068	; 0x795c
  11aa98:	e3400014 	movt	r0, #20
  11aa9c:	ebffa19c 	bl	103114 <rt_kprintf>
  11aaa0:	e30011c6 	movw	r1, #454	; 0x1c6
  11aaa4:	e307080c 	movw	r0, #30732	; 0x780c
  11aaa8:	e3400014 	movt	r0, #20
  11aaac:	ebffc16c 	bl	10b064 <sys_arch_assert>
    return NULL;
  11aab0:	e3a03000 	mov	r3, #0
  11aab4:	ea00002c 	b	11ab6c <pbuf_alloced_custom+0x158>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
  11aab8:	e15b30b6 	ldrh	r3, [fp, #-6]
  11aabc:	e2833003 	add	r3, r3, #3
  11aac0:	e3c32003 	bic	r2, r3, #3
  11aac4:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11aac8:	e0822003 	add	r2, r2, r3
  11aacc:	e1db30b8 	ldrh	r3, [fp, #8]
  11aad0:	e1520003 	cmp	r2, r3
  11aad4:	9a000001 	bls	11aae0 <pbuf_alloced_custom+0xcc>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
  11aad8:	e3a03000 	mov	r3, #0
  11aadc:	ea000022 	b	11ab6c <pbuf_alloced_custom+0x158>
  }

  p->pbuf.next = NULL;
  11aae0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11aae4:	e3a02000 	mov	r2, #0
  11aae8:	e5832000 	str	r2, [r3]
  if (payload_mem != NULL) {
  11aaec:	e59b3004 	ldr	r3, [fp, #4]
  11aaf0:	e3530000 	cmp	r3, #0
  11aaf4:	0a000007 	beq	11ab18 <pbuf_alloced_custom+0x104>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
  11aaf8:	e15b30b6 	ldrh	r3, [fp, #-6]
  11aafc:	e2833003 	add	r3, r3, #3
  11ab00:	e3c33003 	bic	r3, r3, #3
  11ab04:	e59b2004 	ldr	r2, [fp, #4]
  11ab08:	e0822003 	add	r2, r2, r3
  11ab0c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11ab10:	e5832004 	str	r2, [r3, #4]
  11ab14:	ea000002 	b	11ab24 <pbuf_alloced_custom+0x110>
  } else {
    p->pbuf.payload = NULL;
  11ab18:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11ab1c:	e3a02000 	mov	r2, #0
  11ab20:	e5832004 	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
  11ab24:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11ab28:	e3a02002 	mov	r2, #2
  11ab2c:	e5c3200d 	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
  11ab30:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11ab34:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
  11ab38:	e1c320b8 	strh	r2, [r3, #8]
  11ab3c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11ab40:	e1d320b8 	ldrh	r2, [r3, #8]
  11ab44:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11ab48:	e1c320ba 	strh	r2, [r3, #10]
  p->pbuf.type = type;
  11ab4c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11ab50:	e6ef2073 	uxtb	r2, r3
  11ab54:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11ab58:	e5c3200c 	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
  11ab5c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11ab60:	e3a02001 	mov	r2, #1
  11ab64:	e1c320be 	strh	r2, [r3, #14]
  return &p->pbuf;
  11ab68:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
}
  11ab6c:	e1a00003 	mov	r0, r3
  11ab70:	e24bd004 	sub	sp, fp, #4
  11ab74:	e8bd8800 	pop	{fp, pc}

0011ab78 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
  11ab78:	e92d4800 	push	{fp, lr}
  11ab7c:	e28db004 	add	fp, sp, #4
  11ab80:	e24dd018 	sub	sp, sp, #24
  11ab84:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  11ab88:	e1a03001 	mov	r3, r1
  11ab8c:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
  11ab90:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11ab94:	e3530000 	cmp	r3, #0
  11ab98:	1a000006 	bne	11abb8 <pbuf_realloc+0x40>
  11ab9c:	e3070980 	movw	r0, #31104	; 0x7980
  11aba0:	e3400014 	movt	r0, #20
  11aba4:	ebffa15a 	bl	103114 <rt_kprintf>
  11aba8:	e3a01f7d 	mov	r1, #500	; 0x1f4
  11abac:	e307080c 	movw	r0, #30732	; 0x780c
  11abb0:	e3400014 	movt	r0, #20
  11abb4:	ebffc12a 	bl	10b064 <sys_arch_assert>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
  11abb8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11abbc:	e5d3300c 	ldrb	r3, [r3, #12]
  11abc0:	e3530003 	cmp	r3, #3
  11abc4:	0a000012 	beq	11ac14 <pbuf_realloc+0x9c>
  11abc8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11abcc:	e5d3300c 	ldrb	r3, [r3, #12]
  11abd0:	e3530001 	cmp	r3, #1
  11abd4:	0a00000e 	beq	11ac14 <pbuf_realloc+0x9c>
  11abd8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11abdc:	e5d3300c 	ldrb	r3, [r3, #12]
  11abe0:	e3530000 	cmp	r3, #0
  11abe4:	0a00000a 	beq	11ac14 <pbuf_realloc+0x9c>
  11abe8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11abec:	e5d3300c 	ldrb	r3, [r3, #12]
  11abf0:	e3530002 	cmp	r3, #2
  11abf4:	0a000006 	beq	11ac14 <pbuf_realloc+0x9c>
  11abf8:	e3070998 	movw	r0, #31128	; 0x7998
  11abfc:	e3400014 	movt	r0, #20
  11ac00:	ebffa143 	bl	103114 <rt_kprintf>
  11ac04:	e3a01f7e 	mov	r1, #504	; 0x1f8
  11ac08:	e307080c 	movw	r0, #30732	; 0x780c
  11ac0c:	e3400014 	movt	r0, #20
  11ac10:	ebffc113 	bl	10b064 <sys_arch_assert>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
  11ac14:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11ac18:	e1d330b8 	ldrh	r3, [r3, #8]
  11ac1c:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
  11ac20:	e1520003 	cmp	r2, r3
  11ac24:	2a00006b 	bcs	11add8 <pbuf_realloc+0x260>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
  11ac28:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  11ac2c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  11ac30:	e1d220b8 	ldrh	r2, [r2, #8]
  11ac34:	e0433002 	sub	r3, r3, r2
  11ac38:	e50b3010 	str	r3, [fp, #-16]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
  11ac3c:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  11ac40:	e14b30ba 	strh	r3, [fp, #-10]
  q = p;
  11ac44:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11ac48:	e50b3008 	str	r3, [fp, #-8]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
  11ac4c:	ea000024 	b	11ace4 <pbuf_realloc+0x16c>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
  11ac50:	e51b3008 	ldr	r3, [fp, #-8]
  11ac54:	e1d330ba 	ldrh	r3, [r3, #10]
  11ac58:	e15b20ba 	ldrh	r2, [fp, #-10]
  11ac5c:	e0423003 	sub	r3, r2, r3
  11ac60:	e14b30ba 	strh	r3, [fp, #-10]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
  11ac64:	e51b3010 	ldr	r3, [fp, #-16]
  11ac68:	e30f2ffe 	movw	r2, #65534	; 0xfffe
  11ac6c:	e1530002 	cmp	r3, r2
  11ac70:	da000006 	ble	11ac90 <pbuf_realloc+0x118>
  11ac74:	e30709b4 	movw	r0, #31156	; 0x79b4
  11ac78:	e3400014 	movt	r0, #20
  11ac7c:	ebffa124 	bl	103114 <rt_kprintf>
  11ac80:	e3a01f83 	mov	r1, #524	; 0x20c
  11ac84:	e307080c 	movw	r0, #30732	; 0x780c
  11ac88:	e3400014 	movt	r0, #20
  11ac8c:	ebffc0f4 	bl	10b064 <sys_arch_assert>
    q->tot_len += (u16_t)grow;
  11ac90:	e51b3008 	ldr	r3, [fp, #-8]
  11ac94:	e1d320b8 	ldrh	r2, [r3, #8]
  11ac98:	e51b3010 	ldr	r3, [fp, #-16]
  11ac9c:	e6ff3073 	uxth	r3, r3
  11aca0:	e0823003 	add	r3, r2, r3
  11aca4:	e6ff2073 	uxth	r2, r3
  11aca8:	e51b3008 	ldr	r3, [fp, #-8]
  11acac:	e1c320b8 	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
  11acb0:	e51b3008 	ldr	r3, [fp, #-8]
  11acb4:	e5933000 	ldr	r3, [r3]
  11acb8:	e50b3008 	str	r3, [fp, #-8]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
  11acbc:	e51b3008 	ldr	r3, [fp, #-8]
  11acc0:	e3530000 	cmp	r3, #0
  11acc4:	1a000006 	bne	11ace4 <pbuf_realloc+0x16c>
  11acc8:	e30709c8 	movw	r0, #31176	; 0x79c8
  11accc:	e3400014 	movt	r0, #20
  11acd0:	ebffa10f 	bl	103114 <rt_kprintf>
  11acd4:	e3a01e21 	mov	r1, #528	; 0x210
  11acd8:	e307080c 	movw	r0, #30732	; 0x780c
  11acdc:	e3400014 	movt	r0, #20
  11ace0:	ebffc0df 	bl	10b064 <sys_arch_assert>
  while (rem_len > q->len) {
  11ace4:	e51b3008 	ldr	r3, [fp, #-8]
  11ace8:	e1d330ba 	ldrh	r3, [r3, #10]
  11acec:	e15b20ba 	ldrh	r2, [fp, #-10]
  11acf0:	e1520003 	cmp	r2, r3
  11acf4:	8affffd5 	bhi	11ac50 <pbuf_realloc+0xd8>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
  11acf8:	e51b3008 	ldr	r3, [fp, #-8]
  11acfc:	e5d3300c 	ldrb	r3, [r3, #12]
  11ad00:	e3530000 	cmp	r3, #0
  11ad04:	1a000020 	bne	11ad8c <pbuf_realloc+0x214>
  11ad08:	e51b3008 	ldr	r3, [fp, #-8]
  11ad0c:	e1d330ba 	ldrh	r3, [r3, #10]
  11ad10:	e15b20ba 	ldrh	r2, [fp, #-10]
  11ad14:	e1520003 	cmp	r2, r3
  11ad18:	0a00001b 	beq	11ad8c <pbuf_realloc+0x214>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
  11ad1c:	e51b3008 	ldr	r3, [fp, #-8]
  11ad20:	e5d3300d 	ldrb	r3, [r3, #13]
  11ad24:	e2033002 	and	r3, r3, #2
  11ad28:	e3530000 	cmp	r3, #0
  11ad2c:	1a000016 	bne	11ad8c <pbuf_realloc+0x214>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
  11ad30:	e51b3008 	ldr	r3, [fp, #-8]
  11ad34:	e5933004 	ldr	r3, [r3, #4]
  11ad38:	e1a02003 	mov	r2, r3
  11ad3c:	e51b3008 	ldr	r3, [fp, #-8]
  11ad40:	e0423003 	sub	r3, r2, r3
  11ad44:	e6ff2073 	uxth	r2, r3
  11ad48:	e15b30ba 	ldrh	r3, [fp, #-10]
  11ad4c:	e0823003 	add	r3, r2, r3
  11ad50:	e6ff3073 	uxth	r3, r3
  11ad54:	e1a01003 	mov	r1, r3
  11ad58:	e51b0008 	ldr	r0, [fp, #-8]
  11ad5c:	ebffc0f6 	bl	10b13c <mem_trim>
  11ad60:	e50b0008 	str	r0, [fp, #-8]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
  11ad64:	e51b3008 	ldr	r3, [fp, #-8]
  11ad68:	e3530000 	cmp	r3, #0
  11ad6c:	1a000006 	bne	11ad8c <pbuf_realloc+0x214>
  11ad70:	e30709e0 	movw	r0, #31200	; 0x79e0
  11ad74:	e3400014 	movt	r0, #20
  11ad78:	ebffa0e5 	bl	103114 <rt_kprintf>
  11ad7c:	e300121e 	movw	r1, #542	; 0x21e
  11ad80:	e307080c 	movw	r0, #30732	; 0x780c
  11ad84:	e3400014 	movt	r0, #20
  11ad88:	ebffc0b5 	bl	10b064 <sys_arch_assert>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
  11ad8c:	e51b3008 	ldr	r3, [fp, #-8]
  11ad90:	e15b20ba 	ldrh	r2, [fp, #-10]
  11ad94:	e1c320ba 	strh	r2, [r3, #10]
  q->tot_len = q->len;
  11ad98:	e51b3008 	ldr	r3, [fp, #-8]
  11ad9c:	e1d320ba 	ldrh	r2, [r3, #10]
  11ada0:	e51b3008 	ldr	r3, [fp, #-8]
  11ada4:	e1c320b8 	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
  11ada8:	e51b3008 	ldr	r3, [fp, #-8]
  11adac:	e5933000 	ldr	r3, [r3]
  11adb0:	e3530000 	cmp	r3, #0
  11adb4:	0a000003 	beq	11adc8 <pbuf_realloc+0x250>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
  11adb8:	e51b3008 	ldr	r3, [fp, #-8]
  11adbc:	e5933000 	ldr	r3, [r3]
  11adc0:	e1a00003 	mov	r0, r3
  11adc4:	eb0000b4 	bl	11b09c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
  11adc8:	e51b3008 	ldr	r3, [fp, #-8]
  11adcc:	e3a02000 	mov	r2, #0
  11add0:	e5832000 	str	r2, [r3]
  11add4:	ea000000 	b	11addc <pbuf_realloc+0x264>
    return;
  11add8:	e320f000 	nop	{0}

}
  11addc:	e24bd004 	sub	sp, fp, #4
  11ade0:	e8bd8800 	pop	{fp, pc}

0011ade4 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
  11ade4:	e92d4800 	push	{fp, lr}
  11ade8:	e28db004 	add	fp, sp, #4
  11adec:	e24dd010 	sub	sp, sp, #16
  11adf0:	e50b0010 	str	r0, [fp, #-16]
  11adf4:	e1a03001 	mov	r3, r1
  11adf8:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  11adfc:	e1a03002 	mov	r3, r2
  11ae00:	e54b3013 	strb	r3, [fp, #-19]	; 0xffffffed
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
  11ae04:	e51b3010 	ldr	r3, [fp, #-16]
  11ae08:	e3530000 	cmp	r3, #0
  11ae0c:	1a000006 	bne	11ae2c <pbuf_header_impl+0x48>
  11ae10:	e30709fc 	movw	r0, #31228	; 0x79fc
  11ae14:	e3400014 	movt	r0, #20
  11ae18:	ebffa0bd 	bl	103114 <rt_kprintf>
  11ae1c:	e3a01d09 	mov	r1, #576	; 0x240
  11ae20:	e307080c 	movw	r0, #30732	; 0x780c
  11ae24:	e3400014 	movt	r0, #20
  11ae28:	ebffc08d 	bl	10b064 <sys_arch_assert>
  if ((header_size_increment == 0) || (p == NULL)) {
  11ae2c:	e15b31f2 	ldrsh	r3, [fp, #-18]	; 0xffffffee
  11ae30:	e3530000 	cmp	r3, #0
  11ae34:	0a000002 	beq	11ae44 <pbuf_header_impl+0x60>
  11ae38:	e51b3010 	ldr	r3, [fp, #-16]
  11ae3c:	e3530000 	cmp	r3, #0
  11ae40:	1a000001 	bne	11ae4c <pbuf_header_impl+0x68>
    return 0;
  11ae44:	e3a03000 	mov	r3, #0
  11ae48:	ea000072 	b	11b018 <pbuf_header_impl+0x234>
  }

  if (header_size_increment < 0) {
  11ae4c:	e15b31f2 	ldrsh	r3, [fp, #-18]	; 0xffffffee
  11ae50:	e3530000 	cmp	r3, #0
  11ae54:	aa000010 	bge	11ae9c <pbuf_header_impl+0xb8>
    increment_magnitude = (u16_t)-header_size_increment;
  11ae58:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11ae5c:	e2633000 	rsb	r3, r3, #0
  11ae60:	e14b30b6 	strh	r3, [fp, #-6]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
  11ae64:	e51b3010 	ldr	r3, [fp, #-16]
  11ae68:	e1d330ba 	ldrh	r3, [r3, #10]
  11ae6c:	e15b20b6 	ldrh	r2, [fp, #-6]
  11ae70:	e1520003 	cmp	r2, r3
  11ae74:	9a00000a 	bls	11aea4 <pbuf_header_impl+0xc0>
  11ae78:	e3070a08 	movw	r0, #31240	; 0x7a08
  11ae7c:	e3400014 	movt	r0, #20
  11ae80:	ebffa0a3 	bl	103114 <rt_kprintf>
  11ae84:	e3a01f92 	mov	r1, #584	; 0x248
  11ae88:	e307080c 	movw	r0, #30732	; 0x780c
  11ae8c:	e3400014 	movt	r0, #20
  11ae90:	ebffc073 	bl	10b064 <sys_arch_assert>
  11ae94:	e3a03001 	mov	r3, #1
  11ae98:	ea00005e 	b	11b018 <pbuf_header_impl+0x234>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
  11ae9c:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11aea0:	e14b30b6 	strh	r3, [fp, #-6]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
  11aea4:	e51b3010 	ldr	r3, [fp, #-16]
  11aea8:	e5d3300c 	ldrb	r3, [r3, #12]
  11aeac:	e14b30b8 	strh	r3, [fp, #-8]
  /* remember current payload pointer */
  payload = p->payload;
  11aeb0:	e51b3010 	ldr	r3, [fp, #-16]
  11aeb4:	e5933004 	ldr	r3, [r3, #4]
  11aeb8:	e50b300c 	str	r3, [fp, #-12]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
  11aebc:	e15b30b8 	ldrh	r3, [fp, #-8]
  11aec0:	e3530000 	cmp	r3, #0
  11aec4:	0a000002 	beq	11aed4 <pbuf_header_impl+0xf0>
  11aec8:	e15b30b8 	ldrh	r3, [fp, #-8]
  11aecc:	e3530003 	cmp	r3, #3
  11aed0:	1a000011 	bne	11af1c <pbuf_header_impl+0x138>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
  11aed4:	e51b3010 	ldr	r3, [fp, #-16]
  11aed8:	e5932004 	ldr	r2, [r3, #4]
  11aedc:	e15b31f2 	ldrsh	r3, [fp, #-18]	; 0xffffffee
  11aee0:	e2633000 	rsb	r3, r3, #0
  11aee4:	e0822003 	add	r2, r2, r3
  11aee8:	e51b3010 	ldr	r3, [fp, #-16]
  11aeec:	e5832004 	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
  11aef0:	e51b3010 	ldr	r3, [fp, #-16]
  11aef4:	e5932004 	ldr	r2, [r3, #4]
  11aef8:	e51b3010 	ldr	r3, [fp, #-16]
  11aefc:	e2833010 	add	r3, r3, #16
  11af00:	e1520003 	cmp	r2, r3
  11af04:	2a000034 	bcs	11afdc <pbuf_header_impl+0x1f8>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
  11af08:	e51b3010 	ldr	r3, [fp, #-16]
  11af0c:	e51b200c 	ldr	r2, [fp, #-12]
  11af10:	e5832004 	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
  11af14:	e3a03001 	mov	r3, #1
  11af18:	ea00003e 	b	11b018 <pbuf_header_impl+0x234>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
  11af1c:	e15b30b8 	ldrh	r3, [fp, #-8]
  11af20:	e3530002 	cmp	r3, #2
  11af24:	0a000002 	beq	11af34 <pbuf_header_impl+0x150>
  11af28:	e15b30b8 	ldrh	r3, [fp, #-8]
  11af2c:	e3530001 	cmp	r3, #1
  11af30:	1a000020 	bne	11afb8 <pbuf_header_impl+0x1d4>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
  11af34:	e15b31f2 	ldrsh	r3, [fp, #-18]	; 0xffffffee
  11af38:	e3530000 	cmp	r3, #0
  11af3c:	aa00000c 	bge	11af74 <pbuf_header_impl+0x190>
  11af40:	e51b3010 	ldr	r3, [fp, #-16]
  11af44:	e1d330ba 	ldrh	r3, [r3, #10]
  11af48:	e15b20b6 	ldrh	r2, [fp, #-6]
  11af4c:	e1520003 	cmp	r2, r3
  11af50:	8a000007 	bhi	11af74 <pbuf_header_impl+0x190>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
  11af54:	e51b3010 	ldr	r3, [fp, #-16]
  11af58:	e5932004 	ldr	r2, [r3, #4]
  11af5c:	e15b31f2 	ldrsh	r3, [fp, #-18]	; 0xffffffee
  11af60:	e2633000 	rsb	r3, r3, #0
  11af64:	e0822003 	add	r2, r2, r3
  11af68:	e51b3010 	ldr	r3, [fp, #-16]
  11af6c:	e5832004 	str	r2, [r3, #4]
  11af70:	ea00000f 	b	11afb4 <pbuf_header_impl+0x1d0>
    } else if ((header_size_increment > 0) && force) {
  11af74:	e15b31f2 	ldrsh	r3, [fp, #-18]	; 0xffffffee
  11af78:	e3530000 	cmp	r3, #0
  11af7c:	da00000a 	ble	11afac <pbuf_header_impl+0x1c8>
  11af80:	e55b3013 	ldrb	r3, [fp, #-19]	; 0xffffffed
  11af84:	e3530000 	cmp	r3, #0
  11af88:	0a000007 	beq	11afac <pbuf_header_impl+0x1c8>
      p->payload = (u8_t *)p->payload - header_size_increment;
  11af8c:	e51b3010 	ldr	r3, [fp, #-16]
  11af90:	e5932004 	ldr	r2, [r3, #4]
  11af94:	e15b31f2 	ldrsh	r3, [fp, #-18]	; 0xffffffee
  11af98:	e2633000 	rsb	r3, r3, #0
  11af9c:	e0822003 	add	r2, r2, r3
  11afa0:	e51b3010 	ldr	r3, [fp, #-16]
  11afa4:	e5832004 	str	r2, [r3, #4]
  11afa8:	ea000001 	b	11afb4 <pbuf_header_impl+0x1d0>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
  11afac:	e3a03001 	mov	r3, #1
  11afb0:	ea000018 	b	11b018 <pbuf_header_impl+0x234>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
  11afb4:	ea000008 	b	11afdc <pbuf_header_impl+0x1f8>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
  11afb8:	e3070a28 	movw	r0, #31272	; 0x7a28
  11afbc:	e3400014 	movt	r0, #20
  11afc0:	ebffa053 	bl	103114 <rt_kprintf>
  11afc4:	e3a01f9e 	mov	r1, #632	; 0x278
  11afc8:	e307080c 	movw	r0, #30732	; 0x780c
  11afcc:	e3400014 	movt	r0, #20
  11afd0:	ebffc023 	bl	10b064 <sys_arch_assert>
    return 1;
  11afd4:	e3a03001 	mov	r3, #1
  11afd8:	ea00000e 	b	11b018 <pbuf_header_impl+0x234>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
  11afdc:	e51b3010 	ldr	r3, [fp, #-16]
  11afe0:	e1d320ba 	ldrh	r2, [r3, #10]
  11afe4:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11afe8:	e0823003 	add	r3, r2, r3
  11afec:	e6ff2073 	uxth	r2, r3
  11aff0:	e51b3010 	ldr	r3, [fp, #-16]
  11aff4:	e1c320ba 	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
  11aff8:	e51b3010 	ldr	r3, [fp, #-16]
  11affc:	e1d320b8 	ldrh	r2, [r3, #8]
  11b000:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11b004:	e0823003 	add	r3, r2, r3
  11b008:	e6ff2073 	uxth	r2, r3
  11b00c:	e51b3010 	ldr	r3, [fp, #-16]
  11b010:	e1c320b8 	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
  11b014:	e3a03000 	mov	r3, #0
}
  11b018:	e1a00003 	mov	r0, r3
  11b01c:	e24bd004 	sub	sp, fp, #4
  11b020:	e8bd8800 	pop	{fp, pc}

0011b024 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
  11b024:	e92d4800 	push	{fp, lr}
  11b028:	e28db004 	add	fp, sp, #4
  11b02c:	e24dd008 	sub	sp, sp, #8
  11b030:	e50b0008 	str	r0, [fp, #-8]
  11b034:	e1a03001 	mov	r3, r1
  11b038:	e14b30ba 	strh	r3, [fp, #-10]
   return pbuf_header_impl(p, header_size_increment, 0);
  11b03c:	e15b30fa 	ldrsh	r3, [fp, #-10]
  11b040:	e3a02000 	mov	r2, #0
  11b044:	e1a01003 	mov	r1, r3
  11b048:	e51b0008 	ldr	r0, [fp, #-8]
  11b04c:	ebffff64 	bl	11ade4 <pbuf_header_impl>
  11b050:	e1a03000 	mov	r3, r0
}
  11b054:	e1a00003 	mov	r0, r3
  11b058:	e24bd004 	sub	sp, fp, #4
  11b05c:	e8bd8800 	pop	{fp, pc}

0011b060 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
  11b060:	e92d4800 	push	{fp, lr}
  11b064:	e28db004 	add	fp, sp, #4
  11b068:	e24dd008 	sub	sp, sp, #8
  11b06c:	e50b0008 	str	r0, [fp, #-8]
  11b070:	e1a03001 	mov	r3, r1
  11b074:	e14b30ba 	strh	r3, [fp, #-10]
   return pbuf_header_impl(p, header_size_increment, 1);
  11b078:	e15b30fa 	ldrsh	r3, [fp, #-10]
  11b07c:	e3a02001 	mov	r2, #1
  11b080:	e1a01003 	mov	r1, r3
  11b084:	e51b0008 	ldr	r0, [fp, #-8]
  11b088:	ebffff55 	bl	11ade4 <pbuf_header_impl>
  11b08c:	e1a03000 	mov	r3, r0
}
  11b090:	e1a00003 	mov	r0, r3
  11b094:	e24bd004 	sub	sp, fp, #4
  11b098:	e8bd8800 	pop	{fp, pc}

0011b09c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
  11b09c:	e92d4800 	push	{fp, lr}
  11b0a0:	e28db004 	add	fp, sp, #4
  11b0a4:	e24dd018 	sub	sp, sp, #24
  11b0a8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
  11b0ac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b0b0:	e3530000 	cmp	r3, #0
  11b0b4:	1a00000b 	bne	11b0e8 <pbuf_free+0x4c>
    LWIP_ASSERT("p != NULL", p != NULL);
  11b0b8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b0bc:	e3530000 	cmp	r3, #0
  11b0c0:	1a000006 	bne	11b0e0 <pbuf_free+0x44>
  11b0c4:	e30709fc 	movw	r0, #31228	; 0x79fc
  11b0c8:	e3400014 	movt	r0, #20
  11b0cc:	ebffa010 	bl	103114 <rt_kprintf>
  11b0d0:	e30012d3 	movw	r1, #723	; 0x2d3
  11b0d4:	e307080c 	movw	r0, #30732	; 0x780c
  11b0d8:	e3400014 	movt	r0, #20
  11b0dc:	ebffbfe0 	bl	10b064 <sys_arch_assert>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
  11b0e0:	e3a03000 	mov	r3, #0
  11b0e4:	ea00006e 	b	11b2a4 <pbuf_free+0x208>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
  11b0e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b0ec:	e5d3300c 	ldrb	r3, [r3, #12]
  11b0f0:	e3530000 	cmp	r3, #0
  11b0f4:	0a000012 	beq	11b144 <pbuf_free+0xa8>
  11b0f8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b0fc:	e5d3300c 	ldrb	r3, [r3, #12]
  11b100:	e3530001 	cmp	r3, #1
  11b104:	0a00000e 	beq	11b144 <pbuf_free+0xa8>
  11b108:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b10c:	e5d3300c 	ldrb	r3, [r3, #12]
  11b110:	e3530002 	cmp	r3, #2
  11b114:	0a00000a 	beq	11b144 <pbuf_free+0xa8>
  11b118:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b11c:	e5d3300c 	ldrb	r3, [r3, #12]
  11b120:	e3530003 	cmp	r3, #3
  11b124:	0a000006 	beq	11b144 <pbuf_free+0xa8>
  11b128:	e3070a38 	movw	r0, #31288	; 0x7a38
  11b12c:	e3400014 	movt	r0, #20
  11b130:	ebff9ff7 	bl	103114 <rt_kprintf>
  11b134:	e30012df 	movw	r1, #735	; 0x2df
  11b138:	e307080c 	movw	r0, #30732	; 0x780c
  11b13c:	e3400014 	movt	r0, #20
  11b140:	ebffbfc7 	bl	10b064 <sys_arch_assert>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
  11b144:	e3a03000 	mov	r3, #0
  11b148:	e54b3005 	strb	r3, [fp, #-5]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
  11b14c:	ea000050 	b	11b294 <pbuf_free+0x1f8>
    u16_t ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
  11b150:	ebff9c39 	bl	10223c <rt_enter_critical>
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
  11b154:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b158:	e1d330be 	ldrh	r3, [r3, #14]
  11b15c:	e3530000 	cmp	r3, #0
  11b160:	1a000006 	bne	11b180 <pbuf_free+0xe4>
  11b164:	e3070a50 	movw	r0, #31312	; 0x7a50
  11b168:	e3400014 	movt	r0, #20
  11b16c:	ebff9fe8 	bl	103114 <rt_kprintf>
  11b170:	e3a01fbb 	mov	r1, #748	; 0x2ec
  11b174:	e307080c 	movw	r0, #30732	; 0x780c
  11b178:	e3400014 	movt	r0, #20
  11b17c:	ebffbfb8 	bl	10b064 <sys_arch_assert>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
  11b180:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b184:	e1d330be 	ldrh	r3, [r3, #14]
  11b188:	e2433001 	sub	r3, r3, #1
  11b18c:	e6ff2073 	uxth	r2, r3
  11b190:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b194:	e1c320be 	strh	r2, [r3, #14]
  11b198:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b19c:	e1d330be 	ldrh	r3, [r3, #14]
  11b1a0:	e14b30b8 	strh	r3, [fp, #-8]
    SYS_ARCH_UNPROTECT(old_level);
  11b1a4:	ebff9c2a 	bl	102254 <rt_exit_critical>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
  11b1a8:	e15b30b8 	ldrh	r3, [fp, #-8]
  11b1ac:	e3530000 	cmp	r3, #0
  11b1b0:	1a000035 	bne	11b28c <pbuf_free+0x1f0>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
  11b1b4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b1b8:	e5933000 	ldr	r3, [r3]
  11b1bc:	e50b300c 	str	r3, [fp, #-12]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
  11b1c0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b1c4:	e5d3300c 	ldrb	r3, [r3, #12]
  11b1c8:	e14b30be 	strh	r3, [fp, #-14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
  11b1cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b1d0:	e5d3300d 	ldrb	r3, [r3, #13]
  11b1d4:	e2033002 	and	r3, r3, #2
  11b1d8:	e3530000 	cmp	r3, #0
  11b1dc:	0a000011 	beq	11b228 <pbuf_free+0x18c>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
  11b1e0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b1e4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
  11b1e8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b1ec:	e5933010 	ldr	r3, [r3, #16]
  11b1f0:	e3530000 	cmp	r3, #0
  11b1f4:	1a000006 	bne	11b214 <pbuf_free+0x178>
  11b1f8:	e3070a68 	movw	r0, #31336	; 0x7a68
  11b1fc:	e3400014 	movt	r0, #20
  11b200:	ebff9fc3 	bl	103114 <rt_kprintf>
  11b204:	e30012fa 	movw	r1, #762	; 0x2fa
  11b208:	e307080c 	movw	r0, #30732	; 0x780c
  11b20c:	e3400014 	movt	r0, #20
  11b210:	ebffbf93 	bl	10b064 <sys_arch_assert>
        pc->custom_free_function(p);
  11b214:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b218:	e5933010 	ldr	r3, [r3, #16]
  11b21c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  11b220:	e12fff33 	blx	r3
  11b224:	ea000012 	b	11b274 <pbuf_free+0x1d8>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
  11b228:	e15b30be 	ldrh	r3, [fp, #-14]
  11b22c:	e3530003 	cmp	r3, #3
  11b230:	1a000003 	bne	11b244 <pbuf_free+0x1a8>
          memp_free(MEMP_PBUF_POOL, p);
  11b234:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  11b238:	e3a00010 	mov	r0, #16
  11b23c:	ebfff888 	bl	119464 <memp_free>
  11b240:	ea00000b 	b	11b274 <pbuf_free+0x1d8>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
  11b244:	e15b30be 	ldrh	r3, [fp, #-14]
  11b248:	e3530001 	cmp	r3, #1
  11b24c:	0a000002 	beq	11b25c <pbuf_free+0x1c0>
  11b250:	e15b30be 	ldrh	r3, [fp, #-14]
  11b254:	e3530002 	cmp	r3, #2
  11b258:	1a000003 	bne	11b26c <pbuf_free+0x1d0>
          memp_free(MEMP_PBUF, p);
  11b25c:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  11b260:	e3a0000f 	mov	r0, #15
  11b264:	ebfff87e 	bl	119464 <memp_free>
  11b268:	ea000001 	b	11b274 <pbuf_free+0x1d8>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
  11b26c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  11b270:	ebffbfc8 	bl	10b198 <mem_free>
        }
      }
      count++;
  11b274:	e55b3005 	ldrb	r3, [fp, #-5]
  11b278:	e2833001 	add	r3, r3, #1
  11b27c:	e54b3005 	strb	r3, [fp, #-5]
      /* proceed to next pbuf */
      p = q;
  11b280:	e51b300c 	ldr	r3, [fp, #-12]
  11b284:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  11b288:	ea000001 	b	11b294 <pbuf_free+0x1f8>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
  11b28c:	e3a03000 	mov	r3, #0
  11b290:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  while (p != NULL) {
  11b294:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b298:	e3530000 	cmp	r3, #0
  11b29c:	1affffab 	bne	11b150 <pbuf_free+0xb4>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
  11b2a0:	e55b3005 	ldrb	r3, [fp, #-5]
}
  11b2a4:	e1a00003 	mov	r0, r3
  11b2a8:	e24bd004 	sub	sp, fp, #4
  11b2ac:	e8bd8800 	pop	{fp, pc}

0011b2b0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
  11b2b0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11b2b4:	e28db000 	add	fp, sp, #0
  11b2b8:	e24dd014 	sub	sp, sp, #20
  11b2bc:	e50b0010 	str	r0, [fp, #-16]
  u16_t len;

  len = 0;
  11b2c0:	e3a03000 	mov	r3, #0
  11b2c4:	e14b30b6 	strh	r3, [fp, #-6]
  while (p != NULL) {
  11b2c8:	ea000005 	b	11b2e4 <pbuf_clen+0x34>
    ++len;
  11b2cc:	e15b30b6 	ldrh	r3, [fp, #-6]
  11b2d0:	e2833001 	add	r3, r3, #1
  11b2d4:	e14b30b6 	strh	r3, [fp, #-6]
    p = p->next;
  11b2d8:	e51b3010 	ldr	r3, [fp, #-16]
  11b2dc:	e5933000 	ldr	r3, [r3]
  11b2e0:	e50b3010 	str	r3, [fp, #-16]
  while (p != NULL) {
  11b2e4:	e51b3010 	ldr	r3, [fp, #-16]
  11b2e8:	e3530000 	cmp	r3, #0
  11b2ec:	1afffff6 	bne	11b2cc <pbuf_clen+0x1c>
  }
  return len;
  11b2f0:	e15b30b6 	ldrh	r3, [fp, #-6]
}
  11b2f4:	e1a00003 	mov	r0, r3
  11b2f8:	e28bd000 	add	sp, fp, #0
  11b2fc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11b300:	e12fff1e 	bx	lr

0011b304 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
  11b304:	e92d4800 	push	{fp, lr}
  11b308:	e28db004 	add	fp, sp, #4
  11b30c:	e24dd008 	sub	sp, sp, #8
  11b310:	e50b0008 	str	r0, [fp, #-8]
  /* pbuf given? */
  if (p != NULL) {
  11b314:	e51b3008 	ldr	r3, [fp, #-8]
  11b318:	e3530000 	cmp	r3, #0
  11b31c:	0a000012 	beq	11b36c <pbuf_ref+0x68>
    SYS_ARCH_INC(p->ref, 1);
  11b320:	ebff9bc5 	bl	10223c <rt_enter_critical>
  11b324:	e51b3008 	ldr	r3, [fp, #-8]
  11b328:	e1d330be 	ldrh	r3, [r3, #14]
  11b32c:	e2833001 	add	r3, r3, #1
  11b330:	e6ff2073 	uxth	r2, r3
  11b334:	e51b3008 	ldr	r3, [fp, #-8]
  11b338:	e1c320be 	strh	r2, [r3, #14]
  11b33c:	ebff9bc4 	bl	102254 <rt_exit_critical>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
  11b340:	e51b3008 	ldr	r3, [fp, #-8]
  11b344:	e1d330be 	ldrh	r3, [r3, #14]
  11b348:	e3530000 	cmp	r3, #0
  11b34c:	1a000006 	bne	11b36c <pbuf_ref+0x68>
  11b350:	e3070a8c 	movw	r0, #31372	; 0x7a8c
  11b354:	e3400014 	movt	r0, #20
  11b358:	ebff9f6d 	bl	103114 <rt_kprintf>
  11b35c:	e300133a 	movw	r1, #826	; 0x33a
  11b360:	e307080c 	movw	r0, #30732	; 0x780c
  11b364:	e3400014 	movt	r0, #20
  11b368:	ebffbf3d 	bl	10b064 <sys_arch_assert>
  }
}
  11b36c:	e320f000 	nop	{0}
  11b370:	e24bd004 	sub	sp, fp, #4
  11b374:	e8bd8800 	pop	{fp, pc}

0011b378 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
  11b378:	e92d4800 	push	{fp, lr}
  11b37c:	e28db004 	add	fp, sp, #4
  11b380:	e24dd010 	sub	sp, sp, #16
  11b384:	e50b0010 	str	r0, [fp, #-16]
  11b388:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
  11b38c:	e51b3010 	ldr	r3, [fp, #-16]
  11b390:	e3530000 	cmp	r3, #0
  11b394:	0a000002 	beq	11b3a4 <pbuf_cat+0x2c>
  11b398:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b39c:	e3530000 	cmp	r3, #0
  11b3a0:	1a000007 	bne	11b3c4 <pbuf_cat+0x4c>
  11b3a4:	e3070aa0 	movw	r0, #31392	; 0x7aa0
  11b3a8:	e3400014 	movt	r0, #20
  11b3ac:	ebff9f58 	bl	103114 <rt_kprintf>
  11b3b0:	e300134e 	movw	r1, #846	; 0x34e
  11b3b4:	e307080c 	movw	r0, #30732	; 0x780c
  11b3b8:	e3400014 	movt	r0, #20
  11b3bc:	ebffbf28 	bl	10b064 <sys_arch_assert>
  11b3c0:	ea000034 	b	11b498 <pbuf_cat+0x120>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
  11b3c4:	e51b3010 	ldr	r3, [fp, #-16]
  11b3c8:	e50b3008 	str	r3, [fp, #-8]
  11b3cc:	ea00000a 	b	11b3fc <pbuf_cat+0x84>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
  11b3d0:	e51b3008 	ldr	r3, [fp, #-8]
  11b3d4:	e1d320b8 	ldrh	r2, [r3, #8]
  11b3d8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b3dc:	e1d330b8 	ldrh	r3, [r3, #8]
  11b3e0:	e0823003 	add	r3, r2, r3
  11b3e4:	e6ff2073 	uxth	r2, r3
  11b3e8:	e51b3008 	ldr	r3, [fp, #-8]
  11b3ec:	e1c320b8 	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
  11b3f0:	e51b3008 	ldr	r3, [fp, #-8]
  11b3f4:	e5933000 	ldr	r3, [r3]
  11b3f8:	e50b3008 	str	r3, [fp, #-8]
  11b3fc:	e51b3008 	ldr	r3, [fp, #-8]
  11b400:	e5933000 	ldr	r3, [r3]
  11b404:	e3530000 	cmp	r3, #0
  11b408:	1afffff0 	bne	11b3d0 <pbuf_cat+0x58>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
  11b40c:	e51b3008 	ldr	r3, [fp, #-8]
  11b410:	e1d320b8 	ldrh	r2, [r3, #8]
  11b414:	e51b3008 	ldr	r3, [fp, #-8]
  11b418:	e1d330ba 	ldrh	r3, [r3, #10]
  11b41c:	e1520003 	cmp	r2, r3
  11b420:	0a000006 	beq	11b440 <pbuf_cat+0xc8>
  11b424:	e3070ad8 	movw	r0, #31448	; 0x7ad8
  11b428:	e3400014 	movt	r0, #20
  11b42c:	ebff9f38 	bl	103114 <rt_kprintf>
  11b430:	e3001356 	movw	r1, #854	; 0x356
  11b434:	e307080c 	movw	r0, #30732	; 0x780c
  11b438:	e3400014 	movt	r0, #20
  11b43c:	ebffbf08 	bl	10b064 <sys_arch_assert>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
  11b440:	e51b3008 	ldr	r3, [fp, #-8]
  11b444:	e5933000 	ldr	r3, [r3]
  11b448:	e3530000 	cmp	r3, #0
  11b44c:	0a000006 	beq	11b46c <pbuf_cat+0xf4>
  11b450:	e3070b08 	movw	r0, #31496	; 0x7b08
  11b454:	e3400014 	movt	r0, #20
  11b458:	ebff9f2d 	bl	103114 <rt_kprintf>
  11b45c:	e3001357 	movw	r1, #855	; 0x357
  11b460:	e307080c 	movw	r0, #30732	; 0x780c
  11b464:	e3400014 	movt	r0, #20
  11b468:	ebffbefd 	bl	10b064 <sys_arch_assert>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
  11b46c:	e51b3008 	ldr	r3, [fp, #-8]
  11b470:	e1d320b8 	ldrh	r2, [r3, #8]
  11b474:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b478:	e1d330b8 	ldrh	r3, [r3, #8]
  11b47c:	e0823003 	add	r3, r2, r3
  11b480:	e6ff2073 	uxth	r2, r3
  11b484:	e51b3008 	ldr	r3, [fp, #-8]
  11b488:	e1c320b8 	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
  11b48c:	e51b3008 	ldr	r3, [fp, #-8]
  11b490:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11b494:	e5832000 	str	r2, [r3]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
  11b498:	e24bd004 	sub	sp, fp, #4
  11b49c:	e8bd8800 	pop	{fp, pc}

0011b4a0 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
  11b4a0:	e92d4800 	push	{fp, lr}
  11b4a4:	e28db004 	add	fp, sp, #4
  11b4a8:	e24dd008 	sub	sp, sp, #8
  11b4ac:	e50b0008 	str	r0, [fp, #-8]
  11b4b0:	e50b100c 	str	r1, [fp, #-12]
  pbuf_cat(h, t);
  11b4b4:	e51b100c 	ldr	r1, [fp, #-12]
  11b4b8:	e51b0008 	ldr	r0, [fp, #-8]
  11b4bc:	ebffffad 	bl	11b378 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
  11b4c0:	e51b000c 	ldr	r0, [fp, #-12]
  11b4c4:	ebffff8e 	bl	11b304 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
  11b4c8:	e320f000 	nop	{0}
  11b4cc:	e24bd004 	sub	sp, fp, #4
  11b4d0:	e8bd8800 	pop	{fp, pc}

0011b4d4 <pbuf_dechain>:
 * @return remainder of the pbuf chain, or NULL if it was de-allocated.
 * @note May not be called on a packet queue.
 */
struct pbuf *
pbuf_dechain(struct pbuf *p)
{
  11b4d4:	e92d4800 	push	{fp, lr}
  11b4d8:	e28db004 	add	fp, sp, #4
  11b4dc:	e24dd010 	sub	sp, sp, #16
  11b4e0:	e50b0010 	str	r0, [fp, #-16]
  struct pbuf *q;
  u8_t tail_gone = 1;
  11b4e4:	e3a03001 	mov	r3, #1
  11b4e8:	e54b3005 	strb	r3, [fp, #-5]
  /* tail */
  q = p->next;
  11b4ec:	e51b3010 	ldr	r3, [fp, #-16]
  11b4f0:	e5933000 	ldr	r3, [r3]
  11b4f4:	e50b300c 	str	r3, [fp, #-12]
  /* pbuf has successor in chain? */
  if (q != NULL) {
  11b4f8:	e51b300c 	ldr	r3, [fp, #-12]
  11b4fc:	e3530000 	cmp	r3, #0
  11b500:	0a000024 	beq	11b598 <pbuf_dechain+0xc4>
    /* assert tot_len invariant: (p->tot_len == p->len + (p->next? p->next->tot_len: 0) */
    LWIP_ASSERT("p->tot_len == p->len + q->tot_len", q->tot_len == p->tot_len - p->len);
  11b504:	e51b300c 	ldr	r3, [fp, #-12]
  11b508:	e1d330b8 	ldrh	r3, [r3, #8]
  11b50c:	e1a02003 	mov	r2, r3
  11b510:	e51b3010 	ldr	r3, [fp, #-16]
  11b514:	e1d330b8 	ldrh	r3, [r3, #8]
  11b518:	e1a01003 	mov	r1, r3
  11b51c:	e51b3010 	ldr	r3, [fp, #-16]
  11b520:	e1d330ba 	ldrh	r3, [r3, #10]
  11b524:	e0413003 	sub	r3, r1, r3
  11b528:	e1520003 	cmp	r2, r3
  11b52c:	0a000006 	beq	11b54c <pbuf_dechain+0x78>
  11b530:	e3070b18 	movw	r0, #31512	; 0x7b18
  11b534:	e3400014 	movt	r0, #20
  11b538:	ebff9ef5 	bl	103114 <rt_kprintf>
  11b53c:	e300138d 	movw	r1, #909	; 0x38d
  11b540:	e307080c 	movw	r0, #30732	; 0x780c
  11b544:	e3400014 	movt	r0, #20
  11b548:	ebffbec5 	bl	10b064 <sys_arch_assert>
    /* enforce invariant if assertion is disabled */
    q->tot_len = p->tot_len - p->len;
  11b54c:	e51b3010 	ldr	r3, [fp, #-16]
  11b550:	e1d320b8 	ldrh	r2, [r3, #8]
  11b554:	e51b3010 	ldr	r3, [fp, #-16]
  11b558:	e1d330ba 	ldrh	r3, [r3, #10]
  11b55c:	e0423003 	sub	r3, r2, r3
  11b560:	e6ff2073 	uxth	r2, r3
  11b564:	e51b300c 	ldr	r3, [fp, #-12]
  11b568:	e1c320b8 	strh	r2, [r3, #8]
    /* decouple pbuf from remainder */
    p->next = NULL;
  11b56c:	e51b3010 	ldr	r3, [fp, #-16]
  11b570:	e3a02000 	mov	r2, #0
  11b574:	e5832000 	str	r2, [r3]
    /* total length of pbuf p is its own length only */
    p->tot_len = p->len;
  11b578:	e51b3010 	ldr	r3, [fp, #-16]
  11b57c:	e1d320ba 	ldrh	r2, [r3, #10]
  11b580:	e51b3010 	ldr	r3, [fp, #-16]
  11b584:	e1c320b8 	strh	r2, [r3, #8]
    /* q is no longer referenced by p, free it */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_dechain: unreferencing %p\n", (void *)q));
    tail_gone = pbuf_free(q);
  11b588:	e51b000c 	ldr	r0, [fp, #-12]
  11b58c:	ebfffec2 	bl	11b09c <pbuf_free>
  11b590:	e1a03000 	mov	r3, r0
  11b594:	e54b3005 	strb	r3, [fp, #-5]
                  ("pbuf_dechain: deallocated %p (as it is no longer referenced)\n", (void *)q));
    }
    /* return remaining tail or NULL if deallocated */
  }
  /* assert tot_len invariant: (p->tot_len == p->len + (p->next? p->next->tot_len: 0) */
  LWIP_ASSERT("p->tot_len == p->len", p->tot_len == p->len);
  11b598:	e51b3010 	ldr	r3, [fp, #-16]
  11b59c:	e1d320b8 	ldrh	r2, [r3, #8]
  11b5a0:	e51b3010 	ldr	r3, [fp, #-16]
  11b5a4:	e1d330ba 	ldrh	r3, [r3, #10]
  11b5a8:	e1520003 	cmp	r2, r3
  11b5ac:	0a000006 	beq	11b5cc <pbuf_dechain+0xf8>
  11b5b0:	e3070b3c 	movw	r0, #31548	; 0x7b3c
  11b5b4:	e3400014 	movt	r0, #20
  11b5b8:	ebff9ed5 	bl	103114 <rt_kprintf>
  11b5bc:	e300139e 	movw	r1, #926	; 0x39e
  11b5c0:	e307080c 	movw	r0, #30732	; 0x780c
  11b5c4:	e3400014 	movt	r0, #20
  11b5c8:	ebffbea5 	bl	10b064 <sys_arch_assert>
  return ((tail_gone > 0) ? NULL : q);
  11b5cc:	e55b3005 	ldrb	r3, [fp, #-5]
  11b5d0:	e3530000 	cmp	r3, #0
  11b5d4:	1a000001 	bne	11b5e0 <pbuf_dechain+0x10c>
  11b5d8:	e51b300c 	ldr	r3, [fp, #-12]
  11b5dc:	ea000000 	b	11b5e4 <pbuf_dechain+0x110>
  11b5e0:	e3a03000 	mov	r3, #0
}
  11b5e4:	e1a00003 	mov	r0, r3
  11b5e8:	e24bd004 	sub	sp, fp, #4
  11b5ec:	e8bd8800 	pop	{fp, pc}

0011b5f0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
  11b5f0:	e92d4800 	push	{fp, lr}
  11b5f4:	e28db004 	add	fp, sp, #4
  11b5f8:	e24dd010 	sub	sp, sp, #16
  11b5fc:	e50b0010 	str	r0, [fp, #-16]
  11b600:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  u16_t offset_to=0, offset_from=0, len;
  11b604:	e3a03000 	mov	r3, #0
  11b608:	e14b30b6 	strh	r3, [fp, #-6]
  11b60c:	e3a03000 	mov	r3, #0
  11b610:	e14b30b8 	strh	r3, [fp, #-8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
  11b614:	e51b3010 	ldr	r3, [fp, #-16]
  11b618:	e3530000 	cmp	r3, #0
  11b61c:	0a000008 	beq	11b644 <pbuf_copy+0x54>
  11b620:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b624:	e3530000 	cmp	r3, #0
  11b628:	0a000005 	beq	11b644 <pbuf_copy+0x54>
  11b62c:	e51b3010 	ldr	r3, [fp, #-16]
  11b630:	e1d320b8 	ldrh	r2, [r3, #8]
  11b634:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b638:	e1d330b8 	ldrh	r3, [r3, #8]
  11b63c:	e1520003 	cmp	r2, r3
  11b640:	2a000008 	bcs	11b668 <pbuf_copy+0x78>
  11b644:	e3070b54 	movw	r0, #31572	; 0x7b54
  11b648:	e3400014 	movt	r0, #20
  11b64c:	ebff9eb0 	bl	103114 <rt_kprintf>
  11b650:	e30013be 	movw	r1, #958	; 0x3be
  11b654:	e307080c 	movw	r0, #30732	; 0x780c
  11b658:	e3400014 	movt	r0, #20
  11b65c:	ebffbe80 	bl	10b064 <sys_arch_assert>
  11b660:	e3e0300f 	mvn	r3, #15
  11b664:	ea000094 	b	11b8bc <pbuf_copy+0x2cc>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
  11b668:	e51b3010 	ldr	r3, [fp, #-16]
  11b66c:	e1d330ba 	ldrh	r3, [r3, #10]
  11b670:	e1a02003 	mov	r2, r3
  11b674:	e15b30b6 	ldrh	r3, [fp, #-6]
  11b678:	e0422003 	sub	r2, r2, r3
  11b67c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b680:	e1d330ba 	ldrh	r3, [r3, #10]
  11b684:	e1a01003 	mov	r1, r3
  11b688:	e15b30b8 	ldrh	r3, [fp, #-8]
  11b68c:	e0413003 	sub	r3, r1, r3
  11b690:	e1520003 	cmp	r2, r3
  11b694:	ba000005 	blt	11b6b0 <pbuf_copy+0xc0>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
  11b698:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b69c:	e1d320ba 	ldrh	r2, [r3, #10]
  11b6a0:	e15b30b8 	ldrh	r3, [fp, #-8]
  11b6a4:	e0423003 	sub	r3, r2, r3
  11b6a8:	e14b30ba 	strh	r3, [fp, #-10]
  11b6ac:	ea000004 	b	11b6c4 <pbuf_copy+0xd4>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
  11b6b0:	e51b3010 	ldr	r3, [fp, #-16]
  11b6b4:	e1d320ba 	ldrh	r2, [r3, #10]
  11b6b8:	e15b30b6 	ldrh	r3, [fp, #-6]
  11b6bc:	e0423003 	sub	r3, r2, r3
  11b6c0:	e14b30ba 	strh	r3, [fp, #-10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
  11b6c4:	e51b3010 	ldr	r3, [fp, #-16]
  11b6c8:	e5932004 	ldr	r2, [r3, #4]
  11b6cc:	e15b30b6 	ldrh	r3, [fp, #-6]
  11b6d0:	e0820003 	add	r0, r2, r3
  11b6d4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b6d8:	e5932004 	ldr	r2, [r3, #4]
  11b6dc:	e15b30b8 	ldrh	r3, [fp, #-8]
  11b6e0:	e0823003 	add	r3, r2, r3
  11b6e4:	e15b20ba 	ldrh	r2, [fp, #-10]
  11b6e8:	e1a01003 	mov	r1, r3
  11b6ec:	eb009622 	bl	140f7c <memcpy>
    offset_to += len;
  11b6f0:	e15b20b6 	ldrh	r2, [fp, #-6]
  11b6f4:	e15b30ba 	ldrh	r3, [fp, #-10]
  11b6f8:	e0823003 	add	r3, r2, r3
  11b6fc:	e14b30b6 	strh	r3, [fp, #-6]
    offset_from += len;
  11b700:	e15b20b8 	ldrh	r2, [fp, #-8]
  11b704:	e15b30ba 	ldrh	r3, [fp, #-10]
  11b708:	e0823003 	add	r3, r2, r3
  11b70c:	e14b30b8 	strh	r3, [fp, #-8]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
  11b710:	e51b3010 	ldr	r3, [fp, #-16]
  11b714:	e1d330ba 	ldrh	r3, [r3, #10]
  11b718:	e15b20b6 	ldrh	r2, [fp, #-6]
  11b71c:	e1520003 	cmp	r2, r3
  11b720:	9a000006 	bls	11b740 <pbuf_copy+0x150>
  11b724:	e3070b84 	movw	r0, #31620	; 0x7b84
  11b728:	e3400014 	movt	r0, #20
  11b72c:	ebff9e78 	bl	103114 <rt_kprintf>
  11b730:	e30013ce 	movw	r1, #974	; 0x3ce
  11b734:	e307080c 	movw	r0, #30732	; 0x780c
  11b738:	e3400014 	movt	r0, #20
  11b73c:	ebffbe48 	bl	10b064 <sys_arch_assert>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
  11b740:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b744:	e1d330ba 	ldrh	r3, [r3, #10]
  11b748:	e15b20b8 	ldrh	r2, [fp, #-8]
  11b74c:	e1520003 	cmp	r2, r3
  11b750:	9a000006 	bls	11b770 <pbuf_copy+0x180>
  11b754:	e3070b9c 	movw	r0, #31644	; 0x7b9c
  11b758:	e3400014 	movt	r0, #20
  11b75c:	ebff9e6c 	bl	103114 <rt_kprintf>
  11b760:	e30013cf 	movw	r1, #975	; 0x3cf
  11b764:	e307080c 	movw	r0, #30732	; 0x780c
  11b768:	e3400014 	movt	r0, #20
  11b76c:	ebffbe3c 	bl	10b064 <sys_arch_assert>
    if (offset_from >= p_from->len) {
  11b770:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b774:	e1d330ba 	ldrh	r3, [r3, #10]
  11b778:	e15b20b8 	ldrh	r2, [fp, #-8]
  11b77c:	e1520003 	cmp	r2, r3
  11b780:	3a000004 	bcc	11b798 <pbuf_copy+0x1a8>
      /* on to next p_from (if any) */
      offset_from = 0;
  11b784:	e3a03000 	mov	r3, #0
  11b788:	e14b30b8 	strh	r3, [fp, #-8]
      p_from = p_from->next;
  11b78c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b790:	e5933000 	ldr	r3, [r3]
  11b794:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    }
    if (offset_to == p_to->len) {
  11b798:	e51b3010 	ldr	r3, [fp, #-16]
  11b79c:	e1d330ba 	ldrh	r3, [r3, #10]
  11b7a0:	e15b20b6 	ldrh	r2, [fp, #-6]
  11b7a4:	e1520003 	cmp	r2, r3
  11b7a8:	1a000013 	bne	11b7fc <pbuf_copy+0x20c>
      /* on to next p_to (if any) */
      offset_to = 0;
  11b7ac:	e3a03000 	mov	r3, #0
  11b7b0:	e14b30b6 	strh	r3, [fp, #-6]
      p_to = p_to->next;
  11b7b4:	e51b3010 	ldr	r3, [fp, #-16]
  11b7b8:	e5933000 	ldr	r3, [r3]
  11b7bc:	e50b3010 	str	r3, [fp, #-16]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
  11b7c0:	e51b3010 	ldr	r3, [fp, #-16]
  11b7c4:	e3530000 	cmp	r3, #0
  11b7c8:	1a00000b 	bne	11b7fc <pbuf_copy+0x20c>
  11b7cc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b7d0:	e3530000 	cmp	r3, #0
  11b7d4:	0a000008 	beq	11b7fc <pbuf_copy+0x20c>
  11b7d8:	e3070bb8 	movw	r0, #31672	; 0x7bb8
  11b7dc:	e3400014 	movt	r0, #20
  11b7e0:	ebff9e4b 	bl	103114 <rt_kprintf>
  11b7e4:	e30013d9 	movw	r1, #985	; 0x3d9
  11b7e8:	e307080c 	movw	r0, #30732	; 0x780c
  11b7ec:	e3400014 	movt	r0, #20
  11b7f0:	ebffbe1b 	bl	10b064 <sys_arch_assert>
  11b7f4:	e3e0300f 	mvn	r3, #15
  11b7f8:	ea00002f 	b	11b8bc <pbuf_copy+0x2cc>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
  11b7fc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b800:	e3530000 	cmp	r3, #0
  11b804:	0a000012 	beq	11b854 <pbuf_copy+0x264>
  11b808:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b80c:	e1d320ba 	ldrh	r2, [r3, #10]
  11b810:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b814:	e1d330b8 	ldrh	r3, [r3, #8]
  11b818:	e1520003 	cmp	r2, r3
  11b81c:	1a00000c 	bne	11b854 <pbuf_copy+0x264>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
  11b820:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b824:	e5933000 	ldr	r3, [r3]
  11b828:	e3530000 	cmp	r3, #0
  11b82c:	0a000008 	beq	11b854 <pbuf_copy+0x264>
  11b830:	e3070bc8 	movw	r0, #31688	; 0x7bc8
  11b834:	e3400014 	movt	r0, #20
  11b838:	ebff9e35 	bl	103114 <rt_kprintf>
  11b83c:	e30013df 	movw	r1, #991	; 0x3df
  11b840:	e307080c 	movw	r0, #30732	; 0x780c
  11b844:	e3400014 	movt	r0, #20
  11b848:	ebffbe05 	bl	10b064 <sys_arch_assert>
  11b84c:	e3e03005 	mvn	r3, #5
  11b850:	ea000019 	b	11b8bc <pbuf_copy+0x2cc>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
  11b854:	e51b3010 	ldr	r3, [fp, #-16]
  11b858:	e3530000 	cmp	r3, #0
  11b85c:	0a000012 	beq	11b8ac <pbuf_copy+0x2bc>
  11b860:	e51b3010 	ldr	r3, [fp, #-16]
  11b864:	e1d320ba 	ldrh	r2, [r3, #10]
  11b868:	e51b3010 	ldr	r3, [fp, #-16]
  11b86c:	e1d330b8 	ldrh	r3, [r3, #8]
  11b870:	e1520003 	cmp	r2, r3
  11b874:	1a00000c 	bne	11b8ac <pbuf_copy+0x2bc>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
  11b878:	e51b3010 	ldr	r3, [fp, #-16]
  11b87c:	e5933000 	ldr	r3, [r3]
  11b880:	e3530000 	cmp	r3, #0
  11b884:	0a000008 	beq	11b8ac <pbuf_copy+0x2bc>
  11b888:	e3070bc8 	movw	r0, #31688	; 0x7bc8
  11b88c:	e3400014 	movt	r0, #20
  11b890:	ebff9e1f 	bl	103114 <rt_kprintf>
  11b894:	e3a01ff9 	mov	r1, #996	; 0x3e4
  11b898:	e307080c 	movw	r0, #30732	; 0x780c
  11b89c:	e3400014 	movt	r0, #20
  11b8a0:	ebffbdef 	bl	10b064 <sys_arch_assert>
  11b8a4:	e3e03005 	mvn	r3, #5
  11b8a8:	ea000003 	b	11b8bc <pbuf_copy+0x2cc>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
  11b8ac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11b8b0:	e3530000 	cmp	r3, #0
  11b8b4:	1affff6b 	bne	11b668 <pbuf_copy+0x78>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
  11b8b8:	e3a03000 	mov	r3, #0
}
  11b8bc:	e1a00003 	mov	r0, r3
  11b8c0:	e24bd004 	sub	sp, fp, #4
  11b8c4:	e8bd8800 	pop	{fp, pc}

0011b8c8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
  11b8c8:	e92d4800 	push	{fp, lr}
  11b8cc:	e28db004 	add	fp, sp, #4
  11b8d0:	e24dd020 	sub	sp, sp, #32
  11b8d4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  11b8d8:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  11b8dc:	e1a01002 	mov	r1, r2
  11b8e0:	e1a02003 	mov	r2, r3
  11b8e4:	e1a03001 	mov	r3, r1
  11b8e8:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
  11b8ec:	e1a03002 	mov	r3, r2
  11b8f0:	e14b32b0 	strh	r3, [fp, #-32]	; 0xffffffe0
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
  11b8f4:	e3a03000 	mov	r3, #0
  11b8f8:	e14b30be 	strh	r3, [fp, #-14]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
  11b8fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b900:	e3530000 	cmp	r3, #0
  11b904:	1a000008 	bne	11b92c <pbuf_copy_partial+0x64>
  11b908:	e3070bf4 	movw	r0, #31732	; 0x7bf4
  11b90c:	e3400014 	movt	r0, #20
  11b910:	ebff9dff 	bl	103114 <rt_kprintf>
  11b914:	e30013ff 	movw	r1, #1023	; 0x3ff
  11b918:	e307080c 	movw	r0, #30732	; 0x780c
  11b91c:	e3400014 	movt	r0, #20
  11b920:	ebffbdcf 	bl	10b064 <sys_arch_assert>
  11b924:	e3a03000 	mov	r3, #0
  11b928:	ea000053 	b	11ba7c <pbuf_copy_partial+0x1b4>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
  11b92c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11b930:	e3530000 	cmp	r3, #0
  11b934:	1a000008 	bne	11b95c <pbuf_copy_partial+0x94>
  11b938:	e3070c14 	movw	r0, #31764	; 0x7c14
  11b93c:	e3400014 	movt	r0, #20
  11b940:	ebff9df3 	bl	103114 <rt_kprintf>
  11b944:	e3a01b01 	mov	r1, #1024	; 0x400
  11b948:	e307080c 	movw	r0, #30732	; 0x780c
  11b94c:	e3400014 	movt	r0, #20
  11b950:	ebffbdc3 	bl	10b064 <sys_arch_assert>
  11b954:	e3a03000 	mov	r3, #0
  11b958:	ea000047 	b	11ba7c <pbuf_copy_partial+0x1b4>

  left = 0;
  11b95c:	e3a03000 	mov	r3, #0
  11b960:	e14b30ba 	strh	r3, [fp, #-10]

  if ((buf == NULL) || (dataptr == NULL)) {
  11b964:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b968:	e3530000 	cmp	r3, #0
  11b96c:	0a000002 	beq	11b97c <pbuf_copy_partial+0xb4>
  11b970:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11b974:	e3530000 	cmp	r3, #0
  11b978:	1a000001 	bne	11b984 <pbuf_copy_partial+0xbc>
    return 0;
  11b97c:	e3a03000 	mov	r3, #0
  11b980:	ea00003d 	b	11ba7c <pbuf_copy_partial+0x1b4>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
  11b984:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11b988:	e50b3008 	str	r3, [fp, #-8]
  11b98c:	ea000033 	b	11ba60 <pbuf_copy_partial+0x198>
    if ((offset != 0) && (offset >= p->len)) {
  11b990:	e15b32b0 	ldrh	r3, [fp, #-32]	; 0xffffffe0
  11b994:	e3530000 	cmp	r3, #0
  11b998:	0a00000a 	beq	11b9c8 <pbuf_copy_partial+0x100>
  11b99c:	e51b3008 	ldr	r3, [fp, #-8]
  11b9a0:	e1d330ba 	ldrh	r3, [r3, #10]
  11b9a4:	e15b22b0 	ldrh	r2, [fp, #-32]	; 0xffffffe0
  11b9a8:	e1520003 	cmp	r2, r3
  11b9ac:	3a000005 	bcc	11b9c8 <pbuf_copy_partial+0x100>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
  11b9b0:	e51b3008 	ldr	r3, [fp, #-8]
  11b9b4:	e1d330ba 	ldrh	r3, [r3, #10]
  11b9b8:	e15b22b0 	ldrh	r2, [fp, #-32]	; 0xffffffe0
  11b9bc:	e0423003 	sub	r3, r2, r3
  11b9c0:	e14b32b0 	strh	r3, [fp, #-32]	; 0xffffffe0
  11b9c4:	ea000022 	b	11ba54 <pbuf_copy_partial+0x18c>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
  11b9c8:	e51b3008 	ldr	r3, [fp, #-8]
  11b9cc:	e1d320ba 	ldrh	r2, [r3, #10]
  11b9d0:	e15b32b0 	ldrh	r3, [fp, #-32]	; 0xffffffe0
  11b9d4:	e0423003 	sub	r3, r2, r3
  11b9d8:	e14b30bc 	strh	r3, [fp, #-12]
      if (buf_copy_len > len) {
  11b9dc:	e15b20bc 	ldrh	r2, [fp, #-12]
  11b9e0:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  11b9e4:	e1520003 	cmp	r2, r3
  11b9e8:	9a000001 	bls	11b9f4 <pbuf_copy_partial+0x12c>
        buf_copy_len = len;
  11b9ec:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  11b9f0:	e14b30bc 	strh	r3, [fp, #-12]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
  11b9f4:	e15b30ba 	ldrh	r3, [fp, #-10]
  11b9f8:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  11b9fc:	e0820003 	add	r0, r2, r3
  11ba00:	e51b3008 	ldr	r3, [fp, #-8]
  11ba04:	e5932004 	ldr	r2, [r3, #4]
  11ba08:	e15b32b0 	ldrh	r3, [fp, #-32]	; 0xffffffe0
  11ba0c:	e0823003 	add	r3, r2, r3
  11ba10:	e15b20bc 	ldrh	r2, [fp, #-12]
  11ba14:	e1a01003 	mov	r1, r3
  11ba18:	eb009557 	bl	140f7c <memcpy>
      copied_total += buf_copy_len;
  11ba1c:	e15b20be 	ldrh	r2, [fp, #-14]
  11ba20:	e15b30bc 	ldrh	r3, [fp, #-12]
  11ba24:	e0823003 	add	r3, r2, r3
  11ba28:	e14b30be 	strh	r3, [fp, #-14]
      left += buf_copy_len;
  11ba2c:	e15b20ba 	ldrh	r2, [fp, #-10]
  11ba30:	e15b30bc 	ldrh	r3, [fp, #-12]
  11ba34:	e0823003 	add	r3, r2, r3
  11ba38:	e14b30ba 	strh	r3, [fp, #-10]
      len -= buf_copy_len;
  11ba3c:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
  11ba40:	e15b30bc 	ldrh	r3, [fp, #-12]
  11ba44:	e0423003 	sub	r3, r2, r3
  11ba48:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
      offset = 0;
  11ba4c:	e3a03000 	mov	r3, #0
  11ba50:	e14b32b0 	strh	r3, [fp, #-32]	; 0xffffffe0
  for (p = buf; len != 0 && p != NULL; p = p->next) {
  11ba54:	e51b3008 	ldr	r3, [fp, #-8]
  11ba58:	e5933000 	ldr	r3, [r3]
  11ba5c:	e50b3008 	str	r3, [fp, #-8]
  11ba60:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  11ba64:	e3530000 	cmp	r3, #0
  11ba68:	0a000002 	beq	11ba78 <pbuf_copy_partial+0x1b0>
  11ba6c:	e51b3008 	ldr	r3, [fp, #-8]
  11ba70:	e3530000 	cmp	r3, #0
  11ba74:	1affffc5 	bne	11b990 <pbuf_copy_partial+0xc8>
    }
  }
  return copied_total;
  11ba78:	e15b30be 	ldrh	r3, [fp, #-14]
}
  11ba7c:	e1a00003 	mov	r0, r3
  11ba80:	e24bd004 	sub	sp, fp, #4
  11ba84:	e8bd8800 	pop	{fp, pc}

0011ba88 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf*
pbuf_skip_const(const struct pbuf* in, u16_t in_offset, u16_t* out_offset)
{
  11ba88:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11ba8c:	e28db000 	add	fp, sp, #0
  11ba90:	e24dd01c 	sub	sp, sp, #28
  11ba94:	e50b0010 	str	r0, [fp, #-16]
  11ba98:	e1a03001 	mov	r3, r1
  11ba9c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  11baa0:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  u16_t offset_left = in_offset;
  11baa4:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11baa8:	e14b30b6 	strh	r3, [fp, #-6]
  const struct pbuf* q = in;
  11baac:	e51b3010 	ldr	r3, [fp, #-16]
  11bab0:	e50b300c 	str	r3, [fp, #-12]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
  11bab4:	ea000007 	b	11bad8 <pbuf_skip_const+0x50>
    offset_left -= q->len;
  11bab8:	e51b300c 	ldr	r3, [fp, #-12]
  11babc:	e1d330ba 	ldrh	r3, [r3, #10]
  11bac0:	e15b20b6 	ldrh	r2, [fp, #-6]
  11bac4:	e0423003 	sub	r3, r2, r3
  11bac8:	e14b30b6 	strh	r3, [fp, #-6]
    q = q->next;
  11bacc:	e51b300c 	ldr	r3, [fp, #-12]
  11bad0:	e5933000 	ldr	r3, [r3]
  11bad4:	e50b300c 	str	r3, [fp, #-12]
  while ((q != NULL) && (q->len <= offset_left)) {
  11bad8:	e51b300c 	ldr	r3, [fp, #-12]
  11badc:	e3530000 	cmp	r3, #0
  11bae0:	0a000004 	beq	11baf8 <pbuf_skip_const+0x70>
  11bae4:	e51b300c 	ldr	r3, [fp, #-12]
  11bae8:	e1d330ba 	ldrh	r3, [r3, #10]
  11baec:	e15b20b6 	ldrh	r2, [fp, #-6]
  11baf0:	e1520003 	cmp	r2, r3
  11baf4:	2affffef 	bcs	11bab8 <pbuf_skip_const+0x30>
  }
  if (out_offset != NULL) {
  11baf8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11bafc:	e3530000 	cmp	r3, #0
  11bb00:	0a000002 	beq	11bb10 <pbuf_skip_const+0x88>
    *out_offset = offset_left;
  11bb04:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11bb08:	e15b20b6 	ldrh	r2, [fp, #-6]
  11bb0c:	e1c320b0 	strh	r2, [r3]
  }
  return q;
  11bb10:	e51b300c 	ldr	r3, [fp, #-12]
}
  11bb14:	e1a00003 	mov	r0, r3
  11bb18:	e28bd000 	add	sp, fp, #0
  11bb1c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11bb20:	e12fff1e 	bx	lr

0011bb24 <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf*
pbuf_skip(struct pbuf* in, u16_t in_offset, u16_t* out_offset)
{
  11bb24:	e92d4800 	push	{fp, lr}
  11bb28:	e28db004 	add	fp, sp, #4
  11bb2c:	e24dd018 	sub	sp, sp, #24
  11bb30:	e50b0010 	str	r0, [fp, #-16]
  11bb34:	e1a03001 	mov	r3, r1
  11bb38:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  11bb3c:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  const struct pbuf* out = pbuf_skip_const(in, in_offset, out_offset);
  11bb40:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11bb44:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  11bb48:	e1a01003 	mov	r1, r3
  11bb4c:	e51b0010 	ldr	r0, [fp, #-16]
  11bb50:	ebffffcc 	bl	11ba88 <pbuf_skip_const>
  11bb54:	e50b0008 	str	r0, [fp, #-8]
  return LWIP_CONST_CAST(struct pbuf*, out);
  11bb58:	e51b3008 	ldr	r3, [fp, #-8]
}
  11bb5c:	e1a00003 	mov	r0, r3
  11bb60:	e24bd004 	sub	sp, fp, #4
  11bb64:	e8bd8800 	pop	{fp, pc}

0011bb68 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
  11bb68:	e92d4800 	push	{fp, lr}
  11bb6c:	e28db004 	add	fp, sp, #4
  11bb70:	e24dd020 	sub	sp, sp, #32
  11bb74:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  11bb78:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  11bb7c:	e1a03002 	mov	r3, r2
  11bb80:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
  struct pbuf *p;
  u16_t buf_copy_len;
  u16_t total_copy_len = len;
  11bb84:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  11bb88:	e14b30bc 	strh	r3, [fp, #-12]
  u16_t copied_total = 0;
  11bb8c:	e3a03000 	mov	r3, #0
  11bb90:	e14b30be 	strh	r3, [fp, #-14]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
  11bb94:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11bb98:	e3530000 	cmp	r3, #0
  11bb9c:	1a000008 	bne	11bbc4 <pbuf_take+0x5c>
  11bba0:	e3070c38 	movw	r0, #31800	; 0x7c38
  11bba4:	e3400014 	movt	r0, #20
  11bba8:	ebff9d59 	bl	103114 <rt_kprintf>
  11bbac:	e3001485 	movw	r1, #1157	; 0x485
  11bbb0:	e307080c 	movw	r0, #30732	; 0x780c
  11bbb4:	e3400014 	movt	r0, #20
  11bbb8:	ebffbd29 	bl	10b064 <sys_arch_assert>
  11bbbc:	e3e0300f 	mvn	r3, #15
  11bbc0:	ea000062 	b	11bd50 <pbuf_take+0x1e8>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
  11bbc4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11bbc8:	e3530000 	cmp	r3, #0
  11bbcc:	1a000008 	bne	11bbf4 <pbuf_take+0x8c>
  11bbd0:	e3070c50 	movw	r0, #31824	; 0x7c50
  11bbd4:	e3400014 	movt	r0, #20
  11bbd8:	ebff9d4d 	bl	103114 <rt_kprintf>
  11bbdc:	e3001486 	movw	r1, #1158	; 0x486
  11bbe0:	e307080c 	movw	r0, #30732	; 0x780c
  11bbe4:	e3400014 	movt	r0, #20
  11bbe8:	ebffbd1d 	bl	10b064 <sys_arch_assert>
  11bbec:	e3e0300f 	mvn	r3, #15
  11bbf0:	ea000056 	b	11bd50 <pbuf_take+0x1e8>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
  11bbf4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11bbf8:	e1d330b8 	ldrh	r3, [r3, #8]
  11bbfc:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
  11bc00:	e1520003 	cmp	r2, r3
  11bc04:	9a000008 	bls	11bc2c <pbuf_take+0xc4>
  11bc08:	e3070c6c 	movw	r0, #31852	; 0x7c6c
  11bc0c:	e3400014 	movt	r0, #20
  11bc10:	ebff9d3f 	bl	103114 <rt_kprintf>
  11bc14:	e3001487 	movw	r1, #1159	; 0x487
  11bc18:	e307080c 	movw	r0, #30732	; 0x780c
  11bc1c:	e3400014 	movt	r0, #20
  11bc20:	ebffbd0f 	bl	10b064 <sys_arch_assert>
  11bc24:	e3e03000 	mvn	r3, #0
  11bc28:	ea000048 	b	11bd50 <pbuf_take+0x1e8>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
  11bc2c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11bc30:	e3530000 	cmp	r3, #0
  11bc34:	0a000007 	beq	11bc58 <pbuf_take+0xf0>
  11bc38:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11bc3c:	e3530000 	cmp	r3, #0
  11bc40:	0a000004 	beq	11bc58 <pbuf_take+0xf0>
  11bc44:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11bc48:	e1d330b8 	ldrh	r3, [r3, #8]
  11bc4c:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
  11bc50:	e1520003 	cmp	r2, r3
  11bc54:	9a000001 	bls	11bc60 <pbuf_take+0xf8>
    return ERR_ARG;
  11bc58:	e3e0300f 	mvn	r3, #15
  11bc5c:	ea00003b 	b	11bd50 <pbuf_take+0x1e8>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
  11bc60:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11bc64:	e50b3008 	str	r3, [fp, #-8]
  11bc68:	ea000026 	b	11bd08 <pbuf_take+0x1a0>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
  11bc6c:	e51b3008 	ldr	r3, [fp, #-8]
  11bc70:	e3530000 	cmp	r3, #0
  11bc74:	1a000006 	bne	11bc94 <pbuf_take+0x12c>
  11bc78:	e3070c8c 	movw	r0, #31884	; 0x7c8c
  11bc7c:	e3400014 	movt	r0, #20
  11bc80:	ebff9d23 	bl	103114 <rt_kprintf>
  11bc84:	e300148f 	movw	r1, #1167	; 0x48f
  11bc88:	e307080c 	movw	r0, #30732	; 0x780c
  11bc8c:	e3400014 	movt	r0, #20
  11bc90:	ebffbcf3 	bl	10b064 <sys_arch_assert>
    buf_copy_len = total_copy_len;
  11bc94:	e15b30bc 	ldrh	r3, [fp, #-12]
  11bc98:	e14b30ba 	strh	r3, [fp, #-10]
    if (buf_copy_len > p->len) {
  11bc9c:	e51b3008 	ldr	r3, [fp, #-8]
  11bca0:	e1d330ba 	ldrh	r3, [r3, #10]
  11bca4:	e15b20ba 	ldrh	r2, [fp, #-10]
  11bca8:	e1520003 	cmp	r2, r3
  11bcac:	9a000002 	bls	11bcbc <pbuf_take+0x154>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
  11bcb0:	e51b3008 	ldr	r3, [fp, #-8]
  11bcb4:	e1d330ba 	ldrh	r3, [r3, #10]
  11bcb8:	e14b30ba 	strh	r3, [fp, #-10]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char*)dataptr)[copied_total], buf_copy_len);
  11bcbc:	e51b3008 	ldr	r3, [fp, #-8]
  11bcc0:	e5930004 	ldr	r0, [r3, #4]
  11bcc4:	e15b30be 	ldrh	r3, [fp, #-14]
  11bcc8:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  11bccc:	e0823003 	add	r3, r2, r3
  11bcd0:	e15b20ba 	ldrh	r2, [fp, #-10]
  11bcd4:	e1a01003 	mov	r1, r3
  11bcd8:	eb0094a7 	bl	140f7c <memcpy>
    total_copy_len -= buf_copy_len;
  11bcdc:	e15b20bc 	ldrh	r2, [fp, #-12]
  11bce0:	e15b30ba 	ldrh	r3, [fp, #-10]
  11bce4:	e0423003 	sub	r3, r2, r3
  11bce8:	e14b30bc 	strh	r3, [fp, #-12]
    copied_total += buf_copy_len;
  11bcec:	e15b20be 	ldrh	r2, [fp, #-14]
  11bcf0:	e15b30ba 	ldrh	r3, [fp, #-10]
  11bcf4:	e0823003 	add	r3, r2, r3
  11bcf8:	e14b30be 	strh	r3, [fp, #-14]
  for (p = buf; total_copy_len != 0; p = p->next) {
  11bcfc:	e51b3008 	ldr	r3, [fp, #-8]
  11bd00:	e5933000 	ldr	r3, [r3]
  11bd04:	e50b3008 	str	r3, [fp, #-8]
  11bd08:	e15b30bc 	ldrh	r3, [fp, #-12]
  11bd0c:	e3530000 	cmp	r3, #0
  11bd10:	1affffd5 	bne	11bc6c <pbuf_take+0x104>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
  11bd14:	e15b30bc 	ldrh	r3, [fp, #-12]
  11bd18:	e3530000 	cmp	r3, #0
  11bd1c:	1a000003 	bne	11bd30 <pbuf_take+0x1c8>
  11bd20:	e15b20be 	ldrh	r2, [fp, #-14]
  11bd24:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  11bd28:	e1520003 	cmp	r2, r3
  11bd2c:	0a000006 	beq	11bd4c <pbuf_take+0x1e4>
  11bd30:	e3070ca4 	movw	r0, #31908	; 0x7ca4
  11bd34:	e3400014 	movt	r0, #20
  11bd38:	ebff9cf5 	bl	103114 <rt_kprintf>
  11bd3c:	e300149a 	movw	r1, #1178	; 0x49a
  11bd40:	e307080c 	movw	r0, #30732	; 0x780c
  11bd44:	e3400014 	movt	r0, #20
  11bd48:	ebffbcc5 	bl	10b064 <sys_arch_assert>
  return ERR_OK;
  11bd4c:	e3a03000 	mov	r3, #0
}
  11bd50:	e1a00003 	mov	r0, r3
  11bd54:	e24bd004 	sub	sp, fp, #4
  11bd58:	e8bd8800 	pop	{fp, pc}

0011bd5c <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
  11bd5c:	e92d4800 	push	{fp, lr}
  11bd60:	e28db004 	add	fp, sp, #4
  11bd64:	e24dd020 	sub	sp, sp, #32
  11bd68:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  11bd6c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  11bd70:	e1a01002 	mov	r1, r2
  11bd74:	e1a02003 	mov	r2, r3
  11bd78:	e1a03001 	mov	r3, r1
  11bd7c:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
  11bd80:	e1a03002 	mov	r3, r2
  11bd84:	e14b32b0 	strh	r3, [fp, #-32]	; 0xffffffe0
  u16_t target_offset;
  struct pbuf* q = pbuf_skip(buf, offset, &target_offset);
  11bd88:	e24b2014 	sub	r2, fp, #20
  11bd8c:	e15b32b0 	ldrh	r3, [fp, #-32]	; 0xffffffe0
  11bd90:	e1a01003 	mov	r1, r3
  11bd94:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  11bd98:	ebffff61 	bl	11bb24 <pbuf_skip>
  11bd9c:	e50b0008 	str	r0, [fp, #-8]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
  11bda0:	e51b3008 	ldr	r3, [fp, #-8]
  11bda4:	e3530000 	cmp	r3, #0
  11bda8:	0a000033 	beq	11be7c <pbuf_take_at+0x120>
  11bdac:	e51b3008 	ldr	r3, [fp, #-8]
  11bdb0:	e1d330b8 	ldrh	r3, [r3, #8]
  11bdb4:	e1a02003 	mov	r2, r3
  11bdb8:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
  11bdbc:	e1a01003 	mov	r1, r3
  11bdc0:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  11bdc4:	e0813003 	add	r3, r1, r3
  11bdc8:	e1520003 	cmp	r2, r3
  11bdcc:	ba00002a 	blt	11be7c <pbuf_take_at+0x120>
    u16_t remaining_len = len;
  11bdd0:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  11bdd4:	e14b30ba 	strh	r3, [fp, #-10]
    const u8_t* src_ptr = (const u8_t*)dataptr;
  11bdd8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11bddc:	e50b3010 	str	r3, [fp, #-16]
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len = LWIP_MIN(q->len - target_offset, len);
  11bde0:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
  11bde4:	e51b3008 	ldr	r3, [fp, #-8]
  11bde8:	e1d330ba 	ldrh	r3, [r3, #10]
  11bdec:	e1a01003 	mov	r1, r3
  11bdf0:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
  11bdf4:	e0413003 	sub	r3, r1, r3
  11bdf8:	e1520003 	cmp	r2, r3
  11bdfc:	b1a03002 	movlt	r3, r2
  11be00:	a1a03003 	movge	r3, r3
  11be04:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
    MEMCPY(((u8_t*)q->payload) + target_offset, dataptr, first_copy_len);
  11be08:	e51b3008 	ldr	r3, [fp, #-8]
  11be0c:	e5933004 	ldr	r3, [r3, #4]
  11be10:	e15b21b4 	ldrh	r2, [fp, #-20]	; 0xffffffec
  11be14:	e0833002 	add	r3, r3, r2
  11be18:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
  11be1c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  11be20:	e1a00003 	mov	r0, r3
  11be24:	eb009454 	bl	140f7c <memcpy>
    remaining_len -= first_copy_len;
  11be28:	e15b20ba 	ldrh	r2, [fp, #-10]
  11be2c:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11be30:	e0423003 	sub	r3, r2, r3
  11be34:	e14b30ba 	strh	r3, [fp, #-10]
    src_ptr += first_copy_len;
  11be38:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11be3c:	e51b2010 	ldr	r2, [fp, #-16]
  11be40:	e0823003 	add	r3, r2, r3
  11be44:	e50b3010 	str	r3, [fp, #-16]
    if (remaining_len > 0) {
  11be48:	e15b30ba 	ldrh	r3, [fp, #-10]
  11be4c:	e3530000 	cmp	r3, #0
  11be50:	0a000007 	beq	11be74 <pbuf_take_at+0x118>
      return pbuf_take(q->next, src_ptr, remaining_len);
  11be54:	e51b3008 	ldr	r3, [fp, #-8]
  11be58:	e5933000 	ldr	r3, [r3]
  11be5c:	e15b20ba 	ldrh	r2, [fp, #-10]
  11be60:	e51b1010 	ldr	r1, [fp, #-16]
  11be64:	e1a00003 	mov	r0, r3
  11be68:	ebffff3e 	bl	11bb68 <pbuf_take>
  11be6c:	e1a03000 	mov	r3, r0
  11be70:	ea000002 	b	11be80 <pbuf_take_at+0x124>
    }
    return ERR_OK;
  11be74:	e3a03000 	mov	r3, #0
  11be78:	ea000000 	b	11be80 <pbuf_take_at+0x124>
  }
  return ERR_MEM;
  11be7c:	e3e03000 	mvn	r3, #0
}
  11be80:	e1a00003 	mov	r0, r3
  11be84:	e24bd004 	sub	sp, fp, #4
  11be88:	e8bd8800 	pop	{fp, pc}

0011be8c <pbuf_coalesce>:
 * @return a new, single pbuf (p->next is NULL)
 *         or the old pbuf if allocation fails
 */
struct pbuf*
pbuf_coalesce(struct pbuf *p, pbuf_layer layer)
{
  11be8c:	e92d4800 	push	{fp, lr}
  11be90:	e28db004 	add	fp, sp, #4
  11be94:	e24dd010 	sub	sp, sp, #16
  11be98:	e50b0010 	str	r0, [fp, #-16]
  11be9c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct pbuf *q;
  err_t err;
  if (p->next == NULL) {
  11bea0:	e51b3010 	ldr	r3, [fp, #-16]
  11bea4:	e5933000 	ldr	r3, [r3]
  11bea8:	e3530000 	cmp	r3, #0
  11beac:	1a000001 	bne	11beb8 <pbuf_coalesce+0x2c>
    return p;
  11beb0:	e51b3010 	ldr	r3, [fp, #-16]
  11beb4:	ea00001d 	b	11bf30 <pbuf_coalesce+0xa4>
  }
  q = pbuf_alloc(layer, p->tot_len, PBUF_RAM);
  11beb8:	e51b3010 	ldr	r3, [fp, #-16]
  11bebc:	e1d330b8 	ldrh	r3, [r3, #8]
  11bec0:	e3a02000 	mov	r2, #0
  11bec4:	e1a01003 	mov	r1, r3
  11bec8:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  11becc:	ebfff96b 	bl	11a480 <pbuf_alloc>
  11bed0:	e50b0008 	str	r0, [fp, #-8]
  if (q == NULL) {
  11bed4:	e51b3008 	ldr	r3, [fp, #-8]
  11bed8:	e3530000 	cmp	r3, #0
  11bedc:	1a000001 	bne	11bee8 <pbuf_coalesce+0x5c>
    /* @todo: what do we do now? */
    return p;
  11bee0:	e51b3010 	ldr	r3, [fp, #-16]
  11bee4:	ea000011 	b	11bf30 <pbuf_coalesce+0xa4>
  }
  err = pbuf_copy(q, p);
  11bee8:	e51b1010 	ldr	r1, [fp, #-16]
  11beec:	e51b0008 	ldr	r0, [fp, #-8]
  11bef0:	ebfffdbe 	bl	11b5f0 <pbuf_copy>
  11bef4:	e1a03000 	mov	r3, r0
  11bef8:	e54b3009 	strb	r3, [fp, #-9]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
  11befc:	e15b30d9 	ldrsb	r3, [fp, #-9]
  11bf00:	e3530000 	cmp	r3, #0
  11bf04:	0a000006 	beq	11bf24 <pbuf_coalesce+0x98>
  11bf08:	e3070cbc 	movw	r0, #31932	; 0x7cbc
  11bf0c:	e3400014 	movt	r0, #20
  11bf10:	ebff9c7f 	bl	103114 <rt_kprintf>
  11bf14:	e30014dc 	movw	r1, #1244	; 0x4dc
  11bf18:	e307080c 	movw	r0, #30732	; 0x780c
  11bf1c:	e3400014 	movt	r0, #20
  11bf20:	ebffbc4f 	bl	10b064 <sys_arch_assert>
  pbuf_free(p);
  11bf24:	e51b0010 	ldr	r0, [fp, #-16]
  11bf28:	ebfffc5b 	bl	11b09c <pbuf_free>
  return q;
  11bf2c:	e51b3008 	ldr	r3, [fp, #-8]
}
  11bf30:	e1a00003 	mov	r0, r3
  11bf34:	e24bd004 	sub	sp, fp, #4
  11bf38:	e8bd8800 	pop	{fp, pc}

0011bf3c <pbuf_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p OR ZERO IF 'offset' >= p->tot_len
 */
u8_t
pbuf_get_at(const struct pbuf* p, u16_t offset)
{
  11bf3c:	e92d4800 	push	{fp, lr}
  11bf40:	e28db004 	add	fp, sp, #4
  11bf44:	e24dd010 	sub	sp, sp, #16
  11bf48:	e50b0010 	str	r0, [fp, #-16]
  11bf4c:	e1a03001 	mov	r3, r1
  11bf50:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  int ret = pbuf_try_get_at(p, offset);
  11bf54:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11bf58:	e1a01003 	mov	r1, r3
  11bf5c:	e51b0010 	ldr	r0, [fp, #-16]
  11bf60:	eb00000a 	bl	11bf90 <pbuf_try_get_at>
  11bf64:	e50b0008 	str	r0, [fp, #-8]
  if (ret >= 0) {
  11bf68:	e51b3008 	ldr	r3, [fp, #-8]
  11bf6c:	e3530000 	cmp	r3, #0
  11bf70:	ba000002 	blt	11bf80 <pbuf_get_at+0x44>
    return (u8_t)ret;
  11bf74:	e51b3008 	ldr	r3, [fp, #-8]
  11bf78:	e6ef3073 	uxtb	r3, r3
  11bf7c:	ea000000 	b	11bf84 <pbuf_get_at+0x48>
  }
  return 0;
  11bf80:	e3a03000 	mov	r3, #0
}
  11bf84:	e1a00003 	mov	r0, r3
  11bf88:	e24bd004 	sub	sp, fp, #4
  11bf8c:	e8bd8800 	pop	{fp, pc}

0011bf90 <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf* p, u16_t offset)
{
  11bf90:	e92d4800 	push	{fp, lr}
  11bf94:	e28db004 	add	fp, sp, #4
  11bf98:	e24dd010 	sub	sp, sp, #16
  11bf9c:	e50b0010 	str	r0, [fp, #-16]
  11bfa0:	e1a03001 	mov	r3, r1
  11bfa4:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  u16_t q_idx;
  const struct pbuf* q = pbuf_skip_const(p, offset, &q_idx);
  11bfa8:	e24b200a 	sub	r2, fp, #10
  11bfac:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11bfb0:	e1a01003 	mov	r1, r3
  11bfb4:	e51b0010 	ldr	r0, [fp, #-16]
  11bfb8:	ebfffeb2 	bl	11ba88 <pbuf_skip_const>
  11bfbc:	e50b0008 	str	r0, [fp, #-8]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
  11bfc0:	e51b3008 	ldr	r3, [fp, #-8]
  11bfc4:	e3530000 	cmp	r3, #0
  11bfc8:	0a00000a 	beq	11bff8 <pbuf_try_get_at+0x68>
  11bfcc:	e51b3008 	ldr	r3, [fp, #-8]
  11bfd0:	e1d320ba 	ldrh	r2, [r3, #10]
  11bfd4:	e15b30ba 	ldrh	r3, [fp, #-10]
  11bfd8:	e1520003 	cmp	r2, r3
  11bfdc:	9a000005 	bls	11bff8 <pbuf_try_get_at+0x68>
    return ((u8_t*)q->payload)[q_idx];
  11bfe0:	e51b3008 	ldr	r3, [fp, #-8]
  11bfe4:	e5933004 	ldr	r3, [r3, #4]
  11bfe8:	e15b20ba 	ldrh	r2, [fp, #-10]
  11bfec:	e0833002 	add	r3, r3, r2
  11bff0:	e5d33000 	ldrb	r3, [r3]
  11bff4:	ea000000 	b	11bffc <pbuf_try_get_at+0x6c>
  }
  return -1;
  11bff8:	e3e03000 	mvn	r3, #0
}
  11bffc:	e1a00003 	mov	r0, r3
  11c000:	e24bd004 	sub	sp, fp, #4
  11c004:	e8bd8800 	pop	{fp, pc}

0011c008 <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf* p, u16_t offset, u8_t data)
{
  11c008:	e92d4800 	push	{fp, lr}
  11c00c:	e28db004 	add	fp, sp, #4
  11c010:	e24dd010 	sub	sp, sp, #16
  11c014:	e50b0010 	str	r0, [fp, #-16]
  11c018:	e1a03001 	mov	r3, r1
  11c01c:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  11c020:	e1a03002 	mov	r3, r2
  11c024:	e54b3013 	strb	r3, [fp, #-19]	; 0xffffffed
  u16_t q_idx;
  struct pbuf* q = pbuf_skip(p, offset, &q_idx);
  11c028:	e24b200a 	sub	r2, fp, #10
  11c02c:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11c030:	e1a01003 	mov	r1, r3
  11c034:	e51b0010 	ldr	r0, [fp, #-16]
  11c038:	ebfffeb9 	bl	11bb24 <pbuf_skip>
  11c03c:	e50b0008 	str	r0, [fp, #-8]

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
  11c040:	e51b3008 	ldr	r3, [fp, #-8]
  11c044:	e3530000 	cmp	r3, #0
  11c048:	0a00000a 	beq	11c078 <pbuf_put_at+0x70>
  11c04c:	e51b3008 	ldr	r3, [fp, #-8]
  11c050:	e1d320ba 	ldrh	r2, [r3, #10]
  11c054:	e15b30ba 	ldrh	r3, [fp, #-10]
  11c058:	e1520003 	cmp	r2, r3
  11c05c:	9a000005 	bls	11c078 <pbuf_put_at+0x70>
    ((u8_t*)q->payload)[q_idx] = data;
  11c060:	e51b3008 	ldr	r3, [fp, #-8]
  11c064:	e5933004 	ldr	r3, [r3, #4]
  11c068:	e15b20ba 	ldrh	r2, [fp, #-10]
  11c06c:	e0833002 	add	r3, r3, r2
  11c070:	e55b2013 	ldrb	r2, [fp, #-19]	; 0xffffffed
  11c074:	e5c32000 	strb	r2, [r3]
  }
}
  11c078:	e320f000 	nop	{0}
  11c07c:	e24bd004 	sub	sp, fp, #4
  11c080:	e8bd8800 	pop	{fp, pc}

0011c084 <pbuf_memcmp>:
 * @return zero if equal, nonzero otherwise
 *         (0xffff if p is too short, diffoffset+1 otherwise)
 */
u16_t
pbuf_memcmp(const struct pbuf* p, u16_t offset, const void* s2, u16_t n)
{
  11c084:	e92d4800 	push	{fp, lr}
  11c088:	e28db004 	add	fp, sp, #4
  11c08c:	e24dd020 	sub	sp, sp, #32
  11c090:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  11c094:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  11c098:	e1a02003 	mov	r2, r3
  11c09c:	e1a03001 	mov	r3, r1
  11c0a0:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
  11c0a4:	e1a03002 	mov	r3, r2
  11c0a8:	e14b31bc 	strh	r3, [fp, #-28]	; 0xffffffe4
  u16_t start = offset;
  11c0ac:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  11c0b0:	e14b30b6 	strh	r3, [fp, #-6]
  const struct pbuf* q = p;
  11c0b4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11c0b8:	e50b300c 	str	r3, [fp, #-12]
  u16_t i;
 
  /* pbuf long enough to perform check? */
  if(p->tot_len < (offset + n)) {
  11c0bc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11c0c0:	e1d330b8 	ldrh	r3, [r3, #8]
  11c0c4:	e1a01003 	mov	r1, r3
  11c0c8:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
  11c0cc:	e15b31bc 	ldrh	r3, [fp, #-28]	; 0xffffffe4
  11c0d0:	e0823003 	add	r3, r2, r3
  11c0d4:	e1510003 	cmp	r1, r3
  11c0d8:	aa000009 	bge	11c104 <pbuf_memcmp+0x80>
    return 0xffff;
  11c0dc:	e30f3fff 	movw	r3, #65535	; 0xffff
  11c0e0:	ea000030 	b	11c1a8 <pbuf_memcmp+0x124>
  }
 
  /* get the correct pbuf from chain. We know it succeeds because of p->tot_len check above. */
  while ((q != NULL) && (q->len <= start)) {
    start -= q->len;
  11c0e4:	e51b300c 	ldr	r3, [fp, #-12]
  11c0e8:	e1d330ba 	ldrh	r3, [r3, #10]
  11c0ec:	e15b20b6 	ldrh	r2, [fp, #-6]
  11c0f0:	e0423003 	sub	r3, r2, r3
  11c0f4:	e14b30b6 	strh	r3, [fp, #-6]
    q = q->next;
  11c0f8:	e51b300c 	ldr	r3, [fp, #-12]
  11c0fc:	e5933000 	ldr	r3, [r3]
  11c100:	e50b300c 	str	r3, [fp, #-12]
  while ((q != NULL) && (q->len <= start)) {
  11c104:	e51b300c 	ldr	r3, [fp, #-12]
  11c108:	e3530000 	cmp	r3, #0
  11c10c:	0a000004 	beq	11c124 <pbuf_memcmp+0xa0>
  11c110:	e51b300c 	ldr	r3, [fp, #-12]
  11c114:	e1d330ba 	ldrh	r3, [r3, #10]
  11c118:	e15b20b6 	ldrh	r2, [fp, #-6]
  11c11c:	e1520003 	cmp	r2, r3
  11c120:	2affffef 	bcs	11c0e4 <pbuf_memcmp+0x60>
  }
 
  /* return requested data if pbuf is OK */
  for (i = 0; i < n; i++) {
  11c124:	e3a03000 	mov	r3, #0
  11c128:	e14b30be 	strh	r3, [fp, #-14]
  11c12c:	ea000018 	b	11c194 <pbuf_memcmp+0x110>
    /* We know pbuf_get_at() succeeds because of p->tot_len check above. */
    u8_t a = pbuf_get_at(q, start + i);
  11c130:	e15b20b6 	ldrh	r2, [fp, #-6]
  11c134:	e15b30be 	ldrh	r3, [fp, #-14]
  11c138:	e0823003 	add	r3, r2, r3
  11c13c:	e6ff3073 	uxth	r3, r3
  11c140:	e1a01003 	mov	r1, r3
  11c144:	e51b000c 	ldr	r0, [fp, #-12]
  11c148:	ebffff7b 	bl	11bf3c <pbuf_get_at>
  11c14c:	e1a03000 	mov	r3, r0
  11c150:	e54b300f 	strb	r3, [fp, #-15]
    u8_t b = ((const u8_t*)s2)[i];
  11c154:	e15b30be 	ldrh	r3, [fp, #-14]
  11c158:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  11c15c:	e0823003 	add	r3, r2, r3
  11c160:	e5d33000 	ldrb	r3, [r3]
  11c164:	e54b3010 	strb	r3, [fp, #-16]
    if (a != b) {
  11c168:	e55b200f 	ldrb	r2, [fp, #-15]
  11c16c:	e55b3010 	ldrb	r3, [fp, #-16]
  11c170:	e1520003 	cmp	r2, r3
  11c174:	0a000003 	beq	11c188 <pbuf_memcmp+0x104>
      return i+1;
  11c178:	e15b30be 	ldrh	r3, [fp, #-14]
  11c17c:	e2833001 	add	r3, r3, #1
  11c180:	e6ff3073 	uxth	r3, r3
  11c184:	ea000007 	b	11c1a8 <pbuf_memcmp+0x124>
  for (i = 0; i < n; i++) {
  11c188:	e15b30be 	ldrh	r3, [fp, #-14]
  11c18c:	e2833001 	add	r3, r3, #1
  11c190:	e14b30be 	strh	r3, [fp, #-14]
  11c194:	e15b20be 	ldrh	r2, [fp, #-14]
  11c198:	e15b31bc 	ldrh	r3, [fp, #-28]	; 0xffffffe4
  11c19c:	e1520003 	cmp	r2, r3
  11c1a0:	3affffe2 	bcc	11c130 <pbuf_memcmp+0xac>
    }
  }
  return 0;
  11c1a4:	e3a03000 	mov	r3, #0
}
  11c1a8:	e1a00003 	mov	r0, r3
  11c1ac:	e24bd004 	sub	sp, fp, #4
  11c1b0:	e8bd8800 	pop	{fp, pc}

0011c1b4 <pbuf_memfind>:
 * @param start_offset offset into p at which to start searching
 * @return 0xFFFF if substr was not found in p or the index where it was found
 */
u16_t
pbuf_memfind(const struct pbuf* p, const void* mem, u16_t mem_len, u16_t start_offset)
{
  11c1b4:	e92d4800 	push	{fp, lr}
  11c1b8:	e28db004 	add	fp, sp, #4
  11c1bc:	e24dd018 	sub	sp, sp, #24
  11c1c0:	e50b0010 	str	r0, [fp, #-16]
  11c1c4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  11c1c8:	e1a01002 	mov	r1, r2
  11c1cc:	e1a02003 	mov	r2, r3
  11c1d0:	e1a03001 	mov	r3, r1
  11c1d4:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  11c1d8:	e1a03002 	mov	r3, r2
  11c1dc:	e14b31b8 	strh	r3, [fp, #-24]	; 0xffffffe8
  u16_t i;
  u16_t max = p->tot_len - mem_len;
  11c1e0:	e51b3010 	ldr	r3, [fp, #-16]
  11c1e4:	e1d320b8 	ldrh	r2, [r3, #8]
  11c1e8:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  11c1ec:	e0423003 	sub	r3, r2, r3
  11c1f0:	e14b30b8 	strh	r3, [fp, #-8]
  if (p->tot_len >= mem_len + start_offset) {
  11c1f4:	e51b3010 	ldr	r3, [fp, #-16]
  11c1f8:	e1d330b8 	ldrh	r3, [r3, #8]
  11c1fc:	e1a01003 	mov	r1, r3
  11c200:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  11c204:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
  11c208:	e0823003 	add	r3, r2, r3
  11c20c:	e1510003 	cmp	r1, r3
  11c210:	ba000015 	blt	11c26c <pbuf_memfind+0xb8>
    for (i = start_offset; i <= max; i++) {
  11c214:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
  11c218:	e14b30b6 	strh	r3, [fp, #-6]
  11c21c:	ea00000e 	b	11c25c <pbuf_memfind+0xa8>
      u16_t plus = pbuf_memcmp(p, i, mem, mem_len);
  11c220:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  11c224:	e15b10b6 	ldrh	r1, [fp, #-6]
  11c228:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11c22c:	e51b0010 	ldr	r0, [fp, #-16]
  11c230:	ebffff93 	bl	11c084 <pbuf_memcmp>
  11c234:	e1a03000 	mov	r3, r0
  11c238:	e14b30ba 	strh	r3, [fp, #-10]
      if (plus == 0) {
  11c23c:	e15b30ba 	ldrh	r3, [fp, #-10]
  11c240:	e3530000 	cmp	r3, #0
  11c244:	1a000001 	bne	11c250 <pbuf_memfind+0x9c>
        return i;
  11c248:	e15b30b6 	ldrh	r3, [fp, #-6]
  11c24c:	ea000007 	b	11c270 <pbuf_memfind+0xbc>
    for (i = start_offset; i <= max; i++) {
  11c250:	e15b30b6 	ldrh	r3, [fp, #-6]
  11c254:	e2833001 	add	r3, r3, #1
  11c258:	e14b30b6 	strh	r3, [fp, #-6]
  11c25c:	e15b20b6 	ldrh	r2, [fp, #-6]
  11c260:	e15b30b8 	ldrh	r3, [fp, #-8]
  11c264:	e1520003 	cmp	r2, r3
  11c268:	9affffec 	bls	11c220 <pbuf_memfind+0x6c>
      }
    }
  }
  return 0xFFFF;
  11c26c:	e30f3fff 	movw	r3, #65535	; 0xffff
}
  11c270:	e1a00003 	mov	r0, r3
  11c274:	e24bd004 	sub	sp, fp, #4
  11c278:	e8bd8800 	pop	{fp, pc}

0011c27c <pbuf_strstr>:
 * @param substr string to search for in p, maximum length is 0xFFFE
 * @return 0xFFFF if substr was not found in p or the index where it was found
 */
u16_t
pbuf_strstr(const struct pbuf* p, const char* substr)
{
  11c27c:	e92d4800 	push	{fp, lr}
  11c280:	e28db004 	add	fp, sp, #4
  11c284:	e24dd010 	sub	sp, sp, #16
  11c288:	e50b0010 	str	r0, [fp, #-16]
  11c28c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  size_t substr_len;
  if ((substr == NULL) || (substr[0] == 0) || (p->tot_len == 0xFFFF)) {
  11c290:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11c294:	e3530000 	cmp	r3, #0
  11c298:	0a000008 	beq	11c2c0 <pbuf_strstr+0x44>
  11c29c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11c2a0:	e5d33000 	ldrb	r3, [r3]
  11c2a4:	e3530000 	cmp	r3, #0
  11c2a8:	0a000004 	beq	11c2c0 <pbuf_strstr+0x44>
  11c2ac:	e51b3010 	ldr	r3, [fp, #-16]
  11c2b0:	e1d330b8 	ldrh	r3, [r3, #8]
  11c2b4:	e30f2fff 	movw	r2, #65535	; 0xffff
  11c2b8:	e1530002 	cmp	r3, r2
  11c2bc:	1a000001 	bne	11c2c8 <pbuf_strstr+0x4c>
    return 0xFFFF;
  11c2c0:	e30f3fff 	movw	r3, #65535	; 0xffff
  11c2c4:	ea00000f 	b	11c308 <pbuf_strstr+0x8c>
  }
  substr_len = strlen(substr);
  11c2c8:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  11c2cc:	eb0094f3 	bl	1416a0 <strlen>
  11c2d0:	e50b0008 	str	r0, [fp, #-8]
  if (substr_len >= 0xFFFF) {
  11c2d4:	e51b3008 	ldr	r3, [fp, #-8]
  11c2d8:	e30f2ffe 	movw	r2, #65534	; 0xfffe
  11c2dc:	e1530002 	cmp	r3, r2
  11c2e0:	9a000001 	bls	11c2ec <pbuf_strstr+0x70>
    return 0xFFFF;
  11c2e4:	e30f3fff 	movw	r3, #65535	; 0xffff
  11c2e8:	ea000006 	b	11c308 <pbuf_strstr+0x8c>
  }
  return pbuf_memfind(p, substr, (u16_t)substr_len, 0);
  11c2ec:	e51b3008 	ldr	r3, [fp, #-8]
  11c2f0:	e6ff2073 	uxth	r2, r3
  11c2f4:	e3a03000 	mov	r3, #0
  11c2f8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  11c2fc:	e51b0010 	ldr	r0, [fp, #-16]
  11c300:	ebffffab 	bl	11c1b4 <pbuf_memfind>
  11c304:	e1a03000 	mov	r3, r0
}
  11c308:	e1a00003 	mov	r0, r3
  11c30c:	e24bd004 	sub	sp, fp, #4
  11c310:	e8bd8800 	pop	{fp, pc}

0011c314 <raw_input_match>:
/** The list of RAW PCBs */
static struct raw_pcb *raw_pcbs;

static u8_t
raw_input_match(struct raw_pcb *pcb, u8_t broadcast)
{
  11c314:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11c318:	e28db000 	add	fp, sp, #0
  11c31c:	e24dd00c 	sub	sp, sp, #12
  11c320:	e50b0008 	str	r0, [fp, #-8]
  11c324:	e1a03001 	mov	r3, r1
  11c328:	e54b3009 	strb	r3, [fp, #-9]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: receive all broadcasts
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
  11c32c:	e55b3009 	ldrb	r3, [fp, #-9]
  11c330:	e3530000 	cmp	r3, #0
  11c334:	0a00000d 	beq	11c370 <raw_input_match+0x5c>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
  11c338:	e51b3008 	ldr	r3, [fp, #-8]
  11c33c:	e5d33008 	ldrb	r3, [r3, #8]
  11c340:	e2033020 	and	r3, r3, #32
  11c344:	e3530000 	cmp	r3, #0
  11c348:	0a000018 	beq	11c3b0 <raw_input_match+0x9c>
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip))) {
  11c34c:	e51b3008 	ldr	r3, [fp, #-8]
  11c350:	e3530000 	cmp	r3, #0
  11c354:	0a000003 	beq	11c368 <raw_input_match+0x54>
  11c358:	e51b3008 	ldr	r3, [fp, #-8]
  11c35c:	e5933000 	ldr	r3, [r3]
  11c360:	e3530000 	cmp	r3, #0
  11c364:	1a000011 	bne	11c3b0 <raw_input_match+0x9c>
          return 1;
  11c368:	e3a03001 	mov	r3, #1
  11c36c:	ea000010 	b	11c3b4 <raw_input_match+0xa0>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: catch all or exact match */
    if (ip_addr_isany(&pcb->local_ip) ||
  11c370:	e51b3008 	ldr	r3, [fp, #-8]
  11c374:	e3530000 	cmp	r3, #0
  11c378:	0a00000a 	beq	11c3a8 <raw_input_match+0x94>
  11c37c:	e51b3008 	ldr	r3, [fp, #-8]
  11c380:	e5933000 	ldr	r3, [r3]
  11c384:	e3530000 	cmp	r3, #0
  11c388:	0a000006 	beq	11c3a8 <raw_input_match+0x94>
       ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
  11c38c:	e51b3008 	ldr	r3, [fp, #-8]
  11c390:	e5932000 	ldr	r2, [r3]
  11c394:	e30035e8 	movw	r3, #1512	; 0x5e8
  11c398:	e3403015 	movt	r3, #21
  11c39c:	e5933014 	ldr	r3, [r3, #20]
    if (ip_addr_isany(&pcb->local_ip) ||
  11c3a0:	e1520003 	cmp	r2, r3
  11c3a4:	1a000001 	bne	11c3b0 <raw_input_match+0x9c>
      return 1;
  11c3a8:	e3a03001 	mov	r3, #1
  11c3ac:	ea000000 	b	11c3b4 <raw_input_match+0xa0>
    }
  }

  return 0;
  11c3b0:	e3a03000 	mov	r3, #0
}
  11c3b4:	e1a00003 	mov	r0, r3
  11c3b8:	e28bd000 	add	sp, fp, #0
  11c3bc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11c3c0:	e12fff1e 	bx	lr

0011c3c4 <raw_input>:
 *           caller).
 *
 */
u8_t
raw_input(struct pbuf *p, struct netif *inp)
{
  11c3c4:	e92d4810 	push	{r4, fp, lr}
  11c3c8:	e28db008 	add	fp, sp, #8
  11c3cc:	e24dd01c 	sub	sp, sp, #28
  11c3d0:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  11c3d4:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  struct raw_pcb *pcb, *prev;
  s16_t proto;
  u8_t eaten = 0;
  11c3d8:	e3a03000 	mov	r3, #0
  11c3dc:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
  u8_t broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
  11c3e0:	e30035e8 	movw	r3, #1512	; 0x5e8
  11c3e4:	e3403015 	movt	r3, #21
  11c3e8:	e5932014 	ldr	r2, [r3, #20]
  11c3ec:	e30035e8 	movw	r3, #1512	; 0x5e8
  11c3f0:	e3403015 	movt	r3, #21
  11c3f4:	e5933000 	ldr	r3, [r3]
  11c3f8:	e1a01003 	mov	r1, r3
  11c3fc:	e1a00002 	mov	r0, r2
  11c400:	eb0058bb 	bl	1326f4 <ip4_addr_isbroadcast_u32>
  11c404:	e1a03000 	mov	r3, r0
  11c408:	e54b3016 	strb	r3, [fp, #-22]	; 0xffffffea
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    proto = IPH_PROTO((struct ip_hdr *)p->payload);
  11c40c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11c410:	e5933004 	ldr	r3, [r3, #4]
  11c414:	e5d33009 	ldrb	r3, [r3, #9]
  11c418:	e14b31b8 	strh	r3, [fp, #-24]	; 0xffffffe8
  }
#endif /* LWIP_IPV4 */

  prev = NULL;
  11c41c:	e3a03000 	mov	r3, #0
  11c420:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  pcb = raw_pcbs;
  11c424:	e30f3218 	movw	r3, #61976	; 0xf218
  11c428:	e3403014 	movt	r3, #20
  11c42c:	e5933000 	ldr	r3, [r3]
  11c430:	e50b3010 	str	r3, [fp, #-16]
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while ((eaten == 0) && (pcb != NULL)) {
  11c434:	ea000046 	b	11c554 <raw_input+0x190>
    if ((pcb->protocol == proto) && raw_input_match(pcb, broadcast)) {
  11c438:	e51b3010 	ldr	r3, [fp, #-16]
  11c43c:	e5d33010 	ldrb	r3, [r3, #16]
  11c440:	e1a02003 	mov	r2, r3
  11c444:	e15b31f8 	ldrsh	r3, [fp, #-24]	; 0xffffffe8
  11c448:	e1520003 	cmp	r2, r3
  11c44c:	1a00003b 	bne	11c540 <raw_input+0x17c>
  11c450:	e55b3016 	ldrb	r3, [fp, #-22]	; 0xffffffea
  11c454:	e1a01003 	mov	r1, r3
  11c458:	e51b0010 	ldr	r0, [fp, #-16]
  11c45c:	ebffffac 	bl	11c314 <raw_input_match>
  11c460:	e1a03000 	mov	r3, r0
  11c464:	e3530000 	cmp	r3, #0
  11c468:	0a000034 	beq	11c540 <raw_input+0x17c>
      /* receive callback function available? */
      if (pcb->recv != NULL) {
  11c46c:	e51b3010 	ldr	r3, [fp, #-16]
  11c470:	e5933014 	ldr	r3, [r3, #20]
  11c474:	e3530000 	cmp	r3, #0
  11c478:	0a000030 	beq	11c540 <raw_input+0x17c>
#ifndef LWIP_NOASSERT
        void* old_payload = p->payload;
  11c47c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11c480:	e5933004 	ldr	r3, [r3, #4]
  11c484:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
#endif
        /* the receive callback function did not eat the packet? */
        eaten = pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr());
  11c488:	e51b3010 	ldr	r3, [fp, #-16]
  11c48c:	e5934014 	ldr	r4, [r3, #20]
  11c490:	e51b3010 	ldr	r3, [fp, #-16]
  11c494:	e5930018 	ldr	r0, [r3, #24]
  11c498:	e59f30dc 	ldr	r3, [pc, #220]	; 11c57c <raw_input+0x1b8>
  11c49c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  11c4a0:	e51b1010 	ldr	r1, [fp, #-16]
  11c4a4:	e12fff34 	blx	r4
  11c4a8:	e1a03000 	mov	r3, r0
  11c4ac:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
        if (eaten != 0) {
  11c4b0:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  11c4b4:	e3530000 	cmp	r3, #0
  11c4b8:	0a000014 	beq	11c510 <raw_input+0x14c>
          /* receive function ate the packet */
          p = NULL;
  11c4bc:	e3a03000 	mov	r3, #0
  11c4c0:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
          eaten = 1;
  11c4c4:	e3a03001 	mov	r3, #1
  11c4c8:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
          if (prev != NULL) {
  11c4cc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11c4d0:	e3530000 	cmp	r3, #0
  11c4d4:	0a000019 	beq	11c540 <raw_input+0x17c>
          /* move the pcb to the front of raw_pcbs so that is
             found faster next time */
            prev->next = pcb->next;
  11c4d8:	e51b3010 	ldr	r3, [fp, #-16]
  11c4dc:	e593200c 	ldr	r2, [r3, #12]
  11c4e0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11c4e4:	e583200c 	str	r2, [r3, #12]
            pcb->next = raw_pcbs;
  11c4e8:	e30f3218 	movw	r3, #61976	; 0xf218
  11c4ec:	e3403014 	movt	r3, #20
  11c4f0:	e5932000 	ldr	r2, [r3]
  11c4f4:	e51b3010 	ldr	r3, [fp, #-16]
  11c4f8:	e583200c 	str	r2, [r3, #12]
            raw_pcbs = pcb;
  11c4fc:	e30f3218 	movw	r3, #61976	; 0xf218
  11c500:	e3403014 	movt	r3, #20
  11c504:	e51b2010 	ldr	r2, [fp, #-16]
  11c508:	e5832000 	str	r2, [r3]
  11c50c:	ea00000b 	b	11c540 <raw_input+0x17c>
          }
        } else {
          /* sanity-check that the receive callback did not alter the pbuf */
          LWIP_ASSERT("raw pcb recv callback altered pbuf payload pointer without eating packet",
  11c510:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11c514:	e5933004 	ldr	r3, [r3, #4]
  11c518:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  11c51c:	e1520003 	cmp	r2, r3
  11c520:	0a000006 	beq	11c540 <raw_input+0x17c>
  11c524:	e3070cd0 	movw	r0, #31952	; 0x7cd0
  11c528:	e3400014 	movt	r0, #20
  11c52c:	ebff9af8 	bl	103114 <rt_kprintf>
  11c530:	e3a010b6 	mov	r1, #182	; 0xb6
  11c534:	e3070d1c 	movw	r0, #32028	; 0x7d1c
  11c538:	e3400014 	movt	r0, #20
  11c53c:	ebffbac8 	bl	10b064 <sys_arch_assert>
        }
      }
      /* no receive callback function was set for this raw PCB */
    }
    /* drop the packet */
    prev = pcb;
  11c540:	e51b3010 	ldr	r3, [fp, #-16]
  11c544:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    pcb = pcb->next;
  11c548:	e51b3010 	ldr	r3, [fp, #-16]
  11c54c:	e593300c 	ldr	r3, [r3, #12]
  11c550:	e50b3010 	str	r3, [fp, #-16]
  while ((eaten == 0) && (pcb != NULL)) {
  11c554:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  11c558:	e3530000 	cmp	r3, #0
  11c55c:	1a000002 	bne	11c56c <raw_input+0x1a8>
  11c560:	e51b3010 	ldr	r3, [fp, #-16]
  11c564:	e3530000 	cmp	r3, #0
  11c568:	1affffb2 	bne	11c438 <raw_input+0x74>
  }
  return eaten;
  11c56c:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
}
  11c570:	e1a00003 	mov	r0, r3
  11c574:	e24bd008 	sub	sp, fp, #8
  11c578:	e8bd8810 	pop	{r4, fp, pc}
  11c57c:	001505f8 	.word	0x001505f8

0011c580 <raw_bind>:
 *
 * @see raw_disconnect()
 */
err_t
raw_bind(struct raw_pcb *pcb, const ip_addr_t *ipaddr)
{
  11c580:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11c584:	e28db000 	add	fp, sp, #0
  11c588:	e24dd00c 	sub	sp, sp, #12
  11c58c:	e50b0008 	str	r0, [fp, #-8]
  11c590:	e50b100c 	str	r1, [fp, #-12]
  if ((pcb == NULL) || (ipaddr == NULL)) {
  11c594:	e51b3008 	ldr	r3, [fp, #-8]
  11c598:	e3530000 	cmp	r3, #0
  11c59c:	0a000002 	beq	11c5ac <raw_bind+0x2c>
  11c5a0:	e51b300c 	ldr	r3, [fp, #-12]
  11c5a4:	e3530000 	cmp	r3, #0
  11c5a8:	1a000001 	bne	11c5b4 <raw_bind+0x34>
    return ERR_VAL;
  11c5ac:	e3e03005 	mvn	r3, #5
  11c5b0:	ea000009 	b	11c5dc <raw_bind+0x5c>
  }
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
  11c5b4:	e51b300c 	ldr	r3, [fp, #-12]
  11c5b8:	e3530000 	cmp	r3, #0
  11c5bc:	0a000002 	beq	11c5cc <raw_bind+0x4c>
  11c5c0:	e51b300c 	ldr	r3, [fp, #-12]
  11c5c4:	e5933000 	ldr	r3, [r3]
  11c5c8:	ea000000 	b	11c5d0 <raw_bind+0x50>
  11c5cc:	e3a03000 	mov	r3, #0
  11c5d0:	e51b2008 	ldr	r2, [fp, #-8]
  11c5d4:	e5823000 	str	r3, [r2]
  return ERR_OK;
  11c5d8:	e3a03000 	mov	r3, #0
}
  11c5dc:	e1a00003 	mov	r0, r3
  11c5e0:	e28bd000 	add	sp, fp, #0
  11c5e4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11c5e8:	e12fff1e 	bx	lr

0011c5ec <raw_connect>:
 *
 * @see raw_disconnect() and raw_sendto()
 */
err_t
raw_connect(struct raw_pcb *pcb, const ip_addr_t *ipaddr)
{
  11c5ec:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11c5f0:	e28db000 	add	fp, sp, #0
  11c5f4:	e24dd00c 	sub	sp, sp, #12
  11c5f8:	e50b0008 	str	r0, [fp, #-8]
  11c5fc:	e50b100c 	str	r1, [fp, #-12]
  if ((pcb == NULL) || (ipaddr == NULL)) {
  11c600:	e51b3008 	ldr	r3, [fp, #-8]
  11c604:	e3530000 	cmp	r3, #0
  11c608:	0a000002 	beq	11c618 <raw_connect+0x2c>
  11c60c:	e51b300c 	ldr	r3, [fp, #-12]
  11c610:	e3530000 	cmp	r3, #0
  11c614:	1a000001 	bne	11c620 <raw_connect+0x34>
    return ERR_VAL;
  11c618:	e3e03005 	mvn	r3, #5
  11c61c:	ea000009 	b	11c648 <raw_connect+0x5c>
  }
  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
  11c620:	e51b300c 	ldr	r3, [fp, #-12]
  11c624:	e3530000 	cmp	r3, #0
  11c628:	0a000002 	beq	11c638 <raw_connect+0x4c>
  11c62c:	e51b300c 	ldr	r3, [fp, #-12]
  11c630:	e5933000 	ldr	r3, [r3]
  11c634:	ea000000 	b	11c63c <raw_connect+0x50>
  11c638:	e3a03000 	mov	r3, #0
  11c63c:	e51b2008 	ldr	r2, [fp, #-8]
  11c640:	e5823004 	str	r3, [r2, #4]
  return ERR_OK;
  11c644:	e3a03000 	mov	r3, #0
}
  11c648:	e1a00003 	mov	r0, r3
  11c64c:	e28bd000 	add	sp, fp, #0
  11c650:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11c654:	e12fff1e 	bx	lr

0011c658 <raw_recv>:
 * - not free the packet, and return zero. The packet will be matched
 *   against further PCBs and/or forwarded to another protocol layers.
 */
void
raw_recv(struct raw_pcb *pcb, raw_recv_fn recv, void *recv_arg)
{
  11c658:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11c65c:	e28db000 	add	fp, sp, #0
  11c660:	e24dd014 	sub	sp, sp, #20
  11c664:	e50b0008 	str	r0, [fp, #-8]
  11c668:	e50b100c 	str	r1, [fp, #-12]
  11c66c:	e50b2010 	str	r2, [fp, #-16]
  /* remember recv() callback and user data */
  pcb->recv = recv;
  11c670:	e51b3008 	ldr	r3, [fp, #-8]
  11c674:	e51b200c 	ldr	r2, [fp, #-12]
  11c678:	e5832014 	str	r2, [r3, #20]
  pcb->recv_arg = recv_arg;
  11c67c:	e51b3008 	ldr	r3, [fp, #-8]
  11c680:	e51b2010 	ldr	r2, [fp, #-16]
  11c684:	e5832018 	str	r2, [r3, #24]
}
  11c688:	e320f000 	nop	{0}
  11c68c:	e28bd000 	add	sp, fp, #0
  11c690:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11c694:	e12fff1e 	bx	lr

0011c698 <raw_sendto>:
 * @param ipaddr the destination address of the IP packet
 *
 */
err_t
raw_sendto(struct raw_pcb *pcb, struct pbuf *p, const ip_addr_t *ipaddr)
{
  11c698:	e92d4800 	push	{fp, lr}
  11c69c:	e28db004 	add	fp, sp, #4
  11c6a0:	e24dd038 	sub	sp, sp, #56	; 0x38
  11c6a4:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  11c6a8:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  11c6ac:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  struct netif *netif;
  const ip_addr_t *src_ip;
  struct pbuf *q; /* q will be sent down the stack */
  s16_t header_size;

  if ((pcb == NULL) || (ipaddr == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, ipaddr)) {
  11c6b0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11c6b4:	e3530000 	cmp	r3, #0
  11c6b8:	0a000002 	beq	11c6c8 <raw_sendto+0x30>
  11c6bc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11c6c0:	e3530000 	cmp	r3, #0
  11c6c4:	1a000001 	bne	11c6d0 <raw_sendto+0x38>
    return ERR_VAL;
  11c6c8:	e3e03005 	mvn	r3, #5
  11c6cc:	ea00007c 	b	11c8c4 <raw_sendto+0x22c>
  }

  LWIP_DEBUGF(RAW_DEBUG | LWIP_DBG_TRACE, ("raw_sendto\n"));

  header_size = (
  11c6d0:	e3a03014 	mov	r3, #20
  11c6d4:	e14b30be 	strh	r3, [fp, #-14]
#else
    IP6_HLEN);
#endif

  /* not enough space to add an IP header to first pbuf in given p chain? */
  if (pbuf_header(p, header_size)) {
  11c6d8:	e15b30fe 	ldrsh	r3, [fp, #-14]
  11c6dc:	e1a01003 	mov	r1, r3
  11c6e0:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  11c6e4:	ebfffa4e 	bl	11b024 <pbuf_header>
  11c6e8:	e1a03000 	mov	r3, r0
  11c6ec:	e3530000 	cmp	r3, #0
  11c6f0:	0a000011 	beq	11c73c <raw_sendto+0xa4>
    /* allocate header in new pbuf */
    q = pbuf_alloc(PBUF_IP, 0, PBUF_RAM);
  11c6f4:	e3a02000 	mov	r2, #0
  11c6f8:	e3a01000 	mov	r1, #0
  11c6fc:	e3a00001 	mov	r0, #1
  11c700:	ebfff75e 	bl	11a480 <pbuf_alloc>
  11c704:	e50b000c 	str	r0, [fp, #-12]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
  11c708:	e51b300c 	ldr	r3, [fp, #-12]
  11c70c:	e3530000 	cmp	r3, #0
  11c710:	1a000001 	bne	11c71c <raw_sendto+0x84>
      LWIP_DEBUGF(RAW_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("raw_sendto: could not allocate header\n"));
      return ERR_MEM;
  11c714:	e3e03000 	mvn	r3, #0
  11c718:	ea000069 	b	11c8c4 <raw_sendto+0x22c>
    }
    if (p->tot_len != 0) {
  11c71c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11c720:	e1d330b8 	ldrh	r3, [r3, #8]
  11c724:	e3530000 	cmp	r3, #0
  11c728:	0a000018 	beq	11c790 <raw_sendto+0xf8>
      /* chain header q in front of given pbuf p */
      pbuf_chain(q, p);
  11c72c:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  11c730:	e51b000c 	ldr	r0, [fp, #-12]
  11c734:	ebfffb59 	bl	11b4a0 <pbuf_chain>
  11c738:	ea000014 	b	11c790 <raw_sendto+0xf8>
    }
    /* { first pbuf q points to header pbuf } */
    LWIP_DEBUGF(RAW_DEBUG, ("raw_sendto: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* first pbuf q equals given pbuf */
    q = p;
  11c73c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11c740:	e50b300c 	str	r3, [fp, #-12]
    if (pbuf_header(q, -header_size)) {
  11c744:	e15b30be 	ldrh	r3, [fp, #-14]
  11c748:	e2633000 	rsb	r3, r3, #0
  11c74c:	e6ff3073 	uxth	r3, r3
  11c750:	e6bf3073 	sxth	r3, r3
  11c754:	e1a01003 	mov	r1, r3
  11c758:	e51b000c 	ldr	r0, [fp, #-12]
  11c75c:	ebfffa30 	bl	11b024 <pbuf_header>
  11c760:	e1a03000 	mov	r3, r0
  11c764:	e3530000 	cmp	r3, #0
  11c768:	0a000008 	beq	11c790 <raw_sendto+0xf8>
      LWIP_ASSERT("Can't restore header we just removed!", 0);
  11c76c:	e3070d48 	movw	r0, #32072	; 0x7d48
  11c770:	e3400014 	movt	r0, #20
  11c774:	ebff9a66 	bl	103114 <rt_kprintf>
  11c778:	e300113e 	movw	r1, #318	; 0x13e
  11c77c:	e3070d1c 	movw	r0, #32028	; 0x7d1c
  11c780:	e3400014 	movt	r0, #20
  11c784:	ebffba36 	bl	10b064 <sys_arch_assert>
      return ERR_MEM;
  11c788:	e3e03000 	mvn	r3, #0
  11c78c:	ea00004c 	b	11c8c4 <raw_sendto+0x22c>

  if(IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    /* Don't call ip_route() with IP_ANY_TYPE */
    netif = ip_route(IP46_ADDR_ANY(IP_GET_TYPE(ipaddr)), ipaddr);
  } else {
    netif = ip_route(&pcb->local_ip, ipaddr);
  11c790:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  11c794:	eb0052f7 	bl	131378 <ip4_route>
  11c798:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  }

  if (netif == NULL) {
  11c79c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11c7a0:	e3530000 	cmp	r3, #0
  11c7a4:	1a000007 	bne	11c7c8 <raw_sendto+0x130>
    LWIP_DEBUGF(RAW_DEBUG | LWIP_DBG_LEVEL_WARNING, ("raw_sendto: No route to "));
    ip_addr_debug_print(RAW_DEBUG | LWIP_DBG_LEVEL_WARNING, ipaddr);
    /* free any temporary header pbuf allocated by pbuf_header() */
    if (q != p) {
  11c7a8:	e51b200c 	ldr	r2, [fp, #-12]
  11c7ac:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11c7b0:	e1520003 	cmp	r2, r3
  11c7b4:	0a000001 	beq	11c7c0 <raw_sendto+0x128>
      pbuf_free(q);
  11c7b8:	e51b000c 	ldr	r0, [fp, #-12]
  11c7bc:	ebfffa36 	bl	11b09c <pbuf_free>
    }
    return ERR_RTE;
  11c7c0:	e3e03003 	mvn	r3, #3
  11c7c4:	ea00003e 	b	11c8c4 <raw_sendto+0x22c>

#if IP_SOF_BROADCAST
  if (IP_IS_V4(ipaddr))
  {
    /* broadcast filter? */
    if (!ip_get_option(pcb, SOF_BROADCAST) && ip_addr_isbroadcast(ipaddr, netif)) {
  11c7c8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11c7cc:	e5d33008 	ldrb	r3, [r3, #8]
  11c7d0:	e2033020 	and	r3, r3, #32
  11c7d4:	e3530000 	cmp	r3, #0
  11c7d8:	1a00000f 	bne	11c81c <raw_sendto+0x184>
  11c7dc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11c7e0:	e5933000 	ldr	r3, [r3]
  11c7e4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  11c7e8:	e1a00003 	mov	r0, r3
  11c7ec:	eb0057c0 	bl	1326f4 <ip4_addr_isbroadcast_u32>
  11c7f0:	e1a03000 	mov	r3, r0
  11c7f4:	e3530000 	cmp	r3, #0
  11c7f8:	0a000007 	beq	11c81c <raw_sendto+0x184>
      LWIP_DEBUGF(RAW_DEBUG | LWIP_DBG_LEVEL_WARNING, ("raw_sendto: SOF_BROADCAST not enabled on pcb %p\n", (void *)pcb));
      /* free any temporary header pbuf allocated by pbuf_header() */
      if (q != p) {
  11c7fc:	e51b200c 	ldr	r2, [fp, #-12]
  11c800:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11c804:	e1520003 	cmp	r2, r3
  11c808:	0a000001 	beq	11c814 <raw_sendto+0x17c>
        pbuf_free(q);
  11c80c:	e51b000c 	ldr	r0, [fp, #-12]
  11c810:	ebfffa21 	bl	11b09c <pbuf_free>
      }
      return ERR_VAL;
  11c814:	e3e03005 	mvn	r3, #5
  11c818:	ea000029 	b	11c8c4 <raw_sendto+0x22c>
    }
  }
#endif /* IP_SOF_BROADCAST */

  if (ip_addr_isany(&pcb->local_ip)) {
  11c81c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11c820:	e3530000 	cmp	r3, #0
  11c824:	0a000003 	beq	11c838 <raw_sendto+0x1a0>
  11c828:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11c82c:	e5933000 	ldr	r3, [r3]
  11c830:	e3530000 	cmp	r3, #0
  11c834:	1a000008 	bne	11c85c <raw_sendto+0x1c4>
    /* use outgoing network interface IP address as source address */
    src_ip = ip_netif_get_local_ip(netif, ipaddr);
  11c838:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11c83c:	e3530000 	cmp	r3, #0
  11c840:	0a000002 	beq	11c850 <raw_sendto+0x1b8>
  11c844:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11c848:	e2833004 	add	r3, r3, #4
  11c84c:	ea000000 	b	11c854 <raw_sendto+0x1bc>
  11c850:	e3a03000 	mov	r3, #0
  11c854:	e50b3008 	str	r3, [fp, #-8]
  11c858:	ea000001 	b	11c864 <raw_sendto+0x1cc>
      return ERR_RTE;
    }
#endif /* LWIP_IPV6 */
  } else {
    /* use RAW PCB local IP address as source address */
    src_ip = &pcb->local_ip;
  11c85c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11c860:	e50b3008 	str	r3, [fp, #-8]
    SMEMCPY(((u8_t *)p->payload) + pcb->chksum_offset, &chksum, sizeof(u16_t));
  }
#endif

  NETIF_SET_HWADDRHINT(netif, &pcb->addr_hint);
  err = ip_output_if(q, src_ip, ipaddr, pcb->ttl, pcb->tos, pcb->protocol, netif);
  11c864:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11c868:	e5d3000a 	ldrb	r0, [r3, #10]
  11c86c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11c870:	e5d33009 	ldrb	r3, [r3, #9]
  11c874:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  11c878:	e5d22010 	ldrb	r2, [r2, #16]
  11c87c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  11c880:	e58d1008 	str	r1, [sp, #8]
  11c884:	e58d2004 	str	r2, [sp, #4]
  11c888:	e58d3000 	str	r3, [sp]
  11c88c:	e1a03000 	mov	r3, r0
  11c890:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  11c894:	e51b1008 	ldr	r1, [fp, #-8]
  11c898:	e51b000c 	ldr	r0, [fp, #-12]
  11c89c:	eb00558e 	bl	131edc <ip4_output_if>
  11c8a0:	e1a03000 	mov	r3, r0
  11c8a4:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
  NETIF_SET_HWADDRHINT(netif, NULL);

  /* did we chain a header earlier? */
  if (q != p) {
  11c8a8:	e51b200c 	ldr	r2, [fp, #-12]
  11c8ac:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  11c8b0:	e1520003 	cmp	r2, r3
  11c8b4:	0a000001 	beq	11c8c0 <raw_sendto+0x228>
    /* free the header */
    pbuf_free(q);
  11c8b8:	e51b000c 	ldr	r0, [fp, #-12]
  11c8bc:	ebfff9f6 	bl	11b09c <pbuf_free>
  }
  return err;
  11c8c0:	e15b31d5 	ldrsb	r3, [fp, #-21]	; 0xffffffeb
}
  11c8c4:	e1a00003 	mov	r0, r3
  11c8c8:	e24bd004 	sub	sp, fp, #4
  11c8cc:	e8bd8800 	pop	{fp, pc}

0011c8d0 <raw_send>:
 * @param p the IP payload to send
 *
 */
err_t
raw_send(struct raw_pcb *pcb, struct pbuf *p)
{
  11c8d0:	e92d4800 	push	{fp, lr}
  11c8d4:	e28db004 	add	fp, sp, #4
  11c8d8:	e24dd008 	sub	sp, sp, #8
  11c8dc:	e50b0008 	str	r0, [fp, #-8]
  11c8e0:	e50b100c 	str	r1, [fp, #-12]
  return raw_sendto(pcb, p, &pcb->remote_ip);
  11c8e4:	e51b3008 	ldr	r3, [fp, #-8]
  11c8e8:	e2833004 	add	r3, r3, #4
  11c8ec:	e1a02003 	mov	r2, r3
  11c8f0:	e51b100c 	ldr	r1, [fp, #-12]
  11c8f4:	e51b0008 	ldr	r0, [fp, #-8]
  11c8f8:	ebffff66 	bl	11c698 <raw_sendto>
  11c8fc:	e1a03000 	mov	r3, r0
}
  11c900:	e1a00003 	mov	r0, r3
  11c904:	e24bd004 	sub	sp, fp, #4
  11c908:	e8bd8800 	pop	{fp, pc}

0011c90c <raw_remove>:
 *
 * @see raw_new()
 */
void
raw_remove(struct raw_pcb *pcb)
{
  11c90c:	e92d4800 	push	{fp, lr}
  11c910:	e28db004 	add	fp, sp, #4
  11c914:	e24dd010 	sub	sp, sp, #16
  11c918:	e50b0010 	str	r0, [fp, #-16]
  struct raw_pcb *pcb2;
  /* pcb to be removed is first in list? */
  if (raw_pcbs == pcb) {
  11c91c:	e30f3218 	movw	r3, #61976	; 0xf218
  11c920:	e3403014 	movt	r3, #20
  11c924:	e5933000 	ldr	r3, [r3]
  11c928:	e51b2010 	ldr	r2, [fp, #-16]
  11c92c:	e1520003 	cmp	r2, r3
  11c930:	1a000007 	bne	11c954 <raw_remove+0x48>
    /* make list start at 2nd pcb */
    raw_pcbs = raw_pcbs->next;
  11c934:	e30f3218 	movw	r3, #61976	; 0xf218
  11c938:	e3403014 	movt	r3, #20
  11c93c:	e5933000 	ldr	r3, [r3]
  11c940:	e593200c 	ldr	r2, [r3, #12]
  11c944:	e30f3218 	movw	r3, #61976	; 0xf218
  11c948:	e3403014 	movt	r3, #20
  11c94c:	e5832000 	str	r2, [r3]
  11c950:	ea000018 	b	11c9b8 <raw_remove+0xac>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = raw_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
  11c954:	e30f3218 	movw	r3, #61976	; 0xf218
  11c958:	e3403014 	movt	r3, #20
  11c95c:	e5933000 	ldr	r3, [r3]
  11c960:	e50b3008 	str	r3, [fp, #-8]
  11c964:	ea000010 	b	11c9ac <raw_remove+0xa0>
      /* find pcb in raw_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
  11c968:	e51b3008 	ldr	r3, [fp, #-8]
  11c96c:	e593300c 	ldr	r3, [r3, #12]
  11c970:	e3530000 	cmp	r3, #0
  11c974:	0a000009 	beq	11c9a0 <raw_remove+0x94>
  11c978:	e51b3008 	ldr	r3, [fp, #-8]
  11c97c:	e593300c 	ldr	r3, [r3, #12]
  11c980:	e51b2010 	ldr	r2, [fp, #-16]
  11c984:	e1520003 	cmp	r2, r3
  11c988:	1a000004 	bne	11c9a0 <raw_remove+0x94>
        /* remove pcb from list */
        pcb2->next = pcb->next;
  11c98c:	e51b3010 	ldr	r3, [fp, #-16]
  11c990:	e593200c 	ldr	r2, [r3, #12]
  11c994:	e51b3008 	ldr	r3, [fp, #-8]
  11c998:	e583200c 	str	r2, [r3, #12]
        break;
  11c99c:	ea000005 	b	11c9b8 <raw_remove+0xac>
    for (pcb2 = raw_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
  11c9a0:	e51b3008 	ldr	r3, [fp, #-8]
  11c9a4:	e593300c 	ldr	r3, [r3, #12]
  11c9a8:	e50b3008 	str	r3, [fp, #-8]
  11c9ac:	e51b3008 	ldr	r3, [fp, #-8]
  11c9b0:	e3530000 	cmp	r3, #0
  11c9b4:	1affffeb 	bne	11c968 <raw_remove+0x5c>
      }
    }
  }
  memp_free(MEMP_RAW_PCB, pcb);
  11c9b8:	e51b1010 	ldr	r1, [fp, #-16]
  11c9bc:	e3a00000 	mov	r0, #0
  11c9c0:	ebfff2a7 	bl	119464 <memp_free>
}
  11c9c4:	e320f000 	nop	{0}
  11c9c8:	e24bd004 	sub	sp, fp, #4
  11c9cc:	e8bd8800 	pop	{fp, pc}

0011c9d0 <raw_new>:
 *
 * @see raw_remove()
 */
struct raw_pcb *
raw_new(u8_t proto)
{
  11c9d0:	e92d4800 	push	{fp, lr}
  11c9d4:	e28db004 	add	fp, sp, #4
  11c9d8:	e24dd010 	sub	sp, sp, #16
  11c9dc:	e1a03000 	mov	r3, r0
  11c9e0:	e54b300d 	strb	r3, [fp, #-13]
  struct raw_pcb *pcb;

  LWIP_DEBUGF(RAW_DEBUG | LWIP_DBG_TRACE, ("raw_new\n"));

  pcb = (struct raw_pcb *)memp_malloc(MEMP_RAW_PCB);
  11c9e4:	e3a02f72 	mov	r2, #456	; 0x1c8
  11c9e8:	e3071d1c 	movw	r1, #32028	; 0x7d1c
  11c9ec:	e3401014 	movt	r1, #20
  11c9f0:	e3a00000 	mov	r0, #0
  11c9f4:	ebfff232 	bl	1192c4 <memp_malloc_fn>
  11c9f8:	e50b0008 	str	r0, [fp, #-8]
  /* could allocate RAW PCB? */
  if (pcb != NULL) {
  11c9fc:	e51b3008 	ldr	r3, [fp, #-8]
  11ca00:	e3530000 	cmp	r3, #0
  11ca04:	0a000012 	beq	11ca54 <raw_new+0x84>
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct raw_pcb));
  11ca08:	e3a0201c 	mov	r2, #28
  11ca0c:	e3a01000 	mov	r1, #0
  11ca10:	e51b0008 	ldr	r0, [fp, #-8]
  11ca14:	eb009290 	bl	14145c <memset>
    pcb->protocol = proto;
  11ca18:	e51b3008 	ldr	r3, [fp, #-8]
  11ca1c:	e55b200d 	ldrb	r2, [fp, #-13]
  11ca20:	e5c32010 	strb	r2, [r3, #16]
    pcb->ttl = RAW_TTL;
  11ca24:	e51b3008 	ldr	r3, [fp, #-8]
  11ca28:	e3e02000 	mvn	r2, #0
  11ca2c:	e5c3200a 	strb	r2, [r3, #10]
    pcb->next = raw_pcbs;
  11ca30:	e30f3218 	movw	r3, #61976	; 0xf218
  11ca34:	e3403014 	movt	r3, #20
  11ca38:	e5932000 	ldr	r2, [r3]
  11ca3c:	e51b3008 	ldr	r3, [fp, #-8]
  11ca40:	e583200c 	str	r2, [r3, #12]
    raw_pcbs = pcb;
  11ca44:	e30f3218 	movw	r3, #61976	; 0xf218
  11ca48:	e3403014 	movt	r3, #20
  11ca4c:	e51b2008 	ldr	r2, [fp, #-8]
  11ca50:	e5832000 	str	r2, [r3]
  }
  return pcb;
  11ca54:	e51b3008 	ldr	r3, [fp, #-8]
}
  11ca58:	e1a00003 	mov	r0, r3
  11ca5c:	e24bd004 	sub	sp, fp, #4
  11ca60:	e8bd8800 	pop	{fp, pc}

0011ca64 <raw_new_ip_type>:
 *
 * @see raw_remove()
 */
struct raw_pcb *
raw_new_ip_type(u8_t type, u8_t proto)
{
  11ca64:	e92d4800 	push	{fp, lr}
  11ca68:	e28db004 	add	fp, sp, #4
  11ca6c:	e24dd010 	sub	sp, sp, #16
  11ca70:	e1a03000 	mov	r3, r0
  11ca74:	e1a02001 	mov	r2, r1
  11ca78:	e54b300d 	strb	r3, [fp, #-13]
  11ca7c:	e1a03002 	mov	r3, r2
  11ca80:	e54b300e 	strb	r3, [fp, #-14]
  struct raw_pcb *pcb;
  pcb = raw_new(proto);
  11ca84:	e55b300e 	ldrb	r3, [fp, #-14]
  11ca88:	e1a00003 	mov	r0, r3
  11ca8c:	ebffffcf 	bl	11c9d0 <raw_new>
  11ca90:	e50b0008 	str	r0, [fp, #-8]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else /* LWIP_IPV4 && LWIP_IPV6 */
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
  11ca94:	e51b3008 	ldr	r3, [fp, #-8]
}
  11ca98:	e1a00003 	mov	r0, r3
  11ca9c:	e24bd004 	sub	sp, fp, #4
  11caa0:	e8bd8800 	pop	{fp, pc}

0011caa4 <raw_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void raw_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
  11caa4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11caa8:	e28db000 	add	fp, sp, #0
  11caac:	e24dd014 	sub	sp, sp, #20
  11cab0:	e50b0010 	str	r0, [fp, #-16]
  11cab4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct raw_pcb* rpcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
  11cab8:	e51b3010 	ldr	r3, [fp, #-16]
  11cabc:	e3530000 	cmp	r3, #0
  11cac0:	0a00001f 	beq	11cb44 <raw_netif_ip_addr_changed+0xa0>
  11cac4:	e51b3010 	ldr	r3, [fp, #-16]
  11cac8:	e5933000 	ldr	r3, [r3]
  11cacc:	e3530000 	cmp	r3, #0
  11cad0:	0a00001b 	beq	11cb44 <raw_netif_ip_addr_changed+0xa0>
  11cad4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11cad8:	e3530000 	cmp	r3, #0
  11cadc:	0a000018 	beq	11cb44 <raw_netif_ip_addr_changed+0xa0>
  11cae0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11cae4:	e5933000 	ldr	r3, [r3]
  11cae8:	e3530000 	cmp	r3, #0
  11caec:	0a000014 	beq	11cb44 <raw_netif_ip_addr_changed+0xa0>
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
  11caf0:	e30f3218 	movw	r3, #61976	; 0xf218
  11caf4:	e3403014 	movt	r3, #20
  11caf8:	e5933000 	ldr	r3, [r3]
  11cafc:	e50b3008 	str	r3, [fp, #-8]
  11cb00:	ea00000c 	b	11cb38 <raw_netif_ip_addr_changed+0x94>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&rpcb->local_ip, old_addr)) {
  11cb04:	e51b3008 	ldr	r3, [fp, #-8]
  11cb08:	e5932000 	ldr	r2, [r3]
  11cb0c:	e51b3010 	ldr	r3, [fp, #-16]
  11cb10:	e5933000 	ldr	r3, [r3]
  11cb14:	e1520003 	cmp	r2, r3
  11cb18:	1a000003 	bne	11cb2c <raw_netif_ip_addr_changed+0x88>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(rpcb->local_ip, *new_addr);
  11cb1c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11cb20:	e5932000 	ldr	r2, [r3]
  11cb24:	e51b3008 	ldr	r3, [fp, #-8]
  11cb28:	e5832000 	str	r2, [r3]
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
  11cb2c:	e51b3008 	ldr	r3, [fp, #-8]
  11cb30:	e593300c 	ldr	r3, [r3, #12]
  11cb34:	e50b3008 	str	r3, [fp, #-8]
  11cb38:	e51b3008 	ldr	r3, [fp, #-8]
  11cb3c:	e3530000 	cmp	r3, #0
  11cb40:	1affffef 	bne	11cb04 <raw_netif_ip_addr_changed+0x60>
      }
    }
  }
}
  11cb44:	e320f000 	nop	{0}
  11cb48:	e28bd000 	add	sp, fp, #0
  11cb4c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11cb50:	e12fff1e 	bx	lr

0011cb54 <stats_init>:

struct stats_ lwip_stats;

void
stats_init(void)
{
  11cb54:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11cb58:	e28db000 	add	fp, sp, #0
#ifdef LWIP_DEBUG
#if MEM_STATS
  lwip_stats.mem.name = "MEM";
#endif /* MEM_STATS */
#endif /* LWIP_DEBUG */
}
  11cb5c:	e320f000 	nop	{0}
  11cb60:	e28bd000 	add	sp, fp, #0
  11cb64:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11cb68:	e12fff1e 	bx	lr

0011cb6c <stats_display_proto>:

#if LWIP_STATS_DISPLAY
void
stats_display_proto(struct stats_proto *proto, const char *name)
{
  11cb6c:	e92d4800 	push	{fp, lr}
  11cb70:	e28db004 	add	fp, sp, #4
  11cb74:	e24dd008 	sub	sp, sp, #8
  11cb78:	e50b0008 	str	r0, [fp, #-8]
  11cb7c:	e50b100c 	str	r1, [fp, #-12]
  LWIP_PLATFORM_DIAG(("\n%s\n\t", name));
  11cb80:	e51b100c 	ldr	r1, [fp, #-12]
  11cb84:	e3070d70 	movw	r0, #32112	; 0x7d70
  11cb88:	e3400014 	movt	r0, #20
  11cb8c:	ebff9960 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("xmit: %"STAT_COUNTER_F"\n\t", proto->xmit));
  11cb90:	e51b3008 	ldr	r3, [fp, #-8]
  11cb94:	e1d330b0 	ldrh	r3, [r3]
  11cb98:	e1a01003 	mov	r1, r3
  11cb9c:	e3070d78 	movw	r0, #32120	; 0x7d78
  11cba0:	e3400014 	movt	r0, #20
  11cba4:	ebff995a 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("recv: %"STAT_COUNTER_F"\n\t", proto->recv));
  11cba8:	e51b3008 	ldr	r3, [fp, #-8]
  11cbac:	e1d330b2 	ldrh	r3, [r3, #2]
  11cbb0:	e1a01003 	mov	r1, r3
  11cbb4:	e3070d84 	movw	r0, #32132	; 0x7d84
  11cbb8:	e3400014 	movt	r0, #20
  11cbbc:	ebff9954 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("fw: %"STAT_COUNTER_F"\n\t", proto->fw));
  11cbc0:	e51b3008 	ldr	r3, [fp, #-8]
  11cbc4:	e1d330b4 	ldrh	r3, [r3, #4]
  11cbc8:	e1a01003 	mov	r1, r3
  11cbcc:	e3070d90 	movw	r0, #32144	; 0x7d90
  11cbd0:	e3400014 	movt	r0, #20
  11cbd4:	ebff994e 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("drop: %"STAT_COUNTER_F"\n\t", proto->drop));
  11cbd8:	e51b3008 	ldr	r3, [fp, #-8]
  11cbdc:	e1d330b6 	ldrh	r3, [r3, #6]
  11cbe0:	e1a01003 	mov	r1, r3
  11cbe4:	e3070d9c 	movw	r0, #32156	; 0x7d9c
  11cbe8:	e3400014 	movt	r0, #20
  11cbec:	ebff9948 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("chkerr: %"STAT_COUNTER_F"\n\t", proto->chkerr));
  11cbf0:	e51b3008 	ldr	r3, [fp, #-8]
  11cbf4:	e1d330b8 	ldrh	r3, [r3, #8]
  11cbf8:	e1a01003 	mov	r1, r3
  11cbfc:	e3070da8 	movw	r0, #32168	; 0x7da8
  11cc00:	e3400014 	movt	r0, #20
  11cc04:	ebff9942 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("lenerr: %"STAT_COUNTER_F"\n\t", proto->lenerr));
  11cc08:	e51b3008 	ldr	r3, [fp, #-8]
  11cc0c:	e1d330ba 	ldrh	r3, [r3, #10]
  11cc10:	e1a01003 	mov	r1, r3
  11cc14:	e3070db8 	movw	r0, #32184	; 0x7db8
  11cc18:	e3400014 	movt	r0, #20
  11cc1c:	ebff993c 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("memerr: %"STAT_COUNTER_F"\n\t", proto->memerr));
  11cc20:	e51b3008 	ldr	r3, [fp, #-8]
  11cc24:	e1d330bc 	ldrh	r3, [r3, #12]
  11cc28:	e1a01003 	mov	r1, r3
  11cc2c:	e3070dc8 	movw	r0, #32200	; 0x7dc8
  11cc30:	e3400014 	movt	r0, #20
  11cc34:	ebff9936 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("rterr: %"STAT_COUNTER_F"\n\t", proto->rterr));
  11cc38:	e51b3008 	ldr	r3, [fp, #-8]
  11cc3c:	e1d330be 	ldrh	r3, [r3, #14]
  11cc40:	e1a01003 	mov	r1, r3
  11cc44:	e3070dd8 	movw	r0, #32216	; 0x7dd8
  11cc48:	e3400014 	movt	r0, #20
  11cc4c:	ebff9930 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("proterr: %"STAT_COUNTER_F"\n\t", proto->proterr));
  11cc50:	e51b3008 	ldr	r3, [fp, #-8]
  11cc54:	e1d331b0 	ldrh	r3, [r3, #16]
  11cc58:	e1a01003 	mov	r1, r3
  11cc5c:	e3070de8 	movw	r0, #32232	; 0x7de8
  11cc60:	e3400014 	movt	r0, #20
  11cc64:	ebff992a 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("opterr: %"STAT_COUNTER_F"\n\t", proto->opterr));
  11cc68:	e51b3008 	ldr	r3, [fp, #-8]
  11cc6c:	e1d331b2 	ldrh	r3, [r3, #18]
  11cc70:	e1a01003 	mov	r1, r3
  11cc74:	e3070df8 	movw	r0, #32248	; 0x7df8
  11cc78:	e3400014 	movt	r0, #20
  11cc7c:	ebff9924 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("err: %"STAT_COUNTER_F"\n\t", proto->err));
  11cc80:	e51b3008 	ldr	r3, [fp, #-8]
  11cc84:	e1d331b4 	ldrh	r3, [r3, #20]
  11cc88:	e1a01003 	mov	r1, r3
  11cc8c:	e3070e08 	movw	r0, #32264	; 0x7e08
  11cc90:	e3400014 	movt	r0, #20
  11cc94:	ebff991e 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("cachehit: %"STAT_COUNTER_F"\n", proto->cachehit));
  11cc98:	e51b3008 	ldr	r3, [fp, #-8]
  11cc9c:	e1d331b6 	ldrh	r3, [r3, #22]
  11cca0:	e1a01003 	mov	r1, r3
  11cca4:	e3070e14 	movw	r0, #32276	; 0x7e14
  11cca8:	e3400014 	movt	r0, #20
  11ccac:	ebff9918 	bl	103114 <rt_kprintf>
}
  11ccb0:	e320f000 	nop	{0}
  11ccb4:	e24bd004 	sub	sp, fp, #4
  11ccb8:	e8bd8800 	pop	{fp, pc}

0011ccbc <stats_display_igmp>:

#if IGMP_STATS || MLD6_STATS
void
stats_display_igmp(struct stats_igmp *igmp, const char *name)
{
  11ccbc:	e92d4800 	push	{fp, lr}
  11ccc0:	e28db004 	add	fp, sp, #4
  11ccc4:	e24dd008 	sub	sp, sp, #8
  11ccc8:	e50b0008 	str	r0, [fp, #-8]
  11cccc:	e50b100c 	str	r1, [fp, #-12]
  LWIP_PLATFORM_DIAG(("\n%s\n\t", name));
  11ccd0:	e51b100c 	ldr	r1, [fp, #-12]
  11ccd4:	e3070d70 	movw	r0, #32112	; 0x7d70
  11ccd8:	e3400014 	movt	r0, #20
  11ccdc:	ebff990c 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("xmit: %"STAT_COUNTER_F"\n\t", igmp->xmit));
  11cce0:	e51b3008 	ldr	r3, [fp, #-8]
  11cce4:	e1d330b0 	ldrh	r3, [r3]
  11cce8:	e1a01003 	mov	r1, r3
  11ccec:	e3070d78 	movw	r0, #32120	; 0x7d78
  11ccf0:	e3400014 	movt	r0, #20
  11ccf4:	ebff9906 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("recv: %"STAT_COUNTER_F"\n\t", igmp->recv));
  11ccf8:	e51b3008 	ldr	r3, [fp, #-8]
  11ccfc:	e1d330b2 	ldrh	r3, [r3, #2]
  11cd00:	e1a01003 	mov	r1, r3
  11cd04:	e3070d84 	movw	r0, #32132	; 0x7d84
  11cd08:	e3400014 	movt	r0, #20
  11cd0c:	ebff9900 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("drop: %"STAT_COUNTER_F"\n\t", igmp->drop));
  11cd10:	e51b3008 	ldr	r3, [fp, #-8]
  11cd14:	e1d330b4 	ldrh	r3, [r3, #4]
  11cd18:	e1a01003 	mov	r1, r3
  11cd1c:	e3070d9c 	movw	r0, #32156	; 0x7d9c
  11cd20:	e3400014 	movt	r0, #20
  11cd24:	ebff98fa 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("chkerr: %"STAT_COUNTER_F"\n\t", igmp->chkerr));
  11cd28:	e51b3008 	ldr	r3, [fp, #-8]
  11cd2c:	e1d330b6 	ldrh	r3, [r3, #6]
  11cd30:	e1a01003 	mov	r1, r3
  11cd34:	e3070da8 	movw	r0, #32168	; 0x7da8
  11cd38:	e3400014 	movt	r0, #20
  11cd3c:	ebff98f4 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("lenerr: %"STAT_COUNTER_F"\n\t", igmp->lenerr));
  11cd40:	e51b3008 	ldr	r3, [fp, #-8]
  11cd44:	e1d330b8 	ldrh	r3, [r3, #8]
  11cd48:	e1a01003 	mov	r1, r3
  11cd4c:	e3070db8 	movw	r0, #32184	; 0x7db8
  11cd50:	e3400014 	movt	r0, #20
  11cd54:	ebff98ee 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("memerr: %"STAT_COUNTER_F"\n\t", igmp->memerr));
  11cd58:	e51b3008 	ldr	r3, [fp, #-8]
  11cd5c:	e1d330ba 	ldrh	r3, [r3, #10]
  11cd60:	e1a01003 	mov	r1, r3
  11cd64:	e3070dc8 	movw	r0, #32200	; 0x7dc8
  11cd68:	e3400014 	movt	r0, #20
  11cd6c:	ebff98e8 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("proterr: %"STAT_COUNTER_F"\n\t", igmp->proterr));
  11cd70:	e51b3008 	ldr	r3, [fp, #-8]
  11cd74:	e1d330bc 	ldrh	r3, [r3, #12]
  11cd78:	e1a01003 	mov	r1, r3
  11cd7c:	e3070de8 	movw	r0, #32232	; 0x7de8
  11cd80:	e3400014 	movt	r0, #20
  11cd84:	ebff98e2 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("rx_v1: %"STAT_COUNTER_F"\n\t", igmp->rx_v1));
  11cd88:	e51b3008 	ldr	r3, [fp, #-8]
  11cd8c:	e1d330be 	ldrh	r3, [r3, #14]
  11cd90:	e1a01003 	mov	r1, r3
  11cd94:	e3070e24 	movw	r0, #32292	; 0x7e24
  11cd98:	e3400014 	movt	r0, #20
  11cd9c:	ebff98dc 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("rx_group: %"STAT_COUNTER_F"\n\t", igmp->rx_group));
  11cda0:	e51b3008 	ldr	r3, [fp, #-8]
  11cda4:	e1d331b0 	ldrh	r3, [r3, #16]
  11cda8:	e1a01003 	mov	r1, r3
  11cdac:	e3070e34 	movw	r0, #32308	; 0x7e34
  11cdb0:	e3400014 	movt	r0, #20
  11cdb4:	ebff98d6 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("rx_general: %"STAT_COUNTER_F"\n\t", igmp->rx_general));
  11cdb8:	e51b3008 	ldr	r3, [fp, #-8]
  11cdbc:	e1d331b2 	ldrh	r3, [r3, #18]
  11cdc0:	e1a01003 	mov	r1, r3
  11cdc4:	e3070e44 	movw	r0, #32324	; 0x7e44
  11cdc8:	e3400014 	movt	r0, #20
  11cdcc:	ebff98d0 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("rx_report: %"STAT_COUNTER_F"\n\t", igmp->rx_report));
  11cdd0:	e51b3008 	ldr	r3, [fp, #-8]
  11cdd4:	e1d331b4 	ldrh	r3, [r3, #20]
  11cdd8:	e1a01003 	mov	r1, r3
  11cddc:	e3070e58 	movw	r0, #32344	; 0x7e58
  11cde0:	e3400014 	movt	r0, #20
  11cde4:	ebff98ca 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("tx_join: %"STAT_COUNTER_F"\n\t", igmp->tx_join));
  11cde8:	e51b3008 	ldr	r3, [fp, #-8]
  11cdec:	e1d331b6 	ldrh	r3, [r3, #22]
  11cdf0:	e1a01003 	mov	r1, r3
  11cdf4:	e3070e6c 	movw	r0, #32364	; 0x7e6c
  11cdf8:	e3400014 	movt	r0, #20
  11cdfc:	ebff98c4 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("tx_leave: %"STAT_COUNTER_F"\n\t", igmp->tx_leave));
  11ce00:	e51b3008 	ldr	r3, [fp, #-8]
  11ce04:	e1d331b8 	ldrh	r3, [r3, #24]
  11ce08:	e1a01003 	mov	r1, r3
  11ce0c:	e3070e7c 	movw	r0, #32380	; 0x7e7c
  11ce10:	e3400014 	movt	r0, #20
  11ce14:	ebff98be 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("tx_report: %"STAT_COUNTER_F"\n", igmp->tx_report));
  11ce18:	e51b3008 	ldr	r3, [fp, #-8]
  11ce1c:	e1d331ba 	ldrh	r3, [r3, #26]
  11ce20:	e1a01003 	mov	r1, r3
  11ce24:	e3070e8c 	movw	r0, #32396	; 0x7e8c
  11ce28:	e3400014 	movt	r0, #20
  11ce2c:	ebff98b8 	bl	103114 <rt_kprintf>
}
  11ce30:	e320f000 	nop	{0}
  11ce34:	e24bd004 	sub	sp, fp, #4
  11ce38:	e8bd8800 	pop	{fp, pc}

0011ce3c <stats_display_mem>:
#endif /* IGMP_STATS || MLD6_STATS */

#if MEM_STATS || MEMP_STATS
void
stats_display_mem(struct stats_mem *mem, const char *name)
{
  11ce3c:	e92d4800 	push	{fp, lr}
  11ce40:	e28db004 	add	fp, sp, #4
  11ce44:	e24dd008 	sub	sp, sp, #8
  11ce48:	e50b0008 	str	r0, [fp, #-8]
  11ce4c:	e50b100c 	str	r1, [fp, #-12]
  LWIP_PLATFORM_DIAG(("\nMEM %s\n\t", name));
  11ce50:	e51b100c 	ldr	r1, [fp, #-12]
  11ce54:	e3070e9c 	movw	r0, #32412	; 0x7e9c
  11ce58:	e3400014 	movt	r0, #20
  11ce5c:	ebff98ac 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("avail: %"U32_F"\n\t", (u32_t)mem->avail));
  11ce60:	e51b3008 	ldr	r3, [fp, #-8]
  11ce64:	e1d330b6 	ldrh	r3, [r3, #6]
  11ce68:	e1a01003 	mov	r1, r3
  11ce6c:	e3070ea8 	movw	r0, #32424	; 0x7ea8
  11ce70:	e3400014 	movt	r0, #20
  11ce74:	ebff98a6 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("used: %"U32_F"\n\t", (u32_t)mem->used));
  11ce78:	e51b3008 	ldr	r3, [fp, #-8]
  11ce7c:	e1d330b8 	ldrh	r3, [r3, #8]
  11ce80:	e1a01003 	mov	r1, r3
  11ce84:	e3070eb8 	movw	r0, #32440	; 0x7eb8
  11ce88:	e3400014 	movt	r0, #20
  11ce8c:	ebff98a0 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("max: %"U32_F"\n\t", (u32_t)mem->max));
  11ce90:	e51b3008 	ldr	r3, [fp, #-8]
  11ce94:	e1d330ba 	ldrh	r3, [r3, #10]
  11ce98:	e1a01003 	mov	r1, r3
  11ce9c:	e3070ec4 	movw	r0, #32452	; 0x7ec4
  11cea0:	e3400014 	movt	r0, #20
  11cea4:	ebff989a 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("err: %"U32_F"\n", (u32_t)mem->err));
  11cea8:	e51b3008 	ldr	r3, [fp, #-8]
  11ceac:	e1d330b4 	ldrh	r3, [r3, #4]
  11ceb0:	e1a01003 	mov	r1, r3
  11ceb4:	e3070ed0 	movw	r0, #32464	; 0x7ed0
  11ceb8:	e3400014 	movt	r0, #20
  11cebc:	ebff9894 	bl	103114 <rt_kprintf>
}
  11cec0:	e320f000 	nop	{0}
  11cec4:	e24bd004 	sub	sp, fp, #4
  11cec8:	e8bd8800 	pop	{fp, pc}

0011cecc <stats_display_memp>:

#if MEMP_STATS
void
stats_display_memp(struct stats_mem *mem, int index)
{
  11cecc:	e92d4800 	push	{fp, lr}
  11ced0:	e28db004 	add	fp, sp, #4
  11ced4:	e24dd008 	sub	sp, sp, #8
  11ced8:	e50b0008 	str	r0, [fp, #-8]
  11cedc:	e50b100c 	str	r1, [fp, #-12]
  if (index < MEMP_MAX) {
  11cee0:	e51b300c 	ldr	r3, [fp, #-12]
  11cee4:	e3530010 	cmp	r3, #16
  11cee8:	ca000004 	bgt	11cf00 <stats_display_memp+0x34>
    stats_display_mem(mem, mem->name);
  11ceec:	e51b3008 	ldr	r3, [fp, #-8]
  11cef0:	e5933000 	ldr	r3, [r3]
  11cef4:	e1a01003 	mov	r1, r3
  11cef8:	e51b0008 	ldr	r0, [fp, #-8]
  11cefc:	ebffffce 	bl	11ce3c <stats_display_mem>
  }
}
  11cf00:	e320f000 	nop	{0}
  11cf04:	e24bd004 	sub	sp, fp, #4
  11cf08:	e8bd8800 	pop	{fp, pc}

0011cf0c <stats_display_sys>:
#endif /* MEM_STATS || MEMP_STATS */

#if SYS_STATS
void
stats_display_sys(struct stats_sys *sys)
{
  11cf0c:	e92d4800 	push	{fp, lr}
  11cf10:	e28db004 	add	fp, sp, #4
  11cf14:	e24dd008 	sub	sp, sp, #8
  11cf18:	e50b0008 	str	r0, [fp, #-8]
  LWIP_PLATFORM_DIAG(("\nSYS\n\t"));
  11cf1c:	e3070edc 	movw	r0, #32476	; 0x7edc
  11cf20:	e3400014 	movt	r0, #20
  11cf24:	ebff987a 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("sem.used:  %"U32_F"\n\t", (u32_t)sys->sem.used));
  11cf28:	e51b3008 	ldr	r3, [fp, #-8]
  11cf2c:	e1d330b0 	ldrh	r3, [r3]
  11cf30:	e1a01003 	mov	r1, r3
  11cf34:	e3070ee4 	movw	r0, #32484	; 0x7ee4
  11cf38:	e3400014 	movt	r0, #20
  11cf3c:	ebff9874 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("sem.max:   %"U32_F"\n\t", (u32_t)sys->sem.max));
  11cf40:	e51b3008 	ldr	r3, [fp, #-8]
  11cf44:	e1d330b2 	ldrh	r3, [r3, #2]
  11cf48:	e1a01003 	mov	r1, r3
  11cf4c:	e3070ef8 	movw	r0, #32504	; 0x7ef8
  11cf50:	e3400014 	movt	r0, #20
  11cf54:	ebff986e 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("sem.err:   %"U32_F"\n\t", (u32_t)sys->sem.err));
  11cf58:	e51b3008 	ldr	r3, [fp, #-8]
  11cf5c:	e1d330b4 	ldrh	r3, [r3, #4]
  11cf60:	e1a01003 	mov	r1, r3
  11cf64:	e3070f0c 	movw	r0, #32524	; 0x7f0c
  11cf68:	e3400014 	movt	r0, #20
  11cf6c:	ebff9868 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("mutex.used: %"U32_F"\n\t", (u32_t)sys->mutex.used));
  11cf70:	e51b3008 	ldr	r3, [fp, #-8]
  11cf74:	e1d330b6 	ldrh	r3, [r3, #6]
  11cf78:	e1a01003 	mov	r1, r3
  11cf7c:	e3070f20 	movw	r0, #32544	; 0x7f20
  11cf80:	e3400014 	movt	r0, #20
  11cf84:	ebff9862 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("mutex.max:  %"U32_F"\n\t", (u32_t)sys->mutex.max));
  11cf88:	e51b3008 	ldr	r3, [fp, #-8]
  11cf8c:	e1d330b8 	ldrh	r3, [r3, #8]
  11cf90:	e1a01003 	mov	r1, r3
  11cf94:	e3070f34 	movw	r0, #32564	; 0x7f34
  11cf98:	e3400014 	movt	r0, #20
  11cf9c:	ebff985c 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("mutex.err:  %"U32_F"\n\t", (u32_t)sys->mutex.err));
  11cfa0:	e51b3008 	ldr	r3, [fp, #-8]
  11cfa4:	e1d330ba 	ldrh	r3, [r3, #10]
  11cfa8:	e1a01003 	mov	r1, r3
  11cfac:	e3070f48 	movw	r0, #32584	; 0x7f48
  11cfb0:	e3400014 	movt	r0, #20
  11cfb4:	ebff9856 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("mbox.used:  %"U32_F"\n\t", (u32_t)sys->mbox.used));
  11cfb8:	e51b3008 	ldr	r3, [fp, #-8]
  11cfbc:	e1d330bc 	ldrh	r3, [r3, #12]
  11cfc0:	e1a01003 	mov	r1, r3
  11cfc4:	e3070f5c 	movw	r0, #32604	; 0x7f5c
  11cfc8:	e3400014 	movt	r0, #20
  11cfcc:	ebff9850 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("mbox.max:   %"U32_F"\n\t", (u32_t)sys->mbox.max));
  11cfd0:	e51b3008 	ldr	r3, [fp, #-8]
  11cfd4:	e1d330be 	ldrh	r3, [r3, #14]
  11cfd8:	e1a01003 	mov	r1, r3
  11cfdc:	e3070f70 	movw	r0, #32624	; 0x7f70
  11cfe0:	e3400014 	movt	r0, #20
  11cfe4:	ebff984a 	bl	103114 <rt_kprintf>
  LWIP_PLATFORM_DIAG(("mbox.err:   %"U32_F"\n", (u32_t)sys->mbox.err));
  11cfe8:	e51b3008 	ldr	r3, [fp, #-8]
  11cfec:	e1d331b0 	ldrh	r3, [r3, #16]
  11cff0:	e1a01003 	mov	r1, r3
  11cff4:	e3070f84 	movw	r0, #32644	; 0x7f84
  11cff8:	e3400014 	movt	r0, #20
  11cffc:	ebff9844 	bl	103114 <rt_kprintf>
}
  11d000:	e320f000 	nop	{0}
  11d004:	e24bd004 	sub	sp, fp, #4
  11d008:	e8bd8800 	pop	{fp, pc}

0011d00c <stats_display>:
#endif /* SYS_STATS */

void
stats_display(void)
{
  11d00c:	e92d4800 	push	{fp, lr}
  11d010:	e28db004 	add	fp, sp, #4
  11d014:	e24dd008 	sub	sp, sp, #8
  s16_t i;

  LINK_STATS_DISPLAY();
  11d018:	e3071f98 	movw	r1, #32664	; 0x7f98
  11d01c:	e3401014 	movt	r1, #20
  11d020:	e3060840 	movw	r0, #26688	; 0x6840
  11d024:	e3400057 	movt	r0, #87	; 0x57
  11d028:	ebfffecf 	bl	11cb6c <stats_display_proto>
  ETHARP_STATS_DISPLAY();
  11d02c:	e3071fa0 	movw	r1, #32672	; 0x7fa0
  11d030:	e3401014 	movt	r1, #20
  11d034:	e59f00dc 	ldr	r0, [pc, #220]	; 11d118 <stats_display+0x10c>
  11d038:	ebfffecb 	bl	11cb6c <stats_display_proto>
  IPFRAG_STATS_DISPLAY();
  11d03c:	e3071fa8 	movw	r1, #32680	; 0x7fa8
  11d040:	e3401014 	movt	r1, #20
  11d044:	e59f00d0 	ldr	r0, [pc, #208]	; 11d11c <stats_display+0x110>
  11d048:	ebfffec7 	bl	11cb6c <stats_display_proto>
  IP6_FRAG_STATS_DISPLAY();
  IP_STATS_DISPLAY();
  11d04c:	e3071fb0 	movw	r1, #32688	; 0x7fb0
  11d050:	e3401014 	movt	r1, #20
  11d054:	e59f00c4 	ldr	r0, [pc, #196]	; 11d120 <stats_display+0x114>
  11d058:	ebfffec3 	bl	11cb6c <stats_display_proto>
  ND6_STATS_DISPLAY();
  IP6_STATS_DISPLAY();
  IGMP_STATS_DISPLAY();
  11d05c:	e3071fb4 	movw	r1, #32692	; 0x7fb4
  11d060:	e3401014 	movt	r1, #20
  11d064:	e59f00b8 	ldr	r0, [pc, #184]	; 11d124 <stats_display+0x118>
  11d068:	ebffff13 	bl	11ccbc <stats_display_igmp>
  MLD6_STATS_DISPLAY();
  ICMP_STATS_DISPLAY();
  11d06c:	e3071fbc 	movw	r1, #32700	; 0x7fbc
  11d070:	e3401014 	movt	r1, #20
  11d074:	e59f00ac 	ldr	r0, [pc, #172]	; 11d128 <stats_display+0x11c>
  11d078:	ebfffebb 	bl	11cb6c <stats_display_proto>
  ICMP6_STATS_DISPLAY();
  UDP_STATS_DISPLAY();
  11d07c:	e3071fc4 	movw	r1, #32708	; 0x7fc4
  11d080:	e3401014 	movt	r1, #20
  11d084:	e59f00a0 	ldr	r0, [pc, #160]	; 11d12c <stats_display+0x120>
  11d088:	ebfffeb7 	bl	11cb6c <stats_display_proto>
  TCP_STATS_DISPLAY();
  11d08c:	e3071fc8 	movw	r1, #32712	; 0x7fc8
  11d090:	e3401014 	movt	r1, #20
  11d094:	e59f0094 	ldr	r0, [pc, #148]	; 11d130 <stats_display+0x124>
  11d098:	ebfffeb3 	bl	11cb6c <stats_display_proto>
  MEM_STATS_DISPLAY();
  11d09c:	e3071fcc 	movw	r1, #32716	; 0x7fcc
  11d0a0:	e3401014 	movt	r1, #20
  11d0a4:	e59f0088 	ldr	r0, [pc, #136]	; 11d134 <stats_display+0x128>
  11d0a8:	ebffff63 	bl	11ce3c <stats_display_mem>
  for (i = 0; i < MEMP_MAX; i++) {
  11d0ac:	e3a03000 	mov	r3, #0
  11d0b0:	e14b30b6 	strh	r3, [fp, #-6]
  11d0b4:	ea00000f 	b	11d0f8 <stats_display+0xec>
    MEMP_STATS_DISPLAY(i);
  11d0b8:	e15b30f6 	ldrsh	r3, [fp, #-6]
  11d0bc:	e3062840 	movw	r2, #26688	; 0x6840
  11d0c0:	e3402057 	movt	r2, #87	; 0x57
  11d0c4:	e2833034 	add	r3, r3, #52	; 0x34
  11d0c8:	e1a03103 	lsl	r3, r3, #2
  11d0cc:	e0823003 	add	r3, r2, r3
  11d0d0:	e5933004 	ldr	r3, [r3, #4]
  11d0d4:	e15b20f6 	ldrsh	r2, [fp, #-6]
  11d0d8:	e1a01002 	mov	r1, r2
  11d0dc:	e1a00003 	mov	r0, r3
  11d0e0:	ebffff79 	bl	11cecc <stats_display_memp>
  for (i = 0; i < MEMP_MAX; i++) {
  11d0e4:	e15b30f6 	ldrsh	r3, [fp, #-6]
  11d0e8:	e6ff3073 	uxth	r3, r3
  11d0ec:	e2833001 	add	r3, r3, #1
  11d0f0:	e6ff3073 	uxth	r3, r3
  11d0f4:	e14b30b6 	strh	r3, [fp, #-6]
  11d0f8:	e15b30f6 	ldrsh	r3, [fp, #-6]
  11d0fc:	e3530010 	cmp	r3, #16
  11d100:	daffffec 	ble	11d0b8 <stats_display+0xac>
  }
  SYS_STATS_DISPLAY();
  11d104:	e59f002c 	ldr	r0, [pc, #44]	; 11d138 <stats_display+0x12c>
  11d108:	ebffff7f 	bl	11cf0c <stats_display_sys>
}
  11d10c:	e320f000 	nop	{0}
  11d110:	e24bd004 	sub	sp, fp, #4
  11d114:	e8bd8800 	pop	{fp, pc}
  11d118:	00576858 	.word	0x00576858
  11d11c:	00576870 	.word	0x00576870
  11d120:	00576888 	.word	0x00576888
  11d124:	005768b8 	.word	0x005768b8
  11d128:	005768a0 	.word	0x005768a0
  11d12c:	005768d4 	.word	0x005768d4
  11d130:	005768ec 	.word	0x005768ec
  11d134:	00576904 	.word	0x00576904
  11d138:	00576958 	.word	0x00576958

0011d13c <sys_msleep>:
 *
 * @param ms number of milliseconds to sleep
 */
void
sys_msleep(u32_t ms)
{
  11d13c:	e92d4800 	push	{fp, lr}
  11d140:	e28db004 	add	fp, sp, #4
  11d144:	e24dd010 	sub	sp, sp, #16
  11d148:	e50b0010 	str	r0, [fp, #-16]
  if (ms > 0) {
  11d14c:	e51b3010 	ldr	r3, [fp, #-16]
  11d150:	e3530000 	cmp	r3, #0
  11d154:	0a00000f 	beq	11d198 <sys_msleep+0x5c>
    sys_sem_t delaysem;
    err_t err = sys_sem_new(&delaysem, 0);
  11d158:	e24b300c 	sub	r3, fp, #12
  11d15c:	e3a01000 	mov	r1, #0
  11d160:	e1a00003 	mov	r0, r3
  11d164:	ebffb52c 	bl	10a61c <sys_sem_new>
  11d168:	e1a03000 	mov	r3, r0
  11d16c:	e54b3005 	strb	r3, [fp, #-5]
    if (err == ERR_OK) {
  11d170:	e15b30d5 	ldrsb	r3, [fp, #-5]
  11d174:	e3530000 	cmp	r3, #0
  11d178:	1a000006 	bne	11d198 <sys_msleep+0x5c>
      sys_arch_sem_wait(&delaysem, ms);
  11d17c:	e24b300c 	sub	r3, fp, #12
  11d180:	e51b1010 	ldr	r1, [fp, #-16]
  11d184:	e1a00003 	mov	r0, r3
  11d188:	ebffb564 	bl	10a720 <sys_arch_sem_wait>
      sys_sem_free(&delaysem);
  11d18c:	e24b300c 	sub	r3, fp, #12
  11d190:	e1a00003 	mov	r0, r3
  11d194:	ebffb54b 	bl	10a6c8 <sys_sem_free>
    }
  }
}
  11d198:	e320f000 	nop	{0}
  11d19c:	e24bd004 	sub	sp, fp, #4
  11d1a0:	e8bd8800 	pop	{fp, pc}

0011d1a4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
  11d1a4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11d1a8:	e28db000 	add	fp, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
  11d1ac:	e320f000 	nop	{0}
  11d1b0:	e28bd000 	add	sp, fp, #0
  11d1b4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11d1b8:	e12fff1e 	bx	lr

0011d1bc <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
  11d1bc:	e92d4800 	push	{fp, lr}
  11d1c0:	e28db004 	add	fp, sp, #4
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
  11d1c4:	eb000847 	bl	11f2e8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
  11d1c8:	e30f321c 	movw	r3, #61980	; 0xf21c
  11d1cc:	e3403014 	movt	r3, #20
  11d1d0:	e5d33000 	ldrb	r3, [r3]
  11d1d4:	e2833001 	add	r3, r3, #1
  11d1d8:	e6ef2073 	uxtb	r2, r3
  11d1dc:	e30f321c 	movw	r3, #61980	; 0xf21c
  11d1e0:	e3403014 	movt	r3, #20
  11d1e4:	e5c32000 	strb	r2, [r3]
  11d1e8:	e30f321c 	movw	r3, #61980	; 0xf21c
  11d1ec:	e3403014 	movt	r3, #20
  11d1f0:	e5d33000 	ldrb	r3, [r3]
  11d1f4:	e2033001 	and	r3, r3, #1
  11d1f8:	e3530000 	cmp	r3, #0
  11d1fc:	0a000000 	beq	11d204 <tcp_tmr+0x48>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
  11d200:	eb0005c8 	bl	11e928 <tcp_slowtmr>
  }
}
  11d204:	e320f000 	nop	{0}
  11d208:	e8bd8800 	pop	{fp, pc}

0011d20c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
  11d20c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11d210:	e28db000 	add	fp, sp, #0
  11d214:	e24dd014 	sub	sp, sp, #20
  11d218:	e50b0010 	str	r0, [fp, #-16]
  11d21c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
  11d220:	e51b3010 	ldr	r3, [fp, #-16]
  11d224:	e50b3008 	str	r3, [fp, #-8]
  11d228:	ea00000a 	b	11d258 <tcp_remove_listener+0x4c>
      if (pcb->listener == lpcb) {
  11d22c:	e51b3008 	ldr	r3, [fp, #-8]
  11d230:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  11d234:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11d238:	e1520003 	cmp	r2, r3
  11d23c:	1a000002 	bne	11d24c <tcp_remove_listener+0x40>
         pcb->listener = NULL;
  11d240:	e51b3008 	ldr	r3, [fp, #-8]
  11d244:	e3a02000 	mov	r2, #0
  11d248:	e583207c 	str	r2, [r3, #124]	; 0x7c
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
  11d24c:	e51b3008 	ldr	r3, [fp, #-8]
  11d250:	e593300c 	ldr	r3, [r3, #12]
  11d254:	e50b3008 	str	r3, [fp, #-8]
  11d258:	e51b3008 	ldr	r3, [fp, #-8]
  11d25c:	e3530000 	cmp	r3, #0
  11d260:	1afffff1 	bne	11d22c <tcp_remove_listener+0x20>
      }
   }
}
  11d264:	e320f000 	nop	{0}
  11d268:	e28bd000 	add	sp, fp, #0
  11d26c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11d270:	e12fff1e 	bx	lr

0011d274 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
  11d274:	e92d4800 	push	{fp, lr}
  11d278:	e28db004 	add	fp, sp, #4
  11d27c:	e24dd010 	sub	sp, sp, #16
  11d280:	e50b0010 	str	r0, [fp, #-16]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
  11d284:	e51b3010 	ldr	r3, [fp, #-16]
  11d288:	e3530000 	cmp	r3, #0
  11d28c:	1a000006 	bne	11d2ac <tcp_listen_closed+0x38>
  11d290:	e30800a0 	movw	r0, #32928	; 0x80a0
  11d294:	e3400014 	movt	r0, #20
  11d298:	ebff979d 	bl	103114 <rt_kprintf>
  11d29c:	e3a010c0 	mov	r1, #192	; 0xc0
  11d2a0:	e30800ac 	movw	r0, #32940	; 0x80ac
  11d2a4:	e3400014 	movt	r0, #20
  11d2a8:	ebffb76d 	bl	10b064 <sys_arch_assert>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
  11d2ac:	e51b3010 	ldr	r3, [fp, #-16]
  11d2b0:	e5933014 	ldr	r3, [r3, #20]
  11d2b4:	e3530001 	cmp	r3, #1
  11d2b8:	0a000006 	beq	11d2d8 <tcp_listen_closed+0x64>
  11d2bc:	e30800d8 	movw	r0, #32984	; 0x80d8
  11d2c0:	e3400014 	movt	r0, #20
  11d2c4:	ebff9792 	bl	103114 <rt_kprintf>
  11d2c8:	e3a010c1 	mov	r1, #193	; 0xc1
  11d2cc:	e30800ac 	movw	r0, #32940	; 0x80ac
  11d2d0:	e3400014 	movt	r0, #20
  11d2d4:	ebffb762 	bl	10b064 <sys_arch_assert>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
  11d2d8:	e3a03001 	mov	r3, #1
  11d2dc:	e50b3008 	str	r3, [fp, #-8]
  11d2e0:	ea00000a 	b	11d310 <tcp_listen_closed+0x9c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
  11d2e4:	e3083090 	movw	r3, #32912	; 0x8090
  11d2e8:	e3403014 	movt	r3, #20
  11d2ec:	e51b2008 	ldr	r2, [fp, #-8]
  11d2f0:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  11d2f4:	e5933000 	ldr	r3, [r3]
  11d2f8:	e51b1010 	ldr	r1, [fp, #-16]
  11d2fc:	e1a00003 	mov	r0, r3
  11d300:	ebffffc1 	bl	11d20c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
  11d304:	e51b3008 	ldr	r3, [fp, #-8]
  11d308:	e2833001 	add	r3, r3, #1
  11d30c:	e50b3008 	str	r3, [fp, #-8]
  11d310:	e51b3008 	ldr	r3, [fp, #-8]
  11d314:	e3530003 	cmp	r3, #3
  11d318:	9afffff1 	bls	11d2e4 <tcp_listen_closed+0x70>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
  11d31c:	e320f000 	nop	{0}
  11d320:	e24bd004 	sub	sp, fp, #4
  11d324:	e8bd8800 	pop	{fp, pc}

0011d328 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
  11d328:	e92d4800 	push	{fp, lr}
  11d32c:	e28db004 	add	fp, sp, #4
  11d330:	e24dd018 	sub	sp, sp, #24
  11d334:	e50b0010 	str	r0, [fp, #-16]
  11d338:	e1a03001 	mov	r3, r1
  11d33c:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
  11d340:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  11d344:	e3530000 	cmp	r3, #0
  11d348:	0a000077 	beq	11d52c <tcp_close_shutdown+0x204>
  11d34c:	e51b3010 	ldr	r3, [fp, #-16]
  11d350:	e5933014 	ldr	r3, [r3, #20]
  11d354:	e3530004 	cmp	r3, #4
  11d358:	0a000003 	beq	11d36c <tcp_close_shutdown+0x44>
  11d35c:	e51b3010 	ldr	r3, [fp, #-16]
  11d360:	e5933014 	ldr	r3, [r3, #20]
  11d364:	e3530007 	cmp	r3, #7
  11d368:	1a00006f 	bne	11d52c <tcp_close_shutdown+0x204>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
  11d36c:	e51b3010 	ldr	r3, [fp, #-16]
  11d370:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  11d374:	e3530000 	cmp	r3, #0
  11d378:	1a000004 	bne	11d390 <tcp_close_shutdown+0x68>
  11d37c:	e51b3010 	ldr	r3, [fp, #-16]
  11d380:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  11d384:	e30f2fff 	movw	r2, #65535	; 0xffff
  11d388:	e1530002 	cmp	r3, r2
  11d38c:	0a000066 	beq	11d52c <tcp_close_shutdown+0x204>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
  11d390:	e51b3010 	ldr	r3, [fp, #-16]
  11d394:	e5d3301e 	ldrb	r3, [r3, #30]
  11d398:	e2033010 	and	r3, r3, #16
  11d39c:	e3530000 	cmp	r3, #0
  11d3a0:	1a000006 	bne	11d3c0 <tcp_close_shutdown+0x98>
  11d3a4:	e30800f0 	movw	r0, #33008	; 0x80f0
  11d3a8:	e3400014 	movt	r0, #20
  11d3ac:	ebff9758 	bl	103114 <rt_kprintf>
  11d3b0:	e300110f 	movw	r1, #271	; 0x10f
  11d3b4:	e30800ac 	movw	r0, #32940	; 0x80ac
  11d3b8:	e3400014 	movt	r0, #20
  11d3bc:	ebffb728 	bl	10b064 <sys_arch_assert>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
  11d3c0:	e51b3010 	ldr	r3, [fp, #-16]
  11d3c4:	e5930050 	ldr	r0, [r3, #80]	; 0x50
  11d3c8:	e51b3010 	ldr	r3, [fp, #-16]
  11d3cc:	e5931028 	ldr	r1, [r3, #40]	; 0x28
  11d3d0:	e51bc010 	ldr	ip, [fp, #-16]
  11d3d4:	e51b3010 	ldr	r3, [fp, #-16]
  11d3d8:	e283e004 	add	lr, r3, #4
  11d3dc:	e51b3010 	ldr	r3, [fp, #-16]
  11d3e0:	e1d331ba 	ldrh	r3, [r3, #26]
  11d3e4:	e51b2010 	ldr	r2, [fp, #-16]
  11d3e8:	e1d221bc 	ldrh	r2, [r2, #28]
  11d3ec:	e58d2004 	str	r2, [sp, #4]
  11d3f0:	e58d3000 	str	r3, [sp]
  11d3f4:	e1a0300e 	mov	r3, lr
  11d3f8:	e1a0200c 	mov	r2, ip
  11d3fc:	eb0025b6 	bl	126adc <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
  11d400:	e51b0010 	ldr	r0, [fp, #-16]
  11d404:	eb000adb 	bl	11ff78 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
  11d408:	e3063a30 	movw	r3, #27184	; 0x6a30
  11d40c:	e3403057 	movt	r3, #87	; 0x57
  11d410:	e5933000 	ldr	r3, [r3]
  11d414:	e51b2010 	ldr	r2, [fp, #-16]
  11d418:	e1520003 	cmp	r2, r3
  11d41c:	1a000007 	bne	11d440 <tcp_close_shutdown+0x118>
  11d420:	e3063a30 	movw	r3, #27184	; 0x6a30
  11d424:	e3403057 	movt	r3, #87	; 0x57
  11d428:	e5933000 	ldr	r3, [r3]
  11d42c:	e593200c 	ldr	r2, [r3, #12]
  11d430:	e3063a30 	movw	r3, #27184	; 0x6a30
  11d434:	e3403057 	movt	r3, #87	; 0x57
  11d438:	e5832000 	str	r2, [r3]
  11d43c:	ea000014 	b	11d494 <tcp_close_shutdown+0x16c>
  11d440:	e3063a30 	movw	r3, #27184	; 0x6a30
  11d444:	e3403057 	movt	r3, #87	; 0x57
  11d448:	e5933000 	ldr	r3, [r3]
  11d44c:	e50b3008 	str	r3, [fp, #-8]
  11d450:	ea00000c 	b	11d488 <tcp_close_shutdown+0x160>
  11d454:	e51b3008 	ldr	r3, [fp, #-8]
  11d458:	e593300c 	ldr	r3, [r3, #12]
  11d45c:	e51b2010 	ldr	r2, [fp, #-16]
  11d460:	e1520003 	cmp	r2, r3
  11d464:	1a000004 	bne	11d47c <tcp_close_shutdown+0x154>
  11d468:	e51b3010 	ldr	r3, [fp, #-16]
  11d46c:	e593200c 	ldr	r2, [r3, #12]
  11d470:	e51b3008 	ldr	r3, [fp, #-8]
  11d474:	e583200c 	str	r2, [r3, #12]
  11d478:	ea000005 	b	11d494 <tcp_close_shutdown+0x16c>
  11d47c:	e51b3008 	ldr	r3, [fp, #-8]
  11d480:	e593300c 	ldr	r3, [r3, #12]
  11d484:	e50b3008 	str	r3, [fp, #-8]
  11d488:	e51b3008 	ldr	r3, [fp, #-8]
  11d48c:	e3530000 	cmp	r3, #0
  11d490:	1affffef 	bne	11d454 <tcp_close_shutdown+0x12c>
  11d494:	e51b3010 	ldr	r3, [fp, #-16]
  11d498:	e3a02000 	mov	r2, #0
  11d49c:	e583200c 	str	r2, [r3, #12]
  11d4a0:	e3063a2c 	movw	r3, #27180	; 0x6a2c
  11d4a4:	e3403057 	movt	r3, #87	; 0x57
  11d4a8:	e3a02001 	mov	r2, #1
  11d4ac:	e5c32000 	strb	r2, [r3]
      if (pcb->state == ESTABLISHED) {
  11d4b0:	e51b3010 	ldr	r3, [fp, #-16]
  11d4b4:	e5933014 	ldr	r3, [r3, #20]
  11d4b8:	e3530004 	cmp	r3, #4
  11d4bc:	1a00000d 	bne	11d4f8 <tcp_close_shutdown+0x1d0>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
  11d4c0:	e51b3010 	ldr	r3, [fp, #-16]
  11d4c4:	e3a0200a 	mov	r2, #10
  11d4c8:	e5832014 	str	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
  11d4cc:	e3063a40 	movw	r3, #27200	; 0x6a40
  11d4d0:	e3403057 	movt	r3, #87	; 0x57
  11d4d4:	e5932000 	ldr	r2, [r3]
  11d4d8:	e51b3010 	ldr	r3, [fp, #-16]
  11d4dc:	e583200c 	str	r2, [r3, #12]
  11d4e0:	e3063a40 	movw	r3, #27200	; 0x6a40
  11d4e4:	e3403057 	movt	r3, #87	; 0x57
  11d4e8:	e51b2010 	ldr	r2, [fp, #-16]
  11d4ec:	e5832000 	str	r2, [r3]
  11d4f0:	eb0027cc 	bl	127428 <tcp_timer_needed>
  11d4f4:	ea00000a 	b	11d524 <tcp_close_shutdown+0x1fc>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
  11d4f8:	e3063a44 	movw	r3, #27204	; 0x6a44
  11d4fc:	e3403057 	movt	r3, #87	; 0x57
  11d500:	e5933000 	ldr	r3, [r3]
  11d504:	e51b2010 	ldr	r2, [fp, #-16]
  11d508:	e1520003 	cmp	r2, r3
  11d50c:	1a000001 	bne	11d518 <tcp_close_shutdown+0x1f0>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
  11d510:	eb001ce4 	bl	1248a8 <tcp_trigger_input_pcb_close>
  11d514:	ea000002 	b	11d524 <tcp_close_shutdown+0x1fc>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
  11d518:	e51b1010 	ldr	r1, [fp, #-16]
  11d51c:	e3a00002 	mov	r0, #2
  11d520:	ebffefcf 	bl	119464 <memp_free>
        }
      }
      return ERR_OK;
  11d524:	e3a03000 	mov	r3, #0
  11d528:	ea000058 	b	11d690 <tcp_close_shutdown+0x368>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
  11d52c:	e51b3010 	ldr	r3, [fp, #-16]
  11d530:	e5933014 	ldr	r3, [r3, #20]
  11d534:	e3530001 	cmp	r3, #1
  11d538:	0a000032 	beq	11d608 <tcp_close_shutdown+0x2e0>
  11d53c:	e3530001 	cmp	r3, #1
  11d540:	3a000002 	bcc	11d550 <tcp_close_shutdown+0x228>
  11d544:	e3530002 	cmp	r3, #2
  11d548:	0a000038 	beq	11d630 <tcp_close_shutdown+0x308>
  11d54c:	ea00004a 	b	11d67c <tcp_close_shutdown+0x354>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
  11d550:	e51b3010 	ldr	r3, [fp, #-16]
  11d554:	e1d331ba 	ldrh	r3, [r3, #26]
  11d558:	e3530000 	cmp	r3, #0
  11d55c:	0a000025 	beq	11d5f8 <tcp_close_shutdown+0x2d0>
      TCP_RMV(&tcp_bound_pcbs, pcb);
  11d560:	e3063a3c 	movw	r3, #27196	; 0x6a3c
  11d564:	e3403057 	movt	r3, #87	; 0x57
  11d568:	e5933000 	ldr	r3, [r3]
  11d56c:	e51b2010 	ldr	r2, [fp, #-16]
  11d570:	e1520003 	cmp	r2, r3
  11d574:	1a000007 	bne	11d598 <tcp_close_shutdown+0x270>
  11d578:	e3063a3c 	movw	r3, #27196	; 0x6a3c
  11d57c:	e3403057 	movt	r3, #87	; 0x57
  11d580:	e5933000 	ldr	r3, [r3]
  11d584:	e593200c 	ldr	r2, [r3, #12]
  11d588:	e3063a3c 	movw	r3, #27196	; 0x6a3c
  11d58c:	e3403057 	movt	r3, #87	; 0x57
  11d590:	e5832000 	str	r2, [r3]
  11d594:	ea000014 	b	11d5ec <tcp_close_shutdown+0x2c4>
  11d598:	e3063a3c 	movw	r3, #27196	; 0x6a3c
  11d59c:	e3403057 	movt	r3, #87	; 0x57
  11d5a0:	e5933000 	ldr	r3, [r3]
  11d5a4:	e50b300c 	str	r3, [fp, #-12]
  11d5a8:	ea00000c 	b	11d5e0 <tcp_close_shutdown+0x2b8>
  11d5ac:	e51b300c 	ldr	r3, [fp, #-12]
  11d5b0:	e593300c 	ldr	r3, [r3, #12]
  11d5b4:	e51b2010 	ldr	r2, [fp, #-16]
  11d5b8:	e1520003 	cmp	r2, r3
  11d5bc:	1a000004 	bne	11d5d4 <tcp_close_shutdown+0x2ac>
  11d5c0:	e51b3010 	ldr	r3, [fp, #-16]
  11d5c4:	e593200c 	ldr	r2, [r3, #12]
  11d5c8:	e51b300c 	ldr	r3, [fp, #-12]
  11d5cc:	e583200c 	str	r2, [r3, #12]
  11d5d0:	ea000005 	b	11d5ec <tcp_close_shutdown+0x2c4>
  11d5d4:	e51b300c 	ldr	r3, [fp, #-12]
  11d5d8:	e593300c 	ldr	r3, [r3, #12]
  11d5dc:	e50b300c 	str	r3, [fp, #-12]
  11d5e0:	e51b300c 	ldr	r3, [fp, #-12]
  11d5e4:	e3530000 	cmp	r3, #0
  11d5e8:	1affffef 	bne	11d5ac <tcp_close_shutdown+0x284>
  11d5ec:	e51b3010 	ldr	r3, [fp, #-16]
  11d5f0:	e3a02000 	mov	r2, #0
  11d5f4:	e583200c 	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
  11d5f8:	e51b1010 	ldr	r1, [fp, #-16]
  11d5fc:	e3a00002 	mov	r0, #2
  11d600:	ebffef97 	bl	119464 <memp_free>
    break;
  11d604:	ea000020 	b	11d68c <tcp_close_shutdown+0x364>
  case LISTEN:
    tcp_listen_closed(pcb);
  11d608:	e51b0010 	ldr	r0, [fp, #-16]
  11d60c:	ebffff18 	bl	11d274 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
  11d610:	e51b1010 	ldr	r1, [fp, #-16]
  11d614:	e3060a38 	movw	r0, #27192	; 0x6a38
  11d618:	e3400057 	movt	r0, #87	; 0x57
  11d61c:	eb000a8f 	bl	120060 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
  11d620:	e51b1010 	ldr	r1, [fp, #-16]
  11d624:	e3a00003 	mov	r0, #3
  11d628:	ebffef8d 	bl	119464 <memp_free>
    break;
  11d62c:	ea000016 	b	11d68c <tcp_close_shutdown+0x364>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
  11d630:	e51b1010 	ldr	r1, [fp, #-16]
  11d634:	e3060a30 	movw	r0, #27184	; 0x6a30
  11d638:	e3400057 	movt	r0, #87	; 0x57
  11d63c:	eb000a87 	bl	120060 <tcp_pcb_remove>
  11d640:	e3063a2c 	movw	r3, #27180	; 0x6a2c
  11d644:	e3403057 	movt	r3, #87	; 0x57
  11d648:	e3a02001 	mov	r2, #1
  11d64c:	e5c32000 	strb	r2, [r3]
    memp_free(MEMP_TCP_PCB, pcb);
  11d650:	e51b1010 	ldr	r1, [fp, #-16]
  11d654:	e3a00002 	mov	r0, #2
  11d658:	ebffef81 	bl	119464 <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
  11d65c:	e3063840 	movw	r3, #26688	; 0x6840
  11d660:	e3403057 	movt	r3, #87	; 0x57
  11d664:	e5933174 	ldr	r3, [r3, #372]	; 0x174
  11d668:	e2832001 	add	r2, r3, #1
  11d66c:	e3063840 	movw	r3, #26688	; 0x6840
  11d670:	e3403057 	movt	r3, #87	; 0x57
  11d674:	e5832174 	str	r2, [r3, #372]	; 0x174
    break;
  11d678:	ea000003 	b	11d68c <tcp_close_shutdown+0x364>
  default:
    return tcp_close_shutdown_fin(pcb);
  11d67c:	e51b0010 	ldr	r0, [fp, #-16]
  11d680:	eb000005 	bl	11d69c <tcp_close_shutdown_fin>
  11d684:	e1a03000 	mov	r3, r0
  11d688:	ea000000 	b	11d690 <tcp_close_shutdown+0x368>
  }
  return ERR_OK;
  11d68c:	e3a03000 	mov	r3, #0
}
  11d690:	e1a00003 	mov	r0, r3
  11d694:	e24bd004 	sub	sp, fp, #4
  11d698:	e8bd8800 	pop	{fp, pc}

0011d69c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
  11d69c:	e92d4800 	push	{fp, lr}
  11d6a0:	e28db004 	add	fp, sp, #4
  11d6a4:	e24dd010 	sub	sp, sp, #16
  11d6a8:	e50b0010 	str	r0, [fp, #-16]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
  11d6ac:	e51b3010 	ldr	r3, [fp, #-16]
  11d6b0:	e3530000 	cmp	r3, #0
  11d6b4:	1a000006 	bne	11d6d4 <tcp_close_shutdown_fin+0x38>
  11d6b8:	e30800a0 	movw	r0, #32928	; 0x80a0
  11d6bc:	e3400014 	movt	r0, #20
  11d6c0:	ebff9693 	bl	103114 <rt_kprintf>
  11d6c4:	e300114d 	movw	r1, #333	; 0x14d
  11d6c8:	e30800ac 	movw	r0, #32940	; 0x80ac
  11d6cc:	e3400014 	movt	r0, #20
  11d6d0:	ebffb663 	bl	10b064 <sys_arch_assert>

  switch (pcb->state) {
  11d6d4:	e51b3010 	ldr	r3, [fp, #-16]
  11d6d8:	e5933014 	ldr	r3, [r3, #20]
  11d6dc:	e3530004 	cmp	r3, #4
  11d6e0:	0a000015 	beq	11d73c <tcp_close_shutdown_fin+0xa0>
  11d6e4:	e3530007 	cmp	r3, #7
  11d6e8:	0a000025 	beq	11d784 <tcp_close_shutdown_fin+0xe8>
  11d6ec:	e3530003 	cmp	r3, #3
  11d6f0:	1a000035 	bne	11d7cc <tcp_close_shutdown_fin+0x130>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
  11d6f4:	e51b0010 	ldr	r0, [fp, #-16]
  11d6f8:	eb001ce6 	bl	124a98 <tcp_send_fin>
  11d6fc:	e1a03000 	mov	r3, r0
  11d700:	e54b3005 	strb	r3, [fp, #-5]
    if (err == ERR_OK) {
  11d704:	e15b30d5 	ldrsb	r3, [fp, #-5]
  11d708:	e3530000 	cmp	r3, #0
  11d70c:	1a000030 	bne	11d7d4 <tcp_close_shutdown_fin+0x138>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
  11d710:	e3063840 	movw	r3, #26688	; 0x6840
  11d714:	e3403057 	movt	r3, #87	; 0x57
  11d718:	e5933174 	ldr	r3, [r3, #372]	; 0x174
  11d71c:	e2832001 	add	r2, r3, #1
  11d720:	e3063840 	movw	r3, #26688	; 0x6840
  11d724:	e3403057 	movt	r3, #87	; 0x57
  11d728:	e5832174 	str	r2, [r3, #372]	; 0x174
      pcb->state = FIN_WAIT_1;
  11d72c:	e51b3010 	ldr	r3, [fp, #-16]
  11d730:	e3a02005 	mov	r2, #5
  11d734:	e5832014 	str	r2, [r3, #20]
    }
    break;
  11d738:	ea000025 	b	11d7d4 <tcp_close_shutdown_fin+0x138>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
  11d73c:	e51b0010 	ldr	r0, [fp, #-16]
  11d740:	eb001cd4 	bl	124a98 <tcp_send_fin>
  11d744:	e1a03000 	mov	r3, r0
  11d748:	e54b3005 	strb	r3, [fp, #-5]
    if (err == ERR_OK) {
  11d74c:	e15b30d5 	ldrsb	r3, [fp, #-5]
  11d750:	e3530000 	cmp	r3, #0
  11d754:	1a000020 	bne	11d7dc <tcp_close_shutdown_fin+0x140>
      MIB2_STATS_INC(mib2.tcpestabresets);
  11d758:	e3063840 	movw	r3, #26688	; 0x6840
  11d75c:	e3403057 	movt	r3, #87	; 0x57
  11d760:	e5933178 	ldr	r3, [r3, #376]	; 0x178
  11d764:	e2832001 	add	r2, r3, #1
  11d768:	e3063840 	movw	r3, #26688	; 0x6840
  11d76c:	e3403057 	movt	r3, #87	; 0x57
  11d770:	e5832178 	str	r2, [r3, #376]	; 0x178
      pcb->state = FIN_WAIT_1;
  11d774:	e51b3010 	ldr	r3, [fp, #-16]
  11d778:	e3a02005 	mov	r2, #5
  11d77c:	e5832014 	str	r2, [r3, #20]
    }
    break;
  11d780:	ea000015 	b	11d7dc <tcp_close_shutdown_fin+0x140>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
  11d784:	e51b0010 	ldr	r0, [fp, #-16]
  11d788:	eb001cc2 	bl	124a98 <tcp_send_fin>
  11d78c:	e1a03000 	mov	r3, r0
  11d790:	e54b3005 	strb	r3, [fp, #-5]
    if (err == ERR_OK) {
  11d794:	e15b30d5 	ldrsb	r3, [fp, #-5]
  11d798:	e3530000 	cmp	r3, #0
  11d79c:	1a000010 	bne	11d7e4 <tcp_close_shutdown_fin+0x148>
      MIB2_STATS_INC(mib2.tcpestabresets);
  11d7a0:	e3063840 	movw	r3, #26688	; 0x6840
  11d7a4:	e3403057 	movt	r3, #87	; 0x57
  11d7a8:	e5933178 	ldr	r3, [r3, #376]	; 0x178
  11d7ac:	e2832001 	add	r2, r3, #1
  11d7b0:	e3063840 	movw	r3, #26688	; 0x6840
  11d7b4:	e3403057 	movt	r3, #87	; 0x57
  11d7b8:	e5832178 	str	r2, [r3, #376]	; 0x178
      pcb->state = LAST_ACK;
  11d7bc:	e51b3010 	ldr	r3, [fp, #-16]
  11d7c0:	e3a02009 	mov	r2, #9
  11d7c4:	e5832014 	str	r2, [r3, #20]
    }
    break;
  11d7c8:	ea000005 	b	11d7e4 <tcp_close_shutdown_fin+0x148>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
  11d7cc:	e3a03000 	mov	r3, #0
  11d7d0:	ea000014 	b	11d828 <tcp_close_shutdown_fin+0x18c>
    break;
  11d7d4:	e320f000 	nop	{0}
  11d7d8:	ea000002 	b	11d7e8 <tcp_close_shutdown_fin+0x14c>
    break;
  11d7dc:	e320f000 	nop	{0}
  11d7e0:	ea000000 	b	11d7e8 <tcp_close_shutdown_fin+0x14c>
    break;
  11d7e4:	e320f000 	nop	{0}
    break;
  }

  if (err == ERR_OK) {
  11d7e8:	e15b30d5 	ldrsb	r3, [fp, #-5]
  11d7ec:	e3530000 	cmp	r3, #0
  11d7f0:	1a000002 	bne	11d800 <tcp_close_shutdown_fin+0x164>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
  11d7f4:	e51b0010 	ldr	r0, [fp, #-16]
  11d7f8:	eb002251 	bl	126144 <tcp_output>
  11d7fc:	ea000008 	b	11d824 <tcp_close_shutdown_fin+0x188>
  } else if (err == ERR_MEM) {
  11d800:	e15b30d5 	ldrsb	r3, [fp, #-5]
  11d804:	e3730001 	cmn	r3, #1
  11d808:	1a000005 	bne	11d824 <tcp_close_shutdown_fin+0x188>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
  11d80c:	e51b3010 	ldr	r3, [fp, #-16]
  11d810:	e5d3301e 	ldrb	r3, [r3, #30]
  11d814:	e3833008 	orr	r3, r3, #8
  11d818:	e6ef2073 	uxtb	r2, r3
  11d81c:	e51b3010 	ldr	r3, [fp, #-16]
  11d820:	e5c3201e 	strb	r2, [r3, #30]
  }
  return err;
  11d824:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  11d828:	e1a00003 	mov	r0, r3
  11d82c:	e24bd004 	sub	sp, fp, #4
  11d830:	e8bd8800 	pop	{fp, pc}

0011d834 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
  11d834:	e92d4800 	push	{fp, lr}
  11d838:	e28db004 	add	fp, sp, #4
  11d83c:	e24dd008 	sub	sp, sp, #8
  11d840:	e50b0008 	str	r0, [fp, #-8]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
  11d844:	e51b3008 	ldr	r3, [fp, #-8]
  11d848:	e5933014 	ldr	r3, [r3, #20]
  11d84c:	e3530001 	cmp	r3, #1
  11d850:	0a000005 	beq	11d86c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
  11d854:	e51b3008 	ldr	r3, [fp, #-8]
  11d858:	e5d3301e 	ldrb	r3, [r3, #30]
  11d85c:	e3833010 	orr	r3, r3, #16
  11d860:	e6ef2073 	uxtb	r2, r3
  11d864:	e51b3008 	ldr	r3, [fp, #-8]
  11d868:	e5c3201e 	strb	r2, [r3, #30]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
  11d86c:	e3a01001 	mov	r1, #1
  11d870:	e51b0008 	ldr	r0, [fp, #-8]
  11d874:	ebfffeab 	bl	11d328 <tcp_close_shutdown>
  11d878:	e1a03000 	mov	r3, r0
}
  11d87c:	e1a00003 	mov	r0, r3
  11d880:	e24bd004 	sub	sp, fp, #4
  11d884:	e8bd8800 	pop	{fp, pc}

0011d888 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
  11d888:	e92d4800 	push	{fp, lr}
  11d88c:	e28db004 	add	fp, sp, #4
  11d890:	e24dd010 	sub	sp, sp, #16
  11d894:	e50b0008 	str	r0, [fp, #-8]
  11d898:	e50b100c 	str	r1, [fp, #-12]
  11d89c:	e50b2010 	str	r2, [fp, #-16]
  if (pcb->state == LISTEN) {
  11d8a0:	e51b3008 	ldr	r3, [fp, #-8]
  11d8a4:	e5933014 	ldr	r3, [r3, #20]
  11d8a8:	e3530001 	cmp	r3, #1
  11d8ac:	1a000001 	bne	11d8b8 <tcp_shutdown+0x30>
    return ERR_CONN;
  11d8b0:	e3e0300a 	mvn	r3, #10
  11d8b4:	ea000030 	b	11d97c <tcp_shutdown+0xf4>
  }
  if (shut_rx) {
  11d8b8:	e51b300c 	ldr	r3, [fp, #-12]
  11d8bc:	e3530000 	cmp	r3, #0
  11d8c0:	0a000018 	beq	11d928 <tcp_shutdown+0xa0>
    /* shut down the receive side: set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
  11d8c4:	e51b3008 	ldr	r3, [fp, #-8]
  11d8c8:	e5d3301e 	ldrb	r3, [r3, #30]
  11d8cc:	e3833010 	orr	r3, r3, #16
  11d8d0:	e6ef2073 	uxtb	r2, r3
  11d8d4:	e51b3008 	ldr	r3, [fp, #-8]
  11d8d8:	e5c3201e 	strb	r2, [r3, #30]
    if (shut_tx) {
  11d8dc:	e51b3010 	ldr	r3, [fp, #-16]
  11d8e0:	e3530000 	cmp	r3, #0
  11d8e4:	0a000004 	beq	11d8fc <tcp_shutdown+0x74>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
  11d8e8:	e3a01001 	mov	r1, #1
  11d8ec:	e51b0008 	ldr	r0, [fp, #-8]
  11d8f0:	ebfffe8c 	bl	11d328 <tcp_close_shutdown>
  11d8f4:	e1a03000 	mov	r3, r0
  11d8f8:	ea00001f 	b	11d97c <tcp_shutdown+0xf4>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
  11d8fc:	e51b3008 	ldr	r3, [fp, #-8]
  11d900:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  11d904:	e3530000 	cmp	r3, #0
  11d908:	0a000006 	beq	11d928 <tcp_shutdown+0xa0>
      pbuf_free(pcb->refused_data);
  11d90c:	e51b3008 	ldr	r3, [fp, #-8]
  11d910:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  11d914:	e1a00003 	mov	r0, r3
  11d918:	ebfff5df 	bl	11b09c <pbuf_free>
      pcb->refused_data = NULL;
  11d91c:	e51b3008 	ldr	r3, [fp, #-8]
  11d920:	e3a02000 	mov	r2, #0
  11d924:	e5832078 	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
  11d928:	e51b3010 	ldr	r3, [fp, #-16]
  11d92c:	e3530000 	cmp	r3, #0
  11d930:	0a000010 	beq	11d978 <tcp_shutdown+0xf0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
  11d934:	e51b3008 	ldr	r3, [fp, #-8]
  11d938:	e5933014 	ldr	r3, [r3, #20]
  11d93c:	e3530003 	cmp	r3, #3
  11d940:	3a00000a 	bcc	11d970 <tcp_shutdown+0xe8>
  11d944:	e3530004 	cmp	r3, #4
  11d948:	9a000001 	bls	11d954 <tcp_shutdown+0xcc>
  11d94c:	e3530007 	cmp	r3, #7
  11d950:	1a000006 	bne	11d970 <tcp_shutdown+0xe8>
    case SYN_RCVD:
    case ESTABLISHED:
    case CLOSE_WAIT:
      return tcp_close_shutdown(pcb, (u8_t)shut_rx);
  11d954:	e51b300c 	ldr	r3, [fp, #-12]
  11d958:	e6ef3073 	uxtb	r3, r3
  11d95c:	e1a01003 	mov	r1, r3
  11d960:	e51b0008 	ldr	r0, [fp, #-8]
  11d964:	ebfffe6f 	bl	11d328 <tcp_close_shutdown>
  11d968:	e1a03000 	mov	r3, r0
  11d96c:	ea000002 	b	11d97c <tcp_shutdown+0xf4>
    default:
      /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
        into CLOSED state, where the PCB is deallocated. */
      return ERR_CONN;
  11d970:	e3e0300a 	mvn	r3, #10
  11d974:	ea000000 	b	11d97c <tcp_shutdown+0xf4>
    }
  }
  return ERR_OK;
  11d978:	e3a03000 	mov	r3, #0
}
  11d97c:	e1a00003 	mov	r0, r3
  11d980:	e24bd004 	sub	sp, fp, #4
  11d984:	e8bd8800 	pop	{fp, pc}

0011d988 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
  11d988:	e92d4800 	push	{fp, lr}
  11d98c:	e28db004 	add	fp, sp, #4
  11d990:	e24dd030 	sub	sp, sp, #48	; 0x30
  11d994:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  11d998:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
  11d99c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d9a0:	e5933014 	ldr	r3, [r3, #20]
  11d9a4:	e3530001 	cmp	r3, #1
  11d9a8:	1a000006 	bne	11d9c8 <tcp_abandon+0x40>
  11d9ac:	e308010c 	movw	r0, #33036	; 0x810c
  11d9b0:	e3400014 	movt	r0, #20
  11d9b4:	ebff95d6 	bl	103114 <rt_kprintf>
  11d9b8:	e30011db 	movw	r1, #475	; 0x1db
  11d9bc:	e30800ac 	movw	r0, #32940	; 0x80ac
  11d9c0:	e3400014 	movt	r0, #20
  11d9c4:	ebffb5a6 	bl	10b064 <sys_arch_assert>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
  11d9c8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11d9cc:	e5933014 	ldr	r3, [r3, #20]
  11d9d0:	e353000a 	cmp	r3, #10
  11d9d4:	1a000007 	bne	11d9f8 <tcp_abandon+0x70>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
  11d9d8:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
  11d9dc:	e3060a40 	movw	r0, #27200	; 0x6a40
  11d9e0:	e3400057 	movt	r0, #87	; 0x57
  11d9e4:	eb00099d 	bl	120060 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
  11d9e8:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
  11d9ec:	e3a00002 	mov	r0, #2
  11d9f0:	ebffee9b 	bl	119464 <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
  11d9f4:	ea00007f 	b	11dbf8 <tcp_abandon+0x270>
    int send_rst = 0;
  11d9f8:	e3a03000 	mov	r3, #0
  11d9fc:	e50b3008 	str	r3, [fp, #-8]
    u16_t local_port = 0;
  11da00:	e3a03000 	mov	r3, #0
  11da04:	e14b30ba 	strh	r3, [fp, #-10]
    seqno = pcb->snd_nxt;
  11da08:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11da0c:	e5933050 	ldr	r3, [r3, #80]	; 0x50
  11da10:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    ackno = pcb->rcv_nxt;
  11da14:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11da18:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  11da1c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    errf = pcb->errf;
  11da20:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11da24:	e5933090 	ldr	r3, [r3, #144]	; 0x90
  11da28:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    errf_arg = pcb->callback_arg;
  11da2c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11da30:	e5933010 	ldr	r3, [r3, #16]
  11da34:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
    if (pcb->state == CLOSED) {
  11da38:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11da3c:	e5933014 	ldr	r3, [r3, #20]
  11da40:	e3530000 	cmp	r3, #0
  11da44:	1a00002a 	bne	11daf4 <tcp_abandon+0x16c>
      if (pcb->local_port != 0) {
  11da48:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11da4c:	e1d331ba 	ldrh	r3, [r3, #26]
  11da50:	e3530000 	cmp	r3, #0
  11da54:	0a000033 	beq	11db28 <tcp_abandon+0x1a0>
        TCP_RMV(&tcp_bound_pcbs, pcb);
  11da58:	e3063a3c 	movw	r3, #27196	; 0x6a3c
  11da5c:	e3403057 	movt	r3, #87	; 0x57
  11da60:	e5933000 	ldr	r3, [r3]
  11da64:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  11da68:	e1520003 	cmp	r2, r3
  11da6c:	1a000007 	bne	11da90 <tcp_abandon+0x108>
  11da70:	e3063a3c 	movw	r3, #27196	; 0x6a3c
  11da74:	e3403057 	movt	r3, #87	; 0x57
  11da78:	e5933000 	ldr	r3, [r3]
  11da7c:	e593200c 	ldr	r2, [r3, #12]
  11da80:	e3063a3c 	movw	r3, #27196	; 0x6a3c
  11da84:	e3403057 	movt	r3, #87	; 0x57
  11da88:	e5832000 	str	r2, [r3]
  11da8c:	ea000014 	b	11dae4 <tcp_abandon+0x15c>
  11da90:	e3063a3c 	movw	r3, #27196	; 0x6a3c
  11da94:	e3403057 	movt	r3, #87	; 0x57
  11da98:	e5933000 	ldr	r3, [r3]
  11da9c:	e50b3010 	str	r3, [fp, #-16]
  11daa0:	ea00000c 	b	11dad8 <tcp_abandon+0x150>
  11daa4:	e51b3010 	ldr	r3, [fp, #-16]
  11daa8:	e593300c 	ldr	r3, [r3, #12]
  11daac:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  11dab0:	e1520003 	cmp	r2, r3
  11dab4:	1a000004 	bne	11dacc <tcp_abandon+0x144>
  11dab8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11dabc:	e593200c 	ldr	r2, [r3, #12]
  11dac0:	e51b3010 	ldr	r3, [fp, #-16]
  11dac4:	e583200c 	str	r2, [r3, #12]
  11dac8:	ea000005 	b	11dae4 <tcp_abandon+0x15c>
  11dacc:	e51b3010 	ldr	r3, [fp, #-16]
  11dad0:	e593300c 	ldr	r3, [r3, #12]
  11dad4:	e50b3010 	str	r3, [fp, #-16]
  11dad8:	e51b3010 	ldr	r3, [fp, #-16]
  11dadc:	e3530000 	cmp	r3, #0
  11dae0:	1affffef 	bne	11daa4 <tcp_abandon+0x11c>
  11dae4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11dae8:	e3a02000 	mov	r2, #0
  11daec:	e583200c 	str	r2, [r3, #12]
  11daf0:	ea00000c 	b	11db28 <tcp_abandon+0x1a0>
      send_rst = reset;
  11daf4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11daf8:	e50b3008 	str	r3, [fp, #-8]
      local_port = pcb->local_port;
  11dafc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11db00:	e1d331ba 	ldrh	r3, [r3, #26]
  11db04:	e14b30ba 	strh	r3, [fp, #-10]
      TCP_PCB_REMOVE_ACTIVE(pcb);
  11db08:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
  11db0c:	e3060a30 	movw	r0, #27184	; 0x6a30
  11db10:	e3400057 	movt	r0, #87	; 0x57
  11db14:	eb000951 	bl	120060 <tcp_pcb_remove>
  11db18:	e3063a2c 	movw	r3, #27180	; 0x6a2c
  11db1c:	e3403057 	movt	r3, #87	; 0x57
  11db20:	e3a02001 	mov	r2, #1
  11db24:	e5c32000 	strb	r2, [r3]
    if (pcb->unacked != NULL) {
  11db28:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11db2c:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  11db30:	e3530000 	cmp	r3, #0
  11db34:	0a000003 	beq	11db48 <tcp_abandon+0x1c0>
      tcp_segs_free(pcb->unacked);
  11db38:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11db3c:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  11db40:	e1a00003 	mov	r0, r3
  11db44:	eb0006b4 	bl	11f61c <tcp_segs_free>
    if (pcb->unsent != NULL) {
  11db48:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11db4c:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  11db50:	e3530000 	cmp	r3, #0
  11db54:	0a000003 	beq	11db68 <tcp_abandon+0x1e0>
      tcp_segs_free(pcb->unsent);
  11db58:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11db5c:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  11db60:	e1a00003 	mov	r0, r3
  11db64:	eb0006ac 	bl	11f61c <tcp_segs_free>
    if (pcb->ooseq != NULL) {
  11db68:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11db6c:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  11db70:	e3530000 	cmp	r3, #0
  11db74:	0a000003 	beq	11db88 <tcp_abandon+0x200>
      tcp_segs_free(pcb->ooseq);
  11db78:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11db7c:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  11db80:	e1a00003 	mov	r0, r3
  11db84:	eb0006a4 	bl	11f61c <tcp_segs_free>
    if (send_rst) {
  11db88:	e51b3008 	ldr	r3, [fp, #-8]
  11db8c:	e3530000 	cmp	r3, #0
  11db90:	0a00000b 	beq	11dbc4 <tcp_abandon+0x23c>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
  11db94:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  11db98:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11db9c:	e2831004 	add	r1, r3, #4
  11dba0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11dba4:	e1d331bc 	ldrh	r3, [r3, #28]
  11dba8:	e58d3004 	str	r3, [sp, #4]
  11dbac:	e15b30ba 	ldrh	r3, [fp, #-10]
  11dbb0:	e58d3000 	str	r3, [sp]
  11dbb4:	e1a03001 	mov	r3, r1
  11dbb8:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  11dbbc:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  11dbc0:	eb0023c5 	bl	126adc <tcp_rst>
    last_state = pcb->state;
  11dbc4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11dbc8:	e5933014 	ldr	r3, [r3, #20]
  11dbcc:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    memp_free(MEMP_TCP_PCB, pcb);
  11dbd0:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
  11dbd4:	e3a00002 	mov	r0, #2
  11dbd8:	ebffee21 	bl	119464 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  11dbdc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11dbe0:	e3530000 	cmp	r3, #0
  11dbe4:	0a000003 	beq	11dbf8 <tcp_abandon+0x270>
  11dbe8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11dbec:	e3e0100c 	mvn	r1, #12
  11dbf0:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  11dbf4:	e12fff33 	blx	r3
}
  11dbf8:	e320f000 	nop	{0}
  11dbfc:	e24bd004 	sub	sp, fp, #4
  11dc00:	e8bd8800 	pop	{fp, pc}

0011dc04 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
  11dc04:	e92d4800 	push	{fp, lr}
  11dc08:	e28db004 	add	fp, sp, #4
  11dc0c:	e24dd008 	sub	sp, sp, #8
  11dc10:	e50b0008 	str	r0, [fp, #-8]
  tcp_abandon(pcb, 1);
  11dc14:	e3a01001 	mov	r1, #1
  11dc18:	e51b0008 	ldr	r0, [fp, #-8]
  11dc1c:	ebffff59 	bl	11d988 <tcp_abandon>
}
  11dc20:	e320f000 	nop	{0}
  11dc24:	e24bd004 	sub	sp, fp, #4
  11dc28:	e8bd8800 	pop	{fp, pc}

0011dc2c <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
  11dc2c:	e92d4800 	push	{fp, lr}
  11dc30:	e28db004 	add	fp, sp, #4
  11dc34:	e24dd020 	sub	sp, sp, #32
  11dc38:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  11dc3c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  11dc40:	e1a03002 	mov	r3, r2
  11dc44:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
  11dc48:	e3a03004 	mov	r3, #4
  11dc4c:	e50b300c 	str	r3, [fp, #-12]
  struct tcp_pcb *cpcb;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
  11dc50:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11dc54:	e3530000 	cmp	r3, #0
  11dc58:	1a000002 	bne	11dc68 <tcp_bind+0x3c>
    ipaddr = IP4_ADDR_ANY;
  11dc5c:	e3093adc 	movw	r3, #39644	; 0x9adc
  11dc60:	e3403014 	movt	r3, #20
  11dc64:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
  11dc68:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11dc6c:	e3530000 	cmp	r3, #0
  11dc70:	0a000002 	beq	11dc80 <tcp_bind+0x54>
  11dc74:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11dc78:	e3530000 	cmp	r3, #0
  11dc7c:	1a000001 	bne	11dc88 <tcp_bind+0x5c>
    return ERR_VAL;
  11dc80:	e3e03005 	mvn	r3, #5
  11dc84:	ea000078 	b	11de6c <tcp_bind+0x240>
  }

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
  11dc88:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11dc8c:	e5933014 	ldr	r3, [r3, #20]
  11dc90:	e3530000 	cmp	r3, #0
  11dc94:	0a000008 	beq	11dcbc <tcp_bind+0x90>
  11dc98:	e3080140 	movw	r0, #33088	; 0x8140
  11dc9c:	e3400014 	movt	r0, #20
  11dca0:	ebff951b 	bl	103114 <rt_kprintf>
  11dca4:	e300123f 	movw	r1, #575	; 0x23f
  11dca8:	e30800ac 	movw	r0, #32940	; 0x80ac
  11dcac:	e3400014 	movt	r0, #20
  11dcb0:	ebffb4eb 	bl	10b064 <sys_arch_assert>
  11dcb4:	e3e03005 	mvn	r3, #5
  11dcb8:	ea00006b 	b	11de6c <tcp_bind+0x240>
  /* Unless the REUSEADDR flag is set,
     we have to check the pcbs in TIME-WAIT state, also.
     We do not dump TIME_WAIT pcb's; they can still be matched by incoming
     packets using both local and remote IP addresses and ports to distinguish.
   */
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
  11dcbc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11dcc0:	e5d33008 	ldrb	r3, [r3, #8]
  11dcc4:	e2033004 	and	r3, r3, #4
  11dcc8:	e3530000 	cmp	r3, #0
  11dccc:	0a000001 	beq	11dcd8 <tcp_bind+0xac>
    max_pcb_list = NUM_TCP_PCB_LISTS_NO_TIME_WAIT;
  11dcd0:	e3a03003 	mov	r3, #3
  11dcd4:	e50b300c 	str	r3, [fp, #-12]
  }
#endif /* SO_REUSE */

  if (port == 0) {
  11dcd8:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  11dcdc:	e3530000 	cmp	r3, #0
  11dce0:	1a000007 	bne	11dd04 <tcp_bind+0xd8>
    port = tcp_new_port();
  11dce4:	eb0001ba 	bl	11e3d4 <tcp_new_port>
  11dce8:	e1a03000 	mov	r3, r0
  11dcec:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
    if (port == 0) {
  11dcf0:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  11dcf4:	e3530000 	cmp	r3, #0
  11dcf8:	1a00003d 	bne	11ddf4 <tcp_bind+0x1c8>
      return ERR_BUF;
  11dcfc:	e3e03001 	mvn	r3, #1
  11dd00:	ea000059 	b	11de6c <tcp_bind+0x240>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
  11dd04:	e3a03000 	mov	r3, #0
  11dd08:	e50b3008 	str	r3, [fp, #-8]
  11dd0c:	ea000034 	b	11dde4 <tcp_bind+0x1b8>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
  11dd10:	e3083090 	movw	r3, #32912	; 0x8090
  11dd14:	e3403014 	movt	r3, #20
  11dd18:	e51b2008 	ldr	r2, [fp, #-8]
  11dd1c:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  11dd20:	e5933000 	ldr	r3, [r3]
  11dd24:	e50b3010 	str	r3, [fp, #-16]
  11dd28:	ea000027 	b	11ddcc <tcp_bind+0x1a0>
        if (cpcb->local_port == port) {
  11dd2c:	e51b3010 	ldr	r3, [fp, #-16]
  11dd30:	e1d331ba 	ldrh	r3, [r3, #26]
  11dd34:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
  11dd38:	e1520003 	cmp	r2, r3
  11dd3c:	1a00001f 	bne	11ddc0 <tcp_bind+0x194>
#if SO_REUSE
          /* Omit checking for the same port if both pcbs have REUSEADDR set.
             For SO_REUSEADDR, the duplicate-check for a 5-tuple is done in
             tcp_connect. */
          if (!ip_get_option(pcb, SOF_REUSEADDR) ||
  11dd40:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11dd44:	e5d33008 	ldrb	r3, [r3, #8]
  11dd48:	e2033004 	and	r3, r3, #4
  11dd4c:	e3530000 	cmp	r3, #0
  11dd50:	0a000004 	beq	11dd68 <tcp_bind+0x13c>
              !ip_get_option(cpcb, SOF_REUSEADDR))
  11dd54:	e51b3010 	ldr	r3, [fp, #-16]
  11dd58:	e5d33008 	ldrb	r3, [r3, #8]
  11dd5c:	e2033004 	and	r3, r3, #4
          if (!ip_get_option(pcb, SOF_REUSEADDR) ||
  11dd60:	e3530000 	cmp	r3, #0
  11dd64:	1a000015 	bne	11ddc0 <tcp_bind+0x194>
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
  11dd68:	e51b3010 	ldr	r3, [fp, #-16]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
  11dd6c:	e3530000 	cmp	r3, #0
  11dd70:	0a000010 	beq	11ddb8 <tcp_bind+0x18c>
                (ip_addr_isany(&cpcb->local_ip) ||
  11dd74:	e51b3010 	ldr	r3, [fp, #-16]
  11dd78:	e5933000 	ldr	r3, [r3]
  11dd7c:	e3530000 	cmp	r3, #0
  11dd80:	0a00000c 	beq	11ddb8 <tcp_bind+0x18c>
  11dd84:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11dd88:	e3530000 	cmp	r3, #0
  11dd8c:	0a000009 	beq	11ddb8 <tcp_bind+0x18c>
                ip_addr_isany(ipaddr) ||
  11dd90:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11dd94:	e5933000 	ldr	r3, [r3]
  11dd98:	e3530000 	cmp	r3, #0
  11dd9c:	0a000005 	beq	11ddb8 <tcp_bind+0x18c>
                ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
  11dda0:	e51b3010 	ldr	r3, [fp, #-16]
  11dda4:	e5932000 	ldr	r2, [r3]
  11dda8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11ddac:	e5933000 	ldr	r3, [r3]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
  11ddb0:	e1520003 	cmp	r2, r3
  11ddb4:	1a000001 	bne	11ddc0 <tcp_bind+0x194>
              return ERR_USE;
  11ddb8:	e3e03007 	mvn	r3, #7
  11ddbc:	ea00002a 	b	11de6c <tcp_bind+0x240>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
  11ddc0:	e51b3010 	ldr	r3, [fp, #-16]
  11ddc4:	e593300c 	ldr	r3, [r3, #12]
  11ddc8:	e50b3010 	str	r3, [fp, #-16]
  11ddcc:	e51b3010 	ldr	r3, [fp, #-16]
  11ddd0:	e3530000 	cmp	r3, #0
  11ddd4:	1affffd4 	bne	11dd2c <tcp_bind+0x100>
    for (i = 0; i < max_pcb_list; i++) {
  11ddd8:	e51b3008 	ldr	r3, [fp, #-8]
  11dddc:	e2833001 	add	r3, r3, #1
  11dde0:	e50b3008 	str	r3, [fp, #-8]
  11dde4:	e51b2008 	ldr	r2, [fp, #-8]
  11dde8:	e51b300c 	ldr	r3, [fp, #-12]
  11ddec:	e1520003 	cmp	r2, r3
  11ddf0:	baffffc6 	blt	11dd10 <tcp_bind+0xe4>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)) {
  11ddf4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11ddf8:	e3530000 	cmp	r3, #0
  11ddfc:	0a00000c 	beq	11de34 <tcp_bind+0x208>
  11de00:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11de04:	e5933000 	ldr	r3, [r3]
  11de08:	e3530000 	cmp	r3, #0
  11de0c:	0a000008 	beq	11de34 <tcp_bind+0x208>
    ip_addr_set(&pcb->local_ip, ipaddr);
  11de10:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11de14:	e3530000 	cmp	r3, #0
  11de18:	0a000002 	beq	11de28 <tcp_bind+0x1fc>
  11de1c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  11de20:	e5933000 	ldr	r3, [r3]
  11de24:	ea000000 	b	11de2c <tcp_bind+0x200>
  11de28:	e3a03000 	mov	r3, #0
  11de2c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  11de30:	e5823000 	str	r3, [r2]
  }
  pcb->local_port = port;
  11de34:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11de38:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
  11de3c:	e1c321ba 	strh	r2, [r3, #26]
  TCP_REG(&tcp_bound_pcbs, pcb);
  11de40:	e3063a3c 	movw	r3, #27196	; 0x6a3c
  11de44:	e3403057 	movt	r3, #87	; 0x57
  11de48:	e5932000 	ldr	r2, [r3]
  11de4c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11de50:	e583200c 	str	r2, [r3, #12]
  11de54:	e3063a3c 	movw	r3, #27196	; 0x6a3c
  11de58:	e3403057 	movt	r3, #87	; 0x57
  11de5c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  11de60:	e5832000 	str	r2, [r3]
  11de64:	eb00256f 	bl	127428 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
  11de68:	e3a03000 	mov	r3, #0
}
  11de6c:	e1a00003 	mov	r0, r3
  11de70:	e24bd004 	sub	sp, fp, #4
  11de74:	e8bd8800 	pop	{fp, pc}

0011de78 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
  11de78:	e92d4800 	push	{fp, lr}
  11de7c:	e28db004 	add	fp, sp, #4
  11de80:	e24dd010 	sub	sp, sp, #16
  11de84:	e50b0008 	str	r0, [fp, #-8]
  11de88:	e50b100c 	str	r1, [fp, #-12]
  11de8c:	e1a03002 	mov	r3, r2
  11de90:	e54b300d 	strb	r3, [fp, #-13]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  tcp_abort(pcb);
  11de94:	e51b000c 	ldr	r0, [fp, #-12]
  11de98:	ebffff59 	bl	11dc04 <tcp_abort>

  return ERR_ABRT;
  11de9c:	e3e0300c 	mvn	r3, #12
}
  11dea0:	e1a00003 	mov	r0, r3
  11dea4:	e24bd004 	sub	sp, fp, #4
  11dea8:	e8bd8800 	pop	{fp, pc}

0011deac <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
  11deac:	e92d4800 	push	{fp, lr}
  11deb0:	e28db004 	add	fp, sp, #4
  11deb4:	e24dd008 	sub	sp, sp, #8
  11deb8:	e50b0008 	str	r0, [fp, #-8]
  11debc:	e1a03001 	mov	r3, r1
  11dec0:	e54b3009 	strb	r3, [fp, #-9]
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
  11dec4:	e55b3009 	ldrb	r3, [fp, #-9]
  11dec8:	e3a02000 	mov	r2, #0
  11decc:	e1a01003 	mov	r1, r3
  11ded0:	e51b0008 	ldr	r0, [fp, #-8]
  11ded4:	eb000003 	bl	11dee8 <tcp_listen_with_backlog_and_err>
  11ded8:	e1a03000 	mov	r3, r0
}
  11dedc:	e1a00003 	mov	r0, r3
  11dee0:	e24bd004 	sub	sp, fp, #4
  11dee4:	e8bd8800 	pop	{fp, pc}

0011dee8 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
  11dee8:	e92d4800 	push	{fp, lr}
  11deec:	e28db004 	add	fp, sp, #4
  11def0:	e24dd020 	sub	sp, sp, #32
  11def4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  11def8:	e1a03001 	mov	r3, r1
  11defc:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  11df00:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
  struct tcp_pcb_listen *lpcb = NULL;
  11df04:	e3a03000 	mov	r3, #0
  11df08:	e50b3008 	str	r3, [fp, #-8]
  err_t res;

  LWIP_UNUSED_ARG(backlog);
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
  11df0c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11df10:	e5933014 	ldr	r3, [r3, #20]
  11df14:	e3530000 	cmp	r3, #0
  11df18:	0a000009 	beq	11df44 <tcp_listen_with_backlog_and_err+0x5c>
  11df1c:	e3080168 	movw	r0, #33128	; 0x8168
  11df20:	e3400014 	movt	r0, #20
  11df24:	ebff947a 	bl	103114 <rt_kprintf>
  11df28:	e30012af 	movw	r1, #687	; 0x2af
  11df2c:	e30800ac 	movw	r0, #32940	; 0x80ac
  11df30:	e3400014 	movt	r0, #20
  11df34:	ebffb44a 	bl	10b064 <sys_arch_assert>
  11df38:	e3e0300e 	mvn	r3, #14
  11df3c:	e54b3009 	strb	r3, [fp, #-9]
  11df40:	ea000091 	b	11e18c <tcp_listen_with_backlog_and_err+0x2a4>

  /* already listening? */
  if (pcb->state == LISTEN) {
  11df44:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11df48:	e5933014 	ldr	r3, [r3, #20]
  11df4c:	e3530001 	cmp	r3, #1
  11df50:	1a000004 	bne	11df68 <tcp_listen_with_backlog_and_err+0x80>
    lpcb = (struct tcp_pcb_listen*)pcb;
  11df54:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11df58:	e50b3008 	str	r3, [fp, #-8]
    res = ERR_ALREADY;
  11df5c:	e3e03008 	mvn	r3, #8
  11df60:	e54b3009 	strb	r3, [fp, #-9]
    goto done;
  11df64:	ea000088 	b	11e18c <tcp_listen_with_backlog_and_err+0x2a4>
  }
#if SO_REUSE
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
  11df68:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11df6c:	e5d33008 	ldrb	r3, [r3, #8]
  11df70:	e2033004 	and	r3, r3, #4
  11df74:	e3530000 	cmp	r3, #0
  11df78:	0a00001b 	beq	11dfec <tcp_listen_with_backlog_and_err+0x104>
    /* Since SOF_REUSEADDR allows reusing a local address before the pcb's usage
       is declared (listen-/connection-pcb), we have to make sure now that
       this port is only used once for every local IP. */
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
  11df7c:	e3063a38 	movw	r3, #27192	; 0x6a38
  11df80:	e3403057 	movt	r3, #87	; 0x57
  11df84:	e5933000 	ldr	r3, [r3]
  11df88:	e50b3008 	str	r3, [fp, #-8]
  11df8c:	ea000013 	b	11dfe0 <tcp_listen_with_backlog_and_err+0xf8>
      if ((lpcb->local_port == pcb->local_port) &&
  11df90:	e51b3008 	ldr	r3, [fp, #-8]
  11df94:	e1d321ba 	ldrh	r2, [r3, #26]
  11df98:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11df9c:	e1d331ba 	ldrh	r3, [r3, #26]
  11dfa0:	e1520003 	cmp	r2, r3
  11dfa4:	1a00000a 	bne	11dfd4 <tcp_listen_with_backlog_and_err+0xec>
          ip_addr_cmp(&lpcb->local_ip, &pcb->local_ip)) {
  11dfa8:	e51b3008 	ldr	r3, [fp, #-8]
  11dfac:	e5932000 	ldr	r2, [r3]
  11dfb0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11dfb4:	e5933000 	ldr	r3, [r3]
      if ((lpcb->local_port == pcb->local_port) &&
  11dfb8:	e1520003 	cmp	r2, r3
  11dfbc:	1a000004 	bne	11dfd4 <tcp_listen_with_backlog_and_err+0xec>
        /* this address/port is already used */
        lpcb = NULL;
  11dfc0:	e3a03000 	mov	r3, #0
  11dfc4:	e50b3008 	str	r3, [fp, #-8]
        res = ERR_USE;
  11dfc8:	e3e03007 	mvn	r3, #7
  11dfcc:	e54b3009 	strb	r3, [fp, #-9]
        goto done;
  11dfd0:	ea00006d 	b	11e18c <tcp_listen_with_backlog_and_err+0x2a4>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
  11dfd4:	e51b3008 	ldr	r3, [fp, #-8]
  11dfd8:	e593300c 	ldr	r3, [r3, #12]
  11dfdc:	e50b3008 	str	r3, [fp, #-8]
  11dfe0:	e51b3008 	ldr	r3, [fp, #-8]
  11dfe4:	e3530000 	cmp	r3, #0
  11dfe8:	1affffe8 	bne	11df90 <tcp_listen_with_backlog_and_err+0xa8>
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
  11dfec:	e30022c7 	movw	r2, #711	; 0x2c7
  11dff0:	e30810ac 	movw	r1, #32940	; 0x80ac
  11dff4:	e3401014 	movt	r1, #20
  11dff8:	e3a00003 	mov	r0, #3
  11dffc:	ebffecb0 	bl	1192c4 <memp_malloc_fn>
  11e000:	e50b0008 	str	r0, [fp, #-8]
  if (lpcb == NULL) {
  11e004:	e51b3008 	ldr	r3, [fp, #-8]
  11e008:	e3530000 	cmp	r3, #0
  11e00c:	1a000002 	bne	11e01c <tcp_listen_with_backlog_and_err+0x134>
    res = ERR_MEM;
  11e010:	e3e03000 	mvn	r3, #0
  11e014:	e54b3009 	strb	r3, [fp, #-9]
    goto done;
  11e018:	ea00005b 	b	11e18c <tcp_listen_with_backlog_and_err+0x2a4>
  }
  lpcb->callback_arg = pcb->callback_arg;
  11e01c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11e020:	e5932010 	ldr	r2, [r3, #16]
  11e024:	e51b3008 	ldr	r3, [fp, #-8]
  11e028:	e5832010 	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
  11e02c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11e030:	e1d321ba 	ldrh	r2, [r3, #26]
  11e034:	e51b3008 	ldr	r3, [fp, #-8]
  11e038:	e1c321ba 	strh	r2, [r3, #26]
  lpcb->state = LISTEN;
  11e03c:	e51b3008 	ldr	r3, [fp, #-8]
  11e040:	e3a02001 	mov	r2, #1
  11e044:	e5832014 	str	r2, [r3, #20]
  lpcb->prio = pcb->prio;
  11e048:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11e04c:	e5d32018 	ldrb	r2, [r3, #24]
  11e050:	e51b3008 	ldr	r3, [fp, #-8]
  11e054:	e5c32018 	strb	r2, [r3, #24]
  lpcb->so_options = pcb->so_options;
  11e058:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11e05c:	e5d32008 	ldrb	r2, [r3, #8]
  11e060:	e51b3008 	ldr	r3, [fp, #-8]
  11e064:	e5c32008 	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
  11e068:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11e06c:	e5d3200a 	ldrb	r2, [r3, #10]
  11e070:	e51b3008 	ldr	r3, [fp, #-8]
  11e074:	e5c3200a 	strb	r2, [r3, #10]
  lpcb->tos = pcb->tos;
  11e078:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11e07c:	e5d32009 	ldrb	r2, [r3, #9]
  11e080:	e51b3008 	ldr	r3, [fp, #-8]
  11e084:	e5c32009 	strb	r2, [r3, #9]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
  11e088:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11e08c:	e5932000 	ldr	r2, [r3]
  11e090:	e51b3008 	ldr	r3, [fp, #-8]
  11e094:	e5832000 	str	r2, [r3]
  if (pcb->local_port != 0) {
  11e098:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11e09c:	e1d331ba 	ldrh	r3, [r3, #26]
  11e0a0:	e3530000 	cmp	r3, #0
  11e0a4:	0a000025 	beq	11e140 <tcp_listen_with_backlog_and_err+0x258>
    TCP_RMV(&tcp_bound_pcbs, pcb);
  11e0a8:	e3063a3c 	movw	r3, #27196	; 0x6a3c
  11e0ac:	e3403057 	movt	r3, #87	; 0x57
  11e0b0:	e5933000 	ldr	r3, [r3]
  11e0b4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  11e0b8:	e1520003 	cmp	r2, r3
  11e0bc:	1a000007 	bne	11e0e0 <tcp_listen_with_backlog_and_err+0x1f8>
  11e0c0:	e3063a3c 	movw	r3, #27196	; 0x6a3c
  11e0c4:	e3403057 	movt	r3, #87	; 0x57
  11e0c8:	e5933000 	ldr	r3, [r3]
  11e0cc:	e593200c 	ldr	r2, [r3, #12]
  11e0d0:	e3063a3c 	movw	r3, #27196	; 0x6a3c
  11e0d4:	e3403057 	movt	r3, #87	; 0x57
  11e0d8:	e5832000 	str	r2, [r3]
  11e0dc:	ea000014 	b	11e134 <tcp_listen_with_backlog_and_err+0x24c>
  11e0e0:	e3063a3c 	movw	r3, #27196	; 0x6a3c
  11e0e4:	e3403057 	movt	r3, #87	; 0x57
  11e0e8:	e5933000 	ldr	r3, [r3]
  11e0ec:	e50b3010 	str	r3, [fp, #-16]
  11e0f0:	ea00000c 	b	11e128 <tcp_listen_with_backlog_and_err+0x240>
  11e0f4:	e51b3010 	ldr	r3, [fp, #-16]
  11e0f8:	e593300c 	ldr	r3, [r3, #12]
  11e0fc:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  11e100:	e1520003 	cmp	r2, r3
  11e104:	1a000004 	bne	11e11c <tcp_listen_with_backlog_and_err+0x234>
  11e108:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11e10c:	e593200c 	ldr	r2, [r3, #12]
  11e110:	e51b3010 	ldr	r3, [fp, #-16]
  11e114:	e583200c 	str	r2, [r3, #12]
  11e118:	ea000005 	b	11e134 <tcp_listen_with_backlog_and_err+0x24c>
  11e11c:	e51b3010 	ldr	r3, [fp, #-16]
  11e120:	e593300c 	ldr	r3, [r3, #12]
  11e124:	e50b3010 	str	r3, [fp, #-16]
  11e128:	e51b3010 	ldr	r3, [fp, #-16]
  11e12c:	e3530000 	cmp	r3, #0
  11e130:	1affffef 	bne	11e0f4 <tcp_listen_with_backlog_and_err+0x20c>
  11e134:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11e138:	e3a02000 	mov	r2, #0
  11e13c:	e583200c 	str	r2, [r3, #12]
  }
  memp_free(MEMP_TCP_PCB, pcb);
  11e140:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  11e144:	e3a00002 	mov	r0, #2
  11e148:	ebffecc5 	bl	119464 <memp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
  11e14c:	e51b2008 	ldr	r2, [fp, #-8]
  11e150:	e30d3e78 	movw	r3, #56952	; 0xde78
  11e154:	e3403011 	movt	r3, #17
  11e158:	e582301c 	str	r3, [r2, #28]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
  11e15c:	e3063a38 	movw	r3, #27192	; 0x6a38
  11e160:	e3403057 	movt	r3, #87	; 0x57
  11e164:	e5932000 	ldr	r2, [r3]
  11e168:	e51b3008 	ldr	r3, [fp, #-8]
  11e16c:	e583200c 	str	r2, [r3, #12]
  11e170:	e3063a38 	movw	r3, #27192	; 0x6a38
  11e174:	e3403057 	movt	r3, #87	; 0x57
  11e178:	e51b2008 	ldr	r2, [fp, #-8]
  11e17c:	e5832000 	str	r2, [r3]
  11e180:	eb0024a8 	bl	127428 <tcp_timer_needed>
  res = ERR_OK;
  11e184:	e3a03000 	mov	r3, #0
  11e188:	e54b3009 	strb	r3, [fp, #-9]
done:
  if (err != NULL) {
  11e18c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11e190:	e3530000 	cmp	r3, #0
  11e194:	0a000002 	beq	11e1a4 <tcp_listen_with_backlog_and_err+0x2bc>
    *err = res;
  11e198:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11e19c:	e55b2009 	ldrb	r2, [fp, #-9]
  11e1a0:	e5c32000 	strb	r2, [r3]
  }
  return (struct tcp_pcb *)lpcb;
  11e1a4:	e51b3008 	ldr	r3, [fp, #-8]
}
  11e1a8:	e1a00003 	mov	r0, r3
  11e1ac:	e24bd004 	sub	sp, fp, #4
  11e1b0:	e8bd8800 	pop	{fp, pc}

0011e1b4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
  11e1b4:	e92d4800 	push	{fp, lr}
  11e1b8:	e28db004 	add	fp, sp, #4
  11e1bc:	e24dd010 	sub	sp, sp, #16
  11e1c0:	e50b0010 	str	r0, [fp, #-16]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
  11e1c4:	e51b3010 	ldr	r3, [fp, #-16]
  11e1c8:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  11e1cc:	e51b2010 	ldr	r2, [fp, #-16]
  11e1d0:	e1d222bc 	ldrh	r2, [r2, #44]	; 0x2c
  11e1d4:	e0833002 	add	r3, r3, r2
  11e1d8:	e50b3008 	str	r3, [fp, #-8]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
  11e1dc:	e51b3010 	ldr	r3, [fp, #-16]
  11e1e0:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  11e1e4:	e51b2010 	ldr	r2, [fp, #-16]
  11e1e8:	e1d223b6 	ldrh	r2, [r2, #54]	; 0x36
  11e1ec:	e6bf2072 	sxth	r2, r2
  11e1f0:	e3520000 	cmp	r2, #0
  11e1f4:	ba000002 	blt	11e204 <tcp_update_rcv_ann_wnd+0x50>
  11e1f8:	e51b2010 	ldr	r2, [fp, #-16]
  11e1fc:	e1d223b6 	ldrh	r2, [r2, #54]	; 0x36
  11e200:	ea000000 	b	11e208 <tcp_update_rcv_ann_wnd+0x54>
  11e204:	e3072fff 	movw	r2, #32767	; 0x7fff
  11e208:	e0823003 	add	r3, r2, r3
  11e20c:	e51b2008 	ldr	r2, [fp, #-8]
  11e210:	e0423003 	sub	r3, r2, r3
  11e214:	e3530000 	cmp	r3, #0
  11e218:	ba000008 	blt	11e240 <tcp_update_rcv_ann_wnd+0x8c>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
  11e21c:	e51b3010 	ldr	r3, [fp, #-16]
  11e220:	e1d322bc 	ldrh	r2, [r3, #44]	; 0x2c
  11e224:	e51b3010 	ldr	r3, [fp, #-16]
  11e228:	e1c322be 	strh	r2, [r3, #46]	; 0x2e
    return new_right_edge - pcb->rcv_ann_right_edge;
  11e22c:	e51b3010 	ldr	r3, [fp, #-16]
  11e230:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  11e234:	e51b2008 	ldr	r2, [fp, #-8]
  11e238:	e0423003 	sub	r3, r2, r3
  11e23c:	ea00001f 	b	11e2c0 <tcp_update_rcv_ann_wnd+0x10c>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
  11e240:	e51b3010 	ldr	r3, [fp, #-16]
  11e244:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  11e248:	e51b3010 	ldr	r3, [fp, #-16]
  11e24c:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  11e250:	e0423003 	sub	r3, r2, r3
  11e254:	e3530000 	cmp	r3, #0
  11e258:	da000003 	ble	11e26c <tcp_update_rcv_ann_wnd+0xb8>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
  11e25c:	e51b3010 	ldr	r3, [fp, #-16]
  11e260:	e3a02000 	mov	r2, #0
  11e264:	e1c322be 	strh	r2, [r3, #46]	; 0x2e
  11e268:	ea000013 	b	11e2bc <tcp_update_rcv_ann_wnd+0x108>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
  11e26c:	e51b3010 	ldr	r3, [fp, #-16]
  11e270:	e5932030 	ldr	r2, [r3, #48]	; 0x30
  11e274:	e51b3010 	ldr	r3, [fp, #-16]
  11e278:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  11e27c:	e0423003 	sub	r3, r2, r3
  11e280:	e50b300c 	str	r3, [fp, #-12]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
  11e284:	e51b300c 	ldr	r3, [fp, #-12]
  11e288:	e3530801 	cmp	r3, #65536	; 0x10000
  11e28c:	3a000006 	bcc	11e2ac <tcp_update_rcv_ann_wnd+0xf8>
  11e290:	e308018c 	movw	r0, #33164	; 0x818c
  11e294:	e3400014 	movt	r0, #20
  11e298:	ebff939d 	bl	103114 <rt_kprintf>
  11e29c:	e3001303 	movw	r1, #771	; 0x303
  11e2a0:	e30800ac 	movw	r0, #32940	; 0x80ac
  11e2a4:	e3400014 	movt	r0, #20
  11e2a8:	ebffb36d 	bl	10b064 <sys_arch_assert>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
  11e2ac:	e51b300c 	ldr	r3, [fp, #-12]
  11e2b0:	e6ff2073 	uxth	r2, r3
  11e2b4:	e51b3010 	ldr	r3, [fp, #-16]
  11e2b8:	e1c322be 	strh	r2, [r3, #46]	; 0x2e
    }
    return 0;
  11e2bc:	e3a03000 	mov	r3, #0
  }
}
  11e2c0:	e1a00003 	mov	r0, r3
  11e2c4:	e24bd004 	sub	sp, fp, #4
  11e2c8:	e8bd8800 	pop	{fp, pc}

0011e2cc <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
  11e2cc:	e92d4800 	push	{fp, lr}
  11e2d0:	e28db004 	add	fp, sp, #4
  11e2d4:	e24dd010 	sub	sp, sp, #16
  11e2d8:	e50b0010 	str	r0, [fp, #-16]
  11e2dc:	e1a03001 	mov	r3, r1
  11e2e0:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
  11e2e4:	e51b3010 	ldr	r3, [fp, #-16]
  11e2e8:	e5933014 	ldr	r3, [r3, #20]
  11e2ec:	e3530001 	cmp	r3, #1
  11e2f0:	1a000006 	bne	11e310 <tcp_recved+0x44>
  11e2f4:	e30801a8 	movw	r0, #33192	; 0x81a8
  11e2f8:	e3400014 	movt	r0, #20
  11e2fc:	ebff9384 	bl	103114 <rt_kprintf>
  11e300:	e300131b 	movw	r1, #795	; 0x31b
  11e304:	e30800ac 	movw	r0, #32940	; 0x80ac
  11e308:	e3400014 	movt	r0, #20
  11e30c:	ebffb354 	bl	10b064 <sys_arch_assert>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
  11e310:	e51b3010 	ldr	r3, [fp, #-16]
  11e314:	e1d322bc 	ldrh	r2, [r3, #44]	; 0x2c
  11e318:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  11e31c:	e0823003 	add	r3, r2, r3
  11e320:	e6ff2073 	uxth	r2, r3
  11e324:	e51b3010 	ldr	r3, [fp, #-16]
  11e328:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
  } else if (pcb->rcv_wnd == 0) {
  11e32c:	e51b3010 	ldr	r3, [fp, #-16]
  11e330:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  11e334:	e3530000 	cmp	r3, #0
  11e338:	1a000012 	bne	11e388 <tcp_recved+0xbc>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
  11e33c:	e51b3010 	ldr	r3, [fp, #-16]
  11e340:	e5933014 	ldr	r3, [r3, #20]
  11e344:	e3530007 	cmp	r3, #7
  11e348:	0a000003 	beq	11e35c <tcp_recved+0x90>
  11e34c:	e51b3010 	ldr	r3, [fp, #-16]
  11e350:	e5933014 	ldr	r3, [r3, #20]
  11e354:	e3530009 	cmp	r3, #9
  11e358:	1a000003 	bne	11e36c <tcp_recved+0xa0>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
  11e35c:	e51b3010 	ldr	r3, [fp, #-16]
  11e360:	e3e02000 	mvn	r2, #0
  11e364:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
  11e368:	ea000006 	b	11e388 <tcp_recved+0xbc>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
  11e36c:	e30801d0 	movw	r0, #33232	; 0x81d0
  11e370:	e3400014 	movt	r0, #20
  11e374:	ebff9366 	bl	103114 <rt_kprintf>
  11e378:	e3a01fca 	mov	r1, #808	; 0x328
  11e37c:	e30800ac 	movw	r0, #32940	; 0x80ac
  11e380:	e3400014 	movt	r0, #20
  11e384:	ebffb336 	bl	10b064 <sys_arch_assert>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
  11e388:	e51b0010 	ldr	r0, [fp, #-16]
  11e38c:	ebffff88 	bl	11e1b4 <tcp_update_rcv_ann_wnd>
  11e390:	e1a03000 	mov	r3, r0
  11e394:	e50b3008 	str	r3, [fp, #-8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
  11e398:	e51b3008 	ldr	r3, [fp, #-8]
  11e39c:	e30126cf 	movw	r2, #5839	; 0x16cf
  11e3a0:	e1530002 	cmp	r3, r2
  11e3a4:	da000007 	ble	11e3c8 <tcp_recved+0xfc>
    tcp_ack_now(pcb);
  11e3a8:	e51b3010 	ldr	r3, [fp, #-16]
  11e3ac:	e5d3301e 	ldrb	r3, [r3, #30]
  11e3b0:	e3833002 	orr	r3, r3, #2
  11e3b4:	e6ef2073 	uxtb	r2, r3
  11e3b8:	e51b3010 	ldr	r3, [fp, #-16]
  11e3bc:	e5c3201e 	strb	r2, [r3, #30]
    tcp_output(pcb);
  11e3c0:	e51b0010 	ldr	r0, [fp, #-16]
  11e3c4:	eb001f5e 	bl	126144 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
  11e3c8:	e320f000 	nop	{0}
  11e3cc:	e24bd004 	sub	sp, fp, #4
  11e3d0:	e8bd8800 	pop	{fp, pc}

0011e3d4 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
  11e3d4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11e3d8:	e28db000 	add	fp, sp, #0
  11e3dc:	e24dd00c 	sub	sp, sp, #12
  u8_t i;
  u16_t n = 0;
  11e3e0:	e3a03000 	mov	r3, #0
  11e3e4:	e14b30b8 	strh	r3, [fp, #-8]
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
  11e3e8:	e30e3030 	movw	r3, #57392	; 0xe030
  11e3ec:	e3403014 	movt	r3, #20
  11e3f0:	e1d320b0 	ldrh	r2, [r3]
  11e3f4:	e2823001 	add	r3, r2, #1
  11e3f8:	e6ff1073 	uxth	r1, r3
  11e3fc:	e30e3030 	movw	r3, #57392	; 0xe030
  11e400:	e3403014 	movt	r3, #20
  11e404:	e1c310b0 	strh	r1, [r3]
  11e408:	e30f3fff 	movw	r3, #65535	; 0xffff
  11e40c:	e1520003 	cmp	r2, r3
  11e410:	1a000003 	bne	11e424 <tcp_new_port+0x50>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
  11e414:	e30e3030 	movw	r3, #57392	; 0xe030
  11e418:	e3403014 	movt	r3, #20
  11e41c:	e3a02903 	mov	r2, #49152	; 0xc000
  11e420:	e1c320b0 	strh	r2, [r3]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
  11e424:	e3a03000 	mov	r3, #0
  11e428:	e54b3005 	strb	r3, [fp, #-5]
  11e42c:	ea00001e 	b	11e4ac <tcp_new_port+0xd8>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
  11e430:	e55b2005 	ldrb	r2, [fp, #-5]
  11e434:	e3083090 	movw	r3, #32912	; 0x8090
  11e438:	e3403014 	movt	r3, #20
  11e43c:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  11e440:	e5933000 	ldr	r3, [r3]
  11e444:	e50b300c 	str	r3, [fp, #-12]
  11e448:	ea000011 	b	11e494 <tcp_new_port+0xc0>
      if (pcb->local_port == tcp_port) {
  11e44c:	e51b300c 	ldr	r3, [fp, #-12]
  11e450:	e1d321ba 	ldrh	r2, [r3, #26]
  11e454:	e30e3030 	movw	r3, #57392	; 0xe030
  11e458:	e3403014 	movt	r3, #20
  11e45c:	e1d330b0 	ldrh	r3, [r3]
  11e460:	e1520003 	cmp	r2, r3
  11e464:	1a000007 	bne	11e488 <tcp_new_port+0xb4>
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
  11e468:	e15b30b8 	ldrh	r3, [fp, #-8]
  11e46c:	e2833001 	add	r3, r3, #1
  11e470:	e14b30b8 	strh	r3, [fp, #-8]
  11e474:	e15b30b8 	ldrh	r3, [fp, #-8]
  11e478:	e3530901 	cmp	r3, #16384	; 0x4000
  11e47c:	3affffd9 	bcc	11e3e8 <tcp_new_port+0x14>
          return 0;
  11e480:	e3a03000 	mov	r3, #0
  11e484:	ea00000e 	b	11e4c4 <tcp_new_port+0xf0>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
  11e488:	e51b300c 	ldr	r3, [fp, #-12]
  11e48c:	e593300c 	ldr	r3, [r3, #12]
  11e490:	e50b300c 	str	r3, [fp, #-12]
  11e494:	e51b300c 	ldr	r3, [fp, #-12]
  11e498:	e3530000 	cmp	r3, #0
  11e49c:	1affffea 	bne	11e44c <tcp_new_port+0x78>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
  11e4a0:	e55b3005 	ldrb	r3, [fp, #-5]
  11e4a4:	e2833001 	add	r3, r3, #1
  11e4a8:	e54b3005 	strb	r3, [fp, #-5]
  11e4ac:	e55b3005 	ldrb	r3, [fp, #-5]
  11e4b0:	e3530003 	cmp	r3, #3
  11e4b4:	9affffdd 	bls	11e430 <tcp_new_port+0x5c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
  11e4b8:	e30e3030 	movw	r3, #57392	; 0xe030
  11e4bc:	e3403014 	movt	r3, #20
  11e4c0:	e1d330b0 	ldrh	r3, [r3]
}
  11e4c4:	e1a00003 	mov	r0, r3
  11e4c8:	e28bd000 	add	sp, fp, #0
  11e4cc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11e4d0:	e12fff1e 	bx	lr

0011e4d4 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
      tcp_connected_fn connected)
{
  11e4d4:	e92d4800 	push	{fp, lr}
  11e4d8:	e28db004 	add	fp, sp, #4
  11e4dc:	e24dd030 	sub	sp, sp, #48	; 0x30
  11e4e0:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  11e4e4:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  11e4e8:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
  11e4ec:	e1a03002 	mov	r3, r2
  11e4f0:	e14b32be 	strh	r3, [fp, #-46]	; 0xffffffd2
  err_t ret;
  u32_t iss;
  u16_t old_local_port;

  if ((pcb == NULL) || (ipaddr == NULL)) {
  11e4f4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e4f8:	e3530000 	cmp	r3, #0
  11e4fc:	0a000002 	beq	11e50c <tcp_connect+0x38>
  11e500:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11e504:	e3530000 	cmp	r3, #0
  11e508:	1a000001 	bne	11e514 <tcp_connect+0x40>
    return ERR_VAL;
  11e50c:	e3e03005 	mvn	r3, #5
  11e510:	ea000101 	b	11e91c <tcp_connect+0x448>
  }

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
  11e514:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e518:	e5933014 	ldr	r3, [r3, #20]
  11e51c:	e3530000 	cmp	r3, #0
  11e520:	0a000008 	beq	11e548 <tcp_connect+0x74>
  11e524:	e30801f4 	movw	r0, #33268	; 0x81f4
  11e528:	e3400014 	movt	r0, #20
  11e52c:	ebff92f8 	bl	103114 <rt_kprintf>
  11e530:	e3001373 	movw	r1, #883	; 0x373
  11e534:	e30800ac 	movw	r0, #32940	; 0x80ac
  11e538:	e3400014 	movt	r0, #20
  11e53c:	ebffb2c8 	bl	10b064 <sys_arch_assert>
  11e540:	e3e03009 	mvn	r3, #9
  11e544:	ea0000f4 	b	11e91c <tcp_connect+0x448>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
  11e548:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11e54c:	e3530000 	cmp	r3, #0
  11e550:	0a000002 	beq	11e560 <tcp_connect+0x8c>
  11e554:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11e558:	e5933000 	ldr	r3, [r3]
  11e55c:	ea000000 	b	11e564 <tcp_connect+0x90>
  11e560:	e3a03000 	mov	r3, #0
  11e564:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  11e568:	e5823004 	str	r3, [r2, #4]
  pcb->remote_port = port;
  11e56c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e570:	e15b22be 	ldrh	r2, [fp, #-46]	; 0xffffffd2
  11e574:	e1c321bc 	strh	r2, [r3, #28]

  /* check if we have a route to the remote host */
  if (ip_addr_isany(&pcb->local_ip)) {
  11e578:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e57c:	e3530000 	cmp	r3, #0
  11e580:	0a000003 	beq	11e594 <tcp_connect+0xc0>
  11e584:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e588:	e5933000 	ldr	r3, [r3]
  11e58c:	e3530000 	cmp	r3, #0
  11e590:	1a000018 	bne	11e5f8 <tcp_connect+0x124>
    /* no local IP address set, yet. */
    struct netif *netif;
    const ip_addr_t *local_ip;
    ip_route_get_local_ip(&pcb->local_ip, &pcb->remote_ip, netif, local_ip);
  11e594:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e598:	e2833004 	add	r3, r3, #4
  11e59c:	e1a00003 	mov	r0, r3
  11e5a0:	eb004b74 	bl	131378 <ip4_route>
  11e5a4:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  11e5a8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11e5ac:	e3530000 	cmp	r3, #0
  11e5b0:	0a000002 	beq	11e5c0 <tcp_connect+0xec>
  11e5b4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11e5b8:	e2833004 	add	r3, r3, #4
  11e5bc:	ea000000 	b	11e5c4 <tcp_connect+0xf0>
  11e5c0:	e3a03000 	mov	r3, #0
  11e5c4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    if ((netif == NULL) || (local_ip == NULL)) {
  11e5c8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  11e5cc:	e3530000 	cmp	r3, #0
  11e5d0:	0a000002 	beq	11e5e0 <tcp_connect+0x10c>
  11e5d4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11e5d8:	e3530000 	cmp	r3, #0
  11e5dc:	1a000001 	bne	11e5e8 <tcp_connect+0x114>
      /* Don't even try to send a SYN packet if we have no route
         since that will fail. */
      return ERR_RTE;
  11e5e0:	e3e03003 	mvn	r3, #3
  11e5e4:	ea0000cc 	b	11e91c <tcp_connect+0x448>
    }
    /* Use the address as local address of the pcb. */
    ip_addr_copy(pcb->local_ip, *local_ip);
  11e5e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11e5ec:	e5932000 	ldr	r2, [r3]
  11e5f0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e5f4:	e5832000 	str	r2, [r3]
  }

  old_local_port = pcb->local_port;
  11e5f8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e5fc:	e1d331ba 	ldrh	r3, [r3, #26]
  11e600:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
  if (pcb->local_port == 0) {
  11e604:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e608:	e1d331ba 	ldrh	r3, [r3, #26]
  11e60c:	e3530000 	cmp	r3, #0
  11e610:	1a00000a 	bne	11e640 <tcp_connect+0x16c>
    pcb->local_port = tcp_new_port();
  11e614:	ebffff6e 	bl	11e3d4 <tcp_new_port>
  11e618:	e1a03000 	mov	r3, r0
  11e61c:	e1a02003 	mov	r2, r3
  11e620:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e624:	e1c321ba 	strh	r2, [r3, #26]
    if (pcb->local_port == 0) {
  11e628:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e62c:	e1d331ba 	ldrh	r3, [r3, #26]
  11e630:	e3530000 	cmp	r3, #0
  11e634:	1a000035 	bne	11e710 <tcp_connect+0x23c>
      return ERR_BUF;
  11e638:	e3e03001 	mvn	r3, #1
  11e63c:	ea0000b6 	b	11e91c <tcp_connect+0x448>
    }
  } else {
#if SO_REUSE
    if (ip_get_option(pcb, SOF_REUSEADDR)) {
  11e640:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e644:	e5d33008 	ldrb	r3, [r3, #8]
  11e648:	e2033004 	and	r3, r3, #4
  11e64c:	e3530000 	cmp	r3, #0
  11e650:	0a00002e 	beq	11e710 <tcp_connect+0x23c>
      /* Since SOF_REUSEADDR allows reusing a local address, we have to make sure
         now that the 5-tuple is unique. */
      struct tcp_pcb *cpcb;
      int i;
      /* Don't check listen- and bound-PCBs, check active- and TIME-WAIT PCBs. */
      for (i = 2; i < NUM_TCP_PCB_LISTS; i++) {
  11e654:	e3a03002 	mov	r3, #2
  11e658:	e50b300c 	str	r3, [fp, #-12]
  11e65c:	ea000028 	b	11e704 <tcp_connect+0x230>
        for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
  11e660:	e3083090 	movw	r3, #32912	; 0x8090
  11e664:	e3403014 	movt	r3, #20
  11e668:	e51b200c 	ldr	r2, [fp, #-12]
  11e66c:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  11e670:	e5933000 	ldr	r3, [r3]
  11e674:	e50b3008 	str	r3, [fp, #-8]
  11e678:	ea00001b 	b	11e6ec <tcp_connect+0x218>
          if ((cpcb->local_port == pcb->local_port) &&
  11e67c:	e51b3008 	ldr	r3, [fp, #-8]
  11e680:	e1d321ba 	ldrh	r2, [r3, #26]
  11e684:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e688:	e1d331ba 	ldrh	r3, [r3, #26]
  11e68c:	e1520003 	cmp	r2, r3
  11e690:	1a000012 	bne	11e6e0 <tcp_connect+0x20c>
              (cpcb->remote_port == port) &&
  11e694:	e51b3008 	ldr	r3, [fp, #-8]
  11e698:	e1d331bc 	ldrh	r3, [r3, #28]
          if ((cpcb->local_port == pcb->local_port) &&
  11e69c:	e15b22be 	ldrh	r2, [fp, #-46]	; 0xffffffd2
  11e6a0:	e1520003 	cmp	r2, r3
  11e6a4:	1a00000d 	bne	11e6e0 <tcp_connect+0x20c>
              ip_addr_cmp(&cpcb->local_ip, &pcb->local_ip) &&
  11e6a8:	e51b3008 	ldr	r3, [fp, #-8]
  11e6ac:	e5932000 	ldr	r2, [r3]
  11e6b0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e6b4:	e5933000 	ldr	r3, [r3]
              (cpcb->remote_port == port) &&
  11e6b8:	e1520003 	cmp	r2, r3
  11e6bc:	1a000007 	bne	11e6e0 <tcp_connect+0x20c>
              ip_addr_cmp(&cpcb->remote_ip, ipaddr)) {
  11e6c0:	e51b3008 	ldr	r3, [fp, #-8]
  11e6c4:	e5932004 	ldr	r2, [r3, #4]
  11e6c8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  11e6cc:	e5933000 	ldr	r3, [r3]
              ip_addr_cmp(&cpcb->local_ip, &pcb->local_ip) &&
  11e6d0:	e1520003 	cmp	r2, r3
  11e6d4:	1a000001 	bne	11e6e0 <tcp_connect+0x20c>
            /* linux returns EISCONN here, but ERR_USE should be OK for us */
            return ERR_USE;
  11e6d8:	e3e03007 	mvn	r3, #7
  11e6dc:	ea00008e 	b	11e91c <tcp_connect+0x448>
        for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
  11e6e0:	e51b3008 	ldr	r3, [fp, #-8]
  11e6e4:	e593300c 	ldr	r3, [r3, #12]
  11e6e8:	e50b3008 	str	r3, [fp, #-8]
  11e6ec:	e51b3008 	ldr	r3, [fp, #-8]
  11e6f0:	e3530000 	cmp	r3, #0
  11e6f4:	1affffe0 	bne	11e67c <tcp_connect+0x1a8>
      for (i = 2; i < NUM_TCP_PCB_LISTS; i++) {
  11e6f8:	e51b300c 	ldr	r3, [fp, #-12]
  11e6fc:	e2833001 	add	r3, r3, #1
  11e700:	e50b300c 	str	r3, [fp, #-12]
  11e704:	e51b300c 	ldr	r3, [fp, #-12]
  11e708:	e3530003 	cmp	r3, #3
  11e70c:	daffffd3 	ble	11e660 <tcp_connect+0x18c>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
  11e710:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  11e714:	eb0006bd 	bl	120210 <tcp_next_iss>
  11e718:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  pcb->rcv_nxt = 0;
  11e71c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e720:	e3a02000 	mov	r2, #0
  11e724:	e5832028 	str	r2, [r3, #40]	; 0x28
  pcb->snd_nxt = iss;
  11e728:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e72c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  11e730:	e5832050 	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
  11e734:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11e738:	e2432001 	sub	r2, r3, #1
  11e73c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e740:	e5832048 	str	r2, [r3, #72]	; 0x48
  pcb->snd_wl2 = iss - 1;
  11e744:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11e748:	e2432001 	sub	r2, r3, #1
  11e74c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e750:	e5832058 	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
  11e754:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11e758:	e2432001 	sub	r2, r3, #1
  11e75c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e760:	e583205c 	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
  11e764:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e768:	e3e02000 	mvn	r2, #0
  11e76c:	e1c322be 	strh	r2, [r3, #46]	; 0x2e
  11e770:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e774:	e1d322be 	ldrh	r2, [r3, #46]	; 0x2e
  11e778:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e77c:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
  11e780:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e784:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  11e788:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e78c:	e5832030 	str	r2, [r3, #48]	; 0x30
  pcb->snd_wnd = TCP_WND;
  11e790:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e794:	e3e02000 	mvn	r2, #0
  11e798:	e1c326b0 	strh	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
  11e79c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e7a0:	e3a02f86 	mov	r2, #536	; 0x218
  11e7a4:	e1c323b6 	strh	r2, [r3, #54]	; 0x36
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
  11e7a8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e7ac:	e1d323b6 	ldrh	r2, [r3, #54]	; 0x36
  11e7b0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e7b4:	e2833004 	add	r3, r3, #4
  11e7b8:	e1a01003 	mov	r1, r3
  11e7bc:	e1a00002 	mov	r0, r2
  11e7c0:	eb0006a7 	bl	120264 <tcp_eff_send_mss_impl>
  11e7c4:	e1a03000 	mov	r3, r0
  11e7c8:	e1a02003 	mov	r2, r3
  11e7cc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e7d0:	e1c323b6 	strh	r2, [r3, #54]	; 0x36
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
  11e7d4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e7d8:	e3a02001 	mov	r2, #1
  11e7dc:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
#if LWIP_CALLBACK_API
  pcb->connected = connected;
  11e7e0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e7e4:	e51b2034 	ldr	r2, [fp, #-52]	; 0xffffffcc
  11e7e8:	e5832088 	str	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
  11e7ec:	e3a01002 	mov	r1, #2
  11e7f0:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  11e7f4:	eb001d03 	bl	125c08 <tcp_enqueue_flags>
  11e7f8:	e1a03000 	mov	r3, r0
  11e7fc:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
  if (ret == ERR_OK) {
  11e800:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
  11e804:	e3530000 	cmp	r3, #0
  11e808:	1a000042 	bne	11e918 <tcp_connect+0x444>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
  11e80c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e810:	e3a02002 	mov	r2, #2
  11e814:	e5832014 	str	r2, [r3, #20]
    if (old_local_port != 0) {
  11e818:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  11e81c:	e3530000 	cmp	r3, #0
  11e820:	0a000025 	beq	11e8bc <tcp_connect+0x3e8>
      TCP_RMV(&tcp_bound_pcbs, pcb);
  11e824:	e3063a3c 	movw	r3, #27196	; 0x6a3c
  11e828:	e3403057 	movt	r3, #87	; 0x57
  11e82c:	e5933000 	ldr	r3, [r3]
  11e830:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  11e834:	e1520003 	cmp	r2, r3
  11e838:	1a000007 	bne	11e85c <tcp_connect+0x388>
  11e83c:	e3063a3c 	movw	r3, #27196	; 0x6a3c
  11e840:	e3403057 	movt	r3, #87	; 0x57
  11e844:	e5933000 	ldr	r3, [r3]
  11e848:	e593200c 	ldr	r2, [r3, #12]
  11e84c:	e3063a3c 	movw	r3, #27196	; 0x6a3c
  11e850:	e3403057 	movt	r3, #87	; 0x57
  11e854:	e5832000 	str	r2, [r3]
  11e858:	ea000014 	b	11e8b0 <tcp_connect+0x3dc>
  11e85c:	e3063a3c 	movw	r3, #27196	; 0x6a3c
  11e860:	e3403057 	movt	r3, #87	; 0x57
  11e864:	e5933000 	ldr	r3, [r3]
  11e868:	e50b3010 	str	r3, [fp, #-16]
  11e86c:	ea00000c 	b	11e8a4 <tcp_connect+0x3d0>
  11e870:	e51b3010 	ldr	r3, [fp, #-16]
  11e874:	e593300c 	ldr	r3, [r3, #12]
  11e878:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  11e87c:	e1520003 	cmp	r2, r3
  11e880:	1a000004 	bne	11e898 <tcp_connect+0x3c4>
  11e884:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e888:	e593200c 	ldr	r2, [r3, #12]
  11e88c:	e51b3010 	ldr	r3, [fp, #-16]
  11e890:	e583200c 	str	r2, [r3, #12]
  11e894:	ea000005 	b	11e8b0 <tcp_connect+0x3dc>
  11e898:	e51b3010 	ldr	r3, [fp, #-16]
  11e89c:	e593300c 	ldr	r3, [r3, #12]
  11e8a0:	e50b3010 	str	r3, [fp, #-16]
  11e8a4:	e51b3010 	ldr	r3, [fp, #-16]
  11e8a8:	e3530000 	cmp	r3, #0
  11e8ac:	1affffef 	bne	11e870 <tcp_connect+0x39c>
  11e8b0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e8b4:	e3a02000 	mov	r2, #0
  11e8b8:	e583200c 	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
  11e8bc:	e3063a30 	movw	r3, #27184	; 0x6a30
  11e8c0:	e3403057 	movt	r3, #87	; 0x57
  11e8c4:	e5932000 	ldr	r2, [r3]
  11e8c8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  11e8cc:	e583200c 	str	r2, [r3, #12]
  11e8d0:	e3063a30 	movw	r3, #27184	; 0x6a30
  11e8d4:	e3403057 	movt	r3, #87	; 0x57
  11e8d8:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  11e8dc:	e5832000 	str	r2, [r3]
  11e8e0:	eb0022d0 	bl	127428 <tcp_timer_needed>
  11e8e4:	e3063a2c 	movw	r3, #27180	; 0x6a2c
  11e8e8:	e3403057 	movt	r3, #87	; 0x57
  11e8ec:	e3a02001 	mov	r2, #1
  11e8f0:	e5c32000 	strb	r2, [r3]
    MIB2_STATS_INC(mib2.tcpactiveopens);
  11e8f4:	e3063840 	movw	r3, #26688	; 0x6840
  11e8f8:	e3403057 	movt	r3, #87	; 0x57
  11e8fc:	e593316c 	ldr	r3, [r3, #364]	; 0x16c
  11e900:	e2832001 	add	r2, r3, #1
  11e904:	e3063840 	movw	r3, #26688	; 0x6840
  11e908:	e3403057 	movt	r3, #87	; 0x57
  11e90c:	e583216c 	str	r2, [r3, #364]	; 0x16c

    tcp_output(pcb);
  11e910:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  11e914:	eb001e0a 	bl	126144 <tcp_output>
  }
  return ret;
  11e918:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
}
  11e91c:	e1a00003 	mov	r0, r3
  11e920:	e24bd004 	sub	sp, fp, #4
  11e924:	e8bd8800 	pop	{fp, pc}

0011e928 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
  11e928:	e92d4800 	push	{fp, lr}
  11e92c:	e28db004 	add	fp, sp, #4
  11e930:	e24dd030 	sub	sp, sp, #48	; 0x30
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
  11e934:	e3a03000 	mov	r3, #0
  11e938:	e54b300f 	strb	r3, [fp, #-15]

  ++tcp_ticks;
  11e93c:	e3063a34 	movw	r3, #27188	; 0x6a34
  11e940:	e3403057 	movt	r3, #87	; 0x57
  11e944:	e5933000 	ldr	r3, [r3]
  11e948:	e2832001 	add	r2, r3, #1
  11e94c:	e3063a34 	movw	r3, #27188	; 0x6a34
  11e950:	e3403057 	movt	r3, #87	; 0x57
  11e954:	e5832000 	str	r2, [r3]
  ++tcp_timer_ctr;
  11e958:	e30f321d 	movw	r3, #61981	; 0xf21d
  11e95c:	e3403014 	movt	r3, #20
  11e960:	e5d33000 	ldrb	r3, [r3]
  11e964:	e2833001 	add	r3, r3, #1
  11e968:	e6ef2073 	uxtb	r2, r3
  11e96c:	e30f321d 	movw	r3, #61981	; 0xf21d
  11e970:	e3403014 	movt	r3, #20
  11e974:	e5c32000 	strb	r2, [r3]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
  11e978:	e3a03000 	mov	r3, #0
  11e97c:	e50b300c 	str	r3, [fp, #-12]
  pcb = tcp_active_pcbs;
  11e980:	e3063a30 	movw	r3, #27184	; 0x6a30
  11e984:	e3403057 	movt	r3, #87	; 0x57
  11e988:	e5933000 	ldr	r3, [r3]
  11e98c:	e50b3008 	str	r3, [fp, #-8]
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
  11e990:	ea0001f2 	b	11f160 <tcp_slowtmr+0x838>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
  11e994:	e51b3008 	ldr	r3, [fp, #-8]
  11e998:	e5933014 	ldr	r3, [r3, #20]
  11e99c:	e3530000 	cmp	r3, #0
  11e9a0:	1a000006 	bne	11e9c0 <tcp_slowtmr+0x98>
  11e9a4:	e3080224 	movw	r0, #33316	; 0x8224
  11e9a8:	e3400014 	movt	r0, #20
  11e9ac:	ebff91d8 	bl	103114 <rt_kprintf>
  11e9b0:	e30013eb 	movw	r1, #1003	; 0x3eb
  11e9b4:	e30800ac 	movw	r0, #32940	; 0x80ac
  11e9b8:	e3400014 	movt	r0, #20
  11e9bc:	ebffb1a8 	bl	10b064 <sys_arch_assert>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
  11e9c0:	e51b3008 	ldr	r3, [fp, #-8]
  11e9c4:	e5933014 	ldr	r3, [r3, #20]
  11e9c8:	e3530001 	cmp	r3, #1
  11e9cc:	1a000006 	bne	11e9ec <tcp_slowtmr+0xc4>
  11e9d0:	e3080250 	movw	r0, #33360	; 0x8250
  11e9d4:	e3400014 	movt	r0, #20
  11e9d8:	ebff91cd 	bl	103114 <rt_kprintf>
  11e9dc:	e3a01ffb 	mov	r1, #1004	; 0x3ec
  11e9e0:	e30800ac 	movw	r0, #32940	; 0x80ac
  11e9e4:	e3400014 	movt	r0, #20
  11e9e8:	ebffb19d 	bl	10b064 <sys_arch_assert>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
  11e9ec:	e51b3008 	ldr	r3, [fp, #-8]
  11e9f0:	e5933014 	ldr	r3, [r3, #20]
  11e9f4:	e353000a 	cmp	r3, #10
  11e9f8:	1a000006 	bne	11ea18 <tcp_slowtmr+0xf0>
  11e9fc:	e308027c 	movw	r0, #33404	; 0x827c
  11ea00:	e3400014 	movt	r0, #20
  11ea04:	ebff91c2 	bl	103114 <rt_kprintf>
  11ea08:	e30013ed 	movw	r1, #1005	; 0x3ed
  11ea0c:	e30800ac 	movw	r0, #32940	; 0x80ac
  11ea10:	e3400014 	movt	r0, #20
  11ea14:	ebffb192 	bl	10b064 <sys_arch_assert>
    if (pcb->last_timer == tcp_timer_ctr) {
  11ea18:	e51b3008 	ldr	r3, [fp, #-8]
  11ea1c:	e5d32021 	ldrb	r2, [r3, #33]	; 0x21
  11ea20:	e30f321d 	movw	r3, #61981	; 0xf21d
  11ea24:	e3403014 	movt	r3, #20
  11ea28:	e5d33000 	ldrb	r3, [r3]
  11ea2c:	e1520003 	cmp	r2, r3
  11ea30:	1a000003 	bne	11ea44 <tcp_slowtmr+0x11c>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
  11ea34:	e51b3008 	ldr	r3, [fp, #-8]
  11ea38:	e593300c 	ldr	r3, [r3, #12]
  11ea3c:	e50b3008 	str	r3, [fp, #-8]
      continue;
  11ea40:	ea0001c6 	b	11f160 <tcp_slowtmr+0x838>
    }
    pcb->last_timer = tcp_timer_ctr;
  11ea44:	e30f321d 	movw	r3, #61981	; 0xf21d
  11ea48:	e3403014 	movt	r3, #20
  11ea4c:	e5d32000 	ldrb	r2, [r3]
  11ea50:	e51b3008 	ldr	r3, [fp, #-8]
  11ea54:	e5c32021 	strb	r2, [r3, #33]	; 0x21

    pcb_remove = 0;
  11ea58:	e3a03000 	mov	r3, #0
  11ea5c:	e54b300d 	strb	r3, [fp, #-13]
    pcb_reset = 0;
  11ea60:	e3a03000 	mov	r3, #0
  11ea64:	e54b300e 	strb	r3, [fp, #-14]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
  11ea68:	e51b3008 	ldr	r3, [fp, #-8]
  11ea6c:	e5933014 	ldr	r3, [r3, #20]
  11ea70:	e3530002 	cmp	r3, #2
  11ea74:	1a000007 	bne	11ea98 <tcp_slowtmr+0x170>
  11ea78:	e51b3008 	ldr	r3, [fp, #-8]
  11ea7c:	e5d33046 	ldrb	r3, [r3, #70]	; 0x46
  11ea80:	e3530003 	cmp	r3, #3
  11ea84:	9a000003 	bls	11ea98 <tcp_slowtmr+0x170>
      ++pcb_remove;
  11ea88:	e55b300d 	ldrb	r3, [fp, #-13]
  11ea8c:	e2833001 	add	r3, r3, #1
  11ea90:	e54b300d 	strb	r3, [fp, #-13]
  11ea94:	ea000089 	b	11ecc0 <tcp_slowtmr+0x398>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
  11ea98:	e51b3008 	ldr	r3, [fp, #-8]
  11ea9c:	e5d33046 	ldrb	r3, [r3, #70]	; 0x46
  11eaa0:	e353000b 	cmp	r3, #11
  11eaa4:	9a000003 	bls	11eab8 <tcp_slowtmr+0x190>
      ++pcb_remove;
  11eaa8:	e55b300d 	ldrb	r3, [fp, #-13]
  11eaac:	e2833001 	add	r3, r3, #1
  11eab0:	e54b300d 	strb	r3, [fp, #-13]
  11eab4:	ea000081 	b	11ecc0 <tcp_slowtmr+0x398>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
  11eab8:	e51b3008 	ldr	r3, [fp, #-8]
  11eabc:	e5d330a1 	ldrb	r3, [r3, #161]	; 0xa1
  11eac0:	e3530000 	cmp	r3, #0
  11eac4:	0a000029 	beq	11eb70 <tcp_slowtmr+0x248>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
  11eac8:	e51b3008 	ldr	r3, [fp, #-8]
  11eacc:	e5d330a1 	ldrb	r3, [r3, #161]	; 0xa1
  11ead0:	e2432001 	sub	r2, r3, #1
  11ead4:	e3083088 	movw	r3, #32904	; 0x8088
  11ead8:	e3403014 	movt	r3, #20
  11eadc:	e7d33002 	ldrb	r3, [r3, r2]
  11eae0:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
        if (pcb->persist_cnt < backoff_cnt) {
  11eae4:	e51b3008 	ldr	r3, [fp, #-8]
  11eae8:	e5d330a0 	ldrb	r3, [r3, #160]	; 0xa0
  11eaec:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
  11eaf0:	e1520003 	cmp	r2, r3
  11eaf4:	9a000005 	bls	11eb10 <tcp_slowtmr+0x1e8>
          pcb->persist_cnt++;
  11eaf8:	e51b3008 	ldr	r3, [fp, #-8]
  11eafc:	e5d330a0 	ldrb	r3, [r3, #160]	; 0xa0
  11eb00:	e2833001 	add	r3, r3, #1
  11eb04:	e6ef2073 	uxtb	r2, r3
  11eb08:	e51b3008 	ldr	r3, [fp, #-8]
  11eb0c:	e5c320a0 	strb	r2, [r3, #160]	; 0xa0
        }
        if (pcb->persist_cnt >= backoff_cnt) {
  11eb10:	e51b3008 	ldr	r3, [fp, #-8]
  11eb14:	e5d330a0 	ldrb	r3, [r3, #160]	; 0xa0
  11eb18:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
  11eb1c:	e1520003 	cmp	r2, r3
  11eb20:	8a000066 	bhi	11ecc0 <tcp_slowtmr+0x398>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
  11eb24:	e51b0008 	ldr	r0, [fp, #-8]
  11eb28:	eb002180 	bl	127130 <tcp_zero_window_probe>
  11eb2c:	e1a03000 	mov	r3, r0
  11eb30:	e3530000 	cmp	r3, #0
  11eb34:	1a000061 	bne	11ecc0 <tcp_slowtmr+0x398>
            pcb->persist_cnt = 0;
  11eb38:	e51b3008 	ldr	r3, [fp, #-8]
  11eb3c:	e3a02000 	mov	r2, #0
  11eb40:	e5c320a0 	strb	r2, [r3, #160]	; 0xa0
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
  11eb44:	e51b3008 	ldr	r3, [fp, #-8]
  11eb48:	e5d330a1 	ldrb	r3, [r3, #161]	; 0xa1
  11eb4c:	e3530006 	cmp	r3, #6
  11eb50:	8a00005a 	bhi	11ecc0 <tcp_slowtmr+0x398>
              pcb->persist_backoff++;
  11eb54:	e51b3008 	ldr	r3, [fp, #-8]
  11eb58:	e5d330a1 	ldrb	r3, [r3, #161]	; 0xa1
  11eb5c:	e2833001 	add	r3, r3, #1
  11eb60:	e6ef2073 	uxtb	r2, r3
  11eb64:	e51b3008 	ldr	r3, [fp, #-8]
  11eb68:	e5c320a1 	strb	r2, [r3, #161]	; 0xa1
  11eb6c:	ea000053 	b	11ecc0 <tcp_slowtmr+0x398>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
  11eb70:	e51b3008 	ldr	r3, [fp, #-8]
  11eb74:	e1d333f4 	ldrsh	r3, [r3, #52]	; 0x34
  11eb78:	e3530000 	cmp	r3, #0
  11eb7c:	ba000007 	blt	11eba0 <tcp_slowtmr+0x278>
          ++pcb->rtime;
  11eb80:	e51b3008 	ldr	r3, [fp, #-8]
  11eb84:	e1d333f4 	ldrsh	r3, [r3, #52]	; 0x34
  11eb88:	e6ff3073 	uxth	r3, r3
  11eb8c:	e2833001 	add	r3, r3, #1
  11eb90:	e6ff3073 	uxth	r3, r3
  11eb94:	e6bf2073 	sxth	r2, r3
  11eb98:	e51b3008 	ldr	r3, [fp, #-8]
  11eb9c:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
  11eba0:	e51b3008 	ldr	r3, [fp, #-8]
  11eba4:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  11eba8:	e3530000 	cmp	r3, #0
  11ebac:	0a000043 	beq	11ecc0 <tcp_slowtmr+0x398>
  11ebb0:	e51b3008 	ldr	r3, [fp, #-8]
  11ebb4:	e1d323f4 	ldrsh	r2, [r3, #52]	; 0x34
  11ebb8:	e51b3008 	ldr	r3, [fp, #-8]
  11ebbc:	e1d334f4 	ldrsh	r3, [r3, #68]	; 0x44
  11ebc0:	e1520003 	cmp	r2, r3
  11ebc4:	ba00003d 	blt	11ecc0 <tcp_slowtmr+0x398>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
  11ebc8:	e51b3008 	ldr	r3, [fp, #-8]
  11ebcc:	e5933014 	ldr	r3, [r3, #20]
  11ebd0:	e3530002 	cmp	r3, #2
  11ebd4:	0a000015 	beq	11ec30 <tcp_slowtmr+0x308>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
  11ebd8:	e51b3008 	ldr	r3, [fp, #-8]
  11ebdc:	e5d33046 	ldrb	r3, [r3, #70]	; 0x46
  11ebe0:	e353000c 	cmp	r3, #12
  11ebe4:	31a03003 	movcc	r3, r3
  11ebe8:	23a0300c 	movcs	r3, #12
  11ebec:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
  11ebf0:	e51b3008 	ldr	r3, [fp, #-8]
  11ebf4:	e1d334f0 	ldrsh	r3, [r3, #64]	; 0x40
  11ebf8:	e1a031c3 	asr	r3, r3, #3
  11ebfc:	e6bf3073 	sxth	r3, r3
  11ec00:	e1a02003 	mov	r2, r3
  11ec04:	e51b3008 	ldr	r3, [fp, #-8]
  11ec08:	e1d334f2 	ldrsh	r3, [r3, #66]	; 0x42
  11ec0c:	e0822003 	add	r2, r2, r3
  11ec10:	e55b1015 	ldrb	r1, [fp, #-21]	; 0xffffffeb
  11ec14:	e3083078 	movw	r3, #32888	; 0x8078
  11ec18:	e3403014 	movt	r3, #20
  11ec1c:	e7d33001 	ldrb	r3, [r3, r1]
  11ec20:	e1a03312 	lsl	r3, r2, r3
  11ec24:	e6bf2073 	sxth	r2, r3
  11ec28:	e51b3008 	ldr	r3, [fp, #-8]
  11ec2c:	e1c324b4 	strh	r2, [r3, #68]	; 0x44
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
  11ec30:	e51b3008 	ldr	r3, [fp, #-8]
  11ec34:	e3a02000 	mov	r2, #0
  11ec38:	e1c323b4 	strh	r2, [r3, #52]	; 0x34

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
  11ec3c:	e51b3008 	ldr	r3, [fp, #-8]
  11ec40:	e1d326b0 	ldrh	r2, [r3, #96]	; 0x60
  11ec44:	e51b3008 	ldr	r3, [fp, #-8]
  11ec48:	e1d334bc 	ldrh	r3, [r3, #76]	; 0x4c
  11ec4c:	e1520003 	cmp	r2, r3
  11ec50:	31a03002 	movcc	r3, r2
  11ec54:	21a03003 	movcs	r3, r3
  11ec58:	e14b31b8 	strh	r3, [fp, #-24]	; 0xffffffe8
          pcb->ssthresh = eff_wnd >> 1;
  11ec5c:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
  11ec60:	e1a030a3 	lsr	r3, r3, #1
  11ec64:	e6ff2073 	uxth	r2, r3
  11ec68:	e51b3008 	ldr	r3, [fp, #-8]
  11ec6c:	e1c324be 	strh	r2, [r3, #78]	; 0x4e
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
  11ec70:	e51b3008 	ldr	r3, [fp, #-8]
  11ec74:	e1d324be 	ldrh	r2, [r3, #78]	; 0x4e
  11ec78:	e51b3008 	ldr	r3, [fp, #-8]
  11ec7c:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  11ec80:	e1a03083 	lsl	r3, r3, #1
  11ec84:	e6ff3073 	uxth	r3, r3
  11ec88:	e1520003 	cmp	r2, r3
  11ec8c:	2a000005 	bcs	11eca8 <tcp_slowtmr+0x380>
            pcb->ssthresh = (pcb->mss << 1);
  11ec90:	e51b3008 	ldr	r3, [fp, #-8]
  11ec94:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  11ec98:	e1a03083 	lsl	r3, r3, #1
  11ec9c:	e6ff2073 	uxth	r2, r3
  11eca0:	e51b3008 	ldr	r3, [fp, #-8]
  11eca4:	e1c324be 	strh	r2, [r3, #78]	; 0x4e
          }
          pcb->cwnd = pcb->mss;
  11eca8:	e51b3008 	ldr	r3, [fp, #-8]
  11ecac:	e1d323b6 	ldrh	r2, [r3, #54]	; 0x36
  11ecb0:	e51b3008 	ldr	r3, [fp, #-8]
  11ecb4:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
  11ecb8:	e51b0008 	ldr	r0, [fp, #-8]
  11ecbc:	eb002002 	bl	126ccc <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
  11ecc0:	e51b3008 	ldr	r3, [fp, #-8]
  11ecc4:	e5933014 	ldr	r3, [r3, #20]
  11ecc8:	e3530006 	cmp	r3, #6
  11eccc:	1a00000f 	bne	11ed10 <tcp_slowtmr+0x3e8>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
  11ecd0:	e51b3008 	ldr	r3, [fp, #-8]
  11ecd4:	e5d3301e 	ldrb	r3, [r3, #30]
  11ecd8:	e2033010 	and	r3, r3, #16
  11ecdc:	e3530000 	cmp	r3, #0
  11ece0:	0a00000a 	beq	11ed10 <tcp_slowtmr+0x3e8>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
  11ece4:	e3063a34 	movw	r3, #27188	; 0x6a34
  11ece8:	e3403057 	movt	r3, #87	; 0x57
  11ecec:	e5932000 	ldr	r2, [r3]
  11ecf0:	e51b3008 	ldr	r3, [fp, #-8]
  11ecf4:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11ecf8:	e0423003 	sub	r3, r2, r3
  11ecfc:	e3530028 	cmp	r3, #40	; 0x28
  11ed00:	9a000002 	bls	11ed10 <tcp_slowtmr+0x3e8>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
  11ed04:	e55b300d 	ldrb	r3, [fp, #-13]
  11ed08:	e2833001 	add	r3, r3, #1
  11ed0c:	e54b300d 	strb	r3, [fp, #-13]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
  11ed10:	e51b3008 	ldr	r3, [fp, #-8]
  11ed14:	e5d33008 	ldrb	r3, [r3, #8]
  11ed18:	e2033008 	and	r3, r3, #8
  11ed1c:	e3530000 	cmp	r3, #0
  11ed20:	0a000044 	beq	11ee38 <tcp_slowtmr+0x510>
       ((pcb->state == ESTABLISHED) ||
  11ed24:	e51b3008 	ldr	r3, [fp, #-8]
  11ed28:	e5933014 	ldr	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
  11ed2c:	e3530004 	cmp	r3, #4
  11ed30:	0a000003 	beq	11ed44 <tcp_slowtmr+0x41c>
        (pcb->state == CLOSE_WAIT))) {
  11ed34:	e51b3008 	ldr	r3, [fp, #-8]
  11ed38:	e5933014 	ldr	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
  11ed3c:	e3530007 	cmp	r3, #7
  11ed40:	1a00003c 	bne	11ee38 <tcp_slowtmr+0x510>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
  11ed44:	e3063a34 	movw	r3, #27188	; 0x6a34
  11ed48:	e3403057 	movt	r3, #87	; 0x57
  11ed4c:	e5932000 	ldr	r2, [r3]
  11ed50:	e51b3008 	ldr	r3, [fp, #-8]
  11ed54:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11ed58:	e0421003 	sub	r1, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
  11ed5c:	e51b3008 	ldr	r3, [fp, #-8]
  11ed60:	e5932094 	ldr	r2, [r3, #148]	; 0x94
  11ed64:	e51b3008 	ldr	r3, [fp, #-8]
  11ed68:	e593309c 	ldr	r3, [r3, #156]	; 0x9c
  11ed6c:	e51b0008 	ldr	r0, [fp, #-8]
  11ed70:	e5900098 	ldr	r0, [r0, #152]	; 0x98
  11ed74:	e0030390 	mul	r3, r0, r3
  11ed78:	e0822003 	add	r2, r2, r3
  11ed7c:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  11ed80:	e3413062 	movt	r3, #4194	; 0x1062
  11ed84:	e0832392 	umull	r2, r3, r2, r3
  11ed88:	e1a032a3 	lsr	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
  11ed8c:	e1510003 	cmp	r1, r3
  11ed90:	9a000006 	bls	11edb0 <tcp_slowtmr+0x488>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
  11ed94:	e55b300d 	ldrb	r3, [fp, #-13]
  11ed98:	e2833001 	add	r3, r3, #1
  11ed9c:	e54b300d 	strb	r3, [fp, #-13]
        ++pcb_reset;
  11eda0:	e55b300e 	ldrb	r3, [fp, #-14]
  11eda4:	e2833001 	add	r3, r3, #1
  11eda8:	e54b300e 	strb	r3, [fp, #-14]
  11edac:	ea000021 	b	11ee38 <tcp_slowtmr+0x510>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
  11edb0:	e3063a34 	movw	r3, #27188	; 0x6a34
  11edb4:	e3403057 	movt	r3, #87	; 0x57
  11edb8:	e5932000 	ldr	r2, [r3]
  11edbc:	e51b3008 	ldr	r3, [fp, #-8]
  11edc0:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11edc4:	e0421003 	sub	r1, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
  11edc8:	e51b3008 	ldr	r3, [fp, #-8]
  11edcc:	e5932094 	ldr	r2, [r3, #148]	; 0x94
  11edd0:	e51b3008 	ldr	r3, [fp, #-8]
  11edd4:	e5d330a2 	ldrb	r3, [r3, #162]	; 0xa2
  11edd8:	e1a00003 	mov	r0, r3
  11eddc:	e51b3008 	ldr	r3, [fp, #-8]
  11ede0:	e5933098 	ldr	r3, [r3, #152]	; 0x98
  11ede4:	e0030093 	mul	r3, r3, r0
  11ede8:	e0822003 	add	r2, r2, r3
                / TCP_SLOW_INTERVAL)
  11edec:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  11edf0:	e3413062 	movt	r3, #4194	; 0x1062
  11edf4:	e0832392 	umull	r2, r3, r2, r3
  11edf8:	e1a032a3 	lsr	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
  11edfc:	e1510003 	cmp	r1, r3
  11ee00:	9a00000c 	bls	11ee38 <tcp_slowtmr+0x510>
      {
        err = tcp_keepalive(pcb);
  11ee04:	e51b0008 	ldr	r0, [fp, #-8]
  11ee08:	eb00207a 	bl	126ff8 <tcp_keepalive>
  11ee0c:	e1a03000 	mov	r3, r0
  11ee10:	e54b300f 	strb	r3, [fp, #-15]
        if (err == ERR_OK) {
  11ee14:	e15b30df 	ldrsb	r3, [fp, #-15]
  11ee18:	e3530000 	cmp	r3, #0
  11ee1c:	1a000005 	bne	11ee38 <tcp_slowtmr+0x510>
          pcb->keep_cnt_sent++;
  11ee20:	e51b3008 	ldr	r3, [fp, #-8]
  11ee24:	e5d330a2 	ldrb	r3, [r3, #162]	; 0xa2
  11ee28:	e2833001 	add	r3, r3, #1
  11ee2c:	e6ef2073 	uxtb	r2, r3
  11ee30:	e51b3008 	ldr	r3, [fp, #-8]
  11ee34:	e5c320a2 	strb	r2, [r3, #162]	; 0xa2

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
  11ee38:	e51b3008 	ldr	r3, [fp, #-8]
  11ee3c:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  11ee40:	e3530000 	cmp	r3, #0
  11ee44:	0a000013 	beq	11ee98 <tcp_slowtmr+0x570>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
  11ee48:	e3063a34 	movw	r3, #27188	; 0x6a34
  11ee4c:	e3403057 	movt	r3, #87	; 0x57
  11ee50:	e5932000 	ldr	r2, [r3]
  11ee54:	e51b3008 	ldr	r3, [fp, #-8]
  11ee58:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11ee5c:	e0422003 	sub	r2, r2, r3
  11ee60:	e51b3008 	ldr	r3, [fp, #-8]
  11ee64:	e1d334f4 	ldrsh	r3, [r3, #68]	; 0x44
  11ee68:	e1a01003 	mov	r1, r3
  11ee6c:	e3a03006 	mov	r3, #6
  11ee70:	e0030193 	mul	r3, r3, r1
    if (pcb->ooseq != NULL &&
  11ee74:	e1520003 	cmp	r2, r3
  11ee78:	3a000006 	bcc	11ee98 <tcp_slowtmr+0x570>
      tcp_segs_free(pcb->ooseq);
  11ee7c:	e51b3008 	ldr	r3, [fp, #-8]
  11ee80:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  11ee84:	e1a00003 	mov	r0, r3
  11ee88:	eb0001e3 	bl	11f61c <tcp_segs_free>
      pcb->ooseq = NULL;
  11ee8c:	e51b3008 	ldr	r3, [fp, #-8]
  11ee90:	e3a02000 	mov	r2, #0
  11ee94:	e5832074 	str	r2, [r3, #116]	; 0x74
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
  11ee98:	e51b3008 	ldr	r3, [fp, #-8]
  11ee9c:	e5933014 	ldr	r3, [r3, #20]
  11eea0:	e3530003 	cmp	r3, #3
  11eea4:	1a00000a 	bne	11eed4 <tcp_slowtmr+0x5ac>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
  11eea8:	e3063a34 	movw	r3, #27188	; 0x6a34
  11eeac:	e3403057 	movt	r3, #87	; 0x57
  11eeb0:	e5932000 	ldr	r2, [r3]
  11eeb4:	e51b3008 	ldr	r3, [fp, #-8]
  11eeb8:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11eebc:	e0423003 	sub	r3, r2, r3
  11eec0:	e3530028 	cmp	r3, #40	; 0x28
  11eec4:	9a000002 	bls	11eed4 <tcp_slowtmr+0x5ac>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
  11eec8:	e55b300d 	ldrb	r3, [fp, #-13]
  11eecc:	e2833001 	add	r3, r3, #1
  11eed0:	e54b300d 	strb	r3, [fp, #-13]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
  11eed4:	e51b3008 	ldr	r3, [fp, #-8]
  11eed8:	e5933014 	ldr	r3, [r3, #20]
  11eedc:	e3530009 	cmp	r3, #9
  11eee0:	1a00000a 	bne	11ef10 <tcp_slowtmr+0x5e8>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
  11eee4:	e3063a34 	movw	r3, #27188	; 0x6a34
  11eee8:	e3403057 	movt	r3, #87	; 0x57
  11eeec:	e5932000 	ldr	r2, [r3]
  11eef0:	e51b3008 	ldr	r3, [fp, #-8]
  11eef4:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11eef8:	e0423003 	sub	r3, r2, r3
  11eefc:	e35300f0 	cmp	r3, #240	; 0xf0
  11ef00:	9a000002 	bls	11ef10 <tcp_slowtmr+0x5e8>
        ++pcb_remove;
  11ef04:	e55b300d 	ldrb	r3, [fp, #-13]
  11ef08:	e2833001 	add	r3, r3, #1
  11ef0c:	e54b300d 	strb	r3, [fp, #-13]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
  11ef10:	e55b300d 	ldrb	r3, [fp, #-13]
  11ef14:	e3530000 	cmp	r3, #0
  11ef18:	0a00005d 	beq	11f094 <tcp_slowtmr+0x76c>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
  11ef1c:	e51b3008 	ldr	r3, [fp, #-8]
  11ef20:	e5933090 	ldr	r3, [r3, #144]	; 0x90
  11ef24:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
  11ef28:	e51b0008 	ldr	r0, [fp, #-8]
  11ef2c:	eb000411 	bl	11ff78 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
  11ef30:	e51b300c 	ldr	r3, [fp, #-12]
  11ef34:	e3530000 	cmp	r3, #0
  11ef38:	0a000011 	beq	11ef84 <tcp_slowtmr+0x65c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
  11ef3c:	e3063a30 	movw	r3, #27184	; 0x6a30
  11ef40:	e3403057 	movt	r3, #87	; 0x57
  11ef44:	e5933000 	ldr	r3, [r3]
  11ef48:	e51b2008 	ldr	r2, [fp, #-8]
  11ef4c:	e1520003 	cmp	r2, r3
  11ef50:	1a000006 	bne	11ef70 <tcp_slowtmr+0x648>
  11ef54:	e30802ac 	movw	r0, #33452	; 0x82ac
  11ef58:	e3400014 	movt	r0, #20
  11ef5c:	ebff906c 	bl	103114 <rt_kprintf>
  11ef60:	e3001484 	movw	r1, #1156	; 0x484
  11ef64:	e30800ac 	movw	r0, #32940	; 0x80ac
  11ef68:	e3400014 	movt	r0, #20
  11ef6c:	ebffb03c 	bl	10b064 <sys_arch_assert>
        prev->next = pcb->next;
  11ef70:	e51b3008 	ldr	r3, [fp, #-8]
  11ef74:	e593200c 	ldr	r2, [r3, #12]
  11ef78:	e51b300c 	ldr	r3, [fp, #-12]
  11ef7c:	e583200c 	str	r2, [r3, #12]
  11ef80:	ea000011 	b	11efcc <tcp_slowtmr+0x6a4>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
  11ef84:	e3063a30 	movw	r3, #27184	; 0x6a30
  11ef88:	e3403057 	movt	r3, #87	; 0x57
  11ef8c:	e5933000 	ldr	r3, [r3]
  11ef90:	e51b2008 	ldr	r2, [fp, #-8]
  11ef94:	e1520003 	cmp	r2, r3
  11ef98:	0a000006 	beq	11efb8 <tcp_slowtmr+0x690>
  11ef9c:	e30802d8 	movw	r0, #33496	; 0x82d8
  11efa0:	e3400014 	movt	r0, #20
  11efa4:	ebff905a 	bl	103114 <rt_kprintf>
  11efa8:	e3001488 	movw	r1, #1160	; 0x488
  11efac:	e30800ac 	movw	r0, #32940	; 0x80ac
  11efb0:	e3400014 	movt	r0, #20
  11efb4:	ebffb02a 	bl	10b064 <sys_arch_assert>
        tcp_active_pcbs = pcb->next;
  11efb8:	e51b3008 	ldr	r3, [fp, #-8]
  11efbc:	e593200c 	ldr	r2, [r3, #12]
  11efc0:	e3063a30 	movw	r3, #27184	; 0x6a30
  11efc4:	e3403057 	movt	r3, #87	; 0x57
  11efc8:	e5832000 	str	r2, [r3]
      }

      if (pcb_reset) {
  11efcc:	e55b300e 	ldrb	r3, [fp, #-14]
  11efd0:	e3530000 	cmp	r3, #0
  11efd4:	0a00000f 	beq	11f018 <tcp_slowtmr+0x6f0>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
  11efd8:	e51b3008 	ldr	r3, [fp, #-8]
  11efdc:	e5930050 	ldr	r0, [r3, #80]	; 0x50
  11efe0:	e51b3008 	ldr	r3, [fp, #-8]
  11efe4:	e5931028 	ldr	r1, [r3, #40]	; 0x28
  11efe8:	e51bc008 	ldr	ip, [fp, #-8]
  11efec:	e51b3008 	ldr	r3, [fp, #-8]
  11eff0:	e283e004 	add	lr, r3, #4
  11eff4:	e51b3008 	ldr	r3, [fp, #-8]
  11eff8:	e1d331ba 	ldrh	r3, [r3, #26]
  11effc:	e51b2008 	ldr	r2, [fp, #-8]
  11f000:	e1d221bc 	ldrh	r2, [r2, #28]
  11f004:	e58d2004 	str	r2, [sp, #4]
  11f008:	e58d3000 	str	r3, [sp]
  11f00c:	e1a0300e 	mov	r3, lr
  11f010:	e1a0200c 	mov	r2, ip
  11f014:	eb001eb0 	bl	126adc <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
  11f018:	e51b3008 	ldr	r3, [fp, #-8]
  11f01c:	e5933010 	ldr	r3, [r3, #16]
  11f020:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
      last_state = pcb->state;
  11f024:	e51b3008 	ldr	r3, [fp, #-8]
  11f028:	e5933014 	ldr	r3, [r3, #20]
  11f02c:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
      pcb2 = pcb;
  11f030:	e51b3008 	ldr	r3, [fp, #-8]
  11f034:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
      pcb = pcb->next;
  11f038:	e51b3008 	ldr	r3, [fp, #-8]
  11f03c:	e593300c 	ldr	r3, [r3, #12]
  11f040:	e50b3008 	str	r3, [fp, #-8]
      memp_free(MEMP_TCP_PCB, pcb2);
  11f044:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  11f048:	e3a00002 	mov	r0, #2
  11f04c:	ebffe904 	bl	119464 <memp_free>

      tcp_active_pcbs_changed = 0;
  11f050:	e3063a2c 	movw	r3, #27180	; 0x6a2c
  11f054:	e3403057 	movt	r3, #87	; 0x57
  11f058:	e3a02000 	mov	r2, #0
  11f05c:	e5c32000 	strb	r2, [r3]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
  11f060:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11f064:	e3530000 	cmp	r3, #0
  11f068:	0a000003 	beq	11f07c <tcp_slowtmr+0x754>
  11f06c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  11f070:	e3e0100c 	mvn	r1, #12
  11f074:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  11f078:	e12fff33 	blx	r3
      if (tcp_active_pcbs_changed) {
  11f07c:	e3063a2c 	movw	r3, #27180	; 0x6a2c
  11f080:	e3403057 	movt	r3, #87	; 0x57
  11f084:	e5d33000 	ldrb	r3, [r3]
  11f088:	e3530000 	cmp	r3, #0
  11f08c:	0a000033 	beq	11f160 <tcp_slowtmr+0x838>
        goto tcp_slowtmr_start;
  11f090:	eafffe38 	b	11e978 <tcp_slowtmr+0x50>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
  11f094:	e51b3008 	ldr	r3, [fp, #-8]
  11f098:	e50b300c 	str	r3, [fp, #-12]
      pcb = pcb->next;
  11f09c:	e51b3008 	ldr	r3, [fp, #-8]
  11f0a0:	e593300c 	ldr	r3, [r3, #12]
  11f0a4:	e50b3008 	str	r3, [fp, #-8]

      /* We check if we should poll the connection. */
      ++prev->polltmr;
  11f0a8:	e51b300c 	ldr	r3, [fp, #-12]
  11f0ac:	e5d3301f 	ldrb	r3, [r3, #31]
  11f0b0:	e2833001 	add	r3, r3, #1
  11f0b4:	e6ef2073 	uxtb	r2, r3
  11f0b8:	e51b300c 	ldr	r3, [fp, #-12]
  11f0bc:	e5c3201f 	strb	r2, [r3, #31]
      if (prev->polltmr >= prev->pollinterval) {
  11f0c0:	e51b300c 	ldr	r3, [fp, #-12]
  11f0c4:	e5d3201f 	ldrb	r2, [r3, #31]
  11f0c8:	e51b300c 	ldr	r3, [fp, #-12]
  11f0cc:	e5d33020 	ldrb	r3, [r3, #32]
  11f0d0:	e1520003 	cmp	r2, r3
  11f0d4:	3a000021 	bcc	11f160 <tcp_slowtmr+0x838>
        prev->polltmr = 0;
  11f0d8:	e51b300c 	ldr	r3, [fp, #-12]
  11f0dc:	e3a02000 	mov	r2, #0
  11f0e0:	e5c3201f 	strb	r2, [r3, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
  11f0e4:	e3063a2c 	movw	r3, #27180	; 0x6a2c
  11f0e8:	e3403057 	movt	r3, #87	; 0x57
  11f0ec:	e3a02000 	mov	r2, #0
  11f0f0:	e5c32000 	strb	r2, [r3]
        TCP_EVENT_POLL(prev, err);
  11f0f4:	e51b300c 	ldr	r3, [fp, #-12]
  11f0f8:	e593308c 	ldr	r3, [r3, #140]	; 0x8c
  11f0fc:	e3530000 	cmp	r3, #0
  11f100:	0a000009 	beq	11f12c <tcp_slowtmr+0x804>
  11f104:	e51b300c 	ldr	r3, [fp, #-12]
  11f108:	e593308c 	ldr	r3, [r3, #140]	; 0x8c
  11f10c:	e51b200c 	ldr	r2, [fp, #-12]
  11f110:	e5922010 	ldr	r2, [r2, #16]
  11f114:	e51b100c 	ldr	r1, [fp, #-12]
  11f118:	e1a00002 	mov	r0, r2
  11f11c:	e12fff33 	blx	r3
  11f120:	e1a03000 	mov	r3, r0
  11f124:	e54b300f 	strb	r3, [fp, #-15]
  11f128:	ea000001 	b	11f134 <tcp_slowtmr+0x80c>
  11f12c:	e3a03000 	mov	r3, #0
  11f130:	e54b300f 	strb	r3, [fp, #-15]
        if (tcp_active_pcbs_changed) {
  11f134:	e3063a2c 	movw	r3, #27180	; 0x6a2c
  11f138:	e3403057 	movt	r3, #87	; 0x57
  11f13c:	e5d33000 	ldrb	r3, [r3]
  11f140:	e3530000 	cmp	r3, #0
  11f144:	0a000000 	beq	11f14c <tcp_slowtmr+0x824>
          goto tcp_slowtmr_start;
  11f148:	eafffe0a 	b	11e978 <tcp_slowtmr+0x50>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
  11f14c:	e15b30df 	ldrsb	r3, [fp, #-15]
  11f150:	e3530000 	cmp	r3, #0
  11f154:	1a000001 	bne	11f160 <tcp_slowtmr+0x838>
          tcp_output(prev);
  11f158:	e51b000c 	ldr	r0, [fp, #-12]
  11f15c:	eb001bf8 	bl	126144 <tcp_output>
  while (pcb != NULL) {
  11f160:	e51b3008 	ldr	r3, [fp, #-8]
  11f164:	e3530000 	cmp	r3, #0
  11f168:	1afffe09 	bne	11e994 <tcp_slowtmr+0x6c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
  11f16c:	e3a03000 	mov	r3, #0
  11f170:	e50b300c 	str	r3, [fp, #-12]
  pcb = tcp_tw_pcbs;
  11f174:	e3063a40 	movw	r3, #27200	; 0x6a40
  11f178:	e3403057 	movt	r3, #87	; 0x57
  11f17c:	e5933000 	ldr	r3, [r3]
  11f180:	e50b3008 	str	r3, [fp, #-8]
  while (pcb != NULL) {
  11f184:	ea000051 	b	11f2d0 <tcp_slowtmr+0x9a8>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
  11f188:	e51b3008 	ldr	r3, [fp, #-8]
  11f18c:	e5933014 	ldr	r3, [r3, #20]
  11f190:	e353000a 	cmp	r3, #10
  11f194:	0a000006 	beq	11f1b4 <tcp_slowtmr+0x88c>
  11f198:	e3080304 	movw	r0, #33540	; 0x8304
  11f19c:	e3400014 	movt	r0, #20
  11f1a0:	ebff8fdb 	bl	103114 <rt_kprintf>
  11f1a4:	e30014b8 	movw	r1, #1208	; 0x4b8
  11f1a8:	e30800ac 	movw	r0, #32940	; 0x80ac
  11f1ac:	e3400014 	movt	r0, #20
  11f1b0:	ebffafab 	bl	10b064 <sys_arch_assert>
    pcb_remove = 0;
  11f1b4:	e3a03000 	mov	r3, #0
  11f1b8:	e54b300d 	strb	r3, [fp, #-13]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
  11f1bc:	e3063a34 	movw	r3, #27188	; 0x6a34
  11f1c0:	e3403057 	movt	r3, #87	; 0x57
  11f1c4:	e5932000 	ldr	r2, [r3]
  11f1c8:	e51b3008 	ldr	r3, [fp, #-8]
  11f1cc:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11f1d0:	e0423003 	sub	r3, r2, r3
  11f1d4:	e35300f0 	cmp	r3, #240	; 0xf0
  11f1d8:	9a000002 	bls	11f1e8 <tcp_slowtmr+0x8c0>
      ++pcb_remove;
  11f1dc:	e55b300d 	ldrb	r3, [fp, #-13]
  11f1e0:	e2833001 	add	r3, r3, #1
  11f1e4:	e54b300d 	strb	r3, [fp, #-13]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
  11f1e8:	e55b300d 	ldrb	r3, [fp, #-13]
  11f1ec:	e3530000 	cmp	r3, #0
  11f1f0:	0a000031 	beq	11f2bc <tcp_slowtmr+0x994>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
  11f1f4:	e51b0008 	ldr	r0, [fp, #-8]
  11f1f8:	eb00035e 	bl	11ff78 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
  11f1fc:	e51b300c 	ldr	r3, [fp, #-12]
  11f200:	e3530000 	cmp	r3, #0
  11f204:	0a000011 	beq	11f250 <tcp_slowtmr+0x928>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
  11f208:	e3063a40 	movw	r3, #27200	; 0x6a40
  11f20c:	e3403057 	movt	r3, #87	; 0x57
  11f210:	e5933000 	ldr	r3, [r3]
  11f214:	e51b2008 	ldr	r2, [fp, #-8]
  11f218:	e1520003 	cmp	r2, r3
  11f21c:	1a000006 	bne	11f23c <tcp_slowtmr+0x914>
  11f220:	e3080334 	movw	r0, #33588	; 0x8334
  11f224:	e3400014 	movt	r0, #20
  11f228:	ebff8fb9 	bl	103114 <rt_kprintf>
  11f22c:	e30014c6 	movw	r1, #1222	; 0x4c6
  11f230:	e30800ac 	movw	r0, #32940	; 0x80ac
  11f234:	e3400014 	movt	r0, #20
  11f238:	ebffaf89 	bl	10b064 <sys_arch_assert>
        prev->next = pcb->next;
  11f23c:	e51b3008 	ldr	r3, [fp, #-8]
  11f240:	e593200c 	ldr	r2, [r3, #12]
  11f244:	e51b300c 	ldr	r3, [fp, #-12]
  11f248:	e583200c 	str	r2, [r3, #12]
  11f24c:	ea000011 	b	11f298 <tcp_slowtmr+0x970>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
  11f250:	e3063a40 	movw	r3, #27200	; 0x6a40
  11f254:	e3403057 	movt	r3, #87	; 0x57
  11f258:	e5933000 	ldr	r3, [r3]
  11f25c:	e51b2008 	ldr	r2, [fp, #-8]
  11f260:	e1520003 	cmp	r2, r3
  11f264:	0a000006 	beq	11f284 <tcp_slowtmr+0x95c>
  11f268:	e308035c 	movw	r0, #33628	; 0x835c
  11f26c:	e3400014 	movt	r0, #20
  11f270:	ebff8fa7 	bl	103114 <rt_kprintf>
  11f274:	e30014ca 	movw	r1, #1226	; 0x4ca
  11f278:	e30800ac 	movw	r0, #32940	; 0x80ac
  11f27c:	e3400014 	movt	r0, #20
  11f280:	ebffaf77 	bl	10b064 <sys_arch_assert>
        tcp_tw_pcbs = pcb->next;
  11f284:	e51b3008 	ldr	r3, [fp, #-8]
  11f288:	e593200c 	ldr	r2, [r3, #12]
  11f28c:	e3063a40 	movw	r3, #27200	; 0x6a40
  11f290:	e3403057 	movt	r3, #87	; 0x57
  11f294:	e5832000 	str	r2, [r3]
      }
      pcb2 = pcb;
  11f298:	e51b3008 	ldr	r3, [fp, #-8]
  11f29c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
      pcb = pcb->next;
  11f2a0:	e51b3008 	ldr	r3, [fp, #-8]
  11f2a4:	e593300c 	ldr	r3, [r3, #12]
  11f2a8:	e50b3008 	str	r3, [fp, #-8]
      memp_free(MEMP_TCP_PCB, pcb2);
  11f2ac:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  11f2b0:	e3a00002 	mov	r0, #2
  11f2b4:	ebffe86a 	bl	119464 <memp_free>
  11f2b8:	ea000004 	b	11f2d0 <tcp_slowtmr+0x9a8>
    } else {
      prev = pcb;
  11f2bc:	e51b3008 	ldr	r3, [fp, #-8]
  11f2c0:	e50b300c 	str	r3, [fp, #-12]
      pcb = pcb->next;
  11f2c4:	e51b3008 	ldr	r3, [fp, #-8]
  11f2c8:	e593300c 	ldr	r3, [r3, #12]
  11f2cc:	e50b3008 	str	r3, [fp, #-8]
  while (pcb != NULL) {
  11f2d0:	e51b3008 	ldr	r3, [fp, #-8]
  11f2d4:	e3530000 	cmp	r3, #0
  11f2d8:	1affffaa 	bne	11f188 <tcp_slowtmr+0x860>
    }
  }
}
  11f2dc:	e320f000 	nop	{0}
  11f2e0:	e24bd004 	sub	sp, fp, #4
  11f2e4:	e8bd8800 	pop	{fp, pc}

0011f2e8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
  11f2e8:	e92d4800 	push	{fp, lr}
  11f2ec:	e28db004 	add	fp, sp, #4
  11f2f0:	e24dd008 	sub	sp, sp, #8
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
  11f2f4:	e30f321d 	movw	r3, #61981	; 0xf21d
  11f2f8:	e3403014 	movt	r3, #20
  11f2fc:	e5d33000 	ldrb	r3, [r3]
  11f300:	e2833001 	add	r3, r3, #1
  11f304:	e6ef2073 	uxtb	r2, r3
  11f308:	e30f321d 	movw	r3, #61981	; 0xf21d
  11f30c:	e3403014 	movt	r3, #20
  11f310:	e5c32000 	strb	r2, [r3]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
  11f314:	e3063a30 	movw	r3, #27184	; 0x6a30
  11f318:	e3403057 	movt	r3, #87	; 0x57
  11f31c:	e5933000 	ldr	r3, [r3]
  11f320:	e50b3008 	str	r3, [fp, #-8]

  while (pcb != NULL) {
  11f324:	ea000044 	b	11f43c <tcp_fasttmr+0x154>
    if (pcb->last_timer != tcp_timer_ctr) {
  11f328:	e51b3008 	ldr	r3, [fp, #-8]
  11f32c:	e5d32021 	ldrb	r2, [r3, #33]	; 0x21
  11f330:	e30f321d 	movw	r3, #61981	; 0xf21d
  11f334:	e3403014 	movt	r3, #20
  11f338:	e5d33000 	ldrb	r3, [r3]
  11f33c:	e1520003 	cmp	r2, r3
  11f340:	0a00003a 	beq	11f430 <tcp_fasttmr+0x148>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
  11f344:	e30f321d 	movw	r3, #61981	; 0xf21d
  11f348:	e3403014 	movt	r3, #20
  11f34c:	e5d32000 	ldrb	r2, [r3]
  11f350:	e51b3008 	ldr	r3, [fp, #-8]
  11f354:	e5c32021 	strb	r2, [r3, #33]	; 0x21
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
  11f358:	e51b3008 	ldr	r3, [fp, #-8]
  11f35c:	e5d3301e 	ldrb	r3, [r3, #30]
  11f360:	e2033001 	and	r3, r3, #1
  11f364:	e3530000 	cmp	r3, #0
  11f368:	0a00000d 	beq	11f3a4 <tcp_fasttmr+0xbc>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
  11f36c:	e51b3008 	ldr	r3, [fp, #-8]
  11f370:	e5d3301e 	ldrb	r3, [r3, #30]
  11f374:	e3833002 	orr	r3, r3, #2
  11f378:	e6ef2073 	uxtb	r2, r3
  11f37c:	e51b3008 	ldr	r3, [fp, #-8]
  11f380:	e5c3201e 	strb	r2, [r3, #30]
        tcp_output(pcb);
  11f384:	e51b0008 	ldr	r0, [fp, #-8]
  11f388:	eb001b6d 	bl	126144 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
  11f38c:	e51b3008 	ldr	r3, [fp, #-8]
  11f390:	e5d3301e 	ldrb	r3, [r3, #30]
  11f394:	e3c33003 	bic	r3, r3, #3
  11f398:	e6ef2073 	uxtb	r2, r3
  11f39c:	e51b3008 	ldr	r3, [fp, #-8]
  11f3a0:	e5c3201e 	strb	r2, [r3, #30]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
  11f3a4:	e51b3008 	ldr	r3, [fp, #-8]
  11f3a8:	e5d3301e 	ldrb	r3, [r3, #30]
  11f3ac:	e2033008 	and	r3, r3, #8
  11f3b0:	e3530000 	cmp	r3, #0
  11f3b4:	0a000007 	beq	11f3d8 <tcp_fasttmr+0xf0>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
  11f3b8:	e51b3008 	ldr	r3, [fp, #-8]
  11f3bc:	e5d3301e 	ldrb	r3, [r3, #30]
  11f3c0:	e3c33008 	bic	r3, r3, #8
  11f3c4:	e6ef2073 	uxtb	r2, r3
  11f3c8:	e51b3008 	ldr	r3, [fp, #-8]
  11f3cc:	e5c3201e 	strb	r2, [r3, #30]
        tcp_close_shutdown_fin(pcb);
  11f3d0:	e51b0008 	ldr	r0, [fp, #-8]
  11f3d4:	ebfff8b0 	bl	11d69c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
  11f3d8:	e51b3008 	ldr	r3, [fp, #-8]
  11f3dc:	e593300c 	ldr	r3, [r3, #12]
  11f3e0:	e50b300c 	str	r3, [fp, #-12]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
  11f3e4:	e51b3008 	ldr	r3, [fp, #-8]
  11f3e8:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  11f3ec:	e3530000 	cmp	r3, #0
  11f3f0:	0a00000b 	beq	11f424 <tcp_fasttmr+0x13c>
        tcp_active_pcbs_changed = 0;
  11f3f4:	e3063a2c 	movw	r3, #27180	; 0x6a2c
  11f3f8:	e3403057 	movt	r3, #87	; 0x57
  11f3fc:	e3a02000 	mov	r2, #0
  11f400:	e5c32000 	strb	r2, [r3]
        tcp_process_refused_data(pcb);
  11f404:	e51b0008 	ldr	r0, [fp, #-8]
  11f408:	eb000029 	bl	11f4b4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
  11f40c:	e3063a2c 	movw	r3, #27180	; 0x6a2c
  11f410:	e3403057 	movt	r3, #87	; 0x57
  11f414:	e5d33000 	ldrb	r3, [r3]
  11f418:	e3530000 	cmp	r3, #0
  11f41c:	0a000000 	beq	11f424 <tcp_fasttmr+0x13c>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
  11f420:	eaffffbb 	b	11f314 <tcp_fasttmr+0x2c>
        }
      }
      pcb = next;
  11f424:	e51b300c 	ldr	r3, [fp, #-12]
  11f428:	e50b3008 	str	r3, [fp, #-8]
  11f42c:	ea000002 	b	11f43c <tcp_fasttmr+0x154>
    } else {
      pcb = pcb->next;
  11f430:	e51b3008 	ldr	r3, [fp, #-8]
  11f434:	e593300c 	ldr	r3, [r3, #12]
  11f438:	e50b3008 	str	r3, [fp, #-8]
  while (pcb != NULL) {
  11f43c:	e51b3008 	ldr	r3, [fp, #-8]
  11f440:	e3530000 	cmp	r3, #0
  11f444:	1affffb7 	bne	11f328 <tcp_fasttmr+0x40>
    }
  }
}
  11f448:	e320f000 	nop	{0}
  11f44c:	e24bd004 	sub	sp, fp, #4
  11f450:	e8bd8800 	pop	{fp, pc}

0011f454 <tcp_txnow>:

/** Call tcp_output for all active pcbs that have TF_NAGLEMEMERR set */
void
tcp_txnow(void)
{
  11f454:	e92d4800 	push	{fp, lr}
  11f458:	e28db004 	add	fp, sp, #4
  11f45c:	e24dd008 	sub	sp, sp, #8
  struct tcp_pcb *pcb;

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  11f460:	e3063a30 	movw	r3, #27184	; 0x6a30
  11f464:	e3403057 	movt	r3, #87	; 0x57
  11f468:	e5933000 	ldr	r3, [r3]
  11f46c:	e50b3008 	str	r3, [fp, #-8]
  11f470:	ea000009 	b	11f49c <tcp_txnow+0x48>
    if (pcb->flags & TF_NAGLEMEMERR) {
  11f474:	e51b3008 	ldr	r3, [fp, #-8]
  11f478:	e5d3301e 	ldrb	r3, [r3, #30]
  11f47c:	e6af3073 	sxtb	r3, r3
  11f480:	e3530000 	cmp	r3, #0
  11f484:	aa000001 	bge	11f490 <tcp_txnow+0x3c>
      tcp_output(pcb);
  11f488:	e51b0008 	ldr	r0, [fp, #-8]
  11f48c:	eb001b2c 	bl	126144 <tcp_output>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  11f490:	e51b3008 	ldr	r3, [fp, #-8]
  11f494:	e593300c 	ldr	r3, [r3, #12]
  11f498:	e50b3008 	str	r3, [fp, #-8]
  11f49c:	e51b3008 	ldr	r3, [fp, #-8]
  11f4a0:	e3530000 	cmp	r3, #0
  11f4a4:	1afffff2 	bne	11f474 <tcp_txnow+0x20>
    }
  }
}
  11f4a8:	e320f000 	nop	{0}
  11f4ac:	e24bd004 	sub	sp, fp, #4
  11f4b0:	e8bd8800 	pop	{fp, pc}

0011f4b4 <tcp_process_refused_data>:

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
  11f4b4:	e92d4810 	push	{r4, fp, lr}
  11f4b8:	e28db008 	add	fp, sp, #8
  11f4bc:	e24dd014 	sub	sp, sp, #20
  11f4c0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
  11f4c4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f4c8:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  11f4cc:	e5d3300d 	ldrb	r3, [r3, #13]
  11f4d0:	e54b300e 	strb	r3, [fp, #-14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
  11f4d4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f4d8:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  11f4dc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
  11f4e0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f4e4:	e3a02000 	mov	r2, #0
  11f4e8:	e5832078 	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
  11f4ec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f4f0:	e5933084 	ldr	r3, [r3, #132]	; 0x84
  11f4f4:	e3530000 	cmp	r3, #0
  11f4f8:	0a00000a 	beq	11f528 <tcp_process_refused_data+0x74>
  11f4fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f500:	e5934084 	ldr	r4, [r3, #132]	; 0x84
  11f504:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f508:	e5930010 	ldr	r0, [r3, #16]
  11f50c:	e3a03000 	mov	r3, #0
  11f510:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11f514:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  11f518:	e12fff34 	blx	r4
  11f51c:	e1a03000 	mov	r3, r0
  11f520:	e54b300d 	strb	r3, [fp, #-13]
  11f524:	ea000006 	b	11f544 <tcp_process_refused_data+0x90>
  11f528:	e3a03000 	mov	r3, #0
  11f52c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11f530:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  11f534:	e3a00000 	mov	r0, #0
  11f538:	eb000086 	bl	11f758 <tcp_recv_null>
  11f53c:	e1a03000 	mov	r3, r0
  11f540:	e54b300d 	strb	r3, [fp, #-13]
    if (err == ERR_OK) {
  11f544:	e15b30dd 	ldrsb	r3, [fp, #-13]
  11f548:	e3530000 	cmp	r3, #0
  11f54c:	1a000024 	bne	11f5e4 <tcp_process_refused_data+0x130>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
  11f550:	e55b300e 	ldrb	r3, [fp, #-14]
  11f554:	e2033020 	and	r3, r3, #32
  11f558:	e3530000 	cmp	r3, #0
  11f55c:	0a00002a 	beq	11f60c <tcp_process_refused_data+0x158>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
  11f560:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f564:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  11f568:	e30f2fff 	movw	r2, #65535	; 0xffff
  11f56c:	e1530002 	cmp	r3, r2
  11f570:	0a000005 	beq	11f58c <tcp_process_refused_data+0xd8>
          pcb->rcv_wnd++;
  11f574:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f578:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  11f57c:	e2833001 	add	r3, r3, #1
  11f580:	e6ff2073 	uxth	r2, r3
  11f584:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f588:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
        }
        TCP_EVENT_CLOSED(pcb, err);
  11f58c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f590:	e5933084 	ldr	r3, [r3, #132]	; 0x84
  11f594:	e3530000 	cmp	r3, #0
  11f598:	0a00000a 	beq	11f5c8 <tcp_process_refused_data+0x114>
  11f59c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f5a0:	e5934084 	ldr	r4, [r3, #132]	; 0x84
  11f5a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f5a8:	e5930010 	ldr	r0, [r3, #16]
  11f5ac:	e3a03000 	mov	r3, #0
  11f5b0:	e3a02000 	mov	r2, #0
  11f5b4:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  11f5b8:	e12fff34 	blx	r4
  11f5bc:	e1a03000 	mov	r3, r0
  11f5c0:	e54b300d 	strb	r3, [fp, #-13]
  11f5c4:	ea000001 	b	11f5d0 <tcp_process_refused_data+0x11c>
  11f5c8:	e3a03000 	mov	r3, #0
  11f5cc:	e54b300d 	strb	r3, [fp, #-13]
        if (err == ERR_ABRT) {
  11f5d0:	e15b30dd 	ldrsb	r3, [fp, #-13]
  11f5d4:	e373000d 	cmn	r3, #13
  11f5d8:	1a00000b 	bne	11f60c <tcp_process_refused_data+0x158>
          return ERR_ABRT;
  11f5dc:	e3e0300c 	mvn	r3, #12
  11f5e0:	ea00000a 	b	11f610 <tcp_process_refused_data+0x15c>
        }
      }
    } else if (err == ERR_ABRT) {
  11f5e4:	e15b30dd 	ldrsb	r3, [fp, #-13]
  11f5e8:	e373000d 	cmn	r3, #13
  11f5ec:	1a000001 	bne	11f5f8 <tcp_process_refused_data+0x144>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
  11f5f0:	e3e0300c 	mvn	r3, #12
  11f5f4:	ea000005 	b	11f610 <tcp_process_refused_data+0x15c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
  11f5f8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f5fc:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11f600:	e5832078 	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
  11f604:	e3e03004 	mvn	r3, #4
  11f608:	ea000000 	b	11f610 <tcp_process_refused_data+0x15c>
    }
  }
  return ERR_OK;
  11f60c:	e3a03000 	mov	r3, #0
}
  11f610:	e1a00003 	mov	r0, r3
  11f614:	e24bd008 	sub	sp, fp, #8
  11f618:	e8bd8810 	pop	{r4, fp, pc}

0011f61c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
  11f61c:	e92d4800 	push	{fp, lr}
  11f620:	e28db004 	add	fp, sp, #4
  11f624:	e24dd010 	sub	sp, sp, #16
  11f628:	e50b0010 	str	r0, [fp, #-16]
  while (seg != NULL) {
  11f62c:	ea000006 	b	11f64c <tcp_segs_free+0x30>
    struct tcp_seg *next = seg->next;
  11f630:	e51b3010 	ldr	r3, [fp, #-16]
  11f634:	e5933000 	ldr	r3, [r3]
  11f638:	e50b3008 	str	r3, [fp, #-8]
    tcp_seg_free(seg);
  11f63c:	e51b0010 	ldr	r0, [fp, #-16]
  11f640:	eb000007 	bl	11f664 <tcp_seg_free>
    seg = next;
  11f644:	e51b3008 	ldr	r3, [fp, #-8]
  11f648:	e50b3010 	str	r3, [fp, #-16]
  while (seg != NULL) {
  11f64c:	e51b3010 	ldr	r3, [fp, #-16]
  11f650:	e3530000 	cmp	r3, #0
  11f654:	1afffff5 	bne	11f630 <tcp_segs_free+0x14>
  }
}
  11f658:	e320f000 	nop	{0}
  11f65c:	e24bd004 	sub	sp, fp, #4
  11f660:	e8bd8800 	pop	{fp, pc}

0011f664 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
  11f664:	e92d4800 	push	{fp, lr}
  11f668:	e28db004 	add	fp, sp, #4
  11f66c:	e24dd008 	sub	sp, sp, #8
  11f670:	e50b0008 	str	r0, [fp, #-8]
  if (seg != NULL) {
  11f674:	e51b3008 	ldr	r3, [fp, #-8]
  11f678:	e3530000 	cmp	r3, #0
  11f67c:	0a00000a 	beq	11f6ac <tcp_seg_free+0x48>
    if (seg->p != NULL) {
  11f680:	e51b3008 	ldr	r3, [fp, #-8]
  11f684:	e5933004 	ldr	r3, [r3, #4]
  11f688:	e3530000 	cmp	r3, #0
  11f68c:	0a000003 	beq	11f6a0 <tcp_seg_free+0x3c>
      pbuf_free(seg->p);
  11f690:	e51b3008 	ldr	r3, [fp, #-8]
  11f694:	e5933004 	ldr	r3, [r3, #4]
  11f698:	e1a00003 	mov	r0, r3
  11f69c:	ebffee7e 	bl	11b09c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
  11f6a0:	e51b1008 	ldr	r1, [fp, #-8]
  11f6a4:	e3a00004 	mov	r0, #4
  11f6a8:	ebffe76d 	bl	119464 <memp_free>
  }
}
  11f6ac:	e320f000 	nop	{0}
  11f6b0:	e24bd004 	sub	sp, fp, #4
  11f6b4:	e8bd8800 	pop	{fp, pc}

0011f6b8 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
  11f6b8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11f6bc:	e28db000 	add	fp, sp, #0
  11f6c0:	e24dd00c 	sub	sp, sp, #12
  11f6c4:	e50b0008 	str	r0, [fp, #-8]
  11f6c8:	e1a03001 	mov	r3, r1
  11f6cc:	e54b3009 	strb	r3, [fp, #-9]
  pcb->prio = prio;
  11f6d0:	e51b3008 	ldr	r3, [fp, #-8]
  11f6d4:	e55b2009 	ldrb	r2, [fp, #-9]
  11f6d8:	e5c32018 	strb	r2, [r3, #24]
}
  11f6dc:	e320f000 	nop	{0}
  11f6e0:	e28bd000 	add	sp, fp, #0
  11f6e4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11f6e8:	e12fff1e 	bx	lr

0011f6ec <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
  11f6ec:	e92d4800 	push	{fp, lr}
  11f6f0:	e28db004 	add	fp, sp, #4
  11f6f4:	e24dd010 	sub	sp, sp, #16
  11f6f8:	e50b0010 	str	r0, [fp, #-16]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
  11f6fc:	e300258f 	movw	r2, #1423	; 0x58f
  11f700:	e30810ac 	movw	r1, #32940	; 0x80ac
  11f704:	e3401014 	movt	r1, #20
  11f708:	e3a00004 	mov	r0, #4
  11f70c:	ebffe6ec 	bl	1192c4 <memp_malloc_fn>
  11f710:	e50b0008 	str	r0, [fp, #-8]
  if (cseg == NULL) {
  11f714:	e51b3008 	ldr	r3, [fp, #-8]
  11f718:	e3530000 	cmp	r3, #0
  11f71c:	1a000001 	bne	11f728 <tcp_seg_copy+0x3c>
    return NULL;
  11f720:	e3a03000 	mov	r3, #0
  11f724:	ea000008 	b	11f74c <tcp_seg_copy+0x60>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
  11f728:	e3a02010 	mov	r2, #16
  11f72c:	e51b1010 	ldr	r1, [fp, #-16]
  11f730:	e51b0008 	ldr	r0, [fp, #-8]
  11f734:	eb008610 	bl	140f7c <memcpy>
  pbuf_ref(cseg->p);
  11f738:	e51b3008 	ldr	r3, [fp, #-8]
  11f73c:	e5933004 	ldr	r3, [r3, #4]
  11f740:	e1a00003 	mov	r0, r3
  11f744:	ebffeeee 	bl	11b304 <pbuf_ref>
  return cseg;
  11f748:	e51b3008 	ldr	r3, [fp, #-8]
}
  11f74c:	e1a00003 	mov	r0, r3
  11f750:	e24bd004 	sub	sp, fp, #4
  11f754:	e8bd8800 	pop	{fp, pc}

0011f758 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
  11f758:	e92d4800 	push	{fp, lr}
  11f75c:	e28db004 	add	fp, sp, #4
  11f760:	e24dd010 	sub	sp, sp, #16
  11f764:	e50b0008 	str	r0, [fp, #-8]
  11f768:	e50b100c 	str	r1, [fp, #-12]
  11f76c:	e50b2010 	str	r2, [fp, #-16]
  11f770:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
  11f774:	e51b3010 	ldr	r3, [fp, #-16]
  11f778:	e3530000 	cmp	r3, #0
  11f77c:	0a000007 	beq	11f7a0 <tcp_recv_null+0x48>
    tcp_recved(pcb, p->tot_len);
  11f780:	e51b3010 	ldr	r3, [fp, #-16]
  11f784:	e1d330b8 	ldrh	r3, [r3, #8]
  11f788:	e1a01003 	mov	r1, r3
  11f78c:	e51b000c 	ldr	r0, [fp, #-12]
  11f790:	ebfffacd 	bl	11e2cc <tcp_recved>
    pbuf_free(p);
  11f794:	e51b0010 	ldr	r0, [fp, #-16]
  11f798:	ebffee3f 	bl	11b09c <pbuf_free>
  11f79c:	ea000006 	b	11f7bc <tcp_recv_null+0x64>
  } else if (err == ERR_OK) {
  11f7a0:	e15b31d1 	ldrsb	r3, [fp, #-17]	; 0xffffffef
  11f7a4:	e3530000 	cmp	r3, #0
  11f7a8:	1a000003 	bne	11f7bc <tcp_recv_null+0x64>
    return tcp_close(pcb);
  11f7ac:	e51b000c 	ldr	r0, [fp, #-12]
  11f7b0:	ebfff81f 	bl	11d834 <tcp_close>
  11f7b4:	e1a03000 	mov	r3, r0
  11f7b8:	ea000000 	b	11f7c0 <tcp_recv_null+0x68>
  }
  return ERR_OK;
  11f7bc:	e3a03000 	mov	r3, #0
}
  11f7c0:	e1a00003 	mov	r0, r3
  11f7c4:	e24bd004 	sub	sp, fp, #4
  11f7c8:	e8bd8800 	pop	{fp, pc}

0011f7cc <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
  11f7cc:	e92d4800 	push	{fp, lr}
  11f7d0:	e28db004 	add	fp, sp, #4
  11f7d4:	e24dd018 	sub	sp, sp, #24
  11f7d8:	e1a03000 	mov	r3, r0
  11f7dc:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
  11f7e0:	e15b31d5 	ldrsb	r3, [fp, #-21]	; 0xffffffeb
  11f7e4:	e3530000 	cmp	r3, #0
  11f7e8:	ba000001 	blt	11f7f4 <tcp_kill_prio+0x28>
  11f7ec:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  11f7f0:	ea000000 	b	11f7f8 <tcp_kill_prio+0x2c>
  11f7f4:	e3a0307f 	mov	r3, #127	; 0x7f
  11f7f8:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
  11f7fc:	e3a03000 	mov	r3, #0
  11f800:	e50b3010 	str	r3, [fp, #-16]
  inactive = NULL;
  11f804:	e3a03000 	mov	r3, #0
  11f808:	e50b300c 	str	r3, [fp, #-12]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  11f80c:	e3063a30 	movw	r3, #27184	; 0x6a30
  11f810:	e3403057 	movt	r3, #87	; 0x57
  11f814:	e5933000 	ldr	r3, [r3]
  11f818:	e50b3008 	str	r3, [fp, #-8]
  11f81c:	ea00001c 	b	11f894 <tcp_kill_prio+0xc8>
    if (pcb->prio <= mprio &&
  11f820:	e51b3008 	ldr	r3, [fp, #-8]
  11f824:	e5d33018 	ldrb	r3, [r3, #24]
  11f828:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  11f82c:	e1520003 	cmp	r2, r3
  11f830:	3a000014 	bcc	11f888 <tcp_kill_prio+0xbc>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
  11f834:	e3063a34 	movw	r3, #27188	; 0x6a34
  11f838:	e3403057 	movt	r3, #87	; 0x57
  11f83c:	e5932000 	ldr	r2, [r3]
  11f840:	e51b3008 	ldr	r3, [fp, #-8]
  11f844:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11f848:	e0423003 	sub	r3, r2, r3
    if (pcb->prio <= mprio &&
  11f84c:	e51b2010 	ldr	r2, [fp, #-16]
  11f850:	e1520003 	cmp	r2, r3
  11f854:	8a00000b 	bhi	11f888 <tcp_kill_prio+0xbc>
      inactivity = tcp_ticks - pcb->tmr;
  11f858:	e3063a34 	movw	r3, #27188	; 0x6a34
  11f85c:	e3403057 	movt	r3, #87	; 0x57
  11f860:	e5932000 	ldr	r2, [r3]
  11f864:	e51b3008 	ldr	r3, [fp, #-8]
  11f868:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11f86c:	e0423003 	sub	r3, r2, r3
  11f870:	e50b3010 	str	r3, [fp, #-16]
      inactive = pcb;
  11f874:	e51b3008 	ldr	r3, [fp, #-8]
  11f878:	e50b300c 	str	r3, [fp, #-12]
      mprio = pcb->prio;
  11f87c:	e51b3008 	ldr	r3, [fp, #-8]
  11f880:	e5d33018 	ldrb	r3, [r3, #24]
  11f884:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  11f888:	e51b3008 	ldr	r3, [fp, #-8]
  11f88c:	e593300c 	ldr	r3, [r3, #12]
  11f890:	e50b3008 	str	r3, [fp, #-8]
  11f894:	e51b3008 	ldr	r3, [fp, #-8]
  11f898:	e3530000 	cmp	r3, #0
  11f89c:	1affffdf 	bne	11f820 <tcp_kill_prio+0x54>
    }
  }
  if (inactive != NULL) {
  11f8a0:	e51b300c 	ldr	r3, [fp, #-12]
  11f8a4:	e3530000 	cmp	r3, #0
  11f8a8:	0a000001 	beq	11f8b4 <tcp_kill_prio+0xe8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
  11f8ac:	e51b000c 	ldr	r0, [fp, #-12]
  11f8b0:	ebfff8d3 	bl	11dc04 <tcp_abort>
  }
}
  11f8b4:	e320f000 	nop	{0}
  11f8b8:	e24bd004 	sub	sp, fp, #4
  11f8bc:	e8bd8800 	pop	{fp, pc}

0011f8c0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
  11f8c0:	e92d4800 	push	{fp, lr}
  11f8c4:	e28db004 	add	fp, sp, #4
  11f8c8:	e24dd018 	sub	sp, sp, #24
  11f8cc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
  11f8d0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f8d4:	e3530008 	cmp	r3, #8
  11f8d8:	0a000009 	beq	11f904 <tcp_kill_state+0x44>
  11f8dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  11f8e0:	e3530009 	cmp	r3, #9
  11f8e4:	0a000006 	beq	11f904 <tcp_kill_state+0x44>
  11f8e8:	e3080384 	movw	r0, #33668	; 0x8384
  11f8ec:	e3400014 	movt	r0, #20
  11f8f0:	ebff8e07 	bl	103114 <rt_kprintf>
  11f8f4:	e30015d7 	movw	r1, #1495	; 0x5d7
  11f8f8:	e30800ac 	movw	r0, #32940	; 0x80ac
  11f8fc:	e3400014 	movt	r0, #20
  11f900:	ebffadd7 	bl	10b064 <sys_arch_assert>

  inactivity = 0;
  11f904:	e3a03000 	mov	r3, #0
  11f908:	e50b3010 	str	r3, [fp, #-16]
  inactive = NULL;
  11f90c:	e3a03000 	mov	r3, #0
  11f910:	e50b300c 	str	r3, [fp, #-12]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  11f914:	e3063a30 	movw	r3, #27184	; 0x6a30
  11f918:	e3403057 	movt	r3, #87	; 0x57
  11f91c:	e5933000 	ldr	r3, [r3]
  11f920:	e50b3008 	str	r3, [fp, #-8]
  11f924:	ea000019 	b	11f990 <tcp_kill_state+0xd0>
    if (pcb->state == state) {
  11f928:	e51b3008 	ldr	r3, [fp, #-8]
  11f92c:	e5933014 	ldr	r3, [r3, #20]
  11f930:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  11f934:	e1520003 	cmp	r2, r3
  11f938:	1a000011 	bne	11f984 <tcp_kill_state+0xc4>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
  11f93c:	e3063a34 	movw	r3, #27188	; 0x6a34
  11f940:	e3403057 	movt	r3, #87	; 0x57
  11f944:	e5932000 	ldr	r2, [r3]
  11f948:	e51b3008 	ldr	r3, [fp, #-8]
  11f94c:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11f950:	e0423003 	sub	r3, r2, r3
  11f954:	e51b2010 	ldr	r2, [fp, #-16]
  11f958:	e1520003 	cmp	r2, r3
  11f95c:	8a000008 	bhi	11f984 <tcp_kill_state+0xc4>
        inactivity = tcp_ticks - pcb->tmr;
  11f960:	e3063a34 	movw	r3, #27188	; 0x6a34
  11f964:	e3403057 	movt	r3, #87	; 0x57
  11f968:	e5932000 	ldr	r2, [r3]
  11f96c:	e51b3008 	ldr	r3, [fp, #-8]
  11f970:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11f974:	e0423003 	sub	r3, r2, r3
  11f978:	e50b3010 	str	r3, [fp, #-16]
        inactive = pcb;
  11f97c:	e51b3008 	ldr	r3, [fp, #-8]
  11f980:	e50b300c 	str	r3, [fp, #-12]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  11f984:	e51b3008 	ldr	r3, [fp, #-8]
  11f988:	e593300c 	ldr	r3, [r3, #12]
  11f98c:	e50b3008 	str	r3, [fp, #-8]
  11f990:	e51b3008 	ldr	r3, [fp, #-8]
  11f994:	e3530000 	cmp	r3, #0
  11f998:	1affffe2 	bne	11f928 <tcp_kill_state+0x68>
      }
    }
  }
  if (inactive != NULL) {
  11f99c:	e51b300c 	ldr	r3, [fp, #-12]
  11f9a0:	e3530000 	cmp	r3, #0
  11f9a4:	0a000002 	beq	11f9b4 <tcp_kill_state+0xf4>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
  11f9a8:	e3a01000 	mov	r1, #0
  11f9ac:	e51b000c 	ldr	r0, [fp, #-12]
  11f9b0:	ebfff7f4 	bl	11d988 <tcp_abandon>
  }
}
  11f9b4:	e320f000 	nop	{0}
  11f9b8:	e24bd004 	sub	sp, fp, #4
  11f9bc:	e8bd8800 	pop	{fp, pc}

0011f9c0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
  11f9c0:	e92d4800 	push	{fp, lr}
  11f9c4:	e28db004 	add	fp, sp, #4
  11f9c8:	e24dd010 	sub	sp, sp, #16
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
  11f9cc:	e3a03000 	mov	r3, #0
  11f9d0:	e50b3010 	str	r3, [fp, #-16]
  inactive = NULL;
  11f9d4:	e3a03000 	mov	r3, #0
  11f9d8:	e50b300c 	str	r3, [fp, #-12]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
  11f9dc:	e3063a40 	movw	r3, #27200	; 0x6a40
  11f9e0:	e3403057 	movt	r3, #87	; 0x57
  11f9e4:	e5933000 	ldr	r3, [r3]
  11f9e8:	e50b3008 	str	r3, [fp, #-8]
  11f9ec:	ea000014 	b	11fa44 <tcp_kill_timewait+0x84>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
  11f9f0:	e3063a34 	movw	r3, #27188	; 0x6a34
  11f9f4:	e3403057 	movt	r3, #87	; 0x57
  11f9f8:	e5932000 	ldr	r2, [r3]
  11f9fc:	e51b3008 	ldr	r3, [fp, #-8]
  11fa00:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11fa04:	e0423003 	sub	r3, r2, r3
  11fa08:	e51b2010 	ldr	r2, [fp, #-16]
  11fa0c:	e1520003 	cmp	r2, r3
  11fa10:	8a000008 	bhi	11fa38 <tcp_kill_timewait+0x78>
      inactivity = tcp_ticks - pcb->tmr;
  11fa14:	e3063a34 	movw	r3, #27188	; 0x6a34
  11fa18:	e3403057 	movt	r3, #87	; 0x57
  11fa1c:	e5932000 	ldr	r2, [r3]
  11fa20:	e51b3008 	ldr	r3, [fp, #-8]
  11fa24:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  11fa28:	e0423003 	sub	r3, r2, r3
  11fa2c:	e50b3010 	str	r3, [fp, #-16]
      inactive = pcb;
  11fa30:	e51b3008 	ldr	r3, [fp, #-8]
  11fa34:	e50b300c 	str	r3, [fp, #-12]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
  11fa38:	e51b3008 	ldr	r3, [fp, #-8]
  11fa3c:	e593300c 	ldr	r3, [r3, #12]
  11fa40:	e50b3008 	str	r3, [fp, #-8]
  11fa44:	e51b3008 	ldr	r3, [fp, #-8]
  11fa48:	e3530000 	cmp	r3, #0
  11fa4c:	1affffe7 	bne	11f9f0 <tcp_kill_timewait+0x30>
    }
  }
  if (inactive != NULL) {
  11fa50:	e51b300c 	ldr	r3, [fp, #-12]
  11fa54:	e3530000 	cmp	r3, #0
  11fa58:	0a000001 	beq	11fa64 <tcp_kill_timewait+0xa4>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
  11fa5c:	e51b000c 	ldr	r0, [fp, #-12]
  11fa60:	ebfff867 	bl	11dc04 <tcp_abort>
  }
}
  11fa64:	e320f000 	nop	{0}
  11fa68:	e24bd004 	sub	sp, fp, #4
  11fa6c:	e8bd8800 	pop	{fp, pc}

0011fa70 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
  11fa70:	e92d4800 	push	{fp, lr}
  11fa74:	e28db004 	add	fp, sp, #4
  11fa78:	e24dd010 	sub	sp, sp, #16
  11fa7c:	e1a03000 	mov	r3, r0
  11fa80:	e54b300d 	strb	r3, [fp, #-13]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
  11fa84:	e3002612 	movw	r2, #1554	; 0x612
  11fa88:	e30810ac 	movw	r1, #32940	; 0x80ac
  11fa8c:	e3401014 	movt	r1, #20
  11fa90:	e3a00002 	mov	r0, #2
  11fa94:	ebffe60a 	bl	1192c4 <memp_malloc_fn>
  11fa98:	e50b0008 	str	r0, [fp, #-8]
  if (pcb == NULL) {
  11fa9c:	e51b3008 	ldr	r3, [fp, #-8]
  11faa0:	e3530000 	cmp	r3, #0
  11faa4:	1a000050 	bne	11fbec <tcp_alloc+0x17c>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
  11faa8:	ebffffc4 	bl	11f9c0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
  11faac:	e3002618 	movw	r2, #1560	; 0x618
  11fab0:	e30810ac 	movw	r1, #32940	; 0x80ac
  11fab4:	e3401014 	movt	r1, #20
  11fab8:	e3a00002 	mov	r0, #2
  11fabc:	ebffe600 	bl	1192c4 <memp_malloc_fn>
  11fac0:	e50b0008 	str	r0, [fp, #-8]
    if (pcb == NULL) {
  11fac4:	e51b3008 	ldr	r3, [fp, #-8]
  11fac8:	e3530000 	cmp	r3, #0
  11facc:	1a00003c 	bne	11fbc4 <tcp_alloc+0x154>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
  11fad0:	e3a00009 	mov	r0, #9
  11fad4:	ebffff79 	bl	11f8c0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
  11fad8:	e300261e 	movw	r2, #1566	; 0x61e
  11fadc:	e30810ac 	movw	r1, #32940	; 0x80ac
  11fae0:	e3401014 	movt	r1, #20
  11fae4:	e3a00002 	mov	r0, #2
  11fae8:	ebffe5f5 	bl	1192c4 <memp_malloc_fn>
  11faec:	e50b0008 	str	r0, [fp, #-8]
      if (pcb == NULL) {
  11faf0:	e51b3008 	ldr	r3, [fp, #-8]
  11faf4:	e3530000 	cmp	r3, #0
  11faf8:	1a000027 	bne	11fb9c <tcp_alloc+0x12c>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
  11fafc:	e3a00008 	mov	r0, #8
  11fb00:	ebffff6e 	bl	11f8c0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
  11fb04:	e3002624 	movw	r2, #1572	; 0x624
  11fb08:	e30810ac 	movw	r1, #32940	; 0x80ac
  11fb0c:	e3401014 	movt	r1, #20
  11fb10:	e3a00002 	mov	r0, #2
  11fb14:	ebffe5ea 	bl	1192c4 <memp_malloc_fn>
  11fb18:	e50b0008 	str	r0, [fp, #-8]
        if (pcb == NULL) {
  11fb1c:	e51b3008 	ldr	r3, [fp, #-8]
  11fb20:	e3530000 	cmp	r3, #0
  11fb24:	1a000012 	bne	11fb74 <tcp_alloc+0x104>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
  11fb28:	e55b300d 	ldrb	r3, [fp, #-13]
  11fb2c:	e1a00003 	mov	r0, r3
  11fb30:	ebffff25 	bl	11f7cc <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
  11fb34:	e300262a 	movw	r2, #1578	; 0x62a
  11fb38:	e30810ac 	movw	r1, #32940	; 0x80ac
  11fb3c:	e3401014 	movt	r1, #20
  11fb40:	e3a00002 	mov	r0, #2
  11fb44:	ebffe5de 	bl	1192c4 <memp_malloc_fn>
  11fb48:	e50b0008 	str	r0, [fp, #-8]
          if (pcb != NULL) {
  11fb4c:	e51b3008 	ldr	r3, [fp, #-8]
  11fb50:	e3530000 	cmp	r3, #0
  11fb54:	0a000006 	beq	11fb74 <tcp_alloc+0x104>
            /* adjust err stats: memp_malloc failed multiple times before */
            MEMP_STATS_DEC(err, MEMP_TCP_PCB);
  11fb58:	e3063840 	movw	r3, #26688	; 0x6840
  11fb5c:	e3403057 	movt	r3, #87	; 0x57
  11fb60:	e59330dc 	ldr	r3, [r3, #220]	; 0xdc
  11fb64:	e1d320b4 	ldrh	r2, [r3, #4]
  11fb68:	e2422001 	sub	r2, r2, #1
  11fb6c:	e6ff2072 	uxth	r2, r2
  11fb70:	e1c320b4 	strh	r2, [r3, #4]
          }
        }
        if (pcb != NULL) {
  11fb74:	e51b3008 	ldr	r3, [fp, #-8]
  11fb78:	e3530000 	cmp	r3, #0
  11fb7c:	0a000006 	beq	11fb9c <tcp_alloc+0x12c>
          /* adjust err stats: memp_malloc failed multiple times before */
          MEMP_STATS_DEC(err, MEMP_TCP_PCB);
  11fb80:	e3063840 	movw	r3, #26688	; 0x6840
  11fb84:	e3403057 	movt	r3, #87	; 0x57
  11fb88:	e59330dc 	ldr	r3, [r3, #220]	; 0xdc
  11fb8c:	e1d320b4 	ldrh	r2, [r3, #4]
  11fb90:	e2422001 	sub	r2, r2, #1
  11fb94:	e6ff2072 	uxth	r2, r2
  11fb98:	e1c320b4 	strh	r2, [r3, #4]
        }
      }
      if (pcb != NULL) {
  11fb9c:	e51b3008 	ldr	r3, [fp, #-8]
  11fba0:	e3530000 	cmp	r3, #0
  11fba4:	0a000006 	beq	11fbc4 <tcp_alloc+0x154>
        /* adjust err stats: memp_malloc failed multiple times before */
        MEMP_STATS_DEC(err, MEMP_TCP_PCB);
  11fba8:	e3063840 	movw	r3, #26688	; 0x6840
  11fbac:	e3403057 	movt	r3, #87	; 0x57
  11fbb0:	e59330dc 	ldr	r3, [r3, #220]	; 0xdc
  11fbb4:	e1d320b4 	ldrh	r2, [r3, #4]
  11fbb8:	e2422001 	sub	r2, r2, #1
  11fbbc:	e6ff2072 	uxth	r2, r2
  11fbc0:	e1c320b4 	strh	r2, [r3, #4]
      }
    }
    if (pcb != NULL) {
  11fbc4:	e51b3008 	ldr	r3, [fp, #-8]
  11fbc8:	e3530000 	cmp	r3, #0
  11fbcc:	0a000006 	beq	11fbec <tcp_alloc+0x17c>
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
  11fbd0:	e3063840 	movw	r3, #26688	; 0x6840
  11fbd4:	e3403057 	movt	r3, #87	; 0x57
  11fbd8:	e59330dc 	ldr	r3, [r3, #220]	; 0xdc
  11fbdc:	e1d320b4 	ldrh	r2, [r3, #4]
  11fbe0:	e2422001 	sub	r2, r2, #1
  11fbe4:	e6ff2072 	uxth	r2, r2
  11fbe8:	e1c320b4 	strh	r2, [r3, #4]
    }
  }
  if (pcb != NULL) {
  11fbec:	e51b3008 	ldr	r3, [fp, #-8]
  11fbf0:	e3530000 	cmp	r3, #0
  11fbf4:	0a00003e 	beq	11fcf4 <tcp_alloc+0x284>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
  11fbf8:	e3a020a4 	mov	r2, #164	; 0xa4
  11fbfc:	e3a01000 	mov	r1, #0
  11fc00:	e51b0008 	ldr	r0, [fp, #-8]
  11fc04:	eb008614 	bl	14145c <memset>
    pcb->prio = prio;
  11fc08:	e51b3008 	ldr	r3, [fp, #-8]
  11fc0c:	e55b200d 	ldrb	r2, [fp, #-13]
  11fc10:	e5c32018 	strb	r2, [r3, #24]
    pcb->snd_buf = TCP_SND_BUF;
  11fc14:	e51b3008 	ldr	r3, [fp, #-8]
  11fc18:	e3a02a02 	mov	r2, #8192	; 0x2000
  11fc1c:	e1c326b4 	strh	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
  11fc20:	e51b3008 	ldr	r3, [fp, #-8]
  11fc24:	e3e02000 	mvn	r2, #0
  11fc28:	e1c322be 	strh	r2, [r3, #46]	; 0x2e
  11fc2c:	e51b3008 	ldr	r3, [fp, #-8]
  11fc30:	e1d322be 	ldrh	r2, [r3, #46]	; 0x2e
  11fc34:	e51b3008 	ldr	r3, [fp, #-8]
  11fc38:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
    pcb->ttl = TCP_TTL;
  11fc3c:	e51b3008 	ldr	r3, [fp, #-8]
  11fc40:	e3e02000 	mvn	r2, #0
  11fc44:	e5c3200a 	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
  11fc48:	e51b3008 	ldr	r3, [fp, #-8]
  11fc4c:	e3a02f86 	mov	r2, #536	; 0x218
  11fc50:	e1c323b6 	strh	r2, [r3, #54]	; 0x36
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
  11fc54:	e51b3008 	ldr	r3, [fp, #-8]
  11fc58:	e3a02006 	mov	r2, #6
  11fc5c:	e1c324b4 	strh	r2, [r3, #68]	; 0x44
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
  11fc60:	e51b3008 	ldr	r3, [fp, #-8]
  11fc64:	e3a02006 	mov	r2, #6
  11fc68:	e1c324b2 	strh	r2, [r3, #66]	; 0x42
    pcb->rtime = -1;
  11fc6c:	e51b3008 	ldr	r3, [fp, #-8]
  11fc70:	e3e02000 	mvn	r2, #0
  11fc74:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
    pcb->cwnd = 1;
  11fc78:	e51b3008 	ldr	r3, [fp, #-8]
  11fc7c:	e3a02001 	mov	r2, #1
  11fc80:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
    pcb->tmr = tcp_ticks;
  11fc84:	e3063a34 	movw	r3, #27188	; 0x6a34
  11fc88:	e3403057 	movt	r3, #87	; 0x57
  11fc8c:	e5932000 	ldr	r2, [r3]
  11fc90:	e51b3008 	ldr	r3, [fp, #-8]
  11fc94:	e5832024 	str	r2, [r3, #36]	; 0x24
    pcb->last_timer = tcp_timer_ctr;
  11fc98:	e30f321d 	movw	r3, #61981	; 0xf21d
  11fc9c:	e3403014 	movt	r3, #20
  11fca0:	e5d32000 	ldrb	r2, [r3]
  11fca4:	e51b3008 	ldr	r3, [fp, #-8]
  11fca8:	e5c32021 	strb	r2, [r3, #33]	; 0x21
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
  11fcac:	e51b3008 	ldr	r3, [fp, #-8]
  11fcb0:	e3a02a02 	mov	r2, #8192	; 0x2000
  11fcb4:	e1c324be 	strh	r2, [r3, #78]	; 0x4e

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
  11fcb8:	e51b2008 	ldr	r2, [fp, #-8]
  11fcbc:	e30f3758 	movw	r3, #63320	; 0xf758
  11fcc0:	e3403011 	movt	r3, #17
  11fcc4:	e5823084 	str	r3, [r2, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
  11fcc8:	e51b2008 	ldr	r2, [fp, #-8]
  11fccc:	e3a03cdd 	mov	r3, #56576	; 0xdd00
  11fcd0:	e340306d 	movt	r3, #109	; 0x6d
  11fcd4:	e5823094 	str	r3, [r2, #148]	; 0x94

#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
  11fcd8:	e51b2008 	ldr	r2, [fp, #-8]
  11fcdc:	e30234f8 	movw	r3, #9464	; 0x24f8
  11fce0:	e3403001 	movt	r3, #1
  11fce4:	e5823098 	str	r3, [r2, #152]	; 0x98
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
  11fce8:	e51b3008 	ldr	r3, [fp, #-8]
  11fcec:	e3a02009 	mov	r2, #9
  11fcf0:	e583209c 	str	r2, [r3, #156]	; 0x9c
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
  11fcf4:	e51b3008 	ldr	r3, [fp, #-8]
}
  11fcf8:	e1a00003 	mov	r0, r3
  11fcfc:	e24bd004 	sub	sp, fp, #4
  11fd00:	e8bd8800 	pop	{fp, pc}

0011fd04 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
  11fd04:	e92d4800 	push	{fp, lr}
  11fd08:	e28db004 	add	fp, sp, #4
  return tcp_alloc(TCP_PRIO_NORMAL);
  11fd0c:	e3a00040 	mov	r0, #64	; 0x40
  11fd10:	ebffff56 	bl	11fa70 <tcp_alloc>
  11fd14:	e1a03000 	mov	r3, r0
}
  11fd18:	e1a00003 	mov	r0, r3
  11fd1c:	e8bd8800 	pop	{fp, pc}

0011fd20 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
  11fd20:	e92d4800 	push	{fp, lr}
  11fd24:	e28db004 	add	fp, sp, #4
  11fd28:	e24dd010 	sub	sp, sp, #16
  11fd2c:	e1a03000 	mov	r3, r0
  11fd30:	e54b300d 	strb	r3, [fp, #-13]
  struct tcp_pcb * pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
  11fd34:	e3a00040 	mov	r0, #64	; 0x40
  11fd38:	ebffff4c 	bl	11fa70 <tcp_alloc>
  11fd3c:	e50b0008 	str	r0, [fp, #-8]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
  11fd40:	e51b3008 	ldr	r3, [fp, #-8]
}
  11fd44:	e1a00003 	mov	r0, r3
  11fd48:	e24bd004 	sub	sp, fp, #4
  11fd4c:	e8bd8800 	pop	{fp, pc}

0011fd50 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  11fd50:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11fd54:	e28db000 	add	fp, sp, #0
  11fd58:	e24dd00c 	sub	sp, sp, #12
  11fd5c:	e50b0008 	str	r0, [fp, #-8]
  11fd60:	e50b100c 	str	r1, [fp, #-12]
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
  11fd64:	e51b3008 	ldr	r3, [fp, #-8]
  11fd68:	e3530000 	cmp	r3, #0
  11fd6c:	0a000002 	beq	11fd7c <tcp_arg+0x2c>
    pcb->callback_arg = arg;
  11fd70:	e51b3008 	ldr	r3, [fp, #-8]
  11fd74:	e51b200c 	ldr	r2, [fp, #-12]
  11fd78:	e5832010 	str	r2, [r3, #16]
  }
}
  11fd7c:	e320f000 	nop	{0}
  11fd80:	e28bd000 	add	sp, fp, #0
  11fd84:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11fd88:	e12fff1e 	bx	lr

0011fd8c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
  11fd8c:	e92d4800 	push	{fp, lr}
  11fd90:	e28db004 	add	fp, sp, #4
  11fd94:	e24dd008 	sub	sp, sp, #8
  11fd98:	e50b0008 	str	r0, [fp, #-8]
  11fd9c:	e50b100c 	str	r1, [fp, #-12]
  if (pcb != NULL) {
  11fda0:	e51b3008 	ldr	r3, [fp, #-8]
  11fda4:	e3530000 	cmp	r3, #0
  11fda8:	0a00000d 	beq	11fde4 <tcp_recv+0x58>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
  11fdac:	e51b3008 	ldr	r3, [fp, #-8]
  11fdb0:	e5933014 	ldr	r3, [r3, #20]
  11fdb4:	e3530001 	cmp	r3, #1
  11fdb8:	1a000006 	bne	11fdd8 <tcp_recv+0x4c>
  11fdbc:	e3080394 	movw	r0, #33684	; 0x8394
  11fdc0:	e3400014 	movt	r0, #20
  11fdc4:	ebff8cd2 	bl	103114 <rt_kprintf>
  11fdc8:	e30016b6 	movw	r1, #1718	; 0x6b6
  11fdcc:	e30800ac 	movw	r0, #32940	; 0x80ac
  11fdd0:	e3400014 	movt	r0, #20
  11fdd4:	ebffaca2 	bl	10b064 <sys_arch_assert>
    pcb->recv = recv;
  11fdd8:	e51b3008 	ldr	r3, [fp, #-8]
  11fddc:	e51b200c 	ldr	r2, [fp, #-12]
  11fde0:	e5832084 	str	r2, [r3, #132]	; 0x84
  }
}
  11fde4:	e320f000 	nop	{0}
  11fde8:	e24bd004 	sub	sp, fp, #4
  11fdec:	e8bd8800 	pop	{fp, pc}

0011fdf0 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
  11fdf0:	e92d4800 	push	{fp, lr}
  11fdf4:	e28db004 	add	fp, sp, #4
  11fdf8:	e24dd008 	sub	sp, sp, #8
  11fdfc:	e50b0008 	str	r0, [fp, #-8]
  11fe00:	e50b100c 	str	r1, [fp, #-12]
  if (pcb != NULL) {
  11fe04:	e51b3008 	ldr	r3, [fp, #-8]
  11fe08:	e3530000 	cmp	r3, #0
  11fe0c:	0a00000d 	beq	11fe48 <tcp_sent+0x58>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
  11fe10:	e51b3008 	ldr	r3, [fp, #-8]
  11fe14:	e5933014 	ldr	r3, [r3, #20]
  11fe18:	e3530001 	cmp	r3, #1
  11fe1c:	1a000006 	bne	11fe3c <tcp_sent+0x4c>
  11fe20:	e30803bc 	movw	r0, #33724	; 0x83bc
  11fe24:	e3400014 	movt	r0, #20
  11fe28:	ebff8cb9 	bl	103114 <rt_kprintf>
  11fe2c:	e30016c7 	movw	r1, #1735	; 0x6c7
  11fe30:	e30800ac 	movw	r0, #32940	; 0x80ac
  11fe34:	e3400014 	movt	r0, #20
  11fe38:	ebffac89 	bl	10b064 <sys_arch_assert>
    pcb->sent = sent;
  11fe3c:	e51b3008 	ldr	r3, [fp, #-8]
  11fe40:	e51b200c 	ldr	r2, [fp, #-12]
  11fe44:	e5832080 	str	r2, [r3, #128]	; 0x80
  }
}
  11fe48:	e320f000 	nop	{0}
  11fe4c:	e24bd004 	sub	sp, fp, #4
  11fe50:	e8bd8800 	pop	{fp, pc}

0011fe54 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
  11fe54:	e92d4800 	push	{fp, lr}
  11fe58:	e28db004 	add	fp, sp, #4
  11fe5c:	e24dd008 	sub	sp, sp, #8
  11fe60:	e50b0008 	str	r0, [fp, #-8]
  11fe64:	e50b100c 	str	r1, [fp, #-12]
  if (pcb != NULL) {
  11fe68:	e51b3008 	ldr	r3, [fp, #-8]
  11fe6c:	e3530000 	cmp	r3, #0
  11fe70:	0a00000d 	beq	11feac <tcp_err+0x58>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
  11fe74:	e51b3008 	ldr	r3, [fp, #-8]
  11fe78:	e5933014 	ldr	r3, [r3, #20]
  11fe7c:	e3530001 	cmp	r3, #1
  11fe80:	1a000006 	bne	11fea0 <tcp_err+0x4c>
  11fe84:	e30803e4 	movw	r0, #33764	; 0x83e4
  11fe88:	e3400014 	movt	r0, #20
  11fe8c:	ebff8ca0 	bl	103114 <rt_kprintf>
  11fe90:	e30016db 	movw	r1, #1755	; 0x6db
  11fe94:	e30800ac 	movw	r0, #32940	; 0x80ac
  11fe98:	e3400014 	movt	r0, #20
  11fe9c:	ebffac70 	bl	10b064 <sys_arch_assert>
    pcb->errf = err;
  11fea0:	e51b3008 	ldr	r3, [fp, #-8]
  11fea4:	e51b200c 	ldr	r2, [fp, #-12]
  11fea8:	e5832090 	str	r2, [r3, #144]	; 0x90
  }
}
  11feac:	e320f000 	nop	{0}
  11feb0:	e24bd004 	sub	sp, fp, #4
  11feb4:	e8bd8800 	pop	{fp, pc}

0011feb8 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  11feb8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  11febc:	e28db000 	add	fp, sp, #0
  11fec0:	e24dd014 	sub	sp, sp, #20
  11fec4:	e50b0010 	str	r0, [fp, #-16]
  11fec8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
  11fecc:	e51b3010 	ldr	r3, [fp, #-16]
  11fed0:	e3530000 	cmp	r3, #0
  11fed4:	0a000008 	beq	11fefc <tcp_accept+0x44>
  11fed8:	e51b3010 	ldr	r3, [fp, #-16]
  11fedc:	e5933014 	ldr	r3, [r3, #20]
  11fee0:	e3530001 	cmp	r3, #1
  11fee4:	1a000004 	bne	11fefc <tcp_accept+0x44>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
  11fee8:	e51b3010 	ldr	r3, [fp, #-16]
  11feec:	e50b3008 	str	r3, [fp, #-8]
    lpcb->accept = accept;
  11fef0:	e51b3008 	ldr	r3, [fp, #-8]
  11fef4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  11fef8:	e583201c 	str	r2, [r3, #28]
  }
}
  11fefc:	e320f000 	nop	{0}
  11ff00:	e28bd000 	add	sp, fp, #0
  11ff04:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  11ff08:	e12fff1e 	bx	lr

0011ff0c <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
  11ff0c:	e92d4800 	push	{fp, lr}
  11ff10:	e28db004 	add	fp, sp, #4
  11ff14:	e24dd010 	sub	sp, sp, #16
  11ff18:	e50b0008 	str	r0, [fp, #-8]
  11ff1c:	e50b100c 	str	r1, [fp, #-12]
  11ff20:	e1a03002 	mov	r3, r2
  11ff24:	e54b300d 	strb	r3, [fp, #-13]
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
  11ff28:	e51b3008 	ldr	r3, [fp, #-8]
  11ff2c:	e5933014 	ldr	r3, [r3, #20]
  11ff30:	e3530001 	cmp	r3, #1
  11ff34:	1a000006 	bne	11ff54 <tcp_poll+0x48>
  11ff38:	e308040c 	movw	r0, #33804	; 0x840c
  11ff3c:	e3400014 	movt	r0, #20
  11ff40:	ebff8c73 	bl	103114 <rt_kprintf>
  11ff44:	e30016fe 	movw	r1, #1790	; 0x6fe
  11ff48:	e30800ac 	movw	r0, #32940	; 0x80ac
  11ff4c:	e3400014 	movt	r0, #20
  11ff50:	ebffac43 	bl	10b064 <sys_arch_assert>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
  11ff54:	e51b3008 	ldr	r3, [fp, #-8]
  11ff58:	e51b200c 	ldr	r2, [fp, #-12]
  11ff5c:	e583208c 	str	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
  11ff60:	e51b3008 	ldr	r3, [fp, #-8]
  11ff64:	e55b200d 	ldrb	r2, [fp, #-13]
  11ff68:	e5c32020 	strb	r2, [r3, #32]
}
  11ff6c:	e320f000 	nop	{0}
  11ff70:	e24bd004 	sub	sp, fp, #4
  11ff74:	e8bd8800 	pop	{fp, pc}

0011ff78 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
  11ff78:	e92d4800 	push	{fp, lr}
  11ff7c:	e28db004 	add	fp, sp, #4
  11ff80:	e24dd008 	sub	sp, sp, #8
  11ff84:	e50b0008 	str	r0, [fp, #-8]
  if (pcb->state != CLOSED &&
  11ff88:	e51b3008 	ldr	r3, [fp, #-8]
  11ff8c:	e5933014 	ldr	r3, [r3, #20]
  11ff90:	e3530000 	cmp	r3, #0
  11ff94:	0a00002e 	beq	120054 <tcp_pcb_purge+0xdc>
     pcb->state != TIME_WAIT &&
  11ff98:	e51b3008 	ldr	r3, [fp, #-8]
  11ff9c:	e5933014 	ldr	r3, [r3, #20]
  if (pcb->state != CLOSED &&
  11ffa0:	e353000a 	cmp	r3, #10
  11ffa4:	0a00002a 	beq	120054 <tcp_pcb_purge+0xdc>
     pcb->state != LISTEN) {
  11ffa8:	e51b3008 	ldr	r3, [fp, #-8]
  11ffac:	e5933014 	ldr	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
  11ffb0:	e3530001 	cmp	r3, #1
  11ffb4:	0a000026 	beq	120054 <tcp_pcb_purge+0xdc>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
  11ffb8:	e51b3008 	ldr	r3, [fp, #-8]
  11ffbc:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  11ffc0:	e3530000 	cmp	r3, #0
  11ffc4:	0a000006 	beq	11ffe4 <tcp_pcb_purge+0x6c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
  11ffc8:	e51b3008 	ldr	r3, [fp, #-8]
  11ffcc:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  11ffd0:	e1a00003 	mov	r0, r3
  11ffd4:	ebffec30 	bl	11b09c <pbuf_free>
      pcb->refused_data = NULL;
  11ffd8:	e51b3008 	ldr	r3, [fp, #-8]
  11ffdc:	e3a02000 	mov	r2, #0
  11ffe0:	e5832078 	str	r2, [r3, #120]	; 0x78
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
  11ffe4:	e51b3008 	ldr	r3, [fp, #-8]
  11ffe8:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  11ffec:	e1a00003 	mov	r0, r3
  11fff0:	ebfffd89 	bl	11f61c <tcp_segs_free>
    pcb->ooseq = NULL;
  11fff4:	e51b3008 	ldr	r3, [fp, #-8]
  11fff8:	e3a02000 	mov	r2, #0
  11fffc:	e5832074 	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
  120000:	e51b3008 	ldr	r3, [fp, #-8]
  120004:	e3e02000 	mvn	r2, #0
  120008:	e1c323b4 	strh	r2, [r3, #52]	; 0x34

    tcp_segs_free(pcb->unsent);
  12000c:	e51b3008 	ldr	r3, [fp, #-8]
  120010:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  120014:	e1a00003 	mov	r0, r3
  120018:	ebfffd7f 	bl	11f61c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
  12001c:	e51b3008 	ldr	r3, [fp, #-8]
  120020:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  120024:	e1a00003 	mov	r0, r3
  120028:	ebfffd7b 	bl	11f61c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
  12002c:	e51b3008 	ldr	r3, [fp, #-8]
  120030:	e3a02000 	mov	r2, #0
  120034:	e583206c 	str	r2, [r3, #108]	; 0x6c
  120038:	e51b3008 	ldr	r3, [fp, #-8]
  12003c:	e593206c 	ldr	r2, [r3, #108]	; 0x6c
  120040:	e51b3008 	ldr	r3, [fp, #-8]
  120044:	e5832070 	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
  120048:	e51b3008 	ldr	r3, [fp, #-8]
  12004c:	e3a02000 	mov	r2, #0
  120050:	e1c326b8 	strh	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
  120054:	e320f000 	nop	{0}
  120058:	e24bd004 	sub	sp, fp, #4
  12005c:	e8bd8800 	pop	{fp, pc}

00120060 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
  120060:	e92d4800 	push	{fp, lr}
  120064:	e28db004 	add	fp, sp, #4
  120068:	e24dd010 	sub	sp, sp, #16
  12006c:	e50b0010 	str	r0, [fp, #-16]
  120070:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  TCP_RMV(pcblist, pcb);
  120074:	e51b3010 	ldr	r3, [fp, #-16]
  120078:	e5933000 	ldr	r3, [r3]
  12007c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  120080:	e1520003 	cmp	r2, r3
  120084:	1a000005 	bne	1200a0 <tcp_pcb_remove+0x40>
  120088:	e51b3010 	ldr	r3, [fp, #-16]
  12008c:	e5933000 	ldr	r3, [r3]
  120090:	e593200c 	ldr	r2, [r3, #12]
  120094:	e51b3010 	ldr	r3, [fp, #-16]
  120098:	e5832000 	str	r2, [r3]
  12009c:	ea000013 	b	1200f0 <tcp_pcb_remove+0x90>
  1200a0:	e51b3010 	ldr	r3, [fp, #-16]
  1200a4:	e5933000 	ldr	r3, [r3]
  1200a8:	e50b3008 	str	r3, [fp, #-8]
  1200ac:	ea00000c 	b	1200e4 <tcp_pcb_remove+0x84>
  1200b0:	e51b3008 	ldr	r3, [fp, #-8]
  1200b4:	e593300c 	ldr	r3, [r3, #12]
  1200b8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1200bc:	e1520003 	cmp	r2, r3
  1200c0:	1a000004 	bne	1200d8 <tcp_pcb_remove+0x78>
  1200c4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1200c8:	e593200c 	ldr	r2, [r3, #12]
  1200cc:	e51b3008 	ldr	r3, [fp, #-8]
  1200d0:	e583200c 	str	r2, [r3, #12]
  1200d4:	ea000005 	b	1200f0 <tcp_pcb_remove+0x90>
  1200d8:	e51b3008 	ldr	r3, [fp, #-8]
  1200dc:	e593300c 	ldr	r3, [r3, #12]
  1200e0:	e50b3008 	str	r3, [fp, #-8]
  1200e4:	e51b3008 	ldr	r3, [fp, #-8]
  1200e8:	e3530000 	cmp	r3, #0
  1200ec:	1affffef 	bne	1200b0 <tcp_pcb_remove+0x50>
  1200f0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1200f4:	e3a02000 	mov	r2, #0
  1200f8:	e583200c 	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
  1200fc:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  120100:	ebffff9c 	bl	11ff78 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
  120104:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  120108:	e5933014 	ldr	r3, [r3, #20]
  12010c:	e353000a 	cmp	r3, #10
  120110:	0a000010 	beq	120158 <tcp_pcb_remove+0xf8>
     pcb->state != LISTEN &&
  120114:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  120118:	e5933014 	ldr	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
  12011c:	e3530001 	cmp	r3, #1
  120120:	0a00000c 	beq	120158 <tcp_pcb_remove+0xf8>
     pcb->flags & TF_ACK_DELAY) {
  120124:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  120128:	e5d3301e 	ldrb	r3, [r3, #30]
  12012c:	e2033001 	and	r3, r3, #1
     pcb->state != LISTEN &&
  120130:	e3530000 	cmp	r3, #0
  120134:	0a000007 	beq	120158 <tcp_pcb_remove+0xf8>
    pcb->flags |= TF_ACK_NOW;
  120138:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12013c:	e5d3301e 	ldrb	r3, [r3, #30]
  120140:	e3833002 	orr	r3, r3, #2
  120144:	e6ef2073 	uxtb	r2, r3
  120148:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12014c:	e5c3201e 	strb	r2, [r3, #30]
    tcp_output(pcb);
  120150:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  120154:	eb0017fa 	bl	126144 <tcp_output>
  }

  if (pcb->state != LISTEN) {
  120158:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12015c:	e5933014 	ldr	r3, [r3, #20]
  120160:	e3530001 	cmp	r3, #1
  120164:	0a000020 	beq	1201ec <tcp_pcb_remove+0x18c>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
  120168:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12016c:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  120170:	e3530000 	cmp	r3, #0
  120174:	0a000006 	beq	120194 <tcp_pcb_remove+0x134>
  120178:	e308042c 	movw	r0, #33836	; 0x842c
  12017c:	e3400014 	movt	r0, #20
  120180:	ebff8be3 	bl	103114 <rt_kprintf>
  120184:	e300174e 	movw	r1, #1870	; 0x74e
  120188:	e30800ac 	movw	r0, #32940	; 0x80ac
  12018c:	e3400014 	movt	r0, #20
  120190:	ebffabb3 	bl	10b064 <sys_arch_assert>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
  120194:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  120198:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  12019c:	e3530000 	cmp	r3, #0
  1201a0:	0a000006 	beq	1201c0 <tcp_pcb_remove+0x160>
  1201a4:	e3080444 	movw	r0, #33860	; 0x8444
  1201a8:	e3400014 	movt	r0, #20
  1201ac:	ebff8bd8 	bl	103114 <rt_kprintf>
  1201b0:	e300174f 	movw	r1, #1871	; 0x74f
  1201b4:	e30800ac 	movw	r0, #32940	; 0x80ac
  1201b8:	e3400014 	movt	r0, #20
  1201bc:	ebffaba8 	bl	10b064 <sys_arch_assert>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
  1201c0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1201c4:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  1201c8:	e3530000 	cmp	r3, #0
  1201cc:	0a000006 	beq	1201ec <tcp_pcb_remove+0x18c>
  1201d0:	e3080460 	movw	r0, #33888	; 0x8460
  1201d4:	e3400014 	movt	r0, #20
  1201d8:	ebff8bcd 	bl	103114 <rt_kprintf>
  1201dc:	e3001751 	movw	r1, #1873	; 0x751
  1201e0:	e30800ac 	movw	r0, #32940	; 0x80ac
  1201e4:	e3400014 	movt	r0, #20
  1201e8:	ebffab9d 	bl	10b064 <sys_arch_assert>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
  1201ec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1201f0:	e3a02000 	mov	r2, #0
  1201f4:	e5832014 	str	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
  1201f8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1201fc:	e3a02000 	mov	r2, #0
  120200:	e1c321ba 	strh	r2, [r3, #26]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
  120204:	e320f000 	nop	{0}
  120208:	e24bd004 	sub	sp, fp, #4
  12020c:	e8bd8800 	pop	{fp, pc}

00120210 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
  120210:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  120214:	e28db000 	add	fp, sp, #0
  120218:	e24dd00c 	sub	sp, sp, #12
  12021c:	e50b0008 	str	r0, [fp, #-8]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
  120220:	e30e3034 	movw	r3, #57396	; 0xe034
  120224:	e3403014 	movt	r3, #20
  120228:	e5932000 	ldr	r2, [r3]
  12022c:	e3063a34 	movw	r3, #27188	; 0x6a34
  120230:	e3403057 	movt	r3, #87	; 0x57
  120234:	e5933000 	ldr	r3, [r3]
  120238:	e0822003 	add	r2, r2, r3
  12023c:	e30e3034 	movw	r3, #57396	; 0xe034
  120240:	e3403014 	movt	r3, #20
  120244:	e5832000 	str	r2, [r3]
  return iss;
  120248:	e30e3034 	movw	r3, #57396	; 0xe034
  12024c:	e3403014 	movt	r3, #20
  120250:	e5933000 	ldr	r3, [r3]
#endif /* LWIP_HOOK_TCP_ISN */
}
  120254:	e1a00003 	mov	r0, r3
  120258:	e28bd000 	add	sp, fp, #0
  12025c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  120260:	e12fff1e 	bx	lr

00120264 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
  120264:	e92d4800 	push	{fp, lr}
  120268:	e28db004 	add	fp, sp, #4
  12026c:	e24dd010 	sub	sp, sp, #16
  120270:	e1a03000 	mov	r3, r0
  120274:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  120278:	e14b30be 	strh	r3, [fp, #-14]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
  12027c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  120280:	eb00443c 	bl	131378 <ip4_route>
  120284:	e50b0008 	str	r0, [fp, #-8]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
  120288:	e51b3008 	ldr	r3, [fp, #-8]
  12028c:	e3530000 	cmp	r3, #0
  120290:	1a000001 	bne	12029c <tcp_eff_send_mss_impl+0x38>
      return sendmss;
  120294:	e15b30be 	ldrh	r3, [fp, #-14]
  120298:	ea00000f 	b	1202dc <tcp_eff_send_mss_impl+0x78>
    }
    mtu = outif->mtu;
  12029c:	e51b3008 	ldr	r3, [fp, #-8]
  1202a0:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  1202a4:	e14b30ba 	strh	r3, [fp, #-10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
  1202a8:	e15b30fa 	ldrsh	r3, [fp, #-10]
  1202ac:	e3530000 	cmp	r3, #0
  1202b0:	0a000008 	beq	1202d8 <tcp_eff_send_mss_impl+0x74>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
  1202b4:	e15b30ba 	ldrh	r3, [fp, #-10]
  1202b8:	e2433028 	sub	r3, r3, #40	; 0x28
  1202bc:	e14b30bc 	strh	r3, [fp, #-12]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
  1202c0:	e15b20bc 	ldrh	r2, [fp, #-12]
  1202c4:	e15b30be 	ldrh	r3, [fp, #-14]
  1202c8:	e1520003 	cmp	r2, r3
  1202cc:	31a03002 	movcc	r3, r2
  1202d0:	21a03003 	movcs	r3, r3
  1202d4:	e14b30be 	strh	r3, [fp, #-14]
  }
  return sendmss;
  1202d8:	e15b30be 	ldrh	r3, [fp, #-14]
}
  1202dc:	e1a00003 	mov	r0, r3
  1202e0:	e24bd004 	sub	sp, fp, #4
  1202e4:	e8bd8800 	pop	{fp, pc}

001202e8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
  1202e8:	e92d4800 	push	{fp, lr}
  1202ec:	e28db004 	add	fp, sp, #4
  1202f0:	e24dd010 	sub	sp, sp, #16
  1202f4:	e50b0010 	str	r0, [fp, #-16]
  1202f8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct tcp_pcb *pcb;
  pcb = pcb_list;
  1202fc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  120300:	e50b3008 	str	r3, [fp, #-8]
  while (pcb != NULL) {
  120304:	ea000010 	b	12034c <tcp_netif_ip_addr_changed_pcblist+0x64>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
  120308:	e51b3008 	ldr	r3, [fp, #-8]
  12030c:	e5932000 	ldr	r2, [r3]
  120310:	e51b3010 	ldr	r3, [fp, #-16]
  120314:	e5933000 	ldr	r3, [r3]
  120318:	e1520003 	cmp	r2, r3
  12031c:	1a000007 	bne	120340 <tcp_netif_ip_addr_changed_pcblist+0x58>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
  120320:	e51b3008 	ldr	r3, [fp, #-8]
  120324:	e593300c 	ldr	r3, [r3, #12]
  120328:	e50b300c 	str	r3, [fp, #-12]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
  12032c:	e51b0008 	ldr	r0, [fp, #-8]
  120330:	ebfff633 	bl	11dc04 <tcp_abort>
      pcb = next;
  120334:	e51b300c 	ldr	r3, [fp, #-12]
  120338:	e50b3008 	str	r3, [fp, #-8]
  12033c:	ea000002 	b	12034c <tcp_netif_ip_addr_changed_pcblist+0x64>
    } else {
      pcb = pcb->next;
  120340:	e51b3008 	ldr	r3, [fp, #-8]
  120344:	e593300c 	ldr	r3, [r3, #12]
  120348:	e50b3008 	str	r3, [fp, #-8]
  while (pcb != NULL) {
  12034c:	e51b3008 	ldr	r3, [fp, #-8]
  120350:	e3530000 	cmp	r3, #0
  120354:	1affffeb 	bne	120308 <tcp_netif_ip_addr_changed_pcblist+0x20>
    }
  }
}
  120358:	e320f000 	nop	{0}
  12035c:	e24bd004 	sub	sp, fp, #4
  120360:	e8bd8800 	pop	{fp, pc}

00120364 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
  120364:	e92d4800 	push	{fp, lr}
  120368:	e28db004 	add	fp, sp, #4
  12036c:	e24dd010 	sub	sp, sp, #16
  120370:	e50b0010 	str	r0, [fp, #-16]
  120374:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
  120378:	e51b3010 	ldr	r3, [fp, #-16]
  12037c:	e3530000 	cmp	r3, #0
  120380:	0a00002d 	beq	12043c <tcp_netif_ip_addr_changed+0xd8>
  120384:	e51b3010 	ldr	r3, [fp, #-16]
  120388:	e5933000 	ldr	r3, [r3]
  12038c:	e3530000 	cmp	r3, #0
  120390:	0a000029 	beq	12043c <tcp_netif_ip_addr_changed+0xd8>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
  120394:	e3063a30 	movw	r3, #27184	; 0x6a30
  120398:	e3403057 	movt	r3, #87	; 0x57
  12039c:	e5933000 	ldr	r3, [r3]
  1203a0:	e1a01003 	mov	r1, r3
  1203a4:	e51b0010 	ldr	r0, [fp, #-16]
  1203a8:	ebffffce 	bl	1202e8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
  1203ac:	e3063a3c 	movw	r3, #27196	; 0x6a3c
  1203b0:	e3403057 	movt	r3, #87	; 0x57
  1203b4:	e5933000 	ldr	r3, [r3]
  1203b8:	e1a01003 	mov	r1, r3
  1203bc:	e51b0010 	ldr	r0, [fp, #-16]
  1203c0:	ebffffc8 	bl	1202e8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
  1203c4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1203c8:	e3530000 	cmp	r3, #0
  1203cc:	0a00001a 	beq	12043c <tcp_netif_ip_addr_changed+0xd8>
  1203d0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1203d4:	e5933000 	ldr	r3, [r3]
  1203d8:	e3530000 	cmp	r3, #0
  1203dc:	0a000016 	beq	12043c <tcp_netif_ip_addr_changed+0xd8>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
  1203e0:	e3063a38 	movw	r3, #27192	; 0x6a38
  1203e4:	e3403057 	movt	r3, #87	; 0x57
  1203e8:	e5933000 	ldr	r3, [r3]
  1203ec:	e50b3008 	str	r3, [fp, #-8]
  1203f0:	ea00000e 	b	120430 <tcp_netif_ip_addr_changed+0xcc>
        next = lpcb->next;
  1203f4:	e51b3008 	ldr	r3, [fp, #-8]
  1203f8:	e593300c 	ldr	r3, [r3, #12]
  1203fc:	e50b300c 	str	r3, [fp, #-12]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
  120400:	e51b3008 	ldr	r3, [fp, #-8]
  120404:	e5932000 	ldr	r2, [r3]
  120408:	e51b3010 	ldr	r3, [fp, #-16]
  12040c:	e5933000 	ldr	r3, [r3]
  120410:	e1520003 	cmp	r2, r3
  120414:	1a000003 	bne	120428 <tcp_netif_ip_addr_changed+0xc4>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
  120418:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12041c:	e5932000 	ldr	r2, [r3]
  120420:	e51b3008 	ldr	r3, [fp, #-8]
  120424:	e5832000 	str	r2, [r3]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
  120428:	e51b300c 	ldr	r3, [fp, #-12]
  12042c:	e50b3008 	str	r3, [fp, #-8]
  120430:	e51b3008 	ldr	r3, [fp, #-8]
  120434:	e3530000 	cmp	r3, #0
  120438:	1affffed 	bne	1203f4 <tcp_netif_ip_addr_changed+0x90>
        }
      }
    }
  }
}
  12043c:	e320f000 	nop	{0}
  120440:	e24bd004 	sub	sp, fp, #4
  120444:	e8bd8800 	pop	{fp, pc}

00120448 <tcp_debug_state_str>:

const char*
tcp_debug_state_str(enum tcp_state s)
{
  120448:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  12044c:	e28db000 	add	fp, sp, #0
  120450:	e24dd00c 	sub	sp, sp, #12
  120454:	e50b0008 	str	r0, [fp, #-8]
  return tcp_state_str[s];
  120458:	e308304c 	movw	r3, #32844	; 0x804c
  12045c:	e3403014 	movt	r3, #20
  120460:	e51b2008 	ldr	r2, [fp, #-8]
  120464:	e7933102 	ldr	r3, [r3, r2, lsl #2]
}
  120468:	e1a00003 	mov	r0, r3
  12046c:	e28bd000 	add	sp, fp, #0
  120470:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  120474:	e12fff1e 	bx	lr

00120478 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
  120478:	e92d4810 	push	{r4, fp, lr}
  12047c:	e28db008 	add	fp, sp, #8
  120480:	e24dd034 	sub	sp, sp, #52	; 0x34
  120484:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  120488:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
  struct tcp_pcb *pcb, *prev;
  struct tcp_pcb_listen *lpcb;
#if SO_REUSE
  struct tcp_pcb *lpcb_prev = NULL;
  12048c:	e3a03000 	mov	r3, #0
  120490:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  struct tcp_pcb_listen *lpcb_any = NULL;
  120494:	e3a03000 	mov	r3, #0
  120498:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0

  LWIP_UNUSED_ARG(inp);

  PERF_START;

  TCP_STATS_INC(tcp.recv);
  12049c:	e3063840 	movw	r3, #26688	; 0x6840
  1204a0:	e3403057 	movt	r3, #87	; 0x57
  1204a4:	e1d33abe 	ldrh	r3, [r3, #174]	; 0xae
  1204a8:	e2833001 	add	r3, r3, #1
  1204ac:	e6ff2073 	uxth	r2, r3
  1204b0:	e3063840 	movw	r3, #26688	; 0x6840
  1204b4:	e3403057 	movt	r3, #87	; 0x57
  1204b8:	e1c32abe 	strh	r2, [r3, #174]	; 0xae
  MIB2_STATS_INC(mib2.tcpinsegs);
  1204bc:	e3063840 	movw	r3, #26688	; 0x6840
  1204c0:	e3403057 	movt	r3, #87	; 0x57
  1204c4:	e5933184 	ldr	r3, [r3, #388]	; 0x184
  1204c8:	e2832001 	add	r2, r3, #1
  1204cc:	e3063840 	movw	r3, #26688	; 0x6840
  1204d0:	e3403057 	movt	r3, #87	; 0x57
  1204d4:	e5832184 	str	r2, [r3, #388]	; 0x184

  tcphdr = (struct tcp_hdr *)p->payload;
  1204d8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1204dc:	e5932004 	ldr	r2, [r3, #4]
  1204e0:	e30f3230 	movw	r3, #62000	; 0xf230
  1204e4:	e3403014 	movt	r3, #20
  1204e8:	e5832000 	str	r2, [r3]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
  1204ec:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1204f0:	e1d330ba 	ldrh	r3, [r3, #10]
  1204f4:	e3530013 	cmp	r3, #19
  1204f8:	8a000008 	bhi	120520 <tcp_input+0xa8>
    /* drop short packets */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: short packet (%"U16_F" bytes) discarded\n", p->tot_len));
    TCP_STATS_INC(tcp.lenerr);
  1204fc:	e3063840 	movw	r3, #26688	; 0x6840
  120500:	e3403057 	movt	r3, #87	; 0x57
  120504:	e1d33bb6 	ldrh	r3, [r3, #182]	; 0xb6
  120508:	e2833001 	add	r3, r3, #1
  12050c:	e6ff2073 	uxth	r2, r3
  120510:	e3063840 	movw	r3, #26688	; 0x6840
  120514:	e3403057 	movt	r3, #87	; 0x57
  120518:	e1c32bb6 	strh	r2, [r3, #182]	; 0xb6
    goto dropped;
  12051c:	ea0003d2 	b	12146c <tcp_input+0xff4>
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
  120520:	e30035e8 	movw	r3, #1512	; 0x5e8
  120524:	e3403015 	movt	r3, #21
  120528:	e5932014 	ldr	r2, [r3, #20]
  12052c:	e30035e8 	movw	r3, #1512	; 0x5e8
  120530:	e3403015 	movt	r3, #21
  120534:	e5933000 	ldr	r3, [r3]
  120538:	e1a01003 	mov	r1, r3
  12053c:	e1a00002 	mov	r0, r2
  120540:	eb00486b 	bl	1326f4 <ip4_addr_isbroadcast_u32>
  120544:	e1a03000 	mov	r3, r0
  120548:	e3530000 	cmp	r3, #0
  12054c:	1a000005 	bne	120568 <tcp_input+0xf0>
      ip_addr_ismulticast(ip_current_dest_addr())) {
  120550:	e30035e8 	movw	r3, #1512	; 0x5e8
  120554:	e3403015 	movt	r3, #21
  120558:	e5933014 	ldr	r3, [r3, #20]
  12055c:	e20330f0 	and	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
  120560:	e35300e0 	cmp	r3, #224	; 0xe0
  120564:	1a000008 	bne	12058c <tcp_input+0x114>
    TCP_STATS_INC(tcp.proterr);
  120568:	e3063840 	movw	r3, #26688	; 0x6840
  12056c:	e3403057 	movt	r3, #87	; 0x57
  120570:	e1d33bbc 	ldrh	r3, [r3, #188]	; 0xbc
  120574:	e2833001 	add	r3, r3, #1
  120578:	e6ff2073 	uxth	r2, r3
  12057c:	e3063840 	movw	r3, #26688	; 0x6840
  120580:	e3403057 	movt	r3, #87	; 0x57
  120584:	e1c32bbc 	strh	r2, [r3, #188]	; 0xbc
    goto dropped;
  120588:	ea0003b7 	b	12146c <tcp_input+0xff4>
  }

#if CHECKSUM_CHECK_TCP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_TCP) {
    /* Verify TCP checksum. */
    u16_t chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
  12058c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  120590:	e1d320b8 	ldrh	r2, [r3, #8]
  120594:	e59f3f24 	ldr	r3, [pc, #3876]	; 1214c0 <tcp_input+0x1048>
  120598:	e58d3000 	str	r3, [sp]
  12059c:	e59f3f20 	ldr	r3, [pc, #3872]	; 1214c4 <tcp_input+0x104c>
  1205a0:	e3a01006 	mov	r1, #6
  1205a4:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  1205a8:	ebffe0a3 	bl	11883c <ip_chksum_pseudo>
  1205ac:	e1a03000 	mov	r3, r0
  1205b0:	e14b32b4 	strh	r3, [fp, #-36]	; 0xffffffdc
                               ip_current_src_addr(), ip_current_dest_addr());
    if (chksum != 0) {
  1205b4:	e15b32b4 	ldrh	r3, [fp, #-36]	; 0xffffffdc
  1205b8:	e3530000 	cmp	r3, #0
  1205bc:	0a000008 	beq	1205e4 <tcp_input+0x16c>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packet discarded due to failing checksum 0x%04"X16_F"\n",
          chksum));
      tcp_debug_print(tcphdr);
      TCP_STATS_INC(tcp.chkerr);
  1205c0:	e3063840 	movw	r3, #26688	; 0x6840
  1205c4:	e3403057 	movt	r3, #87	; 0x57
  1205c8:	e1d33bb4 	ldrh	r3, [r3, #180]	; 0xb4
  1205cc:	e2833001 	add	r3, r3, #1
  1205d0:	e6ff2073 	uxth	r2, r3
  1205d4:	e3063840 	movw	r3, #26688	; 0x6840
  1205d8:	e3403057 	movt	r3, #87	; 0x57
  1205dc:	e1c32bb4 	strh	r2, [r3, #180]	; 0xb4
      goto dropped;
  1205e0:	ea0003a1 	b	12146c <tcp_input+0xff4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
  1205e4:	e30f3230 	movw	r3, #62000	; 0xf230
  1205e8:	e3403014 	movt	r3, #20
  1205ec:	e5933000 	ldr	r3, [r3]
  1205f0:	e1d330bc 	ldrh	r3, [r3, #12]
  1205f4:	e6ff3073 	uxth	r3, r3
  1205f8:	e1a00003 	mov	r0, r3
  1205fc:	ebffd86f 	bl	1167c0 <lwip_htons>
  120600:	e1a03000 	mov	r3, r0
  120604:	e1a03623 	lsr	r3, r3, #12
  120608:	e6ff3073 	uxth	r3, r3
  12060c:	e6ef3073 	uxtb	r3, r3
  120610:	e1a03103 	lsl	r3, r3, #2
  120614:	e54b3025 	strb	r3, [fp, #-37]	; 0xffffffdb
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
  120618:	e55b3025 	ldrb	r3, [fp, #-37]	; 0xffffffdb
  12061c:	e3530013 	cmp	r3, #19
  120620:	9a000005 	bls	12063c <tcp_input+0x1c4>
  120624:	e55b3025 	ldrb	r3, [fp, #-37]	; 0xffffffdb
  120628:	e6ff2073 	uxth	r2, r3
  12062c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  120630:	e1d330b8 	ldrh	r3, [r3, #8]
  120634:	e1520003 	cmp	r2, r3
  120638:	9a000008 	bls	120660 <tcp_input+0x1e8>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: invalid header length (%"U16_F")\n", (u16_t)hdrlen_bytes));
    TCP_STATS_INC(tcp.lenerr);
  12063c:	e3063840 	movw	r3, #26688	; 0x6840
  120640:	e3403057 	movt	r3, #87	; 0x57
  120644:	e1d33bb6 	ldrh	r3, [r3, #182]	; 0xb6
  120648:	e2833001 	add	r3, r3, #1
  12064c:	e6ff2073 	uxth	r2, r3
  120650:	e3063840 	movw	r3, #26688	; 0x6840
  120654:	e3403057 	movt	r3, #87	; 0x57
  120658:	e1c32bb6 	strh	r2, [r3, #182]	; 0xb6
    goto dropped;
  12065c:	ea000382 	b	12146c <tcp_input+0xff4>
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
  120660:	e55b3025 	ldrb	r3, [fp, #-37]	; 0xffffffdb
  120664:	e6ff3073 	uxth	r3, r3
  120668:	e2433014 	sub	r3, r3, #20
  12066c:	e6ff2073 	uxth	r2, r3
  120670:	e30f3234 	movw	r3, #62004	; 0xf234
  120674:	e3403014 	movt	r3, #20
  120678:	e1c320b0 	strh	r2, [r3]
  tcphdr_opt2 = NULL;
  12067c:	e30f3238 	movw	r3, #62008	; 0xf238
  120680:	e3403014 	movt	r3, #20
  120684:	e3a02000 	mov	r2, #0
  120688:	e5832000 	str	r2, [r3]
  if (p->len >= hdrlen_bytes) {
  12068c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  120690:	e1d320ba 	ldrh	r2, [r3, #10]
  120694:	e55b3025 	ldrb	r3, [fp, #-37]	; 0xffffffdb
  120698:	e6ff3073 	uxth	r3, r3
  12069c:	e1520003 	cmp	r2, r3
  1206a0:	3a00000e 	bcc	1206e0 <tcp_input+0x268>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
  1206a4:	e30f3234 	movw	r3, #62004	; 0xf234
  1206a8:	e3403014 	movt	r3, #20
  1206ac:	e1d320b0 	ldrh	r2, [r3]
  1206b0:	e30f3236 	movw	r3, #62006	; 0xf236
  1206b4:	e3403014 	movt	r3, #20
  1206b8:	e1c320b0 	strh	r2, [r3]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
  1206bc:	e55b3025 	ldrb	r3, [fp, #-37]	; 0xffffffdb
  1206c0:	e6ff3073 	uxth	r3, r3
  1206c4:	e2633000 	rsb	r3, r3, #0
  1206c8:	e6ff3073 	uxth	r3, r3
  1206cc:	e6bf3073 	sxth	r3, r3
  1206d0:	e1a01003 	mov	r1, r3
  1206d4:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  1206d8:	ebffea51 	bl	11b024 <pbuf_header>
  1206dc:	ea000061 	b	120868 <tcp_input+0x3f0>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
  1206e0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1206e4:	e5933000 	ldr	r3, [r3]
  1206e8:	e3530000 	cmp	r3, #0
  1206ec:	1a000006 	bne	12070c <tcp_input+0x294>
  1206f0:	e3080478 	movw	r0, #33912	; 0x8478
  1206f4:	e3400014 	movt	r0, #20
  1206f8:	ebff8a85 	bl	103114 <rt_kprintf>
  1206fc:	e3a010b0 	mov	r1, #176	; 0xb0
  120700:	e3080488 	movw	r0, #33928	; 0x8488
  120704:	e3400014 	movt	r0, #20
  120708:	ebffaa55 	bl	10b064 <sys_arch_assert>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
  12070c:	e3e01013 	mvn	r1, #19
  120710:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  120714:	ebffea42 	bl	11b024 <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
  120718:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12071c:	e1d320ba 	ldrh	r2, [r3, #10]
  120720:	e30f3236 	movw	r3, #62006	; 0xf236
  120724:	e3403014 	movt	r3, #20
  120728:	e1c320b0 	strh	r2, [r3]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
  12072c:	e30f3234 	movw	r3, #62004	; 0xf234
  120730:	e3403014 	movt	r3, #20
  120734:	e1d320b0 	ldrh	r2, [r3]
  120738:	e30f3236 	movw	r3, #62006	; 0xf236
  12073c:	e3403014 	movt	r3, #20
  120740:	e1d330b0 	ldrh	r3, [r3]
  120744:	e0423003 	sub	r3, r2, r3
  120748:	e14b32b8 	strh	r3, [fp, #-40]	; 0xffffffd8

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
  12074c:	e30f3236 	movw	r3, #62006	; 0xf236
  120750:	e3403014 	movt	r3, #20
  120754:	e1d330b0 	ldrh	r3, [r3]
  120758:	e2633000 	rsb	r3, r3, #0
  12075c:	e6ff3073 	uxth	r3, r3
  120760:	e6bf3073 	sxth	r3, r3
  120764:	e1a01003 	mov	r1, r3
  120768:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  12076c:	ebffea2c 	bl	11b024 <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
  120770:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  120774:	e5933000 	ldr	r3, [r3]
  120778:	e1d330ba 	ldrh	r3, [r3, #10]
  12077c:	e15b22b8 	ldrh	r2, [fp, #-40]	; 0xffffffd8
  120780:	e1520003 	cmp	r2, r3
  120784:	9a000008 	bls	1207ac <tcp_input+0x334>
      /* drop short packets */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: options overflow second pbuf (%"U16_F" bytes)\n", p->next->len));
      TCP_STATS_INC(tcp.lenerr);
  120788:	e3063840 	movw	r3, #26688	; 0x6840
  12078c:	e3403057 	movt	r3, #87	; 0x57
  120790:	e1d33bb6 	ldrh	r3, [r3, #182]	; 0xb6
  120794:	e2833001 	add	r3, r3, #1
  120798:	e6ff2073 	uxth	r2, r3
  12079c:	e3063840 	movw	r3, #26688	; 0x6840
  1207a0:	e3403057 	movt	r3, #87	; 0x57
  1207a4:	e1c32bb6 	strh	r2, [r3, #182]	; 0xb6
      goto dropped;
  1207a8:	ea00032f 	b	12146c <tcp_input+0xff4>
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
  1207ac:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1207b0:	e5933000 	ldr	r3, [r3]
  1207b4:	e5932004 	ldr	r2, [r3, #4]
  1207b8:	e30f3238 	movw	r3, #62008	; 0xf238
  1207bc:	e3403014 	movt	r3, #20
  1207c0:	e5832000 	str	r2, [r3]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
  1207c4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1207c8:	e5932000 	ldr	r2, [r3]
  1207cc:	e15b32b8 	ldrh	r3, [fp, #-40]	; 0xffffffd8
  1207d0:	e2633000 	rsb	r3, r3, #0
  1207d4:	e6ff3073 	uxth	r3, r3
  1207d8:	e6bf3073 	sxth	r3, r3
  1207dc:	e1a01003 	mov	r1, r3
  1207e0:	e1a00002 	mov	r0, r2
  1207e4:	ebffea0e 	bl	11b024 <pbuf_header>
    p->tot_len -= opt2len;
  1207e8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1207ec:	e1d320b8 	ldrh	r2, [r3, #8]
  1207f0:	e15b32b8 	ldrh	r3, [fp, #-40]	; 0xffffffd8
  1207f4:	e0423003 	sub	r3, r2, r3
  1207f8:	e6ff2073 	uxth	r2, r3
  1207fc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  120800:	e1c320b8 	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
  120804:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  120808:	e1d330ba 	ldrh	r3, [r3, #10]
  12080c:	e3530000 	cmp	r3, #0
  120810:	0a000006 	beq	120830 <tcp_input+0x3b8>
  120814:	e30804b8 	movw	r0, #33976	; 0x84b8
  120818:	e3400014 	movt	r0, #20
  12081c:	ebff8a3c 	bl	103114 <rt_kprintf>
  120820:	e3a010cd 	mov	r1, #205	; 0xcd
  120824:	e3080488 	movw	r0, #33928	; 0x8488
  120828:	e3400014 	movt	r0, #20
  12082c:	ebffaa0c 	bl	10b064 <sys_arch_assert>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
  120830:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  120834:	e1d320b8 	ldrh	r2, [r3, #8]
  120838:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12083c:	e5933000 	ldr	r3, [r3]
  120840:	e1d330b8 	ldrh	r3, [r3, #8]
  120844:	e1520003 	cmp	r2, r3
  120848:	0a000006 	beq	120868 <tcp_input+0x3f0>
  12084c:	e30804c4 	movw	r0, #33988	; 0x84c4
  120850:	e3400014 	movt	r0, #20
  120854:	ebff8a2e 	bl	103114 <rt_kprintf>
  120858:	e3a010ce 	mov	r1, #206	; 0xce
  12085c:	e3080488 	movw	r0, #33928	; 0x8488
  120860:	e3400014 	movt	r0, #20
  120864:	ebffa9fe 	bl	10b064 <sys_arch_assert>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
  120868:	e30f3230 	movw	r3, #62000	; 0xf230
  12086c:	e3403014 	movt	r3, #20
  120870:	e5933000 	ldr	r3, [r3]
  120874:	e1d330b0 	ldrh	r3, [r3]
  120878:	e6ff2073 	uxth	r2, r3
  12087c:	e30f3230 	movw	r3, #62000	; 0xf230
  120880:	e3403014 	movt	r3, #20
  120884:	e5934000 	ldr	r4, [r3]
  120888:	e1a00002 	mov	r0, r2
  12088c:	ebffd7cb 	bl	1167c0 <lwip_htons>
  120890:	e1a03000 	mov	r3, r0
  120894:	e1c430b0 	strh	r3, [r4]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
  120898:	e30f3230 	movw	r3, #62000	; 0xf230
  12089c:	e3403014 	movt	r3, #20
  1208a0:	e5933000 	ldr	r3, [r3]
  1208a4:	e1d330b2 	ldrh	r3, [r3, #2]
  1208a8:	e6ff2073 	uxth	r2, r3
  1208ac:	e30f3230 	movw	r3, #62000	; 0xf230
  1208b0:	e3403014 	movt	r3, #20
  1208b4:	e5934000 	ldr	r4, [r3]
  1208b8:	e1a00002 	mov	r0, r2
  1208bc:	ebffd7bf 	bl	1167c0 <lwip_htons>
  1208c0:	e1a03000 	mov	r3, r0
  1208c4:	e1c430b2 	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
  1208c8:	e30f3230 	movw	r3, #62000	; 0xf230
  1208cc:	e3403014 	movt	r3, #20
  1208d0:	e5933000 	ldr	r3, [r3]
  1208d4:	e5932004 	ldr	r2, [r3, #4]
  1208d8:	e30f3230 	movw	r3, #62000	; 0xf230
  1208dc:	e3403014 	movt	r3, #20
  1208e0:	e5934000 	ldr	r4, [r3]
  1208e4:	e1a00002 	mov	r0, r2
  1208e8:	ebffd7c0 	bl	1167f0 <lwip_htonl>
  1208ec:	e1a03000 	mov	r3, r0
  1208f0:	e5843004 	str	r3, [r4, #4]
  1208f4:	e5942004 	ldr	r2, [r4, #4]
  1208f8:	e30f3240 	movw	r3, #62016	; 0xf240
  1208fc:	e3403014 	movt	r3, #20
  120900:	e5832000 	str	r2, [r3]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
  120904:	e30f3230 	movw	r3, #62000	; 0xf230
  120908:	e3403014 	movt	r3, #20
  12090c:	e5933000 	ldr	r3, [r3]
  120910:	e5932008 	ldr	r2, [r3, #8]
  120914:	e30f3230 	movw	r3, #62000	; 0xf230
  120918:	e3403014 	movt	r3, #20
  12091c:	e5934000 	ldr	r4, [r3]
  120920:	e1a00002 	mov	r0, r2
  120924:	ebffd7b1 	bl	1167f0 <lwip_htonl>
  120928:	e1a03000 	mov	r3, r0
  12092c:	e5843008 	str	r3, [r4, #8]
  120930:	e5942008 	ldr	r2, [r4, #8]
  120934:	e30f3244 	movw	r3, #62020	; 0xf244
  120938:	e3403014 	movt	r3, #20
  12093c:	e5832000 	str	r2, [r3]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
  120940:	e30f3230 	movw	r3, #62000	; 0xf230
  120944:	e3403014 	movt	r3, #20
  120948:	e5933000 	ldr	r3, [r3]
  12094c:	e1d330be 	ldrh	r3, [r3, #14]
  120950:	e6ff2073 	uxth	r2, r3
  120954:	e30f3230 	movw	r3, #62000	; 0xf230
  120958:	e3403014 	movt	r3, #20
  12095c:	e5934000 	ldr	r4, [r3]
  120960:	e1a00002 	mov	r0, r2
  120964:	ebffd795 	bl	1167c0 <lwip_htons>
  120968:	e1a03000 	mov	r3, r0
  12096c:	e1c430be 	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
  120970:	e30f3230 	movw	r3, #62000	; 0xf230
  120974:	e3403014 	movt	r3, #20
  120978:	e5933000 	ldr	r3, [r3]
  12097c:	e1d330bc 	ldrh	r3, [r3, #12]
  120980:	e6ff3073 	uxth	r3, r3
  120984:	e1a00003 	mov	r0, r3
  120988:	ebffd78c 	bl	1167c0 <lwip_htons>
  12098c:	e1a03000 	mov	r3, r0
  120990:	e6ef3073 	uxtb	r3, r3
  120994:	e203303f 	and	r3, r3, #63	; 0x3f
  120998:	e6ef2073 	uxtb	r2, r3
  12099c:	e30f324c 	movw	r3, #62028	; 0xf24c
  1209a0:	e3403014 	movt	r3, #20
  1209a4:	e5c32000 	strb	r2, [r3]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
  1209a8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1209ac:	e1d320b8 	ldrh	r2, [r3, #8]
  1209b0:	e30f324c 	movw	r3, #62028	; 0xf24c
  1209b4:	e3403014 	movt	r3, #20
  1209b8:	e5d33000 	ldrb	r3, [r3]
  1209bc:	e2033003 	and	r3, r3, #3
  1209c0:	e3530000 	cmp	r3, #0
  1209c4:	13a03001 	movne	r3, #1
  1209c8:	03a03000 	moveq	r3, #0
  1209cc:	e6ef3073 	uxtb	r3, r3
  1209d0:	e6ff3073 	uxth	r3, r3
  1209d4:	e0823003 	add	r3, r2, r3
  1209d8:	e6ff2073 	uxth	r2, r3
  1209dc:	e30f324a 	movw	r3, #62026	; 0xf24a
  1209e0:	e3403014 	movt	r3, #20
  1209e4:	e1c320b0 	strh	r2, [r3]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
  1209e8:	e3a03000 	mov	r3, #0
  1209ec:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  1209f0:	e3063a30 	movw	r3, #27184	; 0x6a30
  1209f4:	e3403057 	movt	r3, #87	; 0x57
  1209f8:	e5933000 	ldr	r3, [r3]
  1209fc:	e50b3010 	str	r3, [fp, #-16]
  120a00:	ea000077 	b	120be4 <tcp_input+0x76c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
  120a04:	e51b3010 	ldr	r3, [fp, #-16]
  120a08:	e5933014 	ldr	r3, [r3, #20]
  120a0c:	e3530000 	cmp	r3, #0
  120a10:	1a000006 	bne	120a30 <tcp_input+0x5b8>
  120a14:	e30804e4 	movw	r0, #34020	; 0x84e4
  120a18:	e3400014 	movt	r0, #20
  120a1c:	ebff89bc 	bl	103114 <rt_kprintf>
  120a20:	e3a010e0 	mov	r1, #224	; 0xe0
  120a24:	e3080488 	movw	r0, #33928	; 0x8488
  120a28:	e3400014 	movt	r0, #20
  120a2c:	ebffa98c 	bl	10b064 <sys_arch_assert>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
  120a30:	e51b3010 	ldr	r3, [fp, #-16]
  120a34:	e5933014 	ldr	r3, [r3, #20]
  120a38:	e353000a 	cmp	r3, #10
  120a3c:	1a000006 	bne	120a5c <tcp_input+0x5e4>
  120a40:	e308050c 	movw	r0, #34060	; 0x850c
  120a44:	e3400014 	movt	r0, #20
  120a48:	ebff89b1 	bl	103114 <rt_kprintf>
  120a4c:	e3a010e1 	mov	r1, #225	; 0xe1
  120a50:	e3080488 	movw	r0, #33928	; 0x8488
  120a54:	e3400014 	movt	r0, #20
  120a58:	ebffa981 	bl	10b064 <sys_arch_assert>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
  120a5c:	e51b3010 	ldr	r3, [fp, #-16]
  120a60:	e5933014 	ldr	r3, [r3, #20]
  120a64:	e3530001 	cmp	r3, #1
  120a68:	1a000006 	bne	120a88 <tcp_input+0x610>
  120a6c:	e3080538 	movw	r0, #34104	; 0x8538
  120a70:	e3400014 	movt	r0, #20
  120a74:	ebff89a6 	bl	103114 <rt_kprintf>
  120a78:	e3a010e2 	mov	r1, #226	; 0xe2
  120a7c:	e3080488 	movw	r0, #33928	; 0x8488
  120a80:	e3400014 	movt	r0, #20
  120a84:	ebffa976 	bl	10b064 <sys_arch_assert>
    if (pcb->remote_port == tcphdr->src &&
  120a88:	e51b3010 	ldr	r3, [fp, #-16]
  120a8c:	e1d321bc 	ldrh	r2, [r3, #28]
  120a90:	e30f3230 	movw	r3, #62000	; 0xf230
  120a94:	e3403014 	movt	r3, #20
  120a98:	e5933000 	ldr	r3, [r3]
  120a9c:	e1d330b0 	ldrh	r3, [r3]
  120aa0:	e6ff3073 	uxth	r3, r3
  120aa4:	e1520003 	cmp	r2, r3
  120aa8:	1a000048 	bne	120bd0 <tcp_input+0x758>
        pcb->local_port == tcphdr->dest &&
  120aac:	e51b3010 	ldr	r3, [fp, #-16]
  120ab0:	e1d321ba 	ldrh	r2, [r3, #26]
  120ab4:	e30f3230 	movw	r3, #62000	; 0xf230
  120ab8:	e3403014 	movt	r3, #20
  120abc:	e5933000 	ldr	r3, [r3]
  120ac0:	e1d330b2 	ldrh	r3, [r3, #2]
  120ac4:	e6ff3073 	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
  120ac8:	e1520003 	cmp	r2, r3
  120acc:	1a00003f 	bne	120bd0 <tcp_input+0x758>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
  120ad0:	e51b3010 	ldr	r3, [fp, #-16]
  120ad4:	e5932004 	ldr	r2, [r3, #4]
  120ad8:	e30035e8 	movw	r3, #1512	; 0x5e8
  120adc:	e3403015 	movt	r3, #21
  120ae0:	e5933010 	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
  120ae4:	e1520003 	cmp	r2, r3
  120ae8:	1a000038 	bne	120bd0 <tcp_input+0x758>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
  120aec:	e51b3010 	ldr	r3, [fp, #-16]
  120af0:	e5932000 	ldr	r2, [r3]
  120af4:	e30035e8 	movw	r3, #1512	; 0x5e8
  120af8:	e3403015 	movt	r3, #21
  120afc:	e5933014 	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
  120b00:	e1520003 	cmp	r2, r3
  120b04:	1a000031 	bne	120bd0 <tcp_input+0x758>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
  120b08:	e51b3010 	ldr	r3, [fp, #-16]
  120b0c:	e593300c 	ldr	r3, [r3, #12]
  120b10:	e51b2010 	ldr	r2, [fp, #-16]
  120b14:	e1520003 	cmp	r2, r3
  120b18:	1a000006 	bne	120b38 <tcp_input+0x6c0>
  120b1c:	e3080560 	movw	r0, #34144	; 0x8560
  120b20:	e3400014 	movt	r0, #20
  120b24:	ebff897a 	bl	103114 <rt_kprintf>
  120b28:	e3a010ea 	mov	r1, #234	; 0xea
  120b2c:	e3080488 	movw	r0, #33928	; 0x8488
  120b30:	e3400014 	movt	r0, #20
  120b34:	ebffa94a 	bl	10b064 <sys_arch_assert>
      if (prev != NULL) {
  120b38:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  120b3c:	e3530000 	cmp	r3, #0
  120b40:	0a00000d 	beq	120b7c <tcp_input+0x704>
        prev->next = pcb->next;
  120b44:	e51b3010 	ldr	r3, [fp, #-16]
  120b48:	e593200c 	ldr	r2, [r3, #12]
  120b4c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  120b50:	e583200c 	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
  120b54:	e3063a30 	movw	r3, #27184	; 0x6a30
  120b58:	e3403057 	movt	r3, #87	; 0x57
  120b5c:	e5932000 	ldr	r2, [r3]
  120b60:	e51b3010 	ldr	r3, [fp, #-16]
  120b64:	e583200c 	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
  120b68:	e3063a30 	movw	r3, #27184	; 0x6a30
  120b6c:	e3403057 	movt	r3, #87	; 0x57
  120b70:	e51b2010 	ldr	r2, [fp, #-16]
  120b74:	e5832000 	str	r2, [r3]
  120b78:	ea000007 	b	120b9c <tcp_input+0x724>
      } else {
        TCP_STATS_INC(tcp.cachehit);
  120b7c:	e3063840 	movw	r3, #26688	; 0x6840
  120b80:	e3403057 	movt	r3, #87	; 0x57
  120b84:	e1d33cb2 	ldrh	r3, [r3, #194]	; 0xc2
  120b88:	e2833001 	add	r3, r3, #1
  120b8c:	e6ff2073 	uxth	r2, r3
  120b90:	e3063840 	movw	r3, #26688	; 0x6840
  120b94:	e3403057 	movt	r3, #87	; 0x57
  120b98:	e1c32cb2 	strh	r2, [r3, #194]	; 0xc2
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
  120b9c:	e51b3010 	ldr	r3, [fp, #-16]
  120ba0:	e593300c 	ldr	r3, [r3, #12]
  120ba4:	e51b2010 	ldr	r2, [fp, #-16]
  120ba8:	e1520003 	cmp	r2, r3
  120bac:	1a000010 	bne	120bf4 <tcp_input+0x77c>
  120bb0:	e308058c 	movw	r0, #34188	; 0x858c
  120bb4:	e3400014 	movt	r0, #20
  120bb8:	ebff8955 	bl	103114 <rt_kprintf>
  120bbc:	e3a010f2 	mov	r1, #242	; 0xf2
  120bc0:	e3080488 	movw	r0, #33928	; 0x8488
  120bc4:	e3400014 	movt	r0, #20
  120bc8:	ebffa925 	bl	10b064 <sys_arch_assert>
      break;
  120bcc:	ea000008 	b	120bf4 <tcp_input+0x77c>
    }
    prev = pcb;
  120bd0:	e51b3010 	ldr	r3, [fp, #-16]
  120bd4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
  120bd8:	e51b3010 	ldr	r3, [fp, #-16]
  120bdc:	e593300c 	ldr	r3, [r3, #12]
  120be0:	e50b3010 	str	r3, [fp, #-16]
  120be4:	e51b3010 	ldr	r3, [fp, #-16]
  120be8:	e3530000 	cmp	r3, #0
  120bec:	1affff84 	bne	120a04 <tcp_input+0x58c>
  120bf0:	ea000000 	b	120bf8 <tcp_input+0x780>
      break;
  120bf4:	e320f000 	nop	{0}
  }

  if (pcb == NULL) {
  120bf8:	e51b3010 	ldr	r3, [fp, #-16]
  120bfc:	e3530000 	cmp	r3, #0
  120c00:	1a00008e 	bne	120e40 <tcp_input+0x9c8>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
  120c04:	e3063a40 	movw	r3, #27200	; 0x6a40
  120c08:	e3403057 	movt	r3, #87	; 0x57
  120c0c:	e5933000 	ldr	r3, [r3]
  120c10:	e50b3010 	str	r3, [fp, #-16]
  120c14:	ea000032 	b	120ce4 <tcp_input+0x86c>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
  120c18:	e51b3010 	ldr	r3, [fp, #-16]
  120c1c:	e5933014 	ldr	r3, [r3, #20]
  120c20:	e353000a 	cmp	r3, #10
  120c24:	0a000006 	beq	120c44 <tcp_input+0x7cc>
  120c28:	e30805b8 	movw	r0, #34232	; 0x85b8
  120c2c:	e3400014 	movt	r0, #20
  120c30:	ebff8937 	bl	103114 <rt_kprintf>
  120c34:	e3a010fc 	mov	r1, #252	; 0xfc
  120c38:	e3080488 	movw	r0, #33928	; 0x8488
  120c3c:	e3400014 	movt	r0, #20
  120c40:	ebffa907 	bl	10b064 <sys_arch_assert>
      if (pcb->remote_port == tcphdr->src &&
  120c44:	e51b3010 	ldr	r3, [fp, #-16]
  120c48:	e1d321bc 	ldrh	r2, [r3, #28]
  120c4c:	e30f3230 	movw	r3, #62000	; 0xf230
  120c50:	e3403014 	movt	r3, #20
  120c54:	e5933000 	ldr	r3, [r3]
  120c58:	e1d330b0 	ldrh	r3, [r3]
  120c5c:	e6ff3073 	uxth	r3, r3
  120c60:	e1520003 	cmp	r2, r3
  120c64:	1a00001b 	bne	120cd8 <tcp_input+0x860>
          pcb->local_port == tcphdr->dest &&
  120c68:	e51b3010 	ldr	r3, [fp, #-16]
  120c6c:	e1d321ba 	ldrh	r2, [r3, #26]
  120c70:	e30f3230 	movw	r3, #62000	; 0xf230
  120c74:	e3403014 	movt	r3, #20
  120c78:	e5933000 	ldr	r3, [r3]
  120c7c:	e1d330b2 	ldrh	r3, [r3, #2]
  120c80:	e6ff3073 	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
  120c84:	e1520003 	cmp	r2, r3
  120c88:	1a000012 	bne	120cd8 <tcp_input+0x860>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
  120c8c:	e51b3010 	ldr	r3, [fp, #-16]
  120c90:	e5932004 	ldr	r2, [r3, #4]
  120c94:	e30035e8 	movw	r3, #1512	; 0x5e8
  120c98:	e3403015 	movt	r3, #21
  120c9c:	e5933010 	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
  120ca0:	e1520003 	cmp	r2, r3
  120ca4:	1a00000b 	bne	120cd8 <tcp_input+0x860>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
  120ca8:	e51b3010 	ldr	r3, [fp, #-16]
  120cac:	e5932000 	ldr	r2, [r3]
  120cb0:	e30035e8 	movw	r3, #1512	; 0x5e8
  120cb4:	e3403015 	movt	r3, #21
  120cb8:	e5933014 	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
  120cbc:	e1520003 	cmp	r2, r3
  120cc0:	1a000004 	bne	120cd8 <tcp_input+0x860>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
  120cc4:	e51b0010 	ldr	r0, [fp, #-16]
  120cc8:	eb0002d8 	bl	121830 <tcp_timewait_input>
        pbuf_free(p);
  120ccc:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  120cd0:	ebffe8f1 	bl	11b09c <pbuf_free>
        return;
  120cd4:	ea0001f7 	b	1214b8 <tcp_input+0x1040>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
  120cd8:	e51b3010 	ldr	r3, [fp, #-16]
  120cdc:	e593300c 	ldr	r3, [r3, #12]
  120ce0:	e50b3010 	str	r3, [fp, #-16]
  120ce4:	e51b3010 	ldr	r3, [fp, #-16]
  120ce8:	e3530000 	cmp	r3, #0
  120cec:	1affffc9 	bne	120c18 <tcp_input+0x7a0>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
  120cf0:	e3a03000 	mov	r3, #0
  120cf4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
  120cf8:	e3063a38 	movw	r3, #27192	; 0x6a38
  120cfc:	e3403057 	movt	r3, #87	; 0x57
  120d00:	e5933000 	ldr	r3, [r3]
  120d04:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  120d08:	ea00001f 	b	120d8c <tcp_input+0x914>
      if (lpcb->local_port == tcphdr->dest) {
  120d0c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  120d10:	e1d321ba 	ldrh	r2, [r3, #26]
  120d14:	e30f3230 	movw	r3, #62000	; 0xf230
  120d18:	e3403014 	movt	r3, #20
  120d1c:	e5933000 	ldr	r3, [r3]
  120d20:	e1d330b2 	ldrh	r3, [r3, #2]
  120d24:	e6ff3073 	uxth	r3, r3
  120d28:	e1520003 	cmp	r2, r3
  120d2c:	1a000011 	bne	120d78 <tcp_input+0x900>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
  120d30:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  120d34:	e5932000 	ldr	r2, [r3]
  120d38:	e30035e8 	movw	r3, #1512	; 0x5e8
  120d3c:	e3403015 	movt	r3, #21
  120d40:	e5933014 	ldr	r3, [r3, #20]
  120d44:	e1520003 	cmp	r2, r3
  120d48:	0a000013 	beq	120d9c <tcp_input+0x924>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
  120d4c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  120d50:	e3530000 	cmp	r3, #0
  120d54:	0a000003 	beq	120d68 <tcp_input+0x8f0>
  120d58:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  120d5c:	e5933000 	ldr	r3, [r3]
  120d60:	e3530000 	cmp	r3, #0
  120d64:	1a000003 	bne	120d78 <tcp_input+0x900>
            /* found an ANY-match */
#if SO_REUSE
            lpcb_any = lpcb;
  120d68:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  120d6c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
            lpcb_prev = prev;
  120d70:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  120d74:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
  120d78:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  120d7c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
  120d80:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  120d84:	e593300c 	ldr	r3, [r3, #12]
  120d88:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  120d8c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  120d90:	e3530000 	cmp	r3, #0
  120d94:	1affffdc 	bne	120d0c <tcp_input+0x894>
  120d98:	ea000000 	b	120da0 <tcp_input+0x928>
            break;
  120d9c:	e320f000 	nop	{0}
    }
#if SO_REUSE
    /* first try specific local IP */
    if (lpcb == NULL) {
  120da0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  120da4:	e3530000 	cmp	r3, #0
  120da8:	1a000003 	bne	120dbc <tcp_input+0x944>
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
  120dac:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  120db0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
      prev = lpcb_prev;
  120db4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  120db8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
  120dbc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  120dc0:	e3530000 	cmp	r3, #0
  120dc4:	0a00001d 	beq	120e40 <tcp_input+0x9c8>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
  120dc8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  120dcc:	e3530000 	cmp	r3, #0
  120dd0:	0a00000d 	beq	120e0c <tcp_input+0x994>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
  120dd4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  120dd8:	e593200c 	ldr	r2, [r3, #12]
  120ddc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  120de0:	e583200c 	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
  120de4:	e3063a38 	movw	r3, #27192	; 0x6a38
  120de8:	e3403057 	movt	r3, #87	; 0x57
  120dec:	e5932000 	ldr	r2, [r3]
  120df0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  120df4:	e583200c 	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
  120df8:	e3063a38 	movw	r3, #27192	; 0x6a38
  120dfc:	e3403057 	movt	r3, #87	; 0x57
  120e00:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  120e04:	e5832000 	str	r2, [r3]
  120e08:	ea000007 	b	120e2c <tcp_input+0x9b4>
      } else {
        TCP_STATS_INC(tcp.cachehit);
  120e0c:	e3063840 	movw	r3, #26688	; 0x6840
  120e10:	e3403057 	movt	r3, #87	; 0x57
  120e14:	e1d33cb2 	ldrh	r3, [r3, #194]	; 0xc2
  120e18:	e2833001 	add	r3, r3, #1
  120e1c:	e6ff2073 	uxth	r2, r3
  120e20:	e3063840 	movw	r3, #26688	; 0x6840
  120e24:	e3403057 	movt	r3, #87	; 0x57
  120e28:	e1c32cb2 	strh	r2, [r3, #194]	; 0xc2
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
  120e2c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  120e30:	eb0001a4 	bl	1214c8 <tcp_listen_input>
      pbuf_free(p);
  120e34:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  120e38:	ebffe897 	bl	11b09c <pbuf_free>
      return;
  120e3c:	ea00019d 	b	1214b8 <tcp_input+0x1040>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
  120e40:	e51b3010 	ldr	r3, [fp, #-16]
  120e44:	e3530000 	cmp	r3, #0
  120e48:	0a00014f 	beq	12138c <tcp_input+0xf14>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
  120e4c:	e30f3220 	movw	r3, #61984	; 0xf220
  120e50:	e3403014 	movt	r3, #20
  120e54:	e3a02000 	mov	r2, #0
  120e58:	e5832000 	str	r2, [r3]
    inseg.len = p->tot_len;
  120e5c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  120e60:	e1d320b8 	ldrh	r2, [r3, #8]
  120e64:	e30f3220 	movw	r3, #61984	; 0xf220
  120e68:	e3403014 	movt	r3, #20
  120e6c:	e1c320b8 	strh	r2, [r3, #8]
    inseg.p = p;
  120e70:	e30f3220 	movw	r3, #61984	; 0xf220
  120e74:	e3403014 	movt	r3, #20
  120e78:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  120e7c:	e5832004 	str	r2, [r3, #4]
    inseg.tcphdr = tcphdr;
  120e80:	e30f3230 	movw	r3, #62000	; 0xf230
  120e84:	e3403014 	movt	r3, #20
  120e88:	e5932000 	ldr	r2, [r3]
  120e8c:	e30f3220 	movw	r3, #61984	; 0xf220
  120e90:	e3403014 	movt	r3, #20
  120e94:	e583200c 	str	r2, [r3, #12]

    recv_data = NULL;
  120e98:	e30f3250 	movw	r3, #62032	; 0xf250
  120e9c:	e3403014 	movt	r3, #20
  120ea0:	e3a02000 	mov	r2, #0
  120ea4:	e5832000 	str	r2, [r3]
    recv_flags = 0;
  120ea8:	e30f324d 	movw	r3, #62029	; 0xf24d
  120eac:	e3403014 	movt	r3, #20
  120eb0:	e3a02000 	mov	r2, #0
  120eb4:	e5c32000 	strb	r2, [r3]
    recv_acked = 0;
  120eb8:	e30f3248 	movw	r3, #62024	; 0xf248
  120ebc:	e3403014 	movt	r3, #20
  120ec0:	e3a02000 	mov	r2, #0
  120ec4:	e1c320b0 	strh	r2, [r3]

    if (flags & TCP_PSH) {
  120ec8:	e30f324c 	movw	r3, #62028	; 0xf24c
  120ecc:	e3403014 	movt	r3, #20
  120ed0:	e5d33000 	ldrb	r3, [r3]
  120ed4:	e2033008 	and	r3, r3, #8
  120ed8:	e3530000 	cmp	r3, #0
  120edc:	0a000005 	beq	120ef8 <tcp_input+0xa80>
      p->flags |= PBUF_FLAG_PUSH;
  120ee0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  120ee4:	e5d3300d 	ldrb	r3, [r3, #13]
  120ee8:	e3833001 	orr	r3, r3, #1
  120eec:	e6ef2073 	uxtb	r2, r3
  120ef0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  120ef4:	e5c3200d 	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
  120ef8:	e51b3010 	ldr	r3, [fp, #-16]
  120efc:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  120f00:	e3530000 	cmp	r3, #0
  120f04:	0a000023 	beq	120f98 <tcp_input+0xb20>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
  120f08:	e51b0010 	ldr	r0, [fp, #-16]
  120f0c:	ebfff968 	bl	11f4b4 <tcp_process_refused_data>
  120f10:	e1a03000 	mov	r3, r0
  120f14:	e373000d 	cmn	r3, #13
  120f18:	0a000008 	beq	120f40 <tcp_input+0xac8>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
  120f1c:	e51b3010 	ldr	r3, [fp, #-16]
  120f20:	e5933078 	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
  120f24:	e3530000 	cmp	r3, #0
  120f28:	0a00001a 	beq	120f98 <tcp_input+0xb20>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
  120f2c:	e30f324a 	movw	r3, #62026	; 0xf24a
  120f30:	e3403014 	movt	r3, #20
  120f34:	e1d330b0 	ldrh	r3, [r3]
  120f38:	e3530000 	cmp	r3, #0
  120f3c:	0a000015 	beq	120f98 <tcp_input+0xb20>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
  120f40:	e51b3010 	ldr	r3, [fp, #-16]
  120f44:	e1d332be 	ldrh	r3, [r3, #46]	; 0x2e
  120f48:	e3530000 	cmp	r3, #0
  120f4c:	1a000001 	bne	120f58 <tcp_input+0xae0>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
  120f50:	e51b0010 	ldr	r0, [fp, #-16]
  120f54:	eb001419 	bl	125fc0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
  120f58:	e3063840 	movw	r3, #26688	; 0x6840
  120f5c:	e3403057 	movt	r3, #87	; 0x57
  120f60:	e1d33bb2 	ldrh	r3, [r3, #178]	; 0xb2
  120f64:	e2833001 	add	r3, r3, #1
  120f68:	e6ff2073 	uxth	r2, r3
  120f6c:	e3063840 	movw	r3, #26688	; 0x6840
  120f70:	e3403057 	movt	r3, #87	; 0x57
  120f74:	e1c32bb2 	strh	r2, [r3, #178]	; 0xb2
        MIB2_STATS_INC(mib2.tcpinerrs);
  120f78:	e3063840 	movw	r3, #26688	; 0x6840
  120f7c:	e3403057 	movt	r3, #87	; 0x57
  120f80:	e5933188 	ldr	r3, [r3, #392]	; 0x188
  120f84:	e2832001 	add	r2, r3, #1
  120f88:	e3063840 	movw	r3, #26688	; 0x6840
  120f8c:	e3403057 	movt	r3, #87	; 0x57
  120f90:	e5832188 	str	r2, [r3, #392]	; 0x188
        goto aborted;
  120f94:	ea0000e5 	b	121330 <tcp_input+0xeb8>
      }
    }
    tcp_input_pcb = pcb;
  120f98:	e3063a44 	movw	r3, #27204	; 0x6a44
  120f9c:	e3403057 	movt	r3, #87	; 0x57
  120fa0:	e51b2010 	ldr	r2, [fp, #-16]
  120fa4:	e5832000 	str	r2, [r3]
    err = tcp_process(pcb);
  120fa8:	e51b0010 	ldr	r0, [fp, #-16]
  120fac:	eb00027e 	bl	1219ac <tcp_process>
  120fb0:	e1a03000 	mov	r3, r0
  120fb4:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
  120fb8:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
  120fbc:	e373000d 	cmn	r3, #13
  120fc0:	0a0000d3 	beq	121314 <tcp_input+0xe9c>
      if (recv_flags & TF_RESET) {
  120fc4:	e30f324d 	movw	r3, #62029	; 0xf24d
  120fc8:	e3403014 	movt	r3, #20
  120fcc:	e5d33000 	ldrb	r3, [r3]
  120fd0:	e2033008 	and	r3, r3, #8
  120fd4:	e3530000 	cmp	r3, #0
  120fd8:	0a000012 	beq	121028 <tcp_input+0xbb0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
  120fdc:	e51b3010 	ldr	r3, [fp, #-16]
  120fe0:	e5933090 	ldr	r3, [r3, #144]	; 0x90
  120fe4:	e3530000 	cmp	r3, #0
  120fe8:	0a000006 	beq	121008 <tcp_input+0xb90>
  120fec:	e51b3010 	ldr	r3, [fp, #-16]
  120ff0:	e5933090 	ldr	r3, [r3, #144]	; 0x90
  120ff4:	e51b2010 	ldr	r2, [fp, #-16]
  120ff8:	e5922010 	ldr	r2, [r2, #16]
  120ffc:	e3e0100d 	mvn	r1, #13
  121000:	e1a00002 	mov	r0, r2
  121004:	e12fff33 	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
  121008:	e51b1010 	ldr	r1, [fp, #-16]
  12100c:	e3060a30 	movw	r0, #27184	; 0x6a30
  121010:	e3400057 	movt	r0, #87	; 0x57
  121014:	ebfffc11 	bl	120060 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
  121018:	e51b1010 	ldr	r1, [fp, #-16]
  12101c:	e3a00002 	mov	r0, #2
  121020:	ebffe10f 	bl	119464 <memp_free>
  121024:	ea0000c1 	b	121330 <tcp_input+0xeb8>
      } else {
        err = ERR_OK;
  121028:	e3a03000 	mov	r3, #0
  12102c:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
  121030:	e30f3248 	movw	r3, #62024	; 0xf248
  121034:	e3403014 	movt	r3, #20
  121038:	e1d330b0 	ldrh	r3, [r3]
  12103c:	e3530000 	cmp	r3, #0
  121040:	0a00001a 	beq	1210b0 <tcp_input+0xc38>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
  121044:	e30f3248 	movw	r3, #62024	; 0xf248
  121048:	e3403014 	movt	r3, #20
  12104c:	e1d330b0 	ldrh	r3, [r3]
  121050:	e14b32ba 	strh	r3, [fp, #-42]	; 0xffffffd6
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
  121054:	e51b3010 	ldr	r3, [fp, #-16]
  121058:	e5933080 	ldr	r3, [r3, #128]	; 0x80
  12105c:	e3530000 	cmp	r3, #0
  121060:	0a000009 	beq	12108c <tcp_input+0xc14>
  121064:	e51b3010 	ldr	r3, [fp, #-16]
  121068:	e5933080 	ldr	r3, [r3, #128]	; 0x80
  12106c:	e51b2010 	ldr	r2, [fp, #-16]
  121070:	e5920010 	ldr	r0, [r2, #16]
  121074:	e15b22ba 	ldrh	r2, [fp, #-42]	; 0xffffffd6
  121078:	e51b1010 	ldr	r1, [fp, #-16]
  12107c:	e12fff33 	blx	r3
  121080:	e1a03000 	mov	r3, r0
  121084:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
  121088:	ea000001 	b	121094 <tcp_input+0xc1c>
  12108c:	e3a03000 	mov	r3, #0
  121090:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
            if (err == ERR_ABRT) {
  121094:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
  121098:	e373000d 	cmn	r3, #13
  12109c:	0a00009e 	beq	12131c <tcp_input+0xea4>
              goto aborted;
            }
          }
          recv_acked = 0;
  1210a0:	e30f3248 	movw	r3, #62024	; 0xf248
  1210a4:	e3403014 	movt	r3, #20
  1210a8:	e3a02000 	mov	r2, #0
  1210ac:	e1c320b0 	strh	r2, [r3]
        }
        if (recv_flags & TF_CLOSED) {
  1210b0:	e30f324d 	movw	r3, #62029	; 0xf24d
  1210b4:	e3403014 	movt	r3, #20
  1210b8:	e5d33000 	ldrb	r3, [r3]
  1210bc:	e2033010 	and	r3, r3, #16
  1210c0:	e3530000 	cmp	r3, #0
  1210c4:	0a000017 	beq	121128 <tcp_input+0xcb0>
          /* The connection has been closed and we will deallocate the
             PCB. */
          if (!(pcb->flags & TF_RXCLOSED)) {
  1210c8:	e51b3010 	ldr	r3, [fp, #-16]
  1210cc:	e5d3301e 	ldrb	r3, [r3, #30]
  1210d0:	e2033010 	and	r3, r3, #16
  1210d4:	e3530000 	cmp	r3, #0
  1210d8:	1a00000a 	bne	121108 <tcp_input+0xc90>
            /* Connection closed although the application has only shut down the
               tx side: call the PCB's err callback and indicate the closure to
               ensure the application doesn't continue using the PCB. */
            TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
  1210dc:	e51b3010 	ldr	r3, [fp, #-16]
  1210e0:	e5933090 	ldr	r3, [r3, #144]	; 0x90
  1210e4:	e3530000 	cmp	r3, #0
  1210e8:	0a000006 	beq	121108 <tcp_input+0xc90>
  1210ec:	e51b3010 	ldr	r3, [fp, #-16]
  1210f0:	e5933090 	ldr	r3, [r3, #144]	; 0x90
  1210f4:	e51b2010 	ldr	r2, [fp, #-16]
  1210f8:	e5922010 	ldr	r2, [r2, #16]
  1210fc:	e3e0100e 	mvn	r1, #14
  121100:	e1a00002 	mov	r0, r2
  121104:	e12fff33 	blx	r3
          }
          tcp_pcb_remove(&tcp_active_pcbs, pcb);
  121108:	e51b1010 	ldr	r1, [fp, #-16]
  12110c:	e3060a30 	movw	r0, #27184	; 0x6a30
  121110:	e3400057 	movt	r0, #87	; 0x57
  121114:	ebfffbd1 	bl	120060 <tcp_pcb_remove>
          memp_free(MEMP_TCP_PCB, pcb);
  121118:	e51b1010 	ldr	r1, [fp, #-16]
  12111c:	e3a00002 	mov	r0, #2
  121120:	ebffe0cf 	bl	119464 <memp_free>
          goto aborted;
  121124:	ea000081 	b	121330 <tcp_input+0xeb8>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
  121128:	e30f3250 	movw	r3, #62032	; 0xf250
  12112c:	e3403014 	movt	r3, #20
  121130:	e5933000 	ldr	r3, [r3]
  121134:	e3530000 	cmp	r3, #0
  121138:	0a00003c 	beq	121230 <tcp_input+0xdb8>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
  12113c:	e51b3010 	ldr	r3, [fp, #-16]
  121140:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  121144:	e3530000 	cmp	r3, #0
  121148:	0a000006 	beq	121168 <tcp_input+0xcf0>
  12114c:	e30805e8 	movw	r0, #34280	; 0x85e8
  121150:	e3400014 	movt	r0, #20
  121154:	ebff87ee 	bl	103114 <rt_kprintf>
  121158:	e3a01f6b 	mov	r1, #428	; 0x1ac
  12115c:	e3080488 	movw	r0, #33928	; 0x8488
  121160:	e3400014 	movt	r0, #20
  121164:	ebffa7be 	bl	10b064 <sys_arch_assert>
          if (pcb->flags & TF_RXCLOSED) {
  121168:	e51b3010 	ldr	r3, [fp, #-16]
  12116c:	e5d3301e 	ldrb	r3, [r3, #30]
  121170:	e2033010 	and	r3, r3, #16
  121174:	e3530000 	cmp	r3, #0
  121178:	0a000007 	beq	12119c <tcp_input+0xd24>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
  12117c:	e30f3250 	movw	r3, #62032	; 0xf250
  121180:	e3403014 	movt	r3, #20
  121184:	e5933000 	ldr	r3, [r3]
  121188:	e1a00003 	mov	r0, r3
  12118c:	ebffe7c2 	bl	11b09c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
  121190:	e51b0010 	ldr	r0, [fp, #-16]
  121194:	ebfff29a 	bl	11dc04 <tcp_abort>
            goto aborted;
  121198:	ea000064 	b	121330 <tcp_input+0xeb8>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
  12119c:	e51b3010 	ldr	r3, [fp, #-16]
  1211a0:	e5933084 	ldr	r3, [r3, #132]	; 0x84
  1211a4:	e3530000 	cmp	r3, #0
  1211a8:	0a00000c 	beq	1211e0 <tcp_input+0xd68>
  1211ac:	e51b3010 	ldr	r3, [fp, #-16]
  1211b0:	e5934084 	ldr	r4, [r3, #132]	; 0x84
  1211b4:	e51b3010 	ldr	r3, [fp, #-16]
  1211b8:	e5930010 	ldr	r0, [r3, #16]
  1211bc:	e30f3250 	movw	r3, #62032	; 0xf250
  1211c0:	e3403014 	movt	r3, #20
  1211c4:	e5932000 	ldr	r2, [r3]
  1211c8:	e3a03000 	mov	r3, #0
  1211cc:	e51b1010 	ldr	r1, [fp, #-16]
  1211d0:	e12fff34 	blx	r4
  1211d4:	e1a03000 	mov	r3, r0
  1211d8:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
  1211dc:	ea000008 	b	121204 <tcp_input+0xd8c>
  1211e0:	e30f3250 	movw	r3, #62032	; 0xf250
  1211e4:	e3403014 	movt	r3, #20
  1211e8:	e5932000 	ldr	r2, [r3]
  1211ec:	e3a03000 	mov	r3, #0
  1211f0:	e51b1010 	ldr	r1, [fp, #-16]
  1211f4:	e3a00000 	mov	r0, #0
  1211f8:	ebfff956 	bl	11f758 <tcp_recv_null>
  1211fc:	e1a03000 	mov	r3, r0
  121200:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
          if (err == ERR_ABRT) {
  121204:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
  121208:	e373000d 	cmn	r3, #13
  12120c:	0a000044 	beq	121324 <tcp_input+0xeac>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
  121210:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
  121214:	e3530000 	cmp	r3, #0
  121218:	0a000004 	beq	121230 <tcp_input+0xdb8>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
  12121c:	e30f3250 	movw	r3, #62032	; 0xf250
  121220:	e3403014 	movt	r3, #20
  121224:	e5932000 	ldr	r2, [r3]
  121228:	e51b3010 	ldr	r3, [fp, #-16]
  12122c:	e5832078 	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
  121230:	e30f324d 	movw	r3, #62029	; 0xf24d
  121234:	e3403014 	movt	r3, #20
  121238:	e5d33000 	ldrb	r3, [r3]
  12123c:	e2033020 	and	r3, r3, #32
  121240:	e3530000 	cmp	r3, #0
  121244:	0a00002b 	beq	1212f8 <tcp_input+0xe80>
          if (pcb->refused_data != NULL) {
  121248:	e51b3010 	ldr	r3, [fp, #-16]
  12124c:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  121250:	e3530000 	cmp	r3, #0
  121254:	0a000008 	beq	12127c <tcp_input+0xe04>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
  121258:	e51b3010 	ldr	r3, [fp, #-16]
  12125c:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  121260:	e5d3200d 	ldrb	r2, [r3, #13]
  121264:	e51b3010 	ldr	r3, [fp, #-16]
  121268:	e5933078 	ldr	r3, [r3, #120]	; 0x78
  12126c:	e3822020 	orr	r2, r2, #32
  121270:	e6ef2072 	uxtb	r2, r2
  121274:	e5c3200d 	strb	r2, [r3, #13]
  121278:	ea00001e 	b	1212f8 <tcp_input+0xe80>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
  12127c:	e51b3010 	ldr	r3, [fp, #-16]
  121280:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  121284:	e30f2fff 	movw	r2, #65535	; 0xffff
  121288:	e1530002 	cmp	r3, r2
  12128c:	0a000005 	beq	1212a8 <tcp_input+0xe30>
              pcb->rcv_wnd++;
  121290:	e51b3010 	ldr	r3, [fp, #-16]
  121294:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  121298:	e2833001 	add	r3, r3, #1
  12129c:	e6ff2073 	uxth	r2, r3
  1212a0:	e51b3010 	ldr	r3, [fp, #-16]
  1212a4:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
            }
            TCP_EVENT_CLOSED(pcb, err);
  1212a8:	e51b3010 	ldr	r3, [fp, #-16]
  1212ac:	e5933084 	ldr	r3, [r3, #132]	; 0x84
  1212b0:	e3530000 	cmp	r3, #0
  1212b4:	0a00000a 	beq	1212e4 <tcp_input+0xe6c>
  1212b8:	e51b3010 	ldr	r3, [fp, #-16]
  1212bc:	e5934084 	ldr	r4, [r3, #132]	; 0x84
  1212c0:	e51b3010 	ldr	r3, [fp, #-16]
  1212c4:	e5930010 	ldr	r0, [r3, #16]
  1212c8:	e3a03000 	mov	r3, #0
  1212cc:	e3a02000 	mov	r2, #0
  1212d0:	e51b1010 	ldr	r1, [fp, #-16]
  1212d4:	e12fff34 	blx	r4
  1212d8:	e1a03000 	mov	r3, r0
  1212dc:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
  1212e0:	ea000001 	b	1212ec <tcp_input+0xe74>
  1212e4:	e3a03000 	mov	r3, #0
  1212e8:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
            if (err == ERR_ABRT) {
  1212ec:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
  1212f0:	e373000d 	cmn	r3, #13
  1212f4:	0a00000c 	beq	12132c <tcp_input+0xeb4>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
  1212f8:	e3063a44 	movw	r3, #27204	; 0x6a44
  1212fc:	e3403057 	movt	r3, #87	; 0x57
  121300:	e3a02000 	mov	r2, #0
  121304:	e5832000 	str	r2, [r3]
        /* Try to send something out. */
        tcp_output(pcb);
  121308:	e51b0010 	ldr	r0, [fp, #-16]
  12130c:	eb00138c 	bl	126144 <tcp_output>
  121310:	ea000006 	b	121330 <tcp_input+0xeb8>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
  121314:	e320f000 	nop	{0}
  121318:	ea000004 	b	121330 <tcp_input+0xeb8>
              goto aborted;
  12131c:	e320f000 	nop	{0}
  121320:	ea000002 	b	121330 <tcp_input+0xeb8>
            goto aborted;
  121324:	e320f000 	nop	{0}
  121328:	ea000000 	b	121330 <tcp_input+0xeb8>
              goto aborted;
  12132c:	e320f000 	nop	{0}
    tcp_input_pcb = NULL;
  121330:	e3063a44 	movw	r3, #27204	; 0x6a44
  121334:	e3403057 	movt	r3, #87	; 0x57
  121338:	e3a02000 	mov	r2, #0
  12133c:	e5832000 	str	r2, [r3]
    recv_data = NULL;
  121340:	e30f3250 	movw	r3, #62032	; 0xf250
  121344:	e3403014 	movt	r3, #20
  121348:	e3a02000 	mov	r2, #0
  12134c:	e5832000 	str	r2, [r3]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
  121350:	e30f3220 	movw	r3, #61984	; 0xf220
  121354:	e3403014 	movt	r3, #20
  121358:	e5933004 	ldr	r3, [r3, #4]
  12135c:	e3530000 	cmp	r3, #0
  121360:	0a000053 	beq	1214b4 <tcp_input+0x103c>
    {
      pbuf_free(inseg.p);
  121364:	e30f3220 	movw	r3, #61984	; 0xf220
  121368:	e3403014 	movt	r3, #20
  12136c:	e5933004 	ldr	r3, [r3, #4]
  121370:	e1a00003 	mov	r0, r3
  121374:	ebffe748 	bl	11b09c <pbuf_free>
      inseg.p = NULL;
  121378:	e30f3220 	movw	r3, #61984	; 0xf220
  12137c:	e3403014 	movt	r3, #20
  121380:	e3a02000 	mov	r2, #0
  121384:	e5832004 	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
  121388:	ea000049 	b	1214b4 <tcp_input+0x103c>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
  12138c:	e30f3230 	movw	r3, #62000	; 0xf230
  121390:	e3403014 	movt	r3, #20
  121394:	e5933000 	ldr	r3, [r3]
  121398:	e1d330bc 	ldrh	r3, [r3, #12]
  12139c:	e6ff3073 	uxth	r3, r3
  1213a0:	e1a00003 	mov	r0, r3
  1213a4:	ebffd505 	bl	1167c0 <lwip_htons>
  1213a8:	e1a03000 	mov	r3, r0
  1213ac:	e2033004 	and	r3, r3, #4
  1213b0:	e3530000 	cmp	r3, #0
  1213b4:	1a000029 	bne	121460 <tcp_input+0xfe8>
      TCP_STATS_INC(tcp.proterr);
  1213b8:	e3063840 	movw	r3, #26688	; 0x6840
  1213bc:	e3403057 	movt	r3, #87	; 0x57
  1213c0:	e1d33bbc 	ldrh	r3, [r3, #188]	; 0xbc
  1213c4:	e2833001 	add	r3, r3, #1
  1213c8:	e6ff2073 	uxth	r2, r3
  1213cc:	e3063840 	movw	r3, #26688	; 0x6840
  1213d0:	e3403057 	movt	r3, #87	; 0x57
  1213d4:	e1c32bbc 	strh	r2, [r3, #188]	; 0xbc
      TCP_STATS_INC(tcp.drop);
  1213d8:	e3063840 	movw	r3, #26688	; 0x6840
  1213dc:	e3403057 	movt	r3, #87	; 0x57
  1213e0:	e1d33bb2 	ldrh	r3, [r3, #178]	; 0xb2
  1213e4:	e2833001 	add	r3, r3, #1
  1213e8:	e6ff2073 	uxth	r2, r3
  1213ec:	e3063840 	movw	r3, #26688	; 0x6840
  1213f0:	e3403057 	movt	r3, #87	; 0x57
  1213f4:	e1c32bb2 	strh	r2, [r3, #178]	; 0xb2
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  1213f8:	e30f3244 	movw	r3, #62020	; 0xf244
  1213fc:	e3403014 	movt	r3, #20
  121400:	e5930000 	ldr	r0, [r3]
  121404:	e30f324a 	movw	r3, #62026	; 0xf24a
  121408:	e3403014 	movt	r3, #20
  12140c:	e1d330b0 	ldrh	r3, [r3]
  121410:	e1a02003 	mov	r2, r3
  121414:	e30f3240 	movw	r3, #62016	; 0xf240
  121418:	e3403014 	movt	r3, #20
  12141c:	e5933000 	ldr	r3, [r3]
  121420:	e0821003 	add	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  121424:	e30f3230 	movw	r3, #62000	; 0xf230
  121428:	e3403014 	movt	r3, #20
  12142c:	e5933000 	ldr	r3, [r3]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  121430:	e1d330b2 	ldrh	r3, [r3, #2]
  121434:	e6ff2073 	uxth	r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  121438:	e30f3230 	movw	r3, #62000	; 0xf230
  12143c:	e3403014 	movt	r3, #20
  121440:	e5933000 	ldr	r3, [r3]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  121444:	e1d330b0 	ldrh	r3, [r3]
  121448:	e6ff3073 	uxth	r3, r3
  12144c:	e58d3004 	str	r3, [sp, #4]
  121450:	e58d2000 	str	r2, [sp]
  121454:	e59f3068 	ldr	r3, [pc, #104]	; 1214c4 <tcp_input+0x104c>
  121458:	e59f2060 	ldr	r2, [pc, #96]	; 1214c0 <tcp_input+0x1048>
  12145c:	eb00159e 	bl	126adc <tcp_rst>
    pbuf_free(p);
  121460:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  121464:	ebffe70c 	bl	11b09c <pbuf_free>
  return;
  121468:	ea000011 	b	1214b4 <tcp_input+0x103c>
dropped:
  TCP_STATS_INC(tcp.drop);
  12146c:	e3063840 	movw	r3, #26688	; 0x6840
  121470:	e3403057 	movt	r3, #87	; 0x57
  121474:	e1d33bb2 	ldrh	r3, [r3, #178]	; 0xb2
  121478:	e2833001 	add	r3, r3, #1
  12147c:	e6ff2073 	uxth	r2, r3
  121480:	e3063840 	movw	r3, #26688	; 0x6840
  121484:	e3403057 	movt	r3, #87	; 0x57
  121488:	e1c32bb2 	strh	r2, [r3, #178]	; 0xb2
  MIB2_STATS_INC(mib2.tcpinerrs);
  12148c:	e3063840 	movw	r3, #26688	; 0x6840
  121490:	e3403057 	movt	r3, #87	; 0x57
  121494:	e5933188 	ldr	r3, [r3, #392]	; 0x188
  121498:	e2832001 	add	r2, r3, #1
  12149c:	e3063840 	movw	r3, #26688	; 0x6840
  1214a0:	e3403057 	movt	r3, #87	; 0x57
  1214a4:	e5832188 	str	r2, [r3, #392]	; 0x188
  pbuf_free(p);
  1214a8:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  1214ac:	ebffe6fa 	bl	11b09c <pbuf_free>
  1214b0:	ea000000 	b	1214b8 <tcp_input+0x1040>
  return;
  1214b4:	e320f000 	nop	{0}
}
  1214b8:	e24bd008 	sub	sp, fp, #8
  1214bc:	e8bd8810 	pop	{r4, fp, pc}
  1214c0:	001505fc 	.word	0x001505fc
  1214c4:	001505f8 	.word	0x001505f8

001214c8 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
  1214c8:	e92d4800 	push	{fp, lr}
  1214cc:	e28db004 	add	fp, sp, #4
  1214d0:	e24dd020 	sub	sp, sp, #32
  1214d4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
  1214d8:	e30f324c 	movw	r3, #62028	; 0xf24c
  1214dc:	e3403014 	movt	r3, #20
  1214e0:	e5d33000 	ldrb	r3, [r3]
  1214e4:	e2033004 	and	r3, r3, #4
  1214e8:	e3530000 	cmp	r3, #0
  1214ec:	1a0000c8 	bne	121814 <tcp_listen_input+0x34c>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
  1214f0:	e30f324c 	movw	r3, #62028	; 0xf24c
  1214f4:	e3403014 	movt	r3, #20
  1214f8:	e5d33000 	ldrb	r3, [r3]
  1214fc:	e2033010 	and	r3, r3, #16
  121500:	e3530000 	cmp	r3, #0
  121504:	0a00001a 	beq	121574 <tcp_listen_input+0xac>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  121508:	e30f3244 	movw	r3, #62020	; 0xf244
  12150c:	e3403014 	movt	r3, #20
  121510:	e5930000 	ldr	r0, [r3]
  121514:	e30f324a 	movw	r3, #62026	; 0xf24a
  121518:	e3403014 	movt	r3, #20
  12151c:	e1d330b0 	ldrh	r3, [r3]
  121520:	e1a02003 	mov	r2, r3
  121524:	e30f3240 	movw	r3, #62016	; 0xf240
  121528:	e3403014 	movt	r3, #20
  12152c:	e5933000 	ldr	r3, [r3]
  121530:	e0821003 	add	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  121534:	e30f3230 	movw	r3, #62000	; 0xf230
  121538:	e3403014 	movt	r3, #20
  12153c:	e5933000 	ldr	r3, [r3]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  121540:	e1d330b2 	ldrh	r3, [r3, #2]
  121544:	e6ff2073 	uxth	r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  121548:	e30f3230 	movw	r3, #62000	; 0xf230
  12154c:	e3403014 	movt	r3, #20
  121550:	e5933000 	ldr	r3, [r3]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  121554:	e1d330b0 	ldrh	r3, [r3]
  121558:	e6ff3073 	uxth	r3, r3
  12155c:	e58d3004 	str	r3, [sp, #4]
  121560:	e58d2000 	str	r2, [sp]
  121564:	e59f32bc 	ldr	r3, [pc, #700]	; 121828 <tcp_listen_input+0x360>
  121568:	e59f22bc 	ldr	r2, [pc, #700]	; 12182c <tcp_listen_input+0x364>
  12156c:	eb00155a 	bl	126adc <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
  121570:	ea0000a9 	b	12181c <tcp_listen_input+0x354>
  } else if (flags & TCP_SYN) {
  121574:	e30f324c 	movw	r3, #62028	; 0xf24c
  121578:	e3403014 	movt	r3, #20
  12157c:	e5d33000 	ldrb	r3, [r3]
  121580:	e2033002 	and	r3, r3, #2
  121584:	e3530000 	cmp	r3, #0
  121588:	0a0000a3 	beq	12181c <tcp_listen_input+0x354>
    npcb = tcp_alloc(pcb->prio);
  12158c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  121590:	e5d33018 	ldrb	r3, [r3, #24]
  121594:	e1a00003 	mov	r0, r3
  121598:	ebfff934 	bl	11fa70 <tcp_alloc>
  12159c:	e50b0008 	str	r0, [fp, #-8]
    if (npcb == NULL) {
  1215a0:	e51b3008 	ldr	r3, [fp, #-8]
  1215a4:	e3530000 	cmp	r3, #0
  1215a8:	1a000018 	bne	121610 <tcp_listen_input+0x148>
      TCP_STATS_INC(tcp.memerr);
  1215ac:	e3063840 	movw	r3, #26688	; 0x6840
  1215b0:	e3403057 	movt	r3, #87	; 0x57
  1215b4:	e1d33bb8 	ldrh	r3, [r3, #184]	; 0xb8
  1215b8:	e2833001 	add	r3, r3, #1
  1215bc:	e6ff2073 	uxth	r2, r3
  1215c0:	e3063840 	movw	r3, #26688	; 0x6840
  1215c4:	e3403057 	movt	r3, #87	; 0x57
  1215c8:	e1c32bb8 	strh	r2, [r3, #184]	; 0xb8
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
  1215cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1215d0:	e593301c 	ldr	r3, [r3, #28]
  1215d4:	e3530000 	cmp	r3, #0
  1215d8:	0a000009 	beq	121604 <tcp_listen_input+0x13c>
  1215dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1215e0:	e593301c 	ldr	r3, [r3, #28]
  1215e4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1215e8:	e5920010 	ldr	r0, [r2, #16]
  1215ec:	e3e02000 	mvn	r2, #0
  1215f0:	e3a01000 	mov	r1, #0
  1215f4:	e12fff33 	blx	r3
  1215f8:	e1a03000 	mov	r3, r0
  1215fc:	e54b300e 	strb	r3, [fp, #-14]
      return;
  121600:	ea000086 	b	121820 <tcp_listen_input+0x358>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
  121604:	e3e0300f 	mvn	r3, #15
  121608:	e54b300e 	strb	r3, [fp, #-14]
      return;
  12160c:	ea000083 	b	121820 <tcp_listen_input+0x358>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
  121610:	e30035e8 	movw	r3, #1512	; 0x5e8
  121614:	e3403015 	movt	r3, #21
  121618:	e5932014 	ldr	r2, [r3, #20]
  12161c:	e51b3008 	ldr	r3, [fp, #-8]
  121620:	e5832000 	str	r2, [r3]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
  121624:	e30035e8 	movw	r3, #1512	; 0x5e8
  121628:	e3403015 	movt	r3, #21
  12162c:	e5932010 	ldr	r2, [r3, #16]
  121630:	e51b3008 	ldr	r3, [fp, #-8]
  121634:	e5832004 	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
  121638:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12163c:	e1d321ba 	ldrh	r2, [r3, #26]
  121640:	e51b3008 	ldr	r3, [fp, #-8]
  121644:	e1c321ba 	strh	r2, [r3, #26]
    npcb->remote_port = tcphdr->src;
  121648:	e30f3230 	movw	r3, #62000	; 0xf230
  12164c:	e3403014 	movt	r3, #20
  121650:	e5933000 	ldr	r3, [r3]
  121654:	e1d330b0 	ldrh	r3, [r3]
  121658:	e6ff2073 	uxth	r2, r3
  12165c:	e51b3008 	ldr	r3, [fp, #-8]
  121660:	e1c321bc 	strh	r2, [r3, #28]
    npcb->state = SYN_RCVD;
  121664:	e51b3008 	ldr	r3, [fp, #-8]
  121668:	e3a02003 	mov	r2, #3
  12166c:	e5832014 	str	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
  121670:	e30f3240 	movw	r3, #62016	; 0xf240
  121674:	e3403014 	movt	r3, #20
  121678:	e5933000 	ldr	r3, [r3]
  12167c:	e2832001 	add	r2, r3, #1
  121680:	e51b3008 	ldr	r3, [fp, #-8]
  121684:	e5832028 	str	r2, [r3, #40]	; 0x28
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
  121688:	e51b3008 	ldr	r3, [fp, #-8]
  12168c:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  121690:	e51b3008 	ldr	r3, [fp, #-8]
  121694:	e5832030 	str	r2, [r3, #48]	; 0x30
    iss = tcp_next_iss(npcb);
  121698:	e51b0008 	ldr	r0, [fp, #-8]
  12169c:	ebfffadb 	bl	120210 <tcp_next_iss>
  1216a0:	e50b000c 	str	r0, [fp, #-12]
    npcb->snd_wl2 = iss;
  1216a4:	e51b3008 	ldr	r3, [fp, #-8]
  1216a8:	e51b200c 	ldr	r2, [fp, #-12]
  1216ac:	e5832058 	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
  1216b0:	e51b3008 	ldr	r3, [fp, #-8]
  1216b4:	e51b200c 	ldr	r2, [fp, #-12]
  1216b8:	e5832050 	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
  1216bc:	e51b3008 	ldr	r3, [fp, #-8]
  1216c0:	e51b200c 	ldr	r2, [fp, #-12]
  1216c4:	e5832048 	str	r2, [r3, #72]	; 0x48
    npcb->snd_lbb = iss;
  1216c8:	e51b3008 	ldr	r3, [fp, #-8]
  1216cc:	e51b200c 	ldr	r2, [fp, #-12]
  1216d0:	e583205c 	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
  1216d4:	e30f3240 	movw	r3, #62016	; 0xf240
  1216d8:	e3403014 	movt	r3, #20
  1216dc:	e5933000 	ldr	r3, [r3]
  1216e0:	e2432001 	sub	r2, r3, #1
  1216e4:	e51b3008 	ldr	r3, [fp, #-8]
  1216e8:	e5832054 	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
  1216ec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1216f0:	e5932010 	ldr	r2, [r3, #16]
  1216f4:	e51b3008 	ldr	r3, [fp, #-8]
  1216f8:	e5832010 	str	r2, [r3, #16]
    npcb->listener = pcb;
  1216fc:	e51b3008 	ldr	r3, [fp, #-8]
  121700:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  121704:	e583207c 	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
  121708:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12170c:	e5d33008 	ldrb	r3, [r3, #8]
  121710:	e203300c 	and	r3, r3, #12
  121714:	e6ef2073 	uxtb	r2, r3
  121718:	e51b3008 	ldr	r3, [fp, #-8]
  12171c:	e5c32008 	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
  121720:	e3063a30 	movw	r3, #27184	; 0x6a30
  121724:	e3403057 	movt	r3, #87	; 0x57
  121728:	e5932000 	ldr	r2, [r3]
  12172c:	e51b3008 	ldr	r3, [fp, #-8]
  121730:	e583200c 	str	r2, [r3, #12]
  121734:	e3063a30 	movw	r3, #27184	; 0x6a30
  121738:	e3403057 	movt	r3, #87	; 0x57
  12173c:	e51b2008 	ldr	r2, [fp, #-8]
  121740:	e5832000 	str	r2, [r3]
  121744:	eb001737 	bl	127428 <tcp_timer_needed>
  121748:	e3063a2c 	movw	r3, #27180	; 0x6a2c
  12174c:	e3403057 	movt	r3, #87	; 0x57
  121750:	e3a02001 	mov	r2, #1
  121754:	e5c32000 	strb	r2, [r3]
    tcp_parseopt(npcb);
  121758:	e51b0008 	ldr	r0, [fp, #-8]
  12175c:	eb000bf1 	bl	124728 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
  121760:	e30f3230 	movw	r3, #62000	; 0xf230
  121764:	e3403014 	movt	r3, #20
  121768:	e5933000 	ldr	r3, [r3]
  12176c:	e1d330be 	ldrh	r3, [r3, #14]
  121770:	e6ff2073 	uxth	r2, r3
  121774:	e51b3008 	ldr	r3, [fp, #-8]
  121778:	e1c326b0 	strh	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
  12177c:	e51b3008 	ldr	r3, [fp, #-8]
  121780:	e1d326b0 	ldrh	r2, [r3, #96]	; 0x60
  121784:	e51b3008 	ldr	r3, [fp, #-8]
  121788:	e1c326b2 	strh	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
  12178c:	e51b3008 	ldr	r3, [fp, #-8]
  121790:	e1d323b6 	ldrh	r2, [r3, #54]	; 0x36
  121794:	e51b3008 	ldr	r3, [fp, #-8]
  121798:	e2833004 	add	r3, r3, #4
  12179c:	e1a01003 	mov	r1, r3
  1217a0:	e1a00002 	mov	r0, r2
  1217a4:	ebfffaae 	bl	120264 <tcp_eff_send_mss_impl>
  1217a8:	e1a03000 	mov	r3, r0
  1217ac:	e1a02003 	mov	r2, r3
  1217b0:	e51b3008 	ldr	r3, [fp, #-8]
  1217b4:	e1c323b6 	strh	r2, [r3, #54]	; 0x36
    MIB2_STATS_INC(mib2.tcppassiveopens);
  1217b8:	e3063840 	movw	r3, #26688	; 0x6840
  1217bc:	e3403057 	movt	r3, #87	; 0x57
  1217c0:	e5933170 	ldr	r3, [r3, #368]	; 0x170
  1217c4:	e2832001 	add	r2, r3, #1
  1217c8:	e3063840 	movw	r3, #26688	; 0x6840
  1217cc:	e3403057 	movt	r3, #87	; 0x57
  1217d0:	e5832170 	str	r2, [r3, #368]	; 0x170
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
  1217d4:	e3a01012 	mov	r1, #18
  1217d8:	e51b0008 	ldr	r0, [fp, #-8]
  1217dc:	eb001109 	bl	125c08 <tcp_enqueue_flags>
  1217e0:	e1a03000 	mov	r3, r0
  1217e4:	e54b300d 	strb	r3, [fp, #-13]
    if (rc != ERR_OK) {
  1217e8:	e15b30dd 	ldrsb	r3, [fp, #-13]
  1217ec:	e3530000 	cmp	r3, #0
  1217f0:	0a000003 	beq	121804 <tcp_listen_input+0x33c>
      tcp_abandon(npcb, 0);
  1217f4:	e3a01000 	mov	r1, #0
  1217f8:	e51b0008 	ldr	r0, [fp, #-8]
  1217fc:	ebfff061 	bl	11d988 <tcp_abandon>
      return;
  121800:	ea000006 	b	121820 <tcp_listen_input+0x358>
    tcp_output(npcb);
  121804:	e51b0008 	ldr	r0, [fp, #-8]
  121808:	eb00124d 	bl	126144 <tcp_output>
  return;
  12180c:	e320f000 	nop	{0}
  121810:	ea000001 	b	12181c <tcp_listen_input+0x354>
    return;
  121814:	e320f000 	nop	{0}
  121818:	ea000000 	b	121820 <tcp_listen_input+0x358>
  return;
  12181c:	e320f000 	nop	{0}
}
  121820:	e24bd004 	sub	sp, fp, #4
  121824:	e8bd8800 	pop	{fp, pc}
  121828:	001505f8 	.word	0x001505f8
  12182c:	001505fc 	.word	0x001505fc

00121830 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
  121830:	e92d4800 	push	{fp, lr}
  121834:	e28db004 	add	fp, sp, #4
  121838:	e24dd010 	sub	sp, sp, #16
  12183c:	e50b0008 	str	r0, [fp, #-8]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
  121840:	e30f324c 	movw	r3, #62028	; 0xf24c
  121844:	e3403014 	movt	r3, #20
  121848:	e5d33000 	ldrb	r3, [r3]
  12184c:	e2033004 	and	r3, r3, #4
  121850:	e3530000 	cmp	r3, #0
  121854:	1a00004d 	bne	121990 <tcp_timewait_input+0x160>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
  121858:	e30f324c 	movw	r3, #62028	; 0xf24c
  12185c:	e3403014 	movt	r3, #20
  121860:	e5d33000 	ldrb	r3, [r3]
  121864:	e2033002 	and	r3, r3, #2
  121868:	e3530000 	cmp	r3, #0
  12186c:	0a00002d 	beq	121928 <tcp_timewait_input+0xf8>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
  121870:	e30f3240 	movw	r3, #62016	; 0xf240
  121874:	e3403014 	movt	r3, #20
  121878:	e5932000 	ldr	r2, [r3]
  12187c:	e51b3008 	ldr	r3, [fp, #-8]
  121880:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  121884:	e0423003 	sub	r3, r2, r3
  121888:	e3530000 	cmp	r3, #0
  12188c:	ba000030 	blt	121954 <tcp_timewait_input+0x124>
  121890:	e30f3240 	movw	r3, #62016	; 0xf240
  121894:	e3403014 	movt	r3, #20
  121898:	e5932000 	ldr	r2, [r3]
  12189c:	e51b3008 	ldr	r3, [fp, #-8]
  1218a0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  1218a4:	e51b1008 	ldr	r1, [fp, #-8]
  1218a8:	e1d112bc 	ldrh	r1, [r1, #44]	; 0x2c
  1218ac:	e0833001 	add	r3, r3, r1
  1218b0:	e0423003 	sub	r3, r2, r3
  1218b4:	e3530000 	cmp	r3, #0
  1218b8:	ca000025 	bgt	121954 <tcp_timewait_input+0x124>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  1218bc:	e30f3244 	movw	r3, #62020	; 0xf244
  1218c0:	e3403014 	movt	r3, #20
  1218c4:	e5930000 	ldr	r0, [r3]
  1218c8:	e30f324a 	movw	r3, #62026	; 0xf24a
  1218cc:	e3403014 	movt	r3, #20
  1218d0:	e1d330b0 	ldrh	r3, [r3]
  1218d4:	e1a02003 	mov	r2, r3
  1218d8:	e30f3240 	movw	r3, #62016	; 0xf240
  1218dc:	e3403014 	movt	r3, #20
  1218e0:	e5933000 	ldr	r3, [r3]
  1218e4:	e0821003 	add	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  1218e8:	e30f3230 	movw	r3, #62000	; 0xf230
  1218ec:	e3403014 	movt	r3, #20
  1218f0:	e5933000 	ldr	r3, [r3]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  1218f4:	e1d330b2 	ldrh	r3, [r3, #2]
  1218f8:	e6ff2073 	uxth	r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  1218fc:	e30f3230 	movw	r3, #62000	; 0xf230
  121900:	e3403014 	movt	r3, #20
  121904:	e5933000 	ldr	r3, [r3]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  121908:	e1d330b0 	ldrh	r3, [r3]
  12190c:	e6ff3073 	uxth	r3, r3
  121910:	e58d3004 	str	r3, [sp, #4]
  121914:	e58d2000 	str	r2, [sp]
  121918:	e59f3084 	ldr	r3, [pc, #132]	; 1219a4 <tcp_timewait_input+0x174>
  12191c:	e59f2084 	ldr	r2, [pc, #132]	; 1219a8 <tcp_timewait_input+0x178>
  121920:	eb00146d 	bl	126adc <tcp_rst>
      return;
  121924:	ea00001c 	b	12199c <tcp_timewait_input+0x16c>
    }
  } else if (flags & TCP_FIN) {
  121928:	e30f324c 	movw	r3, #62028	; 0xf24c
  12192c:	e3403014 	movt	r3, #20
  121930:	e5d33000 	ldrb	r3, [r3]
  121934:	e2033001 	and	r3, r3, #1
  121938:	e3530000 	cmp	r3, #0
  12193c:	0a000004 	beq	121954 <tcp_timewait_input+0x124>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
  121940:	e3063a34 	movw	r3, #27188	; 0x6a34
  121944:	e3403057 	movt	r3, #87	; 0x57
  121948:	e5932000 	ldr	r2, [r3]
  12194c:	e51b3008 	ldr	r3, [fp, #-8]
  121950:	e5832024 	str	r2, [r3, #36]	; 0x24
  }

  if ((tcplen > 0)) {
  121954:	e30f324a 	movw	r3, #62026	; 0xf24a
  121958:	e3403014 	movt	r3, #20
  12195c:	e1d330b0 	ldrh	r3, [r3]
  121960:	e3530000 	cmp	r3, #0
  121964:	0a00000b 	beq	121998 <tcp_timewait_input+0x168>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
  121968:	e51b3008 	ldr	r3, [fp, #-8]
  12196c:	e5d3301e 	ldrb	r3, [r3, #30]
  121970:	e3833002 	orr	r3, r3, #2
  121974:	e6ef2073 	uxtb	r2, r3
  121978:	e51b3008 	ldr	r3, [fp, #-8]
  12197c:	e5c3201e 	strb	r2, [r3, #30]
    tcp_output(pcb);
  121980:	e51b0008 	ldr	r0, [fp, #-8]
  121984:	eb0011ee 	bl	126144 <tcp_output>
  }
  return;
  121988:	e320f000 	nop	{0}
  12198c:	ea000001 	b	121998 <tcp_timewait_input+0x168>
    return;
  121990:	e320f000 	nop	{0}
  121994:	ea000000 	b	12199c <tcp_timewait_input+0x16c>
  return;
  121998:	e320f000 	nop	{0}
}
  12199c:	e24bd004 	sub	sp, fp, #4
  1219a0:	e8bd8800 	pop	{fp, pc}
  1219a4:	001505f8 	.word	0x001505f8
  1219a8:	001505fc 	.word	0x001505fc

001219ac <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
  1219ac:	e92d4800 	push	{fp, lr}
  1219b0:	e28db004 	add	fp, sp, #4
  1219b4:	e24dd028 	sub	sp, sp, #40	; 0x28
  1219b8:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
  1219bc:	e3a03000 	mov	r3, #0
  1219c0:	e54b3009 	strb	r3, [fp, #-9]
  err_t err;

  err = ERR_OK;
  1219c4:	e3a03000 	mov	r3, #0
  1219c8:	e54b300a 	strb	r3, [fp, #-10]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
  1219cc:	e30f324c 	movw	r3, #62028	; 0xf24c
  1219d0:	e3403014 	movt	r3, #20
  1219d4:	e5d33000 	ldrb	r3, [r3]
  1219d8:	e2033004 	and	r3, r3, #4
  1219dc:	e3530000 	cmp	r3, #0
  1219e0:	0a000050 	beq	121b28 <tcp_process+0x17c>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
  1219e4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1219e8:	e5933014 	ldr	r3, [r3, #20]
  1219ec:	e3530002 	cmp	r3, #2
  1219f0:	1a000009 	bne	121a1c <tcp_process+0x70>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
  1219f4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1219f8:	e5932050 	ldr	r2, [r3, #80]	; 0x50
  1219fc:	e30f3244 	movw	r3, #62020	; 0xf244
  121a00:	e3403014 	movt	r3, #20
  121a04:	e5933000 	ldr	r3, [r3]
  121a08:	e1520003 	cmp	r2, r3
  121a0c:	1a000025 	bne	121aa8 <tcp_process+0xfc>
        acceptable = 1;
  121a10:	e3a03001 	mov	r3, #1
  121a14:	e54b3009 	strb	r3, [fp, #-9]
  121a18:	ea000022 	b	121aa8 <tcp_process+0xfc>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
  121a1c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121a20:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  121a24:	e30f3240 	movw	r3, #62016	; 0xf240
  121a28:	e3403014 	movt	r3, #20
  121a2c:	e5933000 	ldr	r3, [r3]
  121a30:	e1520003 	cmp	r2, r3
  121a34:	1a000002 	bne	121a44 <tcp_process+0x98>
        acceptable = 1;
  121a38:	e3a03001 	mov	r3, #1
  121a3c:	e54b3009 	strb	r3, [fp, #-9]
  121a40:	ea000018 	b	121aa8 <tcp_process+0xfc>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
  121a44:	e30f3240 	movw	r3, #62016	; 0xf240
  121a48:	e3403014 	movt	r3, #20
  121a4c:	e5932000 	ldr	r2, [r3]
  121a50:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121a54:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  121a58:	e0423003 	sub	r3, r2, r3
  121a5c:	e3530000 	cmp	r3, #0
  121a60:	ba000010 	blt	121aa8 <tcp_process+0xfc>
  121a64:	e30f3240 	movw	r3, #62016	; 0xf240
  121a68:	e3403014 	movt	r3, #20
  121a6c:	e5932000 	ldr	r2, [r3]
  121a70:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121a74:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  121a78:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  121a7c:	e1d112bc 	ldrh	r1, [r1, #44]	; 0x2c
  121a80:	e0833001 	add	r3, r3, r1
  121a84:	e0423003 	sub	r3, r2, r3
  121a88:	e3530000 	cmp	r3, #0
  121a8c:	ca000005 	bgt	121aa8 <tcp_process+0xfc>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
  121a90:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121a94:	e5d3301e 	ldrb	r3, [r3, #30]
  121a98:	e3833002 	orr	r3, r3, #2
  121a9c:	e6ef2073 	uxtb	r2, r3
  121aa0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121aa4:	e5c3201e 	strb	r2, [r3, #30]
      }
    }

    if (acceptable) {
  121aa8:	e55b3009 	ldrb	r3, [fp, #-9]
  121aac:	e3530000 	cmp	r3, #0
  121ab0:	0a00001a 	beq	121b20 <tcp_process+0x174>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
  121ab4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121ab8:	e5933014 	ldr	r3, [r3, #20]
  121abc:	e3530000 	cmp	r3, #0
  121ac0:	1a000006 	bne	121ae0 <tcp_process+0x134>
  121ac4:	e3080604 	movw	r0, #34308	; 0x8604
  121ac8:	e3400014 	movt	r0, #20
  121acc:	ebff8590 	bl	103114 <rt_kprintf>
  121ad0:	e3a01fb5 	mov	r1, #724	; 0x2d4
  121ad4:	e3080488 	movw	r0, #33928	; 0x8488
  121ad8:	e3400014 	movt	r0, #20
  121adc:	ebffa560 	bl	10b064 <sys_arch_assert>
      recv_flags |= TF_RESET;
  121ae0:	e30f324d 	movw	r3, #62029	; 0xf24d
  121ae4:	e3403014 	movt	r3, #20
  121ae8:	e5d33000 	ldrb	r3, [r3]
  121aec:	e3833008 	orr	r3, r3, #8
  121af0:	e6ef2073 	uxtb	r2, r3
  121af4:	e30f324d 	movw	r3, #62029	; 0xf24d
  121af8:	e3403014 	movt	r3, #20
  121afc:	e5c32000 	strb	r2, [r3]
      pcb->flags &= ~TF_ACK_DELAY;
  121b00:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121b04:	e5d3301e 	ldrb	r3, [r3, #30]
  121b08:	e3c33001 	bic	r3, r3, #1
  121b0c:	e6ef2073 	uxtb	r2, r3
  121b10:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121b14:	e5c3201e 	strb	r2, [r3, #30]
      return ERR_RST;
  121b18:	e3e0300d 	mvn	r3, #13
  121b1c:	ea0002fd 	b	122718 <tcp_process+0xd6c>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
  121b20:	e3a03000 	mov	r3, #0
  121b24:	ea0002fb 	b	122718 <tcp_process+0xd6c>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
  121b28:	e30f324c 	movw	r3, #62028	; 0xf24c
  121b2c:	e3403014 	movt	r3, #20
  121b30:	e5d33000 	ldrb	r3, [r3]
  121b34:	e2033002 	and	r3, r3, #2
  121b38:	e3530000 	cmp	r3, #0
  121b3c:	0a00000f 	beq	121b80 <tcp_process+0x1d4>
  121b40:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121b44:	e5933014 	ldr	r3, [r3, #20]
  121b48:	e3530002 	cmp	r3, #2
  121b4c:	0a00000b 	beq	121b80 <tcp_process+0x1d4>
  121b50:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121b54:	e5933014 	ldr	r3, [r3, #20]
  121b58:	e3530003 	cmp	r3, #3
  121b5c:	0a000007 	beq	121b80 <tcp_process+0x1d4>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
  121b60:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121b64:	e5d3301e 	ldrb	r3, [r3, #30]
  121b68:	e3833002 	orr	r3, r3, #2
  121b6c:	e6ef2073 	uxtb	r2, r3
  121b70:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121b74:	e5c3201e 	strb	r2, [r3, #30]
    return ERR_OK;
  121b78:	e3a03000 	mov	r3, #0
  121b7c:	ea0002e5 	b	122718 <tcp_process+0xd6c>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
  121b80:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121b84:	e5d3301e 	ldrb	r3, [r3, #30]
  121b88:	e2033010 	and	r3, r3, #16
  121b8c:	e3530000 	cmp	r3, #0
  121b90:	1a000004 	bne	121ba8 <tcp_process+0x1fc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
  121b94:	e3063a34 	movw	r3, #27188	; 0x6a34
  121b98:	e3403057 	movt	r3, #87	; 0x57
  121b9c:	e5932000 	ldr	r2, [r3]
  121ba0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121ba4:	e5832024 	str	r2, [r3, #36]	; 0x24
  }
  pcb->keep_cnt_sent = 0;
  121ba8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121bac:	e3a02000 	mov	r2, #0
  121bb0:	e5c320a2 	strb	r2, [r3, #162]	; 0xa2

  tcp_parseopt(pcb);
  121bb4:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  121bb8:	eb000ada 	bl	124728 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
  121bbc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121bc0:	e5933014 	ldr	r3, [r3, #20]
  121bc4:	e2433002 	sub	r3, r3, #2
  121bc8:	e3530007 	cmp	r3, #7
  121bcc:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  121bd0:	ea0002c0 	b	1226d8 <tcp_process+0xd2c>
  121bd4:	00121bf4 	.word	0x00121bf4
  121bd8:	00121f48 	.word	0x00121f48
  121bdc:	001221ec 	.word	0x001221ec
  121be0:	00122234 	.word	0x00122234
  121be4:	00122414 	.word	0x00122414
  121be8:	001221ec 	.word	0x001221ec
  121bec:	00122534 	.word	0x00122534
  121bf0:	00122668 	.word	0x00122668
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
  121bf4:	e30f324c 	movw	r3, #62028	; 0xf24c
  121bf8:	e3403014 	movt	r3, #20
  121bfc:	e5d33000 	ldrb	r3, [r3]
  121c00:	e2033010 	and	r3, r3, #16
  121c04:	e3530000 	cmp	r3, #0
  121c08:	0a0000a4 	beq	121ea0 <tcp_process+0x4f4>
  121c0c:	e30f324c 	movw	r3, #62028	; 0xf24c
  121c10:	e3403014 	movt	r3, #20
  121c14:	e5d33000 	ldrb	r3, [r3]
  121c18:	e2033002 	and	r3, r3, #2
  121c1c:	e3530000 	cmp	r3, #0
  121c20:	0a00009e 	beq	121ea0 <tcp_process+0x4f4>
        && (ackno == pcb->lastack + 1)) {
  121c24:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121c28:	e5933048 	ldr	r3, [r3, #72]	; 0x48
  121c2c:	e2832001 	add	r2, r3, #1
  121c30:	e30f3244 	movw	r3, #62020	; 0xf244
  121c34:	e3403014 	movt	r3, #20
  121c38:	e5933000 	ldr	r3, [r3]
  121c3c:	e1520003 	cmp	r2, r3
  121c40:	1a000096 	bne	121ea0 <tcp_process+0x4f4>
      pcb->rcv_nxt = seqno + 1;
  121c44:	e30f3240 	movw	r3, #62016	; 0xf240
  121c48:	e3403014 	movt	r3, #20
  121c4c:	e5933000 	ldr	r3, [r3]
  121c50:	e2832001 	add	r2, r3, #1
  121c54:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121c58:	e5832028 	str	r2, [r3, #40]	; 0x28
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
  121c5c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121c60:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  121c64:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121c68:	e5832030 	str	r2, [r3, #48]	; 0x30
      pcb->lastack = ackno;
  121c6c:	e30f3244 	movw	r3, #62020	; 0xf244
  121c70:	e3403014 	movt	r3, #20
  121c74:	e5932000 	ldr	r2, [r3]
  121c78:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121c7c:	e5832048 	str	r2, [r3, #72]	; 0x48
      pcb->snd_wnd = tcphdr->wnd;
  121c80:	e30f3230 	movw	r3, #62000	; 0xf230
  121c84:	e3403014 	movt	r3, #20
  121c88:	e5933000 	ldr	r3, [r3]
  121c8c:	e1d330be 	ldrh	r3, [r3, #14]
  121c90:	e6ff2073 	uxth	r2, r3
  121c94:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121c98:	e1c326b0 	strh	r2, [r3, #96]	; 0x60
      pcb->snd_wnd_max = pcb->snd_wnd;
  121c9c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121ca0:	e1d326b0 	ldrh	r2, [r3, #96]	; 0x60
  121ca4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121ca8:	e1c326b2 	strh	r2, [r3, #98]	; 0x62
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
  121cac:	e30f3240 	movw	r3, #62016	; 0xf240
  121cb0:	e3403014 	movt	r3, #20
  121cb4:	e5933000 	ldr	r3, [r3]
  121cb8:	e2432001 	sub	r2, r3, #1
  121cbc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121cc0:	e5832054 	str	r2, [r3, #84]	; 0x54
      pcb->state = ESTABLISHED;
  121cc4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121cc8:	e3a02004 	mov	r2, #4
  121ccc:	e5832014 	str	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
  121cd0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121cd4:	e1d323b6 	ldrh	r2, [r3, #54]	; 0x36
  121cd8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121cdc:	e2833004 	add	r3, r3, #4
  121ce0:	e1a01003 	mov	r1, r3
  121ce4:	e1a00002 	mov	r0, r2
  121ce8:	ebfff95d 	bl	120264 <tcp_eff_send_mss_impl>
  121cec:	e1a03000 	mov	r3, r0
  121cf0:	e1a02003 	mov	r2, r3
  121cf4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121cf8:	e1c323b6 	strh	r2, [r3, #54]	; 0x36
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
  121cfc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121d00:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  121d04:	e1a03083 	lsl	r3, r3, #1
  121d08:	e301211c 	movw	r2, #4380	; 0x111c
  121d0c:	e1530002 	cmp	r3, r2
  121d10:	21a02003 	movcs	r2, r3
  121d14:	31a02002 	movcc	r2, r2
  121d18:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121d1c:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  121d20:	e1a03103 	lsl	r3, r3, #2
  121d24:	e1520003 	cmp	r2, r3
  121d28:	31a03002 	movcc	r3, r2
  121d2c:	21a03003 	movcs	r3, r3
  121d30:	e6ff2073 	uxth	r2, r3
  121d34:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121d38:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
  121d3c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121d40:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  121d44:	e3530000 	cmp	r3, #0
  121d48:	1a000006 	bne	121d68 <tcp_process+0x3bc>
  121d4c:	e3080624 	movw	r0, #34340	; 0x8624
  121d50:	e3400014 	movt	r0, #20
  121d54:	ebff84ee 	bl	103114 <rt_kprintf>
  121d58:	e3001307 	movw	r1, #775	; 0x307
  121d5c:	e3080488 	movw	r0, #33928	; 0x8488
  121d60:	e3400014 	movt	r0, #20
  121d64:	ebffa4be 	bl	10b064 <sys_arch_assert>
      --pcb->snd_queuelen;
  121d68:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121d6c:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  121d70:	e2433001 	sub	r3, r3, #1
  121d74:	e6ff2073 	uxth	r2, r3
  121d78:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121d7c:	e1c326b6 	strh	r2, [r3, #102]	; 0x66
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
  121d80:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121d84:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  121d88:	e50b3008 	str	r3, [fp, #-8]
      if (rseg == NULL) {
  121d8c:	e51b3008 	ldr	r3, [fp, #-8]
  121d90:	e3530000 	cmp	r3, #0
  121d94:	1a000011 	bne	121de0 <tcp_process+0x434>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
  121d98:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121d9c:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  121da0:	e50b3008 	str	r3, [fp, #-8]
        LWIP_ASSERT("no segment to free", rseg != NULL);
  121da4:	e51b3008 	ldr	r3, [fp, #-8]
  121da8:	e3530000 	cmp	r3, #0
  121dac:	1a000006 	bne	121dcc <tcp_process+0x420>
  121db0:	e308063c 	movw	r0, #34364	; 0x863c
  121db4:	e3400014 	movt	r0, #20
  121db8:	ebff84d5 	bl	103114 <rt_kprintf>
  121dbc:	e300130f 	movw	r1, #783	; 0x30f
  121dc0:	e3080488 	movw	r0, #33928	; 0x8488
  121dc4:	e3400014 	movt	r0, #20
  121dc8:	ebffa4a5 	bl	10b064 <sys_arch_assert>
        pcb->unsent = rseg->next;
  121dcc:	e51b3008 	ldr	r3, [fp, #-8]
  121dd0:	e5932000 	ldr	r2, [r3]
  121dd4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121dd8:	e583206c 	str	r2, [r3, #108]	; 0x6c
  121ddc:	ea000003 	b	121df0 <tcp_process+0x444>
      } else {
        pcb->unacked = rseg->next;
  121de0:	e51b3008 	ldr	r3, [fp, #-8]
  121de4:	e5932000 	ldr	r2, [r3]
  121de8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121dec:	e5832070 	str	r2, [r3, #112]	; 0x70
      }
      tcp_seg_free(rseg);
  121df0:	e51b0008 	ldr	r0, [fp, #-8]
  121df4:	ebfff61a 	bl	11f664 <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
  121df8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121dfc:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  121e00:	e3530000 	cmp	r3, #0
  121e04:	1a000003 	bne	121e18 <tcp_process+0x46c>
        pcb->rtime = -1;
  121e08:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121e0c:	e3e02000 	mvn	r2, #0
  121e10:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
  121e14:	ea000005 	b	121e30 <tcp_process+0x484>
      } else {
        pcb->rtime = 0;
  121e18:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121e1c:	e3a02000 	mov	r2, #0
  121e20:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
        pcb->nrtx = 0;
  121e24:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121e28:	e3a02000 	mov	r2, #0
  121e2c:	e5c32046 	strb	r2, [r3, #70]	; 0x46
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
  121e30:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121e34:	e5933088 	ldr	r3, [r3, #136]	; 0x88
  121e38:	e3530000 	cmp	r3, #0
  121e3c:	0a000009 	beq	121e68 <tcp_process+0x4bc>
  121e40:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121e44:	e5933088 	ldr	r3, [r3, #136]	; 0x88
  121e48:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  121e4c:	e5920010 	ldr	r0, [r2, #16]
  121e50:	e3a02000 	mov	r2, #0
  121e54:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  121e58:	e12fff33 	blx	r3
  121e5c:	e1a03000 	mov	r3, r0
  121e60:	e54b300a 	strb	r3, [fp, #-10]
  121e64:	ea000001 	b	121e70 <tcp_process+0x4c4>
  121e68:	e3a03000 	mov	r3, #0
  121e6c:	e54b300a 	strb	r3, [fp, #-10]
      if (err == ERR_ABRT) {
  121e70:	e15b30da 	ldrsb	r3, [fp, #-10]
  121e74:	e373000d 	cmn	r3, #13
  121e78:	1a000001 	bne	121e84 <tcp_process+0x4d8>
        return ERR_ABRT;
  121e7c:	e3e0300c 	mvn	r3, #12
  121e80:	ea000224 	b	122718 <tcp_process+0xd6c>
      }
      tcp_ack_now(pcb);
  121e84:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121e88:	e5d3301e 	ldrb	r3, [r3, #30]
  121e8c:	e3833002 	orr	r3, r3, #2
  121e90:	e6ef2073 	uxtb	r2, r3
  121e94:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121e98:	e5c3201e 	strb	r2, [r3, #30]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
  121e9c:	ea00020f 	b	1226e0 <tcp_process+0xd34>
    else if (flags & TCP_ACK) {
  121ea0:	e30f324c 	movw	r3, #62028	; 0xf24c
  121ea4:	e3403014 	movt	r3, #20
  121ea8:	e5d33000 	ldrb	r3, [r3]
  121eac:	e2033010 	and	r3, r3, #16
  121eb0:	e3530000 	cmp	r3, #0
  121eb4:	0a000209 	beq	1226e0 <tcp_process+0xd34>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  121eb8:	e30f3244 	movw	r3, #62020	; 0xf244
  121ebc:	e3403014 	movt	r3, #20
  121ec0:	e5930000 	ldr	r0, [r3]
  121ec4:	e30f324a 	movw	r3, #62026	; 0xf24a
  121ec8:	e3403014 	movt	r3, #20
  121ecc:	e1d330b0 	ldrh	r3, [r3]
  121ed0:	e1a02003 	mov	r2, r3
  121ed4:	e30f3240 	movw	r3, #62016	; 0xf240
  121ed8:	e3403014 	movt	r3, #20
  121edc:	e5933000 	ldr	r3, [r3]
  121ee0:	e0821003 	add	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  121ee4:	e30f3230 	movw	r3, #62000	; 0xf230
  121ee8:	e3403014 	movt	r3, #20
  121eec:	e5933000 	ldr	r3, [r3]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  121ef0:	e1d330b2 	ldrh	r3, [r3, #2]
  121ef4:	e6ff2073 	uxth	r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  121ef8:	e30f3230 	movw	r3, #62000	; 0xf230
  121efc:	e3403014 	movt	r3, #20
  121f00:	e5933000 	ldr	r3, [r3]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  121f04:	e1d330b0 	ldrh	r3, [r3]
  121f08:	e6ff3073 	uxth	r3, r3
  121f0c:	e58d3004 	str	r3, [sp, #4]
  121f10:	e58d2000 	str	r2, [sp]
  121f14:	e59f3808 	ldr	r3, [pc, #2056]	; 122724 <tcp_process+0xd78>
  121f18:	e59f2808 	ldr	r2, [pc, #2056]	; 122728 <tcp_process+0xd7c>
  121f1c:	eb0012ee 	bl	126adc <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
  121f20:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121f24:	e5d33046 	ldrb	r3, [r3, #70]	; 0x46
  121f28:	e3530003 	cmp	r3, #3
  121f2c:	8a0001eb 	bhi	1226e0 <tcp_process+0xd34>
        pcb->rtime = 0;
  121f30:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121f34:	e3a02000 	mov	r2, #0
  121f38:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
        tcp_rexmit_rto(pcb);
  121f3c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  121f40:	eb001361 	bl	126ccc <tcp_rexmit_rto>
    break;
  121f44:	ea0001e5 	b	1226e0 <tcp_process+0xd34>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
  121f48:	e30f324c 	movw	r3, #62028	; 0xf24c
  121f4c:	e3403014 	movt	r3, #20
  121f50:	e5d33000 	ldrb	r3, [r3]
  121f54:	e2033010 	and	r3, r3, #16
  121f58:	e3530000 	cmp	r3, #0
  121f5c:	0a000090 	beq	1221a4 <tcp_process+0x7f8>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
  121f60:	e30f3244 	movw	r3, #62020	; 0xf244
  121f64:	e3403014 	movt	r3, #20
  121f68:	e5932000 	ldr	r2, [r3]
  121f6c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121f70:	e5933048 	ldr	r3, [r3, #72]	; 0x48
  121f74:	e0423003 	sub	r3, r2, r3
  121f78:	e2433001 	sub	r3, r3, #1
  121f7c:	e3530000 	cmp	r3, #0
  121f80:	ba00006c 	blt	122138 <tcp_process+0x78c>
  121f84:	e30f3244 	movw	r3, #62020	; 0xf244
  121f88:	e3403014 	movt	r3, #20
  121f8c:	e5932000 	ldr	r2, [r3]
  121f90:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121f94:	e5933050 	ldr	r3, [r3, #80]	; 0x50
  121f98:	e0423003 	sub	r3, r2, r3
  121f9c:	e3530000 	cmp	r3, #0
  121fa0:	ca000064 	bgt	122138 <tcp_process+0x78c>
        pcb->state = ESTABLISHED;
  121fa4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121fa8:	e3a02004 	mov	r2, #4
  121fac:	e5832014 	str	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
  121fb0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121fb4:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  121fb8:	e3530000 	cmp	r3, #0
  121fbc:	0a00000b 	beq	121ff0 <tcp_process+0x644>
  121fc0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121fc4:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  121fc8:	e593301c 	ldr	r3, [r3, #28]
  121fcc:	e3530000 	cmp	r3, #0
  121fd0:	1a000006 	bne	121ff0 <tcp_process+0x644>
  121fd4:	e3080650 	movw	r0, #34384	; 0x8650
  121fd8:	e3400014 	movt	r0, #20
  121fdc:	ebff844c 	bl	103114 <rt_kprintf>
  121fe0:	e300133e 	movw	r1, #830	; 0x33e
  121fe4:	e3080488 	movw	r0, #33928	; 0x8488
  121fe8:	e3400014 	movt	r0, #20
  121fec:	ebffa41c 	bl	10b064 <sys_arch_assert>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
  121ff0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  121ff4:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  121ff8:	e3530000 	cmp	r3, #0
  121ffc:	1a000002 	bne	12200c <tcp_process+0x660>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
  122000:	e3e03005 	mvn	r3, #5
  122004:	e54b300a 	strb	r3, [fp, #-10]
  122008:	ea000011 	b	122054 <tcp_process+0x6a8>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
  12200c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122010:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  122014:	e593301c 	ldr	r3, [r3, #28]
  122018:	e3530000 	cmp	r3, #0
  12201c:	0a00000a 	beq	12204c <tcp_process+0x6a0>
  122020:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122024:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  122028:	e593301c 	ldr	r3, [r3, #28]
  12202c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  122030:	e5920010 	ldr	r0, [r2, #16]
  122034:	e3a02000 	mov	r2, #0
  122038:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  12203c:	e12fff33 	blx	r3
  122040:	e1a03000 	mov	r3, r0
  122044:	e54b300a 	strb	r3, [fp, #-10]
  122048:	ea000001 	b	122054 <tcp_process+0x6a8>
  12204c:	e3e0300f 	mvn	r3, #15
  122050:	e54b300a 	strb	r3, [fp, #-10]
        }
        if (err != ERR_OK) {
  122054:	e15b30da 	ldrsb	r3, [fp, #-10]
  122058:	e3530000 	cmp	r3, #0
  12205c:	0a000006 	beq	12207c <tcp_process+0x6d0>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
  122060:	e15b30da 	ldrsb	r3, [fp, #-10]
  122064:	e373000d 	cmn	r3, #13
  122068:	0a000001 	beq	122074 <tcp_process+0x6c8>
            tcp_abort(pcb);
  12206c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  122070:	ebffeee3 	bl	11dc04 <tcp_abort>
          }
          return ERR_ABRT;
  122074:	e3e0300c 	mvn	r3, #12
  122078:	ea0001a6 	b	122718 <tcp_process+0xd6c>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
  12207c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  122080:	eb000217 	bl	1228e4 <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
  122084:	e30f3248 	movw	r3, #62024	; 0xf248
  122088:	e3403014 	movt	r3, #20
  12208c:	e1d330b0 	ldrh	r3, [r3]
  122090:	e3530000 	cmp	r3, #0
  122094:	0a000007 	beq	1220b8 <tcp_process+0x70c>
          recv_acked--;
  122098:	e30f3248 	movw	r3, #62024	; 0xf248
  12209c:	e3403014 	movt	r3, #20
  1220a0:	e1d330b0 	ldrh	r3, [r3]
  1220a4:	e2433001 	sub	r3, r3, #1
  1220a8:	e6ff2073 	uxth	r2, r3
  1220ac:	e30f3248 	movw	r3, #62024	; 0xf248
  1220b0:	e3403014 	movt	r3, #20
  1220b4:	e1c320b0 	strh	r2, [r3]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
  1220b8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1220bc:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  1220c0:	e1a03083 	lsl	r3, r3, #1
  1220c4:	e301211c 	movw	r2, #4380	; 0x111c
  1220c8:	e1530002 	cmp	r3, r2
  1220cc:	21a02003 	movcs	r2, r3
  1220d0:	31a02002 	movcc	r2, r2
  1220d4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1220d8:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  1220dc:	e1a03103 	lsl	r3, r3, #2
  1220e0:	e1520003 	cmp	r2, r3
  1220e4:	31a03002 	movcc	r3, r2
  1220e8:	21a03003 	movcs	r3, r3
  1220ec:	e6ff2073 	uxth	r2, r3
  1220f0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1220f4:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
  1220f8:	e30f324d 	movw	r3, #62029	; 0xf24d
  1220fc:	e3403014 	movt	r3, #20
  122100:	e5d33000 	ldrb	r3, [r3]
  122104:	e2033020 	and	r3, r3, #32
  122108:	e3530000 	cmp	r3, #0
  12210c:	0a000035 	beq	1221e8 <tcp_process+0x83c>
          tcp_ack_now(pcb);
  122110:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122114:	e5d3301e 	ldrb	r3, [r3, #30]
  122118:	e3833002 	orr	r3, r3, #2
  12211c:	e6ef2073 	uxtb	r2, r3
  122120:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122124:	e5c3201e 	strb	r2, [r3, #30]
          pcb->state = CLOSE_WAIT;
  122128:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12212c:	e3a02007 	mov	r2, #7
  122130:	e5832014 	str	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
  122134:	ea00002b 	b	1221e8 <tcp_process+0x83c>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  122138:	e30f3244 	movw	r3, #62020	; 0xf244
  12213c:	e3403014 	movt	r3, #20
  122140:	e5930000 	ldr	r0, [r3]
  122144:	e30f324a 	movw	r3, #62026	; 0xf24a
  122148:	e3403014 	movt	r3, #20
  12214c:	e1d330b0 	ldrh	r3, [r3]
  122150:	e1a02003 	mov	r2, r3
  122154:	e30f3240 	movw	r3, #62016	; 0xf240
  122158:	e3403014 	movt	r3, #20
  12215c:	e5933000 	ldr	r3, [r3]
  122160:	e0821003 	add	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  122164:	e30f3230 	movw	r3, #62000	; 0xf230
  122168:	e3403014 	movt	r3, #20
  12216c:	e5933000 	ldr	r3, [r3]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  122170:	e1d330b2 	ldrh	r3, [r3, #2]
  122174:	e6ff2073 	uxth	r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
  122178:	e30f3230 	movw	r3, #62000	; 0xf230
  12217c:	e3403014 	movt	r3, #20
  122180:	e5933000 	ldr	r3, [r3]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
  122184:	e1d330b0 	ldrh	r3, [r3]
  122188:	e6ff3073 	uxth	r3, r3
  12218c:	e58d3004 	str	r3, [sp, #4]
  122190:	e58d2000 	str	r2, [sp]
  122194:	e59f3588 	ldr	r3, [pc, #1416]	; 122724 <tcp_process+0xd78>
  122198:	e59f2588 	ldr	r2, [pc, #1416]	; 122728 <tcp_process+0xd7c>
  12219c:	eb00124e 	bl	126adc <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
  1221a0:	ea000150 	b	1226e8 <tcp_process+0xd3c>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
  1221a4:	e30f324c 	movw	r3, #62028	; 0xf24c
  1221a8:	e3403014 	movt	r3, #20
  1221ac:	e5d33000 	ldrb	r3, [r3]
  1221b0:	e2033002 	and	r3, r3, #2
  1221b4:	e3530000 	cmp	r3, #0
  1221b8:	0a00014a 	beq	1226e8 <tcp_process+0xd3c>
  1221bc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1221c0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  1221c4:	e2432001 	sub	r2, r3, #1
  1221c8:	e30f3240 	movw	r3, #62016	; 0xf240
  1221cc:	e3403014 	movt	r3, #20
  1221d0:	e5933000 	ldr	r3, [r3]
  1221d4:	e1520003 	cmp	r2, r3
  1221d8:	1a000142 	bne	1226e8 <tcp_process+0xd3c>
      tcp_rexmit(pcb);
  1221dc:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  1221e0:	eb0012ea 	bl	126d90 <tcp_rexmit>
    break;
  1221e4:	ea00013f 	b	1226e8 <tcp_process+0xd3c>
  1221e8:	ea00013e 	b	1226e8 <tcp_process+0xd3c>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
  1221ec:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  1221f0:	eb0001bb 	bl	1228e4 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
  1221f4:	e30f324d 	movw	r3, #62029	; 0xf24d
  1221f8:	e3403014 	movt	r3, #20
  1221fc:	e5d33000 	ldrb	r3, [r3]
  122200:	e2033020 	and	r3, r3, #32
  122204:	e3530000 	cmp	r3, #0
  122208:	0a000138 	beq	1226f0 <tcp_process+0xd44>
      tcp_ack_now(pcb);
  12220c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122210:	e5d3301e 	ldrb	r3, [r3, #30]
  122214:	e3833002 	orr	r3, r3, #2
  122218:	e6ef2073 	uxtb	r2, r3
  12221c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122220:	e5c3201e 	strb	r2, [r3, #30]
      pcb->state = CLOSE_WAIT;
  122224:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122228:	e3a02007 	mov	r2, #7
  12222c:	e5832014 	str	r2, [r3, #20]
    }
    break;
  122230:	ea00012e 	b	1226f0 <tcp_process+0xd44>
  case FIN_WAIT_1:
    tcp_receive(pcb);
  122234:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  122238:	eb0001a9 	bl	1228e4 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
  12223c:	e30f324d 	movw	r3, #62029	; 0xf24d
  122240:	e3403014 	movt	r3, #20
  122244:	e5d33000 	ldrb	r3, [r3]
  122248:	e2033020 	and	r3, r3, #32
  12224c:	e3530000 	cmp	r3, #0
  122250:	0a00005a 	beq	1223c0 <tcp_process+0xa14>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
  122254:	e30f324c 	movw	r3, #62028	; 0xf24c
  122258:	e3403014 	movt	r3, #20
  12225c:	e5d33000 	ldrb	r3, [r3]
  122260:	e2033010 	and	r3, r3, #16
  122264:	e3530000 	cmp	r3, #0
  122268:	0a00004a 	beq	122398 <tcp_process+0x9ec>
  12226c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122270:	e5932050 	ldr	r2, [r3, #80]	; 0x50
  122274:	e30f3244 	movw	r3, #62020	; 0xf244
  122278:	e3403014 	movt	r3, #20
  12227c:	e5933000 	ldr	r3, [r3]
  122280:	e1520003 	cmp	r2, r3
  122284:	1a000043 	bne	122398 <tcp_process+0x9ec>
          pcb->unsent == NULL) {
  122288:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12228c:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
  122290:	e3530000 	cmp	r3, #0
  122294:	1a00003f 	bne	122398 <tcp_process+0x9ec>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
  122298:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12229c:	e5d3301e 	ldrb	r3, [r3, #30]
  1222a0:	e3833002 	orr	r3, r3, #2
  1222a4:	e6ef2073 	uxtb	r2, r3
  1222a8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1222ac:	e5c3201e 	strb	r2, [r3, #30]
        tcp_pcb_purge(pcb);
  1222b0:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  1222b4:	ebfff72f 	bl	11ff78 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
  1222b8:	e3063a30 	movw	r3, #27184	; 0x6a30
  1222bc:	e3403057 	movt	r3, #87	; 0x57
  1222c0:	e5933000 	ldr	r3, [r3]
  1222c4:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1222c8:	e1520003 	cmp	r2, r3
  1222cc:	1a000007 	bne	1222f0 <tcp_process+0x944>
  1222d0:	e3063a30 	movw	r3, #27184	; 0x6a30
  1222d4:	e3403057 	movt	r3, #87	; 0x57
  1222d8:	e5933000 	ldr	r3, [r3]
  1222dc:	e593200c 	ldr	r2, [r3, #12]
  1222e0:	e3063a30 	movw	r3, #27184	; 0x6a30
  1222e4:	e3403057 	movt	r3, #87	; 0x57
  1222e8:	e5832000 	str	r2, [r3]
  1222ec:	ea000014 	b	122344 <tcp_process+0x998>
  1222f0:	e3063a30 	movw	r3, #27184	; 0x6a30
  1222f4:	e3403057 	movt	r3, #87	; 0x57
  1222f8:	e5933000 	ldr	r3, [r3]
  1222fc:	e50b3010 	str	r3, [fp, #-16]
  122300:	ea00000c 	b	122338 <tcp_process+0x98c>
  122304:	e51b3010 	ldr	r3, [fp, #-16]
  122308:	e593300c 	ldr	r3, [r3, #12]
  12230c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  122310:	e1520003 	cmp	r2, r3
  122314:	1a000004 	bne	12232c <tcp_process+0x980>
  122318:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12231c:	e593200c 	ldr	r2, [r3, #12]
  122320:	e51b3010 	ldr	r3, [fp, #-16]
  122324:	e583200c 	str	r2, [r3, #12]
  122328:	ea000005 	b	122344 <tcp_process+0x998>
  12232c:	e51b3010 	ldr	r3, [fp, #-16]
  122330:	e593300c 	ldr	r3, [r3, #12]
  122334:	e50b3010 	str	r3, [fp, #-16]
  122338:	e51b3010 	ldr	r3, [fp, #-16]
  12233c:	e3530000 	cmp	r3, #0
  122340:	1affffef 	bne	122304 <tcp_process+0x958>
  122344:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122348:	e3a02000 	mov	r2, #0
  12234c:	e583200c 	str	r2, [r3, #12]
  122350:	e3063a2c 	movw	r3, #27180	; 0x6a2c
  122354:	e3403057 	movt	r3, #87	; 0x57
  122358:	e3a02001 	mov	r2, #1
  12235c:	e5c32000 	strb	r2, [r3]
        pcb->state = TIME_WAIT;
  122360:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122364:	e3a0200a 	mov	r2, #10
  122368:	e5832014 	str	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
  12236c:	e3063a40 	movw	r3, #27200	; 0x6a40
  122370:	e3403057 	movt	r3, #87	; 0x57
  122374:	e5932000 	ldr	r2, [r3]
  122378:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12237c:	e583200c 	str	r2, [r3, #12]
  122380:	e3063a40 	movw	r3, #27200	; 0x6a40
  122384:	e3403057 	movt	r3, #87	; 0x57
  122388:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  12238c:	e5832000 	str	r2, [r3]
  122390:	eb001424 	bl	127428 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
  122394:	ea0000d7 	b	1226f8 <tcp_process+0xd4c>
        tcp_ack_now(pcb);
  122398:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12239c:	e5d3301e 	ldrb	r3, [r3, #30]
  1223a0:	e3833002 	orr	r3, r3, #2
  1223a4:	e6ef2073 	uxtb	r2, r3
  1223a8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1223ac:	e5c3201e 	strb	r2, [r3, #30]
        pcb->state = CLOSING;
  1223b0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1223b4:	e3a02008 	mov	r2, #8
  1223b8:	e5832014 	str	r2, [r3, #20]
    break;
  1223bc:	ea0000cd 	b	1226f8 <tcp_process+0xd4c>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
  1223c0:	e30f324c 	movw	r3, #62028	; 0xf24c
  1223c4:	e3403014 	movt	r3, #20
  1223c8:	e5d33000 	ldrb	r3, [r3]
  1223cc:	e2033010 	and	r3, r3, #16
  1223d0:	e3530000 	cmp	r3, #0
  1223d4:	0a0000c7 	beq	1226f8 <tcp_process+0xd4c>
  1223d8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1223dc:	e5932050 	ldr	r2, [r3, #80]	; 0x50
  1223e0:	e30f3244 	movw	r3, #62020	; 0xf244
  1223e4:	e3403014 	movt	r3, #20
  1223e8:	e5933000 	ldr	r3, [r3]
  1223ec:	e1520003 	cmp	r2, r3
  1223f0:	1a0000c0 	bne	1226f8 <tcp_process+0xd4c>
               pcb->unsent == NULL) {
  1223f4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1223f8:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
  1223fc:	e3530000 	cmp	r3, #0
  122400:	1a0000bc 	bne	1226f8 <tcp_process+0xd4c>
      pcb->state = FIN_WAIT_2;
  122404:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122408:	e3a02006 	mov	r2, #6
  12240c:	e5832014 	str	r2, [r3, #20]
    break;
  122410:	ea0000b8 	b	1226f8 <tcp_process+0xd4c>
  case FIN_WAIT_2:
    tcp_receive(pcb);
  122414:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  122418:	eb000131 	bl	1228e4 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
  12241c:	e30f324d 	movw	r3, #62029	; 0xf24d
  122420:	e3403014 	movt	r3, #20
  122424:	e5d33000 	ldrb	r3, [r3]
  122428:	e2033020 	and	r3, r3, #32
  12242c:	e3530000 	cmp	r3, #0
  122430:	0a0000b2 	beq	122700 <tcp_process+0xd54>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
  122434:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122438:	e5d3301e 	ldrb	r3, [r3, #30]
  12243c:	e3833002 	orr	r3, r3, #2
  122440:	e6ef2073 	uxtb	r2, r3
  122444:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122448:	e5c3201e 	strb	r2, [r3, #30]
      tcp_pcb_purge(pcb);
  12244c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  122450:	ebfff6c8 	bl	11ff78 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
  122454:	e3063a30 	movw	r3, #27184	; 0x6a30
  122458:	e3403057 	movt	r3, #87	; 0x57
  12245c:	e5933000 	ldr	r3, [r3]
  122460:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  122464:	e1520003 	cmp	r2, r3
  122468:	1a000007 	bne	12248c <tcp_process+0xae0>
  12246c:	e3063a30 	movw	r3, #27184	; 0x6a30
  122470:	e3403057 	movt	r3, #87	; 0x57
  122474:	e5933000 	ldr	r3, [r3]
  122478:	e593200c 	ldr	r2, [r3, #12]
  12247c:	e3063a30 	movw	r3, #27184	; 0x6a30
  122480:	e3403057 	movt	r3, #87	; 0x57
  122484:	e5832000 	str	r2, [r3]
  122488:	ea000014 	b	1224e0 <tcp_process+0xb34>
  12248c:	e3063a30 	movw	r3, #27184	; 0x6a30
  122490:	e3403057 	movt	r3, #87	; 0x57
  122494:	e5933000 	ldr	r3, [r3]
  122498:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  12249c:	ea00000c 	b	1224d4 <tcp_process+0xb28>
  1224a0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1224a4:	e593300c 	ldr	r3, [r3, #12]
  1224a8:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1224ac:	e1520003 	cmp	r2, r3
  1224b0:	1a000004 	bne	1224c8 <tcp_process+0xb1c>
  1224b4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1224b8:	e593200c 	ldr	r2, [r3, #12]
  1224bc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1224c0:	e583200c 	str	r2, [r3, #12]
  1224c4:	ea000005 	b	1224e0 <tcp_process+0xb34>
  1224c8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1224cc:	e593300c 	ldr	r3, [r3, #12]
  1224d0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  1224d4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1224d8:	e3530000 	cmp	r3, #0
  1224dc:	1affffef 	bne	1224a0 <tcp_process+0xaf4>
  1224e0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1224e4:	e3a02000 	mov	r2, #0
  1224e8:	e583200c 	str	r2, [r3, #12]
  1224ec:	e3063a2c 	movw	r3, #27180	; 0x6a2c
  1224f0:	e3403057 	movt	r3, #87	; 0x57
  1224f4:	e3a02001 	mov	r2, #1
  1224f8:	e5c32000 	strb	r2, [r3]
      pcb->state = TIME_WAIT;
  1224fc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122500:	e3a0200a 	mov	r2, #10
  122504:	e5832014 	str	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
  122508:	e3063a40 	movw	r3, #27200	; 0x6a40
  12250c:	e3403057 	movt	r3, #87	; 0x57
  122510:	e5932000 	ldr	r2, [r3]
  122514:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122518:	e583200c 	str	r2, [r3, #12]
  12251c:	e3063a40 	movw	r3, #27200	; 0x6a40
  122520:	e3403057 	movt	r3, #87	; 0x57
  122524:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  122528:	e5832000 	str	r2, [r3]
  12252c:	eb0013bd 	bl	127428 <tcp_timer_needed>
    }
    break;
  122530:	ea000072 	b	122700 <tcp_process+0xd54>
  case CLOSING:
    tcp_receive(pcb);
  122534:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  122538:	eb0000e9 	bl	1228e4 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
  12253c:	e30f324c 	movw	r3, #62028	; 0xf24c
  122540:	e3403014 	movt	r3, #20
  122544:	e5d33000 	ldrb	r3, [r3]
  122548:	e2033010 	and	r3, r3, #16
  12254c:	e3530000 	cmp	r3, #0
  122550:	0a00006c 	beq	122708 <tcp_process+0xd5c>
  122554:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122558:	e5932050 	ldr	r2, [r3, #80]	; 0x50
  12255c:	e30f3244 	movw	r3, #62020	; 0xf244
  122560:	e3403014 	movt	r3, #20
  122564:	e5933000 	ldr	r3, [r3]
  122568:	e1520003 	cmp	r2, r3
  12256c:	1a000065 	bne	122708 <tcp_process+0xd5c>
  122570:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122574:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  122578:	e3530000 	cmp	r3, #0
  12257c:	1a000061 	bne	122708 <tcp_process+0xd5c>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
  122580:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  122584:	ebfff67b 	bl	11ff78 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
  122588:	e3063a30 	movw	r3, #27184	; 0x6a30
  12258c:	e3403057 	movt	r3, #87	; 0x57
  122590:	e5933000 	ldr	r3, [r3]
  122594:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  122598:	e1520003 	cmp	r2, r3
  12259c:	1a000007 	bne	1225c0 <tcp_process+0xc14>
  1225a0:	e3063a30 	movw	r3, #27184	; 0x6a30
  1225a4:	e3403057 	movt	r3, #87	; 0x57
  1225a8:	e5933000 	ldr	r3, [r3]
  1225ac:	e593200c 	ldr	r2, [r3, #12]
  1225b0:	e3063a30 	movw	r3, #27184	; 0x6a30
  1225b4:	e3403057 	movt	r3, #87	; 0x57
  1225b8:	e5832000 	str	r2, [r3]
  1225bc:	ea000014 	b	122614 <tcp_process+0xc68>
  1225c0:	e3063a30 	movw	r3, #27184	; 0x6a30
  1225c4:	e3403057 	movt	r3, #87	; 0x57
  1225c8:	e5933000 	ldr	r3, [r3]
  1225cc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  1225d0:	ea00000c 	b	122608 <tcp_process+0xc5c>
  1225d4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1225d8:	e593300c 	ldr	r3, [r3, #12]
  1225dc:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1225e0:	e1520003 	cmp	r2, r3
  1225e4:	1a000004 	bne	1225fc <tcp_process+0xc50>
  1225e8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1225ec:	e593200c 	ldr	r2, [r3, #12]
  1225f0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1225f4:	e583200c 	str	r2, [r3, #12]
  1225f8:	ea000005 	b	122614 <tcp_process+0xc68>
  1225fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122600:	e593300c 	ldr	r3, [r3, #12]
  122604:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  122608:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12260c:	e3530000 	cmp	r3, #0
  122610:	1affffef 	bne	1225d4 <tcp_process+0xc28>
  122614:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122618:	e3a02000 	mov	r2, #0
  12261c:	e583200c 	str	r2, [r3, #12]
  122620:	e3063a2c 	movw	r3, #27180	; 0x6a2c
  122624:	e3403057 	movt	r3, #87	; 0x57
  122628:	e3a02001 	mov	r2, #1
  12262c:	e5c32000 	strb	r2, [r3]
      pcb->state = TIME_WAIT;
  122630:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  122634:	e3a0200a 	mov	r2, #10
  122638:	e5832014 	str	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
  12263c:	e3063a40 	movw	r3, #27200	; 0x6a40
  122640:	e3403057 	movt	r3, #87	; 0x57
  122644:	e5932000 	ldr	r2, [r3]
  122648:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12264c:	e583200c 	str	r2, [r3, #12]
  122650:	e3063a40 	movw	r3, #27200	; 0x6a40
  122654:	e3403057 	movt	r3, #87	; 0x57
  122658:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  12265c:	e5832000 	str	r2, [r3]
  122660:	eb001370 	bl	127428 <tcp_timer_needed>
    }
    break;
  122664:	ea000027 	b	122708 <tcp_process+0xd5c>
  case LAST_ACK:
    tcp_receive(pcb);
  122668:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  12266c:	eb00009c 	bl	1228e4 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
  122670:	e30f324c 	movw	r3, #62028	; 0xf24c
  122674:	e3403014 	movt	r3, #20
  122678:	e5d33000 	ldrb	r3, [r3]
  12267c:	e2033010 	and	r3, r3, #16
  122680:	e3530000 	cmp	r3, #0
  122684:	0a000021 	beq	122710 <tcp_process+0xd64>
  122688:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12268c:	e5932050 	ldr	r2, [r3, #80]	; 0x50
  122690:	e30f3244 	movw	r3, #62020	; 0xf244
  122694:	e3403014 	movt	r3, #20
  122698:	e5933000 	ldr	r3, [r3]
  12269c:	e1520003 	cmp	r2, r3
  1226a0:	1a00001a 	bne	122710 <tcp_process+0xd64>
  1226a4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1226a8:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  1226ac:	e3530000 	cmp	r3, #0
  1226b0:	1a000016 	bne	122710 <tcp_process+0xd64>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
  1226b4:	e30f324d 	movw	r3, #62029	; 0xf24d
  1226b8:	e3403014 	movt	r3, #20
  1226bc:	e5d33000 	ldrb	r3, [r3]
  1226c0:	e3833010 	orr	r3, r3, #16
  1226c4:	e6ef2073 	uxtb	r2, r3
  1226c8:	e30f324d 	movw	r3, #62029	; 0xf24d
  1226cc:	e3403014 	movt	r3, #20
  1226d0:	e5c32000 	strb	r2, [r3]
    }
    break;
  1226d4:	ea00000d 	b	122710 <tcp_process+0xd64>
  default:
    break;
  1226d8:	e320f000 	nop	{0}
  1226dc:	ea00000c 	b	122714 <tcp_process+0xd68>
    break;
  1226e0:	e320f000 	nop	{0}
  1226e4:	ea00000a 	b	122714 <tcp_process+0xd68>
    break;
  1226e8:	e320f000 	nop	{0}
  1226ec:	ea000008 	b	122714 <tcp_process+0xd68>
    break;
  1226f0:	e320f000 	nop	{0}
  1226f4:	ea000006 	b	122714 <tcp_process+0xd68>
    break;
  1226f8:	e320f000 	nop	{0}
  1226fc:	ea000004 	b	122714 <tcp_process+0xd68>
    break;
  122700:	e320f000 	nop	{0}
  122704:	ea000002 	b	122714 <tcp_process+0xd68>
    break;
  122708:	e320f000 	nop	{0}
  12270c:	ea000000 	b	122714 <tcp_process+0xd68>
    break;
  122710:	e320f000 	nop	{0}
  }
  return ERR_OK;
  122714:	e3a03000 	mov	r3, #0
}
  122718:	e1a00003 	mov	r0, r3
  12271c:	e24bd004 	sub	sp, fp, #4
  122720:	e8bd8800 	pop	{fp, pc}
  122724:	001505f8 	.word	0x001505f8
  122728:	001505fc 	.word	0x001505fc

0012272c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
  12272c:	e92d4810 	push	{r4, fp, lr}
  122730:	e28db008 	add	fp, sp, #8
  122734:	e24dd014 	sub	sp, sp, #20
  122738:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  12273c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
  122740:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122744:	e593300c 	ldr	r3, [r3, #12]
  122748:	e1d330bc 	ldrh	r3, [r3, #12]
  12274c:	e6ff3073 	uxth	r3, r3
  122750:	e1a00003 	mov	r0, r3
  122754:	ebffd019 	bl	1167c0 <lwip_htons>
  122758:	e1a03000 	mov	r3, r0
  12275c:	e2033001 	and	r3, r3, #1
  122760:	e3530000 	cmp	r3, #0
  122764:	0a000022 	beq	1227f4 <tcp_oos_insert_segment+0xc8>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
  122768:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  12276c:	ebfff3aa 	bl	11f61c <tcp_segs_free>
    next = NULL;
  122770:	e3a03000 	mov	r3, #0
  122774:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  122778:	ea000053 	b	1228cc <tcp_oos_insert_segment+0x1a0>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
  12277c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  122780:	e593300c 	ldr	r3, [r3, #12]
  122784:	e1d330bc 	ldrh	r3, [r3, #12]
  122788:	e6ff3073 	uxth	r3, r3
  12278c:	e1a00003 	mov	r0, r3
  122790:	ebffd00a 	bl	1167c0 <lwip_htons>
  122794:	e1a03000 	mov	r3, r0
  122798:	e2033001 	and	r3, r3, #1
  12279c:	e3530000 	cmp	r3, #0
  1227a0:	0a00000c 	beq	1227d8 <tcp_oos_insert_segment+0xac>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
  1227a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1227a8:	e593300c 	ldr	r3, [r3, #12]
  1227ac:	e1d330bc 	ldrh	r3, [r3, #12]
  1227b0:	e6ff4073 	uxth	r4, r3
  1227b4:	e3a00001 	mov	r0, #1
  1227b8:	ebffd000 	bl	1167c0 <lwip_htons>
  1227bc:	e1a03000 	mov	r3, r0
  1227c0:	e1a02003 	mov	r2, r3
  1227c4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1227c8:	e593300c 	ldr	r3, [r3, #12]
  1227cc:	e1842002 	orr	r2, r4, r2
  1227d0:	e6ff2072 	uxth	r2, r2
  1227d4:	e1c320bc 	strh	r2, [r3, #12]
      }
      old_seg = next;
  1227d8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1227dc:	e50b3010 	str	r3, [fp, #-16]
      next = next->next;
  1227e0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1227e4:	e5933000 	ldr	r3, [r3]
  1227e8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
      tcp_seg_free(old_seg);
  1227ec:	e51b0010 	ldr	r0, [fp, #-16]
  1227f0:	ebfff39b 	bl	11f664 <tcp_seg_free>
    while (next &&
  1227f4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1227f8:	e3530000 	cmp	r3, #0
  1227fc:	0a00000f 	beq	122840 <tcp_oos_insert_segment+0x114>
           TCP_SEQ_GEQ((seqno + cseg->len),
  122800:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122804:	e1d330b8 	ldrh	r3, [r3, #8]
  122808:	e1a02003 	mov	r2, r3
  12280c:	e30f3240 	movw	r3, #62016	; 0xf240
  122810:	e3403014 	movt	r3, #20
  122814:	e5933000 	ldr	r3, [r3]
  122818:	e0822003 	add	r2, r2, r3
  12281c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  122820:	e593300c 	ldr	r3, [r3, #12]
  122824:	e5933004 	ldr	r3, [r3, #4]
  122828:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  12282c:	e1d110b8 	ldrh	r1, [r1, #8]
  122830:	e0833001 	add	r3, r3, r1
  122834:	e0423003 	sub	r3, r2, r3
    while (next &&
  122838:	e3530000 	cmp	r3, #0
  12283c:	aaffffce 	bge	12277c <tcp_oos_insert_segment+0x50>
    }
    if (next &&
  122840:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  122844:	e3530000 	cmp	r3, #0
  122848:	0a00001f 	beq	1228cc <tcp_oos_insert_segment+0x1a0>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
  12284c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122850:	e1d330b8 	ldrh	r3, [r3, #8]
  122854:	e1a02003 	mov	r2, r3
  122858:	e30f3240 	movw	r3, #62016	; 0xf240
  12285c:	e3403014 	movt	r3, #20
  122860:	e5933000 	ldr	r3, [r3]
  122864:	e0822003 	add	r2, r2, r3
  122868:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12286c:	e593300c 	ldr	r3, [r3, #12]
  122870:	e5933004 	ldr	r3, [r3, #4]
  122874:	e0423003 	sub	r3, r2, r3
    if (next &&
  122878:	e3530000 	cmp	r3, #0
  12287c:	da000012 	ble	1228cc <tcp_oos_insert_segment+0x1a0>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
  122880:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  122884:	e593300c 	ldr	r3, [r3, #12]
  122888:	e5933004 	ldr	r3, [r3, #4]
  12288c:	e6ff2073 	uxth	r2, r3
  122890:	e30f3240 	movw	r3, #62016	; 0xf240
  122894:	e3403014 	movt	r3, #20
  122898:	e5933000 	ldr	r3, [r3]
  12289c:	e6ff3073 	uxth	r3, r3
  1228a0:	e0423003 	sub	r3, r2, r3
  1228a4:	e6ff2073 	uxth	r2, r3
  1228a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1228ac:	e1c320b8 	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
  1228b0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1228b4:	e5932004 	ldr	r2, [r3, #4]
  1228b8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1228bc:	e1d330b8 	ldrh	r3, [r3, #8]
  1228c0:	e1a01003 	mov	r1, r3
  1228c4:	e1a00002 	mov	r0, r2
  1228c8:	ebffe0aa 	bl	11ab78 <pbuf_realloc>
    }
  }
  cseg->next = next;
  1228cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1228d0:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1228d4:	e5832000 	str	r2, [r3]
}
  1228d8:	e320f000 	nop	{0}
  1228dc:	e24bd008 	sub	sp, fp, #8
  1228e0:	e8bd8810 	pop	{r4, fp, pc}

001228e4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
  1228e4:	e92d4870 	push	{r4, r5, r6, fp, lr}
  1228e8:	e28db010 	add	fp, sp, #16
  1228ec:	e24dd034 	sub	sp, sp, #52	; 0x34
  1228f0:	e50b0040 	str	r0, [fp, #-64]	; 0xffffffc0
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
  1228f4:	e3a03000 	mov	r3, #0
  1228f8:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
  1228fc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122900:	e5933014 	ldr	r3, [r3, #20]
  122904:	e3530003 	cmp	r3, #3
  122908:	8a000006 	bhi	122928 <tcp_receive+0x44>
  12290c:	e3080670 	movw	r0, #34416	; 0x8670
  122910:	e3400014 	movt	r0, #20
  122914:	ebff81fe 	bl	103114 <rt_kprintf>
  122918:	e30013f5 	movw	r1, #1013	; 0x3f5
  12291c:	e3080488 	movw	r0, #33928	; 0x8488
  122920:	e3400014 	movt	r0, #20
  122924:	ebffa1ce 	bl	10b064 <sys_arch_assert>

  if (flags & TCP_ACK) {
  122928:	e30f324c 	movw	r3, #62028	; 0xf24c
  12292c:	e3403014 	movt	r3, #20
  122930:	e5d33000 	ldrb	r3, [r3]
  122934:	e2033010 	and	r3, r3, #16
  122938:	e3530000 	cmp	r3, #0
  12293c:	0a000268 	beq	1232e4 <tcp_receive+0xa00>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
  122940:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122944:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  122948:	e1a02003 	mov	r2, r3
  12294c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122950:	e5933058 	ldr	r3, [r3, #88]	; 0x58
  122954:	e0823003 	add	r3, r2, r3
  122958:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
  12295c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122960:	e5932054 	ldr	r2, [r3, #84]	; 0x54
  122964:	e30f3240 	movw	r3, #62016	; 0xf240
  122968:	e3403014 	movt	r3, #20
  12296c:	e5933000 	ldr	r3, [r3]
  122970:	e0423003 	sub	r3, r2, r3
  122974:	e3530000 	cmp	r3, #0
  122978:	ba00001e 	blt	1229f8 <tcp_receive+0x114>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
  12297c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122980:	e5932054 	ldr	r2, [r3, #84]	; 0x54
  122984:	e30f3240 	movw	r3, #62016	; 0xf240
  122988:	e3403014 	movt	r3, #20
  12298c:	e5933000 	ldr	r3, [r3]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
  122990:	e1520003 	cmp	r2, r3
  122994:	1a000007 	bne	1229b8 <tcp_receive+0xd4>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
  122998:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12299c:	e5932058 	ldr	r2, [r3, #88]	; 0x58
  1229a0:	e30f3244 	movw	r3, #62020	; 0xf244
  1229a4:	e3403014 	movt	r3, #20
  1229a8:	e5933000 	ldr	r3, [r3]
  1229ac:	e0423003 	sub	r3, r2, r3
  1229b0:	e3530000 	cmp	r3, #0
  1229b4:	ba00000f 	blt	1229f8 <tcp_receive+0x114>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
  1229b8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1229bc:	e5932058 	ldr	r2, [r3, #88]	; 0x58
  1229c0:	e30f3244 	movw	r3, #62020	; 0xf244
  1229c4:	e3403014 	movt	r3, #20
  1229c8:	e5933000 	ldr	r3, [r3]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
  1229cc:	e1520003 	cmp	r2, r3
  1229d0:	1a000039 	bne	122abc <tcp_receive+0x1d8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
  1229d4:	e30f3230 	movw	r3, #62000	; 0xf230
  1229d8:	e3403014 	movt	r3, #20
  1229dc:	e5933000 	ldr	r3, [r3]
  1229e0:	e1d330be 	ldrh	r3, [r3, #14]
  1229e4:	e6ff2073 	uxth	r2, r3
  1229e8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1229ec:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  1229f0:	e1520003 	cmp	r2, r3
  1229f4:	9a000030 	bls	122abc <tcp_receive+0x1d8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
  1229f8:	e30f3230 	movw	r3, #62000	; 0xf230
  1229fc:	e3403014 	movt	r3, #20
  122a00:	e5933000 	ldr	r3, [r3]
  122a04:	e1d330be 	ldrh	r3, [r3, #14]
  122a08:	e6ff2073 	uxth	r2, r3
  122a0c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122a10:	e1c326b0 	strh	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
  122a14:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122a18:	e1d326b2 	ldrh	r2, [r3, #98]	; 0x62
  122a1c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122a20:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  122a24:	e1520003 	cmp	r2, r3
  122a28:	2a000003 	bcs	122a3c <tcp_receive+0x158>
        pcb->snd_wnd_max = pcb->snd_wnd;
  122a2c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122a30:	e1d326b0 	ldrh	r2, [r3, #96]	; 0x60
  122a34:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122a38:	e1c326b2 	strh	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
  122a3c:	e30f3240 	movw	r3, #62016	; 0xf240
  122a40:	e3403014 	movt	r3, #20
  122a44:	e5932000 	ldr	r2, [r3]
  122a48:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122a4c:	e5832054 	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
  122a50:	e30f3244 	movw	r3, #62020	; 0xf244
  122a54:	e3403014 	movt	r3, #20
  122a58:	e5932000 	ldr	r2, [r3]
  122a5c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122a60:	e5832058 	str	r2, [r3, #88]	; 0x58
      if (pcb->snd_wnd == 0) {
  122a64:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122a68:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  122a6c:	e3530000 	cmp	r3, #0
  122a70:	1a00000a 	bne	122aa0 <tcp_receive+0x1bc>
        if (pcb->persist_backoff == 0) {
  122a74:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122a78:	e5d330a1 	ldrb	r3, [r3, #161]	; 0xa1
  122a7c:	e3530000 	cmp	r3, #0
  122a80:	1a00000d 	bne	122abc <tcp_receive+0x1d8>
          /* start persist timer */
          pcb->persist_cnt = 0;
  122a84:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122a88:	e3a02000 	mov	r2, #0
  122a8c:	e5c320a0 	strb	r2, [r3, #160]	; 0xa0
          pcb->persist_backoff = 1;
  122a90:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122a94:	e3a02001 	mov	r2, #1
  122a98:	e5c320a1 	strb	r2, [r3, #161]	; 0xa1
  122a9c:	ea000006 	b	122abc <tcp_receive+0x1d8>
        }
      } else if (pcb->persist_backoff > 0) {
  122aa0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122aa4:	e5d330a1 	ldrb	r3, [r3, #161]	; 0xa1
  122aa8:	e3530000 	cmp	r3, #0
  122aac:	0a000002 	beq	122abc <tcp_receive+0x1d8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
  122ab0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122ab4:	e3a02000 	mov	r2, #0
  122ab8:	e5c320a1 	strb	r2, [r3, #161]	; 0xa1
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
  122abc:	e30f3244 	movw	r3, #62020	; 0xf244
  122ac0:	e3403014 	movt	r3, #20
  122ac4:	e5932000 	ldr	r2, [r3]
  122ac8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122acc:	e5933048 	ldr	r3, [r3, #72]	; 0x48
  122ad0:	e0423003 	sub	r3, r2, r3
  122ad4:	e3530000 	cmp	r3, #0
  122ad8:	ca000047 	bgt	122bfc <tcp_receive+0x318>
      /* Clause 2 */
      if (tcplen == 0) {
  122adc:	e30f324a 	movw	r3, #62026	; 0xf24a
  122ae0:	e3403014 	movt	r3, #20
  122ae4:	e1d330b0 	ldrh	r3, [r3]
  122ae8:	e3530000 	cmp	r3, #0
  122aec:	1a00003b 	bne	122be0 <tcp_receive+0x2fc>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
  122af0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122af4:	e5933058 	ldr	r3, [r3, #88]	; 0x58
  122af8:	e51b2040 	ldr	r2, [fp, #-64]	; 0xffffffc0
  122afc:	e1d226b0 	ldrh	r2, [r2, #96]	; 0x60
  122b00:	e0833002 	add	r3, r3, r2
  122b04:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  122b08:	e1520003 	cmp	r2, r3
  122b0c:	1a000033 	bne	122be0 <tcp_receive+0x2fc>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
  122b10:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122b14:	e1d333f4 	ldrsh	r3, [r3, #52]	; 0x34
  122b18:	e3530000 	cmp	r3, #0
  122b1c:	ba00002f 	blt	122be0 <tcp_receive+0x2fc>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
  122b20:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122b24:	e5932048 	ldr	r2, [r3, #72]	; 0x48
  122b28:	e30f3244 	movw	r3, #62020	; 0xf244
  122b2c:	e3403014 	movt	r3, #20
  122b30:	e5933000 	ldr	r3, [r3]
  122b34:	e1520003 	cmp	r2, r3
  122b38:	1a000028 	bne	122be0 <tcp_receive+0x2fc>
              found_dupack = 1;
  122b3c:	e3a03001 	mov	r3, #1
  122b40:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
  122b44:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122b48:	e5d33047 	ldrb	r3, [r3, #71]	; 0x47
  122b4c:	e35300ff 	cmp	r3, #255	; 0xff
  122b50:	0a000005 	beq	122b6c <tcp_receive+0x288>
                ++pcb->dupacks;
  122b54:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122b58:	e5d33047 	ldrb	r3, [r3, #71]	; 0x47
  122b5c:	e2833001 	add	r3, r3, #1
  122b60:	e6ef2073 	uxtb	r2, r3
  122b64:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122b68:	e5c32047 	strb	r2, [r3, #71]	; 0x47
              }
              if (pcb->dupacks > 3) {
  122b6c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122b70:	e5d33047 	ldrb	r3, [r3, #71]	; 0x47
  122b74:	e3530003 	cmp	r3, #3
  122b78:	9a000012 	bls	122bc8 <tcp_receive+0x2e4>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
  122b7c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122b80:	e1d324bc 	ldrh	r2, [r3, #76]	; 0x4c
  122b84:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122b88:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  122b8c:	e0823003 	add	r3, r2, r3
  122b90:	e6ff2073 	uxth	r2, r3
  122b94:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122b98:	e1d334bc 	ldrh	r3, [r3, #76]	; 0x4c
  122b9c:	e1520003 	cmp	r2, r3
  122ba0:	9a00000e 	bls	122be0 <tcp_receive+0x2fc>
                  pcb->cwnd += pcb->mss;
  122ba4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122ba8:	e1d324bc 	ldrh	r2, [r3, #76]	; 0x4c
  122bac:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122bb0:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  122bb4:	e0823003 	add	r3, r2, r3
  122bb8:	e6ff2073 	uxth	r2, r3
  122bbc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122bc0:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
  122bc4:	ea000005 	b	122be0 <tcp_receive+0x2fc>
                }
              } else if (pcb->dupacks == 3) {
  122bc8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122bcc:	e5d33047 	ldrb	r3, [r3, #71]	; 0x47
  122bd0:	e3530003 	cmp	r3, #3
  122bd4:	1a000001 	bne	122be0 <tcp_receive+0x2fc>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
  122bd8:	e51b0040 	ldr	r0, [fp, #-64]	; 0xffffffc0
  122bdc:	eb0010bb 	bl	126ed0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
  122be0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  122be4:	e3530000 	cmp	r3, #0
  122be8:	1a000136 	bne	1230c8 <tcp_receive+0x7e4>
        pcb->dupacks = 0;
  122bec:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122bf0:	e3a02000 	mov	r2, #0
  122bf4:	e5c32047 	strb	r2, [r3, #71]	; 0x47
  122bf8:	ea000132 	b	1230c8 <tcp_receive+0x7e4>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
  122bfc:	e30f3244 	movw	r3, #62020	; 0xf244
  122c00:	e3403014 	movt	r3, #20
  122c04:	e5932000 	ldr	r2, [r3]
  122c08:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122c0c:	e5933048 	ldr	r3, [r3, #72]	; 0x48
  122c10:	e0423003 	sub	r3, r2, r3
  122c14:	e2433001 	sub	r3, r3, #1
  122c18:	e3530000 	cmp	r3, #0
  122c1c:	ba0000dc 	blt	122f94 <tcp_receive+0x6b0>
  122c20:	e30f3244 	movw	r3, #62020	; 0xf244
  122c24:	e3403014 	movt	r3, #20
  122c28:	e5932000 	ldr	r2, [r3]
  122c2c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122c30:	e5933050 	ldr	r3, [r3, #80]	; 0x50
  122c34:	e0423003 	sub	r3, r2, r3
  122c38:	e3530000 	cmp	r3, #0
  122c3c:	ca0000d4 	bgt	122f94 <tcp_receive+0x6b0>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
  122c40:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122c44:	e5d3301e 	ldrb	r3, [r3, #30]
  122c48:	e2033004 	and	r3, r3, #4
  122c4c:	e3530000 	cmp	r3, #0
  122c50:	0a000009 	beq	122c7c <tcp_receive+0x398>
        pcb->flags &= ~TF_INFR;
  122c54:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122c58:	e5d3301e 	ldrb	r3, [r3, #30]
  122c5c:	e3c33004 	bic	r3, r3, #4
  122c60:	e6ef2073 	uxtb	r2, r3
  122c64:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122c68:	e5c3201e 	strb	r2, [r3, #30]
        pcb->cwnd = pcb->ssthresh;
  122c6c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122c70:	e1d324be 	ldrh	r2, [r3, #78]	; 0x4e
  122c74:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122c78:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
  122c7c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122c80:	e3a02000 	mov	r2, #0
  122c84:	e5c32046 	strb	r2, [r3, #70]	; 0x46

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
  122c88:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122c8c:	e1d334f0 	ldrsh	r3, [r3, #64]	; 0x40
  122c90:	e1a031c3 	asr	r3, r3, #3
  122c94:	e6bf3073 	sxth	r3, r3
  122c98:	e6ff2073 	uxth	r2, r3
  122c9c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122ca0:	e1d334f2 	ldrsh	r3, [r3, #66]	; 0x42
  122ca4:	e6ff3073 	uxth	r3, r3
  122ca8:	e0823003 	add	r3, r2, r3
  122cac:	e6ff3073 	uxth	r3, r3
  122cb0:	e6bf2073 	sxth	r2, r3
  122cb4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122cb8:	e1c324b4 	strh	r2, [r3, #68]	; 0x44

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
  122cbc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122cc0:	e3a02000 	mov	r2, #0
  122cc4:	e5c32047 	strb	r2, [r3, #71]	; 0x47
      pcb->lastack = ackno;
  122cc8:	e30f3244 	movw	r3, #62020	; 0xf244
  122ccc:	e3403014 	movt	r3, #20
  122cd0:	e5932000 	ldr	r2, [r3]
  122cd4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122cd8:	e5832048 	str	r2, [r3, #72]	; 0x48

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
  122cdc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122ce0:	e5933014 	ldr	r3, [r3, #20]
  122ce4:	e3530003 	cmp	r3, #3
  122ce8:	9a000075 	bls	122ec4 <tcp_receive+0x5e0>
        if (pcb->cwnd < pcb->ssthresh) {
  122cec:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122cf0:	e1d324bc 	ldrh	r2, [r3, #76]	; 0x4c
  122cf4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122cf8:	e1d334be 	ldrh	r3, [r3, #78]	; 0x4e
  122cfc:	e1520003 	cmp	r2, r3
  122d00:	2a000012 	bcs	122d50 <tcp_receive+0x46c>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
  122d04:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122d08:	e1d324bc 	ldrh	r2, [r3, #76]	; 0x4c
  122d0c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122d10:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  122d14:	e0823003 	add	r3, r2, r3
  122d18:	e6ff2073 	uxth	r2, r3
  122d1c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122d20:	e1d334bc 	ldrh	r3, [r3, #76]	; 0x4c
  122d24:	e1520003 	cmp	r2, r3
  122d28:	9a000065 	bls	122ec4 <tcp_receive+0x5e0>
            pcb->cwnd += pcb->mss;
  122d2c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122d30:	e1d324bc 	ldrh	r2, [r3, #76]	; 0x4c
  122d34:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122d38:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  122d3c:	e0823003 	add	r3, r2, r3
  122d40:	e6ff2073 	uxth	r2, r3
  122d44:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122d48:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
  122d4c:	ea00005c 	b	122ec4 <tcp_receive+0x5e0>
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
  122d50:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122d54:	e1d344bc 	ldrh	r4, [r3, #76]	; 0x4c
  122d58:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122d5c:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  122d60:	e1a02003 	mov	r2, r3
  122d64:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122d68:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  122d6c:	e0020293 	mul	r2, r3, r2
  122d70:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122d74:	e1d334bc 	ldrh	r3, [r3, #76]	; 0x4c
  122d78:	e1a01003 	mov	r1, r3
  122d7c:	e1a00002 	mov	r0, r2
  122d80:	eb0057b8 	bl	138c68 <__divsi3>
  122d84:	e1a03000 	mov	r3, r0
  122d88:	e6ff3073 	uxth	r3, r3
  122d8c:	e0843003 	add	r3, r4, r3
  122d90:	e14b33b2 	strh	r3, [fp, #-50]	; 0xffffffce
          if (new_cwnd > pcb->cwnd) {
  122d94:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122d98:	e1d334bc 	ldrh	r3, [r3, #76]	; 0x4c
  122d9c:	e15b23b2 	ldrh	r2, [fp, #-50]	; 0xffffffce
  122da0:	e1520003 	cmp	r2, r3
  122da4:	9a000046 	bls	122ec4 <tcp_receive+0x5e0>
            pcb->cwnd = new_cwnd;
  122da8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122dac:	e15b23b2 	ldrh	r2, [fp, #-50]	; 0xffffffce
  122db0:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
  122db4:	ea000042 	b	122ec4 <tcp_receive+0x5e0>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
  122db8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122dbc:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  122dc0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        pcb->unacked = pcb->unacked->next;
  122dc4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122dc8:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  122dcc:	e5932000 	ldr	r2, [r3]
  122dd0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122dd4:	e5832070 	str	r2, [r3, #112]	; 0x70

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
  122dd8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122ddc:	e1d346b6 	ldrh	r4, [r3, #102]	; 0x66
  122de0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122de4:	e5933004 	ldr	r3, [r3, #4]
  122de8:	e1a00003 	mov	r0, r3
  122dec:	ebffe12f 	bl	11b2b0 <pbuf_clen>
  122df0:	e1a03000 	mov	r3, r0
  122df4:	e1540003 	cmp	r4, r3
  122df8:	2a000006 	bcs	122e18 <tcp_receive+0x534>
  122dfc:	e308068c 	movw	r0, #34444	; 0x868c
  122e00:	e3400014 	movt	r0, #20
  122e04:	ebff80c2 	bl	103114 <rt_kprintf>
  122e08:	e300148b 	movw	r1, #1163	; 0x48b
  122e0c:	e3080488 	movw	r0, #33928	; 0x8488
  122e10:	e3400014 	movt	r0, #20
  122e14:	ebffa092 	bl	10b064 <sys_arch_assert>

        pcb->snd_queuelen -= pbuf_clen(next->p);
  122e18:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122e1c:	e5933004 	ldr	r3, [r3, #4]
  122e20:	e1a00003 	mov	r0, r3
  122e24:	ebffe121 	bl	11b2b0 <pbuf_clen>
  122e28:	e1a03000 	mov	r3, r0
  122e2c:	e1a02003 	mov	r2, r3
  122e30:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122e34:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  122e38:	e0433002 	sub	r3, r3, r2
  122e3c:	e6ff2073 	uxth	r2, r3
  122e40:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122e44:	e1c326b6 	strh	r2, [r3, #102]	; 0x66
        recv_acked += next->len;
  122e48:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122e4c:	e1d320b8 	ldrh	r2, [r3, #8]
  122e50:	e30f3248 	movw	r3, #62024	; 0xf248
  122e54:	e3403014 	movt	r3, #20
  122e58:	e1d330b0 	ldrh	r3, [r3]
  122e5c:	e0823003 	add	r3, r2, r3
  122e60:	e6ff2073 	uxth	r2, r3
  122e64:	e30f3248 	movw	r3, #62024	; 0xf248
  122e68:	e3403014 	movt	r3, #20
  122e6c:	e1c320b0 	strh	r2, [r3]
        tcp_seg_free(next);
  122e70:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  122e74:	ebfff1fa 	bl	11f664 <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
  122e78:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122e7c:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  122e80:	e3530000 	cmp	r3, #0
  122e84:	0a00000e 	beq	122ec4 <tcp_receive+0x5e0>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
  122e88:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122e8c:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  122e90:	e3530000 	cmp	r3, #0
  122e94:	1a00000a 	bne	122ec4 <tcp_receive+0x5e0>
  122e98:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122e9c:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  122ea0:	e3530000 	cmp	r3, #0
  122ea4:	1a000006 	bne	122ec4 <tcp_receive+0x5e0>
  122ea8:	e30806b4 	movw	r0, #34484	; 0x86b4
  122eac:	e3400014 	movt	r0, #20
  122eb0:	ebff8097 	bl	103114 <rt_kprintf>
  122eb4:	e3001494 	movw	r1, #1172	; 0x494
  122eb8:	e3080488 	movw	r0, #33928	; 0x8488
  122ebc:	e3400014 	movt	r0, #20
  122ec0:	ebffa067 	bl	10b064 <sys_arch_assert>
      while (pcb->unacked != NULL &&
  122ec4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122ec8:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  122ecc:	e3530000 	cmp	r3, #0
  122ed0:	0a000020 	beq	122f58 <tcp_receive+0x674>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
  122ed4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122ed8:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  122edc:	e593300c 	ldr	r3, [r3, #12]
  122ee0:	e5933004 	ldr	r3, [r3, #4]
  122ee4:	e1a00003 	mov	r0, r3
  122ee8:	ebffce40 	bl	1167f0 <lwip_htonl>
  122eec:	e1a04000 	mov	r4, r0
  122ef0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122ef4:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  122ef8:	e1d330b8 	ldrh	r3, [r3, #8]
  122efc:	e1a05003 	mov	r5, r3
  122f00:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122f04:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  122f08:	e593300c 	ldr	r3, [r3, #12]
  122f0c:	e1d330bc 	ldrh	r3, [r3, #12]
  122f10:	e6ff3073 	uxth	r3, r3
  122f14:	e1a00003 	mov	r0, r3
  122f18:	ebffce28 	bl	1167c0 <lwip_htons>
  122f1c:	e1a03000 	mov	r3, r0
  122f20:	e2033003 	and	r3, r3, #3
  122f24:	e3530000 	cmp	r3, #0
  122f28:	0a000001 	beq	122f34 <tcp_receive+0x650>
  122f2c:	e3a03001 	mov	r3, #1
  122f30:	ea000000 	b	122f38 <tcp_receive+0x654>
  122f34:	e3a03000 	mov	r3, #0
  122f38:	e0833005 	add	r3, r3, r5
  122f3c:	e0842003 	add	r2, r4, r3
  122f40:	e30f3244 	movw	r3, #62020	; 0xf244
  122f44:	e3403014 	movt	r3, #20
  122f48:	e5933000 	ldr	r3, [r3]
  122f4c:	e0423003 	sub	r3, r2, r3
      while (pcb->unacked != NULL &&
  122f50:	e3530000 	cmp	r3, #0
  122f54:	daffff97 	ble	122db8 <tcp_receive+0x4d4>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
  122f58:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122f5c:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  122f60:	e3530000 	cmp	r3, #0
  122f64:	1a000003 	bne	122f78 <tcp_receive+0x694>
        pcb->rtime = -1;
  122f68:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122f6c:	e3e02000 	mvn	r2, #0
  122f70:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
  122f74:	ea000002 	b	122f84 <tcp_receive+0x6a0>
      } else {
        pcb->rtime = 0;
  122f78:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122f7c:	e3a02000 	mov	r2, #0
  122f80:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
      }

      pcb->polltmr = 0;
  122f84:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122f88:	e3a02000 	mov	r2, #0
  122f8c:	e5c3201f 	strb	r2, [r3, #31]
  122f90:	ea000001 	b	122f9c <tcp_receive+0x6b8>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
  122f94:	e51b0040 	ldr	r0, [fp, #-64]	; 0xffffffc0
  122f98:	eb000c08 	bl	125fc0 <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
  122f9c:	ea000049 	b	1230c8 <tcp_receive+0x7e4>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
  122fa0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122fa4:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  122fa8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
      pcb->unsent = pcb->unsent->next;
  122fac:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122fb0:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  122fb4:	e5932000 	ldr	r2, [r3]
  122fb8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122fbc:	e583206c 	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
  122fc0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122fc4:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  122fc8:	e3530000 	cmp	r3, #0
  122fcc:	1a000002 	bne	122fdc <tcp_receive+0x6f8>
        pcb->unsent_oversize = 0;
  122fd0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122fd4:	e3a02000 	mov	r2, #0
  122fd8:	e1c326b8 	strh	r2, [r3, #104]	; 0x68
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
  122fdc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  122fe0:	e1d346b6 	ldrh	r4, [r3, #102]	; 0x66
  122fe4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  122fe8:	e5933004 	ldr	r3, [r3, #4]
  122fec:	e1a00003 	mov	r0, r3
  122ff0:	ebffe0ae 	bl	11b2b0 <pbuf_clen>
  122ff4:	e1a03000 	mov	r3, r0
  122ff8:	e1540003 	cmp	r4, r3
  122ffc:	2a000006 	bcs	12301c <tcp_receive+0x738>
  123000:	e308068c 	movw	r0, #34444	; 0x868c
  123004:	e3400014 	movt	r0, #20
  123008:	ebff8041 	bl	103114 <rt_kprintf>
  12300c:	e30014c2 	movw	r1, #1218	; 0x4c2
  123010:	e3080488 	movw	r0, #33928	; 0x8488
  123014:	e3400014 	movt	r0, #20
  123018:	ebffa011 	bl	10b064 <sys_arch_assert>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
  12301c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123020:	e5933004 	ldr	r3, [r3, #4]
  123024:	e1a00003 	mov	r0, r3
  123028:	ebffe0a0 	bl	11b2b0 <pbuf_clen>
  12302c:	e1a03000 	mov	r3, r0
  123030:	e1a02003 	mov	r2, r3
  123034:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123038:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  12303c:	e0433002 	sub	r3, r3, r2
  123040:	e6ff2073 	uxth	r2, r3
  123044:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123048:	e1c326b6 	strh	r2, [r3, #102]	; 0x66
      recv_acked += next->len;
  12304c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123050:	e1d320b8 	ldrh	r2, [r3, #8]
  123054:	e30f3248 	movw	r3, #62024	; 0xf248
  123058:	e3403014 	movt	r3, #20
  12305c:	e1d330b0 	ldrh	r3, [r3]
  123060:	e0823003 	add	r3, r2, r3
  123064:	e6ff2073 	uxth	r2, r3
  123068:	e30f3248 	movw	r3, #62024	; 0xf248
  12306c:	e3403014 	movt	r3, #20
  123070:	e1c320b0 	strh	r2, [r3]
      tcp_seg_free(next);
  123074:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  123078:	ebfff179 	bl	11f664 <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
  12307c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123080:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  123084:	e3530000 	cmp	r3, #0
  123088:	0a00000e 	beq	1230c8 <tcp_receive+0x7e4>
        LWIP_ASSERT("tcp_receive: valid queue length",
  12308c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123090:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  123094:	e3530000 	cmp	r3, #0
  123098:	1a00000a 	bne	1230c8 <tcp_receive+0x7e4>
  12309c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1230a0:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  1230a4:	e3530000 	cmp	r3, #0
  1230a8:	1a000006 	bne	1230c8 <tcp_receive+0x7e4>
  1230ac:	e30806b4 	movw	r0, #34484	; 0x86b4
  1230b0:	e3400014 	movt	r0, #20
  1230b4:	ebff8016 	bl	103114 <rt_kprintf>
  1230b8:	e30014ca 	movw	r1, #1226	; 0x4ca
  1230bc:	e3080488 	movw	r0, #33928	; 0x8488
  1230c0:	e3400014 	movt	r0, #20
  1230c4:	ebff9fe6 	bl	10b064 <sys_arch_assert>
    while (pcb->unsent != NULL &&
  1230c8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1230cc:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  1230d0:	e3530000 	cmp	r3, #0
  1230d4:	0a000028 	beq	12317c <tcp_receive+0x898>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
  1230d8:	e30f3244 	movw	r3, #62020	; 0xf244
  1230dc:	e3403014 	movt	r3, #20
  1230e0:	e5934000 	ldr	r4, [r3]
  1230e4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1230e8:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  1230ec:	e593300c 	ldr	r3, [r3, #12]
  1230f0:	e5933004 	ldr	r3, [r3, #4]
  1230f4:	e1a00003 	mov	r0, r3
  1230f8:	ebffcdbc 	bl	1167f0 <lwip_htonl>
  1230fc:	e1a05000 	mov	r5, r0
  123100:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123104:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  123108:	e1d330b8 	ldrh	r3, [r3, #8]
  12310c:	e1a06003 	mov	r6, r3
  123110:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123114:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  123118:	e593300c 	ldr	r3, [r3, #12]
  12311c:	e1d330bc 	ldrh	r3, [r3, #12]
  123120:	e6ff3073 	uxth	r3, r3
  123124:	e1a00003 	mov	r0, r3
  123128:	ebffcda4 	bl	1167c0 <lwip_htons>
  12312c:	e1a03000 	mov	r3, r0
  123130:	e2033003 	and	r3, r3, #3
  123134:	e3530000 	cmp	r3, #0
  123138:	0a000001 	beq	123144 <tcp_receive+0x860>
  12313c:	e3a03001 	mov	r3, #1
  123140:	ea000000 	b	123148 <tcp_receive+0x864>
  123144:	e3a03000 	mov	r3, #0
  123148:	e0833006 	add	r3, r3, r6
  12314c:	e0853003 	add	r3, r5, r3
  123150:	e0443003 	sub	r3, r4, r3
    while (pcb->unsent != NULL &&
  123154:	e3530000 	cmp	r3, #0
  123158:	ba000007 	blt	12317c <tcp_receive+0x898>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
  12315c:	e30f3244 	movw	r3, #62020	; 0xf244
  123160:	e3403014 	movt	r3, #20
  123164:	e5932000 	ldr	r2, [r3]
  123168:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12316c:	e5933050 	ldr	r3, [r3, #80]	; 0x50
  123170:	e0423003 	sub	r3, r2, r3
  123174:	e3530000 	cmp	r3, #0
  123178:	daffff88 	ble	122fa0 <tcp_receive+0x6bc>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
  12317c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123180:	e1d326b4 	ldrh	r2, [r3, #100]	; 0x64
  123184:	e30f3248 	movw	r3, #62024	; 0xf248
  123188:	e3403014 	movt	r3, #20
  12318c:	e1d330b0 	ldrh	r3, [r3]
  123190:	e0823003 	add	r3, r2, r3
  123194:	e6ff2073 	uxth	r2, r3
  123198:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12319c:	e1c326b4 	strh	r2, [r3, #100]	; 0x64
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
  1231a0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1231a4:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  1231a8:	e3530000 	cmp	r3, #0
  1231ac:	0a00004c 	beq	1232e4 <tcp_receive+0xa00>
  1231b0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1231b4:	e593203c 	ldr	r2, [r3, #60]	; 0x3c
  1231b8:	e30f3244 	movw	r3, #62020	; 0xf244
  1231bc:	e3403014 	movt	r3, #20
  1231c0:	e5933000 	ldr	r3, [r3]
  1231c4:	e0423003 	sub	r3, r2, r3
  1231c8:	e3530000 	cmp	r3, #0
  1231cc:	aa000044 	bge	1232e4 <tcp_receive+0xa00>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
  1231d0:	e3063a34 	movw	r3, #27188	; 0x6a34
  1231d4:	e3403057 	movt	r3, #87	; 0x57
  1231d8:	e5933000 	ldr	r3, [r3]
  1231dc:	e6ff2073 	uxth	r2, r3
  1231e0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1231e4:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  1231e8:	e6ff3073 	uxth	r3, r3
  1231ec:	e0423003 	sub	r3, r2, r3
  1231f0:	e6ff3073 	uxth	r3, r3
  1231f4:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
  1231f8:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  1231fc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123200:	e1d334f0 	ldrsh	r3, [r3, #64]	; 0x40
  123204:	e1a031c3 	asr	r3, r3, #3
  123208:	e6bf3073 	sxth	r3, r3
  12320c:	e6ff3073 	uxth	r3, r3
  123210:	e0423003 	sub	r3, r2, r3
  123214:	e6ff3073 	uxth	r3, r3
  123218:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
      pcb->sa += m;
  12321c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123220:	e1d334f0 	ldrsh	r3, [r3, #64]	; 0x40
  123224:	e6ff2073 	uxth	r2, r3
  123228:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  12322c:	e0823003 	add	r3, r2, r3
  123230:	e6ff3073 	uxth	r3, r3
  123234:	e6bf2073 	sxth	r2, r3
  123238:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12323c:	e1c324b0 	strh	r2, [r3, #64]	; 0x40
      if (m < 0) {
  123240:	e15b32f2 	ldrsh	r3, [fp, #-34]	; 0xffffffde
  123244:	e3530000 	cmp	r3, #0
  123248:	aa000003 	bge	12325c <tcp_receive+0x978>
        m = -m;
  12324c:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  123250:	e2633000 	rsb	r3, r3, #0
  123254:	e6ff3073 	uxth	r3, r3
  123258:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
      }
      m = m - (pcb->sv >> 2);
  12325c:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  123260:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123264:	e1d334f2 	ldrsh	r3, [r3, #66]	; 0x42
  123268:	e1a03143 	asr	r3, r3, #2
  12326c:	e6bf3073 	sxth	r3, r3
  123270:	e6ff3073 	uxth	r3, r3
  123274:	e0423003 	sub	r3, r2, r3
  123278:	e6ff3073 	uxth	r3, r3
  12327c:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
      pcb->sv += m;
  123280:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123284:	e1d334f2 	ldrsh	r3, [r3, #66]	; 0x42
  123288:	e6ff2073 	uxth	r2, r3
  12328c:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  123290:	e0823003 	add	r3, r2, r3
  123294:	e6ff3073 	uxth	r3, r3
  123298:	e6bf2073 	sxth	r2, r3
  12329c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1232a0:	e1c324b2 	strh	r2, [r3, #66]	; 0x42
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
  1232a4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1232a8:	e1d334f0 	ldrsh	r3, [r3, #64]	; 0x40
  1232ac:	e1a031c3 	asr	r3, r3, #3
  1232b0:	e6bf3073 	sxth	r3, r3
  1232b4:	e6ff2073 	uxth	r2, r3
  1232b8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1232bc:	e1d334f2 	ldrsh	r3, [r3, #66]	; 0x42
  1232c0:	e6ff3073 	uxth	r3, r3
  1232c4:	e0823003 	add	r3, r2, r3
  1232c8:	e6ff3073 	uxth	r3, r3
  1232cc:	e6bf2073 	sxth	r2, r3
  1232d0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1232d4:	e1c324b4 	strh	r2, [r3, #68]	; 0x44

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
  1232d8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1232dc:	e3a02000 	mov	r2, #0
  1232e0:	e5832038 	str	r2, [r3, #56]	; 0x38

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
  1232e4:	e30f324a 	movw	r3, #62026	; 0xf24a
  1232e8:	e3403014 	movt	r3, #20
  1232ec:	e1d330b0 	ldrh	r3, [r3]
  1232f0:	e3530000 	cmp	r3, #0
  1232f4:	0a0004b3 	beq	1245c8 <tcp_receive+0x1ce4>
  1232f8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1232fc:	e5933014 	ldr	r3, [r3, #20]
  123300:	e3530006 	cmp	r3, #6
  123304:	8a0004af 	bhi	1245c8 <tcp_receive+0x1ce4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
  123308:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12330c:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  123310:	e30f3240 	movw	r3, #62016	; 0xf240
  123314:	e3403014 	movt	r3, #20
  123318:	e5933000 	ldr	r3, [r3]
  12331c:	e0423003 	sub	r3, r2, r3
  123320:	e2433001 	sub	r3, r3, #1
  123324:	e3530000 	cmp	r3, #0
  123328:	ba0000aa 	blt	1235d8 <tcp_receive+0xcf4>
  12332c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123330:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  123334:	e30f324a 	movw	r3, #62026	; 0xf24a
  123338:	e3403014 	movt	r3, #20
  12333c:	e1d330b0 	ldrh	r3, [r3]
  123340:	e1a01003 	mov	r1, r3
  123344:	e30f3240 	movw	r3, #62016	; 0xf240
  123348:	e3403014 	movt	r3, #20
  12334c:	e5933000 	ldr	r3, [r3]
  123350:	e0813003 	add	r3, r1, r3
  123354:	e0423003 	sub	r3, r2, r3
  123358:	e2833001 	add	r3, r3, #1
  12335c:	e3530000 	cmp	r3, #0
  123360:	ca00009c 	bgt	1235d8 <tcp_receive+0xcf4>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
  123364:	e30f3220 	movw	r3, #61984	; 0xf220
  123368:	e3403014 	movt	r3, #20
  12336c:	e5933004 	ldr	r3, [r3, #4]
  123370:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
      off = pcb->rcv_nxt - seqno;
  123374:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123378:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  12337c:	e30f3240 	movw	r3, #62016	; 0xf240
  123380:	e3403014 	movt	r3, #20
  123384:	e5933000 	ldr	r3, [r3]
  123388:	e0423003 	sub	r3, r2, r3
  12338c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
  123390:	e30f3220 	movw	r3, #61984	; 0xf220
  123394:	e3403014 	movt	r3, #20
  123398:	e5933004 	ldr	r3, [r3, #4]
  12339c:	e3530000 	cmp	r3, #0
  1233a0:	1a000006 	bne	1233c0 <tcp_receive+0xadc>
  1233a4:	e30806d4 	movw	r0, #34516	; 0x86d4
  1233a8:	e3400014 	movt	r0, #20
  1233ac:	ebff7f58 	bl	103114 <rt_kprintf>
  1233b0:	e3001529 	movw	r1, #1321	; 0x529
  1233b4:	e3080488 	movw	r0, #33928	; 0x8488
  1233b8:	e3400014 	movt	r0, #20
  1233bc:	ebff9f28 	bl	10b064 <sys_arch_assert>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
  1233c0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1233c4:	e3072ffe 	movw	r2, #32766	; 0x7ffe
  1233c8:	e1530002 	cmp	r3, r2
  1233cc:	da000006 	ble	1233ec <tcp_receive+0xb08>
  1233d0:	e30806e4 	movw	r0, #34532	; 0x86e4
  1233d4:	e3400014 	movt	r0, #20
  1233d8:	ebff7f4d 	bl	103114 <rt_kprintf>
  1233dc:	e300152a 	movw	r1, #1322	; 0x52a
  1233e0:	e3080488 	movw	r0, #33928	; 0x8488
  1233e4:	e3400014 	movt	r0, #20
  1233e8:	ebff9f1d 	bl	10b064 <sys_arch_assert>
      if (inseg.p->len < off) {
  1233ec:	e30f3220 	movw	r3, #61984	; 0xf220
  1233f0:	e3403014 	movt	r3, #20
  1233f4:	e5933004 	ldr	r3, [r3, #4]
  1233f8:	e1d330ba 	ldrh	r3, [r3, #10]
  1233fc:	e1a02003 	mov	r2, r3
  123400:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  123404:	e1530002 	cmp	r3, r2
  123408:	da00003f 	ble	12350c <tcp_receive+0xc28>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
  12340c:	e30f3220 	movw	r3, #61984	; 0xf220
  123410:	e3403014 	movt	r3, #20
  123414:	e5933004 	ldr	r3, [r3, #4]
  123418:	e1d330b8 	ldrh	r3, [r3, #8]
  12341c:	e1a02003 	mov	r2, r3
  123420:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  123424:	e1530002 	cmp	r3, r2
  123428:	da000006 	ble	123448 <tcp_receive+0xb64>
  12342c:	e30806f4 	movw	r0, #34548	; 0x86f4
  123430:	e3400014 	movt	r0, #20
  123434:	ebff7f36 	bl	103114 <rt_kprintf>
  123438:	e300152c 	movw	r1, #1324	; 0x52c
  12343c:	e3080488 	movw	r0, #33928	; 0x8488
  123440:	e3400014 	movt	r0, #20
  123444:	ebff9f06 	bl	10b064 <sys_arch_assert>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
  123448:	e30f3220 	movw	r3, #61984	; 0xf220
  12344c:	e3403014 	movt	r3, #20
  123450:	e5933004 	ldr	r3, [r3, #4]
  123454:	e1d320b8 	ldrh	r2, [r3, #8]
  123458:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12345c:	e6ff3073 	uxth	r3, r3
  123460:	e0423003 	sub	r3, r2, r3
  123464:	e14b33b4 	strh	r3, [fp, #-52]	; 0xffffffcc
        while (p->len < off) {
  123468:	ea00000e 	b	1234a8 <tcp_receive+0xbc4>
          off -= p->len;
  12346c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  123470:	e1d330ba 	ldrh	r3, [r3, #10]
  123474:	e1a02003 	mov	r2, r3
  123478:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12347c:	e0433002 	sub	r3, r3, r2
  123480:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
  123484:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  123488:	e15b23b4 	ldrh	r2, [fp, #-52]	; 0xffffffcc
  12348c:	e1c320b8 	strh	r2, [r3, #8]
          p->len = 0;
  123490:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  123494:	e3a02000 	mov	r2, #0
  123498:	e1c320ba 	strh	r2, [r3, #10]
          p = p->next;
  12349c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1234a0:	e5933000 	ldr	r3, [r3]
  1234a4:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
        while (p->len < off) {
  1234a8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1234ac:	e1d330ba 	ldrh	r3, [r3, #10]
  1234b0:	e1a02003 	mov	r2, r3
  1234b4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1234b8:	e1530002 	cmp	r3, r2
  1234bc:	caffffea 	bgt	12346c <tcp_receive+0xb88>
        }
        if (pbuf_header(p, (s16_t)-off)) {
  1234c0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1234c4:	e6ff3073 	uxth	r3, r3
  1234c8:	e2633000 	rsb	r3, r3, #0
  1234cc:	e6ff3073 	uxth	r3, r3
  1234d0:	e6bf3073 	sxth	r3, r3
  1234d4:	e1a01003 	mov	r1, r3
  1234d8:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
  1234dc:	ebffded0 	bl	11b024 <pbuf_header>
  1234e0:	e1a03000 	mov	r3, r0
  1234e4:	e3530000 	cmp	r3, #0
  1234e8:	0a00001c 	beq	123560 <tcp_receive+0xc7c>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
  1234ec:	e3080704 	movw	r0, #34564	; 0x8704
  1234f0:	e3400014 	movt	r0, #20
  1234f4:	ebff7f06 	bl	103114 <rt_kprintf>
  1234f8:	e3001539 	movw	r1, #1337	; 0x539
  1234fc:	e3080488 	movw	r0, #33928	; 0x8488
  123500:	e3400014 	movt	r0, #20
  123504:	ebff9ed6 	bl	10b064 <sys_arch_assert>
  123508:	ea000014 	b	123560 <tcp_receive+0xc7c>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
  12350c:	e30f3220 	movw	r3, #61984	; 0xf220
  123510:	e3403014 	movt	r3, #20
  123514:	e5933004 	ldr	r3, [r3, #4]
  123518:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  12351c:	e6ff2072 	uxth	r2, r2
  123520:	e2622000 	rsb	r2, r2, #0
  123524:	e6ff2072 	uxth	r2, r2
  123528:	e6bf2072 	sxth	r2, r2
  12352c:	e1a01002 	mov	r1, r2
  123530:	e1a00003 	mov	r0, r3
  123534:	ebffdeba 	bl	11b024 <pbuf_header>
  123538:	e1a03000 	mov	r3, r0
  12353c:	e3530000 	cmp	r3, #0
  123540:	0a000006 	beq	123560 <tcp_receive+0xc7c>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
  123544:	e3080704 	movw	r0, #34564	; 0x8704
  123548:	e3400014 	movt	r0, #20
  12354c:	ebff7ef0 	bl	103114 <rt_kprintf>
  123550:	e300153e 	movw	r1, #1342	; 0x53e
  123554:	e3080488 	movw	r0, #33928	; 0x8488
  123558:	e3400014 	movt	r0, #20
  12355c:	ebff9ec0 	bl	10b064 <sys_arch_assert>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
  123560:	e30f3220 	movw	r3, #61984	; 0xf220
  123564:	e3403014 	movt	r3, #20
  123568:	e1d320b8 	ldrh	r2, [r3, #8]
  12356c:	e30f3240 	movw	r3, #62016	; 0xf240
  123570:	e3403014 	movt	r3, #20
  123574:	e5933000 	ldr	r3, [r3]
  123578:	e6ff1073 	uxth	r1, r3
  12357c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123580:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  123584:	e6ff3073 	uxth	r3, r3
  123588:	e0413003 	sub	r3, r1, r3
  12358c:	e6ff3073 	uxth	r3, r3
  123590:	e0823003 	add	r3, r2, r3
  123594:	e6ff2073 	uxth	r2, r3
  123598:	e30f3220 	movw	r3, #61984	; 0xf220
  12359c:	e3403014 	movt	r3, #20
  1235a0:	e1c320b8 	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
  1235a4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1235a8:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  1235ac:	e30f3240 	movw	r3, #62016	; 0xf240
  1235b0:	e3403014 	movt	r3, #20
  1235b4:	e5832000 	str	r2, [r3]
  1235b8:	e30f3220 	movw	r3, #61984	; 0xf220
  1235bc:	e3403014 	movt	r3, #20
  1235c0:	e593200c 	ldr	r2, [r3, #12]
  1235c4:	e30f3240 	movw	r3, #62016	; 0xf240
  1235c8:	e3403014 	movt	r3, #20
  1235cc:	e5933000 	ldr	r3, [r3]
  1235d0:	e5823004 	str	r3, [r2, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
  1235d4:	ea00000d 	b	123610 <tcp_receive+0xd2c>
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
  1235d8:	e30f3240 	movw	r3, #62016	; 0xf240
  1235dc:	e3403014 	movt	r3, #20
  1235e0:	e5932000 	ldr	r2, [r3]
  1235e4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1235e8:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  1235ec:	e0423003 	sub	r3, r2, r3
  1235f0:	e3530000 	cmp	r3, #0
  1235f4:	aa000005 	bge	123610 <tcp_receive+0xd2c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
  1235f8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1235fc:	e5d3301e 	ldrb	r3, [r3, #30]
  123600:	e3833002 	orr	r3, r3, #2
  123604:	e6ef2073 	uxtb	r2, r3
  123608:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12360c:	e5c3201e 	strb	r2, [r3, #30]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
  123610:	e30f3240 	movw	r3, #62016	; 0xf240
  123614:	e3403014 	movt	r3, #20
  123618:	e5932000 	ldr	r2, [r3]
  12361c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123620:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  123624:	e0423003 	sub	r3, r2, r3
  123628:	e3530000 	cmp	r3, #0
  12362c:	ba0003e1 	blt	1245b8 <tcp_receive+0x1cd4>
  123630:	e30f3240 	movw	r3, #62016	; 0xf240
  123634:	e3403014 	movt	r3, #20
  123638:	e5932000 	ldr	r2, [r3]
  12363c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123640:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  123644:	e51b1040 	ldr	r1, [fp, #-64]	; 0xffffffc0
  123648:	e1d112bc 	ldrh	r1, [r1, #44]	; 0x2c
  12364c:	e0833001 	add	r3, r3, r1
  123650:	e0423003 	sub	r3, r2, r3
  123654:	e2833001 	add	r3, r3, #1
  123658:	e3530000 	cmp	r3, #0
  12365c:	ca0003d5 	bgt	1245b8 <tcp_receive+0x1cd4>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
  123660:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123664:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  123668:	e30f3240 	movw	r3, #62016	; 0xf240
  12366c:	e3403014 	movt	r3, #20
  123670:	e5933000 	ldr	r3, [r3]
  123674:	e1520003 	cmp	r2, r3
  123678:	1a00026b 	bne	12402c <tcp_receive+0x1748>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
  12367c:	e30f3220 	movw	r3, #61984	; 0xf220
  123680:	e3403014 	movt	r3, #20
  123684:	e1d340b8 	ldrh	r4, [r3, #8]
  123688:	e30f3220 	movw	r3, #61984	; 0xf220
  12368c:	e3403014 	movt	r3, #20
  123690:	e593300c 	ldr	r3, [r3, #12]
  123694:	e1d330bc 	ldrh	r3, [r3, #12]
  123698:	e6ff3073 	uxth	r3, r3
  12369c:	e1a00003 	mov	r0, r3
  1236a0:	ebffcc46 	bl	1167c0 <lwip_htons>
  1236a4:	e1a03000 	mov	r3, r0
  1236a8:	e2033003 	and	r3, r3, #3
  1236ac:	e3530000 	cmp	r3, #0
  1236b0:	0a000001 	beq	1236bc <tcp_receive+0xdd8>
  1236b4:	e3a03001 	mov	r3, #1
  1236b8:	ea000000 	b	1236c0 <tcp_receive+0xddc>
  1236bc:	e3a03000 	mov	r3, #0
  1236c0:	e0833004 	add	r3, r3, r4
  1236c4:	e6ff2073 	uxth	r2, r3
  1236c8:	e30f324a 	movw	r3, #62026	; 0xf24a
  1236cc:	e3403014 	movt	r3, #20
  1236d0:	e1c320b0 	strh	r2, [r3]

        if (tcplen > pcb->rcv_wnd) {
  1236d4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1236d8:	e1d322bc 	ldrh	r2, [r3, #44]	; 0x2c
  1236dc:	e30f324a 	movw	r3, #62026	; 0xf24a
  1236e0:	e3403014 	movt	r3, #20
  1236e4:	e1d330b0 	ldrh	r3, [r3]
  1236e8:	e1520003 	cmp	r2, r3
  1236ec:	2a000072 	bcs	1238bc <tcp_receive+0xfd8>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
  1236f0:	e30f3220 	movw	r3, #61984	; 0xf220
  1236f4:	e3403014 	movt	r3, #20
  1236f8:	e593300c 	ldr	r3, [r3, #12]
  1236fc:	e1d330bc 	ldrh	r3, [r3, #12]
  123700:	e6ff3073 	uxth	r3, r3
  123704:	e1a00003 	mov	r0, r3
  123708:	ebffcc2c 	bl	1167c0 <lwip_htons>
  12370c:	e1a03000 	mov	r3, r0
  123710:	e2033001 	and	r3, r3, #1
  123714:	e3530000 	cmp	r3, #0
  123718:	0a00001a 	beq	123788 <tcp_receive+0xea4>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
  12371c:	e30f3220 	movw	r3, #61984	; 0xf220
  123720:	e3403014 	movt	r3, #20
  123724:	e593300c 	ldr	r3, [r3, #12]
  123728:	e1d330bc 	ldrh	r3, [r3, #12]
  12372c:	e6ff3073 	uxth	r3, r3
  123730:	e3c33c3f 	bic	r3, r3, #16128	; 0x3f00
  123734:	e6ff4073 	uxth	r4, r3
  123738:	e30f3220 	movw	r3, #61984	; 0xf220
  12373c:	e3403014 	movt	r3, #20
  123740:	e593300c 	ldr	r3, [r3, #12]
  123744:	e1d330bc 	ldrh	r3, [r3, #12]
  123748:	e6ff3073 	uxth	r3, r3
  12374c:	e1a00003 	mov	r0, r3
  123750:	ebffcc1a 	bl	1167c0 <lwip_htons>
  123754:	e1a03000 	mov	r3, r0
  123758:	e203303e 	and	r3, r3, #62	; 0x3e
  12375c:	e6ff3073 	uxth	r3, r3
  123760:	e1a00003 	mov	r0, r3
  123764:	ebffcc15 	bl	1167c0 <lwip_htons>
  123768:	e1a03000 	mov	r3, r0
  12376c:	e1a02003 	mov	r2, r3
  123770:	e30f3220 	movw	r3, #61984	; 0xf220
  123774:	e3403014 	movt	r3, #20
  123778:	e593300c 	ldr	r3, [r3, #12]
  12377c:	e1842002 	orr	r2, r4, r2
  123780:	e6ff2072 	uxth	r2, r2
  123784:	e1c320bc 	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
  123788:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12378c:	e1d322bc 	ldrh	r2, [r3, #44]	; 0x2c
  123790:	e30f3220 	movw	r3, #61984	; 0xf220
  123794:	e3403014 	movt	r3, #20
  123798:	e1c320b8 	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
  12379c:	e30f3220 	movw	r3, #61984	; 0xf220
  1237a0:	e3403014 	movt	r3, #20
  1237a4:	e593300c 	ldr	r3, [r3, #12]
  1237a8:	e1d330bc 	ldrh	r3, [r3, #12]
  1237ac:	e6ff3073 	uxth	r3, r3
  1237b0:	e1a00003 	mov	r0, r3
  1237b4:	ebffcc01 	bl	1167c0 <lwip_htons>
  1237b8:	e1a03000 	mov	r3, r0
  1237bc:	e2033002 	and	r3, r3, #2
  1237c0:	e3530000 	cmp	r3, #0
  1237c4:	0a000007 	beq	1237e8 <tcp_receive+0xf04>
            inseg.len -= 1;
  1237c8:	e30f3220 	movw	r3, #61984	; 0xf220
  1237cc:	e3403014 	movt	r3, #20
  1237d0:	e1d330b8 	ldrh	r3, [r3, #8]
  1237d4:	e2433001 	sub	r3, r3, #1
  1237d8:	e6ff2073 	uxth	r2, r3
  1237dc:	e30f3220 	movw	r3, #61984	; 0xf220
  1237e0:	e3403014 	movt	r3, #20
  1237e4:	e1c320b8 	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
  1237e8:	e30f3220 	movw	r3, #61984	; 0xf220
  1237ec:	e3403014 	movt	r3, #20
  1237f0:	e5932004 	ldr	r2, [r3, #4]
  1237f4:	e30f3220 	movw	r3, #61984	; 0xf220
  1237f8:	e3403014 	movt	r3, #20
  1237fc:	e1d330b8 	ldrh	r3, [r3, #8]
  123800:	e1a01003 	mov	r1, r3
  123804:	e1a00002 	mov	r0, r2
  123808:	ebffdcda 	bl	11ab78 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
  12380c:	e30f3220 	movw	r3, #61984	; 0xf220
  123810:	e3403014 	movt	r3, #20
  123814:	e1d340b8 	ldrh	r4, [r3, #8]
  123818:	e30f3220 	movw	r3, #61984	; 0xf220
  12381c:	e3403014 	movt	r3, #20
  123820:	e593300c 	ldr	r3, [r3, #12]
  123824:	e1d330bc 	ldrh	r3, [r3, #12]
  123828:	e6ff3073 	uxth	r3, r3
  12382c:	e1a00003 	mov	r0, r3
  123830:	ebffcbe2 	bl	1167c0 <lwip_htons>
  123834:	e1a03000 	mov	r3, r0
  123838:	e2033003 	and	r3, r3, #3
  12383c:	e3530000 	cmp	r3, #0
  123840:	0a000001 	beq	12384c <tcp_receive+0xf68>
  123844:	e3a03001 	mov	r3, #1
  123848:	ea000000 	b	123850 <tcp_receive+0xf6c>
  12384c:	e3a03000 	mov	r3, #0
  123850:	e0833004 	add	r3, r3, r4
  123854:	e6ff2073 	uxth	r2, r3
  123858:	e30f324a 	movw	r3, #62026	; 0xf24a
  12385c:	e3403014 	movt	r3, #20
  123860:	e1c320b0 	strh	r2, [r3]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
  123864:	e30f324a 	movw	r3, #62026	; 0xf24a
  123868:	e3403014 	movt	r3, #20
  12386c:	e1d330b0 	ldrh	r3, [r3]
  123870:	e1a02003 	mov	r2, r3
  123874:	e30f3240 	movw	r3, #62016	; 0xf240
  123878:	e3403014 	movt	r3, #20
  12387c:	e5933000 	ldr	r3, [r3]
  123880:	e0822003 	add	r2, r2, r3
  123884:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123888:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12388c:	e51b1040 	ldr	r1, [fp, #-64]	; 0xffffffc0
  123890:	e1d112bc 	ldrh	r1, [r1, #44]	; 0x2c
  123894:	e0833001 	add	r3, r3, r1
  123898:	e1520003 	cmp	r2, r3
  12389c:	0a000006 	beq	1238bc <tcp_receive+0xfd8>
  1238a0:	e3080718 	movw	r0, #34584	; 0x8718
  1238a4:	e3400014 	movt	r0, #20
  1238a8:	ebff7e19 	bl	103114 <rt_kprintf>
  1238ac:	e300156c 	movw	r1, #1388	; 0x56c
  1238b0:	e3080488 	movw	r0, #33928	; 0x8488
  1238b4:	e3400014 	movt	r0, #20
  1238b8:	ebff9de9 	bl	10b064 <sys_arch_assert>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
  1238bc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1238c0:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  1238c4:	e3530000 	cmp	r3, #0
  1238c8:	0a0000da 	beq	123c38 <tcp_receive+0x1354>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
  1238cc:	e30f3220 	movw	r3, #61984	; 0xf220
  1238d0:	e3403014 	movt	r3, #20
  1238d4:	e593300c 	ldr	r3, [r3, #12]
  1238d8:	e1d330bc 	ldrh	r3, [r3, #12]
  1238dc:	e6ff3073 	uxth	r3, r3
  1238e0:	e1a00003 	mov	r0, r3
  1238e4:	ebffcbb5 	bl	1167c0 <lwip_htons>
  1238e8:	e1a03000 	mov	r3, r0
  1238ec:	e2033001 	and	r3, r3, #1
  1238f0:	e3530000 	cmp	r3, #0
  1238f4:	0a00000f 	beq	123938 <tcp_receive+0x1054>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
  1238f8:	ea000009 	b	123924 <tcp_receive+0x1040>
              struct tcp_seg *old_ooseq = pcb->ooseq;
  1238fc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123900:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  123904:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
              pcb->ooseq = pcb->ooseq->next;
  123908:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12390c:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  123910:	e5932000 	ldr	r2, [r3]
  123914:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123918:	e5832074 	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
  12391c:	e51b003c 	ldr	r0, [fp, #-60]	; 0xffffffc4
  123920:	ebffef4f 	bl	11f664 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
  123924:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123928:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  12392c:	e3530000 	cmp	r3, #0
  123930:	1afffff1 	bne	1238fc <tcp_receive+0x1018>
  123934:	ea0000bf 	b	123c38 <tcp_receive+0x1354>
            }
          } else {
            next = pcb->ooseq;
  123938:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12393c:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  123940:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
  123944:	ea000040 	b	123a4c <tcp_receive+0x1168>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
  123948:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12394c:	e593300c 	ldr	r3, [r3, #12]
  123950:	e1d330bc 	ldrh	r3, [r3, #12]
  123954:	e6ff3073 	uxth	r3, r3
  123958:	e1a00003 	mov	r0, r3
  12395c:	ebffcb97 	bl	1167c0 <lwip_htons>
  123960:	e1a03000 	mov	r3, r0
  123964:	e2033001 	and	r3, r3, #1
  123968:	e3530000 	cmp	r3, #0
  12396c:	0a00002f 	beq	123a30 <tcp_receive+0x114c>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
  123970:	e30f3220 	movw	r3, #61984	; 0xf220
  123974:	e3403014 	movt	r3, #20
  123978:	e593300c 	ldr	r3, [r3, #12]
  12397c:	e1d330bc 	ldrh	r3, [r3, #12]
  123980:	e6ff3073 	uxth	r3, r3
  123984:	e1a00003 	mov	r0, r3
  123988:	ebffcb8c 	bl	1167c0 <lwip_htons>
  12398c:	e1a03000 	mov	r3, r0
  123990:	e2033002 	and	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
  123994:	e3530000 	cmp	r3, #0
  123998:	1a000024 	bne	123a30 <tcp_receive+0x114c>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
  12399c:	e30f3220 	movw	r3, #61984	; 0xf220
  1239a0:	e3403014 	movt	r3, #20
  1239a4:	e593300c 	ldr	r3, [r3, #12]
  1239a8:	e1d330bc 	ldrh	r3, [r3, #12]
  1239ac:	e6ff4073 	uxth	r4, r3
  1239b0:	e3a00001 	mov	r0, #1
  1239b4:	ebffcb81 	bl	1167c0 <lwip_htons>
  1239b8:	e1a03000 	mov	r3, r0
  1239bc:	e1a02003 	mov	r2, r3
  1239c0:	e30f3220 	movw	r3, #61984	; 0xf220
  1239c4:	e3403014 	movt	r3, #20
  1239c8:	e593300c 	ldr	r3, [r3, #12]
  1239cc:	e1842002 	orr	r2, r4, r2
  1239d0:	e6ff2072 	uxth	r2, r2
  1239d4:	e1c320bc 	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
  1239d8:	e30f3220 	movw	r3, #61984	; 0xf220
  1239dc:	e3403014 	movt	r3, #20
  1239e0:	e1d340b8 	ldrh	r4, [r3, #8]
  1239e4:	e30f3220 	movw	r3, #61984	; 0xf220
  1239e8:	e3403014 	movt	r3, #20
  1239ec:	e593300c 	ldr	r3, [r3, #12]
  1239f0:	e1d330bc 	ldrh	r3, [r3, #12]
  1239f4:	e6ff3073 	uxth	r3, r3
  1239f8:	e1a00003 	mov	r0, r3
  1239fc:	ebffcb6f 	bl	1167c0 <lwip_htons>
  123a00:	e1a03000 	mov	r3, r0
  123a04:	e2033003 	and	r3, r3, #3
  123a08:	e3530000 	cmp	r3, #0
  123a0c:	0a000001 	beq	123a18 <tcp_receive+0x1134>
  123a10:	e3a03001 	mov	r3, #1
  123a14:	ea000000 	b	123a1c <tcp_receive+0x1138>
  123a18:	e3a03000 	mov	r3, #0
  123a1c:	e0833004 	add	r3, r3, r4
  123a20:	e6ff2073 	uxth	r2, r3
  123a24:	e30f324a 	movw	r3, #62026	; 0xf24a
  123a28:	e3403014 	movt	r3, #20
  123a2c:	e1c320b0 	strh	r2, [r3]
              }
              prev = next;
  123a30:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123a34:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
              next = next->next;
  123a38:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123a3c:	e5933000 	ldr	r3, [r3]
  123a40:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
              tcp_seg_free(prev);
  123a44:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  123a48:	ebffef05 	bl	11f664 <tcp_seg_free>
            while (next &&
  123a4c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123a50:	e3530000 	cmp	r3, #0
  123a54:	0a000010 	beq	123a9c <tcp_receive+0x11b8>
                   TCP_SEQ_GEQ(seqno + tcplen,
  123a58:	e30f324a 	movw	r3, #62026	; 0xf24a
  123a5c:	e3403014 	movt	r3, #20
  123a60:	e1d330b0 	ldrh	r3, [r3]
  123a64:	e1a02003 	mov	r2, r3
  123a68:	e30f3240 	movw	r3, #62016	; 0xf240
  123a6c:	e3403014 	movt	r3, #20
  123a70:	e5933000 	ldr	r3, [r3]
  123a74:	e0822003 	add	r2, r2, r3
  123a78:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123a7c:	e593300c 	ldr	r3, [r3, #12]
  123a80:	e5933004 	ldr	r3, [r3, #4]
  123a84:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  123a88:	e1d110b8 	ldrh	r1, [r1, #8]
  123a8c:	e0833001 	add	r3, r3, r1
  123a90:	e0423003 	sub	r3, r2, r3
            while (next &&
  123a94:	e3530000 	cmp	r3, #0
  123a98:	aaffffaa 	bge	123948 <tcp_receive+0x1064>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
  123a9c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123aa0:	e3530000 	cmp	r3, #0
  123aa4:	0a000060 	beq	123c2c <tcp_receive+0x1348>
                TCP_SEQ_GT(seqno + tcplen,
  123aa8:	e30f324a 	movw	r3, #62026	; 0xf24a
  123aac:	e3403014 	movt	r3, #20
  123ab0:	e1d330b0 	ldrh	r3, [r3]
  123ab4:	e1a02003 	mov	r2, r3
  123ab8:	e30f3240 	movw	r3, #62016	; 0xf240
  123abc:	e3403014 	movt	r3, #20
  123ac0:	e5933000 	ldr	r3, [r3]
  123ac4:	e0822003 	add	r2, r2, r3
  123ac8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123acc:	e593300c 	ldr	r3, [r3, #12]
  123ad0:	e5933004 	ldr	r3, [r3, #4]
  123ad4:	e0423003 	sub	r3, r2, r3
            if (next &&
  123ad8:	e3530000 	cmp	r3, #0
  123adc:	da000052 	ble	123c2c <tcp_receive+0x1348>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
  123ae0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123ae4:	e593300c 	ldr	r3, [r3, #12]
  123ae8:	e5933004 	ldr	r3, [r3, #4]
  123aec:	e6ff2073 	uxth	r2, r3
  123af0:	e30f3240 	movw	r3, #62016	; 0xf240
  123af4:	e3403014 	movt	r3, #20
  123af8:	e5933000 	ldr	r3, [r3]
  123afc:	e6ff3073 	uxth	r3, r3
  123b00:	e0423003 	sub	r3, r2, r3
  123b04:	e6ff2073 	uxth	r2, r3
  123b08:	e30f3220 	movw	r3, #61984	; 0xf220
  123b0c:	e3403014 	movt	r3, #20
  123b10:	e1c320b8 	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
  123b14:	e30f3220 	movw	r3, #61984	; 0xf220
  123b18:	e3403014 	movt	r3, #20
  123b1c:	e593300c 	ldr	r3, [r3, #12]
  123b20:	e1d330bc 	ldrh	r3, [r3, #12]
  123b24:	e6ff3073 	uxth	r3, r3
  123b28:	e1a00003 	mov	r0, r3
  123b2c:	ebffcb23 	bl	1167c0 <lwip_htons>
  123b30:	e1a03000 	mov	r3, r0
  123b34:	e2033002 	and	r3, r3, #2
  123b38:	e3530000 	cmp	r3, #0
  123b3c:	0a000007 	beq	123b60 <tcp_receive+0x127c>
                inseg.len -= 1;
  123b40:	e30f3220 	movw	r3, #61984	; 0xf220
  123b44:	e3403014 	movt	r3, #20
  123b48:	e1d330b8 	ldrh	r3, [r3, #8]
  123b4c:	e2433001 	sub	r3, r3, #1
  123b50:	e6ff2073 	uxth	r2, r3
  123b54:	e30f3220 	movw	r3, #61984	; 0xf220
  123b58:	e3403014 	movt	r3, #20
  123b5c:	e1c320b8 	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
  123b60:	e30f3220 	movw	r3, #61984	; 0xf220
  123b64:	e3403014 	movt	r3, #20
  123b68:	e5932004 	ldr	r2, [r3, #4]
  123b6c:	e30f3220 	movw	r3, #61984	; 0xf220
  123b70:	e3403014 	movt	r3, #20
  123b74:	e1d330b8 	ldrh	r3, [r3, #8]
  123b78:	e1a01003 	mov	r1, r3
  123b7c:	e1a00002 	mov	r0, r2
  123b80:	ebffdbfc 	bl	11ab78 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
  123b84:	e30f3220 	movw	r3, #61984	; 0xf220
  123b88:	e3403014 	movt	r3, #20
  123b8c:	e1d340b8 	ldrh	r4, [r3, #8]
  123b90:	e30f3220 	movw	r3, #61984	; 0xf220
  123b94:	e3403014 	movt	r3, #20
  123b98:	e593300c 	ldr	r3, [r3, #12]
  123b9c:	e1d330bc 	ldrh	r3, [r3, #12]
  123ba0:	e6ff3073 	uxth	r3, r3
  123ba4:	e1a00003 	mov	r0, r3
  123ba8:	ebffcb04 	bl	1167c0 <lwip_htons>
  123bac:	e1a03000 	mov	r3, r0
  123bb0:	e2033003 	and	r3, r3, #3
  123bb4:	e3530000 	cmp	r3, #0
  123bb8:	0a000001 	beq	123bc4 <tcp_receive+0x12e0>
  123bbc:	e3a03001 	mov	r3, #1
  123bc0:	ea000000 	b	123bc8 <tcp_receive+0x12e4>
  123bc4:	e3a03000 	mov	r3, #0
  123bc8:	e0833004 	add	r3, r3, r4
  123bcc:	e6ff2073 	uxth	r2, r3
  123bd0:	e30f324a 	movw	r3, #62026	; 0xf24a
  123bd4:	e3403014 	movt	r3, #20
  123bd8:	e1c320b0 	strh	r2, [r3]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
  123bdc:	e30f324a 	movw	r3, #62026	; 0xf24a
  123be0:	e3403014 	movt	r3, #20
  123be4:	e1d330b0 	ldrh	r3, [r3]
  123be8:	e1a02003 	mov	r2, r3
  123bec:	e30f3240 	movw	r3, #62016	; 0xf240
  123bf0:	e3403014 	movt	r3, #20
  123bf4:	e5933000 	ldr	r3, [r3]
  123bf8:	e0822003 	add	r2, r2, r3
  123bfc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  123c00:	e593300c 	ldr	r3, [r3, #12]
  123c04:	e5933004 	ldr	r3, [r3, #4]
  123c08:	e1520003 	cmp	r2, r3
  123c0c:	0a000006 	beq	123c2c <tcp_receive+0x1348>
  123c10:	e3080750 	movw	r0, #34640	; 0x8750
  123c14:	e3400014 	movt	r0, #20
  123c18:	ebff7d3d 	bl	103114 <rt_kprintf>
  123c1c:	e300159c 	movw	r1, #1436	; 0x59c
  123c20:	e3080488 	movw	r0, #33928	; 0x8488
  123c24:	e3400014 	movt	r0, #20
  123c28:	ebff9d0d 	bl	10b064 <sys_arch_assert>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
  123c2c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123c30:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  123c34:	e5832074 	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
  123c38:	e30f324a 	movw	r3, #62026	; 0xf24a
  123c3c:	e3403014 	movt	r3, #20
  123c40:	e1d330b0 	ldrh	r3, [r3]
  123c44:	e1a02003 	mov	r2, r3
  123c48:	e30f3240 	movw	r3, #62016	; 0xf240
  123c4c:	e3403014 	movt	r3, #20
  123c50:	e5933000 	ldr	r3, [r3]
  123c54:	e0822003 	add	r2, r2, r3
  123c58:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123c5c:	e5832028 	str	r2, [r3, #40]	; 0x28

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
  123c60:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123c64:	e1d322bc 	ldrh	r2, [r3, #44]	; 0x2c
  123c68:	e30f324a 	movw	r3, #62026	; 0xf24a
  123c6c:	e3403014 	movt	r3, #20
  123c70:	e1d330b0 	ldrh	r3, [r3]
  123c74:	e1520003 	cmp	r2, r3
  123c78:	2a000006 	bcs	123c98 <tcp_receive+0x13b4>
  123c7c:	e308078c 	movw	r0, #34700	; 0x878c
  123c80:	e3400014 	movt	r0, #20
  123c84:	ebff7d22 	bl	103114 <rt_kprintf>
  123c88:	e30015a6 	movw	r1, #1446	; 0x5a6
  123c8c:	e3080488 	movw	r0, #33928	; 0x8488
  123c90:	e3400014 	movt	r0, #20
  123c94:	ebff9cf2 	bl	10b064 <sys_arch_assert>
        pcb->rcv_wnd -= tcplen;
  123c98:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123c9c:	e1d322bc 	ldrh	r2, [r3, #44]	; 0x2c
  123ca0:	e30f324a 	movw	r3, #62026	; 0xf24a
  123ca4:	e3403014 	movt	r3, #20
  123ca8:	e1d330b0 	ldrh	r3, [r3]
  123cac:	e0423003 	sub	r3, r2, r3
  123cb0:	e6ff2073 	uxth	r2, r3
  123cb4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123cb8:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c

        tcp_update_rcv_ann_wnd(pcb);
  123cbc:	e51b0040 	ldr	r0, [fp, #-64]	; 0xffffffc0
  123cc0:	ebffe93b 	bl	11e1b4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
  123cc4:	e30f3220 	movw	r3, #61984	; 0xf220
  123cc8:	e3403014 	movt	r3, #20
  123ccc:	e5933004 	ldr	r3, [r3, #4]
  123cd0:	e1d330b8 	ldrh	r3, [r3, #8]
  123cd4:	e3530000 	cmp	r3, #0
  123cd8:	0a000009 	beq	123d04 <tcp_receive+0x1420>
          recv_data = inseg.p;
  123cdc:	e30f3220 	movw	r3, #61984	; 0xf220
  123ce0:	e3403014 	movt	r3, #20
  123ce4:	e5932004 	ldr	r2, [r3, #4]
  123ce8:	e30f3250 	movw	r3, #62032	; 0xf250
  123cec:	e3403014 	movt	r3, #20
  123cf0:	e5832000 	str	r2, [r3]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
  123cf4:	e30f3220 	movw	r3, #61984	; 0xf220
  123cf8:	e3403014 	movt	r3, #20
  123cfc:	e3a02000 	mov	r2, #0
  123d00:	e5832004 	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
  123d04:	e30f3220 	movw	r3, #61984	; 0xf220
  123d08:	e3403014 	movt	r3, #20
  123d0c:	e593300c 	ldr	r3, [r3, #12]
  123d10:	e1d330bc 	ldrh	r3, [r3, #12]
  123d14:	e6ff3073 	uxth	r3, r3
  123d18:	e1a00003 	mov	r0, r3
  123d1c:	ebffcaa7 	bl	1167c0 <lwip_htons>
  123d20:	e1a03000 	mov	r3, r0
  123d24:	e2033001 	and	r3, r3, #1
  123d28:	e3530000 	cmp	r3, #0
  123d2c:	0a000099 	beq	123f98 <tcp_receive+0x16b4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
  123d30:	e30f324d 	movw	r3, #62029	; 0xf24d
  123d34:	e3403014 	movt	r3, #20
  123d38:	e5d33000 	ldrb	r3, [r3]
  123d3c:	e3833020 	orr	r3, r3, #32
  123d40:	e6ef2073 	uxtb	r2, r3
  123d44:	e30f324d 	movw	r3, #62029	; 0xf24d
  123d48:	e3403014 	movt	r3, #20
  123d4c:	e5c32000 	strb	r2, [r3]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
  123d50:	ea000090 	b	123f98 <tcp_receive+0x16b4>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
  123d54:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123d58:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  123d5c:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
          seqno = pcb->ooseq->tcphdr->seqno;
  123d60:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123d64:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  123d68:	e593300c 	ldr	r3, [r3, #12]
  123d6c:	e5932004 	ldr	r2, [r3, #4]
  123d70:	e30f3240 	movw	r3, #62016	; 0xf240
  123d74:	e3403014 	movt	r3, #20
  123d78:	e5832000 	str	r2, [r3]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
  123d7c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123d80:	e1d330b8 	ldrh	r3, [r3, #8]
  123d84:	e1a04003 	mov	r4, r3
  123d88:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123d8c:	e593300c 	ldr	r3, [r3, #12]
  123d90:	e1d330bc 	ldrh	r3, [r3, #12]
  123d94:	e6ff3073 	uxth	r3, r3
  123d98:	e1a00003 	mov	r0, r3
  123d9c:	ebffca87 	bl	1167c0 <lwip_htons>
  123da0:	e1a03000 	mov	r3, r0
  123da4:	e2033003 	and	r3, r3, #3
  123da8:	e3530000 	cmp	r3, #0
  123dac:	0a000001 	beq	123db8 <tcp_receive+0x14d4>
  123db0:	e3a03001 	mov	r3, #1
  123db4:	ea000000 	b	123dbc <tcp_receive+0x14d8>
  123db8:	e3a03000 	mov	r3, #0
  123dbc:	e0832004 	add	r2, r3, r4
  123dc0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123dc4:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  123dc8:	e0822003 	add	r2, r2, r3
  123dcc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123dd0:	e5832028 	str	r2, [r3, #40]	; 0x28
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
  123dd4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123dd8:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  123ddc:	e1a04003 	mov	r4, r3
  123de0:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123de4:	e1d330b8 	ldrh	r3, [r3, #8]
  123de8:	e1a05003 	mov	r5, r3
  123dec:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123df0:	e593300c 	ldr	r3, [r3, #12]
  123df4:	e1d330bc 	ldrh	r3, [r3, #12]
  123df8:	e6ff3073 	uxth	r3, r3
  123dfc:	e1a00003 	mov	r0, r3
  123e00:	ebffca6e 	bl	1167c0 <lwip_htons>
  123e04:	e1a03000 	mov	r3, r0
  123e08:	e2033003 	and	r3, r3, #3
  123e0c:	e3530000 	cmp	r3, #0
  123e10:	0a000001 	beq	123e1c <tcp_receive+0x1538>
  123e14:	e3a03001 	mov	r3, #1
  123e18:	ea000000 	b	123e20 <tcp_receive+0x153c>
  123e1c:	e3a03000 	mov	r3, #0
  123e20:	e0833005 	add	r3, r3, r5
  123e24:	e1540003 	cmp	r4, r3
  123e28:	2a000006 	bcs	123e48 <tcp_receive+0x1564>
  123e2c:	e30807ac 	movw	r0, #34732	; 0x87ac
  123e30:	e3400014 	movt	r0, #20
  123e34:	ebff7cb6 	bl	103114 <rt_kprintf>
  123e38:	e30015cb 	movw	r1, #1483	; 0x5cb
  123e3c:	e3080488 	movw	r0, #33928	; 0x8488
  123e40:	e3400014 	movt	r0, #20
  123e44:	ebff9c86 	bl	10b064 <sys_arch_assert>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
  123e48:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123e4c:	e1d330b8 	ldrh	r3, [r3, #8]
  123e50:	e1a04003 	mov	r4, r3
  123e54:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123e58:	e593300c 	ldr	r3, [r3, #12]
  123e5c:	e1d330bc 	ldrh	r3, [r3, #12]
  123e60:	e6ff3073 	uxth	r3, r3
  123e64:	e1a00003 	mov	r0, r3
  123e68:	ebffca54 	bl	1167c0 <lwip_htons>
  123e6c:	e1a03000 	mov	r3, r0
  123e70:	e2033003 	and	r3, r3, #3
  123e74:	e3530000 	cmp	r3, #0
  123e78:	0a000001 	beq	123e84 <tcp_receive+0x15a0>
  123e7c:	e3a03001 	mov	r3, #1
  123e80:	ea000000 	b	123e88 <tcp_receive+0x15a4>
  123e84:	e3a03000 	mov	r3, #0
  123e88:	e0831004 	add	r1, r3, r4
  123e8c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123e90:	e1d322bc 	ldrh	r2, [r3, #44]	; 0x2c
  123e94:	e6ff3071 	uxth	r3, r1
  123e98:	e0423003 	sub	r3, r2, r3
  123e9c:	e6ff2073 	uxth	r2, r3
  123ea0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123ea4:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c

          tcp_update_rcv_ann_wnd(pcb);
  123ea8:	e51b0040 	ldr	r0, [fp, #-64]	; 0xffffffc0
  123eac:	ebffe8c0 	bl	11e1b4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
  123eb0:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123eb4:	e5933004 	ldr	r3, [r3, #4]
  123eb8:	e1d330b8 	ldrh	r3, [r3, #8]
  123ebc:	e3530000 	cmp	r3, #0
  123ec0:	0a000015 	beq	123f1c <tcp_receive+0x1638>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
  123ec4:	e30f3250 	movw	r3, #62032	; 0xf250
  123ec8:	e3403014 	movt	r3, #20
  123ecc:	e5933000 	ldr	r3, [r3]
  123ed0:	e3530000 	cmp	r3, #0
  123ed4:	0a000008 	beq	123efc <tcp_receive+0x1618>
              pbuf_cat(recv_data, cseg->p);
  123ed8:	e30f3250 	movw	r3, #62032	; 0xf250
  123edc:	e3403014 	movt	r3, #20
  123ee0:	e5932000 	ldr	r2, [r3]
  123ee4:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123ee8:	e5933004 	ldr	r3, [r3, #4]
  123eec:	e1a01003 	mov	r1, r3
  123ef0:	e1a00002 	mov	r0, r2
  123ef4:	ebffdd1f 	bl	11b378 <pbuf_cat>
  123ef8:	ea000004 	b	123f10 <tcp_receive+0x162c>
            } else {
              recv_data = cseg->p;
  123efc:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123f00:	e5932004 	ldr	r2, [r3, #4]
  123f04:	e30f3250 	movw	r3, #62032	; 0xf250
  123f08:	e3403014 	movt	r3, #20
  123f0c:	e5832000 	str	r2, [r3]
            }
            cseg->p = NULL;
  123f10:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123f14:	e3a02000 	mov	r2, #0
  123f18:	e5832004 	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
  123f1c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123f20:	e593300c 	ldr	r3, [r3, #12]
  123f24:	e1d330bc 	ldrh	r3, [r3, #12]
  123f28:	e6ff3073 	uxth	r3, r3
  123f2c:	e1a00003 	mov	r0, r3
  123f30:	ebffca22 	bl	1167c0 <lwip_htons>
  123f34:	e1a03000 	mov	r3, r0
  123f38:	e2033001 	and	r3, r3, #1
  123f3c:	e3530000 	cmp	r3, #0
  123f40:	0a00000e 	beq	123f80 <tcp_receive+0x169c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
  123f44:	e30f324d 	movw	r3, #62029	; 0xf24d
  123f48:	e3403014 	movt	r3, #20
  123f4c:	e5d33000 	ldrb	r3, [r3]
  123f50:	e3833020 	orr	r3, r3, #32
  123f54:	e6ef2073 	uxtb	r2, r3
  123f58:	e30f324d 	movw	r3, #62029	; 0xf24d
  123f5c:	e3403014 	movt	r3, #20
  123f60:	e5c32000 	strb	r2, [r3]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
  123f64:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123f68:	e5933014 	ldr	r3, [r3, #20]
  123f6c:	e3530004 	cmp	r3, #4
  123f70:	1a000002 	bne	123f80 <tcp_receive+0x169c>
              pcb->state = CLOSE_WAIT;
  123f74:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123f78:	e3a02007 	mov	r2, #7
  123f7c:	e5832014 	str	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
  123f80:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  123f84:	e5932000 	ldr	r2, [r3]
  123f88:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123f8c:	e5832074 	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
  123f90:	e51b0038 	ldr	r0, [fp, #-56]	; 0xffffffc8
  123f94:	ebffedb2 	bl	11f664 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
  123f98:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123f9c:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  123fa0:	e3530000 	cmp	r3, #0
  123fa4:	0a000007 	beq	123fc8 <tcp_receive+0x16e4>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
  123fa8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123fac:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  123fb0:	e593300c 	ldr	r3, [r3, #12]
  123fb4:	e5932004 	ldr	r2, [r3, #4]
  123fb8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123fbc:	e5933028 	ldr	r3, [r3, #40]	; 0x28
        while (pcb->ooseq != NULL &&
  123fc0:	e1520003 	cmp	r2, r3
  123fc4:	0affff62 	beq	123d54 <tcp_receive+0x1470>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
  123fc8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123fcc:	e5d3301e 	ldrb	r3, [r3, #30]
  123fd0:	e2033001 	and	r3, r3, #1
  123fd4:	e3530000 	cmp	r3, #0
  123fd8:	0a00000c 	beq	124010 <tcp_receive+0x172c>
  123fdc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123fe0:	e5d3301e 	ldrb	r3, [r3, #30]
  123fe4:	e3c33001 	bic	r3, r3, #1
  123fe8:	e6ef2073 	uxtb	r2, r3
  123fec:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123ff0:	e5c3201e 	strb	r2, [r3, #30]
  123ff4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  123ff8:	e5d3301e 	ldrb	r3, [r3, #30]
  123ffc:	e3833002 	orr	r3, r3, #2
  124000:	e6ef2073 	uxtb	r2, r3
  124004:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  124008:	e5c3201e 	strb	r2, [r3, #30]
      if (pcb->rcv_nxt == seqno) {
  12400c:	ea00016c 	b	1245c4 <tcp_receive+0x1ce0>
        tcp_ack(pcb);
  124010:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  124014:	e5d3301e 	ldrb	r3, [r3, #30]
  124018:	e3833001 	orr	r3, r3, #1
  12401c:	e6ef2073 	uxtb	r2, r3
  124020:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  124024:	e5c3201e 	strb	r2, [r3, #30]
      if (pcb->rcv_nxt == seqno) {
  124028:	ea000165 	b	1245c4 <tcp_receive+0x1ce0>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
  12402c:	e51b0040 	ldr	r0, [fp, #-64]	; 0xffffffc0
  124030:	eb0007e2 	bl	125fc0 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
  124034:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  124038:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  12403c:	e3530000 	cmp	r3, #0
  124040:	1a000006 	bne	124060 <tcp_receive+0x177c>
          pcb->ooseq = tcp_seg_copy(&inseg);
  124044:	e30f0220 	movw	r0, #61984	; 0xf220
  124048:	e3400014 	movt	r0, #20
  12404c:	ebffeda6 	bl	11f6ec <tcp_seg_copy>
  124050:	e1a02000 	mov	r2, r0
  124054:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  124058:	e5832074 	str	r2, [r3, #116]	; 0x74
      if (pcb->rcv_nxt == seqno) {
  12405c:	ea000158 	b	1245c4 <tcp_receive+0x1ce0>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
  124060:	e3a03000 	mov	r3, #0
  124064:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
          for (next = pcb->ooseq; next != NULL; next = next->next) {
  124068:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12406c:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  124070:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  124074:	ea00013f 	b	124578 <tcp_receive+0x1c94>
            if (seqno == next->tcphdr->seqno) {
  124078:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12407c:	e593300c 	ldr	r3, [r3, #12]
  124080:	e5932004 	ldr	r2, [r3, #4]
  124084:	e30f3240 	movw	r3, #62016	; 0xf240
  124088:	e3403014 	movt	r3, #20
  12408c:	e5933000 	ldr	r3, [r3]
  124090:	e1520003 	cmp	r2, r3
  124094:	1a00001b 	bne	124108 <tcp_receive+0x1824>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
  124098:	e30f3220 	movw	r3, #61984	; 0xf220
  12409c:	e3403014 	movt	r3, #20
  1240a0:	e1d320b8 	ldrh	r2, [r3, #8]
  1240a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1240a8:	e1d330b8 	ldrh	r3, [r3, #8]
  1240ac:	e1520003 	cmp	r2, r3
  1240b0:	9a000134 	bls	124588 <tcp_receive+0x1ca4>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
  1240b4:	e30f0220 	movw	r0, #61984	; 0xf220
  1240b8:	e3400014 	movt	r0, #20
  1240bc:	ebffed8a 	bl	11f6ec <tcp_seg_copy>
  1240c0:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
                if (cseg != NULL) {
  1240c4:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1240c8:	e3530000 	cmp	r3, #0
  1240cc:	0a00012f 	beq	124590 <tcp_receive+0x1cac>
                  if (prev != NULL) {
  1240d0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1240d4:	e3530000 	cmp	r3, #0
  1240d8:	0a000003 	beq	1240ec <tcp_receive+0x1808>
                    prev->next = cseg;
  1240dc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1240e0:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
  1240e4:	e5832000 	str	r2, [r3]
  1240e8:	ea000002 	b	1240f8 <tcp_receive+0x1814>
                  } else {
                    pcb->ooseq = cseg;
  1240ec:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1240f0:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
  1240f4:	e5832074 	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
  1240f8:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  1240fc:	e51b0038 	ldr	r0, [fp, #-56]	; 0xffffffc8
  124100:	ebfff989 	bl	12272c <tcp_oos_insert_segment>
                }
                break;
  124104:	ea000121 	b	124590 <tcp_receive+0x1cac>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
  124108:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12410c:	e3530000 	cmp	r3, #0
  124110:	1a000016 	bne	124170 <tcp_receive+0x188c>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
  124114:	e30f3240 	movw	r3, #62016	; 0xf240
  124118:	e3403014 	movt	r3, #20
  12411c:	e5932000 	ldr	r2, [r3]
  124120:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124124:	e593300c 	ldr	r3, [r3, #12]
  124128:	e5933004 	ldr	r3, [r3, #4]
  12412c:	e0423003 	sub	r3, r2, r3
  124130:	e3530000 	cmp	r3, #0
  124134:	aa00004e 	bge	124274 <tcp_receive+0x1990>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
  124138:	e30f0220 	movw	r0, #61984	; 0xf220
  12413c:	e3400014 	movt	r0, #20
  124140:	ebffed69 	bl	11f6ec <tcp_seg_copy>
  124144:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
                  if (cseg != NULL) {
  124148:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  12414c:	e3530000 	cmp	r3, #0
  124150:	0a000110 	beq	124598 <tcp_receive+0x1cb4>
                    pcb->ooseq = cseg;
  124154:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  124158:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
  12415c:	e5832074 	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
  124160:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  124164:	e51b0038 	ldr	r0, [fp, #-56]	; 0xffffffc8
  124168:	ebfff96f 	bl	12272c <tcp_oos_insert_segment>
                  }
                  break;
  12416c:	ea000109 	b	124598 <tcp_receive+0x1cb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
  124170:	e30f3240 	movw	r3, #62016	; 0xf240
  124174:	e3403014 	movt	r3, #20
  124178:	e5932000 	ldr	r2, [r3]
  12417c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  124180:	e593300c 	ldr	r3, [r3, #12]
  124184:	e5933004 	ldr	r3, [r3, #4]
  124188:	e0423003 	sub	r3, r2, r3
  12418c:	e2433001 	sub	r3, r3, #1
  124190:	e3530000 	cmp	r3, #0
  124194:	ba000036 	blt	124274 <tcp_receive+0x1990>
  124198:	e30f3240 	movw	r3, #62016	; 0xf240
  12419c:	e3403014 	movt	r3, #20
  1241a0:	e5932000 	ldr	r2, [r3]
  1241a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1241a8:	e593300c 	ldr	r3, [r3, #12]
  1241ac:	e5933004 	ldr	r3, [r3, #4]
  1241b0:	e0423003 	sub	r3, r2, r3
  1241b4:	e2833001 	add	r3, r3, #1
  1241b8:	e3530000 	cmp	r3, #0
  1241bc:	ca00002c 	bgt	124274 <tcp_receive+0x1990>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
  1241c0:	e30f0220 	movw	r0, #61984	; 0xf220
  1241c4:	e3400014 	movt	r0, #20
  1241c8:	ebffed47 	bl	11f6ec <tcp_seg_copy>
  1241cc:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
                  if (cseg != NULL) {
  1241d0:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1241d4:	e3530000 	cmp	r3, #0
  1241d8:	0a0000f0 	beq	1245a0 <tcp_receive+0x1cbc>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
  1241dc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1241e0:	e593300c 	ldr	r3, [r3, #12]
  1241e4:	e5933004 	ldr	r3, [r3, #4]
  1241e8:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1241ec:	e1d220b8 	ldrh	r2, [r2, #8]
  1241f0:	e0832002 	add	r2, r3, r2
  1241f4:	e30f3240 	movw	r3, #62016	; 0xf240
  1241f8:	e3403014 	movt	r3, #20
  1241fc:	e5933000 	ldr	r3, [r3]
  124200:	e0423003 	sub	r3, r2, r3
  124204:	e3530000 	cmp	r3, #0
  124208:	da000012 	ble	124258 <tcp_receive+0x1974>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
  12420c:	e30f3240 	movw	r3, #62016	; 0xf240
  124210:	e3403014 	movt	r3, #20
  124214:	e5933000 	ldr	r3, [r3]
  124218:	e6ff2073 	uxth	r2, r3
  12421c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  124220:	e593300c 	ldr	r3, [r3, #12]
  124224:	e5933004 	ldr	r3, [r3, #4]
  124228:	e6ff3073 	uxth	r3, r3
  12422c:	e0423003 	sub	r3, r2, r3
  124230:	e6ff2073 	uxth	r2, r3
  124234:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  124238:	e1c320b8 	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
  12423c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  124240:	e5932004 	ldr	r2, [r3, #4]
  124244:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  124248:	e1d330b8 	ldrh	r3, [r3, #8]
  12424c:	e1a01003 	mov	r1, r3
  124250:	e1a00002 	mov	r0, r2
  124254:	ebffda47 	bl	11ab78 <pbuf_realloc>
                    }
                    prev->next = cseg;
  124258:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12425c:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
  124260:	e5832000 	str	r2, [r3]
                    tcp_oos_insert_segment(cseg, next);
  124264:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  124268:	e51b0038 	ldr	r0, [fp, #-56]	; 0xffffffc8
  12426c:	ebfff92e 	bl	12272c <tcp_oos_insert_segment>
                  }
                  break;
  124270:	ea0000ca 	b	1245a0 <tcp_receive+0x1cbc>
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
  124274:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124278:	e5933000 	ldr	r3, [r3]
  12427c:	e3530000 	cmp	r3, #0
  124280:	1a0000b7 	bne	124564 <tcp_receive+0x1c80>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
  124284:	e30f3240 	movw	r3, #62016	; 0xf240
  124288:	e3403014 	movt	r3, #20
  12428c:	e5932000 	ldr	r2, [r3]
  124290:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124294:	e593300c 	ldr	r3, [r3, #12]
  124298:	e5933004 	ldr	r3, [r3, #4]
  12429c:	e0423003 	sub	r3, r2, r3
              if (next->next == NULL &&
  1242a0:	e3530000 	cmp	r3, #0
  1242a4:	da0000ae 	ble	124564 <tcp_receive+0x1c80>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
  1242a8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1242ac:	e593300c 	ldr	r3, [r3, #12]
  1242b0:	e1d330bc 	ldrh	r3, [r3, #12]
  1242b4:	e6ff3073 	uxth	r3, r3
  1242b8:	e1a00003 	mov	r0, r3
  1242bc:	ebffc93f 	bl	1167c0 <lwip_htons>
  1242c0:	e1a03000 	mov	r3, r0
  1242c4:	e2033001 	and	r3, r3, #1
  1242c8:	e3530000 	cmp	r3, #0
  1242cc:	1a0000b5 	bne	1245a8 <tcp_receive+0x1cc4>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
  1242d0:	e30f0220 	movw	r0, #61984	; 0xf220
  1242d4:	e3400014 	movt	r0, #20
  1242d8:	ebffed03 	bl	11f6ec <tcp_seg_copy>
  1242dc:	e1a02000 	mov	r2, r0
  1242e0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1242e4:	e5832000 	str	r2, [r3]
                if (next->next != NULL) {
  1242e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1242ec:	e5933000 	ldr	r3, [r3]
  1242f0:	e3530000 	cmp	r3, #0
  1242f4:	0a0000ad 	beq	1245b0 <tcp_receive+0x1ccc>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
  1242f8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1242fc:	e593300c 	ldr	r3, [r3, #12]
  124300:	e5933004 	ldr	r3, [r3, #4]
  124304:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  124308:	e1d220b8 	ldrh	r2, [r2, #8]
  12430c:	e0832002 	add	r2, r3, r2
  124310:	e30f3240 	movw	r3, #62016	; 0xf240
  124314:	e3403014 	movt	r3, #20
  124318:	e5933000 	ldr	r3, [r3]
  12431c:	e0423003 	sub	r3, r2, r3
  124320:	e3530000 	cmp	r3, #0
  124324:	da000012 	ble	124374 <tcp_receive+0x1a90>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
  124328:	e30f3240 	movw	r3, #62016	; 0xf240
  12432c:	e3403014 	movt	r3, #20
  124330:	e5933000 	ldr	r3, [r3]
  124334:	e6ff2073 	uxth	r2, r3
  124338:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12433c:	e593300c 	ldr	r3, [r3, #12]
  124340:	e5933004 	ldr	r3, [r3, #4]
  124344:	e6ff3073 	uxth	r3, r3
  124348:	e0423003 	sub	r3, r2, r3
  12434c:	e6ff2073 	uxth	r2, r3
  124350:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124354:	e1c320b8 	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
  124358:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12435c:	e5932004 	ldr	r2, [r3, #4]
  124360:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124364:	e1d330b8 	ldrh	r3, [r3, #8]
  124368:	e1a01003 	mov	r1, r3
  12436c:	e1a00002 	mov	r0, r2
  124370:	ebffda00 	bl	11ab78 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
  124374:	e30f324a 	movw	r3, #62026	; 0xf24a
  124378:	e3403014 	movt	r3, #20
  12437c:	e1d330b0 	ldrh	r3, [r3]
  124380:	e1a02003 	mov	r2, r3
  124384:	e30f3240 	movw	r3, #62016	; 0xf240
  124388:	e3403014 	movt	r3, #20
  12438c:	e5933000 	ldr	r3, [r3]
  124390:	e0822003 	add	r2, r2, r3
  124394:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  124398:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12439c:	e51b1040 	ldr	r1, [fp, #-64]	; 0xffffffc0
  1243a0:	e1d112bc 	ldrh	r1, [r1, #44]	; 0x2c
  1243a4:	e0833001 	add	r3, r3, r1
  1243a8:	e0423003 	sub	r3, r2, r3
  1243ac:	e3530000 	cmp	r3, #0
  1243b0:	da00007e 	ble	1245b0 <tcp_receive+0x1ccc>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
  1243b4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1243b8:	e5933000 	ldr	r3, [r3]
  1243bc:	e593300c 	ldr	r3, [r3, #12]
  1243c0:	e1d330bc 	ldrh	r3, [r3, #12]
  1243c4:	e6ff3073 	uxth	r3, r3
  1243c8:	e1a00003 	mov	r0, r3
  1243cc:	ebffc8fb 	bl	1167c0 <lwip_htons>
  1243d0:	e1a03000 	mov	r3, r0
  1243d4:	e2033001 	and	r3, r3, #1
  1243d8:	e3530000 	cmp	r3, #0
  1243dc:	0a00001a 	beq	12444c <tcp_receive+0x1b68>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
  1243e0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1243e4:	e5933000 	ldr	r3, [r3]
  1243e8:	e593300c 	ldr	r3, [r3, #12]
  1243ec:	e1d330bc 	ldrh	r3, [r3, #12]
  1243f0:	e6ff3073 	uxth	r3, r3
  1243f4:	e3c33c3f 	bic	r3, r3, #16128	; 0x3f00
  1243f8:	e6ff4073 	uxth	r4, r3
  1243fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124400:	e5933000 	ldr	r3, [r3]
  124404:	e593300c 	ldr	r3, [r3, #12]
  124408:	e1d330bc 	ldrh	r3, [r3, #12]
  12440c:	e6ff3073 	uxth	r3, r3
  124410:	e1a00003 	mov	r0, r3
  124414:	ebffc8e9 	bl	1167c0 <lwip_htons>
  124418:	e1a03000 	mov	r3, r0
  12441c:	e203303e 	and	r3, r3, #62	; 0x3e
  124420:	e6ff3073 	uxth	r3, r3
  124424:	e1a00003 	mov	r0, r3
  124428:	ebffc8e4 	bl	1167c0 <lwip_htons>
  12442c:	e1a03000 	mov	r3, r0
  124430:	e1a02003 	mov	r2, r3
  124434:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124438:	e5933000 	ldr	r3, [r3]
  12443c:	e593300c 	ldr	r3, [r3, #12]
  124440:	e1842002 	orr	r2, r4, r2
  124444:	e6ff2072 	uxth	r2, r2
  124448:	e1c320bc 	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
  12444c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  124450:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  124454:	e6ff2073 	uxth	r2, r3
  124458:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12445c:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  124460:	e0823003 	add	r3, r2, r3
  124464:	e6ff1073 	uxth	r1, r3
  124468:	e30f3240 	movw	r3, #62016	; 0xf240
  12446c:	e3403014 	movt	r3, #20
  124470:	e5933000 	ldr	r3, [r3]
  124474:	e6ff2073 	uxth	r2, r3
  124478:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12447c:	e5933000 	ldr	r3, [r3]
  124480:	e0412002 	sub	r2, r1, r2
  124484:	e6ff2072 	uxth	r2, r2
  124488:	e1c320b8 	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
  12448c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124490:	e5933000 	ldr	r3, [r3]
  124494:	e5932004 	ldr	r2, [r3, #4]
  124498:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12449c:	e5933000 	ldr	r3, [r3]
  1244a0:	e1d330b8 	ldrh	r3, [r3, #8]
  1244a4:	e1a01003 	mov	r1, r3
  1244a8:	e1a00002 	mov	r0, r2
  1244ac:	ebffd9b1 	bl	11ab78 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
  1244b0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1244b4:	e5933000 	ldr	r3, [r3]
  1244b8:	e1d340b8 	ldrh	r4, [r3, #8]
  1244bc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1244c0:	e5933000 	ldr	r3, [r3]
  1244c4:	e593300c 	ldr	r3, [r3, #12]
  1244c8:	e1d330bc 	ldrh	r3, [r3, #12]
  1244cc:	e6ff3073 	uxth	r3, r3
  1244d0:	e1a00003 	mov	r0, r3
  1244d4:	ebffc8b9 	bl	1167c0 <lwip_htons>
  1244d8:	e1a03000 	mov	r3, r0
  1244dc:	e2033003 	and	r3, r3, #3
  1244e0:	e3530000 	cmp	r3, #0
  1244e4:	0a000001 	beq	1244f0 <tcp_receive+0x1c0c>
  1244e8:	e3a03001 	mov	r3, #1
  1244ec:	ea000000 	b	1244f4 <tcp_receive+0x1c10>
  1244f0:	e3a03000 	mov	r3, #0
  1244f4:	e0833004 	add	r3, r3, r4
  1244f8:	e6ff2073 	uxth	r2, r3
  1244fc:	e30f324a 	movw	r3, #62026	; 0xf24a
  124500:	e3403014 	movt	r3, #20
  124504:	e1c320b0 	strh	r2, [r3]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
  124508:	e30f324a 	movw	r3, #62026	; 0xf24a
  12450c:	e3403014 	movt	r3, #20
  124510:	e1d330b0 	ldrh	r3, [r3]
  124514:	e1a02003 	mov	r2, r3
  124518:	e30f3240 	movw	r3, #62016	; 0xf240
  12451c:	e3403014 	movt	r3, #20
  124520:	e5933000 	ldr	r3, [r3]
  124524:	e0822003 	add	r2, r2, r3
  124528:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12452c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  124530:	e51b1040 	ldr	r1, [fp, #-64]	; 0xffffffc0
  124534:	e1d112bc 	ldrh	r1, [r1, #44]	; 0x2c
  124538:	e0833001 	add	r3, r3, r1
  12453c:	e1520003 	cmp	r2, r3
  124540:	0a00001a 	beq	1245b0 <tcp_receive+0x1ccc>
  124544:	e3080718 	movw	r0, #34584	; 0x8718
  124548:	e3400014 	movt	r0, #20
  12454c:	ebff7af0 	bl	103114 <rt_kprintf>
  124550:	e3001668 	movw	r1, #1640	; 0x668
  124554:	e3080488 	movw	r0, #33928	; 0x8488
  124558:	e3400014 	movt	r0, #20
  12455c:	ebff9ac0 	bl	10b064 <sys_arch_assert>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
  124560:	ea000012 	b	1245b0 <tcp_receive+0x1ccc>
              }
            }
            prev = next;
  124564:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124568:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
          for (next = pcb->ooseq; next != NULL; next = next->next) {
  12456c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124570:	e5933000 	ldr	r3, [r3]
  124574:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  124578:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12457c:	e3530000 	cmp	r3, #0
  124580:	1afffebc 	bne	124078 <tcp_receive+0x1794>
      if (pcb->rcv_nxt == seqno) {
  124584:	ea00000e 	b	1245c4 <tcp_receive+0x1ce0>
                break;
  124588:	e320f000 	nop	{0}
  12458c:	ea00000c 	b	1245c4 <tcp_receive+0x1ce0>
                break;
  124590:	e320f000 	nop	{0}
  124594:	ea00000a 	b	1245c4 <tcp_receive+0x1ce0>
                  break;
  124598:	e320f000 	nop	{0}
  12459c:	ea000008 	b	1245c4 <tcp_receive+0x1ce0>
                  break;
  1245a0:	e320f000 	nop	{0}
  1245a4:	ea000006 	b	1245c4 <tcp_receive+0x1ce0>
                  break;
  1245a8:	e320f000 	nop	{0}
  1245ac:	ea000004 	b	1245c4 <tcp_receive+0x1ce0>
                break;
  1245b0:	e320f000 	nop	{0}
      if (pcb->rcv_nxt == seqno) {
  1245b4:	ea000002 	b	1245c4 <tcp_receive+0x1ce0>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
  1245b8:	e51b0040 	ldr	r0, [fp, #-64]	; 0xffffffc0
  1245bc:	eb00067f 	bl	125fc0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
  1245c0:	ea00001b 	b	124634 <tcp_receive+0x1d50>
  1245c4:	ea00001a 	b	124634 <tcp_receive+0x1d50>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
  1245c8:	e30f3240 	movw	r3, #62016	; 0xf240
  1245cc:	e3403014 	movt	r3, #20
  1245d0:	e5932000 	ldr	r2, [r3]
  1245d4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1245d8:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  1245dc:	e0423003 	sub	r3, r2, r3
  1245e0:	e3530000 	cmp	r3, #0
  1245e4:	ba00000b 	blt	124618 <tcp_receive+0x1d34>
  1245e8:	e30f3240 	movw	r3, #62016	; 0xf240
  1245ec:	e3403014 	movt	r3, #20
  1245f0:	e5932000 	ldr	r2, [r3]
  1245f4:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  1245f8:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  1245fc:	e51b1040 	ldr	r1, [fp, #-64]	; 0xffffffc0
  124600:	e1d112bc 	ldrh	r1, [r1, #44]	; 0x2c
  124604:	e0833001 	add	r3, r3, r1
  124608:	e0423003 	sub	r3, r2, r3
  12460c:	e2833001 	add	r3, r3, #1
  124610:	e3530000 	cmp	r3, #0
  124614:	da000006 	ble	124634 <tcp_receive+0x1d50>
      tcp_ack_now(pcb);
  124618:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12461c:	e5d3301e 	ldrb	r3, [r3, #30]
  124620:	e3833002 	orr	r3, r3, #2
  124624:	e6ef2073 	uxtb	r2, r3
  124628:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
  12462c:	e5c3201e 	strb	r2, [r3, #30]
    }
  }
}
  124630:	eaffffff 	b	124634 <tcp_receive+0x1d50>
  124634:	e320f000 	nop	{0}
  124638:	e24bd010 	sub	sp, fp, #16
  12463c:	e8bd8870 	pop	{r4, r5, r6, fp, pc}

00124640 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
  124640:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  124644:	e28db000 	add	fp, sp, #0
  124648:	e24dd00c 	sub	sp, sp, #12
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
  12464c:	e30f3238 	movw	r3, #62008	; 0xf238
  124650:	e3403014 	movt	r3, #20
  124654:	e5933000 	ldr	r3, [r3]
  124658:	e3530000 	cmp	r3, #0
  12465c:	0a000007 	beq	124680 <tcp_getoptbyte+0x40>
  124660:	e30f323c 	movw	r3, #62012	; 0xf23c
  124664:	e3403014 	movt	r3, #20
  124668:	e1d320b0 	ldrh	r2, [r3]
  12466c:	e30f3236 	movw	r3, #62006	; 0xf236
  124670:	e3403014 	movt	r3, #20
  124674:	e1d330b0 	ldrh	r3, [r3]
  124678:	e1520003 	cmp	r2, r3
  12467c:	2a000010 	bcs	1246c4 <tcp_getoptbyte+0x84>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
  124680:	e30f3230 	movw	r3, #62000	; 0xf230
  124684:	e3403014 	movt	r3, #20
  124688:	e5933000 	ldr	r3, [r3]
  12468c:	e2833014 	add	r3, r3, #20
  124690:	e50b300c 	str	r3, [fp, #-12]
    return opts[tcp_optidx++];
  124694:	e30f323c 	movw	r3, #62012	; 0xf23c
  124698:	e3403014 	movt	r3, #20
  12469c:	e1d320b0 	ldrh	r2, [r3]
  1246a0:	e2823001 	add	r3, r2, #1
  1246a4:	e6ff1073 	uxth	r1, r3
  1246a8:	e30f323c 	movw	r3, #62012	; 0xf23c
  1246ac:	e3403014 	movt	r3, #20
  1246b0:	e1c310b0 	strh	r1, [r3]
  1246b4:	e51b300c 	ldr	r3, [fp, #-12]
  1246b8:	e0833002 	add	r3, r3, r2
  1246bc:	e5d33000 	ldrb	r3, [r3]
  1246c0:	ea000014 	b	124718 <tcp_getoptbyte+0xd8>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
  1246c4:	e30f323c 	movw	r3, #62012	; 0xf23c
  1246c8:	e3403014 	movt	r3, #20
  1246cc:	e1d320b0 	ldrh	r2, [r3]
  1246d0:	e2823001 	add	r3, r2, #1
  1246d4:	e6ff1073 	uxth	r1, r3
  1246d8:	e30f323c 	movw	r3, #62012	; 0xf23c
  1246dc:	e3403014 	movt	r3, #20
  1246e0:	e1c310b0 	strh	r1, [r3]
  1246e4:	e6ef2072 	uxtb	r2, r2
  1246e8:	e30f3236 	movw	r3, #62006	; 0xf236
  1246ec:	e3403014 	movt	r3, #20
  1246f0:	e1d330b0 	ldrh	r3, [r3]
  1246f4:	e6ef3073 	uxtb	r3, r3
  1246f8:	e0423003 	sub	r3, r2, r3
  1246fc:	e54b3005 	strb	r3, [fp, #-5]
    return tcphdr_opt2[idx];
  124700:	e30f3238 	movw	r3, #62008	; 0xf238
  124704:	e3403014 	movt	r3, #20
  124708:	e5932000 	ldr	r2, [r3]
  12470c:	e55b3005 	ldrb	r3, [fp, #-5]
  124710:	e0823003 	add	r3, r2, r3
  124714:	e5d33000 	ldrb	r3, [r3]
  }
}
  124718:	e1a00003 	mov	r0, r3
  12471c:	e28bd000 	add	sp, fp, #0
  124720:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  124724:	e12fff1e 	bx	lr

00124728 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
  124728:	e92d4800 	push	{fp, lr}
  12472c:	e28db004 	add	fp, sp, #4
  124730:	e24dd010 	sub	sp, sp, #16
  124734:	e50b0010 	str	r0, [fp, #-16]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
  124738:	e30f3234 	movw	r3, #62004	; 0xf234
  12473c:	e3403014 	movt	r3, #20
  124740:	e1d330b0 	ldrh	r3, [r3]
  124744:	e3530000 	cmp	r3, #0
  124748:	0a000054 	beq	1248a0 <tcp_parseopt+0x178>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
  12474c:	e30f323c 	movw	r3, #62012	; 0xf23c
  124750:	e3403014 	movt	r3, #20
  124754:	e3a02000 	mov	r2, #0
  124758:	e1c320b0 	strh	r2, [r3]
  12475c:	ea000041 	b	124868 <tcp_parseopt+0x140>
      u8_t opt = tcp_getoptbyte();
  124760:	ebffffb6 	bl	124640 <tcp_getoptbyte>
  124764:	e1a03000 	mov	r3, r0
  124768:	e54b3005 	strb	r3, [fp, #-5]
      switch (opt) {
  12476c:	e55b3005 	ldrb	r3, [fp, #-5]
  124770:	e3530001 	cmp	r3, #1
  124774:	0a00003b 	beq	124868 <tcp_parseopt+0x140>
  124778:	e3530002 	cmp	r3, #2
  12477c:	0a000002 	beq	12478c <tcp_parseopt+0x64>
  124780:	e3530000 	cmp	r3, #0
  124784:	0a000040 	beq	12488c <tcp_parseopt+0x164>
  124788:	ea000024 	b	124820 <tcp_parseopt+0xf8>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
  12478c:	ebffffab 	bl	124640 <tcp_getoptbyte>
  124790:	e1a03000 	mov	r3, r0
  124794:	e3530004 	cmp	r3, #4
  124798:	1a00003d 	bne	124894 <tcp_parseopt+0x16c>
  12479c:	e30f323c 	movw	r3, #62012	; 0xf23c
  1247a0:	e3403014 	movt	r3, #20
  1247a4:	e1d330b0 	ldrh	r3, [r3]
  1247a8:	e2832002 	add	r2, r3, #2
  1247ac:	e30f3234 	movw	r3, #62004	; 0xf234
  1247b0:	e3403014 	movt	r3, #20
  1247b4:	e1d330b0 	ldrh	r3, [r3]
  1247b8:	e1520003 	cmp	r2, r3
  1247bc:	ca000034 	bgt	124894 <tcp_parseopt+0x16c>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
  1247c0:	ebffff9e 	bl	124640 <tcp_getoptbyte>
  1247c4:	e1a03000 	mov	r3, r0
  1247c8:	e6ff3073 	uxth	r3, r3
  1247cc:	e1a03403 	lsl	r3, r3, #8
  1247d0:	e14b30b8 	strh	r3, [fp, #-8]
        mss |= tcp_getoptbyte();
  1247d4:	ebffff99 	bl	124640 <tcp_getoptbyte>
  1247d8:	e1a03000 	mov	r3, r0
  1247dc:	e6ff2073 	uxth	r2, r3
  1247e0:	e15b30b8 	ldrh	r3, [fp, #-8]
  1247e4:	e1823003 	orr	r3, r2, r3
  1247e8:	e14b30b8 	strh	r3, [fp, #-8]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
  1247ec:	e15b30b8 	ldrh	r3, [fp, #-8]
  1247f0:	e30025b4 	movw	r2, #1460	; 0x5b4
  1247f4:	e1530002 	cmp	r3, r2
  1247f8:	8a000004 	bhi	124810 <tcp_parseopt+0xe8>
  1247fc:	e15b30b8 	ldrh	r3, [fp, #-8]
  124800:	e3530000 	cmp	r3, #0
  124804:	0a000001 	beq	124810 <tcp_parseopt+0xe8>
  124808:	e15b30b8 	ldrh	r3, [fp, #-8]
  12480c:	ea000000 	b	124814 <tcp_parseopt+0xec>
  124810:	e30035b4 	movw	r3, #1460	; 0x5b4
  124814:	e51b2010 	ldr	r2, [fp, #-16]
  124818:	e1c233b6 	strh	r3, [r2, #54]	; 0x36
        break;
  12481c:	ea000011 	b	124868 <tcp_parseopt+0x140>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
  124820:	ebffff86 	bl	124640 <tcp_getoptbyte>
  124824:	e1a03000 	mov	r3, r0
  124828:	e54b3009 	strb	r3, [fp, #-9]
        if (data < 2) {
  12482c:	e55b3009 	ldrb	r3, [fp, #-9]
  124830:	e3530001 	cmp	r3, #1
  124834:	9a000018 	bls	12489c <tcp_parseopt+0x174>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
  124838:	e55b3009 	ldrb	r3, [fp, #-9]
  12483c:	e6ff2073 	uxth	r2, r3
  124840:	e30f323c 	movw	r3, #62012	; 0xf23c
  124844:	e3403014 	movt	r3, #20
  124848:	e1d330b0 	ldrh	r3, [r3]
  12484c:	e0823003 	add	r3, r2, r3
  124850:	e6ff3073 	uxth	r3, r3
  124854:	e2433002 	sub	r3, r3, #2
  124858:	e6ff2073 	uxth	r2, r3
  12485c:	e30f323c 	movw	r3, #62012	; 0xf23c
  124860:	e3403014 	movt	r3, #20
  124864:	e1c320b0 	strh	r2, [r3]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
  124868:	e30f323c 	movw	r3, #62012	; 0xf23c
  12486c:	e3403014 	movt	r3, #20
  124870:	e1d320b0 	ldrh	r2, [r3]
  124874:	e30f3234 	movw	r3, #62004	; 0xf234
  124878:	e3403014 	movt	r3, #20
  12487c:	e1d330b0 	ldrh	r3, [r3]
  124880:	e1520003 	cmp	r2, r3
  124884:	3affffb5 	bcc	124760 <tcp_parseopt+0x38>
  124888:	ea000004 	b	1248a0 <tcp_parseopt+0x178>
        return;
  12488c:	e320f000 	nop	{0}
  124890:	ea000002 	b	1248a0 <tcp_parseopt+0x178>
          return;
  124894:	e320f000 	nop	{0}
  124898:	ea000000 	b	1248a0 <tcp_parseopt+0x178>
          return;
  12489c:	e320f000 	nop	{0}
      }
    }
  }
}
  1248a0:	e24bd004 	sub	sp, fp, #4
  1248a4:	e8bd8800 	pop	{fp, pc}

001248a8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  1248a8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1248ac:	e28db000 	add	fp, sp, #0
  recv_flags |= TF_CLOSED;
  1248b0:	e30f324d 	movw	r3, #62029	; 0xf24d
  1248b4:	e3403014 	movt	r3, #20
  1248b8:	e5d33000 	ldrb	r3, [r3]
  1248bc:	e3833010 	orr	r3, r3, #16
  1248c0:	e6ef2073 	uxtb	r2, r3
  1248c4:	e30f324d 	movw	r3, #62029	; 0xf24d
  1248c8:	e3403014 	movt	r3, #20
  1248cc:	e5c32000 	strb	r2, [r3]
}
  1248d0:	e320f000 	nop	{0}
  1248d4:	e28bd000 	add	sp, fp, #0
  1248d8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1248dc:	e12fff1e 	bx	lr

001248e0 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
  1248e0:	e92d4800 	push	{fp, lr}
  1248e4:	e28db004 	add	fp, sp, #4
  1248e8:	e24dd018 	sub	sp, sp, #24
  1248ec:	e50b0010 	str	r0, [fp, #-16]
  1248f0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  1248f4:	e1a03001 	mov	r3, r1
  1248f8:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  1248fc:	e1a03002 	mov	r3, r2
  124900:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
  124904:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
  124908:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
  12490c:	e0823003 	add	r3, r2, r3
  124910:	e6ff3073 	uxth	r3, r3
  124914:	e2833014 	add	r3, r3, #20
  124918:	e6ff3073 	uxth	r3, r3
  12491c:	e3a02000 	mov	r2, #0
  124920:	e1a01003 	mov	r1, r3
  124924:	e3a00001 	mov	r0, #1
  124928:	ebffd6d4 	bl	11a480 <pbuf_alloc>
  12492c:	e50b0008 	str	r0, [fp, #-8]
  if (p != NULL) {
  124930:	e51b3008 	ldr	r3, [fp, #-8]
  124934:	e3530000 	cmp	r3, #0
  124938:	0a000052 	beq	124a88 <tcp_output_alloc_header+0x1a8>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
  12493c:	e51b3008 	ldr	r3, [fp, #-8]
  124940:	e1d330ba 	ldrh	r3, [r3, #10]
  124944:	e1a02003 	mov	r2, r3
  124948:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  12494c:	e2833014 	add	r3, r3, #20
  124950:	e1520003 	cmp	r2, r3
  124954:	aa000006 	bge	124974 <tcp_output_alloc_header+0x94>
  124958:	e30807d4 	movw	r0, #34772	; 0x87d4
  12495c:	e3400014 	movt	r0, #20
  124960:	ebff79eb 	bl	103114 <rt_kprintf>
  124964:	e3a01073 	mov	r1, #115	; 0x73
  124968:	e3080804 	movw	r0, #34820	; 0x8804
  12496c:	e3400014 	movt	r0, #20
  124970:	ebff99bb 	bl	10b064 <sys_arch_assert>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
  124974:	e51b3008 	ldr	r3, [fp, #-8]
  124978:	e5933004 	ldr	r3, [r3, #4]
  12497c:	e50b300c 	str	r3, [fp, #-12]
    tcphdr->src = lwip_htons(pcb->local_port);
  124980:	e51b3010 	ldr	r3, [fp, #-16]
  124984:	e1d331ba 	ldrh	r3, [r3, #26]
  124988:	e1a00003 	mov	r0, r3
  12498c:	ebffc78b 	bl	1167c0 <lwip_htons>
  124990:	e1a03000 	mov	r3, r0
  124994:	e1a02003 	mov	r2, r3
  124998:	e51b300c 	ldr	r3, [fp, #-12]
  12499c:	e1c320b0 	strh	r2, [r3]
    tcphdr->dest = lwip_htons(pcb->remote_port);
  1249a0:	e51b3010 	ldr	r3, [fp, #-16]
  1249a4:	e1d331bc 	ldrh	r3, [r3, #28]
  1249a8:	e1a00003 	mov	r0, r3
  1249ac:	ebffc783 	bl	1167c0 <lwip_htons>
  1249b0:	e1a03000 	mov	r3, r0
  1249b4:	e1a02003 	mov	r2, r3
  1249b8:	e51b300c 	ldr	r3, [fp, #-12]
  1249bc:	e1c320b2 	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
  1249c0:	e51b300c 	ldr	r3, [fp, #-12]
  1249c4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1249c8:	e5832004 	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
  1249cc:	e51b3010 	ldr	r3, [fp, #-16]
  1249d0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  1249d4:	e1a00003 	mov	r0, r3
  1249d8:	ebffc784 	bl	1167f0 <lwip_htonl>
  1249dc:	e1a02000 	mov	r2, r0
  1249e0:	e51b300c 	ldr	r3, [fp, #-12]
  1249e4:	e5832008 	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
  1249e8:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  1249ec:	e1a03123 	lsr	r3, r3, #2
  1249f0:	e6ff3073 	uxth	r3, r3
  1249f4:	e2833005 	add	r3, r3, #5
  1249f8:	e6ff3073 	uxth	r3, r3
  1249fc:	e1a03603 	lsl	r3, r3, #12
  124a00:	e6ff3073 	uxth	r3, r3
  124a04:	e3833010 	orr	r3, r3, #16
  124a08:	e6ff3073 	uxth	r3, r3
  124a0c:	e1a00003 	mov	r0, r3
  124a10:	ebffc76a 	bl	1167c0 <lwip_htons>
  124a14:	e1a03000 	mov	r3, r0
  124a18:	e1a02003 	mov	r2, r3
  124a1c:	e51b300c 	ldr	r3, [fp, #-12]
  124a20:	e1c320bc 	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  124a24:	e51b3010 	ldr	r3, [fp, #-16]
  124a28:	e1d332be 	ldrh	r3, [r3, #46]	; 0x2e
  124a2c:	e1a00003 	mov	r0, r3
  124a30:	ebffc762 	bl	1167c0 <lwip_htons>
  124a34:	e1a03000 	mov	r3, r0
  124a38:	e1a02003 	mov	r2, r3
  124a3c:	e51b300c 	ldr	r3, [fp, #-12]
  124a40:	e1c320be 	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
  124a44:	e51b300c 	ldr	r3, [fp, #-12]
  124a48:	e3a02000 	mov	r2, #0
  124a4c:	e5c32010 	strb	r2, [r3, #16]
  124a50:	e3a02000 	mov	r2, #0
  124a54:	e5c32011 	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
  124a58:	e51b300c 	ldr	r3, [fp, #-12]
  124a5c:	e3a02000 	mov	r2, #0
  124a60:	e5c32012 	strb	r2, [r3, #18]
  124a64:	e3a02000 	mov	r2, #0
  124a68:	e5c32013 	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
  124a6c:	e51b3010 	ldr	r3, [fp, #-16]
  124a70:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  124a74:	e51b2010 	ldr	r2, [fp, #-16]
  124a78:	e1d222be 	ldrh	r2, [r2, #46]	; 0x2e
  124a7c:	e0832002 	add	r2, r3, r2
  124a80:	e51b3010 	ldr	r3, [fp, #-16]
  124a84:	e5832030 	str	r2, [r3, #48]	; 0x30
  }
  return p;
  124a88:	e51b3008 	ldr	r3, [fp, #-8]
}
  124a8c:	e1a00003 	mov	r0, r3
  124a90:	e24bd004 	sub	sp, fp, #4
  124a94:	e8bd8800 	pop	{fp, pc}

00124a98 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
  124a98:	e92d4810 	push	{r4, fp, lr}
  124a9c:	e28db008 	add	fp, sp, #8
  124aa0:	e24dd014 	sub	sp, sp, #20
  124aa4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
  124aa8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124aac:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  124ab0:	e3530000 	cmp	r3, #0
  124ab4:	0a000029 	beq	124b60 <tcp_send_fin+0xc8>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
  124ab8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124abc:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  124ac0:	e50b3010 	str	r3, [fp, #-16]
  124ac4:	ea000002 	b	124ad4 <tcp_send_fin+0x3c>
         last_unsent = last_unsent->next);
  124ac8:	e51b3010 	ldr	r3, [fp, #-16]
  124acc:	e5933000 	ldr	r3, [r3]
  124ad0:	e50b3010 	str	r3, [fp, #-16]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
  124ad4:	e51b3010 	ldr	r3, [fp, #-16]
  124ad8:	e5933000 	ldr	r3, [r3]
  124adc:	e3530000 	cmp	r3, #0
  124ae0:	1afffff8 	bne	124ac8 <tcp_send_fin+0x30>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
  124ae4:	e51b3010 	ldr	r3, [fp, #-16]
  124ae8:	e593300c 	ldr	r3, [r3, #12]
  124aec:	e1d330bc 	ldrh	r3, [r3, #12]
  124af0:	e6ff3073 	uxth	r3, r3
  124af4:	e1a00003 	mov	r0, r3
  124af8:	ebffc730 	bl	1167c0 <lwip_htons>
  124afc:	e1a03000 	mov	r3, r0
  124b00:	e2033007 	and	r3, r3, #7
  124b04:	e3530000 	cmp	r3, #0
  124b08:	1a000014 	bne	124b60 <tcp_send_fin+0xc8>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
  124b0c:	e51b3010 	ldr	r3, [fp, #-16]
  124b10:	e593300c 	ldr	r3, [r3, #12]
  124b14:	e1d330bc 	ldrh	r3, [r3, #12]
  124b18:	e6ff4073 	uxth	r4, r3
  124b1c:	e3a00001 	mov	r0, #1
  124b20:	ebffc726 	bl	1167c0 <lwip_htons>
  124b24:	e1a03000 	mov	r3, r0
  124b28:	e1a02003 	mov	r2, r3
  124b2c:	e51b3010 	ldr	r3, [fp, #-16]
  124b30:	e593300c 	ldr	r3, [r3, #12]
  124b34:	e1842002 	orr	r2, r4, r2
  124b38:	e6ff2072 	uxth	r2, r2
  124b3c:	e1c320bc 	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
  124b40:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124b44:	e5d3301e 	ldrb	r3, [r3, #30]
  124b48:	e3833020 	orr	r3, r3, #32
  124b4c:	e6ef2073 	uxtb	r2, r3
  124b50:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124b54:	e5c3201e 	strb	r2, [r3, #30]
      return ERR_OK;
  124b58:	e3a03000 	mov	r3, #0
  124b5c:	ea000003 	b	124b70 <tcp_send_fin+0xd8>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
  124b60:	e3a01001 	mov	r1, #1
  124b64:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  124b68:	eb000426 	bl	125c08 <tcp_enqueue_flags>
  124b6c:	e1a03000 	mov	r3, r0
}
  124b70:	e1a00003 	mov	r0, r3
  124b74:	e24bd008 	sub	sp, fp, #8
  124b78:	e8bd8810 	pop	{r4, fp, pc}

00124b7c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
  124b7c:	e92d4810 	push	{r4, fp, lr}
  124b80:	e28db008 	add	fp, sp, #8
  124b84:	e24dd01c 	sub	sp, sp, #28
  124b88:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  124b8c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  124b90:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  124b94:	e1a03002 	mov	r3, r2
  124b98:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
  124b9c:	e5db3004 	ldrb	r3, [fp, #4]
  124ba0:	e1a03103 	lsl	r3, r3, #2
  124ba4:	e6ef3073 	uxtb	r3, r3
  124ba8:	e2033004 	and	r3, r3, #4
  124bac:	e54b300d 	strb	r3, [fp, #-13]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
  124bb0:	e3a020b2 	mov	r2, #178	; 0xb2
  124bb4:	e3081804 	movw	r1, #34820	; 0x8804
  124bb8:	e3401014 	movt	r1, #20
  124bbc:	e3a00004 	mov	r0, #4
  124bc0:	ebffd1bf 	bl	1192c4 <memp_malloc_fn>
  124bc4:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  124bc8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124bcc:	e3530000 	cmp	r3, #0
  124bd0:	1a000003 	bne	124be4 <tcp_create_segment+0x68>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
  124bd4:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  124bd8:	ebffd92f 	bl	11b09c <pbuf_free>
    return NULL;
  124bdc:	e3a03000 	mov	r3, #0
  124be0:	ea000063 	b	124d74 <tcp_create_segment+0x1f8>
  }
  seg->flags = optflags;
  124be4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124be8:	e5db2004 	ldrb	r2, [fp, #4]
  124bec:	e5c3200a 	strb	r2, [r3, #10]
  seg->next = NULL;
  124bf0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124bf4:	e3a02000 	mov	r2, #0
  124bf8:	e5832000 	str	r2, [r3]
  seg->p = p;
  124bfc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124c00:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  124c04:	e5832004 	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
  124c08:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  124c0c:	e1d320b8 	ldrh	r2, [r3, #8]
  124c10:	e55b300d 	ldrb	r3, [fp, #-13]
  124c14:	e6ff3073 	uxth	r3, r3
  124c18:	e1520003 	cmp	r2, r3
  124c1c:	2a000006 	bcs	124c3c <tcp_create_segment+0xc0>
  124c20:	e3080834 	movw	r0, #34868	; 0x8834
  124c24:	e3400014 	movt	r0, #20
  124c28:	ebff7939 	bl	103114 <rt_kprintf>
  124c2c:	e3a010ba 	mov	r1, #186	; 0xba
  124c30:	e3080804 	movw	r0, #34820	; 0x8804
  124c34:	e3400014 	movt	r0, #20
  124c38:	ebff9909 	bl	10b064 <sys_arch_assert>
  seg->len = p->tot_len - optlen;
  124c3c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  124c40:	e1d320b8 	ldrh	r2, [r3, #8]
  124c44:	e55b300d 	ldrb	r3, [fp, #-13]
  124c48:	e6ff3073 	uxth	r3, r3
  124c4c:	e0423003 	sub	r3, r2, r3
  124c50:	e6ff2073 	uxth	r2, r3
  124c54:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124c58:	e1c320b8 	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
  124c5c:	e3a01014 	mov	r1, #20
  124c60:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  124c64:	ebffd8ee 	bl	11b024 <pbuf_header>
  124c68:	e1a03000 	mov	r3, r0
  124c6c:	e3530000 	cmp	r3, #0
  124c70:	0a00000b 	beq	124ca4 <tcp_create_segment+0x128>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
  124c74:	e3063840 	movw	r3, #26688	; 0x6840
  124c78:	e3403057 	movt	r3, #87	; 0x57
  124c7c:	e1d33cb0 	ldrh	r3, [r3, #192]	; 0xc0
  124c80:	e2833001 	add	r3, r3, #1
  124c84:	e6ff2073 	uxth	r2, r3
  124c88:	e3063840 	movw	r3, #26688	; 0x6840
  124c8c:	e3403057 	movt	r3, #87	; 0x57
  124c90:	e1c32cb0 	strh	r2, [r3, #192]	; 0xc0
    tcp_seg_free(seg);
  124c94:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  124c98:	ebffea71 	bl	11f664 <tcp_seg_free>
    return NULL;
  124c9c:	e3a03000 	mov	r3, #0
  124ca0:	ea000033 	b	124d74 <tcp_create_segment+0x1f8>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
  124ca4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124ca8:	e5933004 	ldr	r3, [r3, #4]
  124cac:	e5932004 	ldr	r2, [r3, #4]
  124cb0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124cb4:	e583200c 	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
  124cb8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124cbc:	e1d321ba 	ldrh	r2, [r3, #26]
  124cc0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124cc4:	e593400c 	ldr	r4, [r3, #12]
  124cc8:	e1a00002 	mov	r0, r2
  124ccc:	ebffc6bb 	bl	1167c0 <lwip_htons>
  124cd0:	e1a03000 	mov	r3, r0
  124cd4:	e1c430b0 	strh	r3, [r4]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
  124cd8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124cdc:	e1d321bc 	ldrh	r2, [r3, #28]
  124ce0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124ce4:	e593400c 	ldr	r4, [r3, #12]
  124ce8:	e1a00002 	mov	r0, r2
  124cec:	ebffc6b3 	bl	1167c0 <lwip_htons>
  124cf0:	e1a03000 	mov	r3, r0
  124cf4:	e1c430b2 	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
  124cf8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124cfc:	e593400c 	ldr	r4, [r3, #12]
  124d00:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  124d04:	ebffc6b9 	bl	1167f0 <lwip_htonl>
  124d08:	e1a03000 	mov	r3, r0
  124d0c:	e5843004 	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
  124d10:	e55b300d 	ldrb	r3, [fp, #-13]
  124d14:	e1a03123 	lsr	r3, r3, #2
  124d18:	e6ef3073 	uxtb	r3, r3
  124d1c:	e6ff3073 	uxth	r3, r3
  124d20:	e2833005 	add	r3, r3, #5
  124d24:	e6ff3073 	uxth	r3, r3
  124d28:	e1a03603 	lsl	r3, r3, #12
  124d2c:	e6ff2073 	uxth	r2, r3
  124d30:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  124d34:	e6ff3073 	uxth	r3, r3
  124d38:	e1823003 	orr	r3, r2, r3
  124d3c:	e6ff2073 	uxth	r2, r3
  124d40:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124d44:	e593400c 	ldr	r4, [r3, #12]
  124d48:	e1a00002 	mov	r0, r2
  124d4c:	ebffc69b 	bl	1167c0 <lwip_htons>
  124d50:	e1a03000 	mov	r3, r0
  124d54:	e1c430bc 	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
  124d58:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  124d5c:	e593300c 	ldr	r3, [r3, #12]
  124d60:	e3a02000 	mov	r2, #0
  124d64:	e5c32012 	strb	r2, [r3, #18]
  124d68:	e3a02000 	mov	r2, #0
  124d6c:	e5c32013 	strb	r2, [r3, #19]
  return seg;
  124d70:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
}
  124d74:	e1a00003 	mov	r0, r3
  124d78:	e24bd008 	sub	sp, fp, #8
  124d7c:	e8bd8810 	pop	{r4, fp, pc}

00124d80 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
  124d80:	e92d4800 	push	{fp, lr}
  124d84:	e28db004 	add	fp, sp, #4
  124d88:	e24dd018 	sub	sp, sp, #24
  124d8c:	e50b0010 	str	r0, [fp, #-16]
  124d90:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  124d94:	e1a03001 	mov	r3, r1
  124d98:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  124d9c:	e1a03002 	mov	r3, r2
  124da0:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
  struct pbuf *p;
  u16_t alloc = length;
  124da4:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  124da8:	e14b30b6 	strh	r3, [fp, #-6]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
  124dac:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
  124db0:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
  124db4:	e1520003 	cmp	r2, r3
  124db8:	2a00001c 	bcs	124e30 <tcp_pbuf_prealloc+0xb0>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
  124dbc:	e5db3008 	ldrb	r3, [fp, #8]
  124dc0:	e2033002 	and	r3, r3, #2
  124dc4:	e3530000 	cmp	r3, #0
  124dc8:	1a00000f 	bne	124e0c <tcp_pbuf_prealloc+0x8c>
        (!(pcb->flags & TF_NODELAY) &&
  124dcc:	e59b3004 	ldr	r3, [fp, #4]
  124dd0:	e5d3301e 	ldrb	r3, [r3, #30]
  124dd4:	e2033040 	and	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
  124dd8:	e3530000 	cmp	r3, #0
  124ddc:	1a000013 	bne	124e30 <tcp_pbuf_prealloc+0xb0>
        (!(pcb->flags & TF_NODELAY) &&
  124de0:	e5db300c 	ldrb	r3, [fp, #12]
  124de4:	e3530000 	cmp	r3, #0
  124de8:	0a000007 	beq	124e0c <tcp_pbuf_prealloc+0x8c>
         (!first_seg ||
          pcb->unsent != NULL ||
  124dec:	e59b3004 	ldr	r3, [fp, #4]
  124df0:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
  124df4:	e3530000 	cmp	r3, #0
  124df8:	1a000003 	bne	124e0c <tcp_pbuf_prealloc+0x8c>
          pcb->unacked != NULL))) {
  124dfc:	e59b3004 	ldr	r3, [fp, #4]
  124e00:	e5933070 	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
  124e04:	e3530000 	cmp	r3, #0
  124e08:	0a000008 	beq	124e30 <tcp_pbuf_prealloc+0xb0>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
  124e0c:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  124e10:	e2833e5b 	add	r3, r3, #1456	; 0x5b0
  124e14:	e2833007 	add	r3, r3, #7
  124e18:	e3c32003 	bic	r2, r3, #3
  124e1c:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
  124e20:	e1520003 	cmp	r2, r3
  124e24:	31a03002 	movcc	r3, r2
  124e28:	21a03003 	movcs	r3, r3
  124e2c:	e14b30b6 	strh	r3, [fp, #-6]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
  124e30:	e15b30b6 	ldrh	r3, [fp, #-6]
  124e34:	e3a02000 	mov	r2, #0
  124e38:	e1a01003 	mov	r1, r3
  124e3c:	e51b0010 	ldr	r0, [fp, #-16]
  124e40:	ebffd58e 	bl	11a480 <pbuf_alloc>
  124e44:	e50b000c 	str	r0, [fp, #-12]
  if (p == NULL) {
  124e48:	e51b300c 	ldr	r3, [fp, #-12]
  124e4c:	e3530000 	cmp	r3, #0
  124e50:	1a000001 	bne	124e5c <tcp_pbuf_prealloc+0xdc>
    return NULL;
  124e54:	e3a03000 	mov	r3, #0
  124e58:	ea000019 	b	124ec4 <tcp_pbuf_prealloc+0x144>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
  124e5c:	e51b300c 	ldr	r3, [fp, #-12]
  124e60:	e5933000 	ldr	r3, [r3]
  124e64:	e3530000 	cmp	r3, #0
  124e68:	0a000006 	beq	124e88 <tcp_pbuf_prealloc+0x108>
  124e6c:	e308084c 	movw	r0, #34892	; 0x884c
  124e70:	e3400014 	movt	r0, #20
  124e74:	ebff78a6 	bl	103114 <rt_kprintf>
  124e78:	e3a01e11 	mov	r1, #272	; 0x110
  124e7c:	e3080804 	movw	r0, #34820	; 0x8804
  124e80:	e3400014 	movt	r0, #20
  124e84:	ebff9876 	bl	10b064 <sys_arch_assert>
  *oversize = p->len - length;
  124e88:	e51b300c 	ldr	r3, [fp, #-12]
  124e8c:	e1d320ba 	ldrh	r2, [r3, #10]
  124e90:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  124e94:	e0423003 	sub	r3, r2, r3
  124e98:	e6ff2073 	uxth	r2, r3
  124e9c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  124ea0:	e1c320b0 	strh	r2, [r3]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
  124ea4:	e51b300c 	ldr	r3, [fp, #-12]
  124ea8:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
  124eac:	e1c320b8 	strh	r2, [r3, #8]
  124eb0:	e51b300c 	ldr	r3, [fp, #-12]
  124eb4:	e1d320b8 	ldrh	r2, [r3, #8]
  124eb8:	e51b300c 	ldr	r3, [fp, #-12]
  124ebc:	e1c320ba 	strh	r2, [r3, #10]
  return p;
  124ec0:	e51b300c 	ldr	r3, [fp, #-12]
}
  124ec4:	e1a00003 	mov	r0, r3
  124ec8:	e24bd004 	sub	sp, fp, #4
  124ecc:	e8bd8800 	pop	{fp, pc}

00124ed0 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
  124ed0:	e92d4800 	push	{fp, lr}
  124ed4:	e28db004 	add	fp, sp, #4
  124ed8:	e24dd008 	sub	sp, sp, #8
  124edc:	e50b0008 	str	r0, [fp, #-8]
  124ee0:	e1a03001 	mov	r3, r1
  124ee4:	e14b30ba 	strh	r3, [fp, #-10]
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
  124ee8:	e51b3008 	ldr	r3, [fp, #-8]
  124eec:	e5933014 	ldr	r3, [r3, #20]
  124ef0:	e3530004 	cmp	r3, #4
  124ef4:	0a00000d 	beq	124f30 <tcp_write_checks+0x60>
      (pcb->state != CLOSE_WAIT) &&
  124ef8:	e51b3008 	ldr	r3, [fp, #-8]
  124efc:	e5933014 	ldr	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
  124f00:	e3530007 	cmp	r3, #7
  124f04:	0a000009 	beq	124f30 <tcp_write_checks+0x60>
      (pcb->state != SYN_SENT) &&
  124f08:	e51b3008 	ldr	r3, [fp, #-8]
  124f0c:	e5933014 	ldr	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
  124f10:	e3530002 	cmp	r3, #2
  124f14:	0a000005 	beq	124f30 <tcp_write_checks+0x60>
      (pcb->state != SYN_RCVD)) {
  124f18:	e51b3008 	ldr	r3, [fp, #-8]
  124f1c:	e5933014 	ldr	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
  124f20:	e3530003 	cmp	r3, #3
  124f24:	0a000001 	beq	124f30 <tcp_write_checks+0x60>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
  124f28:	e3e0300a 	mvn	r3, #10
  124f2c:	ea000050 	b	125074 <tcp_write_checks+0x1a4>
  } else if (len == 0) {
  124f30:	e15b30ba 	ldrh	r3, [fp, #-10]
  124f34:	e3530000 	cmp	r3, #0
  124f38:	1a000001 	bne	124f44 <tcp_write_checks+0x74>
    return ERR_OK;
  124f3c:	e3a03000 	mov	r3, #0
  124f40:	ea00004b 	b	125074 <tcp_write_checks+0x1a4>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
  124f44:	e51b3008 	ldr	r3, [fp, #-8]
  124f48:	e1d336b4 	ldrh	r3, [r3, #100]	; 0x64
  124f4c:	e15b20ba 	ldrh	r2, [fp, #-10]
  124f50:	e1520003 	cmp	r2, r3
  124f54:	9a000008 	bls	124f7c <tcp_write_checks+0xac>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
  124f58:	e51b3008 	ldr	r3, [fp, #-8]
  124f5c:	e5d3301e 	ldrb	r3, [r3, #30]
  124f60:	e1e03c83 	mvn	r3, r3, lsl #25
  124f64:	e1e03ca3 	mvn	r3, r3, lsr #25
  124f68:	e6ef2073 	uxtb	r2, r3
  124f6c:	e51b3008 	ldr	r3, [fp, #-8]
  124f70:	e5c3201e 	strb	r2, [r3, #30]
    return ERR_MEM;
  124f74:	e3e03000 	mvn	r3, #0
  124f78:	ea00003d 	b	125074 <tcp_write_checks+0x1a4>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
  124f7c:	e51b3008 	ldr	r3, [fp, #-8]
  124f80:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  124f84:	e3530015 	cmp	r3, #21
  124f88:	8a000004 	bhi	124fa0 <tcp_write_checks+0xd0>
  124f8c:	e51b3008 	ldr	r3, [fp, #-8]
  124f90:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  124f94:	e30f2ffc 	movw	r2, #65532	; 0xfffc
  124f98:	e1530002 	cmp	r3, r2
  124f9c:	9a000010 	bls	124fe4 <tcp_write_checks+0x114>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
      pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
  124fa0:	e3063840 	movw	r3, #26688	; 0x6840
  124fa4:	e3403057 	movt	r3, #87	; 0x57
  124fa8:	e1d33bb8 	ldrh	r3, [r3, #184]	; 0xb8
  124fac:	e2833001 	add	r3, r3, #1
  124fb0:	e6ff2073 	uxth	r2, r3
  124fb4:	e3063840 	movw	r3, #26688	; 0x6840
  124fb8:	e3403057 	movt	r3, #87	; 0x57
  124fbc:	e1c32bb8 	strh	r2, [r3, #184]	; 0xb8
    pcb->flags |= TF_NAGLEMEMERR;
  124fc0:	e51b3008 	ldr	r3, [fp, #-8]
  124fc4:	e5d3301e 	ldrb	r3, [r3, #30]
  124fc8:	e1e03c83 	mvn	r3, r3, lsl #25
  124fcc:	e1e03ca3 	mvn	r3, r3, lsr #25
  124fd0:	e6ef2073 	uxtb	r2, r3
  124fd4:	e51b3008 	ldr	r3, [fp, #-8]
  124fd8:	e5c3201e 	strb	r2, [r3, #30]
    return ERR_MEM;
  124fdc:	e3e03000 	mvn	r3, #0
  124fe0:	ea000023 	b	125074 <tcp_write_checks+0x1a4>
  }
  if (pcb->snd_queuelen != 0) {
  124fe4:	e51b3008 	ldr	r3, [fp, #-8]
  124fe8:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  124fec:	e3530000 	cmp	r3, #0
  124ff0:	0a00000f 	beq	125034 <tcp_write_checks+0x164>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
  124ff4:	e51b3008 	ldr	r3, [fp, #-8]
  124ff8:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  124ffc:	e3530000 	cmp	r3, #0
  125000:	1a00001a 	bne	125070 <tcp_write_checks+0x1a0>
  125004:	e51b3008 	ldr	r3, [fp, #-8]
  125008:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  12500c:	e3530000 	cmp	r3, #0
  125010:	1a000016 	bne	125070 <tcp_write_checks+0x1a0>
  125014:	e3080860 	movw	r0, #34912	; 0x8860
  125018:	e3400014 	movt	r0, #20
  12501c:	ebff783c 	bl	103114 <rt_kprintf>
  125020:	e3001156 	movw	r1, #342	; 0x156
  125024:	e3080804 	movw	r0, #34820	; 0x8804
  125028:	e3400014 	movt	r0, #20
  12502c:	ebff980c 	bl	10b064 <sys_arch_assert>
  125030:	ea00000e 	b	125070 <tcp_write_checks+0x1a0>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
  125034:	e51b3008 	ldr	r3, [fp, #-8]
  125038:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  12503c:	e3530000 	cmp	r3, #0
  125040:	1a000003 	bne	125054 <tcp_write_checks+0x184>
  125044:	e51b3008 	ldr	r3, [fp, #-8]
  125048:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  12504c:	e3530000 	cmp	r3, #0
  125050:	0a000006 	beq	125070 <tcp_write_checks+0x1a0>
  125054:	e308089c 	movw	r0, #34972	; 0x889c
  125058:	e3400014 	movt	r0, #20
  12505c:	ebff782c 	bl	103114 <rt_kprintf>
  125060:	e3001159 	movw	r1, #345	; 0x159
  125064:	e3080804 	movw	r0, #34820	; 0x8804
  125068:	e3400014 	movt	r0, #20
  12506c:	ebff97fc 	bl	10b064 <sys_arch_assert>
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
  125070:	e3a03000 	mov	r3, #0
}
  125074:	e1a00003 	mov	r0, r3
  125078:	e24bd004 	sub	sp, fp, #4
  12507c:	e8bd8800 	pop	{fp, pc}

00125080 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
  125080:	e92d4810 	push	{r4, fp, lr}
  125084:	e28db008 	add	fp, sp, #8
  125088:	e24dd06c 	sub	sp, sp, #108	; 0x6c
  12508c:	e50b0058 	str	r0, [fp, #-88]	; 0xffffffa8
  125090:	e50b105c 	str	r1, [fp, #-92]	; 0xffffffa4
  125094:	e1a01002 	mov	r1, r2
  125098:	e1a02003 	mov	r2, r3
  12509c:	e1a03001 	mov	r3, r1
  1250a0:	e14b35be 	strh	r3, [fp, #-94]	; 0xffffffa2
  1250a4:	e1a03002 	mov	r3, r2
  1250a8:	e54b305f 	strb	r3, [fp, #-95]	; 0xffffffa1
  struct pbuf *concat_p = NULL;
  1250ac:	e3a03000 	mov	r3, #0
  1250b0:	e50b3010 	str	r3, [fp, #-16]
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
  1250b4:	e3a03000 	mov	r3, #0
  1250b8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  1250bc:	e3a03000 	mov	r3, #0
  1250c0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  1250c4:	e3a03000 	mov	r3, #0
  1250c8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  1250cc:	e3a03000 	mov	r3, #0
  1250d0:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  u16_t pos = 0; /* position in 'arg' data */
  1250d4:	e3a03000 	mov	r3, #0
  1250d8:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
  u16_t queuelen;
  u8_t optlen = 0;
  1250dc:	e3a03000 	mov	r3, #0
  1250e0:	e54b303d 	strb	r3, [fp, #-61]	; 0xffffffc3
  u8_t optflags = 0;
  1250e4:	e3a03000 	mov	r3, #0
  1250e8:	e54b303e 	strb	r3, [fp, #-62]	; 0xffffffc2
#if TCP_OVERSIZE
  u16_t oversize = 0;
  1250ec:	e3a03000 	mov	r3, #0
  1250f0:	e14b35b2 	strh	r3, [fp, #-82]	; 0xffffffae
  u16_t oversize_used = 0;
  1250f4:	e3a03000 	mov	r3, #0
  1250f8:	e14b32b6 	strh	r3, [fp, #-38]	; 0xffffffda
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
  1250fc:	e3a03000 	mov	r3, #0
  125100:	e14b32b8 	strh	r3, [fp, #-40]	; 0xffffffd8
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
  125104:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125108:	e1d336b2 	ldrh	r3, [r3, #98]	; 0x62
  12510c:	e1a030a3 	lsr	r3, r3, #1
  125110:	e6ff2073 	uxth	r2, r3
  125114:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125118:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  12511c:	e1520003 	cmp	r2, r3
  125120:	31a03002 	movcc	r3, r2
  125124:	21a03003 	movcs	r3, r3
  125128:	e14b34b0 	strh	r3, [fp, #-64]	; 0xffffffc0
  mss_local = mss_local ? mss_local : pcb->mss;
  12512c:	e15b34b0 	ldrh	r3, [fp, #-64]	; 0xffffffc0
  125130:	e3530000 	cmp	r3, #0
  125134:	1a000002 	bne	125144 <tcp_write+0xc4>
  125138:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  12513c:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  125140:	ea000000 	b	125148 <tcp_write+0xc8>
  125144:	e15b34b0 	ldrh	r3, [fp, #-64]	; 0xffffffc0
  125148:	e14b34b0 	strh	r3, [fp, #-64]	; 0xffffffc0
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
  12514c:	e51b305c 	ldr	r3, [fp, #-92]	; 0xffffffa4
  125150:	e3530000 	cmp	r3, #0
  125154:	1a000008 	bne	12517c <tcp_write+0xfc>
  125158:	e30808d0 	movw	r0, #35024	; 0x88d0
  12515c:	e3400014 	movt	r0, #20
  125160:	ebff77eb 	bl	103114 <rt_kprintf>
  125164:	e3001192 	movw	r1, #402	; 0x192
  125168:	e3080804 	movw	r0, #34820	; 0x8804
  12516c:	e3400014 	movt	r0, #20
  125170:	ebff97bb 	bl	10b064 <sys_arch_assert>
  125174:	e3e0300f 	mvn	r3, #15
  125178:	ea00029f 	b	125bfc <tcp_write+0xb7c>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
  12517c:	e15b35be 	ldrh	r3, [fp, #-94]	; 0xffffffa2
  125180:	e1a01003 	mov	r1, r3
  125184:	e51b0058 	ldr	r0, [fp, #-88]	; 0xffffffa8
  125188:	ebffff50 	bl	124ed0 <tcp_write_checks>
  12518c:	e1a03000 	mov	r3, r0
  125190:	e54b3041 	strb	r3, [fp, #-65]	; 0xffffffbf
  if (err != ERR_OK) {
  125194:	e15b34d1 	ldrsb	r3, [fp, #-65]	; 0xffffffbf
  125198:	e3530000 	cmp	r3, #0
  12519c:	0a000001 	beq	1251a8 <tcp_write+0x128>
    return err;
  1251a0:	e15b34d1 	ldrsb	r3, [fp, #-65]	; 0xffffffbf
  1251a4:	ea000294 	b	125bfc <tcp_write+0xb7c>
  }
  queuelen = pcb->snd_queuelen;
  1251a8:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  1251ac:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  1251b0:	e14b32b4 	strh	r3, [fp, #-36]	; 0xffffffdc
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
  1251b4:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  1251b8:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  1251bc:	e3530000 	cmp	r3, #0
  1251c0:	0a0000d8 	beq	125528 <tcp_write+0x4a8>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
  1251c4:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  1251c8:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  1251cc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  1251d0:	ea000002 	b	1251e0 <tcp_write+0x160>
         last_unsent = last_unsent->next);
  1251d4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1251d8:	e5933000 	ldr	r3, [r3]
  1251dc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
  1251e0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1251e4:	e5933000 	ldr	r3, [r3]
  1251e8:	e3530000 	cmp	r3, #0
  1251ec:	1afffff8 	bne	1251d4 <tcp_write+0x154>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
  1251f0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1251f4:	e5d3300a 	ldrb	r3, [r3, #10]
  1251f8:	e1a03103 	lsl	r3, r3, #2
  1251fc:	e6ff3073 	uxth	r3, r3
  125200:	e2033004 	and	r3, r3, #4
  125204:	e14b34b4 	strh	r3, [fp, #-68]	; 0xffffffbc
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
  125208:	e15b24b0 	ldrh	r2, [fp, #-64]	; 0xffffffc0
  12520c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125210:	e1d330b8 	ldrh	r3, [r3, #8]
  125214:	e1a01003 	mov	r1, r3
  125218:	e15b34b4 	ldrh	r3, [fp, #-68]	; 0xffffffbc
  12521c:	e0813003 	add	r3, r1, r3
  125220:	e1520003 	cmp	r2, r3
  125224:	aa000006 	bge	125244 <tcp_write+0x1c4>
  125228:	e3080904 	movw	r0, #35076	; 0x8904
  12522c:	e3400014 	movt	r0, #20
  125230:	ebff77b7 	bl	103114 <rt_kprintf>
  125234:	e30011c7 	movw	r1, #455	; 0x1c7
  125238:	e3080804 	movw	r0, #34820	; 0x8804
  12523c:	e3400014 	movt	r0, #20
  125240:	ebff9787 	bl	10b064 <sys_arch_assert>
    space = mss_local - (last_unsent->len + unsent_optlen);
  125244:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125248:	e1d320b8 	ldrh	r2, [r3, #8]
  12524c:	e15b34b4 	ldrh	r3, [fp, #-68]	; 0xffffffbc
  125250:	e0823003 	add	r3, r2, r3
  125254:	e6ff3073 	uxth	r3, r3
  125258:	e15b24b0 	ldrh	r2, [fp, #-64]	; 0xffffffc0
  12525c:	e0423003 	sub	r3, r2, r3
  125260:	e14b32ba 	strh	r3, [fp, #-42]	; 0xffffffd6
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
  125264:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125268:	e1d336b8 	ldrh	r3, [r3, #104]	; 0x68
  12526c:	e14b35b2 	strh	r3, [fp, #-82]	; 0xffffffae
    if (oversize > 0) {
  125270:	e15b35b2 	ldrh	r3, [fp, #-82]	; 0xffffffae
  125274:	e3530000 	cmp	r3, #0
  125278:	0a000025 	beq	125314 <tcp_write+0x294>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
  12527c:	e15b35b2 	ldrh	r3, [fp, #-82]	; 0xffffffae
  125280:	e15b22ba 	ldrh	r2, [fp, #-42]	; 0xffffffd6
  125284:	e1520003 	cmp	r2, r3
  125288:	2a000006 	bcs	1252a8 <tcp_write+0x228>
  12528c:	e308091c 	movw	r0, #35100	; 0x891c
  125290:	e3400014 	movt	r0, #20
  125294:	ebff779e 	bl	103114 <rt_kprintf>
  125298:	e30011d9 	movw	r1, #473	; 0x1d9
  12529c:	e3080804 	movw	r0, #34820	; 0x8804
  1252a0:	e3400014 	movt	r0, #20
  1252a4:	ebff976e 	bl	10b064 <sys_arch_assert>
      seg = last_unsent;
  1252a8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1252ac:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
  1252b0:	e15b35b2 	ldrh	r3, [fp, #-82]	; 0xffffffae
  1252b4:	e15b25be 	ldrh	r2, [fp, #-94]	; 0xffffffa2
  1252b8:	e1520003 	cmp	r2, r3
  1252bc:	9a000001 	bls	1252c8 <tcp_write+0x248>
  1252c0:	e15b35b2 	ldrh	r3, [fp, #-82]	; 0xffffffae
  1252c4:	ea000000 	b	1252cc <tcp_write+0x24c>
  1252c8:	e15b35be 	ldrh	r3, [fp, #-94]	; 0xffffffa2
  1252cc:	e15b22ba 	ldrh	r2, [fp, #-42]	; 0xffffffd6
  1252d0:	e1530002 	cmp	r3, r2
  1252d4:	b1a03003 	movlt	r3, r3
  1252d8:	a1a03002 	movge	r3, r2
  1252dc:	e14b32b6 	strh	r3, [fp, #-38]	; 0xffffffda
      pos += oversize_used;
  1252e0:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  1252e4:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
  1252e8:	e0823003 	add	r3, r2, r3
  1252ec:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
      oversize -= oversize_used;
  1252f0:	e15b25b2 	ldrh	r2, [fp, #-82]	; 0xffffffae
  1252f4:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
  1252f8:	e0423003 	sub	r3, r2, r3
  1252fc:	e6ff3073 	uxth	r3, r3
  125300:	e14b35b2 	strh	r3, [fp, #-82]	; 0xffffffae
      space -= oversize_used;
  125304:	e15b22ba 	ldrh	r2, [fp, #-42]	; 0xffffffd6
  125308:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
  12530c:	e0423003 	sub	r3, r2, r3
  125310:	e14b32ba 	strh	r3, [fp, #-42]	; 0xffffffd6
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
  125314:	e15b35b2 	ldrh	r3, [fp, #-82]	; 0xffffffae
  125318:	e3530000 	cmp	r3, #0
  12531c:	0a00000a 	beq	12534c <tcp_write+0x2cc>
  125320:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  125324:	e15b35be 	ldrh	r3, [fp, #-94]	; 0xffffffa2
  125328:	e1520003 	cmp	r2, r3
  12532c:	0a000006 	beq	12534c <tcp_write+0x2cc>
  125330:	e308093c 	movw	r0, #35132	; 0x893c
  125334:	e3400014 	movt	r0, #20
  125338:	ebff7775 	bl	103114 <rt_kprintf>
  12533c:	e30011e1 	movw	r1, #481	; 0x1e1
  125340:	e3080804 	movw	r0, #34820	; 0x8804
  125344:	e3400014 	movt	r0, #20
  125348:	ebff9745 	bl	10b064 <sys_arch_assert>
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
  12534c:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  125350:	e15b35be 	ldrh	r3, [fp, #-94]	; 0xffffffa2
  125354:	e1520003 	cmp	r2, r3
  125358:	2a000121 	bcs	1257e4 <tcp_write+0x764>
  12535c:	e15b32ba 	ldrh	r3, [fp, #-42]	; 0xffffffd6
  125360:	e3530000 	cmp	r3, #0
  125364:	0a00011e 	beq	1257e4 <tcp_write+0x764>
  125368:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12536c:	e1d330b8 	ldrh	r3, [r3, #8]
  125370:	e3530000 	cmp	r3, #0
  125374:	0a00011a 	beq	1257e4 <tcp_write+0x764>
      u16_t seglen = LWIP_MIN(space, len - pos);
  125378:	e15b25be 	ldrh	r2, [fp, #-94]	; 0xffffffa2
  12537c:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  125380:	e0422003 	sub	r2, r2, r3
  125384:	e15b32ba 	ldrh	r3, [fp, #-42]	; 0xffffffd6
  125388:	e1520003 	cmp	r2, r3
  12538c:	b1a03002 	movlt	r3, r2
  125390:	a1a03003 	movge	r3, r3
  125394:	e14b34b6 	strh	r3, [fp, #-70]	; 0xffffffba
      seg = last_unsent;
  125398:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12539c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
  1253a0:	e55b305f 	ldrb	r3, [fp, #-95]	; 0xffffffa1
  1253a4:	e2033001 	and	r3, r3, #1
  1253a8:	e3530000 	cmp	r3, #0
  1253ac:	0a00001f 	beq	125430 <tcp_write+0x3b0>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
  1253b0:	e24b0052 	sub	r0, fp, #82	; 0x52
  1253b4:	e15b22ba 	ldrh	r2, [fp, #-42]	; 0xffffffd6
  1253b8:	e15b14b6 	ldrh	r1, [fp, #-70]	; 0xffffffba
  1253bc:	e3a03001 	mov	r3, #1
  1253c0:	e58d3008 	str	r3, [sp, #8]
  1253c4:	e55b305f 	ldrb	r3, [fp, #-95]	; 0xffffffa1
  1253c8:	e58d3004 	str	r3, [sp, #4]
  1253cc:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  1253d0:	e58d3000 	str	r3, [sp]
  1253d4:	e1a03000 	mov	r3, r0
  1253d8:	e3a00004 	mov	r0, #4
  1253dc:	ebfffe67 	bl	124d80 <tcp_pbuf_prealloc>
  1253e0:	e50b0010 	str	r0, [fp, #-16]
  1253e4:	e51b3010 	ldr	r3, [fp, #-16]
  1253e8:	e3530000 	cmp	r3, #0
  1253ec:	0a0001cc 	beq	125b24 <tcp_write+0xaa4>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
  1253f0:	e51b3010 	ldr	r3, [fp, #-16]
  1253f4:	e5930004 	ldr	r0, [r3, #4]
  1253f8:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  1253fc:	e51b205c 	ldr	r2, [fp, #-92]	; 0xffffffa4
  125400:	e0823003 	add	r3, r2, r3
  125404:	e15b24b6 	ldrh	r2, [fp, #-70]	; 0xffffffba
  125408:	e1a01003 	mov	r1, r3
  12540c:	eb006eda 	bl	140f7c <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
  125410:	e51b0010 	ldr	r0, [fp, #-16]
  125414:	ebffd7a5 	bl	11b2b0 <pbuf_clen>
  125418:	e1a03000 	mov	r3, r0
  12541c:	e1a02003 	mov	r2, r3
  125420:	e15b32b4 	ldrh	r3, [fp, #-36]	; 0xffffffdc
  125424:	e0823003 	add	r3, r2, r3
  125428:	e14b32b4 	strh	r3, [fp, #-36]	; 0xffffffdc
  12542c:	ea000038 	b	125514 <tcp_write+0x494>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
  125430:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125434:	e5933004 	ldr	r3, [r3, #4]
  125438:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
  12543c:	ea000002 	b	12544c <tcp_write+0x3cc>
  125440:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125444:	e5933000 	ldr	r3, [r3]
  125448:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
  12544c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125450:	e5933000 	ldr	r3, [r3]
  125454:	e3530000 	cmp	r3, #0
  125458:	1afffff8 	bne	125440 <tcp_write+0x3c0>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
  12545c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125460:	e5d3300c 	ldrb	r3, [r3, #12]
  125464:	e3530001 	cmp	r3, #1
  125468:	1a000014 	bne	1254c0 <tcp_write+0x440>
  12546c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  125470:	e5933004 	ldr	r3, [r3, #4]
  125474:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  125478:	e1d220ba 	ldrh	r2, [r2, #10]
  12547c:	e0833002 	add	r3, r3, r2
  125480:	e51b205c 	ldr	r2, [fp, #-92]	; 0xffffffa4
  125484:	e1520003 	cmp	r2, r3
  125488:	1a00000c 	bne	1254c0 <tcp_write+0x440>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
  12548c:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  125490:	e3530000 	cmp	r3, #0
  125494:	0a000006 	beq	1254b4 <tcp_write+0x434>
  125498:	e308095c 	movw	r0, #35164	; 0x895c
  12549c:	e3400014 	movt	r0, #20
  1254a0:	ebff771b 	bl	103114 <rt_kprintf>
  1254a4:	e3a01f83 	mov	r1, #524	; 0x20c
  1254a8:	e3080804 	movw	r0, #34820	; 0x8804
  1254ac:	e3400014 	movt	r0, #20
  1254b0:	ebff96eb 	bl	10b064 <sys_arch_assert>
          extendlen = seglen;
  1254b4:	e15b34b6 	ldrh	r3, [fp, #-70]	; 0xffffffba
  1254b8:	e14b32b8 	strh	r3, [fp, #-40]	; 0xffffffd8
  1254bc:	ea000014 	b	125514 <tcp_write+0x494>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
  1254c0:	e15b34b6 	ldrh	r3, [fp, #-70]	; 0xffffffba
  1254c4:	e3a02001 	mov	r2, #1
  1254c8:	e1a01003 	mov	r1, r3
  1254cc:	e3a00004 	mov	r0, #4
  1254d0:	ebffd3ea 	bl	11a480 <pbuf_alloc>
  1254d4:	e50b0010 	str	r0, [fp, #-16]
  1254d8:	e51b3010 	ldr	r3, [fp, #-16]
  1254dc:	e3530000 	cmp	r3, #0
  1254e0:	0a000191 	beq	125b2c <tcp_write+0xaac>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
  1254e4:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  1254e8:	e51b205c 	ldr	r2, [fp, #-92]	; 0xffffffa4
  1254ec:	e0822003 	add	r2, r2, r3
  1254f0:	e51b3010 	ldr	r3, [fp, #-16]
  1254f4:	e5832004 	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
  1254f8:	e51b0010 	ldr	r0, [fp, #-16]
  1254fc:	ebffd76b 	bl	11b2b0 <pbuf_clen>
  125500:	e1a03000 	mov	r3, r0
  125504:	e1a02003 	mov	r2, r3
  125508:	e15b32b4 	ldrh	r3, [fp, #-36]	; 0xffffffdc
  12550c:	e0823003 	add	r3, r2, r3
  125510:	e14b32b4 	strh	r3, [fp, #-36]	; 0xffffffdc
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
  125514:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  125518:	e15b34b6 	ldrh	r3, [fp, #-70]	; 0xffffffba
  12551c:	e0823003 	add	r3, r2, r3
  125520:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
  125524:	ea0000ae 	b	1257e4 <tcp_write+0x764>
    }
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
  125528:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  12552c:	e1d336b8 	ldrh	r3, [r3, #104]	; 0x68
  125530:	e3530000 	cmp	r3, #0
  125534:	0a0000aa 	beq	1257e4 <tcp_write+0x764>
  125538:	e3080988 	movw	r0, #35208	; 0x8988
  12553c:	e3400014 	movt	r0, #20
  125540:	ebff76f3 	bl	103114 <rt_kprintf>
  125544:	e3001225 	movw	r1, #549	; 0x225
  125548:	e3080804 	movw	r0, #34820	; 0x8804
  12554c:	e3400014 	movt	r0, #20
  125550:	ebff96c3 	bl	10b064 <sys_arch_assert>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
  125554:	ea0000a2 	b	1257e4 <tcp_write+0x764>
    struct pbuf *p;
    u16_t left = len - pos;
  125558:	e15b25be 	ldrh	r2, [fp, #-94]	; 0xffffffa2
  12555c:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  125560:	e0423003 	sub	r3, r2, r3
  125564:	e14b34b8 	strh	r3, [fp, #-72]	; 0xffffffb8
    u16_t max_len = mss_local - optlen;
  125568:	e55b303d 	ldrb	r3, [fp, #-61]	; 0xffffffc3
  12556c:	e6ff3073 	uxth	r3, r3
  125570:	e15b24b0 	ldrh	r2, [fp, #-64]	; 0xffffffc0
  125574:	e0423003 	sub	r3, r2, r3
  125578:	e14b34ba 	strh	r3, [fp, #-74]	; 0xffffffb6
    u16_t seglen = LWIP_MIN(left, max_len);
  12557c:	e15b24ba 	ldrh	r2, [fp, #-74]	; 0xffffffb6
  125580:	e15b34b8 	ldrh	r3, [fp, #-72]	; 0xffffffb8
  125584:	e1520003 	cmp	r2, r3
  125588:	31a03002 	movcc	r3, r2
  12558c:	21a03003 	movcs	r3, r3
  125590:	e14b34bc 	strh	r3, [fp, #-76]	; 0xffffffb4
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
  125594:	e55b305f 	ldrb	r3, [fp, #-95]	; 0xffffffa1
  125598:	e2033001 	and	r3, r3, #1
  12559c:	e3530000 	cmp	r3, #0
  1255a0:	0a00002e 	beq	125660 <tcp_write+0x5e0>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
  1255a4:	e55b303d 	ldrb	r3, [fp, #-61]	; 0xffffffc3
  1255a8:	e6ff2073 	uxth	r2, r3
  1255ac:	e15b34bc 	ldrh	r3, [fp, #-76]	; 0xffffffb4
  1255b0:	e0823003 	add	r3, r2, r3
  1255b4:	e6ff1073 	uxth	r1, r3
  1255b8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1255bc:	e3530000 	cmp	r3, #0
  1255c0:	03a03001 	moveq	r3, #1
  1255c4:	13a03000 	movne	r3, #0
  1255c8:	e6ef3073 	uxtb	r3, r3
  1255cc:	e24b0052 	sub	r0, fp, #82	; 0x52
  1255d0:	e15b24b0 	ldrh	r2, [fp, #-64]	; 0xffffffc0
  1255d4:	e58d3008 	str	r3, [sp, #8]
  1255d8:	e55b305f 	ldrb	r3, [fp, #-95]	; 0xffffffa1
  1255dc:	e58d3004 	str	r3, [sp, #4]
  1255e0:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  1255e4:	e58d3000 	str	r3, [sp]
  1255e8:	e1a03000 	mov	r3, r0
  1255ec:	e3a00000 	mov	r0, #0
  1255f0:	ebfffde2 	bl	124d80 <tcp_pbuf_prealloc>
  1255f4:	e50b0034 	str	r0, [fp, #-52]	; 0xffffffcc
  1255f8:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  1255fc:	e3530000 	cmp	r3, #0
  125600:	0a00014b 	beq	125b34 <tcp_write+0xab4>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
  125604:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  125608:	e1d330ba 	ldrh	r3, [r3, #10]
  12560c:	e15b24bc 	ldrh	r2, [fp, #-76]	; 0xffffffb4
  125610:	e1520003 	cmp	r2, r3
  125614:	9a000006 	bls	125634 <tcp_write+0x5b4>
  125618:	e30809b8 	movw	r0, #35256	; 0x89b8
  12561c:	e3400014 	movt	r0, #20
  125620:	ebff76bb 	bl	103114 <rt_kprintf>
  125624:	e3001241 	movw	r1, #577	; 0x241
  125628:	e3080804 	movw	r0, #34820	; 0x8804
  12562c:	e3400014 	movt	r0, #20
  125630:	ebff968b 	bl	10b064 <sys_arch_assert>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
  125634:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  125638:	e5932004 	ldr	r2, [r3, #4]
  12563c:	e55b303d 	ldrb	r3, [fp, #-61]	; 0xffffffc3
  125640:	e0820003 	add	r0, r2, r3
  125644:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  125648:	e51b205c 	ldr	r2, [fp, #-92]	; 0xffffffa4
  12564c:	e0823003 	add	r3, r2, r3
  125650:	e15b24bc 	ldrh	r2, [fp, #-76]	; 0xffffffb4
  125654:	e1a01003 	mov	r1, r3
  125658:	eb006e47 	bl	140f7c <memcpy>
  12565c:	ea000027 	b	125700 <tcp_write+0x680>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
  125660:	e15b35b2 	ldrh	r3, [fp, #-82]	; 0xffffffae
  125664:	e3530000 	cmp	r3, #0
  125668:	0a000006 	beq	125688 <tcp_write+0x608>
  12566c:	e30809f8 	movw	r0, #35320	; 0x89f8
  125670:	e3400014 	movt	r0, #20
  125674:	ebff76a6 	bl	103114 <rt_kprintf>
  125678:	e300124b 	movw	r1, #587	; 0x24b
  12567c:	e3080804 	movw	r0, #34820	; 0x8804
  125680:	e3400014 	movt	r0, #20
  125684:	ebff9676 	bl	10b064 <sys_arch_assert>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
  125688:	e15b34bc 	ldrh	r3, [fp, #-76]	; 0xffffffb4
  12568c:	e3a02001 	mov	r2, #1
  125690:	e1a01003 	mov	r1, r3
  125694:	e3a00000 	mov	r0, #0
  125698:	ebffd378 	bl	11a480 <pbuf_alloc>
  12569c:	e50b0050 	str	r0, [fp, #-80]	; 0xffffffb0
  1256a0:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
  1256a4:	e3530000 	cmp	r3, #0
  1256a8:	0a000123 	beq	125b3c <tcp_write+0xabc>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
  1256ac:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  1256b0:	e51b205c 	ldr	r2, [fp, #-92]	; 0xffffffa4
  1256b4:	e0822003 	add	r2, r2, r3
  1256b8:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
  1256bc:	e5832004 	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
  1256c0:	e55b303d 	ldrb	r3, [fp, #-61]	; 0xffffffc3
  1256c4:	e6ff3073 	uxth	r3, r3
  1256c8:	e3a02000 	mov	r2, #0
  1256cc:	e1a01003 	mov	r1, r3
  1256d0:	e3a00000 	mov	r0, #0
  1256d4:	ebffd369 	bl	11a480 <pbuf_alloc>
  1256d8:	e50b0034 	str	r0, [fp, #-52]	; 0xffffffcc
  1256dc:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  1256e0:	e3530000 	cmp	r3, #0
  1256e4:	1a000002 	bne	1256f4 <tcp_write+0x674>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
  1256e8:	e51b0050 	ldr	r0, [fp, #-80]	; 0xffffffb0
  1256ec:	ebffd66a 	bl	11b09c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
  1256f0:	ea000114 	b	125b48 <tcp_write+0xac8>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
  1256f4:	e51b1050 	ldr	r1, [fp, #-80]	; 0xffffffb0
  1256f8:	e51b0034 	ldr	r0, [fp, #-52]	; 0xffffffcc
  1256fc:	ebffd71d 	bl	11b378 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
  125700:	e51b0034 	ldr	r0, [fp, #-52]	; 0xffffffcc
  125704:	ebffd6e9 	bl	11b2b0 <pbuf_clen>
  125708:	e1a03000 	mov	r3, r0
  12570c:	e1a02003 	mov	r2, r3
  125710:	e15b32b4 	ldrh	r3, [fp, #-36]	; 0xffffffdc
  125714:	e0823003 	add	r3, r2, r3
  125718:	e14b32b4 	strh	r3, [fp, #-36]	; 0xffffffdc

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
  12571c:	e15b32b4 	ldrh	r3, [fp, #-36]	; 0xffffffdc
  125720:	e3530016 	cmp	r3, #22
  125724:	8a000003 	bhi	125738 <tcp_write+0x6b8>
  125728:	e15b32b4 	ldrh	r3, [fp, #-36]	; 0xffffffdc
  12572c:	e30f2ffc 	movw	r2, #65532	; 0xfffc
  125730:	e1530002 	cmp	r3, r2
  125734:	9a000002 	bls	125744 <tcp_write+0x6c4>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
        queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
  125738:	e51b0034 	ldr	r0, [fp, #-52]	; 0xffffffcc
  12573c:	ebffd656 	bl	11b09c <pbuf_free>
      goto memerr;
  125740:	ea000100 	b	125b48 <tcp_write+0xac8>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
  125744:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125748:	e593205c 	ldr	r2, [r3, #92]	; 0x5c
  12574c:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  125750:	e0822003 	add	r2, r2, r3
  125754:	e55b303e 	ldrb	r3, [fp, #-62]	; 0xffffffc2
  125758:	e58d3000 	str	r3, [sp]
  12575c:	e1a03002 	mov	r3, r2
  125760:	e3a02000 	mov	r2, #0
  125764:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  125768:	e51b0058 	ldr	r0, [fp, #-88]	; 0xffffffa8
  12576c:	ebfffd02 	bl	124b7c <tcp_create_segment>
  125770:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  125774:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  125778:	e3530000 	cmp	r3, #0
  12577c:	0a0000f0 	beq	125b44 <tcp_write+0xac4>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
  125780:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125784:	e3530000 	cmp	r3, #0
  125788:	1a000002 	bne	125798 <tcp_write+0x718>
      queue = seg;
  12578c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  125790:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  125794:	ea00000c 	b	1257cc <tcp_write+0x74c>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
  125798:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12579c:	e3530000 	cmp	r3, #0
  1257a0:	1a000006 	bne	1257c0 <tcp_write+0x740>
  1257a4:	e3080a08 	movw	r0, #35336	; 0x8a08
  1257a8:	e3400014 	movt	r0, #20
  1257ac:	ebff7658 	bl	103114 <rt_kprintf>
  1257b0:	e3001285 	movw	r1, #645	; 0x285
  1257b4:	e3080804 	movw	r0, #34820	; 0x8804
  1257b8:	e3400014 	movt	r0, #20
  1257bc:	ebff9628 	bl	10b064 <sys_arch_assert>
      prev_seg->next = seg;
  1257c0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1257c4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1257c8:	e5832000 	str	r2, [r3]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
  1257cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1257d0:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      lwip_ntohl(seg->tcphdr->seqno),
      lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
  1257d4:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  1257d8:	e15b34bc 	ldrh	r3, [fp, #-76]	; 0xffffffb4
  1257dc:	e0823003 	add	r3, r2, r3
  1257e0:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
  while (pos < len) {
  1257e4:	e15b22b2 	ldrh	r2, [fp, #-34]	; 0xffffffde
  1257e8:	e15b35be 	ldrh	r3, [fp, #-94]	; 0xffffffa2
  1257ec:	e1520003 	cmp	r2, r3
  1257f0:	3affff58 	bcc	125558 <tcp_write+0x4d8>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
  1257f4:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
  1257f8:	e3530000 	cmp	r3, #0
  1257fc:	0a00002b 	beq	1258b0 <tcp_write+0x830>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
  125800:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125804:	e5933004 	ldr	r3, [r3, #4]
  125808:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
  12580c:	ea00001d 	b	125888 <tcp_write+0x808>
      p->tot_len += oversize_used;
  125810:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  125814:	e1d320b8 	ldrh	r2, [r3, #8]
  125818:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
  12581c:	e0823003 	add	r3, r2, r3
  125820:	e6ff2073 	uxth	r2, r3
  125824:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  125828:	e1c320b8 	strh	r2, [r3, #8]
      if (p->next == NULL) {
  12582c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  125830:	e5933000 	ldr	r3, [r3]
  125834:	e3530000 	cmp	r3, #0
  125838:	1a00000f 	bne	12587c <tcp_write+0x7fc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
  12583c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  125840:	e5933004 	ldr	r3, [r3, #4]
  125844:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
  125848:	e1d220ba 	ldrh	r2, [r2, #10]
  12584c:	e0833002 	add	r3, r3, r2
  125850:	e15b22b6 	ldrh	r2, [fp, #-38]	; 0xffffffda
  125854:	e51b105c 	ldr	r1, [fp, #-92]	; 0xffffffa4
  125858:	e1a00003 	mov	r0, r3
  12585c:	eb006dc6 	bl	140f7c <memcpy>
        p->len += oversize_used;
  125860:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  125864:	e1d320ba 	ldrh	r2, [r3, #10]
  125868:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
  12586c:	e0823003 	add	r3, r2, r3
  125870:	e6ff2073 	uxth	r2, r3
  125874:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  125878:	e1c320ba 	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
  12587c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  125880:	e5933000 	ldr	r3, [r3]
  125884:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
  125888:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  12588c:	e3530000 	cmp	r3, #0
  125890:	1affffde 	bne	125810 <tcp_write+0x790>
      }
    }
    last_unsent->len += oversize_used;
  125894:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125898:	e1d320b8 	ldrh	r2, [r3, #8]
  12589c:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
  1258a0:	e0823003 	add	r3, r2, r3
  1258a4:	e6ff2073 	uxth	r2, r3
  1258a8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1258ac:	e1c320b8 	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
  1258b0:	e15b25b2 	ldrh	r2, [fp, #-82]	; 0xffffffae
  1258b4:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  1258b8:	e1c326b8 	strh	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
  1258bc:	e51b3010 	ldr	r3, [fp, #-16]
  1258c0:	e3530000 	cmp	r3, #0
  1258c4:	0a000017 	beq	125928 <tcp_write+0x8a8>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
  1258c8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1258cc:	e3530000 	cmp	r3, #0
  1258d0:	1a000006 	bne	1258f0 <tcp_write+0x870>
  1258d4:	e3080a1c 	movw	r0, #35356	; 0x8a1c
  1258d8:	e3400014 	movt	r0, #20
  1258dc:	ebff760c 	bl	103114 <rt_kprintf>
  1258e0:	e30012bb 	movw	r1, #699	; 0x2bb
  1258e4:	e3080804 	movw	r0, #34820	; 0x8804
  1258e8:	e3400014 	movt	r0, #20
  1258ec:	ebff95dc 	bl	10b064 <sys_arch_assert>
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
  1258f0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1258f4:	e5933004 	ldr	r3, [r3, #4]
  1258f8:	e51b1010 	ldr	r1, [fp, #-16]
  1258fc:	e1a00003 	mov	r0, r3
  125900:	ebffd69c 	bl	11b378 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
  125904:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125908:	e1d320b8 	ldrh	r2, [r3, #8]
  12590c:	e51b3010 	ldr	r3, [fp, #-16]
  125910:	e1d330b8 	ldrh	r3, [r3, #8]
  125914:	e0823003 	add	r3, r2, r3
  125918:	e6ff2073 	uxth	r2, r3
  12591c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125920:	e1c320b8 	strh	r2, [r3, #8]
  125924:	ea000037 	b	125a08 <tcp_write+0x988>
  } else if (extendlen > 0) {
  125928:	e15b32b8 	ldrh	r3, [fp, #-40]	; 0xffffffd8
  12592c:	e3530000 	cmp	r3, #0
  125930:	0a000034 	beq	125a08 <tcp_write+0x988>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
  125934:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125938:	e3530000 	cmp	r3, #0
  12593c:	0a000003 	beq	125950 <tcp_write+0x8d0>
  125940:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125944:	e5933004 	ldr	r3, [r3, #4]
  125948:	e3530000 	cmp	r3, #0
  12594c:	1a000006 	bne	12596c <tcp_write+0x8ec>
  125950:	e3080a54 	movw	r0, #35412	; 0x8a54
  125954:	e3400014 	movt	r0, #20
  125958:	ebff75ed 	bl	103114 <rt_kprintf>
  12595c:	e30012c1 	movw	r1, #705	; 0x2c1
  125960:	e3080804 	movw	r0, #34820	; 0x8804
  125964:	e3400014 	movt	r0, #20
  125968:	ebff95bd 	bl	10b064 <sys_arch_assert>
      last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
  12596c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125970:	e5933004 	ldr	r3, [r3, #4]
  125974:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  125978:	ea000009 	b	1259a4 <tcp_write+0x924>
      p->tot_len += extendlen;
  12597c:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  125980:	e1d320b8 	ldrh	r2, [r3, #8]
  125984:	e15b32b8 	ldrh	r3, [fp, #-40]	; 0xffffffd8
  125988:	e0823003 	add	r3, r2, r3
  12598c:	e6ff2073 	uxth	r2, r3
  125990:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  125994:	e1c320b8 	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
  125998:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  12599c:	e5933000 	ldr	r3, [r3]
  1259a0:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
  1259a4:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  1259a8:	e5933000 	ldr	r3, [r3]
  1259ac:	e3530000 	cmp	r3, #0
  1259b0:	1afffff1 	bne	12597c <tcp_write+0x8fc>
    }
    p->tot_len += extendlen;
  1259b4:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  1259b8:	e1d320b8 	ldrh	r2, [r3, #8]
  1259bc:	e15b32b8 	ldrh	r3, [fp, #-40]	; 0xffffffd8
  1259c0:	e0823003 	add	r3, r2, r3
  1259c4:	e6ff2073 	uxth	r2, r3
  1259c8:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  1259cc:	e1c320b8 	strh	r2, [r3, #8]
    p->len += extendlen;
  1259d0:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  1259d4:	e1d320ba 	ldrh	r2, [r3, #10]
  1259d8:	e15b32b8 	ldrh	r3, [fp, #-40]	; 0xffffffd8
  1259dc:	e0823003 	add	r3, r2, r3
  1259e0:	e6ff2073 	uxth	r2, r3
  1259e4:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  1259e8:	e1c320ba 	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
  1259ec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1259f0:	e1d320b8 	ldrh	r2, [r3, #8]
  1259f4:	e15b32b8 	ldrh	r3, [fp, #-40]	; 0xffffffd8
  1259f8:	e0823003 	add	r3, r2, r3
  1259fc:	e6ff2073 	uxth	r2, r3
  125a00:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125a04:	e1c320b8 	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
  125a08:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125a0c:	e3530000 	cmp	r3, #0
  125a10:	1a000003 	bne	125a24 <tcp_write+0x9a4>
    pcb->unsent = queue;
  125a14:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125a18:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  125a1c:	e583206c 	str	r2, [r3, #108]	; 0x6c
  125a20:	ea000002 	b	125a30 <tcp_write+0x9b0>
  } else {
    last_unsent->next = queue;
  125a24:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125a28:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  125a2c:	e5832000 	str	r2, [r3]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
  125a30:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125a34:	e593205c 	ldr	r2, [r3, #92]	; 0x5c
  125a38:	e15b35be 	ldrh	r3, [fp, #-94]	; 0xffffffa2
  125a3c:	e0822003 	add	r2, r2, r3
  125a40:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125a44:	e583205c 	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
  125a48:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125a4c:	e1d326b4 	ldrh	r2, [r3, #100]	; 0x64
  125a50:	e15b35be 	ldrh	r3, [fp, #-94]	; 0xffffffa2
  125a54:	e0423003 	sub	r3, r2, r3
  125a58:	e6ff2073 	uxth	r2, r3
  125a5c:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125a60:	e1c326b4 	strh	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
  125a64:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125a68:	e15b22b4 	ldrh	r2, [fp, #-36]	; 0xffffffdc
  125a6c:	e1c326b6 	strh	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
    pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
  125a70:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125a74:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  125a78:	e3530000 	cmp	r3, #0
  125a7c:	0a00000e 	beq	125abc <tcp_write+0xa3c>
    LWIP_ASSERT("tcp_write: valid queue length",
  125a80:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125a84:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  125a88:	e3530000 	cmp	r3, #0
  125a8c:	1a00000a 	bne	125abc <tcp_write+0xa3c>
  125a90:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125a94:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  125a98:	e3530000 	cmp	r3, #0
  125a9c:	1a000006 	bne	125abc <tcp_write+0xa3c>
  125aa0:	e3080a8c 	movw	r0, #35468	; 0x8a8c
  125aa4:	e3400014 	movt	r0, #20
  125aa8:	ebff7599 	bl	103114 <rt_kprintf>
  125aac:	e30012ed 	movw	r1, #749	; 0x2ed
  125ab0:	e3080804 	movw	r0, #34820	; 0x8804
  125ab4:	e3400014 	movt	r0, #20
  125ab8:	ebff9569 	bl	10b064 <sys_arch_assert>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
  125abc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  125ac0:	e3530000 	cmp	r3, #0
  125ac4:	0a000014 	beq	125b1c <tcp_write+0xa9c>
  125ac8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  125acc:	e593300c 	ldr	r3, [r3, #12]
  125ad0:	e3530000 	cmp	r3, #0
  125ad4:	0a000010 	beq	125b1c <tcp_write+0xa9c>
  125ad8:	e55b305f 	ldrb	r3, [fp, #-95]	; 0xffffffa1
  125adc:	e2033002 	and	r3, r3, #2
  125ae0:	e3530000 	cmp	r3, #0
  125ae4:	1a00000c 	bne	125b1c <tcp_write+0xa9c>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
  125ae8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  125aec:	e593300c 	ldr	r3, [r3, #12]
  125af0:	e1d330bc 	ldrh	r3, [r3, #12]
  125af4:	e6ff4073 	uxth	r4, r3
  125af8:	e3a00008 	mov	r0, #8
  125afc:	ebffc32f 	bl	1167c0 <lwip_htons>
  125b00:	e1a03000 	mov	r3, r0
  125b04:	e1a02003 	mov	r2, r3
  125b08:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  125b0c:	e593300c 	ldr	r3, [r3, #12]
  125b10:	e1842002 	orr	r2, r4, r2
  125b14:	e6ff2072 	uxth	r2, r2
  125b18:	e1c320bc 	strh	r2, [r3, #12]
  }

  return ERR_OK;
  125b1c:	e3a03000 	mov	r3, #0
  125b20:	ea000035 	b	125bfc <tcp_write+0xb7c>
          goto memerr;
  125b24:	e320f000 	nop	{0}
  125b28:	ea000006 	b	125b48 <tcp_write+0xac8>
            goto memerr;
  125b2c:	e320f000 	nop	{0}
  125b30:	ea000004 	b	125b48 <tcp_write+0xac8>
        goto memerr;
  125b34:	e320f000 	nop	{0}
  125b38:	ea000002 	b	125b48 <tcp_write+0xac8>
        goto memerr;
  125b3c:	e320f000 	nop	{0}
  125b40:	ea000000 	b	125b48 <tcp_write+0xac8>
      goto memerr;
  125b44:	e320f000 	nop	{0}
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
  125b48:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125b4c:	e5d3301e 	ldrb	r3, [r3, #30]
  125b50:	e1e03c83 	mvn	r3, r3, lsl #25
  125b54:	e1e03ca3 	mvn	r3, r3, lsr #25
  125b58:	e6ef2073 	uxtb	r2, r3
  125b5c:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125b60:	e5c3201e 	strb	r2, [r3, #30]
  TCP_STATS_INC(tcp.memerr);
  125b64:	e3063840 	movw	r3, #26688	; 0x6840
  125b68:	e3403057 	movt	r3, #87	; 0x57
  125b6c:	e1d33bb8 	ldrh	r3, [r3, #184]	; 0xb8
  125b70:	e2833001 	add	r3, r3, #1
  125b74:	e6ff2073 	uxth	r2, r3
  125b78:	e3063840 	movw	r3, #26688	; 0x6840
  125b7c:	e3403057 	movt	r3, #87	; 0x57
  125b80:	e1c32bb8 	strh	r2, [r3, #184]	; 0xb8

  if (concat_p != NULL) {
  125b84:	e51b3010 	ldr	r3, [fp, #-16]
  125b88:	e3530000 	cmp	r3, #0
  125b8c:	0a000001 	beq	125b98 <tcp_write+0xb18>
    pbuf_free(concat_p);
  125b90:	e51b0010 	ldr	r0, [fp, #-16]
  125b94:	ebffd540 	bl	11b09c <pbuf_free>
  }
  if (queue != NULL) {
  125b98:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125b9c:	e3530000 	cmp	r3, #0
  125ba0:	0a000001 	beq	125bac <tcp_write+0xb2c>
    tcp_segs_free(queue);
  125ba4:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  125ba8:	ebffe69b 	bl	11f61c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
  125bac:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125bb0:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  125bb4:	e3530000 	cmp	r3, #0
  125bb8:	0a00000e 	beq	125bf8 <tcp_write+0xb78>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
  125bbc:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125bc0:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  125bc4:	e3530000 	cmp	r3, #0
  125bc8:	1a00000a 	bne	125bf8 <tcp_write+0xb78>
  125bcc:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  125bd0:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  125bd4:	e3530000 	cmp	r3, #0
  125bd8:	1a000006 	bne	125bf8 <tcp_write+0xb78>
  125bdc:	e3080a8c 	movw	r0, #35468	; 0x8a8c
  125be0:	e3400014 	movt	r0, #20
  125be4:	ebff754a 	bl	103114 <rt_kprintf>
  125be8:	e3001302 	movw	r1, #770	; 0x302
  125bec:	e3080804 	movw	r0, #34820	; 0x8804
  125bf0:	e3400014 	movt	r0, #20
  125bf4:	ebff951a 	bl	10b064 <sys_arch_assert>
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
  125bf8:	e3e03000 	mvn	r3, #0
}
  125bfc:	e1a00003 	mov	r0, r3
  125c00:	e24bd008 	sub	sp, fp, #8
  125c04:	e8bd8810 	pop	{r4, fp, pc}

00125c08 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
  125c08:	e92d4800 	push	{fp, lr}
  125c0c:	e28db004 	add	fp, sp, #4
  125c10:	e24dd028 	sub	sp, sp, #40	; 0x28
  125c14:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  125c18:	e1a03001 	mov	r3, r1
  125c1c:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
  125c20:	e3a03000 	mov	r3, #0
  125c24:	e54b3005 	strb	r3, [fp, #-5]
  u8_t optlen = 0;
  125c28:	e3a03000 	mov	r3, #0
  125c2c:	e54b300d 	strb	r3, [fp, #-13]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
  125c30:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  125c34:	e2033003 	and	r3, r3, #3
  125c38:	e3530000 	cmp	r3, #0
  125c3c:	1a000006 	bne	125c5c <tcp_enqueue_flags+0x54>
  125c40:	e3080aac 	movw	r0, #35500	; 0x8aac
  125c44:	e3400014 	movt	r0, #20
  125c48:	ebff7531 	bl	103114 <rt_kprintf>
  125c4c:	e300131b 	movw	r1, #795	; 0x31b
  125c50:	e3080804 	movw	r0, #34820	; 0x8804
  125c54:	e3400014 	movt	r0, #20
  125c58:	ebff9501 	bl	10b064 <sys_arch_assert>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
  125c5c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125c60:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  125c64:	e3530015 	cmp	r3, #21
  125c68:	8a000004 	bhi	125c80 <tcp_enqueue_flags+0x78>
  125c6c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125c70:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  125c74:	e30f2ffc 	movw	r2, #65532	; 0xfffc
  125c78:	e1530002 	cmp	r3, r2
  125c7c:	9a000014 	bls	125cd4 <tcp_enqueue_flags+0xcc>
      ((flags & TCP_FIN) == 0)) {
  125c80:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  125c84:	e2033001 	and	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
  125c88:	e3530000 	cmp	r3, #0
  125c8c:	1a000010 	bne	125cd4 <tcp_enqueue_flags+0xcc>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
  125c90:	e3063840 	movw	r3, #26688	; 0x6840
  125c94:	e3403057 	movt	r3, #87	; 0x57
  125c98:	e1d33bb8 	ldrh	r3, [r3, #184]	; 0xb8
  125c9c:	e2833001 	add	r3, r3, #1
  125ca0:	e6ff2073 	uxth	r2, r3
  125ca4:	e3063840 	movw	r3, #26688	; 0x6840
  125ca8:	e3403057 	movt	r3, #87	; 0x57
  125cac:	e1c32bb8 	strh	r2, [r3, #184]	; 0xb8
    pcb->flags |= TF_NAGLEMEMERR;
  125cb0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125cb4:	e5d3301e 	ldrb	r3, [r3, #30]
  125cb8:	e1e03c83 	mvn	r3, r3, lsl #25
  125cbc:	e1e03ca3 	mvn	r3, r3, lsr #25
  125cc0:	e6ef2073 	uxtb	r2, r3
  125cc4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125cc8:	e5c3201e 	strb	r2, [r3, #30]
    return ERR_MEM;
  125ccc:	e3e03000 	mvn	r3, #0
  125cd0:	ea0000b7 	b	125fb4 <tcp_enqueue_flags+0x3ac>
  }

  if (flags & TCP_SYN) {
  125cd4:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  125cd8:	e2033002 	and	r3, r3, #2
  125cdc:	e3530000 	cmp	r3, #0
  125ce0:	0a000001 	beq	125cec <tcp_enqueue_flags+0xe4>
    optflags = TF_SEG_OPTS_MSS;
  125ce4:	e3a03001 	mov	r3, #1
  125ce8:	e54b3005 	strb	r3, [fp, #-5]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
  125cec:	e55b3005 	ldrb	r3, [fp, #-5]
  125cf0:	e1a03103 	lsl	r3, r3, #2
  125cf4:	e6ef3073 	uxtb	r3, r3
  125cf8:	e2033004 	and	r3, r3, #4
  125cfc:	e54b300d 	strb	r3, [fp, #-13]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
  125d00:	e55b300d 	ldrb	r3, [fp, #-13]
  125d04:	e6ff3073 	uxth	r3, r3
  125d08:	e3a02000 	mov	r2, #0
  125d0c:	e1a01003 	mov	r1, r3
  125d10:	e3a00000 	mov	r0, #0
  125d14:	ebffd1d9 	bl	11a480 <pbuf_alloc>
  125d18:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  125d1c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125d20:	e3530000 	cmp	r3, #0
  125d24:	1a000010 	bne	125d6c <tcp_enqueue_flags+0x164>
    pcb->flags |= TF_NAGLEMEMERR;
  125d28:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125d2c:	e5d3301e 	ldrb	r3, [r3, #30]
  125d30:	e1e03c83 	mvn	r3, r3, lsl #25
  125d34:	e1e03ca3 	mvn	r3, r3, lsr #25
  125d38:	e6ef2073 	uxtb	r2, r3
  125d3c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125d40:	e5c3201e 	strb	r2, [r3, #30]
    TCP_STATS_INC(tcp.memerr);
  125d44:	e3063840 	movw	r3, #26688	; 0x6840
  125d48:	e3403057 	movt	r3, #87	; 0x57
  125d4c:	e1d33bb8 	ldrh	r3, [r3, #184]	; 0xb8
  125d50:	e2833001 	add	r3, r3, #1
  125d54:	e6ff2073 	uxth	r2, r3
  125d58:	e3063840 	movw	r3, #26688	; 0x6840
  125d5c:	e3403057 	movt	r3, #87	; 0x57
  125d60:	e1c32bb8 	strh	r2, [r3, #184]	; 0xb8
    return ERR_MEM;
  125d64:	e3e03000 	mvn	r3, #0
  125d68:	ea000091 	b	125fb4 <tcp_enqueue_flags+0x3ac>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
  125d6c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  125d70:	e1d320ba 	ldrh	r2, [r3, #10]
  125d74:	e55b300d 	ldrb	r3, [fp, #-13]
  125d78:	e6ff3073 	uxth	r3, r3
  125d7c:	e1520003 	cmp	r2, r3
  125d80:	2a000006 	bcs	125da0 <tcp_enqueue_flags+0x198>
  125d84:	e3080b04 	movw	r0, #35588	; 0x8b04
  125d88:	e3400014 	movt	r0, #20
  125d8c:	ebff74e0 	bl	103114 <rt_kprintf>
  125d90:	e3001341 	movw	r1, #833	; 0x341
  125d94:	e3080804 	movw	r0, #34820	; 0x8804
  125d98:	e3400014 	movt	r0, #20
  125d9c:	ebff94b0 	bl	10b064 <sys_arch_assert>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
  125da0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125da4:	e593105c 	ldr	r1, [r3, #92]	; 0x5c
  125da8:	e55b2021 	ldrb	r2, [fp, #-33]	; 0xffffffdf
  125dac:	e55b3005 	ldrb	r3, [fp, #-5]
  125db0:	e58d3000 	str	r3, [sp]
  125db4:	e1a03001 	mov	r3, r1
  125db8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  125dbc:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  125dc0:	ebfffb6d 	bl	124b7c <tcp_create_segment>
  125dc4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  125dc8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  125dcc:	e3530000 	cmp	r3, #0
  125dd0:	1a000010 	bne	125e18 <tcp_enqueue_flags+0x210>
    pcb->flags |= TF_NAGLEMEMERR;
  125dd4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125dd8:	e5d3301e 	ldrb	r3, [r3, #30]
  125ddc:	e1e03c83 	mvn	r3, r3, lsl #25
  125de0:	e1e03ca3 	mvn	r3, r3, lsr #25
  125de4:	e6ef2073 	uxtb	r2, r3
  125de8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125dec:	e5c3201e 	strb	r2, [r3, #30]
    TCP_STATS_INC(tcp.memerr);
  125df0:	e3063840 	movw	r3, #26688	; 0x6840
  125df4:	e3403057 	movt	r3, #87	; 0x57
  125df8:	e1d33bb8 	ldrh	r3, [r3, #184]	; 0xb8
  125dfc:	e2833001 	add	r3, r3, #1
  125e00:	e6ff2073 	uxth	r2, r3
  125e04:	e3063840 	movw	r3, #26688	; 0x6840
  125e08:	e3403057 	movt	r3, #87	; 0x57
  125e0c:	e1c32bb8 	strh	r2, [r3, #184]	; 0xb8
    return ERR_MEM;
  125e10:	e3e03000 	mvn	r3, #0
  125e14:	ea000066 	b	125fb4 <tcp_enqueue_flags+0x3ac>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
  125e18:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  125e1c:	e593300c 	ldr	r3, [r3, #12]
  125e20:	e2033003 	and	r3, r3, #3
  125e24:	e3530000 	cmp	r3, #0
  125e28:	0a000006 	beq	125e48 <tcp_enqueue_flags+0x240>
  125e2c:	e3080b40 	movw	r0, #35648	; 0x8b40
  125e30:	e3400014 	movt	r0, #20
  125e34:	ebff74b6 	bl	103114 <rt_kprintf>
  125e38:	e3001349 	movw	r1, #841	; 0x349
  125e3c:	e3080804 	movw	r0, #34820	; 0x8804
  125e40:	e3400014 	movt	r0, #20
  125e44:	ebff9486 	bl	10b064 <sys_arch_assert>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
  125e48:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  125e4c:	e1d330b8 	ldrh	r3, [r3, #8]
  125e50:	e3530000 	cmp	r3, #0
  125e54:	0a000006 	beq	125e74 <tcp_enqueue_flags+0x26c>
  125e58:	e3080b58 	movw	r0, #35672	; 0x8b58
  125e5c:	e3400014 	movt	r0, #20
  125e60:	ebff74ab 	bl	103114 <rt_kprintf>
  125e64:	e300134a 	movw	r1, #842	; 0x34a
  125e68:	e3080804 	movw	r0, #34820	; 0x8804
  125e6c:	e3400014 	movt	r0, #20
  125e70:	ebff947b 	bl	10b064 <sys_arch_assert>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
  125e74:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125e78:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  125e7c:	e3530000 	cmp	r3, #0
  125e80:	1a000003 	bne	125e94 <tcp_enqueue_flags+0x28c>
    pcb->unsent = seg;
  125e84:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125e88:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  125e8c:	e583206c 	str	r2, [r3, #108]	; 0x6c
  125e90:	ea00000d 	b	125ecc <tcp_enqueue_flags+0x2c4>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
  125e94:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125e98:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  125e9c:	e50b300c 	str	r3, [fp, #-12]
  125ea0:	ea000002 	b	125eb0 <tcp_enqueue_flags+0x2a8>
  125ea4:	e51b300c 	ldr	r3, [fp, #-12]
  125ea8:	e5933000 	ldr	r3, [r3]
  125eac:	e50b300c 	str	r3, [fp, #-12]
  125eb0:	e51b300c 	ldr	r3, [fp, #-12]
  125eb4:	e5933000 	ldr	r3, [r3]
  125eb8:	e3530000 	cmp	r3, #0
  125ebc:	1afffff8 	bne	125ea4 <tcp_enqueue_flags+0x29c>
    useg->next = seg;
  125ec0:	e51b300c 	ldr	r3, [fp, #-12]
  125ec4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  125ec8:	e5832000 	str	r2, [r3]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
  125ecc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125ed0:	e3a02000 	mov	r2, #0
  125ed4:	e1c326b8 	strh	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
  125ed8:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  125edc:	e2033002 	and	r3, r3, #2
  125ee0:	e3530000 	cmp	r3, #0
  125ee4:	1a000003 	bne	125ef8 <tcp_enqueue_flags+0x2f0>
  125ee8:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  125eec:	e2033001 	and	r3, r3, #1
  125ef0:	e3530000 	cmp	r3, #0
  125ef4:	0a000004 	beq	125f0c <tcp_enqueue_flags+0x304>
    pcb->snd_lbb++;
  125ef8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125efc:	e593305c 	ldr	r3, [r3, #92]	; 0x5c
  125f00:	e2832001 	add	r2, r3, #1
  125f04:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125f08:	e583205c 	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
  125f0c:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  125f10:	e2033001 	and	r3, r3, #1
  125f14:	e3530000 	cmp	r3, #0
  125f18:	0a000005 	beq	125f34 <tcp_enqueue_flags+0x32c>
    pcb->flags |= TF_FIN;
  125f1c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125f20:	e5d3301e 	ldrb	r3, [r3, #30]
  125f24:	e3833020 	orr	r3, r3, #32
  125f28:	e6ef2073 	uxtb	r2, r3
  125f2c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125f30:	e5c3201e 	strb	r2, [r3, #30]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
  125f34:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  125f38:	e5933004 	ldr	r3, [r3, #4]
  125f3c:	e1a00003 	mov	r0, r3
  125f40:	ebffd4da 	bl	11b2b0 <pbuf_clen>
  125f44:	e1a03000 	mov	r3, r0
  125f48:	e1a02003 	mov	r2, r3
  125f4c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125f50:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  125f54:	e0823003 	add	r3, r2, r3
  125f58:	e6ff2073 	uxth	r2, r3
  125f5c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125f60:	e1c326b6 	strh	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
  125f64:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125f68:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  125f6c:	e3530000 	cmp	r3, #0
  125f70:	0a00000e 	beq	125fb0 <tcp_enqueue_flags+0x3a8>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
  125f74:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125f78:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  125f7c:	e3530000 	cmp	r3, #0
  125f80:	1a00000a 	bne	125fb0 <tcp_enqueue_flags+0x3a8>
  125f84:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125f88:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  125f8c:	e3530000 	cmp	r3, #0
  125f90:	1a000006 	bne	125fb0 <tcp_enqueue_flags+0x3a8>
  125f94:	e3080b84 	movw	r0, #35716	; 0x8b84
  125f98:	e3400014 	movt	r0, #20
  125f9c:	ebff745c 	bl	103114 <rt_kprintf>
  125fa0:	e300136d 	movw	r1, #877	; 0x36d
  125fa4:	e3080804 	movw	r0, #34820	; 0x8804
  125fa8:	e3400014 	movt	r0, #20
  125fac:	ebff942c 	bl	10b064 <sys_arch_assert>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
  125fb0:	e3a03000 	mov	r3, #0
}
  125fb4:	e1a00003 	mov	r0, r3
  125fb8:	e24bd004 	sub	sp, fp, #4
  125fbc:	e8bd8800 	pop	{fp, pc}

00125fc0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
  125fc0:	e92d4810 	push	{r4, fp, lr}
  125fc4:	e28db008 	add	fp, sp, #8
  125fc8:	e24dd02c 	sub	sp, sp, #44	; 0x2c
  125fcc:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
  125fd0:	e3a03000 	mov	r3, #0
  125fd4:	e54b300e 	strb	r3, [fp, #-14]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
  125fd8:	e55b300e 	ldrb	r3, [fp, #-14]
  125fdc:	e6ff4073 	uxth	r4, r3
  125fe0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  125fe4:	e5933050 	ldr	r3, [r3, #80]	; 0x50
  125fe8:	e1a00003 	mov	r0, r3
  125fec:	ebffc1ff 	bl	1167f0 <lwip_htonl>
  125ff0:	e1a03000 	mov	r3, r0
  125ff4:	e3a02000 	mov	r2, #0
  125ff8:	e1a01004 	mov	r1, r4
  125ffc:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  126000:	ebfffa36 	bl	1248e0 <tcp_output_alloc_header>
  126004:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  if (p == NULL) {
  126008:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12600c:	e3530000 	cmp	r3, #0
  126010:	1a000007 	bne	126034 <tcp_send_empty_ack+0x74>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
  126014:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126018:	e5d3301e 	ldrb	r3, [r3, #30]
  12601c:	e3833003 	orr	r3, r3, #3
  126020:	e6ef2073 	uxtb	r2, r3
  126024:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126028:	e5c3201e 	strb	r2, [r3, #30]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
  12602c:	e3e03001 	mvn	r3, #1
  126030:	ea000040 	b	126138 <tcp_send_empty_ack+0x178>
  }
#if LWIP_TCP_TIMESTAMPS || CHECKSUM_GEN_TCP
  tcphdr = (struct tcp_hdr *)p->payload;
  126034:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126038:	e5933004 	ldr	r3, [r3, #4]
  12603c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
  126040:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126044:	e2833004 	add	r3, r3, #4
  126048:	e1a00003 	mov	r0, r3
  12604c:	eb002cc9 	bl	131378 <ip4_route>
  126050:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
  if (netif == NULL) {
  126054:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  126058:	e3530000 	cmp	r3, #0
  12605c:	1a000002 	bne	12606c <tcp_send_empty_ack+0xac>
    err = ERR_RTE;
  126060:	e3e03003 	mvn	r3, #3
  126064:	e54b300d 	strb	r3, [fp, #-13]
  126068:	ea00001f 	b	1260ec <tcp_send_empty_ack+0x12c>
  } else {
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
  12606c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126070:	e1d320b8 	ldrh	r2, [r3, #8]
        &pcb->local_ip, &pcb->remote_ip);
  126074:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  126078:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12607c:	e2833004 	add	r3, r3, #4
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
  126080:	e58d3000 	str	r3, [sp]
  126084:	e1a03001 	mov	r3, r1
  126088:	e3a01006 	mov	r1, #6
  12608c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  126090:	ebffc9e9 	bl	11883c <ip_chksum_pseudo>
  126094:	e1a03000 	mov	r3, r0
  126098:	e1a02003 	mov	r2, r3
  12609c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1260a0:	e1c321b0 	strh	r2, [r3, #16]
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
  1260a4:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  1260a8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1260ac:	e2830004 	add	r0, r3, #4
  1260b0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1260b4:	e5d3c00a 	ldrb	ip, [r3, #10]
  1260b8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1260bc:	e5d33009 	ldrb	r3, [r3, #9]
  1260c0:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1260c4:	e58d2008 	str	r2, [sp, #8]
  1260c8:	e3a02006 	mov	r2, #6
  1260cc:	e58d2004 	str	r2, [sp, #4]
  1260d0:	e58d3000 	str	r3, [sp]
  1260d4:	e1a0300c 	mov	r3, ip
  1260d8:	e1a02000 	mov	r2, r0
  1260dc:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1260e0:	eb002f7d 	bl	131edc <ip4_output_if>
  1260e4:	e1a03000 	mov	r3, r0
  1260e8:	e54b300d 	strb	r3, [fp, #-13]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
  1260ec:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  1260f0:	ebffd3e9 	bl	11b09c <pbuf_free>

  if (err != ERR_OK) {
  1260f4:	e15b30dd 	ldrsb	r3, [fp, #-13]
  1260f8:	e3530000 	cmp	r3, #0
  1260fc:	0a000006 	beq	12611c <tcp_send_empty_ack+0x15c>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
  126100:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126104:	e5d3301e 	ldrb	r3, [r3, #30]
  126108:	e3833003 	orr	r3, r3, #3
  12610c:	e6ef2073 	uxtb	r2, r3
  126110:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126114:	e5c3201e 	strb	r2, [r3, #30]
  126118:	ea000005 	b	126134 <tcp_send_empty_ack+0x174>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
  12611c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126120:	e5d3301e 	ldrb	r3, [r3, #30]
  126124:	e3c33003 	bic	r3, r3, #3
  126128:	e6ef2073 	uxtb	r2, r3
  12612c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126130:	e5c3201e 	strb	r2, [r3, #30]
  }

  return err;
  126134:	e15b30dd 	ldrsb	r3, [fp, #-13]
}
  126138:	e1a00003 	mov	r0, r3
  12613c:	e24bd008 	sub	sp, fp, #8
  126140:	e8bd8810 	pop	{r4, fp, pc}

00126144 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
  126144:	e92d4830 	push	{r4, r5, fp, lr}
  126148:	e28db00c 	add	fp, sp, #12
  12614c:	e24dd028 	sub	sp, sp, #40	; 0x28
  126150:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
  126154:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126158:	e5933014 	ldr	r3, [r3, #20]
  12615c:	e3530001 	cmp	r3, #1
  126160:	1a000006 	bne	126180 <tcp_output+0x3c>
  126164:	e3080bac 	movw	r0, #35756	; 0x8bac
  126168:	e3400014 	movt	r0, #20
  12616c:	ebff73e8 	bl	103114 <rt_kprintf>
  126170:	e30013ed 	movw	r1, #1005	; 0x3ed
  126174:	e3080804 	movw	r0, #34820	; 0x8804
  126178:	e3400014 	movt	r0, #20
  12617c:	ebff93b8 	bl	10b064 <sys_arch_assert>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
  126180:	e3063a44 	movw	r3, #27204	; 0x6a44
  126184:	e3403057 	movt	r3, #87	; 0x57
  126188:	e5933000 	ldr	r3, [r3]
  12618c:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  126190:	e1520003 	cmp	r2, r3
  126194:	1a000001 	bne	1261a0 <tcp_output+0x5c>
    return ERR_OK;
  126198:	e3a03000 	mov	r3, #0
  12619c:	ea000196 	b	1267fc <tcp_output+0x6b8>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
  1261a0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1261a4:	e1d326b0 	ldrh	r2, [r3, #96]	; 0x60
  1261a8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1261ac:	e1d334bc 	ldrh	r3, [r3, #76]	; 0x4c
  1261b0:	e1520003 	cmp	r2, r3
  1261b4:	2a000002 	bcs	1261c4 <tcp_output+0x80>
  1261b8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1261bc:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  1261c0:	ea000001 	b	1261cc <tcp_output+0x88>
  1261c4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1261c8:	e1d334bc 	ldrh	r3, [r3, #76]	; 0x4c
  1261cc:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

  seg = pcb->unsent;
  1261d0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1261d4:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  1261d8:	e50b3010 	str	r3, [fp, #-16]
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
  1261dc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1261e0:	e5d3301e 	ldrb	r3, [r3, #30]
  1261e4:	e2033002 	and	r3, r3, #2
  1261e8:	e3530000 	cmp	r3, #0
  1261ec:	0a000015 	beq	126248 <tcp_output+0x104>
  1261f0:	e51b3010 	ldr	r3, [fp, #-16]
  1261f4:	e3530000 	cmp	r3, #0
  1261f8:	0a00000e 	beq	126238 <tcp_output+0xf4>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
  1261fc:	e51b3010 	ldr	r3, [fp, #-16]
  126200:	e593300c 	ldr	r3, [r3, #12]
  126204:	e5933004 	ldr	r3, [r3, #4]
  126208:	e1a00003 	mov	r0, r3
  12620c:	ebffc177 	bl	1167f0 <lwip_htonl>
  126210:	e1a02000 	mov	r2, r0
  126214:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126218:	e5933048 	ldr	r3, [r3, #72]	; 0x48
  12621c:	e0423003 	sub	r3, r2, r3
  126220:	e51b2010 	ldr	r2, [fp, #-16]
  126224:	e1d220b8 	ldrh	r2, [r2, #8]
  126228:	e0833002 	add	r3, r3, r2
     (seg == NULL ||
  12622c:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  126230:	e1520003 	cmp	r2, r3
  126234:	2a000003 	bcs	126248 <tcp_output+0x104>
     return tcp_send_empty_ack(pcb);
  126238:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  12623c:	ebffff5f 	bl	125fc0 <tcp_send_empty_ack>
  126240:	e1a03000 	mov	r3, r0
  126244:	ea00016c 	b	1267fc <tcp_output+0x6b8>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
  126248:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12624c:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  126250:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  if (useg != NULL) {
  126254:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126258:	e3530000 	cmp	r3, #0
  12625c:	0a000007 	beq	126280 <tcp_output+0x13c>
    for (; useg->next != NULL; useg = useg->next);
  126260:	ea000002 	b	126270 <tcp_output+0x12c>
  126264:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126268:	e5933000 	ldr	r3, [r3]
  12626c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  126270:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126274:	e5933000 	ldr	r3, [r3]
  126278:	e3530000 	cmp	r3, #0
  12627c:	1afffff8 	bne	126264 <tcp_output+0x120>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
  126280:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126284:	e2833004 	add	r3, r3, #4
  126288:	e1a00003 	mov	r0, r3
  12628c:	eb002c39 	bl	131378 <ip4_route>
  126290:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  if (netif == NULL) {
  126294:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126298:	e3530000 	cmp	r3, #0
  12629c:	1a000001 	bne	1262a8 <tcp_output+0x164>
    return ERR_RTE;
  1262a0:	e3e03003 	mvn	r3, #3
  1262a4:	ea000154 	b	1267fc <tcp_output+0x6b8>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
  1262a8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1262ac:	e3530000 	cmp	r3, #0
  1262b0:	0a000003 	beq	1262c4 <tcp_output+0x180>
  1262b4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1262b8:	e5933000 	ldr	r3, [r3]
  1262bc:	e3530000 	cmp	r3, #0
  1262c0:	1a000010 	bne	126308 <tcp_output+0x1c4>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
  1262c4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1262c8:	e3530000 	cmp	r3, #0
  1262cc:	0a000002 	beq	1262dc <tcp_output+0x198>
  1262d0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1262d4:	e2833004 	add	r3, r3, #4
  1262d8:	ea000000 	b	1262e0 <tcp_output+0x19c>
  1262dc:	e3a03000 	mov	r3, #0
  1262e0:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    if (local_ip == NULL) {
  1262e4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1262e8:	e3530000 	cmp	r3, #0
  1262ec:	1a000001 	bne	1262f8 <tcp_output+0x1b4>
      return ERR_RTE;
  1262f0:	e3e03003 	mvn	r3, #3
  1262f4:	ea000140 	b	1267fc <tcp_output+0x6b8>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
  1262f8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1262fc:	e5932000 	ldr	r2, [r3]
  126300:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126304:	e5832000 	str	r2, [r3]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
  126308:	e51b3010 	ldr	r3, [fp, #-16]
  12630c:	e3530000 	cmp	r3, #0
  126310:	0a000113 	beq	126764 <tcp_output+0x620>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
  126314:	e51b3010 	ldr	r3, [fp, #-16]
  126318:	e593300c 	ldr	r3, [r3, #12]
  12631c:	e5933004 	ldr	r3, [r3, #4]
  126320:	e1a00003 	mov	r0, r3
  126324:	ebffc131 	bl	1167f0 <lwip_htonl>
  126328:	e1a02000 	mov	r2, r0
  12632c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126330:	e5933048 	ldr	r3, [r3, #72]	; 0x48
  126334:	e0423003 	sub	r3, r2, r3
  126338:	e51b2010 	ldr	r2, [fp, #-16]
  12633c:	e1d220b8 	ldrh	r2, [r2, #8]
  126340:	e0833002 	add	r3, r3, r2
  if (seg != NULL &&
  126344:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  126348:	e1520003 	cmp	r2, r3
  12634c:	2a000104 	bcs	126764 <tcp_output+0x620>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
  126350:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  126354:	e3530000 	cmp	r3, #0
  126358:	0a000101 	beq	126764 <tcp_output+0x620>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
  12635c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126360:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  126364:	e1a02003 	mov	r2, r3
  126368:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12636c:	e1530002 	cmp	r3, r2
  126370:	1a0000fb 	bne	126764 <tcp_output+0x620>
  126374:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126378:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  12637c:	e3530000 	cmp	r3, #0
  126380:	1a0000f7 	bne	126764 <tcp_output+0x620>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
  126384:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126388:	e5d330a1 	ldrb	r3, [r3, #161]	; 0xa1
  12638c:	e3530000 	cmp	r3, #0
  126390:	1a000106 	bne	1267b0 <tcp_output+0x66c>
      pcb->persist_cnt = 0;
  126394:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126398:	e3a02000 	mov	r2, #0
  12639c:	e5c320a0 	strb	r2, [r3, #160]	; 0xa0
      pcb->persist_backoff = 1;
  1263a0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1263a4:	e3a02001 	mov	r2, #1
  1263a8:	e5c320a1 	strb	r2, [r3, #161]	; 0xa1
    }
    goto output_done;
  1263ac:	ea0000ff 	b	1267b0 <tcp_output+0x66c>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
  1263b0:	e51b3010 	ldr	r3, [fp, #-16]
  1263b4:	e593300c 	ldr	r3, [r3, #12]
  1263b8:	e1d330bc 	ldrh	r3, [r3, #12]
  1263bc:	e6ff3073 	uxth	r3, r3
  1263c0:	e1a00003 	mov	r0, r3
  1263c4:	ebffc0fd 	bl	1167c0 <lwip_htons>
  1263c8:	e1a03000 	mov	r3, r0
  1263cc:	e2033004 	and	r3, r3, #4
  1263d0:	e3530000 	cmp	r3, #0
  1263d4:	0a000006 	beq	1263f4 <tcp_output+0x2b0>
  1263d8:	e3080bd4 	movw	r0, #35796	; 0x8bd4
  1263dc:	e3400014 	movt	r0, #20
  1263e0:	ebff734b 	bl	103114 <rt_kprintf>
  1263e4:	e3001446 	movw	r1, #1094	; 0x446
  1263e8:	e3080804 	movw	r0, #34820	; 0x8804
  1263ec:	e3400014 	movt	r0, #20
  1263f0:	ebff931b 	bl	10b064 <sys_arch_assert>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
  1263f4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1263f8:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  1263fc:	e3530000 	cmp	r3, #0
  126400:	0a00001c 	beq	126478 <tcp_output+0x334>
  126404:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126408:	e5d3301e 	ldrb	r3, [r3, #30]
  12640c:	e2033044 	and	r3, r3, #68	; 0x44
  126410:	e3530000 	cmp	r3, #0
  126414:	1a000017 	bne	126478 <tcp_output+0x334>
  126418:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12641c:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  126420:	e3530000 	cmp	r3, #0
  126424:	0a00000b 	beq	126458 <tcp_output+0x314>
  126428:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12642c:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  126430:	e5933000 	ldr	r3, [r3]
  126434:	e3530000 	cmp	r3, #0
  126438:	1a00000e 	bne	126478 <tcp_output+0x334>
  12643c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126440:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  126444:	e1d320b8 	ldrh	r2, [r3, #8]
  126448:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12644c:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  126450:	e1520003 	cmp	r2, r3
  126454:	2a000007 	bcs	126478 <tcp_output+0x334>
  126458:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12645c:	e1d336b4 	ldrh	r3, [r3, #100]	; 0x64
  126460:	e3530000 	cmp	r3, #0
  126464:	0a000003 	beq	126478 <tcp_output+0x334>
  126468:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12646c:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  126470:	e3530015 	cmp	r3, #21
  126474:	9a000001 	bls	126480 <tcp_output+0x33c>
  126478:	e3a03001 	mov	r3, #1
  12647c:	ea000000 	b	126484 <tcp_output+0x340>
  126480:	e3a03000 	mov	r3, #0
  126484:	e3530000 	cmp	r3, #0
  126488:	1a000004 	bne	1264a0 <tcp_output+0x35c>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
  12648c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126490:	e5d3301e 	ldrb	r3, [r3, #30]
  126494:	e20330a0 	and	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
  126498:	e3530000 	cmp	r3, #0
  12649c:	0a0000c5 	beq	1267b8 <tcp_output+0x674>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
  1264a0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1264a4:	e5933014 	ldr	r3, [r3, #20]
  1264a8:	e3530002 	cmp	r3, #2
  1264ac:	0a00000c 	beq	1264e4 <tcp_output+0x3a0>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
  1264b0:	e51b3010 	ldr	r3, [fp, #-16]
  1264b4:	e593300c 	ldr	r3, [r3, #12]
  1264b8:	e1d330bc 	ldrh	r3, [r3, #12]
  1264bc:	e6ff4073 	uxth	r4, r3
  1264c0:	e3a00010 	mov	r0, #16
  1264c4:	ebffc0bd 	bl	1167c0 <lwip_htons>
  1264c8:	e1a03000 	mov	r3, r0
  1264cc:	e1a02003 	mov	r2, r3
  1264d0:	e51b3010 	ldr	r3, [fp, #-16]
  1264d4:	e593300c 	ldr	r3, [r3, #12]
  1264d8:	e1842002 	orr	r2, r4, r2
  1264dc:	e6ff2072 	uxth	r2, r2
  1264e0:	e1c320bc 	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
  1264e4:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1264e8:	e51b1030 	ldr	r1, [fp, #-48]	; 0xffffffd0
  1264ec:	e51b0010 	ldr	r0, [fp, #-16]
  1264f0:	eb0000c4 	bl	126808 <tcp_output_segment>
  1264f4:	e1a03000 	mov	r3, r0
  1264f8:	e54b3025 	strb	r3, [fp, #-37]	; 0xffffffdb
    if (err != ERR_OK) {
  1264fc:	e15b32d5 	ldrsb	r3, [fp, #-37]	; 0xffffffdb
  126500:	e3530000 	cmp	r3, #0
  126504:	0a000008 	beq	12652c <tcp_output+0x3e8>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
  126508:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12650c:	e5d3301e 	ldrb	r3, [r3, #30]
  126510:	e1e03c83 	mvn	r3, r3, lsl #25
  126514:	e1e03ca3 	mvn	r3, r3, lsr #25
  126518:	e6ef2073 	uxtb	r2, r3
  12651c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126520:	e5c3201e 	strb	r2, [r3, #30]
      return err;
  126524:	e15b32d5 	ldrsb	r3, [fp, #-37]	; 0xffffffdb
  126528:	ea0000b3 	b	1267fc <tcp_output+0x6b8>
    }
    pcb->unsent = seg->next;
  12652c:	e51b3010 	ldr	r3, [fp, #-16]
  126530:	e5932000 	ldr	r2, [r3]
  126534:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126538:	e583206c 	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
  12653c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126540:	e5933014 	ldr	r3, [r3, #20]
  126544:	e3530002 	cmp	r3, #2
  126548:	0a000005 	beq	126564 <tcp_output+0x420>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
  12654c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126550:	e5d3301e 	ldrb	r3, [r3, #30]
  126554:	e3c33003 	bic	r3, r3, #3
  126558:	e6ef2073 	uxtb	r2, r3
  12655c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126560:	e5c3201e 	strb	r2, [r3, #30]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
  126564:	e51b3010 	ldr	r3, [fp, #-16]
  126568:	e593300c 	ldr	r3, [r3, #12]
  12656c:	e5933004 	ldr	r3, [r3, #4]
  126570:	e1a00003 	mov	r0, r3
  126574:	ebffc09d 	bl	1167f0 <lwip_htonl>
  126578:	e1a04000 	mov	r4, r0
  12657c:	e51b3010 	ldr	r3, [fp, #-16]
  126580:	e1d330b8 	ldrh	r3, [r3, #8]
  126584:	e1a05003 	mov	r5, r3
  126588:	e51b3010 	ldr	r3, [fp, #-16]
  12658c:	e593300c 	ldr	r3, [r3, #12]
  126590:	e1d330bc 	ldrh	r3, [r3, #12]
  126594:	e6ff3073 	uxth	r3, r3
  126598:	e1a00003 	mov	r0, r3
  12659c:	ebffc087 	bl	1167c0 <lwip_htons>
  1265a0:	e1a03000 	mov	r3, r0
  1265a4:	e2033003 	and	r3, r3, #3
  1265a8:	e3530000 	cmp	r3, #0
  1265ac:	0a000001 	beq	1265b8 <tcp_output+0x474>
  1265b0:	e3a03001 	mov	r3, #1
  1265b4:	ea000000 	b	1265bc <tcp_output+0x478>
  1265b8:	e3a03000 	mov	r3, #0
  1265bc:	e0833005 	add	r3, r3, r5
  1265c0:	e0843003 	add	r3, r4, r3
  1265c4:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
  1265c8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1265cc:	e5932050 	ldr	r2, [r3, #80]	; 0x50
  1265d0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1265d4:	e0423003 	sub	r3, r2, r3
  1265d8:	e3530000 	cmp	r3, #0
  1265dc:	aa000002 	bge	1265ec <tcp_output+0x4a8>
      pcb->snd_nxt = snd_nxt;
  1265e0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1265e4:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  1265e8:	e5832050 	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
  1265ec:	e51b3010 	ldr	r3, [fp, #-16]
  1265f0:	e1d330b8 	ldrh	r3, [r3, #8]
  1265f4:	e1a04003 	mov	r4, r3
  1265f8:	e51b3010 	ldr	r3, [fp, #-16]
  1265fc:	e593300c 	ldr	r3, [r3, #12]
  126600:	e1d330bc 	ldrh	r3, [r3, #12]
  126604:	e6ff3073 	uxth	r3, r3
  126608:	e1a00003 	mov	r0, r3
  12660c:	ebffc06b 	bl	1167c0 <lwip_htons>
  126610:	e1a03000 	mov	r3, r0
  126614:	e2033003 	and	r3, r3, #3
  126618:	e3530000 	cmp	r3, #0
  12661c:	0a000001 	beq	126628 <tcp_output+0x4e4>
  126620:	e3a03001 	mov	r3, #1
  126624:	ea000000 	b	12662c <tcp_output+0x4e8>
  126628:	e3a03000 	mov	r3, #0
  12662c:	e0833004 	add	r3, r3, r4
  126630:	e3530000 	cmp	r3, #0
  126634:	0a000045 	beq	126750 <tcp_output+0x60c>
      seg->next = NULL;
  126638:	e51b3010 	ldr	r3, [fp, #-16]
  12663c:	e3a02000 	mov	r2, #0
  126640:	e5832000 	str	r2, [r3]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
  126644:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126648:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  12664c:	e3530000 	cmp	r3, #0
  126650:	1a000005 	bne	12666c <tcp_output+0x528>
        pcb->unacked = seg;
  126654:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  126658:	e51b2010 	ldr	r2, [fp, #-16]
  12665c:	e5832070 	str	r2, [r3, #112]	; 0x70
        useg = seg;
  126660:	e51b3010 	ldr	r3, [fp, #-16]
  126664:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  126668:	ea00003a 	b	126758 <tcp_output+0x614>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
  12666c:	e51b3010 	ldr	r3, [fp, #-16]
  126670:	e593300c 	ldr	r3, [r3, #12]
  126674:	e5933004 	ldr	r3, [r3, #4]
  126678:	e1a00003 	mov	r0, r3
  12667c:	ebffc05b 	bl	1167f0 <lwip_htonl>
  126680:	e1a04000 	mov	r4, r0
  126684:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126688:	e593300c 	ldr	r3, [r3, #12]
  12668c:	e5933004 	ldr	r3, [r3, #4]
  126690:	e1a00003 	mov	r0, r3
  126694:	ebffc055 	bl	1167f0 <lwip_htonl>
  126698:	e1a03000 	mov	r3, r0
  12669c:	e0443003 	sub	r3, r4, r3
  1266a0:	e3530000 	cmp	r3, #0
  1266a4:	aa000022 	bge	126734 <tcp_output+0x5f0>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
  1266a8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1266ac:	e2833070 	add	r3, r3, #112	; 0x70
  1266b0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
          while (*cur_seg &&
  1266b4:	ea000002 	b	1266c4 <tcp_output+0x580>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
  1266b8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1266bc:	e5933000 	ldr	r3, [r3]
  1266c0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
          while (*cur_seg &&
  1266c4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1266c8:	e5933000 	ldr	r3, [r3]
  1266cc:	e3530000 	cmp	r3, #0
  1266d0:	0a00000f 	beq	126714 <tcp_output+0x5d0>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
  1266d4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1266d8:	e5933000 	ldr	r3, [r3]
  1266dc:	e593300c 	ldr	r3, [r3, #12]
  1266e0:	e5933004 	ldr	r3, [r3, #4]
  1266e4:	e1a00003 	mov	r0, r3
  1266e8:	ebffc040 	bl	1167f0 <lwip_htonl>
  1266ec:	e1a04000 	mov	r4, r0
  1266f0:	e51b3010 	ldr	r3, [fp, #-16]
  1266f4:	e593300c 	ldr	r3, [r3, #12]
  1266f8:	e5933004 	ldr	r3, [r3, #4]
  1266fc:	e1a00003 	mov	r0, r3
  126700:	ebffc03a 	bl	1167f0 <lwip_htonl>
  126704:	e1a03000 	mov	r3, r0
  126708:	e0443003 	sub	r3, r4, r3
          while (*cur_seg &&
  12670c:	e3530000 	cmp	r3, #0
  126710:	baffffe8 	blt	1266b8 <tcp_output+0x574>
          }
          seg->next = (*cur_seg);
  126714:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126718:	e5932000 	ldr	r2, [r3]
  12671c:	e51b3010 	ldr	r3, [fp, #-16]
  126720:	e5832000 	str	r2, [r3]
          (*cur_seg) = seg;
  126724:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126728:	e51b2010 	ldr	r2, [fp, #-16]
  12672c:	e5832000 	str	r2, [r3]
  126730:	ea000008 	b	126758 <tcp_output+0x614>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
  126734:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126738:	e51b2010 	ldr	r2, [fp, #-16]
  12673c:	e5832000 	str	r2, [r3]
          useg = useg->next;
  126740:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126744:	e5933000 	ldr	r3, [r3]
  126748:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  12674c:	ea000001 	b	126758 <tcp_output+0x614>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
  126750:	e51b0010 	ldr	r0, [fp, #-16]
  126754:	ebffe3c2 	bl	11f664 <tcp_seg_free>
    }
    seg = pcb->unsent;
  126758:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12675c:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  126760:	e50b3010 	str	r3, [fp, #-16]
  while (seg != NULL &&
  126764:	e51b3010 	ldr	r3, [fp, #-16]
  126768:	e3530000 	cmp	r3, #0
  12676c:	0a000013 	beq	1267c0 <tcp_output+0x67c>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
  126770:	e51b3010 	ldr	r3, [fp, #-16]
  126774:	e593300c 	ldr	r3, [r3, #12]
  126778:	e5933004 	ldr	r3, [r3, #4]
  12677c:	e1a00003 	mov	r0, r3
  126780:	ebffc01a 	bl	1167f0 <lwip_htonl>
  126784:	e1a02000 	mov	r2, r0
  126788:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12678c:	e5933048 	ldr	r3, [r3, #72]	; 0x48
  126790:	e0423003 	sub	r3, r2, r3
  126794:	e51b2010 	ldr	r2, [fp, #-16]
  126798:	e1d220b8 	ldrh	r2, [r2, #8]
  12679c:	e0833002 	add	r3, r3, r2
  while (seg != NULL &&
  1267a0:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1267a4:	e1520003 	cmp	r2, r3
  1267a8:	2affff00 	bcs	1263b0 <tcp_output+0x26c>
  }
output_done:
  1267ac:	ea000003 	b	1267c0 <tcp_output+0x67c>
    goto output_done;
  1267b0:	e320f000 	nop	{0}
  1267b4:	ea000002 	b	1267c4 <tcp_output+0x680>
      break;
  1267b8:	e320f000 	nop	{0}
  1267bc:	ea000000 	b	1267c4 <tcp_output+0x680>
output_done:
  1267c0:	e320f000 	nop	{0}
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
  1267c4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1267c8:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  1267cc:	e3530000 	cmp	r3, #0
  1267d0:	1a000002 	bne	1267e0 <tcp_output+0x69c>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
  1267d4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1267d8:	e3a02000 	mov	r2, #0
  1267dc:	e1c326b8 	strh	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
  1267e0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1267e4:	e5d3301e 	ldrb	r3, [r3, #30]
  1267e8:	e203307f 	and	r3, r3, #127	; 0x7f
  1267ec:	e6ef2073 	uxtb	r2, r3
  1267f0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1267f4:	e5c3201e 	strb	r2, [r3, #30]
  return ERR_OK;
  1267f8:	e3a03000 	mov	r3, #0
}
  1267fc:	e1a00003 	mov	r0, r3
  126800:	e24bd00c 	sub	sp, fp, #12
  126804:	e8bd8830 	pop	{r4, r5, fp, pc}

00126808 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
  126808:	e92d4810 	push	{r4, fp, lr}
  12680c:	e28db008 	add	fp, sp, #8
  126810:	e24dd034 	sub	sp, sp, #52	; 0x34
  126814:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  126818:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  12681c:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
  126820:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126824:	e5933004 	ldr	r3, [r3, #4]
  126828:	e1d330be 	ldrh	r3, [r3, #14]
  12682c:	e3530001 	cmp	r3, #1
  126830:	0a000001 	beq	12683c <tcp_output_segment+0x34>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
  126834:	e3a03000 	mov	r3, #0
  126838:	ea0000a4 	b	126ad0 <tcp_output_segment+0x2c8>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
  12683c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  126840:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  126844:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126848:	e593400c 	ldr	r4, [r3, #12]
  12684c:	e1a00002 	mov	r0, r2
  126850:	ebffbfe6 	bl	1167f0 <lwip_htonl>
  126854:	e1a03000 	mov	r3, r0
  126858:	e5843008 	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  12685c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  126860:	e1d322be 	ldrh	r2, [r3, #46]	; 0x2e
  126864:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126868:	e593400c 	ldr	r4, [r3, #12]
  12686c:	e1a00002 	mov	r0, r2
  126870:	ebffbfd2 	bl	1167c0 <lwip_htons>
  126874:	e1a03000 	mov	r3, r0
  126878:	e1c430be 	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
  12687c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  126880:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  126884:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  126888:	e1d222be 	ldrh	r2, [r2, #46]	; 0x2e
  12688c:	e0832002 	add	r2, r3, r2
  126890:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  126894:	e5832030 	str	r2, [r3, #48]	; 0x30

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
  126898:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12689c:	e593300c 	ldr	r3, [r3, #12]
  1268a0:	e2833014 	add	r3, r3, #20
  1268a4:	e50b3010 	str	r3, [fp, #-16]
  if (seg->flags & TF_SEG_OPTS_MSS) {
  1268a8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1268ac:	e5d3300a 	ldrb	r3, [r3, #10]
  1268b0:	e2033001 	and	r3, r3, #1
  1268b4:	e3530000 	cmp	r3, #0
  1268b8:	0a000010 	beq	126900 <tcp_output_segment+0xf8>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
  1268bc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1268c0:	e2833004 	add	r3, r3, #4
  1268c4:	e1a01003 	mov	r1, r3
  1268c8:	e30005b4 	movw	r0, #1460	; 0x5b4
  1268cc:	ebffe664 	bl	120264 <tcp_eff_send_mss_impl>
  1268d0:	e1a03000 	mov	r3, r0
  1268d4:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
  1268d8:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  1268dc:	e3833781 	orr	r3, r3, #33816576	; 0x2040000
  1268e0:	e1a00003 	mov	r0, r3
  1268e4:	ebffbfc1 	bl	1167f0 <lwip_htonl>
  1268e8:	e1a02000 	mov	r2, r0
  1268ec:	e51b3010 	ldr	r3, [fp, #-16]
  1268f0:	e5832000 	str	r2, [r3]
    opts += 1;
  1268f4:	e51b3010 	ldr	r3, [fp, #-16]
  1268f8:	e2833004 	add	r3, r3, #4
  1268fc:	e50b3010 	str	r3, [fp, #-16]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
  126900:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  126904:	e1d333f4 	ldrsh	r3, [r3, #52]	; 0x34
  126908:	e3530000 	cmp	r3, #0
  12690c:	aa000002 	bge	12691c <tcp_output_segment+0x114>
    pcb->rtime = 0;
  126910:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  126914:	e3a02000 	mov	r2, #0
  126918:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
  }

  if (pcb->rttest == 0) {
  12691c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  126920:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  126924:	e3530000 	cmp	r3, #0
  126928:	1a00000c 	bne	126960 <tcp_output_segment+0x158>
    pcb->rttest = tcp_ticks;
  12692c:	e3063a34 	movw	r3, #27188	; 0x6a34
  126930:	e3403057 	movt	r3, #87	; 0x57
  126934:	e5932000 	ldr	r2, [r3]
  126938:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  12693c:	e5832038 	str	r2, [r3, #56]	; 0x38
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
  126940:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126944:	e593300c 	ldr	r3, [r3, #12]
  126948:	e5933004 	ldr	r3, [r3, #4]
  12694c:	e1a00003 	mov	r0, r3
  126950:	ebffbfa6 	bl	1167f0 <lwip_htonl>
  126954:	e1a02000 	mov	r2, r0
  126958:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  12695c:	e583203c 	str	r2, [r3, #60]	; 0x3c
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
  126960:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126964:	e593300c 	ldr	r3, [r3, #12]
  126968:	e1a02003 	mov	r2, r3
  12696c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126970:	e5933004 	ldr	r3, [r3, #4]
  126974:	e5933004 	ldr	r3, [r3, #4]
  126978:	e0423003 	sub	r3, r2, r3
  12697c:	e14b31b4 	strh	r3, [fp, #-20]	; 0xffffffec
  if (len == 0) {
  126980:	e15b31b4 	ldrh	r3, [fp, #-20]	; 0xffffffec
  126984:	e3530000 	cmp	r3, #0
  126988:	1a000006 	bne	1269a8 <tcp_output_segment+0x1a0>
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  12698c:	e3063840 	movw	r3, #26688	; 0x6840
  126990:	e3403057 	movt	r3, #87	; 0x57
  126994:	e593317c 	ldr	r3, [r3, #380]	; 0x17c
  126998:	e2832001 	add	r2, r3, #1
  12699c:	e3063840 	movw	r3, #26688	; 0x6840
  1269a0:	e3403057 	movt	r3, #87	; 0x57
  1269a4:	e583217c 	str	r2, [r3, #380]	; 0x17c
  }

  seg->p->len -= len;
  1269a8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1269ac:	e5933004 	ldr	r3, [r3, #4]
  1269b0:	e1d310ba 	ldrh	r1, [r3, #10]
  1269b4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1269b8:	e5933004 	ldr	r3, [r3, #4]
  1269bc:	e15b21b4 	ldrh	r2, [fp, #-20]	; 0xffffffec
  1269c0:	e0412002 	sub	r2, r1, r2
  1269c4:	e6ff2072 	uxth	r2, r2
  1269c8:	e1c320ba 	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
  1269cc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1269d0:	e5933004 	ldr	r3, [r3, #4]
  1269d4:	e1d310b8 	ldrh	r1, [r3, #8]
  1269d8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1269dc:	e5933004 	ldr	r3, [r3, #4]
  1269e0:	e15b21b4 	ldrh	r2, [fp, #-20]	; 0xffffffec
  1269e4:	e0412002 	sub	r2, r1, r2
  1269e8:	e6ff2072 	uxth	r2, r2
  1269ec:	e1c320b8 	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
  1269f0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1269f4:	e5933004 	ldr	r3, [r3, #4]
  1269f8:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1269fc:	e592200c 	ldr	r2, [r2, #12]
  126a00:	e5832004 	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
  126a04:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126a08:	e593300c 	ldr	r3, [r3, #12]
  126a0c:	e3a02000 	mov	r2, #0
  126a10:	e5c32010 	strb	r2, [r3, #16]
  126a14:	e3a02000 	mov	r2, #0
  126a18:	e5c32011 	strb	r2, [r3, #17]
                  seg->tcphdr->chksum, chksum_slow));
      seg->tcphdr->chksum = chksum_slow;
    }
#endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
#else /* TCP_CHECKSUM_ON_COPY */
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
  126a1c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126a20:	e5930004 	ldr	r0, [r3, #4]
      seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
  126a24:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126a28:	e5933004 	ldr	r3, [r3, #4]
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
  126a2c:	e1d310b8 	ldrh	r1, [r3, #8]
      seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
  126a30:	e51bc024 	ldr	ip, [fp, #-36]	; 0xffffffdc
  126a34:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  126a38:	e2833004 	add	r3, r3, #4
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
  126a3c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  126a40:	e592400c 	ldr	r4, [r2, #12]
  126a44:	e58d3000 	str	r3, [sp]
  126a48:	e1a0300c 	mov	r3, ip
  126a4c:	e1a02001 	mov	r2, r1
  126a50:	e3a01006 	mov	r1, #6
  126a54:	ebffc778 	bl	11883c <ip_chksum_pseudo>
  126a58:	e1a03000 	mov	r3, r0
  126a5c:	e1c431b0 	strh	r3, [r4, #16]
#endif /* TCP_CHECKSUM_ON_COPY */
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);
  126a60:	e3063840 	movw	r3, #26688	; 0x6840
  126a64:	e3403057 	movt	r3, #87	; 0x57
  126a68:	e1d33abc 	ldrh	r3, [r3, #172]	; 0xac
  126a6c:	e2833001 	add	r3, r3, #1
  126a70:	e6ff2073 	uxth	r2, r3
  126a74:	e3063840 	movw	r3, #26688	; 0x6840
  126a78:	e3403057 	movt	r3, #87	; 0x57
  126a7c:	e1c32abc 	strh	r2, [r3, #172]	; 0xac

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
  126a80:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126a84:	e5930004 	ldr	r0, [r3, #4]
  126a88:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  126a8c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  126a90:	e283c004 	add	ip, r3, #4
  126a94:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  126a98:	e5d3e00a 	ldrb	lr, [r3, #10]
  126a9c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  126aa0:	e5d33009 	ldrb	r3, [r3, #9]
  126aa4:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  126aa8:	e58d2008 	str	r2, [sp, #8]
  126aac:	e3a02006 	mov	r2, #6
  126ab0:	e58d2004 	str	r2, [sp, #4]
  126ab4:	e58d3000 	str	r3, [sp]
  126ab8:	e1a0300e 	mov	r3, lr
  126abc:	e1a0200c 	mov	r2, ip
  126ac0:	eb002d05 	bl	131edc <ip4_output_if>
  126ac4:	e1a03000 	mov	r3, r0
  126ac8:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
  126acc:	e15b31d5 	ldrsb	r3, [fp, #-21]	; 0xffffffeb
}
  126ad0:	e1a00003 	mov	r0, r3
  126ad4:	e24bd008 	sub	sp, fp, #8
  126ad8:	e8bd8810 	pop	{r4, fp, pc}

00126adc <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
  126adc:	e92d4800 	push	{fp, lr}
  126ae0:	e28db004 	add	fp, sp, #4
  126ae4:	e24dd030 	sub	sp, sp, #48	; 0x30
  126ae8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  126aec:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  126af0:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  126af4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
  126af8:	e3a02000 	mov	r2, #0
  126afc:	e3a01014 	mov	r1, #20
  126b00:	e3a00001 	mov	r0, #1
  126b04:	ebffce5d 	bl	11a480 <pbuf_alloc>
  126b08:	e50b0008 	str	r0, [fp, #-8]
  if (p == NULL) {
  126b0c:	e51b3008 	ldr	r3, [fp, #-8]
  126b10:	e3530000 	cmp	r3, #0
  126b14:	0a000069 	beq	126cc0 <tcp_rst+0x1e4>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
  126b18:	e51b3008 	ldr	r3, [fp, #-8]
  126b1c:	e1d330ba 	ldrh	r3, [r3, #10]
  126b20:	e3530013 	cmp	r3, #19
  126b24:	8a000006 	bhi	126b44 <tcp_rst+0x68>
  126b28:	e30807d4 	movw	r0, #34772	; 0x87d4
  126b2c:	e3400014 	movt	r0, #20
  126b30:	ebff7177 	bl	103114 <rt_kprintf>
  126b34:	e300154d 	movw	r1, #1357	; 0x54d
  126b38:	e3080804 	movw	r0, #34820	; 0x8804
  126b3c:	e3400014 	movt	r0, #20
  126b40:	ebff9147 	bl	10b064 <sys_arch_assert>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
  126b44:	e51b3008 	ldr	r3, [fp, #-8]
  126b48:	e5933004 	ldr	r3, [r3, #4]
  126b4c:	e50b300c 	str	r3, [fp, #-12]
  tcphdr->src = lwip_htons(local_port);
  126b50:	e1db30b4 	ldrh	r3, [fp, #4]
  126b54:	e1a00003 	mov	r0, r3
  126b58:	ebffbf18 	bl	1167c0 <lwip_htons>
  126b5c:	e1a03000 	mov	r3, r0
  126b60:	e1a02003 	mov	r2, r3
  126b64:	e51b300c 	ldr	r3, [fp, #-12]
  126b68:	e1c320b0 	strh	r2, [r3]
  tcphdr->dest = lwip_htons(remote_port);
  126b6c:	e1db30b8 	ldrh	r3, [fp, #8]
  126b70:	e1a00003 	mov	r0, r3
  126b74:	ebffbf11 	bl	1167c0 <lwip_htons>
  126b78:	e1a03000 	mov	r3, r0
  126b7c:	e1a02003 	mov	r2, r3
  126b80:	e51b300c 	ldr	r3, [fp, #-12]
  126b84:	e1c320b2 	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
  126b88:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  126b8c:	ebffbf17 	bl	1167f0 <lwip_htonl>
  126b90:	e1a02000 	mov	r2, r0
  126b94:	e51b300c 	ldr	r3, [fp, #-12]
  126b98:	e5832004 	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
  126b9c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  126ba0:	ebffbf12 	bl	1167f0 <lwip_htonl>
  126ba4:	e1a02000 	mov	r2, r0
  126ba8:	e51b300c 	ldr	r3, [fp, #-12]
  126bac:	e5832008 	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
  126bb0:	e3050014 	movw	r0, #20500	; 0x5014
  126bb4:	ebffbf01 	bl	1167c0 <lwip_htons>
  126bb8:	e1a03000 	mov	r3, r0
  126bbc:	e1a02003 	mov	r2, r3
  126bc0:	e51b300c 	ldr	r3, [fp, #-12]
  126bc4:	e1c320bc 	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
  126bc8:	e51b300c 	ldr	r3, [fp, #-12]
  126bcc:	e3e02000 	mvn	r2, #0
  126bd0:	e5c3200e 	strb	r2, [r3, #14]
  126bd4:	e3e02000 	mvn	r2, #0
  126bd8:	e5c3200f 	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
  126bdc:	e51b300c 	ldr	r3, [fp, #-12]
  126be0:	e3a02000 	mov	r2, #0
  126be4:	e5c32010 	strb	r2, [r3, #16]
  126be8:	e3a02000 	mov	r2, #0
  126bec:	e5c32011 	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
  126bf0:	e51b300c 	ldr	r3, [fp, #-12]
  126bf4:	e3a02000 	mov	r2, #0
  126bf8:	e5c32012 	strb	r2, [r3, #18]
  126bfc:	e3a02000 	mov	r2, #0
  126c00:	e5c32013 	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  126c04:	e3063840 	movw	r3, #26688	; 0x6840
  126c08:	e3403057 	movt	r3, #87	; 0x57
  126c0c:	e1d33abc 	ldrh	r3, [r3, #172]	; 0xac
  126c10:	e2833001 	add	r3, r3, #1
  126c14:	e6ff2073 	uxth	r2, r3
  126c18:	e3063840 	movw	r3, #26688	; 0x6840
  126c1c:	e3403057 	movt	r3, #87	; 0x57
  126c20:	e1c32abc 	strh	r2, [r3, #172]	; 0xac
  MIB2_STATS_INC(mib2.tcpoutrsts);
  126c24:	e3063840 	movw	r3, #26688	; 0x6840
  126c28:	e3403057 	movt	r3, #87	; 0x57
  126c2c:	e593318c 	ldr	r3, [r3, #396]	; 0x18c
  126c30:	e2832001 	add	r2, r3, #1
  126c34:	e3063840 	movw	r3, #26688	; 0x6840
  126c38:	e3403057 	movt	r3, #87	; 0x57
  126c3c:	e583218c 	str	r2, [r3, #396]	; 0x18c

  netif = ip_route(local_ip, remote_ip);
  126c40:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  126c44:	eb0029cb 	bl	131378 <ip4_route>
  126c48:	e50b0010 	str	r0, [fp, #-16]
  if (netif != NULL) {
  126c4c:	e51b3010 	ldr	r3, [fp, #-16]
  126c50:	e3530000 	cmp	r3, #0
  126c54:	0a000016 	beq	126cb4 <tcp_rst+0x1d8>
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
  126c58:	e51b3008 	ldr	r3, [fp, #-8]
  126c5c:	e1d320b8 	ldrh	r2, [r3, #8]
  126c60:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  126c64:	e58d3000 	str	r3, [sp]
  126c68:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  126c6c:	e3a01006 	mov	r1, #6
  126c70:	e51b0008 	ldr	r0, [fp, #-8]
  126c74:	ebffc6f0 	bl	11883c <ip_chksum_pseudo>
  126c78:	e1a03000 	mov	r3, r0
  126c7c:	e1a02003 	mov	r2, r3
  126c80:	e51b300c 	ldr	r3, [fp, #-12]
  126c84:	e1c321b0 	strh	r2, [r3, #16]
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
  126c88:	e51b3010 	ldr	r3, [fp, #-16]
  126c8c:	e58d3008 	str	r3, [sp, #8]
  126c90:	e3a03006 	mov	r3, #6
  126c94:	e58d3004 	str	r3, [sp, #4]
  126c98:	e3a03000 	mov	r3, #0
  126c9c:	e58d3000 	str	r3, [sp]
  126ca0:	e3a030ff 	mov	r3, #255	; 0xff
  126ca4:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  126ca8:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  126cac:	e51b0008 	ldr	r0, [fp, #-8]
  126cb0:	eb002c89 	bl	131edc <ip4_output_if>
  }
  pbuf_free(p);
  126cb4:	e51b0008 	ldr	r0, [fp, #-8]
  126cb8:	ebffd0f7 	bl	11b09c <pbuf_free>
  126cbc:	ea000000 	b	126cc4 <tcp_rst+0x1e8>
    return;
  126cc0:	e320f000 	nop	{0}
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
  126cc4:	e24bd004 	sub	sp, fp, #4
  126cc8:	e8bd8800 	pop	{fp, pc}

00126ccc <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
  126ccc:	e92d4800 	push	{fp, lr}
  126cd0:	e28db004 	add	fp, sp, #4
  126cd4:	e24dd010 	sub	sp, sp, #16
  126cd8:	e50b0010 	str	r0, [fp, #-16]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
  126cdc:	e51b3010 	ldr	r3, [fp, #-16]
  126ce0:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  126ce4:	e3530000 	cmp	r3, #0
  126ce8:	0a000025 	beq	126d84 <tcp_rexmit_rto+0xb8>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
  126cec:	e51b3010 	ldr	r3, [fp, #-16]
  126cf0:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  126cf4:	e50b3008 	str	r3, [fp, #-8]
  126cf8:	ea000002 	b	126d08 <tcp_rexmit_rto+0x3c>
  126cfc:	e51b3008 	ldr	r3, [fp, #-8]
  126d00:	e5933000 	ldr	r3, [r3]
  126d04:	e50b3008 	str	r3, [fp, #-8]
  126d08:	e51b3008 	ldr	r3, [fp, #-8]
  126d0c:	e5933000 	ldr	r3, [r3]
  126d10:	e3530000 	cmp	r3, #0
  126d14:	1afffff8 	bne	126cfc <tcp_rexmit_rto+0x30>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
  126d18:	e51b3010 	ldr	r3, [fp, #-16]
  126d1c:	e593206c 	ldr	r2, [r3, #108]	; 0x6c
  126d20:	e51b3008 	ldr	r3, [fp, #-8]
  126d24:	e5832000 	str	r2, [r3]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
  126d28:	e51b3010 	ldr	r3, [fp, #-16]
  126d2c:	e5932070 	ldr	r2, [r3, #112]	; 0x70
  126d30:	e51b3010 	ldr	r3, [fp, #-16]
  126d34:	e583206c 	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
  126d38:	e51b3010 	ldr	r3, [fp, #-16]
  126d3c:	e3a02000 	mov	r2, #0
  126d40:	e5832070 	str	r2, [r3, #112]	; 0x70

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
  126d44:	e51b3010 	ldr	r3, [fp, #-16]
  126d48:	e5d33046 	ldrb	r3, [r3, #70]	; 0x46
  126d4c:	e35300ff 	cmp	r3, #255	; 0xff
  126d50:	0a000005 	beq	126d6c <tcp_rexmit_rto+0xa0>
    ++pcb->nrtx;
  126d54:	e51b3010 	ldr	r3, [fp, #-16]
  126d58:	e5d33046 	ldrb	r3, [r3, #70]	; 0x46
  126d5c:	e2833001 	add	r3, r3, #1
  126d60:	e6ef2073 	uxtb	r2, r3
  126d64:	e51b3010 	ldr	r3, [fp, #-16]
  126d68:	e5c32046 	strb	r2, [r3, #70]	; 0x46
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
  126d6c:	e51b3010 	ldr	r3, [fp, #-16]
  126d70:	e3a02000 	mov	r2, #0
  126d74:	e5832038 	str	r2, [r3, #56]	; 0x38

  /* Do the actual retransmission */
  tcp_output(pcb);
  126d78:	e51b0010 	ldr	r0, [fp, #-16]
  126d7c:	ebfffcf0 	bl	126144 <tcp_output>
  126d80:	ea000000 	b	126d88 <tcp_rexmit_rto+0xbc>
    return;
  126d84:	e320f000 	nop	{0}
}
  126d88:	e24bd004 	sub	sp, fp, #4
  126d8c:	e8bd8800 	pop	{fp, pc}

00126d90 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
  126d90:	e92d4810 	push	{r4, fp, lr}
  126d94:	e28db008 	add	fp, sp, #8
  126d98:	e24dd014 	sub	sp, sp, #20
  126d9c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
  126da0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126da4:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  126da8:	e3530000 	cmp	r3, #0
  126dac:	0a000044 	beq	126ec4 <tcp_rexmit+0x134>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  126db0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126db4:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  126db8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  pcb->unacked = seg->next;
  126dbc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126dc0:	e5932000 	ldr	r2, [r3]
  126dc4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126dc8:	e5832070 	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
  126dcc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126dd0:	e283306c 	add	r3, r3, #108	; 0x6c
  126dd4:	e50b3010 	str	r3, [fp, #-16]
  while (*cur_seg &&
  126dd8:	ea000002 	b	126de8 <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
  126ddc:	e51b3010 	ldr	r3, [fp, #-16]
  126de0:	e5933000 	ldr	r3, [r3]
  126de4:	e50b3010 	str	r3, [fp, #-16]
  while (*cur_seg &&
  126de8:	e51b3010 	ldr	r3, [fp, #-16]
  126dec:	e5933000 	ldr	r3, [r3]
  126df0:	e3530000 	cmp	r3, #0
  126df4:	0a00000f 	beq	126e38 <tcp_rexmit+0xa8>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
  126df8:	e51b3010 	ldr	r3, [fp, #-16]
  126dfc:	e5933000 	ldr	r3, [r3]
  126e00:	e593300c 	ldr	r3, [r3, #12]
  126e04:	e5933004 	ldr	r3, [r3, #4]
  126e08:	e1a00003 	mov	r0, r3
  126e0c:	ebffbe77 	bl	1167f0 <lwip_htonl>
  126e10:	e1a04000 	mov	r4, r0
  126e14:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126e18:	e593300c 	ldr	r3, [r3, #12]
  126e1c:	e5933004 	ldr	r3, [r3, #4]
  126e20:	e1a00003 	mov	r0, r3
  126e24:	ebffbe71 	bl	1167f0 <lwip_htonl>
  126e28:	e1a03000 	mov	r3, r0
  126e2c:	e0443003 	sub	r3, r4, r3
  while (*cur_seg &&
  126e30:	e3530000 	cmp	r3, #0
  126e34:	baffffe8 	blt	126ddc <tcp_rexmit+0x4c>
  }
  seg->next = *cur_seg;
  126e38:	e51b3010 	ldr	r3, [fp, #-16]
  126e3c:	e5932000 	ldr	r2, [r3]
  126e40:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126e44:	e5832000 	str	r2, [r3]
  *cur_seg = seg;
  126e48:	e51b3010 	ldr	r3, [fp, #-16]
  126e4c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  126e50:	e5832000 	str	r2, [r3]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
  126e54:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  126e58:	e5933000 	ldr	r3, [r3]
  126e5c:	e3530000 	cmp	r3, #0
  126e60:	1a000002 	bne	126e70 <tcp_rexmit+0xe0>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
  126e64:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126e68:	e3a02000 	mov	r2, #0
  126e6c:	e1c326b8 	strh	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
  126e70:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126e74:	e5d33046 	ldrb	r3, [r3, #70]	; 0x46
  126e78:	e35300ff 	cmp	r3, #255	; 0xff
  126e7c:	0a000005 	beq	126e98 <tcp_rexmit+0x108>
    ++pcb->nrtx;
  126e80:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126e84:	e5d33046 	ldrb	r3, [r3, #70]	; 0x46
  126e88:	e2833001 	add	r3, r3, #1
  126e8c:	e6ef2073 	uxtb	r2, r3
  126e90:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126e94:	e5c32046 	strb	r2, [r3, #70]	; 0x46
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
  126e98:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  126e9c:	e3a02000 	mov	r2, #0
  126ea0:	e5832038 	str	r2, [r3, #56]	; 0x38

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  126ea4:	e3063840 	movw	r3, #26688	; 0x6840
  126ea8:	e3403057 	movt	r3, #87	; 0x57
  126eac:	e5933180 	ldr	r3, [r3, #384]	; 0x180
  126eb0:	e2832001 	add	r2, r3, #1
  126eb4:	e3063840 	movw	r3, #26688	; 0x6840
  126eb8:	e3403057 	movt	r3, #87	; 0x57
  126ebc:	e5832180 	str	r2, [r3, #384]	; 0x180
  126ec0:	ea000000 	b	126ec8 <tcp_rexmit+0x138>
    return;
  126ec4:	e320f000 	nop	{0}
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
  126ec8:	e24bd008 	sub	sp, fp, #8
  126ecc:	e8bd8810 	pop	{r4, fp, pc}

00126ed0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
  126ed0:	e92d4800 	push	{fp, lr}
  126ed4:	e28db004 	add	fp, sp, #4
  126ed8:	e24dd008 	sub	sp, sp, #8
  126edc:	e50b0008 	str	r0, [fp, #-8]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
  126ee0:	e51b3008 	ldr	r3, [fp, #-8]
  126ee4:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  126ee8:	e3530000 	cmp	r3, #0
  126eec:	0a00003e 	beq	126fec <tcp_rexmit_fast+0x11c>
  126ef0:	e51b3008 	ldr	r3, [fp, #-8]
  126ef4:	e5d3301e 	ldrb	r3, [r3, #30]
  126ef8:	e2033004 	and	r3, r3, #4
  126efc:	e3530000 	cmp	r3, #0
  126f00:	1a000039 	bne	126fec <tcp_rexmit_fast+0x11c>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
  126f04:	e51b0008 	ldr	r0, [fp, #-8]
  126f08:	ebffffa0 	bl	126d90 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
  126f0c:	e51b3008 	ldr	r3, [fp, #-8]
  126f10:	e1d324bc 	ldrh	r2, [r3, #76]	; 0x4c
  126f14:	e51b3008 	ldr	r3, [fp, #-8]
  126f18:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  126f1c:	e1520003 	cmp	r2, r3
  126f20:	2a000006 	bcs	126f40 <tcp_rexmit_fast+0x70>
  126f24:	e51b3008 	ldr	r3, [fp, #-8]
  126f28:	e1d334bc 	ldrh	r3, [r3, #76]	; 0x4c
  126f2c:	e1a02fa3 	lsr	r2, r3, #31
  126f30:	e0823003 	add	r3, r2, r3
  126f34:	e1a030c3 	asr	r3, r3, #1
  126f38:	e6ff3073 	uxth	r3, r3
  126f3c:	ea000005 	b	126f58 <tcp_rexmit_fast+0x88>
  126f40:	e51b3008 	ldr	r3, [fp, #-8]
  126f44:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  126f48:	e1a02fa3 	lsr	r2, r3, #31
  126f4c:	e0823003 	add	r3, r2, r3
  126f50:	e1a030c3 	asr	r3, r3, #1
  126f54:	e6ff3073 	uxth	r3, r3
  126f58:	e51b2008 	ldr	r2, [fp, #-8]
  126f5c:	e1c234be 	strh	r3, [r2, #78]	; 0x4e

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
  126f60:	e51b3008 	ldr	r3, [fp, #-8]
  126f64:	e1d334be 	ldrh	r3, [r3, #78]	; 0x4e
  126f68:	e1a02003 	mov	r2, r3
  126f6c:	e51b3008 	ldr	r3, [fp, #-8]
  126f70:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  126f74:	e1a03083 	lsl	r3, r3, #1
  126f78:	e1520003 	cmp	r2, r3
  126f7c:	2a000005 	bcs	126f98 <tcp_rexmit_fast+0xc8>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
  126f80:	e51b3008 	ldr	r3, [fp, #-8]
  126f84:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  126f88:	e1a03083 	lsl	r3, r3, #1
  126f8c:	e6ff2073 	uxth	r2, r3
  126f90:	e51b3008 	ldr	r3, [fp, #-8]
  126f94:	e1c324be 	strh	r2, [r3, #78]	; 0x4e
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
  126f98:	e51b3008 	ldr	r3, [fp, #-8]
  126f9c:	e1d324be 	ldrh	r2, [r3, #78]	; 0x4e
  126fa0:	e51b3008 	ldr	r3, [fp, #-8]
  126fa4:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  126fa8:	e1a01003 	mov	r1, r3
  126fac:	e1a01081 	lsl	r1, r1, #1
  126fb0:	e0813003 	add	r3, r1, r3
  126fb4:	e6ff3073 	uxth	r3, r3
  126fb8:	e0823003 	add	r3, r2, r3
  126fbc:	e6ff2073 	uxth	r2, r3
  126fc0:	e51b3008 	ldr	r3, [fp, #-8]
  126fc4:	e1c324bc 	strh	r2, [r3, #76]	; 0x4c
    pcb->flags |= TF_INFR;
  126fc8:	e51b3008 	ldr	r3, [fp, #-8]
  126fcc:	e5d3301e 	ldrb	r3, [r3, #30]
  126fd0:	e3833004 	orr	r3, r3, #4
  126fd4:	e6ef2073 	uxtb	r2, r3
  126fd8:	e51b3008 	ldr	r3, [fp, #-8]
  126fdc:	e5c3201e 	strb	r2, [r3, #30]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
  126fe0:	e51b3008 	ldr	r3, [fp, #-8]
  126fe4:	e3a02000 	mov	r2, #0
  126fe8:	e1c323b4 	strh	r2, [r3, #52]	; 0x34
  }
}
  126fec:	e320f000 	nop	{0}
  126ff0:	e24bd004 	sub	sp, fp, #4
  126ff4:	e8bd8800 	pop	{fp, pc}

00126ff8 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
  126ff8:	e92d4800 	push	{fp, lr}
  126ffc:	e28db004 	add	fp, sp, #4
  127000:	e24dd028 	sub	sp, sp, #40	; 0x28
  127004:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
  127008:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12700c:	e5933050 	ldr	r3, [r3, #80]	; 0x50
  127010:	e2433001 	sub	r3, r3, #1
  127014:	e1a00003 	mov	r0, r3
  127018:	ebffbdf4 	bl	1167f0 <lwip_htonl>
  12701c:	e1a03000 	mov	r3, r0
  127020:	e3a02000 	mov	r2, #0
  127024:	e3a01000 	mov	r1, #0
  127028:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12702c:	ebfff62b 	bl	1248e0 <tcp_output_alloc_header>
  127030:	e50b000c 	str	r0, [fp, #-12]
  if (p == NULL) {
  127034:	e51b300c 	ldr	r3, [fp, #-12]
  127038:	e3530000 	cmp	r3, #0
  12703c:	1a000001 	bne	127048 <tcp_keepalive+0x50>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  127040:	e3e03000 	mvn	r3, #0
  127044:	ea000036 	b	127124 <tcp_keepalive+0x12c>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
  127048:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12704c:	e2833004 	add	r3, r3, #4
  127050:	e1a00003 	mov	r0, r3
  127054:	eb0028c7 	bl	131378 <ip4_route>
  127058:	e50b0010 	str	r0, [fp, #-16]
  if (netif == NULL) {
  12705c:	e51b3010 	ldr	r3, [fp, #-16]
  127060:	e3530000 	cmp	r3, #0
  127064:	1a000002 	bne	127074 <tcp_keepalive+0x7c>
    err = ERR_RTE;
  127068:	e3e03003 	mvn	r3, #3
  12706c:	e54b3005 	strb	r3, [fp, #-5]
  127070:	ea000028 	b	127118 <tcp_keepalive+0x120>
  } else {
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
  127074:	e51b300c 	ldr	r3, [fp, #-12]
  127078:	e5933004 	ldr	r3, [r3, #4]
  12707c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
  127080:	e51b300c 	ldr	r3, [fp, #-12]
  127084:	e1d320b8 	ldrh	r2, [r3, #8]
        &pcb->local_ip, &pcb->remote_ip);
  127088:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  12708c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  127090:	e2833004 	add	r3, r3, #4
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
  127094:	e58d3000 	str	r3, [sp]
  127098:	e1a03001 	mov	r3, r1
  12709c:	e3a01006 	mov	r1, #6
  1270a0:	e51b000c 	ldr	r0, [fp, #-12]
  1270a4:	ebffc5e4 	bl	11883c <ip_chksum_pseudo>
  1270a8:	e1a03000 	mov	r3, r0
  1270ac:	e1a02003 	mov	r2, r3
  1270b0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1270b4:	e1c321b0 	strh	r2, [r3, #16]
    }
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);
  1270b8:	e3063840 	movw	r3, #26688	; 0x6840
  1270bc:	e3403057 	movt	r3, #87	; 0x57
  1270c0:	e1d33abc 	ldrh	r3, [r3, #172]	; 0xac
  1270c4:	e2833001 	add	r3, r3, #1
  1270c8:	e6ff2073 	uxth	r2, r3
  1270cc:	e3063840 	movw	r3, #26688	; 0x6840
  1270d0:	e3403057 	movt	r3, #87	; 0x57
  1270d4:	e1c32abc 	strh	r2, [r3, #172]	; 0xac

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
  1270d8:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  1270dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1270e0:	e2832004 	add	r2, r3, #4
  1270e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1270e8:	e5d3000a 	ldrb	r0, [r3, #10]
  1270ec:	e51b3010 	ldr	r3, [fp, #-16]
  1270f0:	e58d3008 	str	r3, [sp, #8]
  1270f4:	e3a03006 	mov	r3, #6
  1270f8:	e58d3004 	str	r3, [sp, #4]
  1270fc:	e3a03000 	mov	r3, #0
  127100:	e58d3000 	str	r3, [sp]
  127104:	e1a03000 	mov	r3, r0
  127108:	e51b000c 	ldr	r0, [fp, #-12]
  12710c:	eb002b72 	bl	131edc <ip4_output_if>
  127110:	e1a03000 	mov	r3, r0
  127114:	e54b3005 	strb	r3, [fp, #-5]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
  127118:	e51b000c 	ldr	r0, [fp, #-12]
  12711c:	ebffcfde 	bl	11b09c <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
  127120:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  127124:	e1a00003 	mov	r0, r3
  127128:	e24bd004 	sub	sp, fp, #4
  12712c:	e8bd8800 	pop	{fp, pc}

00127130 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
  127130:	e92d4810 	push	{r4, fp, lr}
  127134:	e28db008 	add	fp, sp, #8
  127138:	e24dd03c 	sub	sp, sp, #60	; 0x3c
  12713c:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
  127140:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  127144:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  127148:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

  if (seg == NULL) {
  12714c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  127150:	e3530000 	cmp	r3, #0
  127154:	1a000002 	bne	127164 <tcp_zero_window_probe+0x34>
    seg = pcb->unsent;
  127158:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12715c:	e593306c 	ldr	r3, [r3, #108]	; 0x6c
  127160:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  }
  if (seg == NULL) {
  127164:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  127168:	e3530000 	cmp	r3, #0
  12716c:	1a000001 	bne	127178 <tcp_zero_window_probe+0x48>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
  127170:	e3a03000 	mov	r3, #0
  127174:	ea00008c 	b	1273ac <tcp_zero_window_probe+0x27c>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
  127178:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12717c:	e593300c 	ldr	r3, [r3, #12]
  127180:	e1d330bc 	ldrh	r3, [r3, #12]
  127184:	e6ff3073 	uxth	r3, r3
  127188:	e1a00003 	mov	r0, r3
  12718c:	ebffbd8b 	bl	1167c0 <lwip_htons>
  127190:	e1a03000 	mov	r3, r0
  127194:	e2033001 	and	r3, r3, #1
  127198:	e3530000 	cmp	r3, #0
  12719c:	0a000005 	beq	1271b8 <tcp_zero_window_probe+0x88>
  1271a0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1271a4:	e1d330b8 	ldrh	r3, [r3, #8]
  1271a8:	e3530000 	cmp	r3, #0
  1271ac:	1a000001 	bne	1271b8 <tcp_zero_window_probe+0x88>
  1271b0:	e3a03001 	mov	r3, #1
  1271b4:	ea000000 	b	1271bc <tcp_zero_window_probe+0x8c>
  1271b8:	e3a03000 	mov	r3, #0
  1271bc:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
  1271c0:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  1271c4:	e3530000 	cmp	r3, #0
  1271c8:	03a03001 	moveq	r3, #1
  1271cc:	13a03000 	movne	r3, #0
  1271d0:	e6ef3073 	uxtb	r3, r3
  1271d4:	e14b31b8 	strh	r3, [fp, #-24]	; 0xffffffe8

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
  1271d8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1271dc:	e593300c 	ldr	r3, [r3, #12]
  1271e0:	e5933004 	ldr	r3, [r3, #4]
  1271e4:	e15b21b8 	ldrh	r2, [fp, #-24]	; 0xffffffe8
  1271e8:	e3a01000 	mov	r1, #0
  1271ec:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  1271f0:	ebfff5ba 	bl	1248e0 <tcp_output_alloc_header>
  1271f4:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
  if (p == NULL) {
  1271f8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1271fc:	e3530000 	cmp	r3, #0
  127200:	1a000001 	bne	12720c <tcp_zero_window_probe+0xdc>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  127204:	e3e03000 	mvn	r3, #0
  127208:	ea000067 	b	1273ac <tcp_zero_window_probe+0x27c>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
  12720c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  127210:	e5933004 	ldr	r3, [r3, #4]
  127214:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0

  if (is_fin) {
  127218:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  12721c:	e3530000 	cmp	r3, #0
  127220:	0a00000c 	beq	127258 <tcp_zero_window_probe+0x128>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
  127224:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  127228:	e1d330bc 	ldrh	r3, [r3, #12]
  12722c:	e6ff3073 	uxth	r3, r3
  127230:	e3c33c3f 	bic	r3, r3, #16128	; 0x3f00
  127234:	e6ff4073 	uxth	r4, r3
  127238:	e3a00011 	mov	r0, #17
  12723c:	ebffbd5f 	bl	1167c0 <lwip_htons>
  127240:	e1a03000 	mov	r3, r0
  127244:	e1843003 	orr	r3, r4, r3
  127248:	e6ff2073 	uxth	r2, r3
  12724c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  127250:	e1c320bc 	strh	r2, [r3, #12]
  127254:	ea00000f 	b	127298 <tcp_zero_window_probe+0x168>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
  127258:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12725c:	e5933004 	ldr	r3, [r3, #4]
  127260:	e2833014 	add	r3, r3, #20
  127264:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  127268:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12726c:	e5930004 	ldr	r0, [r3, #4]
  127270:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  127274:	e5933004 	ldr	r3, [r3, #4]
  127278:	e1d320b8 	ldrh	r2, [r3, #8]
  12727c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  127280:	e1d330b8 	ldrh	r3, [r3, #8]
  127284:	e0423003 	sub	r3, r2, r3
  127288:	e6ff3073 	uxth	r3, r3
  12728c:	e3a02001 	mov	r2, #1
  127290:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  127294:	ebffd18b 	bl	11b8c8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
  127298:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12729c:	e593300c 	ldr	r3, [r3, #12]
  1272a0:	e5933004 	ldr	r3, [r3, #4]
  1272a4:	e1a00003 	mov	r0, r3
  1272a8:	ebffbd50 	bl	1167f0 <lwip_htonl>
  1272ac:	e1a03000 	mov	r3, r0
  1272b0:	e2833001 	add	r3, r3, #1
  1272b4:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
  1272b8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1272bc:	e5932050 	ldr	r2, [r3, #80]	; 0x50
  1272c0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1272c4:	e0423003 	sub	r3, r2, r3
  1272c8:	e3530000 	cmp	r3, #0
  1272cc:	aa000002 	bge	1272dc <tcp_zero_window_probe+0x1ac>
    pcb->snd_nxt = snd_nxt;
  1272d0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1272d4:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  1272d8:	e5832050 	str	r2, [r3, #80]	; 0x50
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
  1272dc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1272e0:	e2833004 	add	r3, r3, #4
  1272e4:	e1a00003 	mov	r0, r3
  1272e8:	eb002822 	bl	131378 <ip4_route>
  1272ec:	e50b002c 	str	r0, [fp, #-44]	; 0xffffffd4
  if (netif == NULL) {
  1272f0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1272f4:	e3530000 	cmp	r3, #0
  1272f8:	1a000002 	bne	127308 <tcp_zero_window_probe+0x1d8>
    err = ERR_RTE;
  1272fc:	e3e03003 	mvn	r3, #3
  127300:	e54b300d 	strb	r3, [fp, #-13]
  127304:	ea000025 	b	1273a0 <tcp_zero_window_probe+0x270>
  } else {
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
  127308:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12730c:	e1d320b8 	ldrh	r2, [r3, #8]
        &pcb->local_ip, &pcb->remote_ip);
  127310:	e51b1030 	ldr	r1, [fp, #-48]	; 0xffffffd0
  127314:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  127318:	e2833004 	add	r3, r3, #4
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
  12731c:	e58d3000 	str	r3, [sp]
  127320:	e1a03001 	mov	r3, r1
  127324:	e3a01006 	mov	r1, #6
  127328:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  12732c:	ebffc542 	bl	11883c <ip_chksum_pseudo>
  127330:	e1a03000 	mov	r3, r0
  127334:	e1a02003 	mov	r2, r3
  127338:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12733c:	e1c321b0 	strh	r2, [r3, #16]
    }
#endif
    TCP_STATS_INC(tcp.xmit);
  127340:	e3063840 	movw	r3, #26688	; 0x6840
  127344:	e3403057 	movt	r3, #87	; 0x57
  127348:	e1d33abc 	ldrh	r3, [r3, #172]	; 0xac
  12734c:	e2833001 	add	r3, r3, #1
  127350:	e6ff2073 	uxth	r2, r3
  127354:	e3063840 	movw	r3, #26688	; 0x6840
  127358:	e3403057 	movt	r3, #87	; 0x57
  12735c:	e1c32abc 	strh	r2, [r3, #172]	; 0xac

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
  127360:	e51b1030 	ldr	r1, [fp, #-48]	; 0xffffffd0
  127364:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  127368:	e2832004 	add	r2, r3, #4
  12736c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  127370:	e5d3000a 	ldrb	r0, [r3, #10]
  127374:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  127378:	e58d3008 	str	r3, [sp, #8]
  12737c:	e3a03006 	mov	r3, #6
  127380:	e58d3004 	str	r3, [sp, #4]
  127384:	e3a03000 	mov	r3, #0
  127388:	e58d3000 	str	r3, [sp]
  12738c:	e1a03000 	mov	r3, r0
  127390:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  127394:	eb002ad0 	bl	131edc <ip4_output_if>
  127398:	e1a03000 	mov	r3, r0
  12739c:	e54b300d 	strb	r3, [fp, #-13]
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
  1273a0:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  1273a4:	ebffcf3c 	bl	11b09c <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
  1273a8:	e15b30dd 	ldrsb	r3, [fp, #-13]
}
  1273ac:	e1a00003 	mov	r0, r3
  1273b0:	e24bd008 	sub	sp, fp, #8
  1273b4:	e8bd8810 	pop	{r4, fp, pc}

001273b8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
  1273b8:	e92d4800 	push	{fp, lr}
  1273bc:	e28db004 	add	fp, sp, #4
  1273c0:	e24dd008 	sub	sp, sp, #8
  1273c4:	e50b0008 	str	r0, [fp, #-8]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
  1273c8:	ebffd77b 	bl	11d1bc <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
  1273cc:	e3063a30 	movw	r3, #27184	; 0x6a30
  1273d0:	e3403057 	movt	r3, #87	; 0x57
  1273d4:	e5933000 	ldr	r3, [r3]
  1273d8:	e3530000 	cmp	r3, #0
  1273dc:	1a000004 	bne	1273f4 <tcpip_tcp_timer+0x3c>
  1273e0:	e3063a40 	movw	r3, #27200	; 0x6a40
  1273e4:	e3403057 	movt	r3, #87	; 0x57
  1273e8:	e5933000 	ldr	r3, [r3]
  1273ec:	e3530000 	cmp	r3, #0
  1273f0:	0a000005 	beq	12740c <tcpip_tcp_timer+0x54>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
  1273f4:	e3a02000 	mov	r2, #0
  1273f8:	e30713b8 	movw	r1, #29624	; 0x73b8
  1273fc:	e3401012 	movt	r1, #18
  127400:	e3a000fa 	mov	r0, #250	; 0xfa
  127404:	eb000057 	bl	127568 <sys_timeout>
  127408:	ea000003 	b	12741c <tcpip_tcp_timer+0x64>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
  12740c:	e30f325c 	movw	r3, #62044	; 0xf25c
  127410:	e3403014 	movt	r3, #20
  127414:	e3a02000 	mov	r2, #0
  127418:	e5832000 	str	r2, [r3]
  }
}
  12741c:	e320f000 	nop	{0}
  127420:	e24bd004 	sub	sp, fp, #4
  127424:	e8bd8800 	pop	{fp, pc}

00127428 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
  127428:	e92d4800 	push	{fp, lr}
  12742c:	e28db004 	add	fp, sp, #4
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
  127430:	e30f325c 	movw	r3, #62044	; 0xf25c
  127434:	e3403014 	movt	r3, #20
  127438:	e5933000 	ldr	r3, [r3]
  12743c:	e3530000 	cmp	r3, #0
  127440:	1a000012 	bne	127490 <tcp_timer_needed+0x68>
  127444:	e3063a30 	movw	r3, #27184	; 0x6a30
  127448:	e3403057 	movt	r3, #87	; 0x57
  12744c:	e5933000 	ldr	r3, [r3]
  127450:	e3530000 	cmp	r3, #0
  127454:	1a000004 	bne	12746c <tcp_timer_needed+0x44>
  127458:	e3063a40 	movw	r3, #27200	; 0x6a40
  12745c:	e3403057 	movt	r3, #87	; 0x57
  127460:	e5933000 	ldr	r3, [r3]
  127464:	e3530000 	cmp	r3, #0
  127468:	0a000008 	beq	127490 <tcp_timer_needed+0x68>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
  12746c:	e30f325c 	movw	r3, #62044	; 0xf25c
  127470:	e3403014 	movt	r3, #20
  127474:	e3a02001 	mov	r2, #1
  127478:	e5832000 	str	r2, [r3]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
  12747c:	e3a02000 	mov	r2, #0
  127480:	e30713b8 	movw	r1, #29624	; 0x73b8
  127484:	e3401012 	movt	r1, #18
  127488:	e3a000fa 	mov	r0, #250	; 0xfa
  12748c:	eb000035 	bl	127568 <sys_timeout>
  }
}
  127490:	e320f000 	nop	{0}
  127494:	e8bd8800 	pop	{fp, pc}

00127498 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
  127498:	e92d4800 	push	{fp, lr}
  12749c:	e28db004 	add	fp, sp, #4
  1274a0:	e24dd010 	sub	sp, sp, #16
  1274a4:	e50b0010 	str	r0, [fp, #-16]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
  1274a8:	e51b3010 	ldr	r3, [fp, #-16]
  1274ac:	e50b3008 	str	r3, [fp, #-8]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
  1274b0:	e51b3008 	ldr	r3, [fp, #-8]
  1274b4:	e5933004 	ldr	r3, [r3, #4]
  1274b8:	e12fff33 	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
  1274bc:	e51b3008 	ldr	r3, [fp, #-8]
  1274c0:	e5933000 	ldr	r3, [r3]
  1274c4:	e51b2010 	ldr	r2, [fp, #-16]
  1274c8:	e3071498 	movw	r1, #29848	; 0x7498
  1274cc:	e3401012 	movt	r1, #18
  1274d0:	e1a00003 	mov	r0, r3
  1274d4:	eb000023 	bl	127568 <sys_timeout>
}
  1274d8:	e320f000 	nop	{0}
  1274dc:	e24bd004 	sub	sp, fp, #4
  1274e0:	e8bd8800 	pop	{fp, pc}

001274e4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
  1274e4:	e92d4800 	push	{fp, lr}
  1274e8:	e28db004 	add	fp, sp, #4
  1274ec:	e24dd008 	sub	sp, sp, #8
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = 1; i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
  1274f0:	e3a03001 	mov	r3, #1
  1274f4:	e50b3008 	str	r3, [fp, #-8]
  1274f8:	ea00000f 	b	12753c <sys_timeouts_init+0x58>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
  1274fc:	e3083bec 	movw	r3, #35820	; 0x8bec
  127500:	e3403014 	movt	r3, #20
  127504:	e51b2008 	ldr	r2, [fp, #-8]
  127508:	e7930182 	ldr	r0, [r3, r2, lsl #3]
  12750c:	e51b3008 	ldr	r3, [fp, #-8]
  127510:	e1a02183 	lsl	r2, r3, #3
  127514:	e3083bec 	movw	r3, #35820	; 0x8bec
  127518:	e3403014 	movt	r3, #20
  12751c:	e0823003 	add	r3, r2, r3
  127520:	e1a02003 	mov	r2, r3
  127524:	e3071498 	movw	r1, #29848	; 0x7498
  127528:	e3401012 	movt	r1, #18
  12752c:	eb00000d 	bl	127568 <sys_timeout>
  for (i = 1; i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
  127530:	e51b3008 	ldr	r3, [fp, #-8]
  127534:	e2833001 	add	r3, r3, #1
  127538:	e50b3008 	str	r3, [fp, #-8]
  12753c:	e51b3008 	ldr	r3, [fp, #-8]
  127540:	e3530006 	cmp	r3, #6
  127544:	9affffec 	bls	1274fc <sys_timeouts_init+0x18>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
  127548:	ebff8ede 	bl	10b0c8 <sys_now>
  12754c:	e1a02000 	mov	r2, r0
  127550:	e30f3258 	movw	r3, #62040	; 0xf258
  127554:	e3403014 	movt	r3, #20
  127558:	e5832000 	str	r2, [r3]
}
  12755c:	e320f000 	nop	{0}
  127560:	e24bd004 	sub	sp, fp, #4
  127564:	e8bd8800 	pop	{fp, pc}

00127568 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
  127568:	e92d4800 	push	{fp, lr}
  12756c:	e28db004 	add	fp, sp, #4
  127570:	e24dd020 	sub	sp, sp, #32
  127574:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  127578:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  12757c:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
  127580:	e3a020d2 	mov	r2, #210	; 0xd2
  127584:	e3081c24 	movw	r1, #35876	; 0x8c24
  127588:	e3401014 	movt	r1, #20
  12758c:	e3a0000d 	mov	r0, #13
  127590:	ebffc74b 	bl	1192c4 <memp_malloc_fn>
  127594:	e50b0010 	str	r0, [fp, #-16]
  if (timeout == NULL) {
  127598:	e51b3010 	ldr	r3, [fp, #-16]
  12759c:	e3530000 	cmp	r3, #0
  1275a0:	1a00000a 	bne	1275d0 <sys_timeout+0x68>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
  1275a4:	e51b3010 	ldr	r3, [fp, #-16]
  1275a8:	e3530000 	cmp	r3, #0
  1275ac:	1a00008f 	bne	1277f0 <sys_timeout+0x288>
  1275b0:	e3080c54 	movw	r0, #35924	; 0x8c54
  1275b4:	e3400014 	movt	r0, #20
  1275b8:	ebff6ed5 	bl	103114 <rt_kprintf>
  1275bc:	e3a010d4 	mov	r1, #212	; 0xd4
  1275c0:	e3080c24 	movw	r0, #35876	; 0x8c24
  1275c4:	e3400014 	movt	r0, #20
  1275c8:	ebff8ea5 	bl	10b064 <sys_arch_assert>
    return;
  1275cc:	ea000087 	b	1277f0 <sys_timeout+0x288>
  }

  now = sys_now();
  1275d0:	ebff8ebc 	bl	10b0c8 <sys_now>
  1275d4:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  if (next_timeout == NULL) {
  1275d8:	e30f3254 	movw	r3, #62036	; 0xf254
  1275dc:	e3403014 	movt	r3, #20
  1275e0:	e5933000 	ldr	r3, [r3]
  1275e4:	e3530000 	cmp	r3, #0
  1275e8:	1a000006 	bne	127608 <sys_timeout+0xa0>
    diff = 0;
  1275ec:	e3a03000 	mov	r3, #0
  1275f0:	e50b300c 	str	r3, [fp, #-12]
    timeouts_last_time = now;
  1275f4:	e30f3258 	movw	r3, #62040	; 0xf258
  1275f8:	e3403014 	movt	r3, #20
  1275fc:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  127600:	e5832000 	str	r2, [r3]
  127604:	ea000005 	b	127620 <sys_timeout+0xb8>
  } else {
    diff = now - timeouts_last_time;
  127608:	e30f3258 	movw	r3, #62040	; 0xf258
  12760c:	e3403014 	movt	r3, #20
  127610:	e5933000 	ldr	r3, [r3]
  127614:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  127618:	e0423003 	sub	r3, r2, r3
  12761c:	e50b300c 	str	r3, [fp, #-12]
  }

  timeout->next = NULL;
  127620:	e51b3010 	ldr	r3, [fp, #-16]
  127624:	e3a02000 	mov	r2, #0
  127628:	e5832000 	str	r2, [r3]
  timeout->h = handler;
  12762c:	e51b3010 	ldr	r3, [fp, #-16]
  127630:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  127634:	e5832008 	str	r2, [r3, #8]
  timeout->arg = arg;
  127638:	e51b3010 	ldr	r3, [fp, #-16]
  12763c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  127640:	e583200c 	str	r2, [r3, #12]
  timeout->time = msecs + diff;
  127644:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  127648:	e51b300c 	ldr	r3, [fp, #-12]
  12764c:	e0822003 	add	r2, r2, r3
  127650:	e51b3010 	ldr	r3, [fp, #-16]
  127654:	e5832004 	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
  127658:	e30f3254 	movw	r3, #62036	; 0xf254
  12765c:	e3403014 	movt	r3, #20
  127660:	e5933000 	ldr	r3, [r3]
  127664:	e3530000 	cmp	r3, #0
  127668:	1a000004 	bne	127680 <sys_timeout+0x118>
    next_timeout = timeout;
  12766c:	e30f3254 	movw	r3, #62036	; 0xf254
  127670:	e3403014 	movt	r3, #20
  127674:	e51b2010 	ldr	r2, [fp, #-16]
  127678:	e5832000 	str	r2, [r3]
    return;
  12767c:	ea00005c 	b	1277f4 <sys_timeout+0x28c>
  }

  if (next_timeout->time > msecs) {
  127680:	e30f3254 	movw	r3, #62036	; 0xf254
  127684:	e3403014 	movt	r3, #20
  127688:	e5933000 	ldr	r3, [r3]
  12768c:	e5933004 	ldr	r3, [r3, #4]
  127690:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  127694:	e1520003 	cmp	r2, r3
  127698:	2a000013 	bcs	1276ec <sys_timeout+0x184>
    next_timeout->time -= msecs;
  12769c:	e30f3254 	movw	r3, #62036	; 0xf254
  1276a0:	e3403014 	movt	r3, #20
  1276a4:	e5933000 	ldr	r3, [r3]
  1276a8:	e5931004 	ldr	r1, [r3, #4]
  1276ac:	e30f3254 	movw	r3, #62036	; 0xf254
  1276b0:	e3403014 	movt	r3, #20
  1276b4:	e5933000 	ldr	r3, [r3]
  1276b8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1276bc:	e0412002 	sub	r2, r1, r2
  1276c0:	e5832004 	str	r2, [r3, #4]
    timeout->next = next_timeout;
  1276c4:	e30f3254 	movw	r3, #62036	; 0xf254
  1276c8:	e3403014 	movt	r3, #20
  1276cc:	e5932000 	ldr	r2, [r3]
  1276d0:	e51b3010 	ldr	r3, [fp, #-16]
  1276d4:	e5832000 	str	r2, [r3]
    next_timeout = timeout;
  1276d8:	e30f3254 	movw	r3, #62036	; 0xf254
  1276dc:	e3403014 	movt	r3, #20
  1276e0:	e51b2010 	ldr	r2, [fp, #-16]
  1276e4:	e5832000 	str	r2, [r3]
  1276e8:	ea000041 	b	1277f4 <sys_timeout+0x28c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
  1276ec:	e30f3254 	movw	r3, #62036	; 0xf254
  1276f0:	e3403014 	movt	r3, #20
  1276f4:	e5933000 	ldr	r3, [r3]
  1276f8:	e50b3008 	str	r3, [fp, #-8]
  1276fc:	ea000037 	b	1277e0 <sys_timeout+0x278>
      timeout->time -= t->time;
  127700:	e51b3010 	ldr	r3, [fp, #-16]
  127704:	e5932004 	ldr	r2, [r3, #4]
  127708:	e51b3008 	ldr	r3, [fp, #-8]
  12770c:	e5933004 	ldr	r3, [r3, #4]
  127710:	e0422003 	sub	r2, r2, r3
  127714:	e51b3010 	ldr	r3, [fp, #-16]
  127718:	e5832004 	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
  12771c:	e51b3008 	ldr	r3, [fp, #-8]
  127720:	e5933000 	ldr	r3, [r3]
  127724:	e3530000 	cmp	r3, #0
  127728:	0a000006 	beq	127748 <sys_timeout+0x1e0>
  12772c:	e51b3008 	ldr	r3, [fp, #-8]
  127730:	e5933000 	ldr	r3, [r3]
  127734:	e5932004 	ldr	r2, [r3, #4]
  127738:	e51b3010 	ldr	r3, [fp, #-16]
  12773c:	e5933004 	ldr	r3, [r3, #4]
  127740:	e1520003 	cmp	r2, r3
  127744:	9a000022 	bls	1277d4 <sys_timeout+0x26c>
        if (t->next != NULL) {
  127748:	e51b3008 	ldr	r3, [fp, #-8]
  12774c:	e5933000 	ldr	r3, [r3]
  127750:	e3530000 	cmp	r3, #0
  127754:	0a000009 	beq	127780 <sys_timeout+0x218>
          t->next->time -= timeout->time;
  127758:	e51b3008 	ldr	r3, [fp, #-8]
  12775c:	e5933000 	ldr	r3, [r3]
  127760:	e5931004 	ldr	r1, [r3, #4]
  127764:	e51b3010 	ldr	r3, [fp, #-16]
  127768:	e5932004 	ldr	r2, [r3, #4]
  12776c:	e51b3008 	ldr	r3, [fp, #-8]
  127770:	e5933000 	ldr	r3, [r3]
  127774:	e0412002 	sub	r2, r1, r2
  127778:	e5832004 	str	r2, [r3, #4]
  12777c:	ea00000c 	b	1277b4 <sys_timeout+0x24c>
        } else if (timeout->time > msecs) {
  127780:	e51b3010 	ldr	r3, [fp, #-16]
  127784:	e5933004 	ldr	r3, [r3, #4]
  127788:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  12778c:	e1520003 	cmp	r2, r3
  127790:	2a000007 	bcs	1277b4 <sys_timeout+0x24c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
  127794:	e30f3254 	movw	r3, #62036	; 0xf254
  127798:	e3403014 	movt	r3, #20
  12779c:	e5933000 	ldr	r3, [r3]
  1277a0:	e5932004 	ldr	r2, [r3, #4]
  1277a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1277a8:	e0822003 	add	r2, r2, r3
  1277ac:	e51b3010 	ldr	r3, [fp, #-16]
  1277b0:	e5832004 	str	r2, [r3, #4]
        }
        timeout->next = t->next;
  1277b4:	e51b3008 	ldr	r3, [fp, #-8]
  1277b8:	e5932000 	ldr	r2, [r3]
  1277bc:	e51b3010 	ldr	r3, [fp, #-16]
  1277c0:	e5832000 	str	r2, [r3]
        t->next = timeout;
  1277c4:	e51b3008 	ldr	r3, [fp, #-8]
  1277c8:	e51b2010 	ldr	r2, [fp, #-16]
  1277cc:	e5832000 	str	r2, [r3]
        break;
  1277d0:	ea000007 	b	1277f4 <sys_timeout+0x28c>
    for (t = next_timeout; t != NULL; t = t->next) {
  1277d4:	e51b3008 	ldr	r3, [fp, #-8]
  1277d8:	e5933000 	ldr	r3, [r3]
  1277dc:	e50b3008 	str	r3, [fp, #-8]
  1277e0:	e51b3008 	ldr	r3, [fp, #-8]
  1277e4:	e3530000 	cmp	r3, #0
  1277e8:	1affffc4 	bne	127700 <sys_timeout+0x198>
  1277ec:	ea000000 	b	1277f4 <sys_timeout+0x28c>
    return;
  1277f0:	e320f000 	nop	{0}
      }
    }
  }
}
  1277f4:	e24bd004 	sub	sp, fp, #4
  1277f8:	e8bd8800 	pop	{fp, pc}

001277fc <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
  1277fc:	e92d4800 	push	{fp, lr}
  127800:	e28db004 	add	fp, sp, #4
  127804:	e24dd010 	sub	sp, sp, #16
  127808:	e50b0010 	str	r0, [fp, #-16]
  12780c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct sys_timeo *prev_t, *t;

  if (next_timeout == NULL) {
  127810:	e30f3254 	movw	r3, #62036	; 0xf254
  127814:	e3403014 	movt	r3, #20
  127818:	e5933000 	ldr	r3, [r3]
  12781c:	e3530000 	cmp	r3, #0
  127820:	0a000038 	beq	127908 <sys_untimeout+0x10c>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
  127824:	e30f3254 	movw	r3, #62036	; 0xf254
  127828:	e3403014 	movt	r3, #20
  12782c:	e5933000 	ldr	r3, [r3]
  127830:	e50b300c 	str	r3, [fp, #-12]
  127834:	e3a03000 	mov	r3, #0
  127838:	e50b3008 	str	r3, [fp, #-8]
  12783c:	ea00002c 	b	1278f4 <sys_untimeout+0xf8>
    if ((t->h == handler) && (t->arg == arg)) {
  127840:	e51b300c 	ldr	r3, [fp, #-12]
  127844:	e5933008 	ldr	r3, [r3, #8]
  127848:	e51b2010 	ldr	r2, [fp, #-16]
  12784c:	e1520003 	cmp	r2, r3
  127850:	1a000022 	bne	1278e0 <sys_untimeout+0xe4>
  127854:	e51b300c 	ldr	r3, [fp, #-12]
  127858:	e593300c 	ldr	r3, [r3, #12]
  12785c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  127860:	e1520003 	cmp	r2, r3
  127864:	1a00001d 	bne	1278e0 <sys_untimeout+0xe4>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
  127868:	e51b3008 	ldr	r3, [fp, #-8]
  12786c:	e3530000 	cmp	r3, #0
  127870:	1a000005 	bne	12788c <sys_untimeout+0x90>
        next_timeout = t->next;
  127874:	e51b300c 	ldr	r3, [fp, #-12]
  127878:	e5932000 	ldr	r2, [r3]
  12787c:	e30f3254 	movw	r3, #62036	; 0xf254
  127880:	e3403014 	movt	r3, #20
  127884:	e5832000 	str	r2, [r3]
  127888:	ea000003 	b	12789c <sys_untimeout+0xa0>
      } else {
        prev_t->next = t->next;
  12788c:	e51b300c 	ldr	r3, [fp, #-12]
  127890:	e5932000 	ldr	r2, [r3]
  127894:	e51b3008 	ldr	r3, [fp, #-8]
  127898:	e5832000 	str	r2, [r3]
      }
      /* If not the last one, add time of this one back to next */
      if (t->next != NULL) {
  12789c:	e51b300c 	ldr	r3, [fp, #-12]
  1278a0:	e5933000 	ldr	r3, [r3]
  1278a4:	e3530000 	cmp	r3, #0
  1278a8:	0a000008 	beq	1278d0 <sys_untimeout+0xd4>
        t->next->time += t->time;
  1278ac:	e51b300c 	ldr	r3, [fp, #-12]
  1278b0:	e5933000 	ldr	r3, [r3]
  1278b4:	e5931004 	ldr	r1, [r3, #4]
  1278b8:	e51b300c 	ldr	r3, [fp, #-12]
  1278bc:	e5932004 	ldr	r2, [r3, #4]
  1278c0:	e51b300c 	ldr	r3, [fp, #-12]
  1278c4:	e5933000 	ldr	r3, [r3]
  1278c8:	e0812002 	add	r2, r1, r2
  1278cc:	e5832004 	str	r2, [r3, #4]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
  1278d0:	e51b100c 	ldr	r1, [fp, #-12]
  1278d4:	e3a0000d 	mov	r0, #13
  1278d8:	ebffc6e1 	bl	119464 <memp_free>
      return;
  1278dc:	ea00000a 	b	12790c <sys_untimeout+0x110>
  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
  1278e0:	e51b300c 	ldr	r3, [fp, #-12]
  1278e4:	e50b3008 	str	r3, [fp, #-8]
  1278e8:	e51b300c 	ldr	r3, [fp, #-12]
  1278ec:	e5933000 	ldr	r3, [r3]
  1278f0:	e50b300c 	str	r3, [fp, #-12]
  1278f4:	e51b300c 	ldr	r3, [fp, #-12]
  1278f8:	e3530000 	cmp	r3, #0
  1278fc:	1affffcf 	bne	127840 <sys_untimeout+0x44>
    }
  }
  return;
  127900:	e320f000 	nop	{0}
  127904:	ea000000 	b	12790c <sys_untimeout+0x110>
    return;
  127908:	e320f000 	nop	{0}
}
  12790c:	e24bd004 	sub	sp, fp, #4
  127910:	e8bd8800 	pop	{fp, pc}

00127914 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
  127914:	e92d4800 	push	{fp, lr}
  127918:	e28db004 	add	fp, sp, #4
  12791c:	e24dd018 	sub	sp, sp, #24
  if (next_timeout) {
  127920:	e30f3254 	movw	r3, #62036	; 0xf254
  127924:	e3403014 	movt	r3, #20
  127928:	e5933000 	ldr	r3, [r3]
  12792c:	e3530000 	cmp	r3, #0
  127930:	0a000042 	beq	127a40 <sys_check_timeouts+0x12c>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
  127934:	ebff8de3 	bl	10b0c8 <sys_now>
  127938:	e50b0010 	str	r0, [fp, #-16]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
  12793c:	e30f3258 	movw	r3, #62040	; 0xf258
  127940:	e3403014 	movt	r3, #20
  127944:	e5933000 	ldr	r3, [r3]
  127948:	e51b2010 	ldr	r2, [fp, #-16]
  12794c:	e0423003 	sub	r3, r2, r3
  127950:	e50b3008 	str	r3, [fp, #-8]
    do {
      PBUF_CHECK_FREE_OOSEQ();
      had_one = 0;
  127954:	e3a03000 	mov	r3, #0
  127958:	e54b3009 	strb	r3, [fp, #-9]
      tmptimeout = next_timeout;
  12795c:	e30f3254 	movw	r3, #62036	; 0xf254
  127960:	e3403014 	movt	r3, #20
  127964:	e5933000 	ldr	r3, [r3]
  127968:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
      if (tmptimeout && (tmptimeout->time <= diff)) {
  12796c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  127970:	e3530000 	cmp	r3, #0
  127974:	0a00002e 	beq	127a34 <sys_check_timeouts+0x120>
  127978:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12797c:	e5933004 	ldr	r3, [r3, #4]
  127980:	e51b2008 	ldr	r2, [fp, #-8]
  127984:	e1520003 	cmp	r2, r3
  127988:	3a000029 	bcc	127a34 <sys_check_timeouts+0x120>
        /* timeout has expired */
        had_one = 1;
  12798c:	e3a03001 	mov	r3, #1
  127990:	e54b3009 	strb	r3, [fp, #-9]
        timeouts_last_time += tmptimeout->time;
  127994:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  127998:	e5932004 	ldr	r2, [r3, #4]
  12799c:	e30f3258 	movw	r3, #62040	; 0xf258
  1279a0:	e3403014 	movt	r3, #20
  1279a4:	e5933000 	ldr	r3, [r3]
  1279a8:	e0822003 	add	r2, r2, r3
  1279ac:	e30f3258 	movw	r3, #62040	; 0xf258
  1279b0:	e3403014 	movt	r3, #20
  1279b4:	e5832000 	str	r2, [r3]
        diff -= tmptimeout->time;
  1279b8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1279bc:	e5933004 	ldr	r3, [r3, #4]
  1279c0:	e51b2008 	ldr	r2, [fp, #-8]
  1279c4:	e0423003 	sub	r3, r2, r3
  1279c8:	e50b3008 	str	r3, [fp, #-8]
        next_timeout = tmptimeout->next;
  1279cc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1279d0:	e5932000 	ldr	r2, [r3]
  1279d4:	e30f3254 	movw	r3, #62036	; 0xf254
  1279d8:	e3403014 	movt	r3, #20
  1279dc:	e5832000 	str	r2, [r3]
        handler = tmptimeout->h;
  1279e0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1279e4:	e5933008 	ldr	r3, [r3, #8]
  1279e8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        arg = tmptimeout->arg;
  1279ec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1279f0:	e593300c 	ldr	r3, [r3, #12]
  1279f4:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
  1279f8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1279fc:	e3a0000d 	mov	r0, #13
  127a00:	ebffc697 	bl	119464 <memp_free>
        if (handler != NULL) {
  127a04:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  127a08:	e3530000 	cmp	r3, #0
  127a0c:	0a000008 	beq	127a34 <sys_check_timeouts+0x120>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
  127a10:	e30005e4 	movw	r0, #1508	; 0x5e4
  127a14:	e3400015 	movt	r0, #21
  127a18:	ebff8bb0 	bl	10a8e0 <sys_mutex_lock>
#endif /* !NO_SYS */
          handler(arg);
  127a1c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  127a20:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  127a24:	e12fff33 	blx	r3
#if !NO_SYS
          UNLOCK_TCPIP_CORE();
  127a28:	e30005e4 	movw	r0, #1508	; 0x5e4
  127a2c:	e3400015 	movt	r0, #21
  127a30:	ebff8bb6 	bl	10a910 <sys_mutex_unlock>
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
  127a34:	e55b3009 	ldrb	r3, [fp, #-9]
  127a38:	e3530000 	cmp	r3, #0
  127a3c:	1affffc4 	bne	127954 <sys_check_timeouts+0x40>
  }
}
  127a40:	e320f000 	nop	{0}
  127a44:	e24bd004 	sub	sp, fp, #4
  127a48:	e8bd8800 	pop	{fp, pc}

00127a4c <sys_restart_timeouts>:
 * time (e.g. while saving energy) to prevent all timer functions of that
 * period being called.
 */
void
sys_restart_timeouts(void)
{
  127a4c:	e92d4800 	push	{fp, lr}
  127a50:	e28db004 	add	fp, sp, #4
  timeouts_last_time = sys_now();
  127a54:	ebff8d9b 	bl	10b0c8 <sys_now>
  127a58:	e1a02000 	mov	r2, r0
  127a5c:	e30f3258 	movw	r3, #62040	; 0xf258
  127a60:	e3403014 	movt	r3, #20
  127a64:	e5832000 	str	r2, [r3]
}
  127a68:	e320f000 	nop	{0}
  127a6c:	e8bd8800 	pop	{fp, pc}

00127a70 <sys_timeouts_sleeptime>:
#if !NO_SYS
static
#endif /* !NO_SYS */
u32_t
sys_timeouts_sleeptime(void)
{
  127a70:	e92d4800 	push	{fp, lr}
  127a74:	e28db004 	add	fp, sp, #4
  127a78:	e24dd008 	sub	sp, sp, #8
  u32_t diff;
  if (next_timeout == NULL) {
  127a7c:	e30f3254 	movw	r3, #62036	; 0xf254
  127a80:	e3403014 	movt	r3, #20
  127a84:	e5933000 	ldr	r3, [r3]
  127a88:	e3530000 	cmp	r3, #0
  127a8c:	1a000001 	bne	127a98 <sys_timeouts_sleeptime+0x28>
    return 0xffffffff;
  127a90:	e3e03000 	mvn	r3, #0
  127a94:	ea000015 	b	127af0 <sys_timeouts_sleeptime+0x80>
  }
  diff = sys_now() - timeouts_last_time;
  127a98:	ebff8d8a 	bl	10b0c8 <sys_now>
  127a9c:	e1a02000 	mov	r2, r0
  127aa0:	e30f3258 	movw	r3, #62040	; 0xf258
  127aa4:	e3403014 	movt	r3, #20
  127aa8:	e5933000 	ldr	r3, [r3]
  127aac:	e0423003 	sub	r3, r2, r3
  127ab0:	e50b3008 	str	r3, [fp, #-8]
  if (diff > next_timeout->time) {
  127ab4:	e30f3254 	movw	r3, #62036	; 0xf254
  127ab8:	e3403014 	movt	r3, #20
  127abc:	e5933000 	ldr	r3, [r3]
  127ac0:	e5933004 	ldr	r3, [r3, #4]
  127ac4:	e51b2008 	ldr	r2, [fp, #-8]
  127ac8:	e1520003 	cmp	r2, r3
  127acc:	9a000001 	bls	127ad8 <sys_timeouts_sleeptime+0x68>
    return 0;
  127ad0:	e3a03000 	mov	r3, #0
  127ad4:	ea000005 	b	127af0 <sys_timeouts_sleeptime+0x80>
  } else {
    return next_timeout->time - diff;
  127ad8:	e30f3254 	movw	r3, #62036	; 0xf254
  127adc:	e3403014 	movt	r3, #20
  127ae0:	e5933000 	ldr	r3, [r3]
  127ae4:	e5932004 	ldr	r2, [r3, #4]
  127ae8:	e51b3008 	ldr	r3, [fp, #-8]
  127aec:	e0423003 	sub	r3, r2, r3
  }
}
  127af0:	e1a00003 	mov	r0, r3
  127af4:	e24bd004 	sub	sp, fp, #4
  127af8:	e8bd8800 	pop	{fp, pc}

00127afc <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
  127afc:	e92d4800 	push	{fp, lr}
  127b00:	e28db004 	add	fp, sp, #4
  127b04:	e24dd010 	sub	sp, sp, #16
  127b08:	e50b0010 	str	r0, [fp, #-16]
  127b0c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  u32_t sleeptime;

again:
  if (!next_timeout) {
  127b10:	e30f3254 	movw	r3, #62036	; 0xf254
  127b14:	e3403014 	movt	r3, #20
  127b18:	e5933000 	ldr	r3, [r3]
  127b1c:	e3530000 	cmp	r3, #0
  127b20:	1a000004 	bne	127b38 <sys_timeouts_mbox_fetch+0x3c>
    sys_arch_mbox_fetch(mbox, msg, 0);
  127b24:	e3a02000 	mov	r2, #0
  127b28:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  127b2c:	e51b0010 	ldr	r0, [fp, #-16]
  127b30:	ebff8cb1 	bl	10adfc <sys_arch_mbox_fetch>
    return;
  127b34:	ea00000d 	b	127b70 <sys_timeouts_mbox_fetch+0x74>
  }

  sleeptime = sys_timeouts_sleeptime();
  127b38:	ebffffcc 	bl	127a70 <sys_timeouts_sleeptime>
  127b3c:	e50b0008 	str	r0, [fp, #-8]
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
  127b40:	e51b3008 	ldr	r3, [fp, #-8]
  127b44:	e3530000 	cmp	r3, #0
  127b48:	0a000006 	beq	127b68 <sys_timeouts_mbox_fetch+0x6c>
  127b4c:	e51b2008 	ldr	r2, [fp, #-8]
  127b50:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  127b54:	e51b0010 	ldr	r0, [fp, #-16]
  127b58:	ebff8ca7 	bl	10adfc <sys_arch_mbox_fetch>
  127b5c:	e1a03000 	mov	r3, r0
  127b60:	e3730001 	cmn	r3, #1
  127b64:	1a000001 	bne	127b70 <sys_timeouts_mbox_fetch+0x74>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
  127b68:	ebffff69 	bl	127914 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
  127b6c:	eaffffe7 	b	127b10 <sys_timeouts_mbox_fetch+0x14>
  }
}
  127b70:	e24bd004 	sub	sp, fp, #4
  127b74:	e8bd8800 	pop	{fp, pc}

00127b78 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
  127b78:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  127b7c:	e28db000 	add	fp, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
  127b80:	e320f000 	nop	{0}
  127b84:	e28bd000 	add	sp, fp, #0
  127b88:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  127b8c:	e12fff1e 	bx	lr

00127b90 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
  127b90:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  127b94:	e28db000 	add	fp, sp, #0
  127b98:	e24dd00c 	sub	sp, sp, #12
  u16_t n = 0;
  127b9c:	e3a03000 	mov	r3, #0
  127ba0:	e14b30b6 	strh	r3, [fp, #-6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
  127ba4:	e30e3038 	movw	r3, #57400	; 0xe038
  127ba8:	e3403014 	movt	r3, #20
  127bac:	e1d320b0 	ldrh	r2, [r3]
  127bb0:	e2823001 	add	r3, r2, #1
  127bb4:	e6ff1073 	uxth	r1, r3
  127bb8:	e30e3038 	movw	r3, #57400	; 0xe038
  127bbc:	e3403014 	movt	r3, #20
  127bc0:	e1c310b0 	strh	r1, [r3]
  127bc4:	e30f3fff 	movw	r3, #65535	; 0xffff
  127bc8:	e1520003 	cmp	r2, r3
  127bcc:	1a000003 	bne	127be0 <udp_new_port+0x50>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
  127bd0:	e30e3038 	movw	r3, #57400	; 0xe038
  127bd4:	e3403014 	movt	r3, #20
  127bd8:	e3a02903 	mov	r2, #49152	; 0xc000
  127bdc:	e1c320b0 	strh	r2, [r3]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
  127be0:	e3063a48 	movw	r3, #27208	; 0x6a48
  127be4:	e3403057 	movt	r3, #87	; 0x57
  127be8:	e5933000 	ldr	r3, [r3]
  127bec:	e50b300c 	str	r3, [fp, #-12]
  127bf0:	ea000011 	b	127c3c <udp_new_port+0xac>
    if (pcb->local_port == udp_port) {
  127bf4:	e51b300c 	ldr	r3, [fp, #-12]
  127bf8:	e1d321b2 	ldrh	r2, [r3, #18]
  127bfc:	e30e3038 	movw	r3, #57400	; 0xe038
  127c00:	e3403014 	movt	r3, #20
  127c04:	e1d330b0 	ldrh	r3, [r3]
  127c08:	e1520003 	cmp	r2, r3
  127c0c:	1a000007 	bne	127c30 <udp_new_port+0xa0>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
  127c10:	e15b30b6 	ldrh	r3, [fp, #-6]
  127c14:	e2833001 	add	r3, r3, #1
  127c18:	e14b30b6 	strh	r3, [fp, #-6]
  127c1c:	e15b30b6 	ldrh	r3, [fp, #-6]
  127c20:	e3530901 	cmp	r3, #16384	; 0x4000
  127c24:	3affffde 	bcc	127ba4 <udp_new_port+0x14>
        return 0;
  127c28:	e3a03000 	mov	r3, #0
  127c2c:	ea000008 	b	127c54 <udp_new_port+0xc4>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
  127c30:	e51b300c 	ldr	r3, [fp, #-12]
  127c34:	e593300c 	ldr	r3, [r3, #12]
  127c38:	e50b300c 	str	r3, [fp, #-12]
  127c3c:	e51b300c 	ldr	r3, [fp, #-12]
  127c40:	e3530000 	cmp	r3, #0
  127c44:	1affffea 	bne	127bf4 <udp_new_port+0x64>
      }
      goto again;
    }
  }
  return udp_port;
  127c48:	e30e3038 	movw	r3, #57400	; 0xe038
  127c4c:	e3403014 	movt	r3, #20
  127c50:	e1d330b0 	ldrh	r3, [r3]
}
  127c54:	e1a00003 	mov	r0, r3
  127c58:	e28bd000 	add	sp, fp, #0
  127c5c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  127c60:	e12fff1e 	bx	lr

00127c64 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
  127c64:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  127c68:	e28db000 	add	fp, sp, #0
  127c6c:	e24dd014 	sub	sp, sp, #20
  127c70:	e50b0008 	str	r0, [fp, #-8]
  127c74:	e50b100c 	str	r1, [fp, #-12]
  127c78:	e1a03002 	mov	r3, r2
  127c7c:	e54b300d 	strb	r3, [fp, #-13]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
  127c80:	e55b300d 	ldrb	r3, [fp, #-13]
  127c84:	e3530000 	cmp	r3, #0
  127c88:	0a00001e 	beq	127d08 <udp_input_local_match+0xa4>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
  127c8c:	e51b3008 	ldr	r3, [fp, #-8]
  127c90:	e5d33008 	ldrb	r3, [r3, #8]
  127c94:	e2033020 	and	r3, r3, #32
  127c98:	e3530000 	cmp	r3, #0
  127c9c:	0a000029 	beq	127d48 <udp_input_local_match+0xe4>
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
  127ca0:	e51b3008 	ldr	r3, [fp, #-8]
  127ca4:	e3530000 	cmp	r3, #0
  127ca8:	0a000014 	beq	127d00 <udp_input_local_match+0x9c>
  127cac:	e51b3008 	ldr	r3, [fp, #-8]
  127cb0:	e5933000 	ldr	r3, [r3]
  127cb4:	e3530000 	cmp	r3, #0
  127cb8:	0a000010 	beq	127d00 <udp_input_local_match+0x9c>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
  127cbc:	e30035e8 	movw	r3, #1512	; 0x5e8
  127cc0:	e3403015 	movt	r3, #21
  127cc4:	e5933014 	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
  127cc8:	e3730001 	cmn	r3, #1
  127ccc:	0a00000b 	beq	127d00 <udp_input_local_match+0x9c>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
  127cd0:	e51b3008 	ldr	r3, [fp, #-8]
  127cd4:	e5932000 	ldr	r2, [r3]
  127cd8:	e30035e8 	movw	r3, #1512	; 0x5e8
  127cdc:	e3403015 	movt	r3, #21
  127ce0:	e5933014 	ldr	r3, [r3, #20]
  127ce4:	e0222003 	eor	r2, r2, r3
  127ce8:	e51b300c 	ldr	r3, [fp, #-12]
  127cec:	e2833008 	add	r3, r3, #8
  127cf0:	e5933000 	ldr	r3, [r3]
  127cf4:	e0033002 	and	r3, r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
  127cf8:	e3530000 	cmp	r3, #0
  127cfc:	1a000011 	bne	127d48 <udp_input_local_match+0xe4>
          return 1;
  127d00:	e3a03001 	mov	r3, #1
  127d04:	ea000010 	b	127d4c <udp_input_local_match+0xe8>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
  127d08:	e51b3008 	ldr	r3, [fp, #-8]
  127d0c:	e3530000 	cmp	r3, #0
  127d10:	0a00000a 	beq	127d40 <udp_input_local_match+0xdc>
  127d14:	e51b3008 	ldr	r3, [fp, #-8]
  127d18:	e5933000 	ldr	r3, [r3]
  127d1c:	e3530000 	cmp	r3, #0
  127d20:	0a000006 	beq	127d40 <udp_input_local_match+0xdc>
  127d24:	e51b3008 	ldr	r3, [fp, #-8]
  127d28:	e5932000 	ldr	r2, [r3]
  127d2c:	e30035e8 	movw	r3, #1512	; 0x5e8
  127d30:	e3403015 	movt	r3, #21
  127d34:	e5933014 	ldr	r3, [r3, #20]
  127d38:	e1520003 	cmp	r2, r3
  127d3c:	1a000001 	bne	127d48 <udp_input_local_match+0xe4>
      return 1;
  127d40:	e3a03001 	mov	r3, #1
  127d44:	ea000000 	b	127d4c <udp_input_local_match+0xe8>
    }
  }

  return 0;
  127d48:	e3a03000 	mov	r3, #0
}
  127d4c:	e1a00003 	mov	r0, r3
  127d50:	e28bd000 	add	sp, fp, #0
  127d54:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  127d58:	e12fff1e 	bx	lr

00127d5c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
  127d5c:	e92d4810 	push	{r4, fp, lr}
  127d60:	e28db008 	add	fp, sp, #8
  127d64:	e24dd034 	sub	sp, sp, #52	; 0x34
  127d68:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  127d6c:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
  127d70:	e3a03000 	mov	r3, #0
  127d74:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7

  LWIP_UNUSED_ARG(inp);

  PERF_START;

  UDP_STATS_INC(udp.recv);
  127d78:	e3063840 	movw	r3, #26688	; 0x6840
  127d7c:	e3403057 	movt	r3, #87	; 0x57
  127d80:	e1d339b6 	ldrh	r3, [r3, #150]	; 0x96
  127d84:	e2833001 	add	r3, r3, #1
  127d88:	e6ff2073 	uxth	r2, r3
  127d8c:	e3063840 	movw	r3, #26688	; 0x6840
  127d90:	e3403057 	movt	r3, #87	; 0x57
  127d94:	e1c329b6 	strh	r2, [r3, #150]	; 0x96

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
  127d98:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  127d9c:	e1d330ba 	ldrh	r3, [r3, #10]
  127da0:	e3530007 	cmp	r3, #7
  127da4:	8a000019 	bhi	127e10 <udp_input+0xb4>
    /* drop short packets */
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
  127da8:	e3063840 	movw	r3, #26688	; 0x6840
  127dac:	e3403057 	movt	r3, #87	; 0x57
  127db0:	e1d339be 	ldrh	r3, [r3, #158]	; 0x9e
  127db4:	e2833001 	add	r3, r3, #1
  127db8:	e6ff2073 	uxth	r2, r3
  127dbc:	e3063840 	movw	r3, #26688	; 0x6840
  127dc0:	e3403057 	movt	r3, #87	; 0x57
  127dc4:	e1c329be 	strh	r2, [r3, #158]	; 0x9e
    UDP_STATS_INC(udp.drop);
  127dc8:	e3063840 	movw	r3, #26688	; 0x6840
  127dcc:	e3403057 	movt	r3, #87	; 0x57
  127dd0:	e1d339ba 	ldrh	r3, [r3, #154]	; 0x9a
  127dd4:	e2833001 	add	r3, r3, #1
  127dd8:	e6ff2073 	uxth	r2, r3
  127ddc:	e3063840 	movw	r3, #26688	; 0x6840
  127de0:	e3403057 	movt	r3, #87	; 0x57
  127de4:	e1c329ba 	strh	r2, [r3, #154]	; 0x9a
    MIB2_STATS_INC(mib2.udpinerrors);
  127de8:	e3063840 	movw	r3, #26688	; 0x6840
  127dec:	e3403057 	movt	r3, #87	; 0x57
  127df0:	e5933198 	ldr	r3, [r3, #408]	; 0x198
  127df4:	e2832001 	add	r2, r3, #1
  127df8:	e3063840 	movw	r3, #26688	; 0x6840
  127dfc:	e3403057 	movt	r3, #87	; 0x57
  127e00:	e5832198 	str	r2, [r3, #408]	; 0x198
    pbuf_free(p);
  127e04:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  127e08:	ebffcca3 	bl	11b09c <pbuf_free>
    goto end;
  127e0c:	ea00010c 	b	128244 <udp_input+0x4e8>
  }

  udphdr = (struct udp_hdr *)p->payload;
  127e10:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  127e14:	e5933004 	ldr	r3, [r3, #4]
  127e18:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
  127e1c:	e30035e8 	movw	r3, #1512	; 0x5e8
  127e20:	e3403015 	movt	r3, #21
  127e24:	e5932014 	ldr	r2, [r3, #20]
  127e28:	e30035e8 	movw	r3, #1512	; 0x5e8
  127e2c:	e3403015 	movt	r3, #21
  127e30:	e5933000 	ldr	r3, [r3]
  127e34:	e1a01003 	mov	r1, r3
  127e38:	e1a00002 	mov	r0, r2
  127e3c:	eb002a2c 	bl	1326f4 <ip4_addr_isbroadcast_u32>
  127e40:	e1a03000 	mov	r3, r0
  127e44:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
  127e48:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  127e4c:	e1d330b0 	ldrh	r3, [r3]
  127e50:	e6ff3073 	uxth	r3, r3
  127e54:	e1a00003 	mov	r0, r3
  127e58:	ebffba58 	bl	1167c0 <lwip_htons>
  127e5c:	e1a03000 	mov	r3, r0
  127e60:	e14b32b4 	strh	r3, [fp, #-36]	; 0xffffffdc
  dest = lwip_ntohs(udphdr->dest);
  127e64:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  127e68:	e1d330b2 	ldrh	r3, [r3, #2]
  127e6c:	e6ff3073 	uxth	r3, r3
  127e70:	e1a00003 	mov	r0, r3
  127e74:	ebffba51 	bl	1167c0 <lwip_htons>
  127e78:	e1a03000 	mov	r3, r0
  127e7c:	e14b32b6 	strh	r3, [fp, #-38]	; 0xffffffda
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
  127e80:	e3a03000 	mov	r3, #0
  127e84:	e50b3010 	str	r3, [fp, #-16]
  prev = NULL;
  127e88:	e3a03000 	mov	r3, #0
  127e8c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  uncon_pcb = NULL;
  127e90:	e3a03000 	mov	r3, #0
  127e94:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
  127e98:	e3063a48 	movw	r3, #27208	; 0x6a48
  127e9c:	e3403057 	movt	r3, #87	; 0x57
  127ea0:	e5933000 	ldr	r3, [r3]
  127ea4:	e50b3010 	str	r3, [fp, #-16]
  127ea8:	ea00004c 	b	127fe0 <udp_input+0x284>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
  127eac:	e51b3010 	ldr	r3, [fp, #-16]
  127eb0:	e1d331b2 	ldrh	r3, [r3, #18]
  127eb4:	e15b22b6 	ldrh	r2, [fp, #-38]	; 0xffffffda
  127eb8:	e1520003 	cmp	r2, r3
  127ebc:	1a000042 	bne	127fcc <udp_input+0x270>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
  127ec0:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  127ec4:	e1a02003 	mov	r2, r3
  127ec8:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  127ecc:	e51b0010 	ldr	r0, [fp, #-16]
  127ed0:	ebffff63 	bl	127c64 <udp_input_local_match>
  127ed4:	e1a03000 	mov	r3, r0
    if ((pcb->local_port == dest) &&
  127ed8:	e3530000 	cmp	r3, #0
  127edc:	0a00003a 	beq	127fcc <udp_input+0x270>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
  127ee0:	e51b3010 	ldr	r3, [fp, #-16]
  127ee4:	e5d33010 	ldrb	r3, [r3, #16]
  127ee8:	e2033004 	and	r3, r3, #4
  127eec:	e3530000 	cmp	r3, #0
  127ef0:	1a00000b 	bne	127f24 <udp_input+0x1c8>
  127ef4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  127ef8:	e3530000 	cmp	r3, #0
  127efc:	0a000006 	beq	127f1c <udp_input+0x1c0>
          ((uncon_pcb == NULL)
#if SO_REUSE
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
  127f00:	e51b3010 	ldr	r3, [fp, #-16]
  127f04:	e3530000 	cmp	r3, #0
  127f08:	0a000005 	beq	127f24 <udp_input+0x1c8>
  127f0c:	e51b3010 	ldr	r3, [fp, #-16]
  127f10:	e5933000 	ldr	r3, [r3]
  127f14:	e3530000 	cmp	r3, #0
  127f18:	0a000001 	beq	127f24 <udp_input+0x1c8>
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
  127f1c:	e51b3010 	ldr	r3, [fp, #-16]
  127f20:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
  127f24:	e51b3010 	ldr	r3, [fp, #-16]
  127f28:	e1d331b4 	ldrh	r3, [r3, #20]
  127f2c:	e15b22b4 	ldrh	r2, [fp, #-36]	; 0xffffffdc
  127f30:	e1520003 	cmp	r2, r3
  127f34:	1a000024 	bne	127fcc <udp_input+0x270>
          (ip_addr_isany_val(pcb->remote_ip) ||
  127f38:	e51b3010 	ldr	r3, [fp, #-16]
  127f3c:	e5933004 	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
  127f40:	e3530000 	cmp	r3, #0
  127f44:	0a000006 	beq	127f64 <udp_input+0x208>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
  127f48:	e51b3010 	ldr	r3, [fp, #-16]
  127f4c:	e5932004 	ldr	r2, [r3, #4]
  127f50:	e30035e8 	movw	r3, #1512	; 0x5e8
  127f54:	e3403015 	movt	r3, #21
  127f58:	e5933010 	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
  127f5c:	e1520003 	cmp	r2, r3
  127f60:	1a000019 	bne	127fcc <udp_input+0x270>
        /* the first fully matching PCB */
        if (prev != NULL) {
  127f64:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  127f68:	e3530000 	cmp	r3, #0
  127f6c:	0a00000d 	beq	127fa8 <udp_input+0x24c>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
  127f70:	e51b3010 	ldr	r3, [fp, #-16]
  127f74:	e593200c 	ldr	r2, [r3, #12]
  127f78:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  127f7c:	e583200c 	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
  127f80:	e3063a48 	movw	r3, #27208	; 0x6a48
  127f84:	e3403057 	movt	r3, #87	; 0x57
  127f88:	e5932000 	ldr	r2, [r3]
  127f8c:	e51b3010 	ldr	r3, [fp, #-16]
  127f90:	e583200c 	str	r2, [r3, #12]
          udp_pcbs = pcb;
  127f94:	e3063a48 	movw	r3, #27208	; 0x6a48
  127f98:	e3403057 	movt	r3, #87	; 0x57
  127f9c:	e51b2010 	ldr	r2, [fp, #-16]
  127fa0:	e5832000 	str	r2, [r3]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
  127fa4:	ea000010 	b	127fec <udp_input+0x290>
          UDP_STATS_INC(udp.cachehit);
  127fa8:	e3063840 	movw	r3, #26688	; 0x6840
  127fac:	e3403057 	movt	r3, #87	; 0x57
  127fb0:	e1d33aba 	ldrh	r3, [r3, #170]	; 0xaa
  127fb4:	e2833001 	add	r3, r3, #1
  127fb8:	e6ff2073 	uxth	r2, r3
  127fbc:	e3063840 	movw	r3, #26688	; 0x6840
  127fc0:	e3403057 	movt	r3, #87	; 0x57
  127fc4:	e1c32aba 	strh	r2, [r3, #170]	; 0xaa
        break;
  127fc8:	ea000007 	b	127fec <udp_input+0x290>
      }
    }

    prev = pcb;
  127fcc:	e51b3010 	ldr	r3, [fp, #-16]
  127fd0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
  127fd4:	e51b3010 	ldr	r3, [fp, #-16]
  127fd8:	e593300c 	ldr	r3, [r3, #12]
  127fdc:	e50b3010 	str	r3, [fp, #-16]
  127fe0:	e51b3010 	ldr	r3, [fp, #-16]
  127fe4:	e3530000 	cmp	r3, #0
  127fe8:	1affffaf 	bne	127eac <udp_input+0x150>
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
  127fec:	e51b3010 	ldr	r3, [fp, #-16]
  127ff0:	e3530000 	cmp	r3, #0
  127ff4:	1a000001 	bne	128000 <udp_input+0x2a4>
    pcb = uncon_pcb;
  127ff8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  127ffc:	e50b3010 	str	r3, [fp, #-16]
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
  128000:	e51b3010 	ldr	r3, [fp, #-16]
  128004:	e3530000 	cmp	r3, #0
  128008:	0a000002 	beq	128018 <udp_input+0x2bc>
    for_us = 1;
  12800c:	e3a03001 	mov	r3, #1
  128010:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
  128014:	ea00000a 	b	128044 <udp_input+0x2e8>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
  128018:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  12801c:	e2833004 	add	r3, r3, #4
  128020:	e5932000 	ldr	r2, [r3]
  128024:	e30035e8 	movw	r3, #1512	; 0x5e8
  128028:	e3403015 	movt	r3, #21
  12802c:	e5933014 	ldr	r3, [r3, #20]
  128030:	e1520003 	cmp	r2, r3
  128034:	03a03001 	moveq	r3, #1
  128038:	13a03000 	movne	r3, #0
  12803c:	e6ef3073 	uxtb	r3, r3
  128040:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
  128044:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
  128048:	e3530000 	cmp	r3, #0
  12804c:	0a000079 	beq	128238 <udp_input+0x4dc>
          goto chkerr;
        }
      } else
#endif /* LWIP_UDPLITE */
      {
        if (udphdr->chksum != 0) {
  128050:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  128054:	e1d330b6 	ldrh	r3, [r3, #6]
  128058:	e6ff3073 	uxth	r3, r3
  12805c:	e3530000 	cmp	r3, #0
  128060:	0a00000a 	beq	128090 <udp_input+0x334>
          if (ip_chksum_pseudo(p, IP_PROTO_UDP, p->tot_len,
  128064:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  128068:	e1d320b8 	ldrh	r2, [r3, #8]
  12806c:	e59f3244 	ldr	r3, [pc, #580]	; 1282b8 <udp_input+0x55c>
  128070:	e58d3000 	str	r3, [sp]
  128074:	e59f3240 	ldr	r3, [pc, #576]	; 1282bc <udp_input+0x560>
  128078:	e3a01011 	mov	r1, #17
  12807c:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  128080:	ebffc1ed 	bl	11883c <ip_chksum_pseudo>
  128084:	e1a03000 	mov	r3, r0
  128088:	e3530000 	cmp	r3, #0
  12808c:	1a00006d 	bne	128248 <udp_input+0x4ec>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
  128090:	e3e01007 	mvn	r1, #7
  128094:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  128098:	ebffcbe1 	bl	11b024 <pbuf_header>
  12809c:	e1a03000 	mov	r3, r0
  1280a0:	e3530000 	cmp	r3, #0
  1280a4:	0a000018 	beq	12810c <udp_input+0x3b0>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
  1280a8:	e3080c94 	movw	r0, #35988	; 0x8c94
  1280ac:	e3400014 	movt	r0, #20
  1280b0:	ebff6c17 	bl	103114 <rt_kprintf>
  1280b4:	e3001155 	movw	r1, #341	; 0x155
  1280b8:	e3080ca8 	movw	r0, #36008	; 0x8ca8
  1280bc:	e3400014 	movt	r0, #20
  1280c0:	ebff8be7 	bl	10b064 <sys_arch_assert>
      UDP_STATS_INC(udp.drop);
  1280c4:	e3063840 	movw	r3, #26688	; 0x6840
  1280c8:	e3403057 	movt	r3, #87	; 0x57
  1280cc:	e1d339ba 	ldrh	r3, [r3, #154]	; 0x9a
  1280d0:	e2833001 	add	r3, r3, #1
  1280d4:	e6ff2073 	uxth	r2, r3
  1280d8:	e3063840 	movw	r3, #26688	; 0x6840
  1280dc:	e3403057 	movt	r3, #87	; 0x57
  1280e0:	e1c329ba 	strh	r2, [r3, #154]	; 0x9a
      MIB2_STATS_INC(mib2.udpinerrors);
  1280e4:	e3063840 	movw	r3, #26688	; 0x6840
  1280e8:	e3403057 	movt	r3, #87	; 0x57
  1280ec:	e5933198 	ldr	r3, [r3, #408]	; 0x198
  1280f0:	e2832001 	add	r2, r3, #1
  1280f4:	e3063840 	movw	r3, #26688	; 0x6840
  1280f8:	e3403057 	movt	r3, #87	; 0x57
  1280fc:	e5832198 	str	r2, [r3, #408]	; 0x198
      pbuf_free(p);
  128100:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  128104:	ebffcbe4 	bl	11b09c <pbuf_free>
      goto end;
  128108:	ea00004d 	b	128244 <udp_input+0x4e8>
    }

    if (pcb != NULL) {
  12810c:	e51b3010 	ldr	r3, [fp, #-16]
  128110:	e3530000 	cmp	r3, #0
  128114:	0a000018 	beq	12817c <udp_input+0x420>
      MIB2_STATS_INC(mib2.udpindatagrams);
  128118:	e3063840 	movw	r3, #26688	; 0x6840
  12811c:	e3403057 	movt	r3, #87	; 0x57
  128120:	e5933190 	ldr	r3, [r3, #400]	; 0x190
  128124:	e2832001 	add	r2, r3, #1
  128128:	e3063840 	movw	r3, #26688	; 0x6840
  12812c:	e3403057 	movt	r3, #87	; 0x57
  128130:	e5832190 	str	r2, [r3, #400]	; 0x190
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
  128134:	e51b3010 	ldr	r3, [fp, #-16]
  128138:	e5933020 	ldr	r3, [r3, #32]
  12813c:	e3530000 	cmp	r3, #0
  128140:	0a00000a 	beq	128170 <udp_input+0x414>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
  128144:	e51b3010 	ldr	r3, [fp, #-16]
  128148:	e5934020 	ldr	r4, [r3, #32]
  12814c:	e51b3010 	ldr	r3, [fp, #-16]
  128150:	e5930024 	ldr	r0, [r3, #36]	; 0x24
  128154:	e15b32b4 	ldrh	r3, [fp, #-36]	; 0xffffffdc
  128158:	e58d3000 	str	r3, [sp]
  12815c:	e59f3158 	ldr	r3, [pc, #344]	; 1282bc <udp_input+0x560>
  128160:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  128164:	e51b1010 	ldr	r1, [fp, #-16]
  128168:	e12fff34 	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
  12816c:	ea00004f 	b	1282b0 <udp_input+0x554>
        pbuf_free(p);
  128170:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  128174:	ebffcbc8 	bl	11b09c <pbuf_free>
        goto end;
  128178:	ea000031 	b	128244 <udp_input+0x4e8>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
  12817c:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  128180:	e3530000 	cmp	r3, #0
  128184:	1a000011 	bne	1281d0 <udp_input+0x474>
  128188:	e30035e8 	movw	r3, #1512	; 0x5e8
  12818c:	e3403015 	movt	r3, #21
  128190:	e5933014 	ldr	r3, [r3, #20]
  128194:	e20330f0 	and	r3, r3, #240	; 0xf0
  128198:	e35300e0 	cmp	r3, #224	; 0xe0
  12819c:	0a00000b 	beq	1281d0 <udp_input+0x474>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
  1281a0:	e30035e8 	movw	r3, #1512	; 0x5e8
  1281a4:	e3403015 	movt	r3, #21
  1281a8:	e1d330bc 	ldrh	r3, [r3, #12]
  1281ac:	e2833008 	add	r3, r3, #8
  1281b0:	e6ff3073 	uxth	r3, r3
  1281b4:	e6bf3073 	sxth	r3, r3
  1281b8:	e1a01003 	mov	r1, r3
  1281bc:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  1281c0:	ebffcba6 	bl	11b060 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
  1281c4:	e3a01003 	mov	r1, #3
  1281c8:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  1281cc:	eb001f27 	bl	12fe70 <icmp_dest_unreach>
      UDP_STATS_INC(udp.proterr);
  1281d0:	e3063840 	movw	r3, #26688	; 0x6840
  1281d4:	e3403057 	movt	r3, #87	; 0x57
  1281d8:	e1d33ab4 	ldrh	r3, [r3, #164]	; 0xa4
  1281dc:	e2833001 	add	r3, r3, #1
  1281e0:	e6ff2073 	uxth	r2, r3
  1281e4:	e3063840 	movw	r3, #26688	; 0x6840
  1281e8:	e3403057 	movt	r3, #87	; 0x57
  1281ec:	e1c32ab4 	strh	r2, [r3, #164]	; 0xa4
      UDP_STATS_INC(udp.drop);
  1281f0:	e3063840 	movw	r3, #26688	; 0x6840
  1281f4:	e3403057 	movt	r3, #87	; 0x57
  1281f8:	e1d339ba 	ldrh	r3, [r3, #154]	; 0x9a
  1281fc:	e2833001 	add	r3, r3, #1
  128200:	e6ff2073 	uxth	r2, r3
  128204:	e3063840 	movw	r3, #26688	; 0x6840
  128208:	e3403057 	movt	r3, #87	; 0x57
  12820c:	e1c329ba 	strh	r2, [r3, #154]	; 0x9a
      MIB2_STATS_INC(mib2.udpnoports);
  128210:	e3063840 	movw	r3, #26688	; 0x6840
  128214:	e3403057 	movt	r3, #87	; 0x57
  128218:	e5933194 	ldr	r3, [r3, #404]	; 0x194
  12821c:	e2832001 	add	r2, r3, #1
  128220:	e3063840 	movw	r3, #26688	; 0x6840
  128224:	e3403057 	movt	r3, #87	; 0x57
  128228:	e5832194 	str	r2, [r3, #404]	; 0x194
      pbuf_free(p);
  12822c:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  128230:	ebffcb99 	bl	11b09c <pbuf_free>
  return;
  128234:	ea00001d 	b	1282b0 <udp_input+0x554>
    pbuf_free(p);
  128238:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  12823c:	ebffcb96 	bl	11b09c <pbuf_free>
  return;
  128240:	ea00001a 	b	1282b0 <udp_input+0x554>
  128244:	ea000019 	b	1282b0 <udp_input+0x554>
            goto chkerr;
  128248:	e320f000 	nop	{0}
#if CHECKSUM_CHECK_UDP
chkerr:
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
              ("udp_input: UDP (or UDP Lite) datagram discarded due to failing checksum\n"));
  UDP_STATS_INC(udp.chkerr);
  12824c:	e3063840 	movw	r3, #26688	; 0x6840
  128250:	e3403057 	movt	r3, #87	; 0x57
  128254:	e1d339bc 	ldrh	r3, [r3, #156]	; 0x9c
  128258:	e2833001 	add	r3, r3, #1
  12825c:	e6ff2073 	uxth	r2, r3
  128260:	e3063840 	movw	r3, #26688	; 0x6840
  128264:	e3403057 	movt	r3, #87	; 0x57
  128268:	e1c329bc 	strh	r2, [r3, #156]	; 0x9c
  UDP_STATS_INC(udp.drop);
  12826c:	e3063840 	movw	r3, #26688	; 0x6840
  128270:	e3403057 	movt	r3, #87	; 0x57
  128274:	e1d339ba 	ldrh	r3, [r3, #154]	; 0x9a
  128278:	e2833001 	add	r3, r3, #1
  12827c:	e6ff2073 	uxth	r2, r3
  128280:	e3063840 	movw	r3, #26688	; 0x6840
  128284:	e3403057 	movt	r3, #87	; 0x57
  128288:	e1c329ba 	strh	r2, [r3, #154]	; 0x9a
  MIB2_STATS_INC(mib2.udpinerrors);
  12828c:	e3063840 	movw	r3, #26688	; 0x6840
  128290:	e3403057 	movt	r3, #87	; 0x57
  128294:	e5933198 	ldr	r3, [r3, #408]	; 0x198
  128298:	e2832001 	add	r2, r3, #1
  12829c:	e3063840 	movw	r3, #26688	; 0x6840
  1282a0:	e3403057 	movt	r3, #87	; 0x57
  1282a4:	e5832198 	str	r2, [r3, #408]	; 0x198
  pbuf_free(p);
  1282a8:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  1282ac:	ebffcb7a 	bl	11b09c <pbuf_free>
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
  1282b0:	e24bd008 	sub	sp, fp, #8
  1282b4:	e8bd8810 	pop	{r4, fp, pc}
  1282b8:	001505fc 	.word	0x001505fc
  1282bc:	001505f8 	.word	0x001505f8

001282c0 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
  1282c0:	e92d4800 	push	{fp, lr}
  1282c4:	e28db004 	add	fp, sp, #4
  1282c8:	e24dd008 	sub	sp, sp, #8
  1282cc:	e50b0008 	str	r0, [fp, #-8]
  1282d0:	e50b100c 	str	r1, [fp, #-12]
  if ((pcb == NULL) || IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
  1282d4:	e51b3008 	ldr	r3, [fp, #-8]
  1282d8:	e3530000 	cmp	r3, #0
  1282dc:	1a000001 	bne	1282e8 <udp_send+0x28>
    return ERR_VAL;
  1282e0:	e3e03005 	mvn	r3, #5
  1282e4:	ea000007 	b	128308 <udp_send+0x48>
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
  1282e8:	e51b3008 	ldr	r3, [fp, #-8]
  1282ec:	e2832004 	add	r2, r3, #4
  1282f0:	e51b3008 	ldr	r3, [fp, #-8]
  1282f4:	e1d331b4 	ldrh	r3, [r3, #20]
  1282f8:	e51b100c 	ldr	r1, [fp, #-12]
  1282fc:	e51b0008 	ldr	r0, [fp, #-8]
  128300:	eb000003 	bl	128314 <udp_sendto>
  128304:	e1a03000 	mov	r3, r0
}
  128308:	e1a00003 	mov	r0, r3
  12830c:	e24bd004 	sub	sp, fp, #4
  128310:	e8bd8800 	pop	{fp, pc}

00128314 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port)
{
  128314:	e92d4800 	push	{fp, lr}
  128318:	e28db004 	add	fp, sp, #4
  12831c:	e24dd020 	sub	sp, sp, #32
  128320:	e50b0010 	str	r0, [fp, #-16]
  128324:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  128328:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  12832c:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
udp_sendto_chksum(struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *dst_ip,
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;
  const ip_addr_t *dst_ip_route = dst_ip;
  128330:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128334:	e50b3008 	str	r3, [fp, #-8]

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
  128338:	e51b3010 	ldr	r3, [fp, #-16]
  12833c:	e3530000 	cmp	r3, #0
  128340:	0a000002 	beq	128350 <udp_sendto+0x3c>
  128344:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128348:	e3530000 	cmp	r3, #0
  12834c:	1a000001 	bne	128358 <udp_sendto+0x44>
    return ERR_VAL;
  128350:	e3e03005 	mvn	r3, #5
  128354:	ea00002b 	b	128408 <udp_sendto+0xf4>
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

#if LWIP_IPV6 || (LWIP_IPV4 && LWIP_MULTICAST_TX_OPTIONS)
  if (ip_addr_ismulticast(dst_ip_route)) {
  128358:	e51b3008 	ldr	r3, [fp, #-8]
  12835c:	e5933000 	ldr	r3, [r3]
  128360:	e20330f0 	and	r3, r3, #240	; 0xf0
  128364:	e35300e0 	cmp	r3, #224	; 0xe0
  128368:	1a00000d 	bne	1283a4 <udp_sendto+0x90>
#if LWIP_IPV4 && LWIP_MULTICAST_TX_OPTIONS
      /* IPv4 does not use source-based routing by default, so we use an
         administratively selected interface for multicast by default.
         However, this can be overridden by setting an interface address
         in pcb->multicast_ip that is used for routing. */
      if (!ip_addr_isany_val(pcb->multicast_ip) &&
  12836c:	e51b3010 	ldr	r3, [fp, #-16]
  128370:	e5933018 	ldr	r3, [r3, #24]
  128374:	e3530000 	cmp	r3, #0
  128378:	0a000009 	beq	1283a4 <udp_sendto+0x90>
          !ip4_addr_cmp(ip_2_ip4(&pcb->multicast_ip), IP4_ADDR_BROADCAST)) {
  12837c:	e51b3010 	ldr	r3, [fp, #-16]
  128380:	e5932018 	ldr	r2, [r3, #24]
  128384:	e3093ae0 	movw	r3, #39648	; 0x9ae0
  128388:	e3403014 	movt	r3, #20
  12838c:	e5933000 	ldr	r3, [r3]
      if (!ip_addr_isany_val(pcb->multicast_ip) &&
  128390:	e1520003 	cmp	r2, r3
  128394:	0a000002 	beq	1283a4 <udp_sendto+0x90>
        dst_ip_route = &pcb->multicast_ip;
  128398:	e51b3010 	ldr	r3, [fp, #-16]
  12839c:	e2833018 	add	r3, r3, #24
  1283a0:	e50b3008 	str	r3, [fp, #-8]
  /* find the outgoing network interface for this packet */
  if(IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    /* Don't call ip_route() with IP_ANY_TYPE */
    netif = ip_route(IP46_ADDR_ANY(IP_GET_TYPE(dst_ip_route)), dst_ip_route);
  } else {
    netif = ip_route(&pcb->local_ip, dst_ip_route);
  1283a4:	e51b0008 	ldr	r0, [fp, #-8]
  1283a8:	eb0023f2 	bl	131378 <ip4_route>
  1283ac:	e50b000c 	str	r0, [fp, #-12]
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
  1283b0:	e51b300c 	ldr	r3, [fp, #-12]
  1283b4:	e3530000 	cmp	r3, #0
  1283b8:	1a000009 	bne	1283e4 <udp_sendto+0xd0>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
  1283bc:	e3063840 	movw	r3, #26688	; 0x6840
  1283c0:	e3403057 	movt	r3, #87	; 0x57
  1283c4:	e1d33ab2 	ldrh	r3, [r3, #162]	; 0xa2
  1283c8:	e2833001 	add	r3, r3, #1
  1283cc:	e6ff2073 	uxth	r2, r3
  1283d0:	e3063840 	movw	r3, #26688	; 0x6840
  1283d4:	e3403057 	movt	r3, #87	; 0x57
  1283d8:	e1c32ab2 	strh	r2, [r3, #162]	; 0xa2
    return ERR_RTE;
  1283dc:	e3e03003 	mvn	r3, #3
  1283e0:	ea000008 	b	128408 <udp_sendto+0xf4>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
  1283e4:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
  1283e8:	e51b300c 	ldr	r3, [fp, #-12]
  1283ec:	e58d3000 	str	r3, [sp]
  1283f0:	e1a03002 	mov	r3, r2
  1283f4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1283f8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1283fc:	e51b0010 	ldr	r0, [fp, #-16]
  128400:	eb000003 	bl	128414 <udp_sendto_if>
  128404:	e1a03000 	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
  128408:	e1a00003 	mov	r0, r3
  12840c:	e24bd004 	sub	sp, fp, #4
  128410:	e8bd8800 	pop	{fp, pc}

00128414 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
  128414:	e92d4800 	push	{fp, lr}
  128418:	e28db004 	add	fp, sp, #4
  12841c:	e24dd020 	sub	sp, sp, #32
  128420:	e50b0010 	str	r0, [fp, #-16]
  128424:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  128428:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  12842c:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
  128430:	e51b3010 	ldr	r3, [fp, #-16]
  128434:	e3530000 	cmp	r3, #0
  128438:	0a000002 	beq	128448 <udp_sendto_if+0x34>
  12843c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128440:	e3530000 	cmp	r3, #0
  128444:	1a000001 	bne	128450 <udp_sendto_if+0x3c>
    return ERR_VAL;
  128448:	e3e03005 	mvn	r3, #5
  12844c:	ea000025 	b	1284e8 <udp_sendto_if+0xd4>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
  128450:	e51b3010 	ldr	r3, [fp, #-16]
  128454:	e3530000 	cmp	r3, #0
  128458:	0a000008 	beq	128480 <udp_sendto_if+0x6c>
  12845c:	e51b3010 	ldr	r3, [fp, #-16]
  128460:	e5933000 	ldr	r3, [r3]
  128464:	e3530000 	cmp	r3, #0
  128468:	0a000004 	beq	128480 <udp_sendto_if+0x6c>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
  12846c:	e51b3010 	ldr	r3, [fp, #-16]
  128470:	e5933000 	ldr	r3, [r3]
  128474:	e20330f0 	and	r3, r3, #240	; 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
  128478:	e35300e0 	cmp	r3, #224	; 0xe0
  12847c:	1a000003 	bne	128490 <udp_sendto_if+0x7c>
    /* if the local_ip is any or multicast
     * use the outgoing network interface IP address as source address */
    src_ip = netif_ip_addr4(netif);
  128480:	e59b3004 	ldr	r3, [fp, #4]
  128484:	e2833004 	add	r3, r3, #4
  128488:	e50b3008 	str	r3, [fp, #-8]
  12848c:	ea00000a 	b	1284bc <udp_sendto_if+0xa8>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
  128490:	e51b3010 	ldr	r3, [fp, #-16]
  128494:	e5932000 	ldr	r2, [r3]
  128498:	e59b3004 	ldr	r3, [fp, #4]
  12849c:	e2833004 	add	r3, r3, #4
  1284a0:	e5933000 	ldr	r3, [r3]
  1284a4:	e1520003 	cmp	r2, r3
  1284a8:	0a000001 	beq	1284b4 <udp_sendto_if+0xa0>
      /* local_ip doesn't match, drop the packet */
      return ERR_RTE;
  1284ac:	e3e03003 	mvn	r3, #3
  1284b0:	ea00000c 	b	1284e8 <udp_sendto_if+0xd4>
    }
    /* use UDP PCB local IP address as source address */
    src_ip = &pcb->local_ip;
  1284b4:	e51b3010 	ldr	r3, [fp, #-16]
  1284b8:	e50b3008 	str	r3, [fp, #-8]
  }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
  1284bc:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
  1284c0:	e51b3008 	ldr	r3, [fp, #-8]
  1284c4:	e58d3004 	str	r3, [sp, #4]
  1284c8:	e59b3004 	ldr	r3, [fp, #4]
  1284cc:	e58d3000 	str	r3, [sp]
  1284d0:	e1a03002 	mov	r3, r2
  1284d4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1284d8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1284dc:	e51b0010 	ldr	r0, [fp, #-16]
  1284e0:	eb000003 	bl	1284f4 <udp_sendto_if_src>
  1284e4:	e1a03000 	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
  1284e8:	e1a00003 	mov	r0, r3
  1284ec:	e24bd004 	sub	sp, fp, #4
  1284f0:	e8bd8800 	pop	{fp, pc}

001284f4 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
  1284f4:	e92d4800 	push	{fp, lr}
  1284f8:	e28db004 	add	fp, sp, #4
  1284fc:	e24dd030 	sub	sp, sp, #48	; 0x30
  128500:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  128504:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  128508:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  12850c:	e14b32b2 	strh	r3, [fp, #-34]	; 0xffffffde
  err_t err;
  struct pbuf *q; /* q will be sent down the stack */
  u8_t ip_proto;
  u8_t ttl;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
  128510:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128514:	e3530000 	cmp	r3, #0
  128518:	0a000002 	beq	128528 <udp_sendto_if_src+0x34>
  12851c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  128520:	e3530000 	cmp	r3, #0
  128524:	1a000001 	bne	128530 <udp_sendto_if_src+0x3c>
      !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
  128528:	e3e03005 	mvn	r3, #5
  12852c:	ea0000be 	b	12882c <udp_sendto_if_src+0x338>
  }

#if LWIP_IPV4 && IP_SOF_BROADCAST
  /* broadcast filter? */
  if (!ip_get_option(pcb, SOF_BROADCAST) &&
  128530:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128534:	e5d33008 	ldrb	r3, [r3, #8]
  128538:	e2033020 	and	r3, r3, #32
  12853c:	e3530000 	cmp	r3, #0
  128540:	1a000009 	bne	12856c <udp_sendto_if_src+0x78>
#if LWIP_IPV6
      IP_IS_V4(dst_ip) &&
#endif /* LWIP_IPV6 */
      ip_addr_isbroadcast(dst_ip, netif)) {
  128544:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  128548:	e5933000 	ldr	r3, [r3]
  12854c:	e59b1004 	ldr	r1, [fp, #4]
  128550:	e1a00003 	mov	r0, r3
  128554:	eb002866 	bl	1326f4 <ip4_addr_isbroadcast_u32>
  128558:	e1a03000 	mov	r3, r0
  if (!ip_get_option(pcb, SOF_BROADCAST) &&
  12855c:	e3530000 	cmp	r3, #0
  128560:	0a000001 	beq	12856c <udp_sendto_if_src+0x78>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("udp_sendto_if: SOF_BROADCAST not enabled on pcb %p\n", (void *)pcb));
    return ERR_VAL;
  128564:	e3e03005 	mvn	r3, #5
  128568:	ea0000af 	b	12882c <udp_sendto_if_src+0x338>
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
  12856c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128570:	e1d331b2 	ldrh	r3, [r3, #18]
  128574:	e3530000 	cmp	r3, #0
  128578:	1a00000c 	bne	1285b0 <udp_sendto_if_src+0xbc>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
  12857c:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  128580:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128584:	e1d331b2 	ldrh	r3, [r3, #18]
  128588:	e1a02003 	mov	r2, r3
  12858c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  128590:	eb0000a8 	bl	128838 <udp_bind>
  128594:	e1a03000 	mov	r3, r0
  128598:	e54b300b 	strb	r3, [fp, #-11]
    if (err != ERR_OK) {
  12859c:	e15b30db 	ldrsb	r3, [fp, #-11]
  1285a0:	e3530000 	cmp	r3, #0
  1285a4:	0a000001 	beq	1285b0 <udp_sendto_if_src+0xbc>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
  1285a8:	e15b30db 	ldrsb	r3, [fp, #-11]
  1285ac:	ea00009e 	b	12882c <udp_sendto_if_src+0x338>
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
  1285b0:	e3a01008 	mov	r1, #8
  1285b4:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  1285b8:	ebffca99 	bl	11b024 <pbuf_header>
  1285bc:	e1a03000 	mov	r3, r0
  1285c0:	e3530000 	cmp	r3, #0
  1285c4:	0a000011 	beq	128610 <udp_sendto_if_src+0x11c>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
  1285c8:	e3a02000 	mov	r2, #0
  1285cc:	e3a01008 	mov	r1, #8
  1285d0:	e3a00001 	mov	r0, #1
  1285d4:	ebffc7a9 	bl	11a480 <pbuf_alloc>
  1285d8:	e50b0008 	str	r0, [fp, #-8]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
  1285dc:	e51b3008 	ldr	r3, [fp, #-8]
  1285e0:	e3530000 	cmp	r3, #0
  1285e4:	1a000001 	bne	1285f0 <udp_sendto_if_src+0xfc>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
  1285e8:	e3e03000 	mvn	r3, #0
  1285ec:	ea00008e 	b	12882c <udp_sendto_if_src+0x338>
    }
    if (p->tot_len != 0) {
  1285f0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1285f4:	e1d330b8 	ldrh	r3, [r3, #8]
  1285f8:	e3530000 	cmp	r3, #0
  1285fc:	0a000005 	beq	128618 <udp_sendto_if_src+0x124>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
  128600:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  128604:	e51b0008 	ldr	r0, [fp, #-8]
  128608:	ebffcba4 	bl	11b4a0 <pbuf_chain>
  12860c:	ea000001 	b	128618 <udp_sendto_if_src+0x124>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
  128610:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  128614:	e50b3008 	str	r3, [fp, #-8]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
  128618:	e51b3008 	ldr	r3, [fp, #-8]
  12861c:	e1d330ba 	ldrh	r3, [r3, #10]
  128620:	e3530007 	cmp	r3, #7
  128624:	8a000006 	bhi	128644 <udp_sendto_if_src+0x150>
  128628:	e3080cd4 	movw	r0, #36052	; 0x8cd4
  12862c:	e3400014 	movt	r0, #20
  128630:	ebff6ab7 	bl	103114 <rt_kprintf>
  128634:	e3a01fb7 	mov	r1, #732	; 0x2dc
  128638:	e3080ca8 	movw	r0, #36008	; 0x8ca8
  12863c:	e3400014 	movt	r0, #20
  128640:	ebff8a87 	bl	10b064 <sys_arch_assert>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
  128644:	e51b3008 	ldr	r3, [fp, #-8]
  128648:	e5933004 	ldr	r3, [r3, #4]
  12864c:	e50b3010 	str	r3, [fp, #-16]
  udphdr->src = lwip_htons(pcb->local_port);
  128650:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128654:	e1d331b2 	ldrh	r3, [r3, #18]
  128658:	e1a00003 	mov	r0, r3
  12865c:	ebffb857 	bl	1167c0 <lwip_htons>
  128660:	e1a03000 	mov	r3, r0
  128664:	e1a02003 	mov	r2, r3
  128668:	e51b3010 	ldr	r3, [fp, #-16]
  12866c:	e1c320b0 	strh	r2, [r3]
  udphdr->dest = lwip_htons(dst_port);
  128670:	e15b32b2 	ldrh	r3, [fp, #-34]	; 0xffffffde
  128674:	e1a00003 	mov	r0, r3
  128678:	ebffb850 	bl	1167c0 <lwip_htons>
  12867c:	e1a03000 	mov	r3, r0
  128680:	e1a02003 	mov	r2, r3
  128684:	e51b3010 	ldr	r3, [fp, #-16]
  128688:	e1c320b2 	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
  12868c:	e51b3010 	ldr	r3, [fp, #-16]
  128690:	e3a02000 	mov	r2, #0
  128694:	e5c32006 	strb	r2, [r3, #6]
  128698:	e3a02000 	mov	r2, #0
  12869c:	e5c32007 	strb	r2, [r3, #7]

  /* Multicast Loop? */
#if (LWIP_IPV4 && LWIP_MULTICAST_TX_OPTIONS) || (LWIP_IPV6 && LWIP_IPV6_MLD)
  if (((pcb->flags & UDP_FLAGS_MULTICAST_LOOP) != 0) && ip_addr_ismulticast(dst_ip)) {
  1286a0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1286a4:	e5d33010 	ldrb	r3, [r3, #16]
  1286a8:	e2033008 	and	r3, r3, #8
  1286ac:	e3530000 	cmp	r3, #0
  1286b0:	0a00000a 	beq	1286e0 <udp_sendto_if_src+0x1ec>
  1286b4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1286b8:	e5933000 	ldr	r3, [r3]
  1286bc:	e20330f0 	and	r3, r3, #240	; 0xf0
  1286c0:	e35300e0 	cmp	r3, #224	; 0xe0
  1286c4:	1a000005 	bne	1286e0 <udp_sendto_if_src+0x1ec>
    q->flags |= PBUF_FLAG_MCASTLOOP;
  1286c8:	e51b3008 	ldr	r3, [fp, #-8]
  1286cc:	e5d3300d 	ldrb	r3, [r3, #13]
  1286d0:	e3833004 	orr	r3, r3, #4
  1286d4:	e6ef2073 	uxtb	r2, r3
  1286d8:	e51b3008 	ldr	r3, [fp, #-8]
  1286dc:	e5c3200d 	strb	r2, [r3, #13]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
  1286e0:	e51b3008 	ldr	r3, [fp, #-8]
  1286e4:	e1d330b8 	ldrh	r3, [r3, #8]
  1286e8:	e1a00003 	mov	r0, r3
  1286ec:	ebffb833 	bl	1167c0 <lwip_htons>
  1286f0:	e1a03000 	mov	r3, r0
  1286f4:	e1a02003 	mov	r2, r3
  1286f8:	e51b3010 	ldr	r3, [fp, #-16]
  1286fc:	e1c320b4 	strh	r2, [r3, #4]
    /* calculate checksum */
#if CHECKSUM_GEN_UDP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_UDP) {
      /* Checksum is mandatory over IPv6. */
      if (IP_IS_V6(dst_ip) || (pcb->flags & UDP_FLAGS_NOCHKSUM) == 0) {
  128700:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128704:	e5d33010 	ldrb	r3, [r3, #16]
  128708:	e2033001 	and	r3, r3, #1
  12870c:	e3530000 	cmp	r3, #0
  128710:	1a000011 	bne	12875c <udp_sendto_if_src+0x268>
          acc = udpchksum + (u16_t)~(chksum);
          udpchksum = FOLD_U32T(acc);
        } else
#endif /* LWIP_CHECKSUM_ON_COPY */
        {
          udpchksum = ip_chksum_pseudo(q, IP_PROTO_UDP, q->tot_len,
  128714:	e51b3008 	ldr	r3, [fp, #-8]
  128718:	e1d320b8 	ldrh	r2, [r3, #8]
  12871c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  128720:	e58d3000 	str	r3, [sp]
  128724:	e59b3008 	ldr	r3, [fp, #8]
  128728:	e3a01011 	mov	r1, #17
  12872c:	e51b0008 	ldr	r0, [fp, #-8]
  128730:	ebffc041 	bl	11883c <ip_chksum_pseudo>
  128734:	e1a03000 	mov	r3, r0
  128738:	e14b30ba 	strh	r3, [fp, #-10]
            src_ip, dst_ip);
        }

        /* chksum zero must become 0xffff, as zero means 'no checksum' */
        if (udpchksum == 0x0000) {
  12873c:	e15b30ba 	ldrh	r3, [fp, #-10]
  128740:	e3530000 	cmp	r3, #0
  128744:	1a000001 	bne	128750 <udp_sendto_if_src+0x25c>
          udpchksum = 0xffff;
  128748:	e3e03000 	mvn	r3, #0
  12874c:	e14b30ba 	strh	r3, [fp, #-10]
        }
        udphdr->chksum = udpchksum;
  128750:	e51b3010 	ldr	r3, [fp, #-16]
  128754:	e15b20ba 	ldrh	r2, [fp, #-10]
  128758:	e1c320b6 	strh	r2, [r3, #6]
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
  12875c:	e3a03011 	mov	r3, #17
  128760:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
  }

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
  128764:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  128768:	e5933000 	ldr	r3, [r3]
  12876c:	e20330f0 	and	r3, r3, #240	; 0xf0
  128770:	e35300e0 	cmp	r3, #224	; 0xe0
  128774:	1a000002 	bne	128784 <udp_sendto_if_src+0x290>
  128778:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12877c:	e5d3301c 	ldrb	r3, [r3, #28]
  128780:	ea000001 	b	12878c <udp_sendto_if_src+0x298>
  128784:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128788:	e5d3300a 	ldrb	r3, [r3, #10]
  12878c:	e54b3012 	strb	r3, [fp, #-18]	; 0xffffffee

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
  128790:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128794:	e5d33009 	ldrb	r3, [r3, #9]
  128798:	e55b1012 	ldrb	r1, [fp, #-18]	; 0xffffffee
  12879c:	e59b2004 	ldr	r2, [fp, #4]
  1287a0:	e58d2008 	str	r2, [sp, #8]
  1287a4:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  1287a8:	e58d2004 	str	r2, [sp, #4]
  1287ac:	e58d3000 	str	r3, [sp]
  1287b0:	e1a03001 	mov	r3, r1
  1287b4:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  1287b8:	e59b1008 	ldr	r1, [fp, #8]
  1287bc:	e51b0008 	ldr	r0, [fp, #-8]
  1287c0:	eb00260a 	bl	131ff0 <ip4_output_if_src>
  1287c4:	e1a03000 	mov	r3, r0
  1287c8:	e54b300b 	strb	r3, [fp, #-11]
  NETIF_SET_HWADDRHINT(netif, NULL);

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);
  1287cc:	e3063840 	movw	r3, #26688	; 0x6840
  1287d0:	e3403057 	movt	r3, #87	; 0x57
  1287d4:	e593319c 	ldr	r3, [r3, #412]	; 0x19c
  1287d8:	e2832001 	add	r2, r3, #1
  1287dc:	e3063840 	movw	r3, #26688	; 0x6840
  1287e0:	e3403057 	movt	r3, #87	; 0x57
  1287e4:	e583219c 	str	r2, [r3, #412]	; 0x19c

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
  1287e8:	e51b2008 	ldr	r2, [fp, #-8]
  1287ec:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1287f0:	e1520003 	cmp	r2, r3
  1287f4:	0a000003 	beq	128808 <udp_sendto_if_src+0x314>
    /* free the header pbuf */
    pbuf_free(q);
  1287f8:	e51b0008 	ldr	r0, [fp, #-8]
  1287fc:	ebffca26 	bl	11b09c <pbuf_free>
    q = NULL;
  128800:	e3a03000 	mov	r3, #0
  128804:	e50b3008 	str	r3, [fp, #-8]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  128808:	e3063840 	movw	r3, #26688	; 0x6840
  12880c:	e3403057 	movt	r3, #87	; 0x57
  128810:	e1d339b4 	ldrh	r3, [r3, #148]	; 0x94
  128814:	e2833001 	add	r3, r3, #1
  128818:	e6ff2073 	uxth	r2, r3
  12881c:	e3063840 	movw	r3, #26688	; 0x6840
  128820:	e3403057 	movt	r3, #87	; 0x57
  128824:	e1c329b4 	strh	r2, [r3, #148]	; 0x94
  return err;
  128828:	e15b30db 	ldrsb	r3, [fp, #-11]
}
  12882c:	e1a00003 	mov	r0, r3
  128830:	e24bd004 	sub	sp, fp, #4
  128834:	e8bd8800 	pop	{fp, pc}

00128838 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
  128838:	e92d4800 	push	{fp, lr}
  12883c:	e28db004 	add	fp, sp, #4
  128840:	e24dd018 	sub	sp, sp, #24
  128844:	e50b0010 	str	r0, [fp, #-16]
  128848:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  12884c:	e1a03002 	mov	r3, r2
  128850:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
  128854:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  128858:	e3530000 	cmp	r3, #0
  12885c:	1a000002 	bne	12886c <udp_bind+0x34>
    ipaddr = IP4_ADDR_ANY;
  128860:	e3093adc 	movw	r3, #39644	; 0x9adc
  128864:	e3403014 	movt	r3, #20
  128868:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
  12886c:	e51b3010 	ldr	r3, [fp, #-16]
  128870:	e3530000 	cmp	r3, #0
  128874:	0a000002 	beq	128884 <udp_bind+0x4c>
  128878:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12887c:	e3530000 	cmp	r3, #0
  128880:	1a000001 	bne	12888c <udp_bind+0x54>
    return ERR_VAL;
  128884:	e3e03005 	mvn	r3, #5
  128888:	ea00005d 	b	128a04 <udp_bind+0x1cc>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  12888c:	e3a03000 	mov	r3, #0
  128890:	e54b3009 	strb	r3, [fp, #-9]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
  128894:	e3063a48 	movw	r3, #27208	; 0x6a48
  128898:	e3403057 	movt	r3, #87	; 0x57
  12889c:	e5933000 	ldr	r3, [r3]
  1288a0:	e50b3008 	str	r3, [fp, #-8]
  1288a4:	ea000009 	b	1288d0 <udp_bind+0x98>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
  1288a8:	e51b2010 	ldr	r2, [fp, #-16]
  1288ac:	e51b3008 	ldr	r3, [fp, #-8]
  1288b0:	e1520003 	cmp	r2, r3
  1288b4:	1a000002 	bne	1288c4 <udp_bind+0x8c>
      rebind = 1;
  1288b8:	e3a03001 	mov	r3, #1
  1288bc:	e54b3009 	strb	r3, [fp, #-9]
      break;
  1288c0:	ea000005 	b	1288dc <udp_bind+0xa4>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
  1288c4:	e51b3008 	ldr	r3, [fp, #-8]
  1288c8:	e593300c 	ldr	r3, [r3, #12]
  1288cc:	e50b3008 	str	r3, [fp, #-8]
  1288d0:	e51b3008 	ldr	r3, [fp, #-8]
  1288d4:	e3530000 	cmp	r3, #0
  1288d8:	1afffff2 	bne	1288a8 <udp_bind+0x70>
    }
  }

  /* no port specified? */
  if (port == 0) {
  1288dc:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  1288e0:	e3530000 	cmp	r3, #0
  1288e4:	1a000007 	bne	128908 <udp_bind+0xd0>
    port = udp_new_port();
  1288e8:	ebfffca8 	bl	127b90 <udp_new_port>
  1288ec:	e1a03000 	mov	r3, r0
  1288f0:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
    if (port == 0) {
  1288f4:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  1288f8:	e3530000 	cmp	r3, #0
  1288fc:	1a000027 	bne	1289a0 <udp_bind+0x168>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
  128900:	e3e03007 	mvn	r3, #7
  128904:	ea00003e 	b	128a04 <udp_bind+0x1cc>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
  128908:	e3063a48 	movw	r3, #27208	; 0x6a48
  12890c:	e3403057 	movt	r3, #87	; 0x57
  128910:	e5933000 	ldr	r3, [r3]
  128914:	e50b3008 	str	r3, [fp, #-8]
  128918:	ea00001d 	b	128994 <udp_bind+0x15c>
      if (pcb != ipcb) {
  12891c:	e51b2010 	ldr	r2, [fp, #-16]
  128920:	e51b3008 	ldr	r3, [fp, #-8]
  128924:	e1520003 	cmp	r2, r3
  128928:	0a000016 	beq	128988 <udp_bind+0x150>
      /* By default, we don't allow to bind to a port that any other udp
         PCB is already bound to, unless *all* PCBs with that port have tha
         REUSEADDR flag set. */
#if SO_REUSE
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
  12892c:	e51b3010 	ldr	r3, [fp, #-16]
  128930:	e5d33008 	ldrb	r3, [r3, #8]
  128934:	e2033004 	and	r3, r3, #4
  128938:	e3530000 	cmp	r3, #0
  12893c:	0a000004 	beq	128954 <udp_bind+0x11c>
            !ip_get_option(ipcb, SOF_REUSEADDR))
  128940:	e51b3008 	ldr	r3, [fp, #-8]
  128944:	e5d33008 	ldrb	r3, [r3, #8]
  128948:	e2033004 	and	r3, r3, #4
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
  12894c:	e3530000 	cmp	r3, #0
  128950:	1a00000c 	bne	128988 <udp_bind+0x150>
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
  128954:	e51b3008 	ldr	r3, [fp, #-8]
  128958:	e1d331b2 	ldrh	r3, [r3, #18]
  12895c:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  128960:	e1520003 	cmp	r2, r3
  128964:	1a000007 	bne	128988 <udp_bind+0x150>
              /* IP address matches? */
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
  128968:	e51b3008 	ldr	r3, [fp, #-8]
  12896c:	e5932000 	ldr	r2, [r3]
  128970:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  128974:	e5933000 	ldr	r3, [r3]
          if ((ipcb->local_port == port) &&
  128978:	e1520003 	cmp	r2, r3
  12897c:	1a000001 	bne	128988 <udp_bind+0x150>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
  128980:	e3e03007 	mvn	r3, #7
  128984:	ea00001e 	b	128a04 <udp_bind+0x1cc>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
  128988:	e51b3008 	ldr	r3, [fp, #-8]
  12898c:	e593300c 	ldr	r3, [r3, #12]
  128990:	e50b3008 	str	r3, [fp, #-8]
  128994:	e51b3008 	ldr	r3, [fp, #-8]
  128998:	e3530000 	cmp	r3, #0
  12899c:	1affffde 	bne	12891c <udp_bind+0xe4>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
  1289a0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1289a4:	e3530000 	cmp	r3, #0
  1289a8:	0a000002 	beq	1289b8 <udp_bind+0x180>
  1289ac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1289b0:	e5933000 	ldr	r3, [r3]
  1289b4:	ea000000 	b	1289bc <udp_bind+0x184>
  1289b8:	e3a03000 	mov	r3, #0
  1289bc:	e51b2010 	ldr	r2, [fp, #-16]
  1289c0:	e5823000 	str	r3, [r2]

  pcb->local_port = port;
  1289c4:	e51b3010 	ldr	r3, [fp, #-16]
  1289c8:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  1289cc:	e1c321b2 	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
  1289d0:	e55b3009 	ldrb	r3, [fp, #-9]
  1289d4:	e3530000 	cmp	r3, #0
  1289d8:	1a000008 	bne	128a00 <udp_bind+0x1c8>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
  1289dc:	e3063a48 	movw	r3, #27208	; 0x6a48
  1289e0:	e3403057 	movt	r3, #87	; 0x57
  1289e4:	e5932000 	ldr	r2, [r3]
  1289e8:	e51b3010 	ldr	r3, [fp, #-16]
  1289ec:	e583200c 	str	r2, [r3, #12]
    udp_pcbs = pcb;
  1289f0:	e3063a48 	movw	r3, #27208	; 0x6a48
  1289f4:	e3403057 	movt	r3, #87	; 0x57
  1289f8:	e51b2010 	ldr	r2, [fp, #-16]
  1289fc:	e5832000 	str	r2, [r3]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
  128a00:	e3a03000 	mov	r3, #0
}
  128a04:	e1a00003 	mov	r0, r3
  128a08:	e24bd004 	sub	sp, fp, #4
  128a0c:	e8bd8800 	pop	{fp, pc}

00128a10 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
  128a10:	e92d4800 	push	{fp, lr}
  128a14:	e28db004 	add	fp, sp, #4
  128a18:	e24dd018 	sub	sp, sp, #24
  128a1c:	e50b0010 	str	r0, [fp, #-16]
  128a20:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  128a24:	e1a03002 	mov	r3, r2
  128a28:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  struct udp_pcb *ipcb;

  if ((pcb == NULL) || (ipaddr == NULL)) {
  128a2c:	e51b3010 	ldr	r3, [fp, #-16]
  128a30:	e3530000 	cmp	r3, #0
  128a34:	0a000002 	beq	128a44 <udp_connect+0x34>
  128a38:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  128a3c:	e3530000 	cmp	r3, #0
  128a40:	1a000001 	bne	128a4c <udp_connect+0x3c>
    return ERR_VAL;
  128a44:	e3e03005 	mvn	r3, #5
  128a48:	ea00003d 	b	128b44 <udp_connect+0x134>
  }

  if (pcb->local_port == 0) {
  128a4c:	e51b3010 	ldr	r3, [fp, #-16]
  128a50:	e1d331b2 	ldrh	r3, [r3, #18]
  128a54:	e3530000 	cmp	r3, #0
  128a58:	1a00000c 	bne	128a90 <udp_connect+0x80>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
  128a5c:	e51b1010 	ldr	r1, [fp, #-16]
  128a60:	e51b3010 	ldr	r3, [fp, #-16]
  128a64:	e1d331b2 	ldrh	r3, [r3, #18]
  128a68:	e1a02003 	mov	r2, r3
  128a6c:	e51b0010 	ldr	r0, [fp, #-16]
  128a70:	ebffff70 	bl	128838 <udp_bind>
  128a74:	e1a03000 	mov	r3, r0
  128a78:	e54b3009 	strb	r3, [fp, #-9]
    if (err != ERR_OK) {
  128a7c:	e15b30d9 	ldrsb	r3, [fp, #-9]
  128a80:	e3530000 	cmp	r3, #0
  128a84:	0a000001 	beq	128a90 <udp_connect+0x80>
      return err;
  128a88:	e15b30d9 	ldrsb	r3, [fp, #-9]
  128a8c:	ea00002c 	b	128b44 <udp_connect+0x134>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
  128a90:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  128a94:	e3530000 	cmp	r3, #0
  128a98:	0a000002 	beq	128aa8 <udp_connect+0x98>
  128a9c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  128aa0:	e5933000 	ldr	r3, [r3]
  128aa4:	ea000000 	b	128aac <udp_connect+0x9c>
  128aa8:	e3a03000 	mov	r3, #0
  128aac:	e51b2010 	ldr	r2, [fp, #-16]
  128ab0:	e5823004 	str	r3, [r2, #4]
  pcb->remote_port = port;
  128ab4:	e51b3010 	ldr	r3, [fp, #-16]
  128ab8:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  128abc:	e1c321b4 	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
  128ac0:	e51b3010 	ldr	r3, [fp, #-16]
  128ac4:	e5d33010 	ldrb	r3, [r3, #16]
  128ac8:	e3833004 	orr	r3, r3, #4
  128acc:	e6ef2073 	uxtb	r2, r3
  128ad0:	e51b3010 	ldr	r3, [fp, #-16]
  128ad4:	e5c32010 	strb	r2, [r3, #16]
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                      &pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
  128ad8:	e3063a48 	movw	r3, #27208	; 0x6a48
  128adc:	e3403057 	movt	r3, #87	; 0x57
  128ae0:	e5933000 	ldr	r3, [r3]
  128ae4:	e50b3008 	str	r3, [fp, #-8]
  128ae8:	ea000008 	b	128b10 <udp_connect+0x100>
    if (pcb == ipcb) {
  128aec:	e51b2010 	ldr	r2, [fp, #-16]
  128af0:	e51b3008 	ldr	r3, [fp, #-8]
  128af4:	e1520003 	cmp	r2, r3
  128af8:	1a000001 	bne	128b04 <udp_connect+0xf4>
      /* already on the list, just return */
      return ERR_OK;
  128afc:	e3a03000 	mov	r3, #0
  128b00:	ea00000f 	b	128b44 <udp_connect+0x134>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
  128b04:	e51b3008 	ldr	r3, [fp, #-8]
  128b08:	e593300c 	ldr	r3, [r3, #12]
  128b0c:	e50b3008 	str	r3, [fp, #-8]
  128b10:	e51b3008 	ldr	r3, [fp, #-8]
  128b14:	e3530000 	cmp	r3, #0
  128b18:	1afffff3 	bne	128aec <udp_connect+0xdc>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
  128b1c:	e3063a48 	movw	r3, #27208	; 0x6a48
  128b20:	e3403057 	movt	r3, #87	; 0x57
  128b24:	e5932000 	ldr	r2, [r3]
  128b28:	e51b3010 	ldr	r3, [fp, #-16]
  128b2c:	e583200c 	str	r2, [r3, #12]
  udp_pcbs = pcb;
  128b30:	e3063a48 	movw	r3, #27208	; 0x6a48
  128b34:	e3403057 	movt	r3, #87	; 0x57
  128b38:	e51b2010 	ldr	r2, [fp, #-16]
  128b3c:	e5832000 	str	r2, [r3]
  return ERR_OK;
  128b40:	e3a03000 	mov	r3, #0
}
  128b44:	e1a00003 	mov	r0, r3
  128b48:	e24bd004 	sub	sp, fp, #4
  128b4c:	e8bd8800 	pop	{fp, pc}

00128b50 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
  128b50:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  128b54:	e28db000 	add	fp, sp, #0
  128b58:	e24dd00c 	sub	sp, sp, #12
  128b5c:	e50b0008 	str	r0, [fp, #-8]
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
  128b60:	e51b3008 	ldr	r3, [fp, #-8]
  128b64:	e3a02000 	mov	r2, #0
  128b68:	e5832004 	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
  128b6c:	e51b3008 	ldr	r3, [fp, #-8]
  128b70:	e3a02000 	mov	r2, #0
  128b74:	e1c321b4 	strh	r2, [r3, #20]
  /* mark PCB as unconnected */
  pcb->flags &= ~UDP_FLAGS_CONNECTED;
  128b78:	e51b3008 	ldr	r3, [fp, #-8]
  128b7c:	e5d33010 	ldrb	r3, [r3, #16]
  128b80:	e3c33004 	bic	r3, r3, #4
  128b84:	e6ef2073 	uxtb	r2, r3
  128b88:	e51b3008 	ldr	r3, [fp, #-8]
  128b8c:	e5c32010 	strb	r2, [r3, #16]
}
  128b90:	e320f000 	nop	{0}
  128b94:	e28bd000 	add	sp, fp, #0
  128b98:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  128b9c:	e12fff1e 	bx	lr

00128ba0 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  128ba0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  128ba4:	e28db000 	add	fp, sp, #0
  128ba8:	e24dd014 	sub	sp, sp, #20
  128bac:	e50b0008 	str	r0, [fp, #-8]
  128bb0:	e50b100c 	str	r1, [fp, #-12]
  128bb4:	e50b2010 	str	r2, [fp, #-16]
  /* remember recv() callback and user data */
  pcb->recv = recv;
  128bb8:	e51b3008 	ldr	r3, [fp, #-8]
  128bbc:	e51b200c 	ldr	r2, [fp, #-12]
  128bc0:	e5832020 	str	r2, [r3, #32]
  pcb->recv_arg = recv_arg;
  128bc4:	e51b3008 	ldr	r3, [fp, #-8]
  128bc8:	e51b2010 	ldr	r2, [fp, #-16]
  128bcc:	e5832024 	str	r2, [r3, #36]	; 0x24
}
  128bd0:	e320f000 	nop	{0}
  128bd4:	e28bd000 	add	sp, fp, #0
  128bd8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  128bdc:	e12fff1e 	bx	lr

00128be0 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
  128be0:	e92d4800 	push	{fp, lr}
  128be4:	e28db004 	add	fp, sp, #4
  128be8:	e24dd010 	sub	sp, sp, #16
  128bec:	e50b0010 	str	r0, [fp, #-16]
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
  128bf0:	e3063a48 	movw	r3, #27208	; 0x6a48
  128bf4:	e3403057 	movt	r3, #87	; 0x57
  128bf8:	e5933000 	ldr	r3, [r3]
  128bfc:	e51b2010 	ldr	r2, [fp, #-16]
  128c00:	e1520003 	cmp	r2, r3
  128c04:	1a000007 	bne	128c28 <udp_remove+0x48>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
  128c08:	e3063a48 	movw	r3, #27208	; 0x6a48
  128c0c:	e3403057 	movt	r3, #87	; 0x57
  128c10:	e5933000 	ldr	r3, [r3]
  128c14:	e593200c 	ldr	r2, [r3, #12]
  128c18:	e3063a48 	movw	r3, #27208	; 0x6a48
  128c1c:	e3403057 	movt	r3, #87	; 0x57
  128c20:	e5832000 	str	r2, [r3]
  128c24:	ea000018 	b	128c8c <udp_remove+0xac>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
  128c28:	e3063a48 	movw	r3, #27208	; 0x6a48
  128c2c:	e3403057 	movt	r3, #87	; 0x57
  128c30:	e5933000 	ldr	r3, [r3]
  128c34:	e50b3008 	str	r3, [fp, #-8]
  128c38:	ea000010 	b	128c80 <udp_remove+0xa0>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
  128c3c:	e51b3008 	ldr	r3, [fp, #-8]
  128c40:	e593300c 	ldr	r3, [r3, #12]
  128c44:	e3530000 	cmp	r3, #0
  128c48:	0a000009 	beq	128c74 <udp_remove+0x94>
  128c4c:	e51b3008 	ldr	r3, [fp, #-8]
  128c50:	e593300c 	ldr	r3, [r3, #12]
  128c54:	e51b2010 	ldr	r2, [fp, #-16]
  128c58:	e1520003 	cmp	r2, r3
  128c5c:	1a000004 	bne	128c74 <udp_remove+0x94>
        /* remove pcb from list */
        pcb2->next = pcb->next;
  128c60:	e51b3010 	ldr	r3, [fp, #-16]
  128c64:	e593200c 	ldr	r2, [r3, #12]
  128c68:	e51b3008 	ldr	r3, [fp, #-8]
  128c6c:	e583200c 	str	r2, [r3, #12]
        break;
  128c70:	ea000005 	b	128c8c <udp_remove+0xac>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
  128c74:	e51b3008 	ldr	r3, [fp, #-8]
  128c78:	e593300c 	ldr	r3, [r3, #12]
  128c7c:	e50b3008 	str	r3, [fp, #-8]
  128c80:	e51b3008 	ldr	r3, [fp, #-8]
  128c84:	e3530000 	cmp	r3, #0
  128c88:	1affffeb 	bne	128c3c <udp_remove+0x5c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
  128c8c:	e51b1010 	ldr	r1, [fp, #-16]
  128c90:	e3a00001 	mov	r0, #1
  128c94:	ebffc1f2 	bl	119464 <memp_free>
}
  128c98:	e320f000 	nop	{0}
  128c9c:	e24bd004 	sub	sp, fp, #4
  128ca0:	e8bd8800 	pop	{fp, pc}

00128ca4 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
  128ca4:	e92d4800 	push	{fp, lr}
  128ca8:	e28db004 	add	fp, sp, #4
  128cac:	e24dd008 	sub	sp, sp, #8
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
  128cb0:	e3002452 	movw	r2, #1106	; 0x452
  128cb4:	e3081ca8 	movw	r1, #36008	; 0x8ca8
  128cb8:	e3401014 	movt	r1, #20
  128cbc:	e3a00001 	mov	r0, #1
  128cc0:	ebffc17f 	bl	1192c4 <memp_malloc_fn>
  128cc4:	e50b0008 	str	r0, [fp, #-8]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
  128cc8:	e51b3008 	ldr	r3, [fp, #-8]
  128ccc:	e3530000 	cmp	r3, #0
  128cd0:	0a000009 	beq	128cfc <udp_new+0x58>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
  128cd4:	e3a02028 	mov	r2, #40	; 0x28
  128cd8:	e3a01000 	mov	r1, #0
  128cdc:	e51b0008 	ldr	r0, [fp, #-8]
  128ce0:	eb0061dd 	bl	14145c <memset>
    pcb->ttl = UDP_TTL;
  128ce4:	e51b3008 	ldr	r3, [fp, #-8]
  128ce8:	e3e02000 	mvn	r2, #0
  128cec:	e5c3200a 	strb	r2, [r3, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
  128cf0:	e51b3008 	ldr	r3, [fp, #-8]
  128cf4:	e3e02000 	mvn	r2, #0
  128cf8:	e5c3201c 	strb	r2, [r3, #28]
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
  128cfc:	e51b3008 	ldr	r3, [fp, #-8]
}
  128d00:	e1a00003 	mov	r0, r3
  128d04:	e24bd004 	sub	sp, fp, #4
  128d08:	e8bd8800 	pop	{fp, pc}

00128d0c <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
  128d0c:	e92d4800 	push	{fp, lr}
  128d10:	e28db004 	add	fp, sp, #4
  128d14:	e24dd010 	sub	sp, sp, #16
  128d18:	e1a03000 	mov	r3, r0
  128d1c:	e54b300d 	strb	r3, [fp, #-13]
  struct udp_pcb *pcb;
  pcb = udp_new();
  128d20:	ebffffdf 	bl	128ca4 <udp_new>
  128d24:	e50b0008 	str	r0, [fp, #-8]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
  128d28:	e51b3008 	ldr	r3, [fp, #-8]
}
  128d2c:	e1a00003 	mov	r0, r3
  128d30:	e24bd004 	sub	sp, fp, #4
  128d34:	e8bd8800 	pop	{fp, pc}

00128d38 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
  128d38:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  128d3c:	e28db000 	add	fp, sp, #0
  128d40:	e24dd014 	sub	sp, sp, #20
  128d44:	e50b0010 	str	r0, [fp, #-16]
  128d48:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
  128d4c:	e51b3010 	ldr	r3, [fp, #-16]
  128d50:	e3530000 	cmp	r3, #0
  128d54:	0a00001f 	beq	128dd8 <udp_netif_ip_addr_changed+0xa0>
  128d58:	e51b3010 	ldr	r3, [fp, #-16]
  128d5c:	e5933000 	ldr	r3, [r3]
  128d60:	e3530000 	cmp	r3, #0
  128d64:	0a00001b 	beq	128dd8 <udp_netif_ip_addr_changed+0xa0>
  128d68:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  128d6c:	e3530000 	cmp	r3, #0
  128d70:	0a000018 	beq	128dd8 <udp_netif_ip_addr_changed+0xa0>
  128d74:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  128d78:	e5933000 	ldr	r3, [r3]
  128d7c:	e3530000 	cmp	r3, #0
  128d80:	0a000014 	beq	128dd8 <udp_netif_ip_addr_changed+0xa0>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
  128d84:	e3063a48 	movw	r3, #27208	; 0x6a48
  128d88:	e3403057 	movt	r3, #87	; 0x57
  128d8c:	e5933000 	ldr	r3, [r3]
  128d90:	e50b3008 	str	r3, [fp, #-8]
  128d94:	ea00000c 	b	128dcc <udp_netif_ip_addr_changed+0x94>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
  128d98:	e51b3008 	ldr	r3, [fp, #-8]
  128d9c:	e5932000 	ldr	r2, [r3]
  128da0:	e51b3010 	ldr	r3, [fp, #-16]
  128da4:	e5933000 	ldr	r3, [r3]
  128da8:	e1520003 	cmp	r2, r3
  128dac:	1a000003 	bne	128dc0 <udp_netif_ip_addr_changed+0x88>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
  128db0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  128db4:	e5932000 	ldr	r2, [r3]
  128db8:	e51b3008 	ldr	r3, [fp, #-8]
  128dbc:	e5832000 	str	r2, [r3]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
  128dc0:	e51b3008 	ldr	r3, [fp, #-8]
  128dc4:	e593300c 	ldr	r3, [r3, #12]
  128dc8:	e50b3008 	str	r3, [fp, #-8]
  128dcc:	e51b3008 	ldr	r3, [fp, #-8]
  128dd0:	e3530000 	cmp	r3, #0
  128dd4:	1affffef 	bne	128d98 <udp_netif_ip_addr_changed+0x60>
      }
    }
  }
}
  128dd8:	e320f000 	nop	{0}
  128ddc:	e28bd000 	add	sp, fp, #0
  128de0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  128de4:	e12fff1e 	bx	lr

00128de8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
  128de8:	e92d4800 	push	{fp, lr}
  128dec:	e28db004 	add	fp, sp, #4
  128df0:	e24dd018 	sub	sp, sp, #24
  128df4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  128df8:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
  128dfc:	e3a0300e 	mov	r3, #14
  128e00:	e14b30b6 	strh	r3, [fp, #-6]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
  128e04:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128e08:	e1d330ba 	ldrh	r3, [r3, #10]
  128e0c:	e353000e 	cmp	r3, #14
  128e10:	8a000015 	bhi	128e6c <ethernet_input+0x84>
    /* a packet with only an ethernet header (or less) is not valid for us */
    ETHARP_STATS_INC(etharp.proterr);
  128e14:	e3063840 	movw	r3, #26688	; 0x6840
  128e18:	e3403057 	movt	r3, #87	; 0x57
  128e1c:	e1d332b8 	ldrh	r3, [r3, #40]	; 0x28
  128e20:	e2833001 	add	r3, r3, #1
  128e24:	e6ff2073 	uxth	r2, r3
  128e28:	e3063840 	movw	r3, #26688	; 0x6840
  128e2c:	e3403057 	movt	r3, #87	; 0x57
  128e30:	e1c322b8 	strh	r2, [r3, #40]	; 0x28
    ETHARP_STATS_INC(etharp.drop);
  128e34:	e3063840 	movw	r3, #26688	; 0x6840
  128e38:	e3403057 	movt	r3, #87	; 0x57
  128e3c:	e1d331be 	ldrh	r3, [r3, #30]
  128e40:	e2833001 	add	r3, r3, #1
  128e44:	e6ff2073 	uxth	r2, r3
  128e48:	e3063840 	movw	r3, #26688	; 0x6840
  128e4c:	e3403057 	movt	r3, #87	; 0x57
  128e50:	e1c321be 	strh	r2, [r3, #30]
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
  128e54:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  128e58:	e5933060 	ldr	r3, [r3, #96]	; 0x60
  128e5c:	e2832001 	add	r2, r3, #1
  128e60:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  128e64:	e5832060 	str	r2, [r3, #96]	; 0x60
    goto free_and_return;
  128e68:	ea000096 	b	1290c8 <ethernet_input+0x2e0>
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
  128e6c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128e70:	e5933004 	ldr	r3, [r3, #4]
  128e74:	e50b300c 	str	r3, [fp, #-12]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
  128e78:	e51b300c 	ldr	r3, [fp, #-12]
  128e7c:	e5d3200c 	ldrb	r2, [r3, #12]
  128e80:	e5d3300d 	ldrb	r3, [r3, #13]
  128e84:	e1a03403 	lsl	r3, r3, #8
  128e88:	e1833002 	orr	r3, r3, r2
  128e8c:	e14b30be 	strh	r3, [fp, #-14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
  128e90:	e51b300c 	ldr	r3, [fp, #-12]
  128e94:	e5d33000 	ldrb	r3, [r3]
  128e98:	e2033001 	and	r3, r3, #1
  128e9c:	e3530000 	cmp	r3, #0
  128ea0:	0a000021 	beq	128f2c <ethernet_input+0x144>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
  128ea4:	e51b300c 	ldr	r3, [fp, #-12]
  128ea8:	e5d33000 	ldrb	r3, [r3]
  128eac:	e3530001 	cmp	r3, #1
  128eb0:	1a00000e 	bne	128ef0 <ethernet_input+0x108>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
  128eb4:	e51b300c 	ldr	r3, [fp, #-12]
  128eb8:	e5d33001 	ldrb	r3, [r3, #1]
  128ebc:	e3530000 	cmp	r3, #0
  128ec0:	1a000019 	bne	128f2c <ethernet_input+0x144>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
  128ec4:	e51b300c 	ldr	r3, [fp, #-12]
  128ec8:	e5d33002 	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
  128ecc:	e353005e 	cmp	r3, #94	; 0x5e
  128ed0:	1a000015 	bne	128f2c <ethernet_input+0x144>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
  128ed4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128ed8:	e5d3300d 	ldrb	r3, [r3, #13]
  128edc:	e3833010 	orr	r3, r3, #16
  128ee0:	e6ef2073 	uxtb	r2, r3
  128ee4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128ee8:	e5c3200d 	strb	r2, [r3, #13]
  128eec:	ea00000e 	b	128f2c <ethernet_input+0x144>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
  128ef0:	e51b300c 	ldr	r3, [fp, #-12]
  128ef4:	e3a02006 	mov	r2, #6
  128ef8:	e3081d04 	movw	r1, #36100	; 0x8d04
  128efc:	e3401014 	movt	r1, #20
  128f00:	e1a00003 	mov	r0, r3
  128f04:	eb0060db 	bl	141278 <memcmp>
  128f08:	e1a03000 	mov	r3, r0
  128f0c:	e3530000 	cmp	r3, #0
  128f10:	1a000005 	bne	128f2c <ethernet_input+0x144>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
  128f14:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128f18:	e5d3300d 	ldrb	r3, [r3, #13]
  128f1c:	e3833008 	orr	r3, r3, #8
  128f20:	e6ef2073 	uxtb	r2, r3
  128f24:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128f28:	e5c3200d 	strb	r2, [r3, #13]
    }
  }

  switch (type) {
  128f2c:	e15b30be 	ldrh	r3, [fp, #-14]
  128f30:	e3530008 	cmp	r3, #8
  128f34:	0a000003 	beq	128f48 <ethernet_input+0x160>
  128f38:	e3002608 	movw	r2, #1544	; 0x608
  128f3c:	e1530002 	cmp	r3, r2
  128f40:	0a000019 	beq	128fac <ethernet_input+0x1c4>
  128f44:	ea000042 	b	129054 <ethernet_input+0x26c>
#if LWIP_IPV4 && LWIP_ARP
    /* IP packet? */
    case PP_HTONS(ETHTYPE_IP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
  128f48:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  128f4c:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  128f50:	e2033008 	and	r3, r3, #8
  128f54:	e3530000 	cmp	r3, #0
  128f58:	0a000055 	beq	1290b4 <ethernet_input+0x2cc>
        goto free_and_return;
      }
      /* skip Ethernet header */
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
  128f5c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128f60:	e1d330ba 	ldrh	r3, [r3, #10]
  128f64:	e1a02003 	mov	r2, r3
  128f68:	e15b30f6 	ldrsh	r3, [fp, #-6]
  128f6c:	e1520003 	cmp	r2, r3
  128f70:	ba000051 	blt	1290bc <ethernet_input+0x2d4>
  128f74:	e15b30b6 	ldrh	r3, [fp, #-6]
  128f78:	e2633000 	rsb	r3, r3, #0
  128f7c:	e6ff3073 	uxth	r3, r3
  128f80:	e6bf3073 	sxth	r3, r3
  128f84:	e1a01003 	mov	r1, r3
  128f88:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  128f8c:	ebffc824 	bl	11b024 <pbuf_header>
  128f90:	e1a03000 	mov	r3, r0
  128f94:	e3530000 	cmp	r3, #0
  128f98:	1a000047 	bne	1290bc <ethernet_input+0x2d4>
          p->tot_len, ip_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        goto free_and_return;
      } else {
        /* pass to IP layer */
        ip4_input(p, netif);
  128f9c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  128fa0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  128fa4:	eb00219b 	bl	131618 <ip4_input>
      }
      break;
  128fa8:	ea00003f 	b	1290ac <ethernet_input+0x2c4>

    case PP_HTONS(ETHTYPE_ARP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
  128fac:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  128fb0:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  128fb4:	e2033008 	and	r3, r3, #8
  128fb8:	e3530000 	cmp	r3, #0
  128fbc:	0a000040 	beq	1290c4 <ethernet_input+0x2dc>
        goto free_and_return;
      }
      /* skip Ethernet header */
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
  128fc0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  128fc4:	e1d330ba 	ldrh	r3, [r3, #10]
  128fc8:	e1a02003 	mov	r2, r3
  128fcc:	e15b30f6 	ldrsh	r3, [fp, #-6]
  128fd0:	e1520003 	cmp	r2, r3
  128fd4:	ba000009 	blt	129000 <ethernet_input+0x218>
  128fd8:	e15b30b6 	ldrh	r3, [fp, #-6]
  128fdc:	e2633000 	rsb	r3, r3, #0
  128fe0:	e6ff3073 	uxth	r3, r3
  128fe4:	e6bf3073 	sxth	r3, r3
  128fe8:	e1a01003 	mov	r1, r3
  128fec:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  128ff0:	ebffc80b 	bl	11b024 <pbuf_header>
  128ff4:	e1a03000 	mov	r3, r0
  128ff8:	e3530000 	cmp	r3, #0
  128ffc:	0a000010 	beq	129044 <ethernet_input+0x25c>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
          ("ethernet_input: ARP response packet dropped, too short (%"S16_F"/%"S16_F")\n",
          p->tot_len, ip_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        ETHARP_STATS_INC(etharp.lenerr);
  129000:	e3063840 	movw	r3, #26688	; 0x6840
  129004:	e3403057 	movt	r3, #87	; 0x57
  129008:	e1d332b2 	ldrh	r3, [r3, #34]	; 0x22
  12900c:	e2833001 	add	r3, r3, #1
  129010:	e6ff2073 	uxth	r2, r3
  129014:	e3063840 	movw	r3, #26688	; 0x6840
  129018:	e3403057 	movt	r3, #87	; 0x57
  12901c:	e1c322b2 	strh	r2, [r3, #34]	; 0x22
        ETHARP_STATS_INC(etharp.drop);
  129020:	e3063840 	movw	r3, #26688	; 0x6840
  129024:	e3403057 	movt	r3, #87	; 0x57
  129028:	e1d331be 	ldrh	r3, [r3, #30]
  12902c:	e2833001 	add	r3, r3, #1
  129030:	e6ff2073 	uxth	r2, r3
  129034:	e3063840 	movw	r3, #26688	; 0x6840
  129038:	e3403057 	movt	r3, #87	; 0x57
  12903c:	e1c321be 	strh	r2, [r3, #30]
        goto free_and_return;
  129040:	ea000020 	b	1290c8 <ethernet_input+0x2e0>
      } else {
        /* pass p to ARP module */
        etharp_input(p, netif);
  129044:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  129048:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12904c:	eb0015a9 	bl	12e6f8 <etharp_input>
      }
      break;
  129050:	ea000015 	b	1290ac <ethernet_input+0x2c4>
#ifdef LWIP_HOOK_UNKNOWN_ETH_PROTOCOL
      if(LWIP_HOOK_UNKNOWN_ETH_PROTOCOL(p, netif) == ERR_OK) {
        break;
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
  129054:	e3063840 	movw	r3, #26688	; 0x6840
  129058:	e3403057 	movt	r3, #87	; 0x57
  12905c:	e1d332b8 	ldrh	r3, [r3, #40]	; 0x28
  129060:	e2833001 	add	r3, r3, #1
  129064:	e6ff2073 	uxth	r2, r3
  129068:	e3063840 	movw	r3, #26688	; 0x6840
  12906c:	e3403057 	movt	r3, #87	; 0x57
  129070:	e1c322b8 	strh	r2, [r3, #40]	; 0x28
      ETHARP_STATS_INC(etharp.drop);
  129074:	e3063840 	movw	r3, #26688	; 0x6840
  129078:	e3403057 	movt	r3, #87	; 0x57
  12907c:	e1d331be 	ldrh	r3, [r3, #30]
  129080:	e2833001 	add	r3, r3, #1
  129084:	e6ff2073 	uxth	r2, r3
  129088:	e3063840 	movw	r3, #26688	; 0x6840
  12908c:	e3403057 	movt	r3, #87	; 0x57
  129090:	e1c321be 	strh	r2, [r3, #30]
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
  129094:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  129098:	e5933064 	ldr	r3, [r3, #100]	; 0x64
  12909c:	e2832001 	add	r2, r3, #1
  1290a0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1290a4:	e5832064 	str	r2, [r3, #100]	; 0x64
      goto free_and_return;
  1290a8:	ea000006 	b	1290c8 <ethernet_input+0x2e0>
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
  1290ac:	e3a03000 	mov	r3, #0
  1290b0:	ea000007 	b	1290d4 <ethernet_input+0x2ec>
        goto free_and_return;
  1290b4:	e320f000 	nop	{0}
  1290b8:	ea000002 	b	1290c8 <ethernet_input+0x2e0>

free_and_return:
  1290bc:	e320f000 	nop	{0}
  1290c0:	ea000000 	b	1290c8 <ethernet_input+0x2e0>
        goto free_and_return;
  1290c4:	e320f000 	nop	{0}
  pbuf_free(p);
  1290c8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1290cc:	ebffc7f2 	bl	11b09c <pbuf_free>
  return ERR_OK;
  1290d0:	e3a03000 	mov	r3, #0
}
  1290d4:	e1a00003 	mov	r0, r3
  1290d8:	e24bd004 	sub	sp, fp, #4
  1290dc:	e8bd8800 	pop	{fp, pc}

001290e0 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
  1290e0:	e92d4800 	push	{fp, lr}
  1290e4:	e28db004 	add	fp, sp, #4
  1290e8:	e24dd018 	sub	sp, sp, #24
  1290ec:	e50b0010 	str	r0, [fp, #-16]
  1290f0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1290f4:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  1290f8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
  1290fc:	e1db30b4 	ldrh	r3, [fp, #4]
  129100:	e1a00003 	mov	r0, r3
  129104:	ebffb5ad 	bl	1167c0 <lwip_htons>
  129108:	e1a03000 	mov	r3, r0
  12910c:	e14b30b6 	strh	r3, [fp, #-6]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
  129110:	e3a0100e 	mov	r1, #14
  129114:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  129118:	ebffc7c1 	bl	11b024 <pbuf_header>
  12911c:	e1a03000 	mov	r3, r0
  129120:	e3530000 	cmp	r3, #0
  129124:	1a000022 	bne	1291b4 <ethernet_output+0xd4>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
  129128:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12912c:	e5933004 	ldr	r3, [r3, #4]
  129130:	e50b300c 	str	r3, [fp, #-12]
  ethhdr->type = eth_type_be;
  129134:	e51b300c 	ldr	r3, [fp, #-12]
  129138:	e15b20b6 	ldrh	r2, [fp, #-6]
  12913c:	e1c320bc 	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
  129140:	e51b300c 	ldr	r3, [fp, #-12]
  129144:	e3a02006 	mov	r2, #6
  129148:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  12914c:	e1a00003 	mov	r0, r3
  129150:	eb005f89 	bl	140f7c <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
  129154:	e51b300c 	ldr	r3, [fp, #-12]
  129158:	e2833006 	add	r3, r3, #6
  12915c:	e3a02006 	mov	r2, #6
  129160:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  129164:	e1a00003 	mov	r0, r3
  129168:	eb005f83 	bl	140f7c <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
  12916c:	e51b3010 	ldr	r3, [fp, #-16]
  129170:	e5d3303a 	ldrb	r3, [r3, #58]	; 0x3a
  129174:	e3530006 	cmp	r3, #6
  129178:	0a000006 	beq	129198 <ethernet_output+0xb8>
  12917c:	e3080d14 	movw	r0, #36116	; 0x8d14
  129180:	e3400014 	movt	r0, #20
  129184:	ebff67e2 	bl	103114 <rt_kprintf>
  129188:	e300112e 	movw	r1, #302	; 0x12e
  12918c:	e3080d48 	movw	r0, #36168	; 0x8d48
  129190:	e3400014 	movt	r0, #20
  129194:	ebff87b2 	bl	10b064 <sys_arch_assert>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
  129198:	e51b3010 	ldr	r3, [fp, #-16]
  12919c:	e5933018 	ldr	r3, [r3, #24]
  1291a0:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1291a4:	e51b0010 	ldr	r0, [fp, #-16]
  1291a8:	e12fff33 	blx	r3
  1291ac:	e1a03000 	mov	r3, r0
  1291b0:	ea000009 	b	1291dc <ethernet_output+0xfc>
      goto pbuf_header_failed;
  1291b4:	e320f000 	nop	{0}

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  1291b8:	e3063840 	movw	r3, #26688	; 0x6840
  1291bc:	e3403057 	movt	r3, #87	; 0x57
  1291c0:	e1d330ba 	ldrh	r3, [r3, #10]
  1291c4:	e2833001 	add	r3, r3, #1
  1291c8:	e6ff2073 	uxth	r2, r3
  1291cc:	e3063840 	movw	r3, #26688	; 0x6840
  1291d0:	e3403057 	movt	r3, #87	; 0x57
  1291d4:	e1c320ba 	strh	r2, [r3, #10]
  return ERR_BUF;
  1291d8:	e3e03001 	mvn	r3, #1
}
  1291dc:	e1a00003 	mov	r0, r3
  1291e0:	e24bd004 	sub	sp, fp, #4
  1291e4:	e8bd8800 	pop	{fp, pc}

001291e8 <lwip_netdev_set_up>:
#include "lwip/netdb.h"
#include "../../../netdev/netdev.h"
#include "../../../netdev/eth_device_manager.h"

static int lwip_netdev_set_up(struct netdev *netif)
{
  1291e8:	e92d4800 	push	{fp, lr}
  1291ec:	e28db004 	add	fp, sp, #4
  1291f0:	e24dd008 	sub	sp, sp, #8
  1291f4:	e50b0008 	str	r0, [fp, #-8]
    netif_set_up((struct netif *)netif->user_data);
  1291f8:	e51b3008 	ldr	r3, [fp, #-8]
  1291fc:	e5933040 	ldr	r3, [r3, #64]	; 0x40
  129200:	e1a00003 	mov	r0, r3
  129204:	ebffc26a 	bl	119bb4 <netif_set_up>
    return ERR_OK;
  129208:	e3a03000 	mov	r3, #0
}
  12920c:	e1a00003 	mov	r0, r3
  129210:	e24bd004 	sub	sp, fp, #4
  129214:	e8bd8800 	pop	{fp, pc}

00129218 <lwip_netdev_set_down>:

static int lwip_netdev_set_down(struct netdev *netif)
{
  129218:	e92d4800 	push	{fp, lr}
  12921c:	e28db004 	add	fp, sp, #4
  129220:	e24dd008 	sub	sp, sp, #8
  129224:	e50b0008 	str	r0, [fp, #-8]
    netif_set_down((struct netif *)netif->user_data);
  129228:	e51b3008 	ldr	r3, [fp, #-8]
  12922c:	e5933040 	ldr	r3, [r3, #64]	; 0x40
  129230:	e1a00003 	mov	r0, r3
  129234:	ebffc2b3 	bl	119d08 <netif_set_down>
    return ERR_OK;
  129238:	e3a03000 	mov	r3, #0
}
  12923c:	e1a00003 	mov	r0, r3
  129240:	e24bd004 	sub	sp, fp, #4
  129244:	e8bd8800 	pop	{fp, pc}

00129248 <lwip_netdev_set_addr_info>:

static int lwip_netdev_set_addr_info(struct netdev *netif, ip_addr_t *ip_addr, ip_addr_t *netmask, ip_addr_t *gw)
{
  129248:	e92d4800 	push	{fp, lr}
  12924c:	e28db004 	add	fp, sp, #4
  129250:	e24dd010 	sub	sp, sp, #16
  129254:	e50b0008 	str	r0, [fp, #-8]
  129258:	e50b100c 	str	r1, [fp, #-12]
  12925c:	e50b2010 	str	r2, [fp, #-16]
  129260:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    if (ip_addr && netmask && gw)
  129264:	e51b300c 	ldr	r3, [fp, #-12]
  129268:	e3530000 	cmp	r3, #0
  12926c:	0a00000c 	beq	1292a4 <lwip_netdev_set_addr_info+0x5c>
  129270:	e51b3010 	ldr	r3, [fp, #-16]
  129274:	e3530000 	cmp	r3, #0
  129278:	0a000009 	beq	1292a4 <lwip_netdev_set_addr_info+0x5c>
  12927c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  129280:	e3530000 	cmp	r3, #0
  129284:	0a000006 	beq	1292a4 <lwip_netdev_set_addr_info+0x5c>
    {
        netif_set_addr((struct netif *)netif->user_data, ip_2_ip4(ip_addr), ip_2_ip4(netmask), ip_2_ip4(gw));
  129288:	e51b3008 	ldr	r3, [fp, #-8]
  12928c:	e5930040 	ldr	r0, [r3, #64]	; 0x40
  129290:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  129294:	e51b2010 	ldr	r2, [fp, #-16]
  129298:	e51b100c 	ldr	r1, [fp, #-12]
  12929c:	ebffc110 	bl	1196e4 <netif_set_addr>
  1292a0:	ea000017 	b	129304 <lwip_netdev_set_addr_info+0xbc>
    }
    else
    {
        if (ip_addr)
  1292a4:	e51b300c 	ldr	r3, [fp, #-12]
  1292a8:	e3530000 	cmp	r3, #0
  1292ac:	0a000004 	beq	1292c4 <lwip_netdev_set_addr_info+0x7c>
        {
            netif_set_ipaddr((struct netif *)netif->user_data, ip_2_ip4(ip_addr));
  1292b0:	e51b3008 	ldr	r3, [fp, #-8]
  1292b4:	e5933040 	ldr	r3, [r3, #64]	; 0x40
  1292b8:	e51b100c 	ldr	r1, [fp, #-12]
  1292bc:	e1a00003 	mov	r0, r3
  1292c0:	ebffc1b6 	bl	1199a0 <netif_set_ipaddr>
        }

        if (netmask)
  1292c4:	e51b3010 	ldr	r3, [fp, #-16]
  1292c8:	e3530000 	cmp	r3, #0
  1292cc:	0a000004 	beq	1292e4 <lwip_netdev_set_addr_info+0x9c>
        {
            netif_set_netmask((struct netif *)netif->user_data, ip_2_ip4(netmask));
  1292d0:	e51b3008 	ldr	r3, [fp, #-8]
  1292d4:	e5933040 	ldr	r3, [r3, #64]	; 0x40
  1292d8:	e51b1010 	ldr	r1, [fp, #-16]
  1292dc:	e1a00003 	mov	r0, r3
  1292e0:	ebffc20e 	bl	119b20 <netif_set_netmask>
        }

        if (gw)
  1292e4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1292e8:	e3530000 	cmp	r3, #0
  1292ec:	0a000004 	beq	129304 <lwip_netdev_set_addr_info+0xbc>
        {
            netif_set_gw((struct netif *)netif->user_data, ip_2_ip4(gw));
  1292f0:	e51b3008 	ldr	r3, [fp, #-8]
  1292f4:	e5933040 	ldr	r3, [r3, #64]	; 0x40
  1292f8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1292fc:	e1a00003 	mov	r0, r3
  129300:	ebffc1ed 	bl	119abc <netif_set_gw>
        }
    }

    return ERR_OK;
  129304:	e3a03000 	mov	r3, #0
}
  129308:	e1a00003 	mov	r0, r3
  12930c:	e24bd004 	sub	sp, fp, #4
  129310:	e8bd8800 	pop	{fp, pc}

00129314 <lwip_netdev_set_dns_server>:

#ifdef RT_LWIP_DNS
static int lwip_netdev_set_dns_server(struct netdev *netif, uint8_t dns_num, ip_addr_t *dns_server)
{
  129314:	e92d4800 	push	{fp, lr}
  129318:	e28db004 	add	fp, sp, #4
  12931c:	e24dd010 	sub	sp, sp, #16
  129320:	e50b0008 	str	r0, [fp, #-8]
  129324:	e1a03001 	mov	r3, r1
  129328:	e50b2010 	str	r2, [fp, #-16]
  12932c:	e54b3009 	strb	r3, [fp, #-9]
    extern void dns_setserver(uint8_t dns_num, const ip_addr_t *dns_server);
    dns_setserver(dns_num, dns_server);
  129330:	e55b3009 	ldrb	r3, [fp, #-9]
  129334:	e51b1010 	ldr	r1, [fp, #-16]
  129338:	e1a00003 	mov	r0, r3
  12933c:	ebffb625 	bl	116bd8 <dns_setserver>
    return ERR_OK;
  129340:	e3a03000 	mov	r3, #0
}
  129344:	e1a00003 	mov	r0, r3
  129348:	e24bd004 	sub	sp, fp, #4
  12934c:	e8bd8800 	pop	{fp, pc}

00129350 <lwip_netdev_set_dhcp>:
#endif /* RT_LWIP_DNS */

#ifdef RT_LWIP_DHCP
static int lwip_netdev_set_dhcp(struct netdev *netif, rt_bool_t is_enabled)
{
  129350:	e92d4800 	push	{fp, lr}
  129354:	e28db004 	add	fp, sp, #4
  129358:	e24dd008 	sub	sp, sp, #8
  12935c:	e50b0008 	str	r0, [fp, #-8]
  129360:	e50b100c 	str	r1, [fp, #-12]
    if(RT_TRUE == is_enabled)
  129364:	e51b300c 	ldr	r3, [fp, #-12]
  129368:	e3530001 	cmp	r3, #1
  12936c:	1a000004 	bne	129384 <lwip_netdev_set_dhcp+0x34>
    {
        dhcp_start((struct netif *)netif->user_data);
  129370:	e51b3008 	ldr	r3, [fp, #-8]
  129374:	e5933040 	ldr	r3, [r3, #64]	; 0x40
  129378:	e1a00003 	mov	r0, r3
  12937c:	eb0006d5 	bl	12aed8 <dhcp_start>
  129380:	ea000003 	b	129394 <lwip_netdev_set_dhcp+0x44>
    }
    else
    {
        dhcp_stop((struct netif *)netif->user_data);
  129384:	e51b3008 	ldr	r3, [fp, #-8]
  129388:	e5933040 	ldr	r3, [r3, #64]	; 0x40
  12938c:	e1a00003 	mov	r0, r3
  129390:	eb000b48 	bl	12c0b8 <dhcp_stop>
    }
    netdev_low_level_set_dhcp_status(netif, is_enabled);
  129394:	e51b100c 	ldr	r1, [fp, #-12]
  129398:	e51b0008 	ldr	r0, [fp, #-8]
  12939c:	ebff7499 	bl	106608 <netdev_low_level_set_dhcp_status>
    return ERR_OK;
  1293a0:	e3a03000 	mov	r3, #0
}
  1293a4:	e1a00003 	mov	r0, r3
  1293a8:	e24bd004 	sub	sp, fp, #4
  1293ac:	e8bd8800 	pop	{fp, pc}

001293b0 <lwip_netdev_ping>:
extern int lwip_ping_recv(int s, int *ttl);
extern err_t lwip_ping_send(int s, ip_addr_t *addr, int size);

int lwip_netdev_ping(struct netdev *netif, const char *host, size_t data_len, 
                        uint32_t timeout, struct netdev_ping_resp *ping_resp)
{
  1293b0:	e92d4800 	push	{fp, lr}
  1293b4:	e28db004 	add	fp, sp, #4
  1293b8:	e24dd070 	sub	sp, sp, #112	; 0x70
  1293bc:	e50b0060 	str	r0, [fp, #-96]	; 0xffffffa0
  1293c0:	e50b1064 	str	r1, [fp, #-100]	; 0xffffff9c
  1293c4:	e50b2068 	str	r2, [fp, #-104]	; 0xffffff98
  1293c8:	e50b306c 	str	r3, [fp, #-108]	; 0xffffff94
    int s, ttl, recv_len, result = 0;
  1293cc:	e3a03000 	mov	r3, #0
  1293d0:	e50b3008 	str	r3, [fp, #-8]
    int elapsed_time;
    rt_tick_t recv_start_tick;
#if LWIP_VERSION_MAJOR >= 2U
    struct timeval recv_timeout = { timeout / RT_TICK_PER_SECOND, timeout % RT_TICK_PER_SECOND };
  1293d4:	e51b206c 	ldr	r2, [fp, #-108]	; 0xffffff94
  1293d8:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  1293dc:	e3413062 	movt	r3, #4194	; 0x1062
  1293e0:	e0832392 	umull	r2, r3, r2, r3
  1293e4:	e1a03323 	lsr	r3, r3, #6
  1293e8:	e1a02003 	mov	r2, r3
  1293ec:	e3a03000 	mov	r3, #0
  1293f0:	e14b22fc 	strd	r2, [fp, #-44]	; 0xffffffd4
  1293f4:	e51b106c 	ldr	r1, [fp, #-108]	; 0xffffff94
  1293f8:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  1293fc:	e3413062 	movt	r3, #4194	; 0x1062
  129400:	e0832391 	umull	r2, r3, r1, r3
  129404:	e1a03323 	lsr	r3, r3, #6
  129408:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  12940c:	e0030392 	mul	r3, r2, r3
  129410:	e0413003 	sub	r3, r1, r3
  129414:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
#else
    int recv_timeout = timeout * 1000UL / RT_TICK_PER_SECOND;
#endif
    ip_addr_t target_addr;
    struct addrinfo hint, *res = RT_NULL;
  129418:	e3a03000 	mov	r3, #0
  12941c:	e50b3054 	str	r3, [fp, #-84]	; 0xffffffac
    struct sockaddr_in *h = RT_NULL;
  129420:	e3a03000 	mov	r3, #0
  129424:	e50b3058 	str	r3, [fp, #-88]	; 0xffffffa8
    struct in_addr ina;
    
    RT_ASSERT(netif);
  129428:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
  12942c:	e3530000 	cmp	r3, #0
  129430:	1a000005 	bne	12944c <lwip_netdev_ping+0x9c>
  129434:	e3a020ca 	mov	r2, #202	; 0xca
  129438:	e3081e8c 	movw	r1, #36492	; 0x8e8c
  12943c:	e3401014 	movt	r1, #20
  129440:	e3080d7c 	movw	r0, #36220	; 0x8d7c
  129444:	e3400014 	movt	r0, #20
  129448:	ebff6852 	bl	103598 <rt_assert_handler>
    RT_ASSERT(host);
  12944c:	e51b3064 	ldr	r3, [fp, #-100]	; 0xffffff9c
  129450:	e3530000 	cmp	r3, #0
  129454:	1a000005 	bne	129470 <lwip_netdev_ping+0xc0>
  129458:	e3a020cb 	mov	r2, #203	; 0xcb
  12945c:	e3081e8c 	movw	r1, #36492	; 0x8e8c
  129460:	e3401014 	movt	r1, #20
  129464:	e3080d84 	movw	r0, #36228	; 0x8d84
  129468:	e3400014 	movt	r0, #20
  12946c:	ebff6849 	bl	103598 <rt_assert_handler>
    RT_ASSERT(ping_resp);
  129470:	e59b3004 	ldr	r3, [fp, #4]
  129474:	e3530000 	cmp	r3, #0
  129478:	1a000005 	bne	129494 <lwip_netdev_ping+0xe4>
  12947c:	e3a020cc 	mov	r2, #204	; 0xcc
  129480:	e3081e8c 	movw	r1, #36492	; 0x8e8c
  129484:	e3401014 	movt	r1, #20
  129488:	e3080d8c 	movw	r0, #36236	; 0x8d8c
  12948c:	e3400014 	movt	r0, #20
  129490:	ebff6840 	bl	103598 <rt_assert_handler>

    rt_memset(&hint, 0x00, sizeof(hint));
  129494:	e24b3050 	sub	r3, fp, #80	; 0x50
  129498:	e3a02020 	mov	r2, #32
  12949c:	e3a01000 	mov	r1, #0
  1294a0:	e1a00003 	mov	r0, r3
  1294a4:	ebff6787 	bl	1032c8 <rt_memset>
    /* convert URL to IP */
    if (lwip_getaddrinfo(host, RT_NULL, &hint, &res) != 0)
  1294a8:	e24b3054 	sub	r3, fp, #84	; 0x54
  1294ac:	e24b2050 	sub	r2, fp, #80	; 0x50
  1294b0:	e3a01000 	mov	r1, #0
  1294b4:	e51b0064 	ldr	r0, [fp, #-100]	; 0xffffff9c
  1294b8:	ebff9d43 	bl	1109cc <lwip_getaddrinfo>
  1294bc:	e1a03000 	mov	r3, r0
  1294c0:	e3530000 	cmp	r3, #0
  1294c4:	0a000001 	beq	1294d0 <lwip_netdev_ping+0x120>
    {
        return -RT_ERROR;
  1294c8:	e3e03000 	mvn	r3, #0
  1294cc:	ea000064 	b	129664 <lwip_netdev_ping+0x2b4>
    }
    rt_memcpy(&h, &res->ai_addr, sizeof(struct sockaddr_in *));
  1294d0:	e51b3054 	ldr	r3, [fp, #-84]	; 0xffffffac
  1294d4:	e2831014 	add	r1, r3, #20
  1294d8:	e24b3058 	sub	r3, fp, #88	; 0x58
  1294dc:	e3a02004 	mov	r2, #4
  1294e0:	e1a00003 	mov	r0, r3
  1294e4:	ebff6785 	bl	103300 <rt_memcpy>
    rt_memcpy(&ina, &h->sin_addr, sizeof(ina));
  1294e8:	e51b3058 	ldr	r3, [fp, #-88]	; 0xffffffa8
  1294ec:	e2831004 	add	r1, r3, #4
  1294f0:	e24b305c 	sub	r3, fp, #92	; 0x5c
  1294f4:	e3a02004 	mov	r2, #4
  1294f8:	e1a00003 	mov	r0, r3
  1294fc:	ebff677f 	bl	103300 <rt_memcpy>
    lwip_freeaddrinfo(res);
  129500:	e51b3054 	ldr	r3, [fp, #-84]	; 0xffffffac
  129504:	e1a00003 	mov	r0, r3
  129508:	ebff9d1c 	bl	110980 <lwip_freeaddrinfo>
    if (inet_aton(inet_ntoa(ina), &target_addr) == 0)
  12950c:	e24b305c 	sub	r3, fp, #92	; 0x5c
  129510:	e1a00003 	mov	r0, r3
  129514:	eb0025f0 	bl	132cdc <ip4addr_ntoa>
  129518:	e1a02000 	mov	r2, r0
  12951c:	e24b3030 	sub	r3, fp, #48	; 0x30
  129520:	e1a01003 	mov	r1, r3
  129524:	e1a00002 	mov	r0, r2
  129528:	eb0024e7 	bl	1328cc <ip4addr_aton>
  12952c:	e1a03000 	mov	r3, r0
  129530:	e3530000 	cmp	r3, #0
  129534:	1a000001 	bne	129540 <lwip_netdev_ping+0x190>
    {
        return -RT_ERROR;
  129538:	e3e03000 	mvn	r3, #0
  12953c:	ea000048 	b	129664 <lwip_netdev_ping+0x2b4>
    }
    rt_memcpy(&(ping_resp->ip_addr), &target_addr, sizeof(ip_addr_t));
  129540:	e59b3004 	ldr	r3, [fp, #4]
  129544:	e24b1030 	sub	r1, fp, #48	; 0x30
  129548:	e3a02004 	mov	r2, #4
  12954c:	e1a00003 	mov	r0, r3
  129550:	ebff676a 	bl	103300 <rt_memcpy>
    
    /* new a socket */
    if ((s = lwip_socket(AF_INET, SOCK_RAW, IP_PROTO_ICMP)) < 0)
  129554:	e3a02001 	mov	r2, #1
  129558:	e3a01003 	mov	r1, #3
  12955c:	e3a00002 	mov	r0, #2
  129560:	ebffa65a 	bl	112ed0 <lwip_socket>
  129564:	e50b000c 	str	r0, [fp, #-12]
  129568:	e51b300c 	ldr	r3, [fp, #-12]
  12956c:	e3530000 	cmp	r3, #0
  129570:	aa000001 	bge	12957c <lwip_netdev_ping+0x1cc>
    {
        return -RT_ERROR;
  129574:	e3e03000 	mvn	r3, #0
  129578:	ea000039 	b	129664 <lwip_netdev_ping+0x2b4>
    }

    lwip_setsockopt(s, SOL_SOCKET, SO_RCVTIMEO, &recv_timeout, sizeof(recv_timeout));
  12957c:	e24b202c 	sub	r2, fp, #44	; 0x2c
  129580:	e3a03010 	mov	r3, #16
  129584:	e58d3000 	str	r3, [sp]
  129588:	e1a03002 	mov	r3, r2
  12958c:	e3012006 	movw	r2, #4102	; 0x1006
  129590:	e3001fff 	movw	r1, #4095	; 0xfff
  129594:	e51b000c 	ldr	r0, [fp, #-12]
  129598:	ebffae2a 	bl	114e48 <lwip_setsockopt>

    if (lwip_ping_send(s, &target_addr, data_len) == ERR_OK)
  12959c:	e51b2068 	ldr	r2, [fp, #-104]	; 0xffffff98
  1295a0:	e24b3030 	sub	r3, fp, #48	; 0x30
  1295a4:	e1a01003 	mov	r1, r3
  1295a8:	e51b000c 	ldr	r0, [fp, #-12]
  1295ac:	eb002c05 	bl	1345c8 <lwip_ping_send>
  1295b0:	e1a03000 	mov	r3, r0
  1295b4:	e3530000 	cmp	r3, #0
  1295b8:	1a000023 	bne	12964c <lwip_netdev_ping+0x29c>
    {
        recv_start_tick = rt_tick_get();
  1295bc:	ebff6227 	bl	101e60 <rt_tick_get>
  1295c0:	e50b0010 	str	r0, [fp, #-16]
        if ((recv_len = lwip_ping_recv(s, &ttl)) >= 0)
  1295c4:	e24b301c 	sub	r3, fp, #28
  1295c8:	e1a01003 	mov	r1, r3
  1295cc:	e51b000c 	ldr	r0, [fp, #-12]
  1295d0:	eb002c3a 	bl	1346c0 <lwip_ping_recv>
  1295d4:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
  1295d8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1295dc:	e3530000 	cmp	r3, #0
  1295e0:	ba000016 	blt	129640 <lwip_netdev_ping+0x290>
        {
            elapsed_time = (rt_tick_get() - recv_start_tick) * 1000UL / RT_TICK_PER_SECOND;
  1295e4:	ebff621d 	bl	101e60 <rt_tick_get>
  1295e8:	e1a02000 	mov	r2, r0
  1295ec:	e51b3010 	ldr	r3, [fp, #-16]
  1295f0:	e0423003 	sub	r3, r2, r3
  1295f4:	e3a02ffa 	mov	r2, #1000	; 0x3e8
  1295f8:	e0020392 	mul	r2, r2, r3
  1295fc:	e3043dd3 	movw	r3, #19923	; 0x4dd3
  129600:	e3413062 	movt	r3, #4194	; 0x1062
  129604:	e0832392 	umull	r2, r3, r2, r3
  129608:	e1a03323 	lsr	r3, r3, #6
  12960c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
            ping_resp->data_len = recv_len;
  129610:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  129614:	e6ff2073 	uxth	r2, r3
  129618:	e59b3004 	ldr	r3, [fp, #4]
  12961c:	e1c320b4 	strh	r2, [r3, #4]
            ping_resp->ttl = ttl;
  129620:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  129624:	e6ff2073 	uxth	r2, r3
  129628:	e59b3004 	ldr	r3, [fp, #4]
  12962c:	e1c320b6 	strh	r2, [r3, #6]
            ping_resp->ticks = elapsed_time;
  129630:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  129634:	e59b3004 	ldr	r3, [fp, #4]
  129638:	e5832008 	str	r2, [r3, #8]
  12963c:	ea000005 	b	129658 <lwip_netdev_ping+0x2a8>
        }
        else
        {
            result = -RT_ETIMEOUT;
  129640:	e3e03001 	mvn	r3, #1
  129644:	e50b3008 	str	r3, [fp, #-8]
            goto __exit;
  129648:	ea000002 	b	129658 <lwip_netdev_ping+0x2a8>
        }
    }
    else
    {
        result = -RT_ETIMEOUT;
  12964c:	e3e03001 	mvn	r3, #1
  129650:	e50b3008 	str	r3, [fp, #-8]
        goto __exit;
  129654:	e320f000 	nop	{0}
    }

__exit:
    lwip_close(s);
  129658:	e51b000c 	ldr	r0, [fp, #-12]
  12965c:	ebffa105 	bl	111a78 <lwip_close>

    return result;
  129660:	e51b3008 	ldr	r3, [fp, #-8]
}
  129664:	e1a00003 	mov	r0, r3
  129668:	e24bd004 	sub	sp, fp, #4
  12966c:	e8bd8800 	pop	{fp, pc}

00129670 <lwip_netdev_set_default>:
// }
// #endif /* RT_LWIP_TCP || RT_LWIP_UDP */
#endif /* RT_USING_FINSH */

static int lwip_netdev_set_default(struct netdev *netif)
{
  129670:	e92d4800 	push	{fp, lr}
  129674:	e28db004 	add	fp, sp, #4
  129678:	e24dd008 	sub	sp, sp, #8
  12967c:	e50b0008 	str	r0, [fp, #-8]
    netif_set_default((struct netif *)netif->user_data);
  129680:	e51b3008 	ldr	r3, [fp, #-8]
  129684:	e5933040 	ldr	r3, [r3, #64]	; 0x40
  129688:	e1a00003 	mov	r0, r3
  12968c:	ebffc13c 	bl	119b84 <netif_set_default>
    return ERR_OK;
  129690:	e3a03000 	mov	r3, #0
}
  129694:	e1a00003 	mov	r0, r3
  129698:	e24bd004 	sub	sp, fp, #4
  12969c:	e8bd8800 	pop	{fp, pc}

001296a0 <netdev_add>:

    lwip_netdev_set_default,
};

static int netdev_add(struct netif *lwip_netif)
{
  1296a0:	e92d4800 	push	{fp, lr}
  1296a4:	e28db004 	add	fp, sp, #4
  1296a8:	e24dd018 	sub	sp, sp, #24
  1296ac:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
#define LWIP_NETIF_NAME_LEN 2
    int result = 0;
  1296b0:	e3a03000 	mov	r3, #0
  1296b4:	e50b3008 	str	r3, [fp, #-8]
    struct netdev *netdev = RT_NULL;
  1296b8:	e3a03000 	mov	r3, #0
  1296bc:	e50b300c 	str	r3, [fp, #-12]
    char name[LWIP_NETIF_NAME_LEN + 1] = {0};
  1296c0:	e24b3010 	sub	r3, fp, #16
  1296c4:	e3a02000 	mov	r2, #0
  1296c8:	e1c320b0 	strh	r2, [r3]
  1296cc:	e5c32002 	strb	r2, [r3, #2]

    RT_ASSERT(lwip_netif);
  1296d0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1296d4:	e3530000 	cmp	r3, #0
  1296d8:	1a000005 	bne	1296f4 <netdev_add+0x54>
  1296dc:	e3002141 	movw	r2, #321	; 0x141
  1296e0:	e3081ea0 	movw	r1, #36512	; 0x8ea0
  1296e4:	e3401014 	movt	r1, #20
  1296e8:	e3080db8 	movw	r0, #36280	; 0x8db8
  1296ec:	e3400014 	movt	r0, #20
  1296f0:	ebff67a8 	bl	103598 <rt_assert_handler>

    netdev = (struct netdev *)rt_calloc(1, sizeof(struct netdev));
  1296f4:	e3a01044 	mov	r1, #68	; 0x44
  1296f8:	e3a00001 	mov	r0, #1
  1296fc:	ebff6642 	bl	10300c <rt_calloc>
  129700:	e50b000c 	str	r0, [fp, #-12]
    if (netdev == RT_NULL)
  129704:	e51b300c 	ldr	r3, [fp, #-12]
  129708:	e3530000 	cmp	r3, #0
  12970c:	1a000001 	bne	129718 <netdev_add+0x78>
    {
        return -ERR_IF;
  129710:	e3a0300c 	mov	r3, #12
  129714:	ea000036 	b	1297f4 <netdev_add+0x154>
//     extern int sal_lwip_netdev_set_pf_info(struct netdev *netdev);
//     /* set the lwIP network interface device protocol family information */
//     sal_lwip_netdev_set_pf_info(netdev);
// #endif /* SAL_USING_LWIP */
    extern int sal_unet_netdev_set_pf_info(struct netdev *netdev);
    sal_unet_netdev_set_pf_info(netdev);
  129718:	e51b000c 	ldr	r0, [fp, #-12]
  12971c:	ebff6c85 	bl	104938 <sal_unet_netdev_set_pf_info>

    rt_strncpy(name, lwip_netif->name, LWIP_NETIF_NAME_LEN);
  129720:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  129724:	e2831042 	add	r1, r3, #66	; 0x42
  129728:	e24b3010 	sub	r3, fp, #16
  12972c:	e3a02002 	mov	r2, #2
  129730:	e1a00003 	mov	r0, r3
  129734:	ebff66c9 	bl	103260 <rt_strncpy>
    result = netdev_register(netdev, name, (void *)lwip_netif);
  129738:	e24b3010 	sub	r3, fp, #16
  12973c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  129740:	e1a01003 	mov	r1, r3
  129744:	e51b000c 	ldr	r0, [fp, #-12]
  129748:	ebff6e45 	bl	105064 <netdev_register>
  12974c:	e50b0008 	str	r0, [fp, #-8]
    // result = ueth_netdev_register(netdev, name, (void *)lwip_netif);
	
    /* Update netdev info after registered */
    netdev->flags = lwip_netif->flags;
  129750:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  129754:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  129758:	e6ff2073 	uxth	r2, r3
  12975c:	e51b300c 	ldr	r3, [fp, #-12]
  129760:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a
    netdev->mtu = lwip_netif->mtu;
  129764:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  129768:	e1d323b8 	ldrh	r2, [r3, #56]	; 0x38
  12976c:	e51b300c 	ldr	r3, [fp, #-12]
  129770:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
    netdev->ops = &lwip_netdev_ops;
  129774:	e51b200c 	ldr	r2, [fp, #-12]
  129778:	e3083d98 	movw	r3, #36248	; 0x8d98
  12977c:	e3403014 	movt	r3, #20
  129780:	e5823030 	str	r3, [r2, #48]	; 0x30
    netdev->hwaddr_len =  lwip_netif->hwaddr_len;
  129784:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  129788:	e5d3203a 	ldrb	r2, [r3, #58]	; 0x3a
  12978c:	e51b300c 	ldr	r3, [fp, #-12]
  129790:	e5c32020 	strb	r2, [r3, #32]
    rt_memcpy(netdev->hwaddr, lwip_netif->hwaddr, lwip_netif->hwaddr_len);
  129794:	e51b300c 	ldr	r3, [fp, #-12]
  129798:	e2830021 	add	r0, r3, #33	; 0x21
  12979c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1297a0:	e283103b 	add	r1, r3, #59	; 0x3b
  1297a4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1297a8:	e5d3303a 	ldrb	r3, [r3, #58]	; 0x3a
  1297ac:	e1a02003 	mov	r2, r3
  1297b0:	ebff66d2 	bl	103300 <rt_memcpy>
    netdev->ip_addr = lwip_netif->ip_addr;
  1297b4:	e51b300c 	ldr	r3, [fp, #-12]
  1297b8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1297bc:	e5922004 	ldr	r2, [r2, #4]
  1297c0:	e583200c 	str	r2, [r3, #12]
    netdev->gw = lwip_netif->gw;
  1297c4:	e51b300c 	ldr	r3, [fp, #-12]
  1297c8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1297cc:	e592200c 	ldr	r2, [r2, #12]
  1297d0:	e5832014 	str	r2, [r3, #20]
    netdev->netmask = lwip_netif->netmask;
  1297d4:	e51b300c 	ldr	r3, [fp, #-12]
  1297d8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1297dc:	e5922008 	ldr	r2, [r2, #8]
  1297e0:	e5832010 	str	r2, [r3, #16]

#ifdef RT_LWIP_DHCP
    netdev_low_level_set_dhcp_status(netdev, RT_TRUE);
  1297e4:	e3a01001 	mov	r1, #1
  1297e8:	e51b000c 	ldr	r0, [fp, #-12]
  1297ec:	ebff7385 	bl	106608 <netdev_low_level_set_dhcp_status>
#endif

    return result;
  1297f0:	e51b3008 	ldr	r3, [fp, #-8]
}
  1297f4:	e1a00003 	mov	r0, r3
  1297f8:	e24bd004 	sub	sp, fp, #4
  1297fc:	e8bd8800 	pop	{fp, pc}

00129800 <netdev_del>:

static void netdev_del(struct netif *lwip_netif)
{
  129800:	e92d4800 	push	{fp, lr}
  129804:	e28db004 	add	fp, sp, #4
  129808:	e24dd010 	sub	sp, sp, #16
  12980c:	e50b0010 	str	r0, [fp, #-16]
    char name[LWIP_NETIF_NAME_LEN + 1];
    struct netdev *netdev;

    RT_ASSERT(lwip_netif);
  129810:	e51b3010 	ldr	r3, [fp, #-16]
  129814:	e3530000 	cmp	r3, #0
  129818:	1a000005 	bne	129834 <netdev_del+0x34>
  12981c:	e300216b 	movw	r2, #363	; 0x16b
  129820:	e3081eac 	movw	r1, #36524	; 0x8eac
  129824:	e3401014 	movt	r1, #20
  129828:	e3080db8 	movw	r0, #36280	; 0x8db8
  12982c:	e3400014 	movt	r0, #20
  129830:	ebff6758 	bl	103598 <rt_assert_handler>

    rt_strncpy(name, lwip_netif->name, LWIP_NETIF_NAME_LEN);
  129834:	e51b3010 	ldr	r3, [fp, #-16]
  129838:	e2831042 	add	r1, r3, #66	; 0x42
  12983c:	e24b300c 	sub	r3, fp, #12
  129840:	e3a02002 	mov	r2, #2
  129844:	e1a00003 	mov	r0, r3
  129848:	ebff6684 	bl	103260 <rt_strncpy>
    netdev = netdev_get_by_name(name);
  12984c:	e24b300c 	sub	r3, fp, #12
  129850:	e1a00003 	mov	r0, r3
  129854:	ebff6f26 	bl	1054f4 <netdev_get_by_name>
  129858:	e50b0008 	str	r0, [fp, #-8]
    netdev_unregister(netdev);
  12985c:	e51b0008 	ldr	r0, [fp, #-8]
  129860:	ebff6e6a 	bl	105210 <netdev_unregister>
    rt_free(netdev);
  129864:	e51b0008 	ldr	r0, [fp, #-8]
  129868:	ebff65d3 	bl	102fbc <rt_free>
}
  12986c:	e320f000 	nop	{0}
  129870:	e24bd004 	sub	sp, fp, #4
  129874:	e8bd8800 	pop	{fp, pc}

00129878 <netdev_flags_sync>:

/* synchronize lwIP network interface device and network interface device flags */
static int netdev_flags_sync(struct netif *lwip_netif)
{
  129878:	e92d4800 	push	{fp, lr}
  12987c:	e28db004 	add	fp, sp, #4
  129880:	e24dd010 	sub	sp, sp, #16
  129884:	e50b0010 	str	r0, [fp, #-16]
    struct netdev *netdev = NULL;
  129888:	e3a03000 	mov	r3, #0
  12988c:	e50b3008 	str	r3, [fp, #-8]

    RT_ASSERT(lwip_netif);
  129890:	e51b3010 	ldr	r3, [fp, #-16]
  129894:	e3530000 	cmp	r3, #0
  129898:	1a000005 	bne	1298b4 <netdev_flags_sync+0x3c>
  12989c:	e3a02f5e 	mov	r2, #376	; 0x178
  1298a0:	e3081eb8 	movw	r1, #36536	; 0x8eb8
  1298a4:	e3401014 	movt	r1, #20
  1298a8:	e3080db8 	movw	r0, #36280	; 0x8db8
  1298ac:	e3400014 	movt	r0, #20
  1298b0:	ebff6738 	bl	103598 <rt_assert_handler>

    netdev = netdev_get_by_name(lwip_netif->name);
  1298b4:	e51b3010 	ldr	r3, [fp, #-16]
  1298b8:	e2833042 	add	r3, r3, #66	; 0x42
  1298bc:	e1a00003 	mov	r0, r3
  1298c0:	ebff6f0b 	bl	1054f4 <netdev_get_by_name>
  1298c4:	e50b0008 	str	r0, [fp, #-8]
    if (netdev == RT_NULL)
  1298c8:	e51b3008 	ldr	r3, [fp, #-8]
  1298cc:	e3530000 	cmp	r3, #0
  1298d0:	1a000001 	bne	1298dc <netdev_flags_sync+0x64>
    {
        return -ERR_IF;
  1298d4:	e3a0300c 	mov	r3, #12
  1298d8:	ea00000d 	b	129914 <netdev_flags_sync+0x9c>
    }
    
    netdev->mtu = lwip_netif->mtu;
  1298dc:	e51b3010 	ldr	r3, [fp, #-16]
  1298e0:	e1d323b8 	ldrh	r2, [r3, #56]	; 0x38
  1298e4:	e51b3008 	ldr	r3, [fp, #-8]
  1298e8:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
    netdev->flags |= lwip_netif->flags;
  1298ec:	e51b3008 	ldr	r3, [fp, #-8]
  1298f0:	e1d322ba 	ldrh	r2, [r3, #42]	; 0x2a
  1298f4:	e51b3010 	ldr	r3, [fp, #-16]
  1298f8:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  1298fc:	e6ff3073 	uxth	r3, r3
  129900:	e1823003 	orr	r3, r2, r3
  129904:	e6ff2073 	uxth	r2, r3
  129908:	e51b3008 	ldr	r3, [fp, #-8]
  12990c:	e1c322ba 	strh	r2, [r3, #42]	; 0x2a

    return ERR_OK;
  129910:	e3a03000 	mov	r3, #0
}
  129914:	e1a00003 	mov	r0, r3
  129918:	e24bd004 	sub	sp, fp, #4
  12991c:	e8bd8800 	pop	{fp, pc}

00129920 <ethernetif_linkoutput>:
// #endif /* RT_USING_NETDEV */

static err_t ethernetif_linkoutput(struct netif *netif, struct pbuf *p)
{
  129920:	e92d4800 	push	{fp, lr}
  129924:	e28db004 	add	fp, sp, #4
  129928:	e24dd010 	sub	sp, sp, #16
  12992c:	e50b0010 	str	r0, [fp, #-16]
  129930:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
//         return ERR_IF;
//     }
// #endif
    struct eth_device* enetif;

    RT_ASSERT(netif != RT_NULL);
  129934:	e51b3010 	ldr	r3, [fp, #-16]
  129938:	e3530000 	cmp	r3, #0
  12993c:	1a000005 	bne	129958 <ethernetif_linkoutput+0x38>
  129940:	e30021a5 	movw	r2, #421	; 0x1a5
  129944:	e3081ecc 	movw	r1, #36556	; 0x8ecc
  129948:	e3401014 	movt	r1, #20
  12994c:	e3080dc4 	movw	r0, #36292	; 0x8dc4
  129950:	e3400014 	movt	r0, #20
  129954:	ebff670f 	bl	103598 <rt_assert_handler>
    enetif = (struct eth_device*)netif->state;
  129958:	e51b3010 	ldr	r3, [fp, #-16]
  12995c:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  129960:	e50b3008 	str	r3, [fp, #-8]

    if (enetif->eth_tx(&(enetif->parent), p) != RT_EOK)
  129964:	e51b3008 	ldr	r3, [fp, #-8]
  129968:	e5933074 	ldr	r3, [r3, #116]	; 0x74
  12996c:	e51b2008 	ldr	r2, [fp, #-8]
  129970:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  129974:	e1a00002 	mov	r0, r2
  129978:	e12fff33 	blx	r3
  12997c:	e1a03000 	mov	r3, r0
  129980:	e3530000 	cmp	r3, #0
  129984:	0a000001 	beq	129990 <ethernetif_linkoutput+0x70>
    {
        return ERR_IF;
  129988:	e3e0300b 	mvn	r3, #11
  12998c:	ea000000 	b	129994 <ethernetif_linkoutput+0x74>
    }
    return ERR_OK;
  129990:	e3a03000 	mov	r3, #0
}
  129994:	e1a00003 	mov	r0, r3
  129998:	e24bd004 	sub	sp, fp, #4
  12999c:	e8bd8800 	pop	{fp, pc}

001299a0 <eth_netif_device_init>:

static err_t eth_netif_device_init(struct netif *netif)
{
  1299a0:	e92d4800 	push	{fp, lr}
  1299a4:	e28db004 	add	fp, sp, #4
  1299a8:	e24dd010 	sub	sp, sp, #16
  1299ac:	e50b0010 	str	r0, [fp, #-16]
    struct eth_device *ethif;

    ethif = (struct eth_device*)netif->state;
  1299b0:	e51b3010 	ldr	r3, [fp, #-16]
  1299b4:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  1299b8:	e50b3008 	str	r3, [fp, #-8]
    if (ethif != RT_NULL)
  1299bc:	e51b3008 	ldr	r3, [fp, #-8]
  1299c0:	e3530000 	cmp	r3, #0
  1299c4:	0a000032 	beq	129a94 <eth_netif_device_init+0xf4>
    {
        rt_device_t device;

#ifdef RT_USING_NETDEV
    /* network interface device register */
    netdev_add(netif);
  1299c8:	e51b0010 	ldr	r0, [fp, #-16]
  1299cc:	ebffff33 	bl	1296a0 <netdev_add>
#endif /* RT_USING_NETDEV */

        /* get device object */
        device = (rt_device_t) ethif;
  1299d0:	e51b3008 	ldr	r3, [fp, #-8]
  1299d4:	e50b300c 	str	r3, [fp, #-12]
        if (ueth_device_init(device) != RT_EOK)
  1299d8:	e51b000c 	ldr	r0, [fp, #-12]
  1299dc:	ebff6ca5 	bl	104c78 <ueth_device_init>
  1299e0:	e1a03000 	mov	r3, r0
  1299e4:	e3530000 	cmp	r3, #0
  1299e8:	0a000001 	beq	1299f4 <eth_netif_device_init+0x54>
        // if (rt_device_init(device) != RT_EOK)
        {
            return ERR_IF;
  1299ec:	e3e0300b 	mvn	r3, #11
  1299f0:	ea000028 	b	129a98 <eth_netif_device_init+0xf8>
        }

        /* copy device flags to netif flags */
        netif->flags = (ethif->flags & 0xff);
  1299f4:	e51b3008 	ldr	r3, [fp, #-8]
  1299f8:	e1d336bc 	ldrh	r3, [r3, #108]	; 0x6c
  1299fc:	e6ef2073 	uxtb	r2, r3
  129a00:	e51b3010 	ldr	r3, [fp, #-16]
  129a04:	e5c32041 	strb	r2, [r3, #65]	; 0x41
        netif->mtu = ETHERNET_MTU;
  129a08:	e51b3010 	ldr	r3, [fp, #-16]
  129a0c:	e30025dc 	movw	r2, #1500	; 0x5dc
  129a10:	e1c323b8 	strh	r2, [r3, #56]	; 0x38
        
        /* set output */
        netif->output       = etharp_output;
  129a14:	e51b2010 	ldr	r2, [fp, #-16]
  129a18:	e30e3b5c 	movw	r3, #60252	; 0xeb5c
  129a1c:	e3403012 	movt	r3, #18
  129a20:	e5823014 	str	r3, [r2, #20]
#endif /* LWIP_IPV6_MLD */

#endif /* LWIP_IPV6 */

        /* set default netif */
        if (netif_default == RT_NULL)
  129a24:	e3063838 	movw	r3, #26680	; 0x6838
  129a28:	e3403057 	movt	r3, #87	; 0x57
  129a2c:	e5933000 	ldr	r3, [r3]
  129a30:	e3530000 	cmp	r3, #0
  129a34:	1a000003 	bne	129a48 <eth_netif_device_init+0xa8>
            netif_set_default(ethif->netif);
  129a38:	e51b3008 	ldr	r3, [fp, #-8]
  129a3c:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  129a40:	e1a00003 	mov	r0, r3
  129a44:	ebffc04e 	bl	119b84 <netif_set_default>
#if LWIP_DHCP
        /* set interface up */
        netif_set_up(ethif->netif);
  129a48:	e51b3008 	ldr	r3, [fp, #-8]
  129a4c:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  129a50:	e1a00003 	mov	r0, r3
  129a54:	ebffc056 	bl	119bb4 <netif_set_up>
        /* if this interface uses DHCP, start the DHCP client */
        dhcp_start(ethif->netif);
  129a58:	e51b3008 	ldr	r3, [fp, #-8]
  129a5c:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  129a60:	e1a00003 	mov	r0, r3
  129a64:	eb00051b 	bl	12aed8 <dhcp_start>
#else
        /* set interface up */
        netif_set_up(ethif->netif);
#endif
        if (ethif->flags & ETHIF_LINK_PHYUP)
  129a68:	e51b3008 	ldr	r3, [fp, #-8]
  129a6c:	e1d336bc 	ldrh	r3, [r3, #108]	; 0x6c
  129a70:	e2033c01 	and	r3, r3, #256	; 0x100
  129a74:	e3530000 	cmp	r3, #0
  129a78:	0a000003 	beq	129a8c <eth_netif_device_init+0xec>
        {
            /* set link_up for this netif */
            netif_set_link_up(ethif->netif);
  129a7c:	e51b3008 	ldr	r3, [fp, #-8]
  129a80:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  129a84:	e1a00003 	mov	r0, r3
  129a88:	ebffc0de 	bl	119e08 <netif_set_link_up>
        }
        return ERR_OK;
  129a8c:	e3a03000 	mov	r3, #0
  129a90:	ea000000 	b	129a98 <eth_netif_device_init+0xf8>
    }

    return ERR_IF;
  129a94:	e3e0300b 	mvn	r3, #11
}
  129a98:	e1a00003 	mov	r0, r3
  129a9c:	e24bd004 	sub	sp, fp, #4
  129aa0:	e8bd8800 	pop	{fp, pc}

00129aa4 <eth_device_init_with_flag>:

/* Keep old drivers compatible in RT-Thread */
rt_err_t eth_device_init_with_flag(struct eth_device *dev, const char *name, rt_uint16_t flags)
{
  129aa4:	e92d4800 	push	{fp, lr}
  129aa8:	e28db004 	add	fp, sp, #4
  129aac:	e24dd038 	sub	sp, sp, #56	; 0x38
  129ab0:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  129ab4:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  129ab8:	e1a03002 	mov	r3, r2
  129abc:	e14b32b6 	strh	r3, [fp, #-38]	; 0xffffffda
    struct netif* netif;
#if LWIP_NETIF_HOSTNAME
#define LWIP_HOSTNAME_LEN 16
    char *hostname = RT_NULL;
  129ac0:	e3a03000 	mov	r3, #0
  129ac4:	e50b3008 	str	r3, [fp, #-8]
    netif = (struct netif*) rt_calloc (1, sizeof(struct netif) + LWIP_HOSTNAME_LEN);
  129ac8:	e3a01098 	mov	r1, #152	; 0x98
  129acc:	e3a00001 	mov	r0, #1
  129ad0:	ebff654d 	bl	10300c <rt_calloc>
  129ad4:	e50b000c 	str	r0, [fp, #-12]
#else
    netif = (struct netif*) rt_calloc (1, sizeof(struct netif));
#endif
    if (netif == RT_NULL)
  129ad8:	e51b300c 	ldr	r3, [fp, #-12]
  129adc:	e3530000 	cmp	r3, #0
  129ae0:	1a000004 	bne	129af8 <eth_device_init_with_flag+0x54>
    {
        rt_kprintf("malloc netif failed\n");
  129ae4:	e3080dd8 	movw	r0, #36312	; 0x8dd8
  129ae8:	e3400014 	movt	r0, #20
  129aec:	ebff6588 	bl	103114 <rt_kprintf>
        return -RT_ERROR;
  129af0:	e3e03000 	mvn	r3, #0
  129af4:	ea00005b 	b	129c68 <eth_device_init_with_flag+0x1c4>
    }

    /* set netif */
    dev->netif = netif;
  129af8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  129afc:	e51b200c 	ldr	r2, [fp, #-12]
  129b00:	e5832044 	str	r2, [r3, #68]	; 0x44
    /* device flags, which will be set to netif flags when initializing */
    dev->flags = flags;
  129b04:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  129b08:	e15b22b6 	ldrh	r2, [fp, #-38]	; 0xffffffda
  129b0c:	e1c326bc 	strh	r2, [r3, #108]	; 0x6c
    /* link changed status of device */
    dev->link_changed = 0x00;
  129b10:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  129b14:	e3a02000 	mov	r2, #0
  129b18:	e5c3206e 	strb	r2, [r3, #110]	; 0x6e
    dev->parent.type = RT_Device_Class_NetIf;
  129b1c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  129b20:	e3a02002 	mov	r2, #2
  129b24:	e5832018 	str	r2, [r3, #24]
    /* register to RT-Thread device manager */
   // rt_device_register(&(dev->parent), name, RT_DEVICE_FLAG_RDWR);
    ueth_device_register(&(dev->parent), name, RT_DEVICE_FLAG_RDWR);
  129b28:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  129b2c:	e3a02003 	mov	r2, #3
  129b30:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  129b34:	e1a00003 	mov	r0, r3
  129b38:	ebff6bc1 	bl	104a44 <ueth_device_register>
    rt_sem_init(&(dev->tx_ack), name, 0, RT_IPC_FLAG_FIFO);
  129b3c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  129b40:	e2830048 	add	r0, r3, #72	; 0x48
  129b44:	e3a03000 	mov	r3, #0
  129b48:	e3a02000 	mov	r2, #0
  129b4c:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  129b50:	ebff5d4d 	bl	10108c <rt_sem_init>

    /* set name */
    netif->name[0] = name[0];
  129b54:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  129b58:	e5d32000 	ldrb	r2, [r3]
  129b5c:	e51b300c 	ldr	r3, [fp, #-12]
  129b60:	e5c32042 	strb	r2, [r3, #66]	; 0x42
    netif->name[1] = name[1];
  129b64:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  129b68:	e5d32001 	ldrb	r2, [r3, #1]
  129b6c:	e51b300c 	ldr	r3, [fp, #-12]
  129b70:	e5c32043 	strb	r2, [r3, #67]	; 0x43

    /* set hw address to 6 */
    netif->hwaddr_len   = 6;
  129b74:	e51b300c 	ldr	r3, [fp, #-12]
  129b78:	e3a02006 	mov	r2, #6
  129b7c:	e5c3203a 	strb	r2, [r3, #58]	; 0x3a
    /* maximum transfer unit */
    netif->mtu          = ETHERNET_MTU;
  129b80:	e51b300c 	ldr	r3, [fp, #-12]
  129b84:	e30025dc 	movw	r2, #1500	; 0x5dc
  129b88:	e1c323b8 	strh	r2, [r3, #56]	; 0x38

    /* set linkoutput */
    netif->linkoutput   = ethernetif_linkoutput;
  129b8c:	e51b200c 	ldr	r2, [fp, #-12]
  129b90:	e3093920 	movw	r3, #39200	; 0x9920
  129b94:	e3403012 	movt	r3, #18
  129b98:	e5823018 	str	r3, [r2, #24]
        
    /* get hardware MAC address */
    ueth_device_control(&(dev->parent), NIOCTL_GADDR, netif->hwaddr);
  129b9c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  129ba0:	e51b300c 	ldr	r3, [fp, #-12]
  129ba4:	e283303b 	add	r3, r3, #59	; 0x3b
  129ba8:	e1a02003 	mov	r2, r3
  129bac:	e3a01001 	mov	r1, #1
  129bb0:	ebff6cb0 	bl	104e78 <ueth_device_control>
    

#if LWIP_NETIF_HOSTNAME
    /* Initialize interface hostname */
    hostname = (char *)netif + sizeof(struct netif);
  129bb4:	e51b300c 	ldr	r3, [fp, #-12]
  129bb8:	e2833088 	add	r3, r3, #136	; 0x88
  129bbc:	e50b3008 	str	r3, [fp, #-8]
    rt_sprintf(hostname, "rtthread_%02x%02x", name[0], name[1]);
  129bc0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  129bc4:	e5d33000 	ldrb	r3, [r3]
  129bc8:	e1a02003 	mov	r2, r3
  129bcc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  129bd0:	e2833001 	add	r3, r3, #1
  129bd4:	e5d33000 	ldrb	r3, [r3]
  129bd8:	e3081df0 	movw	r1, #36336	; 0x8df0
  129bdc:	e3401014 	movt	r1, #20
  129be0:	e51b0008 	ldr	r0, [fp, #-8]
  129be4:	ebff6528 	bl	10308c <rt_sprintf>
    netif->hostname = hostname;
  129be8:	e51b300c 	ldr	r3, [fp, #-12]
  129bec:	e51b2008 	ldr	r2, [fp, #-8]
  129bf0:	e5832034 	str	r2, [r3, #52]	; 0x34
#endif /* LWIP_NETIF_HOSTNAME */
    /* if tcp thread has been started up, we add this netif to the system */
    if (rt_thread_find("tcpip") != RT_NULL)
  129bf4:	e3080e04 	movw	r0, #36356	; 0x8e04
  129bf8:	e3400014 	movt	r0, #20
  129bfc:	ebff611d 	bl	102078 <rt_thread_find>
  129c00:	e1a03000 	mov	r3, r0
  129c04:	e3530000 	cmp	r3, #0
  129c08:	0a000013 	beq	129c5c <eth_device_init_with_flag+0x1b8>
#if !LWIP_DHCP
        ipaddr.addr = inet_addr(RT_LWIP_IPADDR);
        gw.addr = inet_addr(RT_LWIP_GWADDR);
        netmask.addr = inet_addr(RT_LWIP_MSKADDR);
#else        
        IP4_ADDR(&ipaddr, 0, 0, 0, 0);
  129c0c:	e3a03000 	mov	r3, #0
  129c10:	e50b3010 	str	r3, [fp, #-16]
        IP4_ADDR(&gw, 0, 0, 0, 0);
  129c14:	e3a03000 	mov	r3, #0
  129c18:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        IP4_ADDR(&netmask, 0, 0, 0, 0);
  129c1c:	e3a03000 	mov	r3, #0
  129c20:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
#endif
        netifapi_netif_add(netif, &ipaddr, &netmask, &gw, dev, eth_netif_device_init, tcpip_input);
  129c24:	e24b0018 	sub	r0, fp, #24
  129c28:	e24b2014 	sub	r2, fp, #20
  129c2c:	e24b1010 	sub	r1, fp, #16
  129c30:	e3063354 	movw	r3, #25428	; 0x6354
  129c34:	e3403011 	movt	r3, #17
  129c38:	e58d3008 	str	r3, [sp, #8]
  129c3c:	e30939a0 	movw	r3, #39328	; 0x99a0
  129c40:	e3403012 	movt	r3, #18
  129c44:	e58d3004 	str	r3, [sp, #4]
  129c48:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  129c4c:	e58d3000 	str	r3, [sp]
  129c50:	e1a03000 	mov	r3, r0
  129c54:	e51b000c 	ldr	r0, [fp, #-12]
  129c58:	ebff9c94 	bl	110eb0 <netifapi_netif_add>
    }
#ifdef RT_USING_NETDEV
    /* network interface device flags synchronize */
    netdev_flags_sync(netif);
  129c5c:	e51b000c 	ldr	r0, [fp, #-12]
  129c60:	ebffff04 	bl	129878 <netdev_flags_sync>
#endif /* RT_USING_NETDEV */
    return RT_EOK;
  129c64:	e3a03000 	mov	r3, #0
}
  129c68:	e1a00003 	mov	r0, r3
  129c6c:	e24bd004 	sub	sp, fp, #4
  129c70:	e8bd8800 	pop	{fp, pc}

00129c74 <eth_device_init>:

rt_err_t eth_device_init(struct eth_device * dev, const char *name)
{
  129c74:	e92d4800 	push	{fp, lr}
  129c78:	e28db004 	add	fp, sp, #4
  129c7c:	e24dd010 	sub	sp, sp, #16
  129c80:	e50b0010 	str	r0, [fp, #-16]
  129c84:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    rt_uint16_t flags = NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
  129c88:	e3a0300a 	mov	r3, #10
  129c8c:	e14b30b6 	strh	r3, [fp, #-6]

#if LWIP_IGMP
    /* IGMP support */
    flags |= NETIF_FLAG_IGMP;
  129c90:	e15b30b6 	ldrh	r3, [fp, #-6]
  129c94:	e3833020 	orr	r3, r3, #32
  129c98:	e14b30b6 	strh	r3, [fp, #-6]
#endif
    return eth_device_init_with_flag(dev, name, flags);
  129c9c:	e15b30b6 	ldrh	r3, [fp, #-6]
  129ca0:	e1a02003 	mov	r2, r3
  129ca4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  129ca8:	e51b0010 	ldr	r0, [fp, #-16]
  129cac:	ebffff7c 	bl	129aa4 <eth_device_init_with_flag>
  129cb0:	e1a03000 	mov	r3, r0
}
  129cb4:	e1a00003 	mov	r0, r3
  129cb8:	e24bd004 	sub	sp, fp, #4
  129cbc:	e8bd8800 	pop	{fp, pc}

00129cc0 <eth_device_deinit>:

void eth_device_deinit(struct eth_device *dev)
{
  129cc0:	e92d4800 	push	{fp, lr}
  129cc4:	e28db004 	add	fp, sp, #4
  129cc8:	e24dd010 	sub	sp, sp, #16
  129ccc:	e50b0010 	str	r0, [fp, #-16]
    struct netif* netif = dev->netif;
  129cd0:	e51b3010 	ldr	r3, [fp, #-16]
  129cd4:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  129cd8:	e50b3008 	str	r3, [fp, #-8]

#if LWIP_DHCP
    dhcp_stop(netif);
  129cdc:	e51b0008 	ldr	r0, [fp, #-8]
  129ce0:	eb0008f4 	bl	12c0b8 <dhcp_stop>
    dhcp_cleanup(netif);
  129ce4:	e51b0008 	ldr	r0, [fp, #-8]
  129ce8:	eb00045e 	bl	12ae68 <dhcp_cleanup>
#endif
    netif_set_down(netif);
  129cec:	e51b0008 	ldr	r0, [fp, #-8]
  129cf0:	ebffc004 	bl	119d08 <netif_set_down>
    netif_remove(netif);
  129cf4:	e51b0008 	ldr	r0, [fp, #-8]
  129cf8:	ebffbe9d 	bl	119774 <netif_remove>
// #ifdef RT_USING_NETDEV
    netdev_del(netif);
  129cfc:	e51b0008 	ldr	r0, [fp, #-8]
  129d00:	ebfffebe 	bl	129800 <netdev_del>
// #endif
    ueth_device_close(&(dev->parent));
  129d04:	e51b3010 	ldr	r3, [fp, #-16]
  129d08:	e1a00003 	mov	r0, r3
  129d0c:	ebff6c16 	bl	104d6c <ueth_device_close>
    ueth_device_unregister(&(dev->parent));
  129d10:	e51b3010 	ldr	r3, [fp, #-16]
  129d14:	e1a00003 	mov	r0, r3
  129d18:	ebff6b9b 	bl	104b8c <ueth_device_unregister>
    rt_sem_detach(&(dev->tx_ack));
  129d1c:	e51b3010 	ldr	r3, [fp, #-16]
  129d20:	e2833048 	add	r3, r3, #72	; 0x48
  129d24:	e1a00003 	mov	r0, r3
  129d28:	ebff5d1d 	bl	1011a4 <rt_sem_detach>
    rt_free(netif);
  129d2c:	e51b0008 	ldr	r0, [fp, #-8]
  129d30:	ebff64a1 	bl	102fbc <rt_free>
}
  129d34:	e320f000 	nop	{0}
  129d38:	e24bd004 	sub	sp, fp, #4
  129d3c:	e8bd8800 	pop	{fp, pc}

00129d40 <eth_device_ready>:
}
#endif /* SAL_USING_AF_UNIX */

#ifndef LWIP_NO_RX_THREAD
rt_err_t eth_device_ready(struct eth_device* dev)
{
  129d40:	e92d4800 	push	{fp, lr}
  129d44:	e28db004 	add	fp, sp, #4
  129d48:	e24dd008 	sub	sp, sp, #8
  129d4c:	e50b0008 	str	r0, [fp, #-8]
    if (dev->netif)
  129d50:	e51b3008 	ldr	r3, [fp, #-8]
  129d54:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  129d58:	e3530000 	cmp	r3, #0
  129d5c:	0a000006 	beq	129d7c <eth_device_ready+0x3c>
    {
        /* post message to Ethernet thread */
        return rt_mb_send(&eth_rx_thread_mb, (rt_ubase_t)dev);        
  129d60:	e51b3008 	ldr	r3, [fp, #-8]
  129d64:	e1a01003 	mov	r1, r3
  129d68:	e30f0694 	movw	r0, #63124	; 0xf694
  129d6c:	e3400014 	movt	r0, #20
  129d70:	ebff5e23 	bl	101604 <rt_mb_send>
  129d74:	e1a03000 	mov	r3, r0
  129d78:	ea000000 	b	129d80 <eth_device_ready+0x40>
    }
    else
        return ERR_OK; /* netif is not initialized yet, just return. */
  129d7c:	e3a03000 	mov	r3, #0
}
  129d80:	e1a00003 	mov	r0, r3
  129d84:	e24bd004 	sub	sp, fp, #4
  129d88:	e8bd8800 	pop	{fp, pc}

00129d8c <eth_device_linkchange>:

rt_err_t eth_device_linkchange(struct eth_device* dev, rt_bool_t up)
{
  129d8c:	e92d4800 	push	{fp, lr}
  129d90:	e28db004 	add	fp, sp, #4
  129d94:	e24dd010 	sub	sp, sp, #16
  129d98:	e50b0010 	str	r0, [fp, #-16]
  129d9c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    // rt_uint32_t level;

    RT_ASSERT(dev != RT_NULL);
  129da0:	e51b3010 	ldr	r3, [fp, #-16]
  129da4:	e3530000 	cmp	r3, #0
  129da8:	1a000005 	bne	129dc4 <eth_device_linkchange+0x38>
  129dac:	e3a02fc3 	mov	r2, #780	; 0x30c
  129db0:	e3081ee4 	movw	r1, #36580	; 0x8ee4
  129db4:	e3401014 	movt	r1, #20
  129db8:	e3080e0c 	movw	r0, #36364	; 0x8e0c
  129dbc:	e3400014 	movt	r0, #20
  129dc0:	ebff65f4 	bl	103598 <rt_assert_handler>

    // level = rt_hw_interrupt_disable();
    dev->link_changed = 0x01;
  129dc4:	e51b3010 	ldr	r3, [fp, #-16]
  129dc8:	e3a02001 	mov	r2, #1
  129dcc:	e5c3206e 	strb	r2, [r3, #110]	; 0x6e
    if (up == RT_TRUE)
  129dd0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  129dd4:	e3530001 	cmp	r3, #1
  129dd8:	1a000003 	bne	129dec <eth_device_linkchange+0x60>
        dev->link_status = 0x01;
  129ddc:	e51b3010 	ldr	r3, [fp, #-16]
  129de0:	e3a02001 	mov	r2, #1
  129de4:	e5c3206f 	strb	r2, [r3, #111]	; 0x6f
  129de8:	ea000002 	b	129df8 <eth_device_linkchange+0x6c>
    else
        dev->link_status = 0x00;
  129dec:	e51b3010 	ldr	r3, [fp, #-16]
  129df0:	e3a02000 	mov	r2, #0
  129df4:	e5c3206f 	strb	r2, [r3, #111]	; 0x6f
    // rt_hw_interrupt_enable(level);
    
    // rt_uint32_t level;
    // level = rt_hw_interrupt_disable();
    int status = dev->link_status;
  129df8:	e51b3010 	ldr	r3, [fp, #-16]
  129dfc:	e5d3306f 	ldrb	r3, [r3, #111]	; 0x6f
  129e00:	e50b3008 	str	r3, [fp, #-8]
    dev->link_changed = 0x00;
  129e04:	e51b3010 	ldr	r3, [fp, #-16]
  129e08:	e3a02000 	mov	r2, #0
  129e0c:	e5c3206e 	strb	r2, [r3, #110]	; 0x6e
    // rt_hw_interrupt_enable(level);

    if (status)
  129e10:	e51b3008 	ldr	r3, [fp, #-8]
  129e14:	e3530000 	cmp	r3, #0
  129e18:	0a000007 	beq	129e3c <eth_device_linkchange+0xb0>
        netifapi_netif_set_link_up(dev->netif);
  129e1c:	e51b3010 	ldr	r3, [fp, #-16]
  129e20:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  129e24:	e3a02000 	mov	r2, #0
  129e28:	e3091e08 	movw	r1, #40456	; 0x9e08
  129e2c:	e3401011 	movt	r1, #17
  129e30:	e1a00003 	mov	r0, r3
  129e34:	ebff9c7b 	bl	111028 <netifapi_netif_common>
  129e38:	ea000006 	b	129e58 <eth_device_linkchange+0xcc>
    else
        netifapi_netif_set_link_down(dev->netif);
  129e3c:	e51b3010 	ldr	r3, [fp, #-16]
  129e40:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  129e44:	e3a02000 	mov	r2, #0
  129e48:	e3091eb8 	movw	r1, #40632	; 0x9eb8
  129e4c:	e3401011 	movt	r1, #17
  129e50:	e1a00003 	mov	r0, r3
  129e54:	ebff9c73 	bl	111028 <netifapi_netif_common>

    return RT_EOK;
  129e58:	e3a03000 	mov	r3, #0
}
  129e5c:	e1a00003 	mov	r0, r3
  129e60:	e24bd004 	sub	sp, fp, #4
  129e64:	e8bd8800 	pop	{fp, pc}

00129e68 <eth_rx_thread_entry>:
#ifndef LWIP_NO_RX_THREAD

/* Ethernet Rx Thread */
extern void* ueth_rx_interrupt_detect(void);
static void eth_rx_thread_entry(void* parameter)
{
  129e68:	e92d4800 	push	{fp, lr}
  129e6c:	e28db004 	add	fp, sp, #4
  129e70:	e24dd010 	sub	sp, sp, #16
  129e74:	e50b0010 	str	r0, [fp, #-16]
    struct eth_device* device;
    struct pbuf *p;

    while (!eth_init_done)
  129e78:	ea000001 	b	129e84 <eth_rx_thread_entry+0x1c>
    {
        rt_thread_mdelay(10);
  129e7c:	e3a0000a 	mov	r0, #10
  129e80:	ebff5ffd 	bl	101e7c <rt_thread_mdelay>
    while (!eth_init_done)
  129e84:	e30f3bf0 	movw	r3, #64496	; 0xfbf0
  129e88:	e3403014 	movt	r3, #20
  129e8c:	e5933000 	ldr	r3, [r3]
  129e90:	e3530000 	cmp	r3, #0
  129e94:	0afffff8 	beq	129e7c <eth_rx_thread_entry+0x14>
    }

    while (1)
    {
        device = (struct eth_device*)ueth_rx_interrupt_detect();
  129e98:	eb002e61 	bl	135824 <ueth_rx_interrupt_detect>
  129e9c:	e50b0008 	str	r0, [fp, #-8]
        if(device->eth_rx == RT_NULL) break;
  129ea0:	e51b3008 	ldr	r3, [fp, #-8]
  129ea4:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  129ea8:	e3530000 	cmp	r3, #0
  129eac:	0a00001a 	beq	129f1c <eth_rx_thread_entry+0xb4>

        /* receive all of buffer */
        while (1)
        {
            p = device->eth_rx(&(device->parent));
  129eb0:	e51b3008 	ldr	r3, [fp, #-8]
  129eb4:	e5933070 	ldr	r3, [r3, #112]	; 0x70
  129eb8:	e51b2008 	ldr	r2, [fp, #-8]
  129ebc:	e1a00002 	mov	r0, r2
  129ec0:	e12fff33 	blx	r3
  129ec4:	e50b000c 	str	r0, [fp, #-12]
            if (p != RT_NULL)
  129ec8:	e51b300c 	ldr	r3, [fp, #-12]
  129ecc:	e3530000 	cmp	r3, #0
  129ed0:	0a00000f 	beq	129f14 <eth_rx_thread_entry+0xac>
            {
                /* notify to upper layer */
                if(device->netif->input(p, device->netif) != ERR_OK)
  129ed4:	e51b3008 	ldr	r3, [fp, #-8]
  129ed8:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  129edc:	e5933010 	ldr	r3, [r3, #16]
  129ee0:	e51b2008 	ldr	r2, [fp, #-8]
  129ee4:	e5922044 	ldr	r2, [r2, #68]	; 0x44
  129ee8:	e1a01002 	mov	r1, r2
  129eec:	e51b000c 	ldr	r0, [fp, #-12]
  129ef0:	e12fff33 	blx	r3
  129ef4:	e1a03000 	mov	r3, r0
  129ef8:	e3530000 	cmp	r3, #0
  129efc:	0affffeb 	beq	129eb0 <eth_rx_thread_entry+0x48>
                {
                    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: Input error\n"));
                    pbuf_free(p);
  129f00:	e51b000c 	ldr	r0, [fp, #-12]
  129f04:	ebffc464 	bl	11b09c <pbuf_free>
                    p = NULL;
  129f08:	e3a03000 	mov	r3, #0
  129f0c:	e50b300c 	str	r3, [fp, #-12]
            p = device->eth_rx(&(device->parent));
  129f10:	eaffffe6 	b	129eb0 <eth_rx_thread_entry+0x48>
                }
            }
            else break;
  129f14:	e320f000 	nop	{0}
        device = (struct eth_device*)ueth_rx_interrupt_detect();
  129f18:	eaffffde 	b	129e98 <eth_rx_thread_entry+0x30>
        if(device->eth_rx == RT_NULL) break;
  129f1c:	e320f000 	nop	{0}
        }
    }
}
  129f20:	e320f000 	nop	{0}
  129f24:	e24bd004 	sub	sp, fp, #4
  129f28:	e8bd8800 	pop	{fp, pc}

00129f2c <eth_system_device_init>:
/* this function does not need, 
 * use eth_system_device_init_private() 
 * call by lwip_system_init(). 
 */
int eth_system_device_init(void)
{
  129f2c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  129f30:	e28db000 	add	fp, sp, #0
    return 0;
  129f34:	e3a03000 	mov	r3, #0
}
  129f38:	e1a00003 	mov	r0, r3
  129f3c:	e28bd000 	add	sp, fp, #0
  129f40:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  129f44:	e12fff1e 	bx	lr

00129f48 <eth_system_device_init_private>:
int eth_system_device_init_private(void)
{
  129f48:	e92d4800 	push	{fp, lr}
  129f4c:	e28db004 	add	fp, sp, #4
  129f50:	e24dd010 	sub	sp, sp, #16
    rt_err_t result = RT_EOK;
  129f54:	e3a03000 	mov	r3, #0
  129f58:	e50b3008 	str	r3, [fp, #-8]

    /* initialize Rx thread. */
#ifndef LWIP_NO_RX_THREAD
    /* initialize mailbox and create Ethernet Rx thread */
    result = rt_mb_init(&eth_rx_thread_mb, "erxmb",
  129f5c:	e3a03000 	mov	r3, #0
  129f60:	e58d3000 	str	r3, [sp]
  129f64:	e3a03c01 	mov	r3, #256	; 0x100
  129f68:	e30f26c8 	movw	r2, #63176	; 0xf6c8
  129f6c:	e3402014 	movt	r2, #20
  129f70:	e3081e1c 	movw	r1, #36380	; 0x8e1c
  129f74:	e3401014 	movt	r1, #20
  129f78:	e30f0694 	movw	r0, #63124	; 0xf694
  129f7c:	e3400014 	movt	r0, #20
  129f80:	ebff5d12 	bl	1013d0 <rt_mb_init>
  129f84:	e50b0008 	str	r0, [fp, #-8]
                        &eth_rx_thread_mb_pool[0], sizeof(eth_rx_thread_mb_pool)/sizeof(void *),
                        RT_IPC_FLAG_FIFO);
    RT_ASSERT(result == RT_EOK);
  129f88:	e51b3008 	ldr	r3, [fp, #-8]
  129f8c:	e3530000 	cmp	r3, #0
  129f90:	0a000005 	beq	129fac <eth_system_device_init_private+0x64>
  129f94:	e300238e 	movw	r2, #910	; 0x38e
  129f98:	e3081efc 	movw	r1, #36604	; 0x8efc
  129f9c:	e3401014 	movt	r1, #20
  129fa0:	e3080e24 	movw	r0, #36388	; 0x8e24
  129fa4:	e3400014 	movt	r0, #20
  129fa8:	ebff657a 	bl	103598 <rt_assert_handler>

    rt_thread_t erx_tid = rt_thread_create("erx", eth_rx_thread_entry, RT_NULL, RT_LWIP_ETHTHREAD_STACKSIZE, 25, 16);
  129fac:	e3a03010 	mov	r3, #16
  129fb0:	e58d3004 	str	r3, [sp, #4]
  129fb4:	e3a03019 	mov	r3, #25
  129fb8:	e58d3000 	str	r3, [sp]
  129fbc:	e3a03a02 	mov	r3, #8192	; 0x2000
  129fc0:	e3a02000 	mov	r2, #0
  129fc4:	e3091e68 	movw	r1, #40552	; 0x9e68
  129fc8:	e3401012 	movt	r1, #18
  129fcc:	e3080e38 	movw	r0, #36408	; 0x8e38
  129fd0:	e3400014 	movt	r0, #20
  129fd4:	ebff6046 	bl	1020f4 <rt_thread_create>
  129fd8:	e50b000c 	str	r0, [fp, #-12]
    // rt_thread_t erx_tid = rt_thread_create("erx", eth_rx_thread_entry, RT_NULL, RT_LWIP_ETHTHREAD_STACKSIZE, 30, 16);
    result = rt_thread_startup(erx_tid);
  129fdc:	e51b000c 	ldr	r0, [fp, #-12]
  129fe0:	ebff6078 	bl	1021c8 <rt_thread_startup>
  129fe4:	e50b0008 	str	r0, [fp, #-8]
    RT_ASSERT(result == RT_EOK);
  129fe8:	e51b3008 	ldr	r3, [fp, #-8]
  129fec:	e3530000 	cmp	r3, #0
  129ff0:	0a000005 	beq	12a00c <eth_system_device_init_private+0xc4>
  129ff4:	e3002393 	movw	r2, #915	; 0x393
  129ff8:	e3081efc 	movw	r1, #36604	; 0x8efc
  129ffc:	e3401014 	movt	r1, #20
  12a000:	e3080e24 	movw	r0, #36388	; 0x8e24
  12a004:	e3400014 	movt	r0, #20
  12a008:	ebff6562 	bl	103598 <rt_assert_handler>
#endif

    /* initialize Tx thread */
#ifndef LWIP_NO_TX_THREAD
    /* initialize mailbox and create Ethernet Tx thread */
    result = rt_mb_init(&eth_tx_thread_mb, "etxmb",
  12a00c:	e3a03000 	mov	r3, #0
  12a010:	e58d3000 	str	r3, [sp]
  12a014:	e3a03c01 	mov	r3, #256	; 0x100
  12a018:	e30f2294 	movw	r2, #62100	; 0xf294
  12a01c:	e3402014 	movt	r2, #20
  12a020:	e3081e3c 	movw	r1, #36412	; 0x8e3c
  12a024:	e3401014 	movt	r1, #20
  12a028:	e30f0260 	movw	r0, #62048	; 0xf260
  12a02c:	e3400014 	movt	r0, #20
  12a030:	ebff5ce6 	bl	1013d0 <rt_mb_init>
  12a034:	e50b0008 	str	r0, [fp, #-8]
                        &eth_tx_thread_mb_pool[0], sizeof(eth_tx_thread_mb_pool)/sizeof(void *),
                        RT_IPC_FLAG_FIFO);
    RT_ASSERT(result == RT_EOK);
  12a038:	e51b3008 	ldr	r3, [fp, #-8]
  12a03c:	e3530000 	cmp	r3, #0
  12a040:	0a000005 	beq	12a05c <eth_system_device_init_private+0x114>
  12a044:	e30023a3 	movw	r2, #931	; 0x3a3
  12a048:	e3081efc 	movw	r1, #36604	; 0x8efc
  12a04c:	e3401014 	movt	r1, #20
  12a050:	e3080e24 	movw	r0, #36388	; 0x8e24
  12a054:	e3400014 	movt	r0, #20
  12a058:	ebff654e 	bl	103598 <rt_assert_handler>

    // rt_thread_t etx_tid = rt_thread_create("etx", eth_tx_thread_entry, RT_NULL, RT_LWIP_ETHTHREAD_STACKSIZE, RT_ETHERNETIF_THREAD_PREORITY, 16);
    // result = rt_thread_startup(etx_tid);
    // RT_ASSERT(result == RT_EOK);
#endif
    return (int)result;
  12a05c:	e51b3008 	ldr	r3, [fp, #-8]
}
  12a060:	e1a00003 	mov	r0, r3
  12a064:	e24bd004 	sub	sp, fp, #4
  12a068:	e8bd8800 	pop	{fp, pc}

0012a06c <set_if>:

void set_if(char* netif_name, char* ip_addr, char* gw_addr, char* nm_addr)
{
  12a06c:	e92d4800 	push	{fp, lr}
  12a070:	e28db004 	add	fp, sp, #4
  12a074:	e24dd020 	sub	sp, sp, #32
  12a078:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  12a07c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  12a080:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  12a084:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    ip4_addr_t *ip;
    ip4_addr_t addr;
    struct netif * netif = netif_list;
  12a088:	e3063834 	movw	r3, #26676	; 0x6834
  12a08c:	e3403057 	movt	r3, #87	; 0x57
  12a090:	e5933000 	ldr	r3, [r3]
  12a094:	e50b3008 	str	r3, [fp, #-8]

    if(strlen(netif_name) > sizeof(netif->name))
  12a098:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12a09c:	eb005d7f 	bl	1416a0 <strlen>
  12a0a0:	e1a03000 	mov	r3, r0
  12a0a4:	e3530002 	cmp	r3, #2
  12a0a8:	9a000017 	bls	12a10c <set_if+0xa0>
    {
        rt_kprintf("network interface name too long!\r\n");
  12a0ac:	e3080e44 	movw	r0, #36420	; 0x8e44
  12a0b0:	e3400014 	movt	r0, #20
  12a0b4:	ebff6416 	bl	103114 <rt_kprintf>
        return;
  12a0b8:	ea000041 	b	12a1c4 <set_if+0x158>
    }

    while(netif != RT_NULL)
    {
        if(strncmp(netif_name, netif->name, sizeof(netif->name)) == 0)
  12a0bc:	e51b3008 	ldr	r3, [fp, #-8]
  12a0c0:	e2833042 	add	r3, r3, #66	; 0x42
  12a0c4:	e3a02002 	mov	r2, #2
  12a0c8:	e1a01003 	mov	r1, r3
  12a0cc:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12a0d0:	eb005d9e 	bl	141750 <strncmp>
  12a0d4:	e1a03000 	mov	r3, r0
  12a0d8:	e3530000 	cmp	r3, #0
  12a0dc:	0a00000e 	beq	12a11c <set_if+0xb0>
            break;

        netif = netif->next;
  12a0e0:	e51b3008 	ldr	r3, [fp, #-8]
  12a0e4:	e5933000 	ldr	r3, [r3]
  12a0e8:	e50b3008 	str	r3, [fp, #-8]
        if( netif == RT_NULL )
  12a0ec:	e51b3008 	ldr	r3, [fp, #-8]
  12a0f0:	e3530000 	cmp	r3, #0
  12a0f4:	1a000004 	bne	12a10c <set_if+0xa0>
        {
            rt_kprintf("network interface: %s not found!\r\n", netif_name);
  12a0f8:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  12a0fc:	e3080e68 	movw	r0, #36456	; 0x8e68
  12a100:	e3400014 	movt	r0, #20
  12a104:	ebff6402 	bl	103114 <rt_kprintf>
            return;
  12a108:	ea00002d 	b	12a1c4 <set_if+0x158>
    while(netif != RT_NULL)
  12a10c:	e51b3008 	ldr	r3, [fp, #-8]
  12a110:	e3530000 	cmp	r3, #0
  12a114:	1affffe8 	bne	12a0bc <set_if+0x50>
  12a118:	ea000000 	b	12a120 <set_if+0xb4>
            break;
  12a11c:	e320f000 	nop	{0}
        }
    }

    ip = (ip4_addr_t *)&addr;
  12a120:	e24b3010 	sub	r3, fp, #16
  12a124:	e50b300c 	str	r3, [fp, #-12]

    /* set ip address */
    if ((ip_addr != RT_NULL) && ip4addr_aton(ip_addr, &addr))
  12a128:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12a12c:	e3530000 	cmp	r3, #0
  12a130:	0a000009 	beq	12a15c <set_if+0xf0>
  12a134:	e24b3010 	sub	r3, fp, #16
  12a138:	e1a01003 	mov	r1, r3
  12a13c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  12a140:	eb0021e1 	bl	1328cc <ip4addr_aton>
  12a144:	e1a03000 	mov	r3, r0
  12a148:	e3530000 	cmp	r3, #0
  12a14c:	0a000002 	beq	12a15c <set_if+0xf0>
    {
        netif_set_ipaddr(netif, ip);
  12a150:	e51b100c 	ldr	r1, [fp, #-12]
  12a154:	e51b0008 	ldr	r0, [fp, #-8]
  12a158:	ebffbe10 	bl	1199a0 <netif_set_ipaddr>
    }

    /* set gateway address */
    if ((gw_addr != RT_NULL) && ip4addr_aton(gw_addr, &addr))
  12a15c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12a160:	e3530000 	cmp	r3, #0
  12a164:	0a000009 	beq	12a190 <set_if+0x124>
  12a168:	e24b3010 	sub	r3, fp, #16
  12a16c:	e1a01003 	mov	r1, r3
  12a170:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  12a174:	eb0021d4 	bl	1328cc <ip4addr_aton>
  12a178:	e1a03000 	mov	r3, r0
  12a17c:	e3530000 	cmp	r3, #0
  12a180:	0a000002 	beq	12a190 <set_if+0x124>
    {
        netif_set_gw(netif, ip);
  12a184:	e51b100c 	ldr	r1, [fp, #-12]
  12a188:	e51b0008 	ldr	r0, [fp, #-8]
  12a18c:	ebffbe4a 	bl	119abc <netif_set_gw>
    }

    /* set netmask address */
    if ((nm_addr != RT_NULL) && ip4addr_aton(nm_addr, &addr))
  12a190:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  12a194:	e3530000 	cmp	r3, #0
  12a198:	0a000009 	beq	12a1c4 <set_if+0x158>
  12a19c:	e24b3010 	sub	r3, fp, #16
  12a1a0:	e1a01003 	mov	r1, r3
  12a1a4:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  12a1a8:	eb0021c7 	bl	1328cc <ip4addr_aton>
  12a1ac:	e1a03000 	mov	r3, r0
  12a1b0:	e3530000 	cmp	r3, #0
  12a1b4:	0a000002 	beq	12a1c4 <set_if+0x158>
    {
        netif_set_netmask(netif, ip);
  12a1b8:	e51b100c 	ldr	r1, [fp, #-12]
  12a1bc:	e51b0008 	ldr	r0, [fp, #-8]
  12a1c0:	ebffbe56 	bl	119b20 <netif_set_netmask>
    }
}
  12a1c4:	e24bd004 	sub	sp, fp, #4
  12a1c8:	e8bd8800 	pop	{fp, pc}

0012a1cc <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(struct dhcp *dhcp);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
  12a1cc:	e92d4800 	push	{fp, lr}
  12a1d0:	e28db004 	add	fp, sp, #4
  if (dhcp_pcb_refcount == 0) {
  12a1d4:	e30f3acc 	movw	r3, #64204	; 0xfacc
  12a1d8:	e3403014 	movt	r3, #20
  12a1dc:	e5d33000 	ldrb	r3, [r3]
  12a1e0:	e3530000 	cmp	r3, #0
  12a1e4:	1a000039 	bne	12a2d0 <dhcp_inc_pcb_refcount+0x104>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
  12a1e8:	e30f3ac8 	movw	r3, #64200	; 0xfac8
  12a1ec:	e3403014 	movt	r3, #20
  12a1f0:	e5933000 	ldr	r3, [r3]
  12a1f4:	e3530000 	cmp	r3, #0
  12a1f8:	0a000006 	beq	12a218 <dhcp_inc_pcb_refcount+0x4c>
  12a1fc:	e3080f1c 	movw	r0, #36636	; 0x8f1c
  12a200:	e3400014 	movt	r0, #20
  12a204:	ebff63c2 	bl	103114 <rt_kprintf>
  12a208:	e3a010db 	mov	r1, #219	; 0xdb
  12a20c:	e3080f44 	movw	r0, #36676	; 0x8f44
  12a210:	e3400014 	movt	r0, #20
  12a214:	ebff8392 	bl	10b064 <sys_arch_assert>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
  12a218:	ebfffaa1 	bl	128ca4 <udp_new>
  12a21c:	e1a02000 	mov	r2, r0
  12a220:	e30f3ac8 	movw	r3, #64200	; 0xfac8
  12a224:	e3403014 	movt	r3, #20
  12a228:	e5832000 	str	r2, [r3]

    if (dhcp_pcb == NULL) {
  12a22c:	e30f3ac8 	movw	r3, #64200	; 0xfac8
  12a230:	e3403014 	movt	r3, #20
  12a234:	e5933000 	ldr	r3, [r3]
  12a238:	e3530000 	cmp	r3, #0
  12a23c:	1a000001 	bne	12a248 <dhcp_inc_pcb_refcount+0x7c>
      return ERR_MEM;
  12a240:	e3e03000 	mvn	r3, #0
  12a244:	ea00002a 	b	12a2f4 <dhcp_inc_pcb_refcount+0x128>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
  12a248:	e30f3ac8 	movw	r3, #64200	; 0xfac8
  12a24c:	e3403014 	movt	r3, #20
  12a250:	e5933000 	ldr	r3, [r3]
  12a254:	e5d32008 	ldrb	r2, [r3, #8]
  12a258:	e30f3ac8 	movw	r3, #64200	; 0xfac8
  12a25c:	e3403014 	movt	r3, #20
  12a260:	e5933000 	ldr	r3, [r3]
  12a264:	e3822020 	orr	r2, r2, #32
  12a268:	e6ef2072 	uxtb	r2, r2
  12a26c:	e5c32008 	strb	r2, [r3, #8]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, DHCP_CLIENT_PORT);
  12a270:	e30f3ac8 	movw	r3, #64200	; 0xfac8
  12a274:	e3403014 	movt	r3, #20
  12a278:	e5933000 	ldr	r3, [r3]
  12a27c:	e3a02044 	mov	r2, #68	; 0x44
  12a280:	e3091adc 	movw	r1, #39644	; 0x9adc
  12a284:	e3401014 	movt	r1, #20
  12a288:	e1a00003 	mov	r0, r3
  12a28c:	ebfff969 	bl	128838 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, DHCP_SERVER_PORT);
  12a290:	e30f3ac8 	movw	r3, #64200	; 0xfac8
  12a294:	e3403014 	movt	r3, #20
  12a298:	e5933000 	ldr	r3, [r3]
  12a29c:	e3a02043 	mov	r2, #67	; 0x43
  12a2a0:	e3091adc 	movw	r1, #39644	; 0x9adc
  12a2a4:	e3401014 	movt	r1, #20
  12a2a8:	e1a00003 	mov	r0, r3
  12a2ac:	ebfff9d7 	bl	128a10 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
  12a2b0:	e30f3ac8 	movw	r3, #64200	; 0xfac8
  12a2b4:	e3403014 	movt	r3, #20
  12a2b8:	e5933000 	ldr	r3, [r3]
  12a2bc:	e3a02000 	mov	r2, #0
  12a2c0:	e30c1f34 	movw	r1, #53044	; 0xcf34
  12a2c4:	e3401012 	movt	r1, #18
  12a2c8:	e1a00003 	mov	r0, r3
  12a2cc:	ebfffa33 	bl	128ba0 <udp_recv>
  }

  dhcp_pcb_refcount++;
  12a2d0:	e30f3acc 	movw	r3, #64204	; 0xfacc
  12a2d4:	e3403014 	movt	r3, #20
  12a2d8:	e5d33000 	ldrb	r3, [r3]
  12a2dc:	e2833001 	add	r3, r3, #1
  12a2e0:	e6ef2073 	uxtb	r2, r3
  12a2e4:	e30f3acc 	movw	r3, #64204	; 0xfacc
  12a2e8:	e3403014 	movt	r3, #20
  12a2ec:	e5c32000 	strb	r2, [r3]

  return ERR_OK;
  12a2f0:	e3a03000 	mov	r3, #0
}
  12a2f4:	e1a00003 	mov	r0, r3
  12a2f8:	e8bd8800 	pop	{fp, pc}

0012a2fc <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
  12a2fc:	e92d4800 	push	{fp, lr}
  12a300:	e28db004 	add	fp, sp, #4
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
  12a304:	e30f3acc 	movw	r3, #64204	; 0xfacc
  12a308:	e3403014 	movt	r3, #20
  12a30c:	e5d33000 	ldrb	r3, [r3]
  12a310:	e3530000 	cmp	r3, #0
  12a314:	1a000006 	bne	12a334 <dhcp_dec_pcb_refcount+0x38>
  12a318:	e3080f78 	movw	r0, #36728	; 0x8f78
  12a31c:	e3400014 	movt	r0, #20
  12a320:	ebff637b 	bl	103114 <rt_kprintf>
  12a324:	e3a010f5 	mov	r1, #245	; 0xf5
  12a328:	e3080f44 	movw	r0, #36676	; 0x8f44
  12a32c:	e3400014 	movt	r0, #20
  12a330:	ebff834b 	bl	10b064 <sys_arch_assert>
  dhcp_pcb_refcount--;
  12a334:	e30f3acc 	movw	r3, #64204	; 0xfacc
  12a338:	e3403014 	movt	r3, #20
  12a33c:	e5d33000 	ldrb	r3, [r3]
  12a340:	e2433001 	sub	r3, r3, #1
  12a344:	e6ef2073 	uxtb	r2, r3
  12a348:	e30f3acc 	movw	r3, #64204	; 0xfacc
  12a34c:	e3403014 	movt	r3, #20
  12a350:	e5c32000 	strb	r2, [r3]

  if (dhcp_pcb_refcount == 0) {
  12a354:	e30f3acc 	movw	r3, #64204	; 0xfacc
  12a358:	e3403014 	movt	r3, #20
  12a35c:	e5d33000 	ldrb	r3, [r3]
  12a360:	e3530000 	cmp	r3, #0
  12a364:	1a000008 	bne	12a38c <dhcp_dec_pcb_refcount+0x90>
    udp_remove(dhcp_pcb);
  12a368:	e30f3ac8 	movw	r3, #64200	; 0xfac8
  12a36c:	e3403014 	movt	r3, #20
  12a370:	e5933000 	ldr	r3, [r3]
  12a374:	e1a00003 	mov	r0, r3
  12a378:	ebfffa18 	bl	128be0 <udp_remove>
    dhcp_pcb = NULL;
  12a37c:	e30f3ac8 	movw	r3, #64200	; 0xfac8
  12a380:	e3403014 	movt	r3, #20
  12a384:	e3a02000 	mov	r2, #0
  12a388:	e5832000 	str	r2, [r3]
  }
}
  12a38c:	e320f000 	nop	{0}
  12a390:	e8bd8800 	pop	{fp, pc}

0012a394 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
  12a394:	e92d4800 	push	{fp, lr}
  12a398:	e28db004 	add	fp, sp, #4
  12a39c:	e24dd010 	sub	sp, sp, #16
  12a3a0:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12a3a4:	e51b3010 	ldr	r3, [fp, #-16]
  12a3a8:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a3ac:	e50b3008 	str	r3, [fp, #-8]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
  12a3b0:	e3a0100c 	mov	r1, #12
  12a3b4:	e51b0008 	ldr	r0, [fp, #-8]
  12a3b8:	eb00076b 	bl	12c16c <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
  12a3bc:	e3093adc 	movw	r3, #39644	; 0x9adc
  12a3c0:	e3403014 	movt	r3, #20
  12a3c4:	e3092adc 	movw	r2, #39644	; 0x9adc
  12a3c8:	e3402014 	movt	r2, #20
  12a3cc:	e3091adc 	movw	r1, #39644	; 0x9adc
  12a3d0:	e3401014 	movt	r1, #20
  12a3d4:	e51b0010 	ldr	r0, [fp, #-16]
  12a3d8:	ebffbcc1 	bl	1196e4 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
  12a3dc:	e51b0010 	ldr	r0, [fp, #-16]
  12a3e0:	eb000420 	bl	12b468 <dhcp_discover>
}
  12a3e4:	e320f000 	nop	{0}
  12a3e8:	e24bd004 	sub	sp, fp, #4
  12a3ec:	e8bd8800 	pop	{fp, pc}

0012a3f0 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
  12a3f0:	e92d4800 	push	{fp, lr}
  12a3f4:	e28db004 	add	fp, sp, #4
  12a3f8:	e24dd010 	sub	sp, sp, #16
  12a3fc:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12a400:	e51b3010 	ldr	r3, [fp, #-16]
  12a404:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a408:	e50b3008 	str	r3, [fp, #-8]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
    (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
  12a40c:	e3a01008 	mov	r1, #8
  12a410:	e51b0008 	ldr	r0, [fp, #-8]
  12a414:	eb000754 	bl	12c16c <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
  12a418:	e51b3008 	ldr	r3, [fp, #-8]
  12a41c:	e2833028 	add	r3, r3, #40	; 0x28
  12a420:	e3a02000 	mov	r2, #0
  12a424:	e1a01003 	mov	r1, r3
  12a428:	e51b0010 	ldr	r0, [fp, #-16]
  12a42c:	eb0012a0 	bl	12eeb4 <etharp_query>
  12a430:	e1a03000 	mov	r3, r0
  12a434:	e54b3009 	strb	r3, [fp, #-9]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
  12a438:	e51b3008 	ldr	r3, [fp, #-8]
  12a43c:	e5d3300a 	ldrb	r3, [r3, #10]
  12a440:	e35300ff 	cmp	r3, #255	; 0xff
  12a444:	0a000005 	beq	12a460 <dhcp_check+0x70>
    dhcp->tries++;
  12a448:	e51b3008 	ldr	r3, [fp, #-8]
  12a44c:	e5d3300a 	ldrb	r3, [r3, #10]
  12a450:	e2833001 	add	r3, r3, #1
  12a454:	e6ef2073 	uxtb	r2, r3
  12a458:	e51b3008 	ldr	r3, [fp, #-8]
  12a45c:	e5c3200a 	strb	r2, [r3, #10]
  }
  msecs = 500;
  12a460:	e3a03f7d 	mov	r3, #500	; 0x1f4
  12a464:	e14b30bc 	strh	r3, [fp, #-12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  12a468:	e15b30bc 	ldrh	r3, [fp, #-12]
  12a46c:	e2833e1f 	add	r3, r3, #496	; 0x1f0
  12a470:	e2833003 	add	r3, r3, #3
  12a474:	e3042dd3 	movw	r2, #19923	; 0x4dd3
  12a478:	e3412062 	movt	r2, #4194	; 0x1062
  12a47c:	e0c10293 	smull	r0, r1, r3, r2
  12a480:	e1a022c1 	asr	r2, r1, #5
  12a484:	e1a03fc3 	asr	r3, r3, #31
  12a488:	e0423003 	sub	r3, r2, r3
  12a48c:	e6ff2073 	uxth	r2, r3
  12a490:	e51b3008 	ldr	r3, [fp, #-8]
  12a494:	e1c321b6 	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
  12a498:	e320f000 	nop	{0}
  12a49c:	e24bd004 	sub	sp, fp, #4
  12a4a0:	e8bd8800 	pop	{fp, pc}

0012a4a4 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif)
{
  12a4a4:	e92d4800 	push	{fp, lr}
  12a4a8:	e28db004 	add	fp, sp, #4
  12a4ac:	e24dd010 	sub	sp, sp, #16
  12a4b0:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12a4b4:	e51b3010 	ldr	r3, [fp, #-16]
  12a4b8:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a4bc:	e50b3008 	str	r3, [fp, #-8]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
  12a4c0:	e3063a4c 	movw	r3, #27212	; 0x6a4c
  12a4c4:	e3403057 	movt	r3, #87	; 0x57
  12a4c8:	e5d33002 	ldrb	r3, [r3, #2]
  12a4cc:	e3530000 	cmp	r3, #0
  12a4d0:	0a00000e 	beq	12a510 <dhcp_handle_offer+0x6c>
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
  12a4d4:	e3063a58 	movw	r3, #27224	; 0x6a58
  12a4d8:	e3403057 	movt	r3, #87	; 0x57
  12a4dc:	e5933008 	ldr	r3, [r3, #8]
  12a4e0:	e1a00003 	mov	r0, r3
  12a4e4:	ebffb0c1 	bl	1167f0 <lwip_htonl>
  12a4e8:	e1a02000 	mov	r2, r0
  12a4ec:	e51b3008 	ldr	r3, [fp, #-8]
  12a4f0:	e5832024 	str	r2, [r3, #36]	; 0x24
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
      ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
  12a4f4:	e51b3008 	ldr	r3, [fp, #-8]
  12a4f8:	e5933004 	ldr	r3, [r3, #4]
  12a4fc:	e5932010 	ldr	r2, [r3, #16]
  12a500:	e51b3008 	ldr	r3, [fp, #-8]
  12a504:	e5832028 	str	r2, [r3, #40]	; 0x28
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
      ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
  12a508:	e51b0010 	ldr	r0, [fp, #-16]
  12a50c:	eb000002 	bl	12a51c <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void*)netif));
  }
}
  12a510:	e320f000 	nop	{0}
  12a514:	e24bd004 	sub	sp, fp, #4
  12a518:	e8bd8800 	pop	{fp, pc}

0012a51c <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
  12a51c:	e92d4800 	push	{fp, lr}
  12a520:	e28db004 	add	fp, sp, #4
  12a524:	e24dd020 	sub	sp, sp, #32
  12a528:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12a52c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12a530:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a534:	e50b300c 	str	r3, [fp, #-12]
  err_t result;
  u16_t msecs;
  u8_t i;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
  12a538:	e3a01001 	mov	r1, #1
  12a53c:	e51b000c 	ldr	r0, [fp, #-12]
  12a540:	eb000709 	bl	12c16c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
  12a544:	e3a02003 	mov	r2, #3
  12a548:	e51b100c 	ldr	r1, [fp, #-12]
  12a54c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12a550:	eb000b35 	bl	12d22c <dhcp_create_msg>
  12a554:	e1a03000 	mov	r3, r0
  12a558:	e54b300d 	strb	r3, [fp, #-13]
  if (result == ERR_OK) {
  12a55c:	e15b30dd 	ldrsb	r3, [fp, #-13]
  12a560:	e3530000 	cmp	r3, #0
  12a564:	1a000052 	bne	12a6b4 <dhcp_select+0x198>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
  12a568:	e3a02002 	mov	r2, #2
  12a56c:	e3a01039 	mov	r1, #57	; 0x39
  12a570:	e51b000c 	ldr	r0, [fp, #-12]
  12a574:	eb000714 	bl	12c1cc <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
  12a578:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12a57c:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  12a580:	e1a01003 	mov	r1, r3
  12a584:	e51b000c 	ldr	r0, [fp, #-12]
  12a588:	eb00075e 	bl	12c308 <dhcp_option_short>

    /* MUST request the offered IP address */
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
  12a58c:	e3a02004 	mov	r2, #4
  12a590:	e3a01032 	mov	r1, #50	; 0x32
  12a594:	e51b000c 	ldr	r0, [fp, #-12]
  12a598:	eb00070b 	bl	12c1cc <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
  12a59c:	e51b300c 	ldr	r3, [fp, #-12]
  12a5a0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a5a4:	e1a00003 	mov	r0, r3
  12a5a8:	ebffb090 	bl	1167f0 <lwip_htonl>
  12a5ac:	e1a03000 	mov	r3, r0
  12a5b0:	e1a01003 	mov	r1, r3
  12a5b4:	e51b000c 	ldr	r0, [fp, #-12]
  12a5b8:	eb000783 	bl	12c3cc <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
  12a5bc:	e3a02004 	mov	r2, #4
  12a5c0:	e3a01036 	mov	r1, #54	; 0x36
  12a5c4:	e51b000c 	ldr	r0, [fp, #-12]
  12a5c8:	eb0006ff 	bl	12c1cc <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
  12a5cc:	e51b300c 	ldr	r3, [fp, #-12]
  12a5d0:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  12a5d4:	e1a00003 	mov	r0, r3
  12a5d8:	ebffb084 	bl	1167f0 <lwip_htonl>
  12a5dc:	e1a03000 	mov	r3, r0
  12a5e0:	e1a01003 	mov	r1, r3
  12a5e4:	e51b000c 	ldr	r0, [fp, #-12]
  12a5e8:	eb000777 	bl	12c3cc <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
  12a5ec:	e3a02004 	mov	r2, #4
  12a5f0:	e3a01037 	mov	r1, #55	; 0x37
  12a5f4:	e51b000c 	ldr	r0, [fp, #-12]
  12a5f8:	eb0006f3 	bl	12c1cc <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12a5fc:	e3a03000 	mov	r3, #0
  12a600:	e54b3005 	strb	r3, [fp, #-5]
  12a604:	ea000009 	b	12a630 <dhcp_select+0x114>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
  12a608:	e55b2005 	ldrb	r2, [fp, #-5]
  12a60c:	e30e303c 	movw	r3, #57404	; 0xe03c
  12a610:	e3403014 	movt	r3, #20
  12a614:	e7d33002 	ldrb	r3, [r3, r2]
  12a618:	e1a01003 	mov	r1, r3
  12a61c:	e51b000c 	ldr	r0, [fp, #-12]
  12a620:	eb000719 	bl	12c28c <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12a624:	e55b3005 	ldrb	r3, [fp, #-5]
  12a628:	e2833001 	add	r3, r3, #1
  12a62c:	e54b3005 	strb	r3, [fp, #-5]
  12a630:	e55b3005 	ldrb	r3, [fp, #-5]
  12a634:	e3530003 	cmp	r3, #3
  12a638:	9afffff2 	bls	12a608 <dhcp_select+0xec>
    }

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
  12a63c:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  12a640:	e51b000c 	ldr	r0, [fp, #-12]
  12a644:	eb0007ab 	bl	12c4f8 <dhcp_option_hostname>
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
  12a648:	e51b000c 	ldr	r0, [fp, #-12]
  12a64c:	eb000c63 	bl	12d7e0 <dhcp_option_trailer>
    /* shrink the pbuf to the actual content length */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  12a650:	e51b300c 	ldr	r3, [fp, #-12]
  12a654:	e593200c 	ldr	r2, [r3, #12]
  12a658:	e51b300c 	ldr	r3, [fp, #-12]
  12a65c:	e1d331b4 	ldrh	r3, [r3, #20]
  12a660:	e28330f0 	add	r3, r3, #240	; 0xf0
  12a664:	e6ff3073 	uxth	r3, r3
  12a668:	e1a01003 	mov	r1, r3
  12a66c:	e1a00002 	mov	r0, r2
  12a670:	ebffc140 	bl	11ab78 <pbuf_realloc>

    /* send broadcast to any DHCP server */
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
  12a674:	e30f3ac8 	movw	r3, #64200	; 0xfac8
  12a678:	e3403014 	movt	r3, #20
  12a67c:	e5930000 	ldr	r0, [r3]
  12a680:	e51b300c 	ldr	r3, [fp, #-12]
  12a684:	e593100c 	ldr	r1, [r3, #12]
  12a688:	e3093adc 	movw	r3, #39644	; 0x9adc
  12a68c:	e3403014 	movt	r3, #20
  12a690:	e58d3004 	str	r3, [sp, #4]
  12a694:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12a698:	e58d3000 	str	r3, [sp]
  12a69c:	e3a03043 	mov	r3, #67	; 0x43
  12a6a0:	e3092ae0 	movw	r2, #39648	; 0x9ae0
  12a6a4:	e3402014 	movt	r2, #20
  12a6a8:	ebfff791 	bl	1284f4 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
  12a6ac:	e51b000c 	ldr	r0, [fp, #-12]
  12a6b0:	eb000c15 	bl	12d70c <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
  12a6b4:	e51b300c 	ldr	r3, [fp, #-12]
  12a6b8:	e5d3300a 	ldrb	r3, [r3, #10]
  12a6bc:	e35300ff 	cmp	r3, #255	; 0xff
  12a6c0:	0a000005 	beq	12a6dc <dhcp_select+0x1c0>
    dhcp->tries++;
  12a6c4:	e51b300c 	ldr	r3, [fp, #-12]
  12a6c8:	e5d3300a 	ldrb	r3, [r3, #10]
  12a6cc:	e2833001 	add	r3, r3, #1
  12a6d0:	e6ef2073 	uxtb	r2, r3
  12a6d4:	e51b300c 	ldr	r3, [fp, #-12]
  12a6d8:	e5c3200a 	strb	r2, [r3, #10]
  }
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
  12a6dc:	e51b300c 	ldr	r3, [fp, #-12]
  12a6e0:	e5d3300a 	ldrb	r3, [r3, #10]
  12a6e4:	e3530005 	cmp	r3, #5
  12a6e8:	8a000006 	bhi	12a708 <dhcp_select+0x1ec>
  12a6ec:	e51b300c 	ldr	r3, [fp, #-12]
  12a6f0:	e5d3300a 	ldrb	r3, [r3, #10]
  12a6f4:	e1a02003 	mov	r2, r3
  12a6f8:	e3a03ffa 	mov	r3, #1000	; 0x3e8
  12a6fc:	e1a03213 	lsl	r3, r3, r2
  12a700:	e6ff3073 	uxth	r3, r3
  12a704:	ea000000 	b	12a70c <dhcp_select+0x1f0>
  12a708:	e30e3a60 	movw	r3, #60000	; 0xea60
  12a70c:	e14b31b0 	strh	r3, [fp, #-16]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  12a710:	e15b31b0 	ldrh	r3, [fp, #-16]
  12a714:	e2833e1f 	add	r3, r3, #496	; 0x1f0
  12a718:	e2833003 	add	r3, r3, #3
  12a71c:	e3042dd3 	movw	r2, #19923	; 0x4dd3
  12a720:	e3412062 	movt	r2, #4194	; 0x1062
  12a724:	e0c10293 	smull	r0, r1, r3, r2
  12a728:	e1a022c1 	asr	r2, r1, #5
  12a72c:	e1a03fc3 	asr	r3, r3, #31
  12a730:	e0423003 	sub	r3, r2, r3
  12a734:	e6ff2073 	uxth	r2, r3
  12a738:	e51b300c 	ldr	r3, [fp, #-12]
  12a73c:	e1c321b6 	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
  12a740:	e15b30dd 	ldrsb	r3, [fp, #-13]
}
  12a744:	e1a00003 	mov	r0, r3
  12a748:	e24bd004 	sub	sp, fp, #4
  12a74c:	e8bd8800 	pop	{fp, pc}

0012a750 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
  12a750:	e92d4800 	push	{fp, lr}
  12a754:	e28db004 	add	fp, sp, #4
  12a758:	e24dd008 	sub	sp, sp, #8
  struct netif *netif = netif_list;
  12a75c:	e3063834 	movw	r3, #26676	; 0x6834
  12a760:	e3403057 	movt	r3, #87	; 0x57
  12a764:	e5933000 	ldr	r3, [r3]
  12a768:	e50b3008 	str	r3, [fp, #-8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  while (netif != NULL) {
  12a76c:	ea00003e 	b	12a86c <dhcp_coarse_tmr+0x11c>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
  12a770:	e51b3008 	ldr	r3, [fp, #-8]
  12a774:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a778:	e50b300c 	str	r3, [fp, #-12]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
  12a77c:	e51b300c 	ldr	r3, [fp, #-12]
  12a780:	e3530000 	cmp	r3, #0
  12a784:	0a000035 	beq	12a860 <dhcp_coarse_tmr+0x110>
  12a788:	e51b300c 	ldr	r3, [fp, #-12]
  12a78c:	e5d33009 	ldrb	r3, [r3, #9]
  12a790:	e3530000 	cmp	r3, #0
  12a794:	0a000031 	beq	12a860 <dhcp_coarse_tmr+0x110>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
  12a798:	e51b300c 	ldr	r3, [fp, #-12]
  12a79c:	e1d332b2 	ldrh	r3, [r3, #34]	; 0x22
  12a7a0:	e3530000 	cmp	r3, #0
  12a7a4:	0a000010 	beq	12a7ec <dhcp_coarse_tmr+0x9c>
  12a7a8:	e51b300c 	ldr	r3, [fp, #-12]
  12a7ac:	e1d332b0 	ldrh	r3, [r3, #32]
  12a7b0:	e2833001 	add	r3, r3, #1
  12a7b4:	e6ff2073 	uxth	r2, r3
  12a7b8:	e51b300c 	ldr	r3, [fp, #-12]
  12a7bc:	e1c322b0 	strh	r2, [r3, #32]
  12a7c0:	e51b300c 	ldr	r3, [fp, #-12]
  12a7c4:	e1d322b0 	ldrh	r2, [r3, #32]
  12a7c8:	e51b300c 	ldr	r3, [fp, #-12]
  12a7cc:	e1d332b2 	ldrh	r3, [r3, #34]	; 0x22
  12a7d0:	e1520003 	cmp	r2, r3
  12a7d4:	1a000004 	bne	12a7ec <dhcp_coarse_tmr+0x9c>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release(netif);
  12a7d8:	e51b0008 	ldr	r0, [fp, #-8]
  12a7dc:	eb0005bd 	bl	12bed8 <dhcp_release>
        dhcp_discover(netif);
  12a7e0:	e51b0008 	ldr	r0, [fp, #-8]
  12a7e4:	eb00031f 	bl	12b468 <dhcp_discover>
  12a7e8:	ea00001c 	b	12a860 <dhcp_coarse_tmr+0x110>
      /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
  12a7ec:	e51b300c 	ldr	r3, [fp, #-12]
  12a7f0:	e1d331be 	ldrh	r3, [r3, #30]
  12a7f4:	e3530000 	cmp	r3, #0
  12a7f8:	0a00000a 	beq	12a828 <dhcp_coarse_tmr+0xd8>
  12a7fc:	e51b300c 	ldr	r3, [fp, #-12]
  12a800:	e1d331be 	ldrh	r3, [r3, #30]
  12a804:	e2432001 	sub	r2, r3, #1
  12a808:	e6ff1072 	uxth	r1, r2
  12a80c:	e51b200c 	ldr	r2, [fp, #-12]
  12a810:	e1c211be 	strh	r1, [r2, #30]
  12a814:	e3530001 	cmp	r3, #1
  12a818:	1a000002 	bne	12a828 <dhcp_coarse_tmr+0xd8>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
  12a81c:	e51b0008 	ldr	r0, [fp, #-8]
  12a820:	eb0000b1 	bl	12aaec <dhcp_t2_timeout>
  12a824:	ea00000d 	b	12a860 <dhcp_coarse_tmr+0x110>
      /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
  12a828:	e51b300c 	ldr	r3, [fp, #-12]
  12a82c:	e1d331bc 	ldrh	r3, [r3, #28]
  12a830:	e3530000 	cmp	r3, #0
  12a834:	0a000009 	beq	12a860 <dhcp_coarse_tmr+0x110>
  12a838:	e51b300c 	ldr	r3, [fp, #-12]
  12a83c:	e1d331bc 	ldrh	r3, [r3, #28]
  12a840:	e2432001 	sub	r2, r3, #1
  12a844:	e6ff1072 	uxth	r1, r2
  12a848:	e51b200c 	ldr	r2, [fp, #-12]
  12a84c:	e1c211bc 	strh	r1, [r2, #28]
  12a850:	e3530001 	cmp	r3, #1
  12a854:	1a000001 	bne	12a860 <dhcp_coarse_tmr+0x110>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
  12a858:	e51b0008 	ldr	r0, [fp, #-8]
  12a85c:	eb000076 	bl	12aa3c <dhcp_t1_timeout>
      }
    }
    /* proceed to next netif */
    netif = netif->next;
  12a860:	e51b3008 	ldr	r3, [fp, #-8]
  12a864:	e5933000 	ldr	r3, [r3]
  12a868:	e50b3008 	str	r3, [fp, #-8]
  while (netif != NULL) {
  12a86c:	e51b3008 	ldr	r3, [fp, #-8]
  12a870:	e3530000 	cmp	r3, #0
  12a874:	1affffbd 	bne	12a770 <dhcp_coarse_tmr+0x20>
  }
}
  12a878:	e320f000 	nop	{0}
  12a87c:	e24bd004 	sub	sp, fp, #4
  12a880:	e8bd8800 	pop	{fp, pc}

0012a884 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
  12a884:	e92d4800 	push	{fp, lr}
  12a888:	e28db004 	add	fp, sp, #4
  12a88c:	e24dd008 	sub	sp, sp, #8
  struct netif *netif = netif_list;
  12a890:	e3063834 	movw	r3, #26676	; 0x6834
  12a894:	e3403057 	movt	r3, #87	; 0x57
  12a898:	e5933000 	ldr	r3, [r3]
  12a89c:	e50b3008 	str	r3, [fp, #-8]
  /* loop through netif's */
  while (netif != NULL) {
  12a8a0:	ea00001f 	b	12a924 <dhcp_fine_tmr+0xa0>
    struct dhcp *dhcp = netif_dhcp_data(netif);
  12a8a4:	e51b3008 	ldr	r3, [fp, #-8]
  12a8a8:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a8ac:	e50b300c 	str	r3, [fp, #-12]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
  12a8b0:	e51b300c 	ldr	r3, [fp, #-12]
  12a8b4:	e3530000 	cmp	r3, #0
  12a8b8:	0a000016 	beq	12a918 <dhcp_fine_tmr+0x94>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
  12a8bc:	e51b300c 	ldr	r3, [fp, #-12]
  12a8c0:	e1d331b6 	ldrh	r3, [r3, #22]
  12a8c4:	e3530001 	cmp	r3, #1
  12a8c8:	9a000006 	bls	12a8e8 <dhcp_fine_tmr+0x64>
        dhcp->request_timeout--;
  12a8cc:	e51b300c 	ldr	r3, [fp, #-12]
  12a8d0:	e1d331b6 	ldrh	r3, [r3, #22]
  12a8d4:	e2433001 	sub	r3, r3, #1
  12a8d8:	e6ff2073 	uxth	r2, r3
  12a8dc:	e51b300c 	ldr	r3, [fp, #-12]
  12a8e0:	e1c321b6 	strh	r2, [r3, #22]
  12a8e4:	ea00000b 	b	12a918 <dhcp_fine_tmr+0x94>
      }
      else if (dhcp->request_timeout == 1) {
  12a8e8:	e51b300c 	ldr	r3, [fp, #-12]
  12a8ec:	e1d331b6 	ldrh	r3, [r3, #22]
  12a8f0:	e3530001 	cmp	r3, #1
  12a8f4:	1a000007 	bne	12a918 <dhcp_fine_tmr+0x94>
        dhcp->request_timeout--;
  12a8f8:	e51b300c 	ldr	r3, [fp, #-12]
  12a8fc:	e1d331b6 	ldrh	r3, [r3, #22]
  12a900:	e2433001 	sub	r3, r3, #1
  12a904:	e6ff2073 	uxth	r2, r3
  12a908:	e51b300c 	ldr	r3, [fp, #-12]
  12a90c:	e1c321b6 	strh	r2, [r3, #22]
        /* { netif->dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
  12a910:	e51b0008 	ldr	r0, [fp, #-8]
  12a914:	eb000008 	bl	12a93c <dhcp_timeout>
      }
    }
    /* proceed to next network interface */
    netif = netif->next;
  12a918:	e51b3008 	ldr	r3, [fp, #-8]
  12a91c:	e5933000 	ldr	r3, [r3]
  12a920:	e50b3008 	str	r3, [fp, #-8]
  while (netif != NULL) {
  12a924:	e51b3008 	ldr	r3, [fp, #-8]
  12a928:	e3530000 	cmp	r3, #0
  12a92c:	1affffdc 	bne	12a8a4 <dhcp_fine_tmr+0x20>
  }
}
  12a930:	e320f000 	nop	{0}
  12a934:	e24bd004 	sub	sp, fp, #4
  12a938:	e8bd8800 	pop	{fp, pc}

0012a93c <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
  12a93c:	e92d4800 	push	{fp, lr}
  12a940:	e28db004 	add	fp, sp, #4
  12a944:	e24dd010 	sub	sp, sp, #16
  12a948:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12a94c:	e51b3010 	ldr	r3, [fp, #-16]
  12a950:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12a954:	e50b3008 	str	r3, [fp, #-8]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
  12a958:	e51b3008 	ldr	r3, [fp, #-8]
  12a95c:	e5d33009 	ldrb	r3, [r3, #9]
  12a960:	e353000c 	cmp	r3, #12
  12a964:	0a000003 	beq	12a978 <dhcp_timeout+0x3c>
  12a968:	e51b3008 	ldr	r3, [fp, #-8]
  12a96c:	e5d33009 	ldrb	r3, [r3, #9]
  12a970:	e3530006 	cmp	r3, #6
  12a974:	1a000002 	bne	12a984 <dhcp_timeout+0x48>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
  12a978:	e51b0010 	ldr	r0, [fp, #-16]
  12a97c:	eb0002b9 	bl	12b468 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
  12a980:	ea00002a 	b	12aa30 <dhcp_timeout+0xf4>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
  12a984:	e51b3008 	ldr	r3, [fp, #-8]
  12a988:	e5d33009 	ldrb	r3, [r3, #9]
  12a98c:	e3530001 	cmp	r3, #1
  12a990:	1a00000b 	bne	12a9c4 <dhcp_timeout+0x88>
    if (dhcp->tries <= 5) {
  12a994:	e51b3008 	ldr	r3, [fp, #-8]
  12a998:	e5d3300a 	ldrb	r3, [r3, #10]
  12a99c:	e3530005 	cmp	r3, #5
  12a9a0:	8a000002 	bhi	12a9b0 <dhcp_timeout+0x74>
      dhcp_select(netif);
  12a9a4:	e51b0010 	ldr	r0, [fp, #-16]
  12a9a8:	ebfffedb 	bl	12a51c <dhcp_select>
}
  12a9ac:	ea00001f 	b	12aa30 <dhcp_timeout+0xf4>
      dhcp_release(netif);
  12a9b0:	e51b0010 	ldr	r0, [fp, #-16]
  12a9b4:	eb000547 	bl	12bed8 <dhcp_release>
      dhcp_discover(netif);
  12a9b8:	e51b0010 	ldr	r0, [fp, #-16]
  12a9bc:	eb0002a9 	bl	12b468 <dhcp_discover>
}
  12a9c0:	ea00001a 	b	12aa30 <dhcp_timeout+0xf4>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
  12a9c4:	e51b3008 	ldr	r3, [fp, #-8]
  12a9c8:	e5d33009 	ldrb	r3, [r3, #9]
  12a9cc:	e3530008 	cmp	r3, #8
  12a9d0:	1a000009 	bne	12a9fc <dhcp_timeout+0xc0>
    if (dhcp->tries <= 1) {
  12a9d4:	e51b3008 	ldr	r3, [fp, #-8]
  12a9d8:	e5d3300a 	ldrb	r3, [r3, #10]
  12a9dc:	e3530001 	cmp	r3, #1
  12a9e0:	8a000002 	bhi	12a9f0 <dhcp_timeout+0xb4>
      dhcp_check(netif);
  12a9e4:	e51b0010 	ldr	r0, [fp, #-16]
  12a9e8:	ebfffe80 	bl	12a3f0 <dhcp_check>
}
  12a9ec:	ea00000f 	b	12aa30 <dhcp_timeout+0xf4>
      dhcp_bind(netif);
  12a9f0:	e51b0010 	ldr	r0, [fp, #-16]
  12a9f4:	eb000312 	bl	12b644 <dhcp_bind>
}
  12a9f8:	ea00000c 	b	12aa30 <dhcp_timeout+0xf4>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
  12a9fc:	e51b3008 	ldr	r3, [fp, #-8]
  12aa00:	e5d33009 	ldrb	r3, [r3, #9]
  12aa04:	e3530003 	cmp	r3, #3
  12aa08:	1a000008 	bne	12aa30 <dhcp_timeout+0xf4>
    if (dhcp->tries < REBOOT_TRIES) {
  12aa0c:	e51b3008 	ldr	r3, [fp, #-8]
  12aa10:	e5d3300a 	ldrb	r3, [r3, #10]
  12aa14:	e3530001 	cmp	r3, #1
  12aa18:	8a000002 	bhi	12aa28 <dhcp_timeout+0xec>
      dhcp_reboot(netif);
  12aa1c:	e51b0010 	ldr	r0, [fp, #-16]
  12aa20:	eb0004af 	bl	12bce4 <dhcp_reboot>
}
  12aa24:	ea000001 	b	12aa30 <dhcp_timeout+0xf4>
      dhcp_discover(netif);
  12aa28:	e51b0010 	ldr	r0, [fp, #-16]
  12aa2c:	eb00028d 	bl	12b468 <dhcp_discover>
}
  12aa30:	e320f000 	nop	{0}
  12aa34:	e24bd004 	sub	sp, fp, #4
  12aa38:	e8bd8800 	pop	{fp, pc}

0012aa3c <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
  12aa3c:	e92d4800 	push	{fp, lr}
  12aa40:	e28db004 	add	fp, sp, #4
  12aa44:	e24dd010 	sub	sp, sp, #16
  12aa48:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12aa4c:	e51b3010 	ldr	r3, [fp, #-16]
  12aa50:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12aa54:	e50b3008 	str	r3, [fp, #-8]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
  12aa58:	e51b3008 	ldr	r3, [fp, #-8]
  12aa5c:	e5d33009 	ldrb	r3, [r3, #9]
  12aa60:	e3530001 	cmp	r3, #1
  12aa64:	0a000007 	beq	12aa88 <dhcp_t1_timeout+0x4c>
  12aa68:	e51b3008 	ldr	r3, [fp, #-8]
  12aa6c:	e5d33009 	ldrb	r3, [r3, #9]
  12aa70:	e353000a 	cmp	r3, #10
  12aa74:	0a000003 	beq	12aa88 <dhcp_t1_timeout+0x4c>
      (dhcp->state == DHCP_STATE_RENEWING)) {
  12aa78:	e51b3008 	ldr	r3, [fp, #-8]
  12aa7c:	e5d33009 	ldrb	r3, [r3, #9]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
  12aa80:	e3530005 	cmp	r3, #5
  12aa84:	1a000015 	bne	12aae0 <dhcp_t1_timeout+0xa4>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
  12aa88:	e51b0010 	ldr	r0, [fp, #-16]
  12aa8c:	eb0003a8 	bl	12b934 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
  12aa90:	e51b3008 	ldr	r3, [fp, #-8]
  12aa94:	e1d331ba 	ldrh	r3, [r3, #26]
  12aa98:	e1a02003 	mov	r2, r3
  12aa9c:	e51b3008 	ldr	r3, [fp, #-8]
  12aaa0:	e1d332b0 	ldrh	r3, [r3, #32]
  12aaa4:	e0423003 	sub	r3, r2, r3
  12aaa8:	e3530001 	cmp	r3, #1
  12aaac:	da00000b 	ble	12aae0 <dhcp_t1_timeout+0xa4>
    {
       dhcp->t1_renew_time = ((dhcp->t2_timeout - dhcp->lease_used) / 2);
  12aab0:	e51b3008 	ldr	r3, [fp, #-8]
  12aab4:	e1d331ba 	ldrh	r3, [r3, #26]
  12aab8:	e1a02003 	mov	r2, r3
  12aabc:	e51b3008 	ldr	r3, [fp, #-8]
  12aac0:	e1d332b0 	ldrh	r3, [r3, #32]
  12aac4:	e0423003 	sub	r3, r2, r3
  12aac8:	e1a02fa3 	lsr	r2, r3, #31
  12aacc:	e0823003 	add	r3, r2, r3
  12aad0:	e1a030c3 	asr	r3, r3, #1
  12aad4:	e6ff2073 	uxth	r2, r3
  12aad8:	e51b3008 	ldr	r3, [fp, #-8]
  12aadc:	e1c321bc 	strh	r2, [r3, #28]
    }
  }
}
  12aae0:	e320f000 	nop	{0}
  12aae4:	e24bd004 	sub	sp, fp, #4
  12aae8:	e8bd8800 	pop	{fp, pc}

0012aaec <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
  12aaec:	e92d4800 	push	{fp, lr}
  12aaf0:	e28db004 	add	fp, sp, #4
  12aaf4:	e24dd010 	sub	sp, sp, #16
  12aaf8:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12aafc:	e51b3010 	ldr	r3, [fp, #-16]
  12ab00:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12ab04:	e50b3008 	str	r3, [fp, #-8]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
  12ab08:	e51b3008 	ldr	r3, [fp, #-8]
  12ab0c:	e5d33009 	ldrb	r3, [r3, #9]
  12ab10:	e3530001 	cmp	r3, #1
  12ab14:	0a00000b 	beq	12ab48 <dhcp_t2_timeout+0x5c>
  12ab18:	e51b3008 	ldr	r3, [fp, #-8]
  12ab1c:	e5d33009 	ldrb	r3, [r3, #9]
  12ab20:	e353000a 	cmp	r3, #10
  12ab24:	0a000007 	beq	12ab48 <dhcp_t2_timeout+0x5c>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
  12ab28:	e51b3008 	ldr	r3, [fp, #-8]
  12ab2c:	e5d33009 	ldrb	r3, [r3, #9]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
  12ab30:	e3530005 	cmp	r3, #5
  12ab34:	0a000003 	beq	12ab48 <dhcp_t2_timeout+0x5c>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
  12ab38:	e51b3008 	ldr	r3, [fp, #-8]
  12ab3c:	e5d33009 	ldrb	r3, [r3, #9]
  12ab40:	e3530004 	cmp	r3, #4
  12ab44:	1a000015 	bne	12aba0 <dhcp_t2_timeout+0xb4>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
  12ab48:	e51b0010 	ldr	r0, [fp, #-16]
  12ab4c:	eb0003ee 	bl	12bb0c <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
  12ab50:	e51b3008 	ldr	r3, [fp, #-8]
  12ab54:	e1d332b2 	ldrh	r3, [r3, #34]	; 0x22
  12ab58:	e1a02003 	mov	r2, r3
  12ab5c:	e51b3008 	ldr	r3, [fp, #-8]
  12ab60:	e1d332b0 	ldrh	r3, [r3, #32]
  12ab64:	e0423003 	sub	r3, r2, r3
  12ab68:	e3530001 	cmp	r3, #1
  12ab6c:	da00000b 	ble	12aba0 <dhcp_t2_timeout+0xb4>
    {
       dhcp->t2_rebind_time = ((dhcp->t0_timeout - dhcp->lease_used) / 2);
  12ab70:	e51b3008 	ldr	r3, [fp, #-8]
  12ab74:	e1d332b2 	ldrh	r3, [r3, #34]	; 0x22
  12ab78:	e1a02003 	mov	r2, r3
  12ab7c:	e51b3008 	ldr	r3, [fp, #-8]
  12ab80:	e1d332b0 	ldrh	r3, [r3, #32]
  12ab84:	e0423003 	sub	r3, r2, r3
  12ab88:	e1a02fa3 	lsr	r2, r3, #31
  12ab8c:	e0823003 	add	r3, r2, r3
  12ab90:	e1a030c3 	asr	r3, r3, #1
  12ab94:	e6ff2073 	uxth	r2, r3
  12ab98:	e51b3008 	ldr	r3, [fp, #-8]
  12ab9c:	e1c321be 	strh	r2, [r3, #30]
    }
  }
}
  12aba0:	e320f000 	nop	{0}
  12aba4:	e24bd004 	sub	sp, fp, #4
  12aba8:	e8bd8800 	pop	{fp, pc}

0012abac <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif)
{
  12abac:	e92d4800 	push	{fp, lr}
  12abb0:	e28db004 	add	fp, sp, #4
  12abb4:	e24dd018 	sub	sp, sp, #24
  12abb8:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12abbc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12abc0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12abc4:	e50b300c 	str	r3, [fp, #-12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
  12abc8:	e51b300c 	ldr	r3, [fp, #-12]
  12abcc:	e3a02000 	mov	r2, #0
  12abd0:	e583202c 	str	r2, [r3, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
  12abd4:	e51b300c 	ldr	r3, [fp, #-12]
  12abd8:	e3a02000 	mov	r2, #0
  12abdc:	e5832030 	str	r2, [r3, #48]	; 0x30
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
  12abe0:	e3063a4c 	movw	r3, #27212	; 0x6a4c
  12abe4:	e3403057 	movt	r3, #87	; 0x57
  12abe8:	e5d33003 	ldrb	r3, [r3, #3]
  12abec:	e3530000 	cmp	r3, #0
  12abf0:	0a000004 	beq	12ac08 <dhcp_handle_ack+0x5c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
  12abf4:	e3063a58 	movw	r3, #27224	; 0x6a58
  12abf8:	e3403057 	movt	r3, #87	; 0x57
  12abfc:	e593200c 	ldr	r2, [r3, #12]
  12ac00:	e51b300c 	ldr	r3, [fp, #-12]
  12ac04:	e5832034 	str	r2, [r3, #52]	; 0x34
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
  12ac08:	e3063a4c 	movw	r3, #27212	; 0x6a4c
  12ac0c:	e3403057 	movt	r3, #87	; 0x57
  12ac10:	e5d33004 	ldrb	r3, [r3, #4]
  12ac14:	e3530000 	cmp	r3, #0
  12ac18:	0a000005 	beq	12ac34 <dhcp_handle_ack+0x88>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
  12ac1c:	e3063a58 	movw	r3, #27224	; 0x6a58
  12ac20:	e3403057 	movt	r3, #87	; 0x57
  12ac24:	e5932010 	ldr	r2, [r3, #16]
  12ac28:	e51b300c 	ldr	r3, [fp, #-12]
  12ac2c:	e5832038 	str	r2, [r3, #56]	; 0x38
  12ac30:	ea000004 	b	12ac48 <dhcp_handle_ack+0x9c>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
  12ac34:	e51b300c 	ldr	r3, [fp, #-12]
  12ac38:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  12ac3c:	e1a020a3 	lsr	r2, r3, #1
  12ac40:	e51b300c 	ldr	r3, [fp, #-12]
  12ac44:	e5832038 	str	r2, [r3, #56]	; 0x38
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
  12ac48:	e3063a4c 	movw	r3, #27212	; 0x6a4c
  12ac4c:	e3403057 	movt	r3, #87	; 0x57
  12ac50:	e5d33005 	ldrb	r3, [r3, #5]
  12ac54:	e3530000 	cmp	r3, #0
  12ac58:	0a000005 	beq	12ac74 <dhcp_handle_ack+0xc8>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
  12ac5c:	e3063a58 	movw	r3, #27224	; 0x6a58
  12ac60:	e3403057 	movt	r3, #87	; 0x57
  12ac64:	e5932014 	ldr	r2, [r3, #20]
  12ac68:	e51b300c 	ldr	r3, [fp, #-12]
  12ac6c:	e583203c 	str	r2, [r3, #60]	; 0x3c
  12ac70:	ea000007 	b	12ac94 <dhcp_handle_ack+0xe8>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
  12ac74:	e51b300c 	ldr	r3, [fp, #-12]
  12ac78:	e5932034 	ldr	r2, [r3, #52]	; 0x34
  12ac7c:	e1a03002 	mov	r3, r2
  12ac80:	e1a03183 	lsl	r3, r3, #3
  12ac84:	e0433002 	sub	r3, r3, r2
  12ac88:	e1a021a3 	lsr	r2, r3, #3
  12ac8c:	e51b300c 	ldr	r3, [fp, #-12]
  12ac90:	e583203c 	str	r2, [r3, #60]	; 0x3c
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
  12ac94:	e51b300c 	ldr	r3, [fp, #-12]
  12ac98:	e5933004 	ldr	r3, [r3, #4]
  12ac9c:	e5932010 	ldr	r2, [r3, #16]
  12aca0:	e51b300c 	ldr	r3, [fp, #-12]
  12aca4:	e5832028 	str	r2, [r3, #40]	; 0x28
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, dhcp->msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
  12aca8:	e3063a4c 	movw	r3, #27212	; 0x6a4c
  12acac:	e3403057 	movt	r3, #87	; 0x57
  12acb0:	e5d33006 	ldrb	r3, [r3, #6]
  12acb4:	e3530000 	cmp	r3, #0
  12acb8:	0a00000b 	beq	12acec <dhcp_handle_ack+0x140>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
  12acbc:	e3063a58 	movw	r3, #27224	; 0x6a58
  12acc0:	e3403057 	movt	r3, #87	; 0x57
  12acc4:	e5933018 	ldr	r3, [r3, #24]
  12acc8:	e1a00003 	mov	r0, r3
  12accc:	ebffaec7 	bl	1167f0 <lwip_htonl>
  12acd0:	e1a02000 	mov	r2, r0
  12acd4:	e51b300c 	ldr	r3, [fp, #-12]
  12acd8:	e583202c 	str	r2, [r3, #44]	; 0x2c
    dhcp->subnet_mask_given = 1;
  12acdc:	e51b300c 	ldr	r3, [fp, #-12]
  12ace0:	e3a02001 	mov	r2, #1
  12ace4:	e5c3200b 	strb	r2, [r3, #11]
  12ace8:	ea000002 	b	12acf8 <dhcp_handle_ack+0x14c>
  } else {
    dhcp->subnet_mask_given = 0;
  12acec:	e51b300c 	ldr	r3, [fp, #-12]
  12acf0:	e3a02000 	mov	r2, #0
  12acf4:	e5c3200b 	strb	r2, [r3, #11]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
  12acf8:	e3063a4c 	movw	r3, #27212	; 0x6a4c
  12acfc:	e3403057 	movt	r3, #87	; 0x57
  12ad00:	e5d33007 	ldrb	r3, [r3, #7]
  12ad04:	e3530000 	cmp	r3, #0
  12ad08:	0a000007 	beq	12ad2c <dhcp_handle_ack+0x180>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
  12ad0c:	e3063a58 	movw	r3, #27224	; 0x6a58
  12ad10:	e3403057 	movt	r3, #87	; 0x57
  12ad14:	e593301c 	ldr	r3, [r3, #28]
  12ad18:	e1a00003 	mov	r0, r3
  12ad1c:	ebffaeb3 	bl	1167f0 <lwip_htonl>
  12ad20:	e1a02000 	mov	r2, r0
  12ad24:	e51b300c 	ldr	r3, [fp, #-12]
  12ad28:	e5832030 	str	r2, [r3, #48]	; 0x30
  dhcp_set_ntp_servers(n, ntp_server_addrs);
#endif /* LWIP_DHCP_GET_NTP_SRV */

#if LWIP_DHCP_PROVIDE_DNS_SERVERS
  /* DNS servers */
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
  12ad2c:	e3a03000 	mov	r3, #0
  12ad30:	e54b3005 	strb	r3, [fp, #-5]
  12ad34:	ea000010 	b	12ad7c <dhcp_handle_ack+0x1d0>
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32(&dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
  12ad38:	e55b3005 	ldrb	r3, [fp, #-5]
  12ad3c:	e2832008 	add	r2, r3, #8
  12ad40:	e3063a58 	movw	r3, #27224	; 0x6a58
  12ad44:	e3403057 	movt	r3, #87	; 0x57
  12ad48:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  12ad4c:	e1a00003 	mov	r0, r3
  12ad50:	ebffaea6 	bl	1167f0 <lwip_htonl>
  12ad54:	e1a03000 	mov	r3, r0
  12ad58:	e50b3010 	str	r3, [fp, #-16]
    dns_setserver(n, &dns_addr);
  12ad5c:	e24b2010 	sub	r2, fp, #16
  12ad60:	e55b3005 	ldrb	r3, [fp, #-5]
  12ad64:	e1a01002 	mov	r1, r2
  12ad68:	e1a00003 	mov	r0, r3
  12ad6c:	ebffaf99 	bl	116bd8 <dns_setserver>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
  12ad70:	e55b3005 	ldrb	r3, [fp, #-5]
  12ad74:	e2833001 	add	r3, r3, #1
  12ad78:	e54b3005 	strb	r3, [fp, #-5]
  12ad7c:	e55b3005 	ldrb	r3, [fp, #-5]
  12ad80:	e3530001 	cmp	r3, #1
  12ad84:	8a000006 	bhi	12ada4 <dhcp_handle_ack+0x1f8>
  12ad88:	e55b3005 	ldrb	r3, [fp, #-5]
  12ad8c:	e2832008 	add	r2, r3, #8
  12ad90:	e3063a4c 	movw	r3, #27212	; 0x6a4c
  12ad94:	e3403057 	movt	r3, #87	; 0x57
  12ad98:	e7d33002 	ldrb	r3, [r3, r2]
  12ad9c:	e3530000 	cmp	r3, #0
  12ada0:	1affffe4 	bne	12ad38 <dhcp_handle_ack+0x18c>
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
  12ada4:	e320f000 	nop	{0}
  12ada8:	e24bd004 	sub	sp, fp, #4
  12adac:	e8bd8800 	pop	{fp, pc}

0012adb0 <dhcp_set_struct>:
 * @param netif the netif for which to set the struct dhcp
 * @param dhcp (uninitialised) dhcp struct allocated by the application
 */
void
dhcp_set_struct(struct netif *netif, struct dhcp *dhcp)
{
  12adb0:	e92d4800 	push	{fp, lr}
  12adb4:	e28db004 	add	fp, sp, #4
  12adb8:	e24dd008 	sub	sp, sp, #8
  12adbc:	e50b0008 	str	r0, [fp, #-8]
  12adc0:	e50b100c 	str	r1, [fp, #-12]
  LWIP_ASSERT("netif != NULL", netif != NULL);
  12adc4:	e51b3008 	ldr	r3, [fp, #-8]
  12adc8:	e3530000 	cmp	r3, #0
  12adcc:	1a000006 	bne	12adec <dhcp_set_struct+0x3c>
  12add0:	e3080f9c 	movw	r0, #36764	; 0x8f9c
  12add4:	e3400014 	movt	r0, #20
  12add8:	ebff60cd 	bl	103114 <rt_kprintf>
  12addc:	e3a01faa 	mov	r1, #680	; 0x2a8
  12ade0:	e3080f44 	movw	r0, #36676	; 0x8f44
  12ade4:	e3400014 	movt	r0, #20
  12ade8:	ebff809d 	bl	10b064 <sys_arch_assert>
  LWIP_ASSERT("dhcp != NULL", dhcp != NULL);
  12adec:	e51b300c 	ldr	r3, [fp, #-12]
  12adf0:	e3530000 	cmp	r3, #0
  12adf4:	1a000006 	bne	12ae14 <dhcp_set_struct+0x64>
  12adf8:	e3080fac 	movw	r0, #36780	; 0x8fac
  12adfc:	e3400014 	movt	r0, #20
  12ae00:	ebff60c3 	bl	103114 <rt_kprintf>
  12ae04:	e30012a9 	movw	r1, #681	; 0x2a9
  12ae08:	e3080f44 	movw	r0, #36676	; 0x8f44
  12ae0c:	e3400014 	movt	r0, #20
  12ae10:	ebff8093 	bl	10b064 <sys_arch_assert>
  LWIP_ASSERT("netif already has a struct dhcp set", netif_dhcp_data(netif) == NULL);
  12ae14:	e51b3008 	ldr	r3, [fp, #-8]
  12ae18:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12ae1c:	e3530000 	cmp	r3, #0
  12ae20:	0a000006 	beq	12ae40 <dhcp_set_struct+0x90>
  12ae24:	e3080fbc 	movw	r0, #36796	; 0x8fbc
  12ae28:	e3400014 	movt	r0, #20
  12ae2c:	ebff60b8 	bl	103114 <rt_kprintf>
  12ae30:	e30012aa 	movw	r1, #682	; 0x2aa
  12ae34:	e3080f44 	movw	r0, #36676	; 0x8f44
  12ae38:	e3400014 	movt	r0, #20
  12ae3c:	ebff8088 	bl	10b064 <sys_arch_assert>

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
  12ae40:	e3a02040 	mov	r2, #64	; 0x40
  12ae44:	e3a01000 	mov	r1, #0
  12ae48:	e51b000c 	ldr	r0, [fp, #-12]
  12ae4c:	eb005982 	bl	14145c <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */
  netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
  12ae50:	e51b3008 	ldr	r3, [fp, #-8]
  12ae54:	e51b200c 	ldr	r2, [fp, #-12]
  12ae58:	e5832028 	str	r2, [r3, #40]	; 0x28
}
  12ae5c:	e320f000 	nop	{0}
  12ae60:	e24bd004 	sub	sp, fp, #4
  12ae64:	e8bd8800 	pop	{fp, pc}

0012ae68 <dhcp_cleanup>:
 *            struct dhcp since the memory is passed back to the heap.
 *
 * @param netif the netif from which to remove the struct dhcp
 */
void dhcp_cleanup(struct netif *netif)
{
  12ae68:	e92d4800 	push	{fp, lr}
  12ae6c:	e28db004 	add	fp, sp, #4
  12ae70:	e24dd008 	sub	sp, sp, #8
  12ae74:	e50b0008 	str	r0, [fp, #-8]
  LWIP_ASSERT("netif != NULL", netif != NULL);
  12ae78:	e51b3008 	ldr	r3, [fp, #-8]
  12ae7c:	e3530000 	cmp	r3, #0
  12ae80:	1a000006 	bne	12aea0 <dhcp_cleanup+0x38>
  12ae84:	e3080f9c 	movw	r0, #36764	; 0x8f9c
  12ae88:	e3400014 	movt	r0, #20
  12ae8c:	ebff60a0 	bl	103114 <rt_kprintf>
  12ae90:	e30012bd 	movw	r1, #701	; 0x2bd
  12ae94:	e3080f44 	movw	r0, #36676	; 0x8f44
  12ae98:	e3400014 	movt	r0, #20
  12ae9c:	ebff8070 	bl	10b064 <sys_arch_assert>

  if (netif_dhcp_data(netif) != NULL) {
  12aea0:	e51b3008 	ldr	r3, [fp, #-8]
  12aea4:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12aea8:	e3530000 	cmp	r3, #0
  12aeac:	0a000006 	beq	12aecc <dhcp_cleanup+0x64>
    mem_free(netif_dhcp_data(netif));
  12aeb0:	e51b3008 	ldr	r3, [fp, #-8]
  12aeb4:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12aeb8:	e1a00003 	mov	r0, r3
  12aebc:	ebff80b5 	bl	10b198 <mem_free>
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, NULL);
  12aec0:	e51b3008 	ldr	r3, [fp, #-8]
  12aec4:	e3a02000 	mov	r2, #0
  12aec8:	e5832028 	str	r2, [r3, #40]	; 0x28
  }
}
  12aecc:	e320f000 	nop	{0}
  12aed0:	e24bd004 	sub	sp, fp, #4
  12aed4:	e8bd8800 	pop	{fp, pc}

0012aed8 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
  12aed8:	e92d4800 	push	{fp, lr}
  12aedc:	e28db004 	add	fp, sp, #4
  12aee0:	e24dd010 	sub	sp, sp, #16
  12aee4:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
  12aee8:	e51b3010 	ldr	r3, [fp, #-16]
  12aeec:	e3530000 	cmp	r3, #0
  12aef0:	1a000008 	bne	12af18 <dhcp_start+0x40>
  12aef4:	e3080f9c 	movw	r0, #36764	; 0x8f9c
  12aef8:	e3400014 	movt	r0, #20
  12aefc:	ebff6084 	bl	103114 <rt_kprintf>
  12af00:	e3a01fb6 	mov	r1, #728	; 0x2d8
  12af04:	e3080f44 	movw	r0, #36676	; 0x8f44
  12af08:	e3400014 	movt	r0, #20
  12af0c:	ebff8054 	bl	10b064 <sys_arch_assert>
  12af10:	e3e0300f 	mvn	r3, #15
  12af14:	ea000059 	b	12b080 <dhcp_start+0x1a8>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
  12af18:	e51b3010 	ldr	r3, [fp, #-16]
  12af1c:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  12af20:	e2033001 	and	r3, r3, #1
  12af24:	e3530000 	cmp	r3, #0
  12af28:	1a000008 	bne	12af50 <dhcp_start+0x78>
  12af2c:	e3080fe0 	movw	r0, #36832	; 0x8fe0
  12af30:	e3400014 	movt	r0, #20
  12af34:	ebff6076 	bl	103114 <rt_kprintf>
  12af38:	e30012d9 	movw	r1, #729	; 0x2d9
  12af3c:	e3080f44 	movw	r0, #36676	; 0x8f44
  12af40:	e3400014 	movt	r0, #20
  12af44:	ebff8046 	bl	10b064 <sys_arch_assert>
  12af48:	e3e0300f 	mvn	r3, #15
  12af4c:	ea00004b 	b	12b080 <dhcp_start+0x1a8>
  dhcp = netif_dhcp_data(netif);
  12af50:	e51b3010 	ldr	r3, [fp, #-16]
  12af54:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12af58:	e50b3008 	str	r3, [fp, #-8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
  12af5c:	e51b3010 	ldr	r3, [fp, #-16]
  12af60:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  12af64:	e3530d09 	cmp	r3, #576	; 0x240
  12af68:	2a000001 	bcs	12af74 <dhcp_start+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
  12af6c:	e3e03000 	mvn	r3, #0
  12af70:	ea000042 	b	12b080 <dhcp_start+0x1a8>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
  12af74:	e51b3008 	ldr	r3, [fp, #-8]
  12af78:	e3530000 	cmp	r3, #0
  12af7c:	1a00000b 	bne	12afb0 <dhcp_start+0xd8>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
  12af80:	e3a00040 	mov	r0, #64	; 0x40
  12af84:	ebff8077 	bl	10b168 <mem_malloc>
  12af88:	e50b0008 	str	r0, [fp, #-8]
    if (dhcp == NULL) {
  12af8c:	e51b3008 	ldr	r3, [fp, #-8]
  12af90:	e3530000 	cmp	r3, #0
  12af94:	1a000001 	bne	12afa0 <dhcp_start+0xc8>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
  12af98:	e3e03000 	mvn	r3, #0
  12af9c:	ea000037 	b	12b080 <dhcp_start+0x1a8>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
  12afa0:	e51b3010 	ldr	r3, [fp, #-16]
  12afa4:	e51b2008 	ldr	r2, [fp, #-8]
  12afa8:	e5832028 	str	r2, [r3, #40]	; 0x28
  12afac:	ea00001a 	b	12b01c <dhcp_start+0x144>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
  /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));
    LWIP_ASSERT("pbuf p_out wasn't freed", dhcp->p_out == NULL);
  12afb0:	e51b3008 	ldr	r3, [fp, #-8]
  12afb4:	e593300c 	ldr	r3, [r3, #12]
  12afb8:	e3530000 	cmp	r3, #0
  12afbc:	0a000006 	beq	12afdc <dhcp_start+0x104>
  12afc0:	e3090004 	movw	r0, #36868	; 0x9004
  12afc4:	e3400014 	movt	r0, #20
  12afc8:	ebff6051 	bl	103114 <rt_kprintf>
  12afcc:	e30012f2 	movw	r1, #754	; 0x2f2
  12afd0:	e3080f44 	movw	r0, #36676	; 0x8f44
  12afd4:	e3400014 	movt	r0, #20
  12afd8:	ebff8021 	bl	10b064 <sys_arch_assert>
    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL );
  12afdc:	e51b3008 	ldr	r3, [fp, #-8]
  12afe0:	e5933004 	ldr	r3, [r3, #4]
  12afe4:	e3530000 	cmp	r3, #0
  12afe8:	0a000006 	beq	12b008 <dhcp_start+0x130>
  12afec:	e309001c 	movw	r0, #36892	; 0x901c
  12aff0:	e3400014 	movt	r0, #20
  12aff4:	ebff6046 	bl	103114 <rt_kprintf>
  12aff8:	e30012f3 	movw	r1, #755	; 0x2f3
  12affc:	e3080f44 	movw	r0, #36676	; 0x8f44
  12b000:	e3400014 	movt	r0, #20
  12b004:	ebff8016 	bl	10b064 <sys_arch_assert>

    if (dhcp->pcb_allocated != 0) {
  12b008:	e51b3008 	ldr	r3, [fp, #-8]
  12b00c:	e5d33008 	ldrb	r3, [r3, #8]
  12b010:	e3530000 	cmp	r3, #0
  12b014:	0a000000 	beq	12b01c <dhcp_start+0x144>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
  12b018:	ebfffcb7 	bl	12a2fc <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
  12b01c:	e3a02040 	mov	r2, #64	; 0x40
  12b020:	e3a01000 	mov	r1, #0
  12b024:	e51b0008 	ldr	r0, [fp, #-8]
  12b028:	eb00590b 	bl	14145c <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
  12b02c:	ebfffc66 	bl	12a1cc <dhcp_inc_pcb_refcount>
  12b030:	e1a03000 	mov	r3, r0
  12b034:	e3530000 	cmp	r3, #0
  12b038:	0a000001 	beq	12b044 <dhcp_start+0x16c>
    return ERR_MEM;
  12b03c:	e3e03000 	mvn	r3, #0
  12b040:	ea00000e 	b	12b080 <dhcp_start+0x1a8>
  }
  dhcp->pcb_allocated = 1;
  12b044:	e51b3008 	ldr	r3, [fp, #-8]
  12b048:	e3a02001 	mov	r2, #1
  12b04c:	e5c32008 	strb	r2, [r3, #8]
  }
#endif /* LWIP_DHCP_CHECK_LINK_UP */


  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
  12b050:	e51b0010 	ldr	r0, [fp, #-16]
  12b054:	eb000103 	bl	12b468 <dhcp_discover>
  12b058:	e1a03000 	mov	r3, r0
  12b05c:	e54b3009 	strb	r3, [fp, #-9]
  if (result != ERR_OK) {
  12b060:	e15b30d9 	ldrsb	r3, [fp, #-9]
  12b064:	e3530000 	cmp	r3, #0
  12b068:	0a000003 	beq	12b07c <dhcp_start+0x1a4>
    /* free resources allocated above */
    dhcp_stop(netif);
  12b06c:	e51b0010 	ldr	r0, [fp, #-16]
  12b070:	eb000410 	bl	12c0b8 <dhcp_stop>
    return ERR_MEM;
  12b074:	e3e03000 	mvn	r3, #0
  12b078:	ea000000 	b	12b080 <dhcp_start+0x1a8>
  }
  return result;
  12b07c:	e15b30d9 	ldrsb	r3, [fp, #-9]
}
  12b080:	e1a00003 	mov	r0, r3
  12b084:	e24bd004 	sub	sp, fp, #4
  12b088:	e8bd8800 	pop	{fp, pc}

0012b08c <dhcp_inform>:
 *
 * @param netif The lwIP network interface
 */
void
dhcp_inform(struct netif *netif)
{
  12b08c:	e92d4800 	push	{fp, lr}
  12b090:	e28db004 	add	fp, sp, #4
  12b094:	e24dd058 	sub	sp, sp, #88	; 0x58
  12b098:	e50b0050 	str	r0, [fp, #-80]	; 0xffffffb0
  struct dhcp dhcp;
  err_t result = ERR_OK;
  12b09c:	e3a03000 	mov	r3, #0
  12b0a0:	e54b3005 	strb	r3, [fp, #-5]

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
  12b0a4:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
  12b0a8:	e3530000 	cmp	r3, #0
  12b0ac:	1a000007 	bne	12b0d0 <dhcp_inform+0x44>
  12b0b0:	e3080f9c 	movw	r0, #36764	; 0x8f9c
  12b0b4:	e3400014 	movt	r0, #20
  12b0b8:	ebff6015 	bl	103114 <rt_kprintf>
  12b0bc:	e3001329 	movw	r1, #809	; 0x329
  12b0c0:	e3080f44 	movw	r0, #36676	; 0x8f44
  12b0c4:	e3400014 	movt	r0, #20
  12b0c8:	ebff7fe5 	bl	10b064 <sys_arch_assert>
  12b0cc:	ea00003b 	b	12b1c0 <dhcp_inform+0x134>

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
  12b0d0:	ebfffc3d 	bl	12a1cc <dhcp_inc_pcb_refcount>
  12b0d4:	e1a03000 	mov	r3, r0
  12b0d8:	e3530000 	cmp	r3, #0
  12b0dc:	1a000036 	bne	12b1bc <dhcp_inform+0x130>
    return;
  }

  memset(&dhcp, 0, sizeof(struct dhcp));
  12b0e0:	e24b3048 	sub	r3, fp, #72	; 0x48
  12b0e4:	e3a02040 	mov	r2, #64	; 0x40
  12b0e8:	e3a01000 	mov	r1, #0
  12b0ec:	e1a00003 	mov	r0, r3
  12b0f0:	eb0058d9 	bl	14145c <memset>
  dhcp_set_state(&dhcp, DHCP_STATE_INFORMING);
  12b0f4:	e24b3048 	sub	r3, fp, #72	; 0x48
  12b0f8:	e3a01007 	mov	r1, #7
  12b0fc:	e1a00003 	mov	r0, r3
  12b100:	eb000419 	bl	12c16c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, &dhcp, DHCP_INFORM);
  12b104:	e24b3048 	sub	r3, fp, #72	; 0x48
  12b108:	e3a02008 	mov	r2, #8
  12b10c:	e1a01003 	mov	r1, r3
  12b110:	e51b0050 	ldr	r0, [fp, #-80]	; 0xffffffb0
  12b114:	eb000844 	bl	12d22c <dhcp_create_msg>
  12b118:	e1a03000 	mov	r3, r0
  12b11c:	e54b3005 	strb	r3, [fp, #-5]
  if (result == ERR_OK) {
  12b120:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12b124:	e3530000 	cmp	r3, #0
  12b128:	1a000021 	bne	12b1b4 <dhcp_inform+0x128>
    dhcp_option(&dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
  12b12c:	e24b3048 	sub	r3, fp, #72	; 0x48
  12b130:	e3a02002 	mov	r2, #2
  12b134:	e3a01039 	mov	r1, #57	; 0x39
  12b138:	e1a00003 	mov	r0, r3
  12b13c:	eb000422 	bl	12c1cc <dhcp_option>
    dhcp_option_short(&dhcp, DHCP_MAX_MSG_LEN(netif));
  12b140:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
  12b144:	e1d323b8 	ldrh	r2, [r3, #56]	; 0x38
  12b148:	e24b3048 	sub	r3, fp, #72	; 0x48
  12b14c:	e1a01002 	mov	r1, r2
  12b150:	e1a00003 	mov	r0, r3
  12b154:	eb00046b 	bl	12c308 <dhcp_option_short>

    dhcp_option_trailer(&dhcp);
  12b158:	e24b3048 	sub	r3, fp, #72	; 0x48
  12b15c:	e1a00003 	mov	r0, r3
  12b160:	eb00099e 	bl	12d7e0 <dhcp_option_trailer>

    pbuf_realloc(dhcp.p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp.options_out_len);
  12b164:	e51b203c 	ldr	r2, [fp, #-60]	; 0xffffffc4
  12b168:	e15b33b4 	ldrh	r3, [fp, #-52]	; 0xffffffcc
  12b16c:	e28330f0 	add	r3, r3, #240	; 0xf0
  12b170:	e6ff3073 	uxth	r3, r3
  12b174:	e1a01003 	mov	r1, r3
  12b178:	e1a00002 	mov	r0, r2
  12b17c:	ebffbe7d 	bl	11ab78 <pbuf_realloc>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_inform: INFORMING\n"));

    udp_sendto_if(dhcp_pcb, dhcp.p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
  12b180:	e30f3ac8 	movw	r3, #64200	; 0xfac8
  12b184:	e3403014 	movt	r3, #20
  12b188:	e5930000 	ldr	r0, [r3]
  12b18c:	e51b103c 	ldr	r1, [fp, #-60]	; 0xffffffc4
  12b190:	e51b3050 	ldr	r3, [fp, #-80]	; 0xffffffb0
  12b194:	e58d3000 	str	r3, [sp]
  12b198:	e3a03043 	mov	r3, #67	; 0x43
  12b19c:	e3092ae0 	movw	r2, #39648	; 0x9ae0
  12b1a0:	e3402014 	movt	r2, #20
  12b1a4:	ebfff49a 	bl	128414 <udp_sendto_if>

    dhcp_delete_msg(&dhcp);
  12b1a8:	e24b3048 	sub	r3, fp, #72	; 0x48
  12b1ac:	e1a00003 	mov	r0, r3
  12b1b0:	eb000955 	bl	12d70c <dhcp_delete_msg>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_inform: could not allocate DHCP request\n"));
  }

  dhcp_dec_pcb_refcount(); /* delete DHCP PCB if not needed any more */
  12b1b4:	ebfffc50 	bl	12a2fc <dhcp_dec_pcb_refcount>
  12b1b8:	ea000000 	b	12b1c0 <dhcp_inform+0x134>
    return;
  12b1bc:	e320f000 	nop	{0}
}
  12b1c0:	e24bd004 	sub	sp, fp, #4
  12b1c4:	e8bd8800 	pop	{fp, pc}

0012b1c8 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
  12b1c8:	e92d4800 	push	{fp, lr}
  12b1cc:	e28db004 	add	fp, sp, #4
  12b1d0:	e24dd010 	sub	sp, sp, #16
  12b1d4:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12b1d8:	e51b3010 	ldr	r3, [fp, #-16]
  12b1dc:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12b1e0:	e50b3008 	str	r3, [fp, #-8]

  if (!dhcp)
  12b1e4:	e51b3008 	ldr	r3, [fp, #-8]
  12b1e8:	e3530000 	cmp	r3, #0
  12b1ec:	0a00001c 	beq	12b264 <dhcp_network_changed+0x9c>
    return;
  switch (dhcp->state) {
  12b1f0:	e51b3008 	ldr	r3, [fp, #-8]
  12b1f4:	e5d33009 	ldrb	r3, [r3, #9]
  12b1f8:	e353000a 	cmp	r3, #10
  12b1fc:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  12b200:	ea000010 	b	12b248 <dhcp_network_changed+0x80>
  12b204:	0012b26c 	.word	0x0012b26c
  12b208:	0012b248 	.word	0x0012b248
  12b20c:	0012b248 	.word	0x0012b248
  12b210:	0012b230 	.word	0x0012b230
  12b214:	0012b230 	.word	0x0012b230
  12b218:	0012b230 	.word	0x0012b230
  12b21c:	0012b248 	.word	0x0012b248
  12b220:	0012b248 	.word	0x0012b248
  12b224:	0012b248 	.word	0x0012b248
  12b228:	0012b248 	.word	0x0012b248
  12b22c:	0012b230 	.word	0x0012b230
  case DHCP_STATE_REBINDING:
  case DHCP_STATE_RENEWING:
  case DHCP_STATE_BOUND:
  case DHCP_STATE_REBOOTING:
    dhcp->tries = 0;
  12b230:	e51b3008 	ldr	r3, [fp, #-8]
  12b234:	e3a02000 	mov	r2, #0
  12b238:	e5c3200a 	strb	r2, [r3, #10]
    dhcp_reboot(netif);
  12b23c:	e51b0010 	ldr	r0, [fp, #-16]
  12b240:	eb0002a7 	bl	12bce4 <dhcp_reboot>
    break;
  12b244:	ea000009 	b	12b270 <dhcp_network_changed+0xa8>
      autoip_stop(netif);
      dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
    }
#endif /* LWIP_DHCP_AUTOIP_COOP */
    /* ensure we start with short timeouts, even if already discovering */
    dhcp->tries = 0;
  12b248:	e51b3008 	ldr	r3, [fp, #-8]
  12b24c:	e3a02000 	mov	r2, #0
  12b250:	e5c3200a 	strb	r2, [r3, #10]
    dhcp_discover(netif);
  12b254:	e51b0010 	ldr	r0, [fp, #-16]
  12b258:	eb000082 	bl	12b468 <dhcp_discover>
    break;
  12b25c:	e320f000 	nop	{0}
  12b260:	ea000002 	b	12b270 <dhcp_network_changed+0xa8>
    return;
  12b264:	e320f000 	nop	{0}
  12b268:	ea000000 	b	12b270 <dhcp_network_changed+0xa8>
    break;
  12b26c:	e320f000 	nop	{0}
  }
}
  12b270:	e24bd004 	sub	sp, fp, #4
  12b274:	e8bd8800 	pop	{fp, pc}

0012b278 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
  12b278:	e92d4800 	push	{fp, lr}
  12b27c:	e28db004 	add	fp, sp, #4
  12b280:	e24dd010 	sub	sp, sp, #16
  12b284:	e50b0010 	str	r0, [fp, #-16]
  12b288:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
  12b28c:	e51b3010 	ldr	r3, [fp, #-16]
  12b290:	e3530000 	cmp	r3, #0
  12b294:	1a000007 	bne	12b2b8 <dhcp_arp_reply+0x40>
  12b298:	e3080f9c 	movw	r0, #36764	; 0x8f9c
  12b29c:	e3400014 	movt	r0, #20
  12b2a0:	ebff5f9b 	bl	103114 <rt_kprintf>
  12b2a4:	e300137d 	movw	r1, #893	; 0x37d
  12b2a8:	e3080f44 	movw	r0, #36676	; 0x8f44
  12b2ac:	e3400014 	movt	r0, #20
  12b2b0:	ebff7f6b 	bl	10b064 <sys_arch_assert>
  12b2b4:	ea000011 	b	12b300 <dhcp_arp_reply+0x88>
  dhcp = netif_dhcp_data(netif);
  12b2b8:	e51b3010 	ldr	r3, [fp, #-16]
  12b2bc:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12b2c0:	e50b3008 	str	r3, [fp, #-8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
  12b2c4:	e51b3008 	ldr	r3, [fp, #-8]
  12b2c8:	e3530000 	cmp	r3, #0
  12b2cc:	0a00000b 	beq	12b300 <dhcp_arp_reply+0x88>
  12b2d0:	e51b3008 	ldr	r3, [fp, #-8]
  12b2d4:	e5d33009 	ldrb	r3, [r3, #9]
  12b2d8:	e3530008 	cmp	r3, #8
  12b2dc:	1a000007 	bne	12b300 <dhcp_arp_reply+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
      ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
  12b2e0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12b2e4:	e5932000 	ldr	r2, [r3]
  12b2e8:	e51b3008 	ldr	r3, [fp, #-8]
  12b2ec:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12b2f0:	e1520003 	cmp	r2, r3
  12b2f4:	1a000001 	bne	12b300 <dhcp_arp_reply+0x88>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
        ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
  12b2f8:	e51b0010 	ldr	r0, [fp, #-16]
  12b2fc:	eb000001 	bl	12b308 <dhcp_decline>
    }
  }
}
  12b300:	e24bd004 	sub	sp, fp, #4
  12b304:	e8bd8800 	pop	{fp, pc}

0012b308 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
  12b308:	e92d4800 	push	{fp, lr}
  12b30c:	e28db004 	add	fp, sp, #4
  12b310:	e24dd018 	sub	sp, sp, #24
  12b314:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12b318:	e51b3010 	ldr	r3, [fp, #-16]
  12b31c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12b320:	e50b3008 	str	r3, [fp, #-8]
  err_t result = ERR_OK;
  12b324:	e3a03000 	mov	r3, #0
  12b328:	e54b3009 	strb	r3, [fp, #-9]
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
  12b32c:	e3a0100c 	mov	r1, #12
  12b330:	e51b0008 	ldr	r0, [fp, #-8]
  12b334:	eb00038c 	bl	12c16c <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DECLINE);
  12b338:	e3a02004 	mov	r2, #4
  12b33c:	e51b1008 	ldr	r1, [fp, #-8]
  12b340:	e51b0010 	ldr	r0, [fp, #-16]
  12b344:	eb0007b8 	bl	12d22c <dhcp_create_msg>
  12b348:	e1a03000 	mov	r3, r0
  12b34c:	e54b3009 	strb	r3, [fp, #-9]
  if (result == ERR_OK) {
  12b350:	e15b30d9 	ldrsb	r3, [fp, #-9]
  12b354:	e3530000 	cmp	r3, #0
  12b358:	1a000026 	bne	12b3f8 <dhcp_decline+0xf0>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
  12b35c:	e3a02004 	mov	r2, #4
  12b360:	e3a01032 	mov	r1, #50	; 0x32
  12b364:	e51b0008 	ldr	r0, [fp, #-8]
  12b368:	eb000397 	bl	12c1cc <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
  12b36c:	e51b3008 	ldr	r3, [fp, #-8]
  12b370:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12b374:	e1a00003 	mov	r0, r3
  12b378:	ebffad1c 	bl	1167f0 <lwip_htonl>
  12b37c:	e1a03000 	mov	r3, r0
  12b380:	e1a01003 	mov	r1, r3
  12b384:	e51b0008 	ldr	r0, [fp, #-8]
  12b388:	eb00040f 	bl	12c3cc <dhcp_option_long>

    dhcp_option_trailer(dhcp);
  12b38c:	e51b0008 	ldr	r0, [fp, #-8]
  12b390:	eb000912 	bl	12d7e0 <dhcp_option_trailer>
    /* resize pbuf to reflect true size of options */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  12b394:	e51b3008 	ldr	r3, [fp, #-8]
  12b398:	e593200c 	ldr	r2, [r3, #12]
  12b39c:	e51b3008 	ldr	r3, [fp, #-8]
  12b3a0:	e1d331b4 	ldrh	r3, [r3, #20]
  12b3a4:	e28330f0 	add	r3, r3, #240	; 0xf0
  12b3a8:	e6ff3073 	uxth	r3, r3
  12b3ac:	e1a01003 	mov	r1, r3
  12b3b0:	e1a00002 	mov	r0, r2
  12b3b4:	ebffbdef 	bl	11ab78 <pbuf_realloc>

    /* per section 4.4.4, broadcast DECLINE messages */
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
  12b3b8:	e30f3ac8 	movw	r3, #64200	; 0xfac8
  12b3bc:	e3403014 	movt	r3, #20
  12b3c0:	e5930000 	ldr	r0, [r3]
  12b3c4:	e51b3008 	ldr	r3, [fp, #-8]
  12b3c8:	e593100c 	ldr	r1, [r3, #12]
  12b3cc:	e3093adc 	movw	r3, #39644	; 0x9adc
  12b3d0:	e3403014 	movt	r3, #20
  12b3d4:	e58d3004 	str	r3, [sp, #4]
  12b3d8:	e51b3010 	ldr	r3, [fp, #-16]
  12b3dc:	e58d3000 	str	r3, [sp]
  12b3e0:	e3a03043 	mov	r3, #67	; 0x43
  12b3e4:	e3092ae0 	movw	r2, #39648	; 0x9ae0
  12b3e8:	e3402014 	movt	r2, #20
  12b3ec:	ebfff440 	bl	1284f4 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
  12b3f0:	e51b0008 	ldr	r0, [fp, #-8]
  12b3f4:	eb0008c4 	bl	12d70c <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_decline: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
  12b3f8:	e51b3008 	ldr	r3, [fp, #-8]
  12b3fc:	e5d3300a 	ldrb	r3, [r3, #10]
  12b400:	e35300ff 	cmp	r3, #255	; 0xff
  12b404:	0a000005 	beq	12b420 <dhcp_decline+0x118>
    dhcp->tries++;
  12b408:	e51b3008 	ldr	r3, [fp, #-8]
  12b40c:	e5d3300a 	ldrb	r3, [r3, #10]
  12b410:	e2833001 	add	r3, r3, #1
  12b414:	e6ef2073 	uxtb	r2, r3
  12b418:	e51b3008 	ldr	r3, [fp, #-8]
  12b41c:	e5c3200a 	strb	r2, [r3, #10]
  }
  msecs = 10*1000;
  12b420:	e3023710 	movw	r3, #10000	; 0x2710
  12b424:	e14b30bc 	strh	r3, [fp, #-12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  12b428:	e15b30bc 	ldrh	r3, [fp, #-12]
  12b42c:	e2833e1f 	add	r3, r3, #496	; 0x1f0
  12b430:	e2833003 	add	r3, r3, #3
  12b434:	e3042dd3 	movw	r2, #19923	; 0x4dd3
  12b438:	e3412062 	movt	r2, #4194	; 0x1062
  12b43c:	e0c10293 	smull	r0, r1, r3, r2
  12b440:	e1a022c1 	asr	r2, r1, #5
  12b444:	e1a03fc3 	asr	r3, r3, #31
  12b448:	e0423003 	sub	r3, r2, r3
  12b44c:	e6ff2073 	uxth	r2, r3
  12b450:	e51b3008 	ldr	r3, [fp, #-8]
  12b454:	e1c321b6 	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
  12b458:	e15b30d9 	ldrsb	r3, [fp, #-9]
}
  12b45c:	e1a00003 	mov	r0, r3
  12b460:	e24bd004 	sub	sp, fp, #4
  12b464:	e8bd8800 	pop	{fp, pc}

0012b468 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
  12b468:	e92d4800 	push	{fp, lr}
  12b46c:	e28db004 	add	fp, sp, #4
  12b470:	e24dd020 	sub	sp, sp, #32
  12b474:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12b478:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b47c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12b480:	e50b300c 	str	r3, [fp, #-12]
  err_t result = ERR_OK;
  12b484:	e3a03000 	mov	r3, #0
  12b488:	e54b300d 	strb	r3, [fp, #-13]
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));
  ip4_addr_set_any(&dhcp->offered_ip_addr);
  12b48c:	e51b300c 	ldr	r3, [fp, #-12]
  12b490:	e3a02000 	mov	r2, #0
  12b494:	e5832028 	str	r2, [r3, #40]	; 0x28
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
  12b498:	e3a01006 	mov	r1, #6
  12b49c:	e51b000c 	ldr	r0, [fp, #-12]
  12b4a0:	eb000331 	bl	12c16c <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER);
  12b4a4:	e3a02001 	mov	r2, #1
  12b4a8:	e51b100c 	ldr	r1, [fp, #-12]
  12b4ac:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12b4b0:	eb00075d 	bl	12d22c <dhcp_create_msg>
  12b4b4:	e1a03000 	mov	r3, r0
  12b4b8:	e54b300d 	strb	r3, [fp, #-13]
  if (result == ERR_OK) {
  12b4bc:	e15b30dd 	ldrsb	r3, [fp, #-13]
  12b4c0:	e3530000 	cmp	r3, #0
  12b4c4:	1a000037 	bne	12b5a8 <dhcp_discover+0x140>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
  12b4c8:	e3a02002 	mov	r2, #2
  12b4cc:	e3a01039 	mov	r1, #57	; 0x39
  12b4d0:	e51b000c 	ldr	r0, [fp, #-12]
  12b4d4:	eb00033c 	bl	12c1cc <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
  12b4d8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b4dc:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  12b4e0:	e1a01003 	mov	r1, r3
  12b4e4:	e51b000c 	ldr	r0, [fp, #-12]
  12b4e8:	eb000386 	bl	12c308 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
  12b4ec:	e3a02004 	mov	r2, #4
  12b4f0:	e3a01037 	mov	r1, #55	; 0x37
  12b4f4:	e51b000c 	ldr	r0, [fp, #-12]
  12b4f8:	eb000333 	bl	12c1cc <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12b4fc:	e3a03000 	mov	r3, #0
  12b500:	e54b3005 	strb	r3, [fp, #-5]
  12b504:	ea000009 	b	12b530 <dhcp_discover+0xc8>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
  12b508:	e55b2005 	ldrb	r2, [fp, #-5]
  12b50c:	e30e303c 	movw	r3, #57404	; 0xe03c
  12b510:	e3403014 	movt	r3, #20
  12b514:	e7d33002 	ldrb	r3, [r3, r2]
  12b518:	e1a01003 	mov	r1, r3
  12b51c:	e51b000c 	ldr	r0, [fp, #-12]
  12b520:	eb000359 	bl	12c28c <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12b524:	e55b3005 	ldrb	r3, [fp, #-5]
  12b528:	e2833001 	add	r3, r3, #1
  12b52c:	e54b3005 	strb	r3, [fp, #-5]
  12b530:	e55b3005 	ldrb	r3, [fp, #-5]
  12b534:	e3530003 	cmp	r3, #3
  12b538:	9afffff2 	bls	12b508 <dhcp_discover+0xa0>
    }
    dhcp_option_trailer(dhcp);
  12b53c:	e51b000c 	ldr	r0, [fp, #-12]
  12b540:	eb0008a6 	bl	12d7e0 <dhcp_option_trailer>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: realloc()ing\n"));
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  12b544:	e51b300c 	ldr	r3, [fp, #-12]
  12b548:	e593200c 	ldr	r2, [r3, #12]
  12b54c:	e51b300c 	ldr	r3, [fp, #-12]
  12b550:	e1d331b4 	ldrh	r3, [r3, #20]
  12b554:	e28330f0 	add	r3, r3, #240	; 0xf0
  12b558:	e6ff3073 	uxth	r3, r3
  12b55c:	e1a01003 	mov	r1, r3
  12b560:	e1a00002 	mov	r0, r2
  12b564:	ebffbd83 	bl	11ab78 <pbuf_realloc>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, DHCP_SERVER_PORT)\n"));
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
  12b568:	e30f3ac8 	movw	r3, #64200	; 0xfac8
  12b56c:	e3403014 	movt	r3, #20
  12b570:	e5930000 	ldr	r0, [r3]
  12b574:	e51b300c 	ldr	r3, [fp, #-12]
  12b578:	e593100c 	ldr	r1, [r3, #12]
  12b57c:	e3093adc 	movw	r3, #39644	; 0x9adc
  12b580:	e3403014 	movt	r3, #20
  12b584:	e58d3004 	str	r3, [sp, #4]
  12b588:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b58c:	e58d3000 	str	r3, [sp]
  12b590:	e3a03043 	mov	r3, #67	; 0x43
  12b594:	e3092ae0 	movw	r2, #39648	; 0x9ae0
  12b598:	e3402014 	movt	r2, #20
  12b59c:	ebfff3d4 	bl	1284f4 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    dhcp_delete_msg(dhcp);
  12b5a0:	e51b000c 	ldr	r0, [fp, #-12]
  12b5a4:	eb000858 	bl	12d70c <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
  12b5a8:	e51b300c 	ldr	r3, [fp, #-12]
  12b5ac:	e5d3300a 	ldrb	r3, [r3, #10]
  12b5b0:	e35300ff 	cmp	r3, #255	; 0xff
  12b5b4:	0a000005 	beq	12b5d0 <dhcp_discover+0x168>
    dhcp->tries++;
  12b5b8:	e51b300c 	ldr	r3, [fp, #-12]
  12b5bc:	e5d3300a 	ldrb	r3, [r3, #10]
  12b5c0:	e2833001 	add	r3, r3, #1
  12b5c4:	e6ef2073 	uxtb	r2, r3
  12b5c8:	e51b300c 	ldr	r3, [fp, #-12]
  12b5cc:	e5c3200a 	strb	r2, [r3, #10]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
  12b5d0:	e51b300c 	ldr	r3, [fp, #-12]
  12b5d4:	e5d3300a 	ldrb	r3, [r3, #10]
  12b5d8:	e3530005 	cmp	r3, #5
  12b5dc:	8a000006 	bhi	12b5fc <dhcp_discover+0x194>
  12b5e0:	e51b300c 	ldr	r3, [fp, #-12]
  12b5e4:	e5d3300a 	ldrb	r3, [r3, #10]
  12b5e8:	e1a02003 	mov	r2, r3
  12b5ec:	e3a03ffa 	mov	r3, #1000	; 0x3e8
  12b5f0:	e1a03213 	lsl	r3, r3, r2
  12b5f4:	e6ff3073 	uxth	r3, r3
  12b5f8:	ea000000 	b	12b600 <dhcp_discover+0x198>
  12b5fc:	e30e3a60 	movw	r3, #60000	; 0xea60
  12b600:	e14b31b0 	strh	r3, [fp, #-16]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  12b604:	e15b31b0 	ldrh	r3, [fp, #-16]
  12b608:	e2833e1f 	add	r3, r3, #496	; 0x1f0
  12b60c:	e2833003 	add	r3, r3, #3
  12b610:	e3042dd3 	movw	r2, #19923	; 0x4dd3
  12b614:	e3412062 	movt	r2, #4194	; 0x1062
  12b618:	e0c10293 	smull	r0, r1, r3, r2
  12b61c:	e1a022c1 	asr	r2, r1, #5
  12b620:	e1a03fc3 	asr	r3, r3, #31
  12b624:	e0423003 	sub	r3, r2, r3
  12b628:	e6ff2073 	uxth	r2, r3
  12b62c:	e51b300c 	ldr	r3, [fp, #-12]
  12b630:	e1c321b6 	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
  12b634:	e15b30dd 	ldrsb	r3, [fp, #-13]
}
  12b638:	e1a00003 	mov	r0, r3
  12b63c:	e24bd004 	sub	sp, fp, #4
  12b640:	e8bd8800 	pop	{fp, pc}

0012b644 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
  12b644:	e92d4800 	push	{fp, lr}
  12b648:	e28db004 	add	fp, sp, #4
  12b64c:	e24dd020 	sub	sp, sp, #32
  12b650:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
  12b654:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12b658:	e3530000 	cmp	r3, #0
  12b65c:	1a000007 	bne	12b680 <dhcp_bind+0x3c>
  12b660:	e3090030 	movw	r0, #36912	; 0x9030
  12b664:	e3400014 	movt	r0, #20
  12b668:	ebff5ea9 	bl	103114 <rt_kprintf>
  12b66c:	e30013ff 	movw	r1, #1023	; 0x3ff
  12b670:	e3080f44 	movw	r0, #36676	; 0x8f44
  12b674:	e3400014 	movt	r0, #20
  12b678:	ebff7e79 	bl	10b064 <sys_arch_assert>
  12b67c:	ea0000aa 	b	12b92c <dhcp_bind+0x2e8>
  dhcp = netif_dhcp_data(netif);
  12b680:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12b684:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12b688:	e50b300c 	str	r3, [fp, #-12]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
  12b68c:	e51b300c 	ldr	r3, [fp, #-12]
  12b690:	e3530000 	cmp	r3, #0
  12b694:	1a000007 	bne	12b6b8 <dhcp_bind+0x74>
  12b698:	e309004c 	movw	r0, #36940	; 0x904c
  12b69c:	e3400014 	movt	r0, #20
  12b6a0:	ebff5e9b 	bl	103114 <rt_kprintf>
  12b6a4:	e3001401 	movw	r1, #1025	; 0x401
  12b6a8:	e3080f44 	movw	r0, #36676	; 0x8f44
  12b6ac:	e3400014 	movt	r0, #20
  12b6b0:	ebff7e6b 	bl	10b064 <sys_arch_assert>
  12b6b4:	ea00009c 	b	12b92c <dhcp_bind+0x2e8>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
  12b6b8:	e51b300c 	ldr	r3, [fp, #-12]
  12b6bc:	e3a02000 	mov	r2, #0
  12b6c0:	e1c322b0 	strh	r2, [r3, #32]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
  12b6c4:	e51b300c 	ldr	r3, [fp, #-12]
  12b6c8:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  12b6cc:	e3730001 	cmn	r3, #1
  12b6d0:	0a000017 	beq	12b734 <dhcp_bind+0xf0>
     /* set renewal period timer */
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
     timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
  12b6d4:	e51b300c 	ldr	r3, [fp, #-12]
  12b6d8:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  12b6dc:	e283201e 	add	r2, r3, #30
  12b6e0:	e3083889 	movw	r3, #34953	; 0x8889
  12b6e4:	e3483888 	movt	r3, #34952	; 0x8888
  12b6e8:	e0832392 	umull	r2, r3, r2, r3
  12b6ec:	e1a032a3 	lsr	r3, r3, #5
  12b6f0:	e50b3008 	str	r3, [fp, #-8]
     if (timeout > 0xffff) {
  12b6f4:	e51b3008 	ldr	r3, [fp, #-8]
  12b6f8:	e3530801 	cmp	r3, #65536	; 0x10000
  12b6fc:	3a000001 	bcc	12b708 <dhcp_bind+0xc4>
       timeout = 0xffff;
  12b700:	e30f3fff 	movw	r3, #65535	; 0xffff
  12b704:	e50b3008 	str	r3, [fp, #-8]
     }
     dhcp->t0_timeout = (u16_t)timeout;
  12b708:	e51b3008 	ldr	r3, [fp, #-8]
  12b70c:	e6ff2073 	uxth	r2, r3
  12b710:	e51b300c 	ldr	r3, [fp, #-12]
  12b714:	e1c322b2 	strh	r2, [r3, #34]	; 0x22
     if (dhcp->t0_timeout == 0) {
  12b718:	e51b300c 	ldr	r3, [fp, #-12]
  12b71c:	e1d332b2 	ldrh	r3, [r3, #34]	; 0x22
  12b720:	e3530000 	cmp	r3, #0
  12b724:	1a000002 	bne	12b734 <dhcp_bind+0xf0>
       dhcp->t0_timeout = 1;
  12b728:	e51b300c 	ldr	r3, [fp, #-12]
  12b72c:	e3a02001 	mov	r2, #1
  12b730:	e1c322b2 	strh	r2, [r3, #34]	; 0x22
     }
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease*1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
  12b734:	e51b300c 	ldr	r3, [fp, #-12]
  12b738:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  12b73c:	e3730001 	cmn	r3, #1
  12b740:	0a00001b 	beq	12b7b4 <dhcp_bind+0x170>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
  12b744:	e51b300c 	ldr	r3, [fp, #-12]
  12b748:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  12b74c:	e283201e 	add	r2, r3, #30
  12b750:	e3083889 	movw	r3, #34953	; 0x8889
  12b754:	e3483888 	movt	r3, #34952	; 0x8888
  12b758:	e0832392 	umull	r2, r3, r2, r3
  12b75c:	e1a032a3 	lsr	r3, r3, #5
  12b760:	e50b3008 	str	r3, [fp, #-8]
    if (timeout > 0xffff) {
  12b764:	e51b3008 	ldr	r3, [fp, #-8]
  12b768:	e3530801 	cmp	r3, #65536	; 0x10000
  12b76c:	3a000001 	bcc	12b778 <dhcp_bind+0x134>
      timeout = 0xffff;
  12b770:	e30f3fff 	movw	r3, #65535	; 0xffff
  12b774:	e50b3008 	str	r3, [fp, #-8]
    }
    dhcp->t1_timeout = (u16_t)timeout;
  12b778:	e51b3008 	ldr	r3, [fp, #-8]
  12b77c:	e6ff2073 	uxth	r2, r3
  12b780:	e51b300c 	ldr	r3, [fp, #-12]
  12b784:	e1c321b8 	strh	r2, [r3, #24]
    if (dhcp->t1_timeout == 0) {
  12b788:	e51b300c 	ldr	r3, [fp, #-12]
  12b78c:	e1d331b8 	ldrh	r3, [r3, #24]
  12b790:	e3530000 	cmp	r3, #0
  12b794:	1a000002 	bne	12b7a4 <dhcp_bind+0x160>
      dhcp->t1_timeout = 1;
  12b798:	e51b300c 	ldr	r3, [fp, #-12]
  12b79c:	e3a02001 	mov	r2, #1
  12b7a0:	e1c321b8 	strh	r2, [r3, #24]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew*1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
  12b7a4:	e51b300c 	ldr	r3, [fp, #-12]
  12b7a8:	e1d321b8 	ldrh	r2, [r3, #24]
  12b7ac:	e51b300c 	ldr	r3, [fp, #-12]
  12b7b0:	e1c321bc 	strh	r2, [r3, #28]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
  12b7b4:	e51b300c 	ldr	r3, [fp, #-12]
  12b7b8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  12b7bc:	e3730001 	cmn	r3, #1
  12b7c0:	0a00001b 	beq	12b834 <dhcp_bind+0x1f0>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
  12b7c4:	e51b300c 	ldr	r3, [fp, #-12]
  12b7c8:	e593303c 	ldr	r3, [r3, #60]	; 0x3c
  12b7cc:	e283201e 	add	r2, r3, #30
  12b7d0:	e3083889 	movw	r3, #34953	; 0x8889
  12b7d4:	e3483888 	movt	r3, #34952	; 0x8888
  12b7d8:	e0832392 	umull	r2, r3, r2, r3
  12b7dc:	e1a032a3 	lsr	r3, r3, #5
  12b7e0:	e50b3008 	str	r3, [fp, #-8]
    if (timeout > 0xffff) {
  12b7e4:	e51b3008 	ldr	r3, [fp, #-8]
  12b7e8:	e3530801 	cmp	r3, #65536	; 0x10000
  12b7ec:	3a000001 	bcc	12b7f8 <dhcp_bind+0x1b4>
      timeout = 0xffff;
  12b7f0:	e30f3fff 	movw	r3, #65535	; 0xffff
  12b7f4:	e50b3008 	str	r3, [fp, #-8]
    }
    dhcp->t2_timeout = (u16_t)timeout;
  12b7f8:	e51b3008 	ldr	r3, [fp, #-8]
  12b7fc:	e6ff2073 	uxth	r2, r3
  12b800:	e51b300c 	ldr	r3, [fp, #-12]
  12b804:	e1c321ba 	strh	r2, [r3, #26]
    if (dhcp->t2_timeout == 0) {
  12b808:	e51b300c 	ldr	r3, [fp, #-12]
  12b80c:	e1d331ba 	ldrh	r3, [r3, #26]
  12b810:	e3530000 	cmp	r3, #0
  12b814:	1a000002 	bne	12b824 <dhcp_bind+0x1e0>
      dhcp->t2_timeout = 1;
  12b818:	e51b300c 	ldr	r3, [fp, #-12]
  12b81c:	e3a02001 	mov	r2, #1
  12b820:	e1c321ba 	strh	r2, [r3, #26]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind*1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
  12b824:	e51b300c 	ldr	r3, [fp, #-12]
  12b828:	e1d321ba 	ldrh	r2, [r3, #26]
  12b82c:	e51b300c 	ldr	r3, [fp, #-12]
  12b830:	e1c321be 	strh	r2, [r3, #30]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
  12b834:	e51b300c 	ldr	r3, [fp, #-12]
  12b838:	e1d321b8 	ldrh	r2, [r3, #24]
  12b83c:	e51b300c 	ldr	r3, [fp, #-12]
  12b840:	e1d331ba 	ldrh	r3, [r3, #26]
  12b844:	e1520003 	cmp	r2, r3
  12b848:	3a000006 	bcc	12b868 <dhcp_bind+0x224>
  12b84c:	e51b300c 	ldr	r3, [fp, #-12]
  12b850:	e1d331ba 	ldrh	r3, [r3, #26]
  12b854:	e3530000 	cmp	r3, #0
  12b858:	0a000002 	beq	12b868 <dhcp_bind+0x224>
    dhcp->t1_timeout = 0;
  12b85c:	e51b300c 	ldr	r3, [fp, #-12]
  12b860:	e3a02000 	mov	r2, #0
  12b864:	e1c321b8 	strh	r2, [r3, #24]
  }

  if (dhcp->subnet_mask_given) {
  12b868:	e51b300c 	ldr	r3, [fp, #-12]
  12b86c:	e5d3300b 	ldrb	r3, [r3, #11]
  12b870:	e3530000 	cmp	r3, #0
  12b874:	0a000003 	beq	12b888 <dhcp_bind+0x244>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
  12b878:	e51b300c 	ldr	r3, [fp, #-12]
  12b87c:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  12b880:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  12b884:	ea000011 	b	12b8d0 <dhcp_bind+0x28c>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
  12b888:	e51b300c 	ldr	r3, [fp, #-12]
  12b88c:	e2833028 	add	r3, r3, #40	; 0x28
  12b890:	e5d33000 	ldrb	r3, [r3]
  12b894:	e54b300d 	strb	r3, [fp, #-13]
    if (first_octet <= 127) {
  12b898:	e15b30dd 	ldrsb	r3, [fp, #-13]
  12b89c:	e3530000 	cmp	r3, #0
  12b8a0:	ba000002 	blt	12b8b0 <dhcp_bind+0x26c>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
  12b8a4:	e3a030ff 	mov	r3, #255	; 0xff
  12b8a8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  12b8ac:	ea000007 	b	12b8d0 <dhcp_bind+0x28c>
    } else if (first_octet >= 192) {
  12b8b0:	e55b300d 	ldrb	r3, [fp, #-13]
  12b8b4:	e35300bf 	cmp	r3, #191	; 0xbf
  12b8b8:	9a000002 	bls	12b8c8 <dhcp_bind+0x284>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
  12b8bc:	e3e034ff 	mvn	r3, #-16777216	; 0xff000000
  12b8c0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  12b8c4:	ea000001 	b	12b8d0 <dhcp_bind+0x28c>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
  12b8c8:	e30f3fff 	movw	r3, #65535	; 0xffff
  12b8cc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
  12b8d0:	e51b300c 	ldr	r3, [fp, #-12]
  12b8d4:	e5933030 	ldr	r3, [r3, #48]	; 0x30
  12b8d8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
  12b8dc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b8e0:	e3530000 	cmp	r3, #0
  12b8e4:	1a000007 	bne	12b908 <dhcp_bind+0x2c4>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
  12b8e8:	e51b300c 	ldr	r3, [fp, #-12]
  12b8ec:	e5932028 	ldr	r2, [r3, #40]	; 0x28
  12b8f0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12b8f4:	e0033002 	and	r3, r3, r2
  12b8f8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
  12b8fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b900:	e3833401 	orr	r3, r3, #16777216	; 0x1000000
  12b904:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
    ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
  12b908:	e3a0100a 	mov	r1, #10
  12b90c:	e51b000c 	ldr	r0, [fp, #-12]
  12b910:	eb000215 	bl	12c16c <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
  12b914:	e51b300c 	ldr	r3, [fp, #-12]
  12b918:	e2831028 	add	r1, r3, #40	; 0x28
  12b91c:	e24b3018 	sub	r3, fp, #24
  12b920:	e24b2014 	sub	r2, fp, #20
  12b924:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  12b928:	ebffb76d 	bl	1196e4 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
  12b92c:	e24bd004 	sub	sp, fp, #4
  12b930:	e8bd8800 	pop	{fp, pc}

0012b934 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
  12b934:	e92d4800 	push	{fp, lr}
  12b938:	e28db004 	add	fp, sp, #4
  12b93c:	e24dd020 	sub	sp, sp, #32
  12b940:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12b944:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b948:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12b94c:	e50b300c 	str	r3, [fp, #-12]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
  12b950:	e3a01005 	mov	r1, #5
  12b954:	e51b000c 	ldr	r0, [fp, #-12]
  12b958:	eb000203 	bl	12c16c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
  12b95c:	e3a02003 	mov	r2, #3
  12b960:	e51b100c 	ldr	r1, [fp, #-12]
  12b964:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12b968:	eb00062f 	bl	12d22c <dhcp_create_msg>
  12b96c:	e1a03000 	mov	r3, r0
  12b970:	e54b300d 	strb	r3, [fp, #-13]
  if (result == ERR_OK) {
  12b974:	e15b30dd 	ldrsb	r3, [fp, #-13]
  12b978:	e3530000 	cmp	r3, #0
  12b97c:	1a000037 	bne	12ba60 <dhcp_renew+0x12c>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
  12b980:	e3a02002 	mov	r2, #2
  12b984:	e3a01039 	mov	r1, #57	; 0x39
  12b988:	e51b000c 	ldr	r0, [fp, #-12]
  12b98c:	eb00020e 	bl	12c1cc <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
  12b990:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12b994:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  12b998:	e1a01003 	mov	r1, r3
  12b99c:	e51b000c 	ldr	r0, [fp, #-12]
  12b9a0:	eb000258 	bl	12c308 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
  12b9a4:	e3a02004 	mov	r2, #4
  12b9a8:	e3a01037 	mov	r1, #55	; 0x37
  12b9ac:	e51b000c 	ldr	r0, [fp, #-12]
  12b9b0:	eb000205 	bl	12c1cc <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12b9b4:	e3a03000 	mov	r3, #0
  12b9b8:	e54b3005 	strb	r3, [fp, #-5]
  12b9bc:	ea000009 	b	12b9e8 <dhcp_renew+0xb4>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
  12b9c0:	e55b2005 	ldrb	r2, [fp, #-5]
  12b9c4:	e30e303c 	movw	r3, #57404	; 0xe03c
  12b9c8:	e3403014 	movt	r3, #20
  12b9cc:	e7d33002 	ldrb	r3, [r3, r2]
  12b9d0:	e1a01003 	mov	r1, r3
  12b9d4:	e51b000c 	ldr	r0, [fp, #-12]
  12b9d8:	eb00022b 	bl	12c28c <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12b9dc:	e55b3005 	ldrb	r3, [fp, #-5]
  12b9e0:	e2833001 	add	r3, r3, #1
  12b9e4:	e54b3005 	strb	r3, [fp, #-5]
  12b9e8:	e55b3005 	ldrb	r3, [fp, #-5]
  12b9ec:	e3530003 	cmp	r3, #3
  12b9f0:	9afffff2 	bls	12b9c0 <dhcp_renew+0x8c>
    }

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
  12b9f4:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  12b9f8:	e51b000c 	ldr	r0, [fp, #-12]
  12b9fc:	eb0002bd 	bl	12c4f8 <dhcp_option_hostname>
#endif /* LWIP_NETIF_HOSTNAME */

    /* append DHCP message trailer */
    dhcp_option_trailer(dhcp);
  12ba00:	e51b000c 	ldr	r0, [fp, #-12]
  12ba04:	eb000775 	bl	12d7e0 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  12ba08:	e51b300c 	ldr	r3, [fp, #-12]
  12ba0c:	e593200c 	ldr	r2, [r3, #12]
  12ba10:	e51b300c 	ldr	r3, [fp, #-12]
  12ba14:	e1d331b4 	ldrh	r3, [r3, #20]
  12ba18:	e28330f0 	add	r3, r3, #240	; 0xf0
  12ba1c:	e6ff3073 	uxth	r3, r3
  12ba20:	e1a01003 	mov	r1, r3
  12ba24:	e1a00002 	mov	r0, r2
  12ba28:	ebffbc52 	bl	11ab78 <pbuf_realloc>

    udp_sendto_if(dhcp_pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
  12ba2c:	e30f3ac8 	movw	r3, #64200	; 0xfac8
  12ba30:	e3403014 	movt	r3, #20
  12ba34:	e5930000 	ldr	r0, [r3]
  12ba38:	e51b300c 	ldr	r3, [fp, #-12]
  12ba3c:	e593100c 	ldr	r1, [r3, #12]
  12ba40:	e51b300c 	ldr	r3, [fp, #-12]
  12ba44:	e2832024 	add	r2, r3, #36	; 0x24
  12ba48:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12ba4c:	e58d3000 	str	r3, [sp]
  12ba50:	e3a03043 	mov	r3, #67	; 0x43
  12ba54:	ebfff26e 	bl	128414 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
  12ba58:	e51b000c 	ldr	r0, [fp, #-12]
  12ba5c:	eb00072a 	bl	12d70c <dhcp_delete_msg>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
  12ba60:	e51b300c 	ldr	r3, [fp, #-12]
  12ba64:	e5d3300a 	ldrb	r3, [r3, #10]
  12ba68:	e35300ff 	cmp	r3, #255	; 0xff
  12ba6c:	0a000005 	beq	12ba88 <dhcp_renew+0x154>
    dhcp->tries++;
  12ba70:	e51b300c 	ldr	r3, [fp, #-12]
  12ba74:	e5d3300a 	ldrb	r3, [r3, #10]
  12ba78:	e2833001 	add	r3, r3, #1
  12ba7c:	e6ef2073 	uxtb	r2, r3
  12ba80:	e51b300c 	ldr	r3, [fp, #-12]
  12ba84:	e5c3200a 	strb	r2, [r3, #10]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
  12ba88:	e51b300c 	ldr	r3, [fp, #-12]
  12ba8c:	e5d3300a 	ldrb	r3, [r3, #10]
  12ba90:	e3530009 	cmp	r3, #9
  12ba94:	8a00000a 	bhi	12bac4 <dhcp_renew+0x190>
  12ba98:	e51b300c 	ldr	r3, [fp, #-12]
  12ba9c:	e5d3300a 	ldrb	r3, [r3, #10]
  12baa0:	e6ff3073 	uxth	r3, r3
  12baa4:	e1a02003 	mov	r2, r3
  12baa8:	e1a02282 	lsl	r2, r2, #5
  12baac:	e0422003 	sub	r2, r2, r3
  12bab0:	e1a02102 	lsl	r2, r2, #2
  12bab4:	e0823003 	add	r3, r2, r3
  12bab8:	e1a03203 	lsl	r3, r3, #4
  12babc:	e6ff3073 	uxth	r3, r3
  12bac0:	ea000000 	b	12bac8 <dhcp_renew+0x194>
  12bac4:	e3043e20 	movw	r3, #20000	; 0x4e20
  12bac8:	e14b31b0 	strh	r3, [fp, #-16]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  12bacc:	e15b31b0 	ldrh	r3, [fp, #-16]
  12bad0:	e2833e1f 	add	r3, r3, #496	; 0x1f0
  12bad4:	e2833003 	add	r3, r3, #3
  12bad8:	e3042dd3 	movw	r2, #19923	; 0x4dd3
  12badc:	e3412062 	movt	r2, #4194	; 0x1062
  12bae0:	e0c10293 	smull	r0, r1, r3, r2
  12bae4:	e1a022c1 	asr	r2, r1, #5
  12bae8:	e1a03fc3 	asr	r3, r3, #31
  12baec:	e0423003 	sub	r3, r2, r3
  12baf0:	e6ff2073 	uxth	r2, r3
  12baf4:	e51b300c 	ldr	r3, [fp, #-12]
  12baf8:	e1c321b6 	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
  12bafc:	e15b30dd 	ldrsb	r3, [fp, #-13]
}
  12bb00:	e1a00003 	mov	r0, r3
  12bb04:	e24bd004 	sub	sp, fp, #4
  12bb08:	e8bd8800 	pop	{fp, pc}

0012bb0c <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
  12bb0c:	e92d4800 	push	{fp, lr}
  12bb10:	e28db004 	add	fp, sp, #4
  12bb14:	e24dd020 	sub	sp, sp, #32
  12bb18:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12bb1c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12bb20:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12bb24:	e50b300c 	str	r3, [fp, #-12]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
  12bb28:	e3a01004 	mov	r1, #4
  12bb2c:	e51b000c 	ldr	r0, [fp, #-12]
  12bb30:	eb00018d 	bl	12c16c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
  12bb34:	e3a02003 	mov	r2, #3
  12bb38:	e51b100c 	ldr	r1, [fp, #-12]
  12bb3c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12bb40:	eb0005b9 	bl	12d22c <dhcp_create_msg>
  12bb44:	e1a03000 	mov	r3, r0
  12bb48:	e54b300d 	strb	r3, [fp, #-13]
  if (result == ERR_OK) {
  12bb4c:	e15b30dd 	ldrsb	r3, [fp, #-13]
  12bb50:	e3530000 	cmp	r3, #0
  12bb54:	1a000037 	bne	12bc38 <dhcp_rebind+0x12c>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
  12bb58:	e3a02002 	mov	r2, #2
  12bb5c:	e3a01039 	mov	r1, #57	; 0x39
  12bb60:	e51b000c 	ldr	r0, [fp, #-12]
  12bb64:	eb000198 	bl	12c1cc <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
  12bb68:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12bb6c:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  12bb70:	e1a01003 	mov	r1, r3
  12bb74:	e51b000c 	ldr	r0, [fp, #-12]
  12bb78:	eb0001e2 	bl	12c308 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
  12bb7c:	e3a02004 	mov	r2, #4
  12bb80:	e3a01037 	mov	r1, #55	; 0x37
  12bb84:	e51b000c 	ldr	r0, [fp, #-12]
  12bb88:	eb00018f 	bl	12c1cc <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12bb8c:	e3a03000 	mov	r3, #0
  12bb90:	e54b3005 	strb	r3, [fp, #-5]
  12bb94:	ea000009 	b	12bbc0 <dhcp_rebind+0xb4>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
  12bb98:	e55b2005 	ldrb	r2, [fp, #-5]
  12bb9c:	e30e303c 	movw	r3, #57404	; 0xe03c
  12bba0:	e3403014 	movt	r3, #20
  12bba4:	e7d33002 	ldrb	r3, [r3, r2]
  12bba8:	e1a01003 	mov	r1, r3
  12bbac:	e51b000c 	ldr	r0, [fp, #-12]
  12bbb0:	eb0001b5 	bl	12c28c <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12bbb4:	e55b3005 	ldrb	r3, [fp, #-5]
  12bbb8:	e2833001 	add	r3, r3, #1
  12bbbc:	e54b3005 	strb	r3, [fp, #-5]
  12bbc0:	e55b3005 	ldrb	r3, [fp, #-5]
  12bbc4:	e3530003 	cmp	r3, #3
  12bbc8:	9afffff2 	bls	12bb98 <dhcp_rebind+0x8c>
    }

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
  12bbcc:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  12bbd0:	e51b000c 	ldr	r0, [fp, #-12]
  12bbd4:	eb000247 	bl	12c4f8 <dhcp_option_hostname>
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
  12bbd8:	e51b000c 	ldr	r0, [fp, #-12]
  12bbdc:	eb0006ff 	bl	12d7e0 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  12bbe0:	e51b300c 	ldr	r3, [fp, #-12]
  12bbe4:	e593200c 	ldr	r2, [r3, #12]
  12bbe8:	e51b300c 	ldr	r3, [fp, #-12]
  12bbec:	e1d331b4 	ldrh	r3, [r3, #20]
  12bbf0:	e28330f0 	add	r3, r3, #240	; 0xf0
  12bbf4:	e6ff3073 	uxth	r3, r3
  12bbf8:	e1a01003 	mov	r1, r3
  12bbfc:	e1a00002 	mov	r0, r2
  12bc00:	ebffbbdc 	bl	11ab78 <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
  12bc04:	e30f3ac8 	movw	r3, #64200	; 0xfac8
  12bc08:	e3403014 	movt	r3, #20
  12bc0c:	e5930000 	ldr	r0, [r3]
  12bc10:	e51b300c 	ldr	r3, [fp, #-12]
  12bc14:	e593100c 	ldr	r1, [r3, #12]
  12bc18:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12bc1c:	e58d3000 	str	r3, [sp]
  12bc20:	e3a03043 	mov	r3, #67	; 0x43
  12bc24:	e3092ae0 	movw	r2, #39648	; 0x9ae0
  12bc28:	e3402014 	movt	r2, #20
  12bc2c:	ebfff1f8 	bl	128414 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
  12bc30:	e51b000c 	ldr	r0, [fp, #-12]
  12bc34:	eb0006b4 	bl	12d70c <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
  12bc38:	e51b300c 	ldr	r3, [fp, #-12]
  12bc3c:	e5d3300a 	ldrb	r3, [r3, #10]
  12bc40:	e35300ff 	cmp	r3, #255	; 0xff
  12bc44:	0a000005 	beq	12bc60 <dhcp_rebind+0x154>
    dhcp->tries++;
  12bc48:	e51b300c 	ldr	r3, [fp, #-12]
  12bc4c:	e5d3300a 	ldrb	r3, [r3, #10]
  12bc50:	e2833001 	add	r3, r3, #1
  12bc54:	e6ef2073 	uxtb	r2, r3
  12bc58:	e51b300c 	ldr	r3, [fp, #-12]
  12bc5c:	e5c3200a 	strb	r2, [r3, #10]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
  12bc60:	e51b300c 	ldr	r3, [fp, #-12]
  12bc64:	e5d3300a 	ldrb	r3, [r3, #10]
  12bc68:	e3530009 	cmp	r3, #9
  12bc6c:	8a00000a 	bhi	12bc9c <dhcp_rebind+0x190>
  12bc70:	e51b300c 	ldr	r3, [fp, #-12]
  12bc74:	e5d3300a 	ldrb	r3, [r3, #10]
  12bc78:	e6ff3073 	uxth	r3, r3
  12bc7c:	e1a02003 	mov	r2, r3
  12bc80:	e1a02282 	lsl	r2, r2, #5
  12bc84:	e0422003 	sub	r2, r2, r3
  12bc88:	e1a02102 	lsl	r2, r2, #2
  12bc8c:	e0823003 	add	r3, r2, r3
  12bc90:	e1a03183 	lsl	r3, r3, #3
  12bc94:	e6ff3073 	uxth	r3, r3
  12bc98:	ea000000 	b	12bca0 <dhcp_rebind+0x194>
  12bc9c:	e3023710 	movw	r3, #10000	; 0x2710
  12bca0:	e14b31b0 	strh	r3, [fp, #-16]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  12bca4:	e15b31b0 	ldrh	r3, [fp, #-16]
  12bca8:	e2833e1f 	add	r3, r3, #496	; 0x1f0
  12bcac:	e2833003 	add	r3, r3, #3
  12bcb0:	e3042dd3 	movw	r2, #19923	; 0x4dd3
  12bcb4:	e3412062 	movt	r2, #4194	; 0x1062
  12bcb8:	e0c10293 	smull	r0, r1, r3, r2
  12bcbc:	e1a022c1 	asr	r2, r1, #5
  12bcc0:	e1a03fc3 	asr	r3, r3, #31
  12bcc4:	e0423003 	sub	r3, r2, r3
  12bcc8:	e6ff2073 	uxth	r2, r3
  12bccc:	e51b300c 	ldr	r3, [fp, #-12]
  12bcd0:	e1c321b6 	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
  12bcd4:	e15b30dd 	ldrsb	r3, [fp, #-13]
}
  12bcd8:	e1a00003 	mov	r0, r3
  12bcdc:	e24bd004 	sub	sp, fp, #4
  12bce0:	e8bd8800 	pop	{fp, pc}

0012bce4 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
  12bce4:	e92d4800 	push	{fp, lr}
  12bce8:	e28db004 	add	fp, sp, #4
  12bcec:	e24dd020 	sub	sp, sp, #32
  12bcf0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12bcf4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12bcf8:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12bcfc:	e50b300c 	str	r3, [fp, #-12]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
  12bd00:	e3a01003 	mov	r1, #3
  12bd04:	e51b000c 	ldr	r0, [fp, #-12]
  12bd08:	eb000117 	bl	12c16c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
  12bd0c:	e3a02003 	mov	r2, #3
  12bd10:	e51b100c 	ldr	r1, [fp, #-12]
  12bd14:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12bd18:	eb000543 	bl	12d22c <dhcp_create_msg>
  12bd1c:	e1a03000 	mov	r3, r0
  12bd20:	e54b300d 	strb	r3, [fp, #-13]
  if (result == ERR_OK) {
  12bd24:	e15b30dd 	ldrsb	r3, [fp, #-13]
  12bd28:	e3530000 	cmp	r3, #0
  12bd2c:	1a00003e 	bne	12be2c <dhcp_reboot+0x148>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
  12bd30:	e3a02002 	mov	r2, #2
  12bd34:	e3a01039 	mov	r1, #57	; 0x39
  12bd38:	e51b000c 	ldr	r0, [fp, #-12]
  12bd3c:	eb000122 	bl	12c1cc <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
  12bd40:	e3a01d09 	mov	r1, #576	; 0x240
  12bd44:	e51b000c 	ldr	r0, [fp, #-12]
  12bd48:	eb00016e 	bl	12c308 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
  12bd4c:	e3a02004 	mov	r2, #4
  12bd50:	e3a01032 	mov	r1, #50	; 0x32
  12bd54:	e51b000c 	ldr	r0, [fp, #-12]
  12bd58:	eb00011b 	bl	12c1cc <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
  12bd5c:	e51b300c 	ldr	r3, [fp, #-12]
  12bd60:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12bd64:	e1a00003 	mov	r0, r3
  12bd68:	ebffaaa0 	bl	1167f0 <lwip_htonl>
  12bd6c:	e1a03000 	mov	r3, r0
  12bd70:	e1a01003 	mov	r1, r3
  12bd74:	e51b000c 	ldr	r0, [fp, #-12]
  12bd78:	eb000193 	bl	12c3cc <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
  12bd7c:	e3a02004 	mov	r2, #4
  12bd80:	e3a01037 	mov	r1, #55	; 0x37
  12bd84:	e51b000c 	ldr	r0, [fp, #-12]
  12bd88:	eb00010f 	bl	12c1cc <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12bd8c:	e3a03000 	mov	r3, #0
  12bd90:	e54b3005 	strb	r3, [fp, #-5]
  12bd94:	ea000009 	b	12bdc0 <dhcp_reboot+0xdc>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
  12bd98:	e55b2005 	ldrb	r2, [fp, #-5]
  12bd9c:	e30e303c 	movw	r3, #57404	; 0xe03c
  12bda0:	e3403014 	movt	r3, #20
  12bda4:	e7d33002 	ldrb	r3, [r3, r2]
  12bda8:	e1a01003 	mov	r1, r3
  12bdac:	e51b000c 	ldr	r0, [fp, #-12]
  12bdb0:	eb000135 	bl	12c28c <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
  12bdb4:	e55b3005 	ldrb	r3, [fp, #-5]
  12bdb8:	e2833001 	add	r3, r3, #1
  12bdbc:	e54b3005 	strb	r3, [fp, #-5]
  12bdc0:	e55b3005 	ldrb	r3, [fp, #-5]
  12bdc4:	e3530003 	cmp	r3, #3
  12bdc8:	9afffff2 	bls	12bd98 <dhcp_reboot+0xb4>
    }

    dhcp_option_trailer(dhcp);
  12bdcc:	e51b000c 	ldr	r0, [fp, #-12]
  12bdd0:	eb000682 	bl	12d7e0 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  12bdd4:	e51b300c 	ldr	r3, [fp, #-12]
  12bdd8:	e593200c 	ldr	r2, [r3, #12]
  12bddc:	e51b300c 	ldr	r3, [fp, #-12]
  12bde0:	e1d331b4 	ldrh	r3, [r3, #20]
  12bde4:	e28330f0 	add	r3, r3, #240	; 0xf0
  12bde8:	e6ff3073 	uxth	r3, r3
  12bdec:	e1a01003 	mov	r1, r3
  12bdf0:	e1a00002 	mov	r0, r2
  12bdf4:	ebffbb5f 	bl	11ab78 <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
  12bdf8:	e30f3ac8 	movw	r3, #64200	; 0xfac8
  12bdfc:	e3403014 	movt	r3, #20
  12be00:	e5930000 	ldr	r0, [r3]
  12be04:	e51b300c 	ldr	r3, [fp, #-12]
  12be08:	e593100c 	ldr	r1, [r3, #12]
  12be0c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12be10:	e58d3000 	str	r3, [sp]
  12be14:	e3a03043 	mov	r3, #67	; 0x43
  12be18:	e3092ae0 	movw	r2, #39648	; 0x9ae0
  12be1c:	e3402014 	movt	r2, #20
  12be20:	ebfff17b 	bl	128414 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
  12be24:	e51b000c 	ldr	r0, [fp, #-12]
  12be28:	eb000637 	bl	12d70c <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
  12be2c:	e51b300c 	ldr	r3, [fp, #-12]
  12be30:	e5d3300a 	ldrb	r3, [r3, #10]
  12be34:	e35300ff 	cmp	r3, #255	; 0xff
  12be38:	0a000005 	beq	12be54 <dhcp_reboot+0x170>
    dhcp->tries++;
  12be3c:	e51b300c 	ldr	r3, [fp, #-12]
  12be40:	e5d3300a 	ldrb	r3, [r3, #10]
  12be44:	e2833001 	add	r3, r3, #1
  12be48:	e6ef2073 	uxtb	r2, r3
  12be4c:	e51b300c 	ldr	r3, [fp, #-12]
  12be50:	e5c3200a 	strb	r2, [r3, #10]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
  12be54:	e51b300c 	ldr	r3, [fp, #-12]
  12be58:	e5d3300a 	ldrb	r3, [r3, #10]
  12be5c:	e3530009 	cmp	r3, #9
  12be60:	8a00000a 	bhi	12be90 <dhcp_reboot+0x1ac>
  12be64:	e51b300c 	ldr	r3, [fp, #-12]
  12be68:	e5d3300a 	ldrb	r3, [r3, #10]
  12be6c:	e6ff3073 	uxth	r3, r3
  12be70:	e1a02003 	mov	r2, r3
  12be74:	e1a02282 	lsl	r2, r2, #5
  12be78:	e0422003 	sub	r2, r2, r3
  12be7c:	e1a02102 	lsl	r2, r2, #2
  12be80:	e0823003 	add	r3, r2, r3
  12be84:	e1a03183 	lsl	r3, r3, #3
  12be88:	e6ff3073 	uxth	r3, r3
  12be8c:	ea000000 	b	12be94 <dhcp_reboot+0x1b0>
  12be90:	e3023710 	movw	r3, #10000	; 0x2710
  12be94:	e14b31b0 	strh	r3, [fp, #-16]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
  12be98:	e15b31b0 	ldrh	r3, [fp, #-16]
  12be9c:	e2833e1f 	add	r3, r3, #496	; 0x1f0
  12bea0:	e2833003 	add	r3, r3, #3
  12bea4:	e3042dd3 	movw	r2, #19923	; 0x4dd3
  12bea8:	e3412062 	movt	r2, #4194	; 0x1062
  12beac:	e0c10293 	smull	r0, r1, r3, r2
  12beb0:	e1a022c1 	asr	r2, r1, #5
  12beb4:	e1a03fc3 	asr	r3, r3, #31
  12beb8:	e0423003 	sub	r3, r2, r3
  12bebc:	e6ff2073 	uxth	r2, r3
  12bec0:	e51b300c 	ldr	r3, [fp, #-12]
  12bec4:	e1c321b6 	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
  12bec8:	e15b30dd 	ldrsb	r3, [fp, #-13]
}
  12becc:	e1a00003 	mov	r0, r3
  12bed0:	e24bd004 	sub	sp, fp, #4
  12bed4:	e8bd8800 	pop	{fp, pc}

0012bed8 <dhcp_release>:
 *
 * @param netif network interface which must release its lease
 */
err_t
dhcp_release(struct netif *netif)
{
  12bed8:	e92d4800 	push	{fp, lr}
  12bedc:	e28db004 	add	fp, sp, #4
  12bee0:	e24dd020 	sub	sp, sp, #32
  12bee4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12bee8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12beec:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12bef0:	e50b3008 	str	r3, [fp, #-8]
  err_t result;
  ip_addr_t server_ip_addr;
  u8_t is_dhcp_supplied_address;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release()\n"));
  if (dhcp == NULL) {
  12bef4:	e51b3008 	ldr	r3, [fp, #-8]
  12bef8:	e3530000 	cmp	r3, #0
  12befc:	1a000001 	bne	12bf08 <dhcp_release+0x30>
    return ERR_ARG;
  12bf00:	e3e0300f 	mvn	r3, #15
  12bf04:	ea000068 	b	12c0ac <dhcp_release+0x1d4>
  }
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
  12bf08:	e51b3008 	ldr	r3, [fp, #-8]
  12bf0c:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  12bf10:	e50b3010 	str	r3, [fp, #-16]

  is_dhcp_supplied_address = dhcp_supplied_address(netif);
  12bf14:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12bf18:	eb00067b 	bl	12d90c <dhcp_supplied_address>
  12bf1c:	e1a03000 	mov	r3, r0
  12bf20:	e54b3009 	strb	r3, [fp, #-9]

  /* idle DHCP client */
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
  12bf24:	e3a01000 	mov	r1, #0
  12bf28:	e51b0008 	ldr	r0, [fp, #-8]
  12bf2c:	eb00008e 	bl	12c16c <dhcp_set_state>
  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
  12bf30:	e51b3008 	ldr	r3, [fp, #-8]
  12bf34:	e3a02000 	mov	r2, #0
  12bf38:	e5832024 	str	r2, [r3, #36]	; 0x24
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
  12bf3c:	e51b3008 	ldr	r3, [fp, #-8]
  12bf40:	e3a02000 	mov	r2, #0
  12bf44:	e5832028 	str	r2, [r3, #40]	; 0x28
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
  12bf48:	e51b3008 	ldr	r3, [fp, #-8]
  12bf4c:	e3a02000 	mov	r2, #0
  12bf50:	e583202c 	str	r2, [r3, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
  12bf54:	e51b3008 	ldr	r3, [fp, #-8]
  12bf58:	e3a02000 	mov	r2, #0
  12bf5c:	e5832030 	str	r2, [r3, #48]	; 0x30
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
  12bf60:	e51b3008 	ldr	r3, [fp, #-8]
  12bf64:	e3a02000 	mov	r2, #0
  12bf68:	e583203c 	str	r2, [r3, #60]	; 0x3c
  12bf6c:	e51b3008 	ldr	r3, [fp, #-8]
  12bf70:	e593203c 	ldr	r2, [r3, #60]	; 0x3c
  12bf74:	e51b3008 	ldr	r3, [fp, #-8]
  12bf78:	e5832038 	str	r2, [r3, #56]	; 0x38
  12bf7c:	e51b3008 	ldr	r3, [fp, #-8]
  12bf80:	e5932038 	ldr	r2, [r3, #56]	; 0x38
  12bf84:	e51b3008 	ldr	r3, [fp, #-8]
  12bf88:	e5832034 	str	r2, [r3, #52]	; 0x34
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
  12bf8c:	e51b3008 	ldr	r3, [fp, #-8]
  12bf90:	e3a02000 	mov	r2, #0
  12bf94:	e1c322b2 	strh	r2, [r3, #34]	; 0x22
  12bf98:	e51b3008 	ldr	r3, [fp, #-8]
  12bf9c:	e1d322b2 	ldrh	r2, [r3, #34]	; 0x22
  12bfa0:	e51b3008 	ldr	r3, [fp, #-8]
  12bfa4:	e1c322b0 	strh	r2, [r3, #32]
  12bfa8:	e51b3008 	ldr	r3, [fp, #-8]
  12bfac:	e1d322b0 	ldrh	r2, [r3, #32]
  12bfb0:	e51b3008 	ldr	r3, [fp, #-8]
  12bfb4:	e1c321be 	strh	r2, [r3, #30]
  12bfb8:	e51b3008 	ldr	r3, [fp, #-8]
  12bfbc:	e1d321be 	ldrh	r2, [r3, #30]
  12bfc0:	e51b3008 	ldr	r3, [fp, #-8]
  12bfc4:	e1c321bc 	strh	r2, [r3, #28]

  if (!is_dhcp_supplied_address) {
  12bfc8:	e55b3009 	ldrb	r3, [fp, #-9]
  12bfcc:	e3530000 	cmp	r3, #0
  12bfd0:	1a000001 	bne	12bfdc <dhcp_release+0x104>
    /* don't issue release message when address is not dhcp-assigned */
    return ERR_OK;
  12bfd4:	e3a03000 	mov	r3, #0
  12bfd8:	ea000033 	b	12c0ac <dhcp_release+0x1d4>
  }

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_RELEASE);
  12bfdc:	e3a02007 	mov	r2, #7
  12bfe0:	e51b1008 	ldr	r1, [fp, #-8]
  12bfe4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12bfe8:	eb00048f 	bl	12d22c <dhcp_create_msg>
  12bfec:	e1a03000 	mov	r3, r0
  12bff0:	e54b300a 	strb	r3, [fp, #-10]
  if (result == ERR_OK) {
  12bff4:	e15b30da 	ldrsb	r3, [fp, #-10]
  12bff8:	e3530000 	cmp	r3, #0
  12bffc:	1a000021 	bne	12c088 <dhcp_release+0x1b0>
    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
  12c000:	e3a02004 	mov	r2, #4
  12c004:	e3a01036 	mov	r1, #54	; 0x36
  12c008:	e51b0008 	ldr	r0, [fp, #-8]
  12c00c:	eb00006e 	bl	12c1cc <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
  12c010:	e51b3010 	ldr	r3, [fp, #-16]
  12c014:	e1a00003 	mov	r0, r3
  12c018:	ebffa9f4 	bl	1167f0 <lwip_htonl>
  12c01c:	e1a03000 	mov	r3, r0
  12c020:	e1a01003 	mov	r1, r3
  12c024:	e51b0008 	ldr	r0, [fp, #-8]
  12c028:	eb0000e7 	bl	12c3cc <dhcp_option_long>

    dhcp_option_trailer(dhcp);
  12c02c:	e51b0008 	ldr	r0, [fp, #-8]
  12c030:	eb0005ea 	bl	12d7e0 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
  12c034:	e51b3008 	ldr	r3, [fp, #-8]
  12c038:	e593200c 	ldr	r2, [r3, #12]
  12c03c:	e51b3008 	ldr	r3, [fp, #-8]
  12c040:	e1d331b4 	ldrh	r3, [r3, #20]
  12c044:	e28330f0 	add	r3, r3, #240	; 0xf0
  12c048:	e6ff3073 	uxth	r3, r3
  12c04c:	e1a01003 	mov	r1, r3
  12c050:	e1a00002 	mov	r0, r2
  12c054:	ebffbac7 	bl	11ab78 <pbuf_realloc>

    udp_sendto_if(dhcp_pcb, dhcp->p_out, &server_ip_addr, DHCP_SERVER_PORT, netif);
  12c058:	e30f3ac8 	movw	r3, #64200	; 0xfac8
  12c05c:	e3403014 	movt	r3, #20
  12c060:	e5930000 	ldr	r0, [r3]
  12c064:	e51b3008 	ldr	r3, [fp, #-8]
  12c068:	e593100c 	ldr	r1, [r3, #12]
  12c06c:	e24b2010 	sub	r2, fp, #16
  12c070:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12c074:	e58d3000 	str	r3, [sp]
  12c078:	e3a03043 	mov	r3, #67	; 0x43
  12c07c:	ebfff0e4 	bl	128414 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
  12c080:	e51b0008 	ldr	r0, [fp, #-8]
  12c084:	eb0005a0 	bl	12d70c <dhcp_delete_msg>
  } else {
    /* sending release failed, but that's not a problem since the correct behaviour of dhcp does not rely on release */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
  }
  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
  12c088:	e3093adc 	movw	r3, #39644	; 0x9adc
  12c08c:	e3403014 	movt	r3, #20
  12c090:	e3092adc 	movw	r2, #39644	; 0x9adc
  12c094:	e3402014 	movt	r2, #20
  12c098:	e3091adc 	movw	r1, #39644	; 0x9adc
  12c09c:	e3401014 	movt	r1, #20
  12c0a0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12c0a4:	ebffb58e 	bl	1196e4 <netif_set_addr>

  return result;
  12c0a8:	e15b30da 	ldrsb	r3, [fp, #-10]
}
  12c0ac:	e1a00003 	mov	r0, r3
  12c0b0:	e24bd004 	sub	sp, fp, #4
  12c0b4:	e8bd8800 	pop	{fp, pc}

0012c0b8 <dhcp_stop>:
 *
 * @param netif The network interface to stop DHCP on
 */
void
dhcp_stop(struct netif *netif)
{
  12c0b8:	e92d4800 	push	{fp, lr}
  12c0bc:	e28db004 	add	fp, sp, #4
  12c0c0:	e24dd010 	sub	sp, sp, #16
  12c0c4:	e50b0010 	str	r0, [fp, #-16]
  struct dhcp *dhcp;
  LWIP_ERROR("dhcp_stop: netif != NULL", (netif != NULL), return;);
  12c0c8:	e51b3010 	ldr	r3, [fp, #-16]
  12c0cc:	e3530000 	cmp	r3, #0
  12c0d0:	1a000007 	bne	12c0f4 <dhcp_stop+0x3c>
  12c0d4:	e3090064 	movw	r0, #36964	; 0x9064
  12c0d8:	e3400014 	movt	r0, #20
  12c0dc:	ebff5c0c 	bl	103114 <rt_kprintf>
  12c0e0:	e3001543 	movw	r1, #1347	; 0x543
  12c0e4:	e3080f44 	movw	r0, #36676	; 0x8f44
  12c0e8:	e3400014 	movt	r0, #20
  12c0ec:	ebff7bdc 	bl	10b064 <sys_arch_assert>
  12c0f0:	ea00001b 	b	12c164 <dhcp_stop+0xac>
  dhcp = netif_dhcp_data(netif);
  12c0f4:	e51b3010 	ldr	r3, [fp, #-16]
  12c0f8:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12c0fc:	e50b3008 	str	r3, [fp, #-8]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_stop()\n"));
  /* netif is DHCP configured? */
  if (dhcp != NULL) {
  12c100:	e51b3008 	ldr	r3, [fp, #-8]
  12c104:	e3530000 	cmp	r3, #0
  12c108:	0a000015 	beq	12c164 <dhcp_stop+0xac>
      autoip_stop(netif);
      dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
    }
#endif /* LWIP_DHCP_AUTOIP_COOP */

    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
  12c10c:	e51b3008 	ldr	r3, [fp, #-8]
  12c110:	e5933004 	ldr	r3, [r3, #4]
  12c114:	e3530000 	cmp	r3, #0
  12c118:	0a000006 	beq	12c138 <dhcp_stop+0x80>
  12c11c:	e309001c 	movw	r0, #36892	; 0x901c
  12c120:	e3400014 	movt	r0, #20
  12c124:	ebff5bfa 	bl	103114 <rt_kprintf>
  12c128:	e3a01e55 	mov	r1, #1360	; 0x550
  12c12c:	e3080f44 	movw	r0, #36676	; 0x8f44
  12c130:	e3400014 	movt	r0, #20
  12c134:	ebff7bca 	bl	10b064 <sys_arch_assert>
    dhcp_set_state(dhcp, DHCP_STATE_OFF);
  12c138:	e3a01000 	mov	r1, #0
  12c13c:	e51b0008 	ldr	r0, [fp, #-8]
  12c140:	eb000009 	bl	12c16c <dhcp_set_state>

    if (dhcp->pcb_allocated != 0) {
  12c144:	e51b3008 	ldr	r3, [fp, #-8]
  12c148:	e5d33008 	ldrb	r3, [r3, #8]
  12c14c:	e3530000 	cmp	r3, #0
  12c150:	0a000003 	beq	12c164 <dhcp_stop+0xac>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
  12c154:	ebfff868 	bl	12a2fc <dhcp_dec_pcb_refcount>
      dhcp->pcb_allocated = 0;
  12c158:	e51b3008 	ldr	r3, [fp, #-8]
  12c15c:	e3a02000 	mov	r2, #0
  12c160:	e5c32008 	strb	r2, [r3, #8]
    }
  }
}
  12c164:	e24bd004 	sub	sp, fp, #4
  12c168:	e8bd8800 	pop	{fp, pc}

0012c16c <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
  12c16c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  12c170:	e28db000 	add	fp, sp, #0
  12c174:	e24dd00c 	sub	sp, sp, #12
  12c178:	e50b0008 	str	r0, [fp, #-8]
  12c17c:	e1a03001 	mov	r3, r1
  12c180:	e54b3009 	strb	r3, [fp, #-9]
  if (new_state != dhcp->state) {
  12c184:	e51b3008 	ldr	r3, [fp, #-8]
  12c188:	e5d33009 	ldrb	r3, [r3, #9]
  12c18c:	e55b2009 	ldrb	r2, [fp, #-9]
  12c190:	e1520003 	cmp	r2, r3
  12c194:	0a000008 	beq	12c1bc <dhcp_set_state+0x50>
    dhcp->state = new_state;
  12c198:	e51b3008 	ldr	r3, [fp, #-8]
  12c19c:	e55b2009 	ldrb	r2, [fp, #-9]
  12c1a0:	e5c32009 	strb	r2, [r3, #9]
    dhcp->tries = 0;
  12c1a4:	e51b3008 	ldr	r3, [fp, #-8]
  12c1a8:	e3a02000 	mov	r2, #0
  12c1ac:	e5c3200a 	strb	r2, [r3, #10]
    dhcp->request_timeout = 0;
  12c1b0:	e51b3008 	ldr	r3, [fp, #-8]
  12c1b4:	e3a02000 	mov	r2, #0
  12c1b8:	e1c321b6 	strh	r2, [r3, #22]
  }
}
  12c1bc:	e320f000 	nop	{0}
  12c1c0:	e28bd000 	add	sp, fp, #0
  12c1c4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  12c1c8:	e12fff1e 	bx	lr

0012c1cc <dhcp_option>:
 * DHCP message.
 *
 */
static void
dhcp_option(struct dhcp *dhcp, u8_t option_type, u8_t option_len)
{
  12c1cc:	e92d4800 	push	{fp, lr}
  12c1d0:	e28db004 	add	fp, sp, #4
  12c1d4:	e24dd008 	sub	sp, sp, #8
  12c1d8:	e50b0008 	str	r0, [fp, #-8]
  12c1dc:	e1a03001 	mov	r3, r1
  12c1e0:	e54b3009 	strb	r3, [fp, #-9]
  12c1e4:	e1a03002 	mov	r3, r2
  12c1e8:	e54b300a 	strb	r3, [fp, #-10]
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
  12c1ec:	e51b3008 	ldr	r3, [fp, #-8]
  12c1f0:	e1d331b4 	ldrh	r3, [r3, #20]
  12c1f4:	e1a02003 	mov	r2, r3
  12c1f8:	e55b300a 	ldrb	r3, [fp, #-10]
  12c1fc:	e0823003 	add	r3, r2, r3
  12c200:	e2833002 	add	r3, r3, #2
  12c204:	e3530044 	cmp	r3, #68	; 0x44
  12c208:	9a000006 	bls	12c228 <dhcp_option+0x5c>
  12c20c:	e3090080 	movw	r0, #36992	; 0x9080
  12c210:	e3400014 	movt	r0, #20
  12c214:	ebff5bbe 	bl	103114 <rt_kprintf>
  12c218:	e3001571 	movw	r1, #1393	; 0x571
  12c21c:	e3080f44 	movw	r0, #36676	; 0x8f44
  12c220:	e3400014 	movt	r0, #20
  12c224:	ebff7b8e 	bl	10b064 <sys_arch_assert>
  dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
  12c228:	e51b3008 	ldr	r3, [fp, #-8]
  12c22c:	e5932010 	ldr	r2, [r3, #16]
  12c230:	e51b3008 	ldr	r3, [fp, #-8]
  12c234:	e1d331b4 	ldrh	r3, [r3, #20]
  12c238:	e2831001 	add	r1, r3, #1
  12c23c:	e6ff0071 	uxth	r0, r1
  12c240:	e51b1008 	ldr	r1, [fp, #-8]
  12c244:	e1c101b4 	strh	r0, [r1, #20]
  12c248:	e0823003 	add	r3, r2, r3
  12c24c:	e55b2009 	ldrb	r2, [fp, #-9]
  12c250:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
  12c254:	e51b3008 	ldr	r3, [fp, #-8]
  12c258:	e5932010 	ldr	r2, [r3, #16]
  12c25c:	e51b3008 	ldr	r3, [fp, #-8]
  12c260:	e1d331b4 	ldrh	r3, [r3, #20]
  12c264:	e2831001 	add	r1, r3, #1
  12c268:	e6ff0071 	uxth	r0, r1
  12c26c:	e51b1008 	ldr	r1, [fp, #-8]
  12c270:	e1c101b4 	strh	r0, [r1, #20]
  12c274:	e0823003 	add	r3, r2, r3
  12c278:	e55b200a 	ldrb	r2, [fp, #-10]
  12c27c:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
}
  12c280:	e320f000 	nop	{0}
  12c284:	e24bd004 	sub	sp, fp, #4
  12c288:	e8bd8800 	pop	{fp, pc}

0012c28c <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static void
dhcp_option_byte(struct dhcp *dhcp, u8_t value)
{
  12c28c:	e92d4800 	push	{fp, lr}
  12c290:	e28db004 	add	fp, sp, #4
  12c294:	e24dd008 	sub	sp, sp, #8
  12c298:	e50b0008 	str	r0, [fp, #-8]
  12c29c:	e1a03001 	mov	r3, r1
  12c2a0:	e54b3009 	strb	r3, [fp, #-9]
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
  12c2a4:	e51b3008 	ldr	r3, [fp, #-8]
  12c2a8:	e1d331b4 	ldrh	r3, [r3, #20]
  12c2ac:	e3530043 	cmp	r3, #67	; 0x43
  12c2b0:	9a000006 	bls	12c2d0 <dhcp_option_byte+0x44>
  12c2b4:	e30900c8 	movw	r0, #37064	; 0x90c8
  12c2b8:	e3400014 	movt	r0, #20
  12c2bc:	ebff5b94 	bl	103114 <rt_kprintf>
  12c2c0:	e300157c 	movw	r1, #1404	; 0x57c
  12c2c4:	e3080f44 	movw	r0, #36676	; 0x8f44
  12c2c8:	e3400014 	movt	r0, #20
  12c2cc:	ebff7b64 	bl	10b064 <sys_arch_assert>
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
  12c2d0:	e51b3008 	ldr	r3, [fp, #-8]
  12c2d4:	e5932010 	ldr	r2, [r3, #16]
  12c2d8:	e51b3008 	ldr	r3, [fp, #-8]
  12c2dc:	e1d331b4 	ldrh	r3, [r3, #20]
  12c2e0:	e2831001 	add	r1, r3, #1
  12c2e4:	e6ff0071 	uxth	r0, r1
  12c2e8:	e51b1008 	ldr	r1, [fp, #-8]
  12c2ec:	e1c101b4 	strh	r0, [r1, #20]
  12c2f0:	e0823003 	add	r3, r2, r3
  12c2f4:	e55b2009 	ldrb	r2, [fp, #-9]
  12c2f8:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
}
  12c2fc:	e320f000 	nop	{0}
  12c300:	e24bd004 	sub	sp, fp, #4
  12c304:	e8bd8800 	pop	{fp, pc}

0012c308 <dhcp_option_short>:

static void
dhcp_option_short(struct dhcp *dhcp, u16_t value)
{
  12c308:	e92d4800 	push	{fp, lr}
  12c30c:	e28db004 	add	fp, sp, #4
  12c310:	e24dd008 	sub	sp, sp, #8
  12c314:	e50b0008 	str	r0, [fp, #-8]
  12c318:	e1a03001 	mov	r3, r1
  12c31c:	e14b30ba 	strh	r3, [fp, #-10]
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
  12c320:	e51b3008 	ldr	r3, [fp, #-8]
  12c324:	e1d331b4 	ldrh	r3, [r3, #20]
  12c328:	e2833002 	add	r3, r3, #2
  12c32c:	e3530044 	cmp	r3, #68	; 0x44
  12c330:	9a000006 	bls	12c350 <dhcp_option_short+0x48>
  12c334:	e3090104 	movw	r0, #37124	; 0x9104
  12c338:	e3400014 	movt	r0, #20
  12c33c:	ebff5b74 	bl	103114 <rt_kprintf>
  12c340:	e3001583 	movw	r1, #1411	; 0x583
  12c344:	e3080f44 	movw	r0, #36676	; 0x8f44
  12c348:	e3400014 	movt	r0, #20
  12c34c:	ebff7b44 	bl	10b064 <sys_arch_assert>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
  12c350:	e15b30ba 	ldrh	r3, [fp, #-10]
  12c354:	e1a03423 	lsr	r3, r3, #8
  12c358:	e6ffc073 	uxth	ip, r3
  12c35c:	e51b3008 	ldr	r3, [fp, #-8]
  12c360:	e5932010 	ldr	r2, [r3, #16]
  12c364:	e51b3008 	ldr	r3, [fp, #-8]
  12c368:	e1d331b4 	ldrh	r3, [r3, #20]
  12c36c:	e2831001 	add	r1, r3, #1
  12c370:	e6ff0071 	uxth	r0, r1
  12c374:	e51b1008 	ldr	r1, [fp, #-8]
  12c378:	e1c101b4 	strh	r0, [r1, #20]
  12c37c:	e6ef107c 	uxtb	r1, ip
  12c380:	e0823003 	add	r3, r2, r3
  12c384:	e1a02001 	mov	r2, r1
  12c388:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
  12c38c:	e51b3008 	ldr	r3, [fp, #-8]
  12c390:	e5932010 	ldr	r2, [r3, #16]
  12c394:	e51b3008 	ldr	r3, [fp, #-8]
  12c398:	e1d331b4 	ldrh	r3, [r3, #20]
  12c39c:	e2831001 	add	r1, r3, #1
  12c3a0:	e6ff0071 	uxth	r0, r1
  12c3a4:	e51b1008 	ldr	r1, [fp, #-8]
  12c3a8:	e1c101b4 	strh	r0, [r1, #20]
  12c3ac:	e15b10ba 	ldrh	r1, [fp, #-10]
  12c3b0:	e6ef1071 	uxtb	r1, r1
  12c3b4:	e0823003 	add	r3, r2, r3
  12c3b8:	e1a02001 	mov	r2, r1
  12c3bc:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
}
  12c3c0:	e320f000 	nop	{0}
  12c3c4:	e24bd004 	sub	sp, fp, #4
  12c3c8:	e8bd8800 	pop	{fp, pc}

0012c3cc <dhcp_option_long>:

static void
dhcp_option_long(struct dhcp *dhcp, u32_t value)
{
  12c3cc:	e92d4800 	push	{fp, lr}
  12c3d0:	e28db004 	add	fp, sp, #4
  12c3d4:	e24dd008 	sub	sp, sp, #8
  12c3d8:	e50b0008 	str	r0, [fp, #-8]
  12c3dc:	e50b100c 	str	r1, [fp, #-12]
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
  12c3e0:	e51b3008 	ldr	r3, [fp, #-8]
  12c3e4:	e1d331b4 	ldrh	r3, [r3, #20]
  12c3e8:	e2833004 	add	r3, r3, #4
  12c3ec:	e3530044 	cmp	r3, #68	; 0x44
  12c3f0:	9a000006 	bls	12c410 <dhcp_option_long+0x44>
  12c3f4:	e3090148 	movw	r0, #37192	; 0x9148
  12c3f8:	e3400014 	movt	r0, #20
  12c3fc:	ebff5b44 	bl	103114 <rt_kprintf>
  12c400:	e300158b 	movw	r1, #1419	; 0x58b
  12c404:	e3080f44 	movw	r0, #36676	; 0x8f44
  12c408:	e3400014 	movt	r0, #20
  12c40c:	ebff7b14 	bl	10b064 <sys_arch_assert>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
  12c410:	e51b300c 	ldr	r3, [fp, #-12]
  12c414:	e1a0cc23 	lsr	ip, r3, #24
  12c418:	e51b3008 	ldr	r3, [fp, #-8]
  12c41c:	e5932010 	ldr	r2, [r3, #16]
  12c420:	e51b3008 	ldr	r3, [fp, #-8]
  12c424:	e1d331b4 	ldrh	r3, [r3, #20]
  12c428:	e2831001 	add	r1, r3, #1
  12c42c:	e6ff0071 	uxth	r0, r1
  12c430:	e51b1008 	ldr	r1, [fp, #-8]
  12c434:	e1c101b4 	strh	r0, [r1, #20]
  12c438:	e6ef107c 	uxtb	r1, ip
  12c43c:	e0823003 	add	r3, r2, r3
  12c440:	e1a02001 	mov	r2, r1
  12c444:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
  12c448:	e51b300c 	ldr	r3, [fp, #-12]
  12c44c:	e1a0c823 	lsr	ip, r3, #16
  12c450:	e51b3008 	ldr	r3, [fp, #-8]
  12c454:	e5932010 	ldr	r2, [r3, #16]
  12c458:	e51b3008 	ldr	r3, [fp, #-8]
  12c45c:	e1d331b4 	ldrh	r3, [r3, #20]
  12c460:	e2831001 	add	r1, r3, #1
  12c464:	e6ff0071 	uxth	r0, r1
  12c468:	e51b1008 	ldr	r1, [fp, #-8]
  12c46c:	e1c101b4 	strh	r0, [r1, #20]
  12c470:	e6ef107c 	uxtb	r1, ip
  12c474:	e0823003 	add	r3, r2, r3
  12c478:	e1a02001 	mov	r2, r1
  12c47c:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
  12c480:	e51b300c 	ldr	r3, [fp, #-12]
  12c484:	e1a0c423 	lsr	ip, r3, #8
  12c488:	e51b3008 	ldr	r3, [fp, #-8]
  12c48c:	e5932010 	ldr	r2, [r3, #16]
  12c490:	e51b3008 	ldr	r3, [fp, #-8]
  12c494:	e1d331b4 	ldrh	r3, [r3, #20]
  12c498:	e2831001 	add	r1, r3, #1
  12c49c:	e6ff0071 	uxth	r0, r1
  12c4a0:	e51b1008 	ldr	r1, [fp, #-8]
  12c4a4:	e1c101b4 	strh	r0, [r1, #20]
  12c4a8:	e6ef107c 	uxtb	r1, ip
  12c4ac:	e0823003 	add	r3, r2, r3
  12c4b0:	e1a02001 	mov	r2, r1
  12c4b4:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
  12c4b8:	e51b3008 	ldr	r3, [fp, #-8]
  12c4bc:	e5932010 	ldr	r2, [r3, #16]
  12c4c0:	e51b3008 	ldr	r3, [fp, #-8]
  12c4c4:	e1d331b4 	ldrh	r3, [r3, #20]
  12c4c8:	e2831001 	add	r1, r3, #1
  12c4cc:	e6ff0071 	uxth	r0, r1
  12c4d0:	e51b1008 	ldr	r1, [fp, #-8]
  12c4d4:	e1c101b4 	strh	r0, [r1, #20]
  12c4d8:	e51b100c 	ldr	r1, [fp, #-12]
  12c4dc:	e6ef1071 	uxtb	r1, r1
  12c4e0:	e0823003 	add	r3, r2, r3
  12c4e4:	e1a02001 	mov	r2, r1
  12c4e8:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
}
  12c4ec:	e320f000 	nop	{0}
  12c4f0:	e24bd004 	sub	sp, fp, #4
  12c4f4:	e8bd8800 	pop	{fp, pc}

0012c4f8 <dhcp_option_hostname>:

#if LWIP_NETIF_HOSTNAME
static void
dhcp_option_hostname(struct dhcp *dhcp, struct netif *netif)
{
  12c4f8:	e92d4800 	push	{fp, lr}
  12c4fc:	e28db004 	add	fp, sp, #4
  12c500:	e24dd018 	sub	sp, sp, #24
  12c504:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  12c508:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  if (netif->hostname != NULL) {
  12c50c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12c510:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  12c514:	e3530000 	cmp	r3, #0
  12c518:	0a00003c 	beq	12c610 <dhcp_option_hostname+0x118>
    size_t namelen = strlen(netif->hostname);
  12c51c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12c520:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  12c524:	e1a00003 	mov	r0, r3
  12c528:	eb00545c 	bl	1416a0 <strlen>
  12c52c:	e50b0010 	str	r0, [fp, #-16]
    if (namelen > 0) {
  12c530:	e51b3010 	ldr	r3, [fp, #-16]
  12c534:	e3530000 	cmp	r3, #0
  12c538:	0a000034 	beq	12c610 <dhcp_option_hostname+0x118>
      size_t len;
      const char *p = netif->hostname;
  12c53c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12c540:	e5933034 	ldr	r3, [r3, #52]	; 0x34
  12c544:	e50b300c 	str	r3, [fp, #-12]
      /* Shrink len to available bytes (need 2 bytes for OPTION_HOSTNAME
         and 1 byte for trailer) */
      size_t available = DHCP_OPTIONS_LEN - dhcp->options_out_len - 3;
  12c548:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12c54c:	e1d331b4 	ldrh	r3, [r3, #20]
  12c550:	e2633041 	rsb	r3, r3, #65	; 0x41
  12c554:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
      LWIP_ASSERT("DHCP: hostname is too long!", namelen <= available);
  12c558:	e51b2010 	ldr	r2, [fp, #-16]
  12c55c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c560:	e1520003 	cmp	r2, r3
  12c564:	9a000006 	bls	12c584 <dhcp_option_hostname+0x8c>
  12c568:	e3090188 	movw	r0, #37256	; 0x9188
  12c56c:	e3400014 	movt	r0, #20
  12c570:	ebff5ae7 	bl	103114 <rt_kprintf>
  12c574:	e300159e 	movw	r1, #1438	; 0x59e
  12c578:	e3080f44 	movw	r0, #36676	; 0x8f44
  12c57c:	e3400014 	movt	r0, #20
  12c580:	ebff7ab7 	bl	10b064 <sys_arch_assert>
      len = LWIP_MIN(namelen, available);
  12c584:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  12c588:	e51b3010 	ldr	r3, [fp, #-16]
  12c58c:	e1520003 	cmp	r2, r3
  12c590:	31a03002 	movcc	r3, r2
  12c594:	21a03003 	movcs	r3, r3
  12c598:	e50b3008 	str	r3, [fp, #-8]
      LWIP_ASSERT("DHCP: hostname is too long!", len <= 0xFF);
  12c59c:	e51b3008 	ldr	r3, [fp, #-8]
  12c5a0:	e35300ff 	cmp	r3, #255	; 0xff
  12c5a4:	9a000006 	bls	12c5c4 <dhcp_option_hostname+0xcc>
  12c5a8:	e3090188 	movw	r0, #37256	; 0x9188
  12c5ac:	e3400014 	movt	r0, #20
  12c5b0:	ebff5ad7 	bl	103114 <rt_kprintf>
  12c5b4:	e3a01e5a 	mov	r1, #1440	; 0x5a0
  12c5b8:	e3080f44 	movw	r0, #36676	; 0x8f44
  12c5bc:	e3400014 	movt	r0, #20
  12c5c0:	ebff7aa7 	bl	10b064 <sys_arch_assert>
      dhcp_option(dhcp, DHCP_OPTION_HOSTNAME, (u8_t)len);
  12c5c4:	e51b3008 	ldr	r3, [fp, #-8]
  12c5c8:	e6ef3073 	uxtb	r3, r3
  12c5cc:	e1a02003 	mov	r2, r3
  12c5d0:	e3a0100c 	mov	r1, #12
  12c5d4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12c5d8:	ebfffefb 	bl	12c1cc <dhcp_option>
      while (len--) {
  12c5dc:	ea000006 	b	12c5fc <dhcp_option_hostname+0x104>
        dhcp_option_byte(dhcp, *p++);
  12c5e0:	e51b300c 	ldr	r3, [fp, #-12]
  12c5e4:	e2832001 	add	r2, r3, #1
  12c5e8:	e50b200c 	str	r2, [fp, #-12]
  12c5ec:	e5d33000 	ldrb	r3, [r3]
  12c5f0:	e1a01003 	mov	r1, r3
  12c5f4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12c5f8:	ebffff23 	bl	12c28c <dhcp_option_byte>
      while (len--) {
  12c5fc:	e51b3008 	ldr	r3, [fp, #-8]
  12c600:	e2432001 	sub	r2, r3, #1
  12c604:	e50b2008 	str	r2, [fp, #-8]
  12c608:	e3530000 	cmp	r3, #0
  12c60c:	1afffff3 	bne	12c5e0 <dhcp_option_hostname+0xe8>
      }
    }
  }
}
  12c610:	e320f000 	nop	{0}
  12c614:	e24bd004 	sub	sp, fp, #4
  12c618:	e8bd8800 	pop	{fp, pc}

0012c61c <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct dhcp *dhcp, struct pbuf *p)
{
  12c61c:	e92d4800 	push	{fp, lr}
  12c620:	e28db004 	add	fp, sp, #4
  12c624:	e24dd038 	sub	sp, sp, #56	; 0x38
  12c628:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
  12c62c:	e50b103c 	str	r1, [fp, #-60]	; 0xffffffc4
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
  12c630:	e3a03000 	mov	r3, #0
  12c634:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  int parse_sname_as_options = 0;
  12c638:	e3a03000 	mov	r3, #0
  12c63c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

  /* clear received options */
  dhcp_clear_all_options(dhcp);
  12c640:	e3a0200a 	mov	r2, #10
  12c644:	e3a01000 	mov	r1, #0
  12c648:	e3060a4c 	movw	r0, #27212	; 0x6a4c
  12c64c:	e3400057 	movt	r0, #87	; 0x57
  12c650:	eb005381 	bl	14145c <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
  12c654:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  12c658:	e1d330ba 	ldrh	r3, [r3, #10]
  12c65c:	e353002b 	cmp	r3, #43	; 0x2b
  12c660:	8a000001 	bhi	12c66c <dhcp_parse_reply+0x50>
    return ERR_BUF;
  12c664:	e3e03001 	mvn	r3, #1
  12c668:	ea00022e 	b	12cf28 <dhcp_parse_reply+0x90c>
  }
  dhcp->msg_in = (struct dhcp_msg *)p->payload;
  12c66c:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  12c670:	e5932004 	ldr	r2, [r3, #4]
  12c674:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  12c678:	e5832004 	str	r2, [r3, #4]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
  12c67c:	e3a030f0 	mov	r3, #240	; 0xf0
  12c680:	e14b30be 	strh	r3, [fp, #-14]
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
  12c684:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  12c688:	e1d330b8 	ldrh	r3, [r3, #8]
  12c68c:	e14b31b0 	strh	r3, [fp, #-16]
again:
  q = p;
  12c690:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  12c694:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  while ((q != NULL) && (options_idx >= q->len)) {
  12c698:	ea00000c 	b	12c6d0 <dhcp_parse_reply+0xb4>
    options_idx -= q->len;
  12c69c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c6a0:	e1d330ba 	ldrh	r3, [r3, #10]
  12c6a4:	e15b20be 	ldrh	r2, [fp, #-14]
  12c6a8:	e0423003 	sub	r3, r2, r3
  12c6ac:	e14b30be 	strh	r3, [fp, #-14]
    options_idx_max -= q->len;
  12c6b0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c6b4:	e1d330ba 	ldrh	r3, [r3, #10]
  12c6b8:	e15b21b0 	ldrh	r2, [fp, #-16]
  12c6bc:	e0423003 	sub	r3, r2, r3
  12c6c0:	e14b31b0 	strh	r3, [fp, #-16]
    q = q->next;
  12c6c4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c6c8:	e5933000 	ldr	r3, [r3]
  12c6cc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  while ((q != NULL) && (options_idx >= q->len)) {
  12c6d0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c6d4:	e3530000 	cmp	r3, #0
  12c6d8:	0a000004 	beq	12c6f0 <dhcp_parse_reply+0xd4>
  12c6dc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c6e0:	e1d330ba 	ldrh	r3, [r3, #10]
  12c6e4:	e15b20be 	ldrh	r2, [fp, #-14]
  12c6e8:	e1520003 	cmp	r2, r3
  12c6ec:	2affffea 	bcs	12c69c <dhcp_parse_reply+0x80>
  }
  if (q == NULL) {
  12c6f0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c6f4:	e3530000 	cmp	r3, #0
  12c6f8:	1a000001 	bne	12c704 <dhcp_parse_reply+0xe8>
    return ERR_BUF;
  12c6fc:	e3e03001 	mvn	r3, #1
  12c700:	ea000208 	b	12cf28 <dhcp_parse_reply+0x90c>
  }
  offset = options_idx;
  12c704:	e15b30be 	ldrh	r3, [fp, #-14]
  12c708:	e14b30ba 	strh	r3, [fp, #-10]
  offset_max = options_idx_max;
  12c70c:	e15b31b0 	ldrh	r3, [fp, #-16]
  12c710:	e14b30bc 	strh	r3, [fp, #-12]
  options = (u8_t*)q->payload;
  12c714:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c718:	e5933004 	ldr	r3, [r3, #4]
  12c71c:	e50b3008 	str	r3, [fp, #-8]
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (options[offset] != DHCP_OPTION_END) && (offset < offset_max)) {
  12c720:	ea0001be 	b	12ce20 <dhcp_parse_reply+0x804>
    u8_t op = options[offset];
  12c724:	e15b30ba 	ldrh	r3, [fp, #-10]
  12c728:	e51b2008 	ldr	r2, [fp, #-8]
  12c72c:	e0823003 	add	r3, r2, r3
  12c730:	e5d33000 	ldrb	r3, [r3]
  12c734:	e54b3027 	strb	r3, [fp, #-39]	; 0xffffffd9
    u8_t len;
    u8_t decode_len = 0;
  12c738:	e3a03000 	mov	r3, #0
  12c73c:	e54b301e 	strb	r3, [fp, #-30]	; 0xffffffe2
    int decode_idx = -1;
  12c740:	e3e03000 	mvn	r3, #0
  12c744:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    u16_t val_offset = offset + 2;
  12c748:	e15b30ba 	ldrh	r3, [fp, #-10]
  12c74c:	e2833002 	add	r3, r3, #2
  12c750:	e14b32b6 	strh	r3, [fp, #-38]	; 0xffffffda
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
  12c754:	e15b30ba 	ldrh	r3, [fp, #-10]
  12c758:	e2833001 	add	r3, r3, #1
  12c75c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  12c760:	e1d220ba 	ldrh	r2, [r2, #10]
  12c764:	e1530002 	cmp	r3, r2
  12c768:	aa000006 	bge	12c788 <dhcp_parse_reply+0x16c>
      len = options[offset + 1];
  12c76c:	e15b30ba 	ldrh	r3, [fp, #-10]
  12c770:	e2833001 	add	r3, r3, #1
  12c774:	e51b2008 	ldr	r2, [fp, #-8]
  12c778:	e0823003 	add	r3, r2, r3
  12c77c:	e5d33000 	ldrb	r3, [r3]
  12c780:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
  12c784:	ea00000a 	b	12c7b4 <dhcp_parse_reply+0x198>
    } else {
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
  12c788:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c78c:	e5933000 	ldr	r3, [r3]
  12c790:	e3530000 	cmp	r3, #0
  12c794:	0a000004 	beq	12c7ac <dhcp_parse_reply+0x190>
  12c798:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12c79c:	e5933000 	ldr	r3, [r3]
  12c7a0:	e5933004 	ldr	r3, [r3, #4]
  12c7a4:	e5d33000 	ldrb	r3, [r3]
  12c7a8:	ea000000 	b	12c7b0 <dhcp_parse_reply+0x194>
  12c7ac:	e3a03000 	mov	r3, #0
  12c7b0:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
  12c7b4:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c7b8:	e54b301e 	strb	r3, [fp, #-30]	; 0xffffffe2
    switch(op) {
  12c7bc:	e55b3027 	ldrb	r3, [fp, #-39]	; 0xffffffd9
  12c7c0:	e353003b 	cmp	r3, #59	; 0x3b
  12c7c4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  12c7c8:	ea0000ed 	b	12cb84 <dhcp_parse_reply+0x568>
  12c7cc:	0012c8bc 	.word	0x0012c8bc
  12c7d0:	0012c8dc 	.word	0x0012c8dc
  12c7d4:	0012cb84 	.word	0x0012cb84
  12c7d8:	0012c918 	.word	0x0012c918
  12c7dc:	0012cb84 	.word	0x0012cb84
  12c7e0:	0012cb84 	.word	0x0012cb84
  12c7e4:	0012c960 	.word	0x0012c960
  12c7e8:	0012cb84 	.word	0x0012cb84
  12c7ec:	0012cb84 	.word	0x0012cb84
  12c7f0:	0012cb84 	.word	0x0012cb84
  12c7f4:	0012cb84 	.word	0x0012cb84
  12c7f8:	0012cb84 	.word	0x0012cb84
  12c7fc:	0012cb84 	.word	0x0012cb84
  12c800:	0012cb84 	.word	0x0012cb84
  12c804:	0012cb84 	.word	0x0012cb84
  12c808:	0012cb84 	.word	0x0012cb84
  12c80c:	0012cb84 	.word	0x0012cb84
  12c810:	0012cb84 	.word	0x0012cb84
  12c814:	0012cb84 	.word	0x0012cb84
  12c818:	0012cb84 	.word	0x0012cb84
  12c81c:	0012cb84 	.word	0x0012cb84
  12c820:	0012cb84 	.word	0x0012cb84
  12c824:	0012cb84 	.word	0x0012cb84
  12c828:	0012cb84 	.word	0x0012cb84
  12c82c:	0012cb84 	.word	0x0012cb84
  12c830:	0012cb84 	.word	0x0012cb84
  12c834:	0012cb84 	.word	0x0012cb84
  12c838:	0012cb84 	.word	0x0012cb84
  12c83c:	0012cb84 	.word	0x0012cb84
  12c840:	0012cb84 	.word	0x0012cb84
  12c844:	0012cb84 	.word	0x0012cb84
  12c848:	0012cb84 	.word	0x0012cb84
  12c84c:	0012cb84 	.word	0x0012cb84
  12c850:	0012cb84 	.word	0x0012cb84
  12c854:	0012cb84 	.word	0x0012cb84
  12c858:	0012cb84 	.word	0x0012cb84
  12c85c:	0012cb84 	.word	0x0012cb84
  12c860:	0012cb84 	.word	0x0012cb84
  12c864:	0012cb84 	.word	0x0012cb84
  12c868:	0012cb84 	.word	0x0012cb84
  12c86c:	0012cb84 	.word	0x0012cb84
  12c870:	0012cb84 	.word	0x0012cb84
  12c874:	0012cb84 	.word	0x0012cb84
  12c878:	0012cb84 	.word	0x0012cb84
  12c87c:	0012cb84 	.word	0x0012cb84
  12c880:	0012cb84 	.word	0x0012cb84
  12c884:	0012cb84 	.word	0x0012cb84
  12c888:	0012cb84 	.word	0x0012cb84
  12c88c:	0012cb84 	.word	0x0012cb84
  12c890:	0012cb84 	.word	0x0012cb84
  12c894:	0012cb84 	.word	0x0012cb84
  12c898:	0012c9ec 	.word	0x0012c9ec
  12c89c:	0012ca28 	.word	0x0012ca28
  12c8a0:	0012ca94 	.word	0x0012ca94
  12c8a4:	0012cad0 	.word	0x0012cad0
  12c8a8:	0012cb84 	.word	0x0012cb84
  12c8ac:	0012cb84 	.word	0x0012cb84
  12c8b0:	0012cb84 	.word	0x0012cb84
  12c8b4:	0012cb0c 	.word	0x0012cb0c
  12c8b8:	0012cb48 	.word	0x0012cb48
      /* case(DHCP_OPTION_END): handled above */
      case(DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
  12c8bc:	e3a03000 	mov	r3, #0
  12c8c0:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
  12c8c4:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c8c8:	e54b301e 	strb	r3, [fp, #-30]	; 0xffffffe2
        /* will be increased below */
        offset--;
  12c8cc:	e15b30ba 	ldrh	r3, [fp, #-10]
  12c8d0:	e2433001 	sub	r3, r3, #1
  12c8d4:	e14b30ba 	strh	r3, [fp, #-10]
        break;
  12c8d8:	ea0000ac 	b	12cb90 <dhcp_parse_reply+0x574>
      case(DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
  12c8dc:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c8e0:	e3530004 	cmp	r3, #4
  12c8e4:	0a000008 	beq	12c90c <dhcp_parse_reply+0x2f0>
  12c8e8:	e30901a4 	movw	r0, #37284	; 0x91a4
  12c8ec:	e3400014 	movt	r0, #20
  12c8f0:	ebff5a07 	bl	103114 <rt_kprintf>
  12c8f4:	e30015f7 	movw	r1, #1527	; 0x5f7
  12c8f8:	e3080f44 	movw	r0, #36676	; 0x8f44
  12c8fc:	e3400014 	movt	r0, #20
  12c900:	ebff79d7 	bl	10b064 <sys_arch_assert>
  12c904:	e3e03005 	mvn	r3, #5
  12c908:	ea000186 	b	12cf28 <dhcp_parse_reply+0x90c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
  12c90c:	e3a03006 	mov	r3, #6
  12c910:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        break;
  12c914:	ea00009d 	b	12cb90 <dhcp_parse_reply+0x574>
      case(DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
  12c918:	e3a03004 	mov	r3, #4
  12c91c:	e54b301e 	strb	r3, [fp, #-30]	; 0xffffffe2
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
  12c920:	e55b201d 	ldrb	r2, [fp, #-29]	; 0xffffffe3
  12c924:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
  12c928:	e1520003 	cmp	r2, r3
  12c92c:	2a000008 	bcs	12c954 <dhcp_parse_reply+0x338>
  12c930:	e30901b0 	movw	r0, #37296	; 0x91b0
  12c934:	e3400014 	movt	r0, #20
  12c938:	ebff59f5 	bl	103114 <rt_kprintf>
  12c93c:	e30015fc 	movw	r1, #1532	; 0x5fc
  12c940:	e3080f44 	movw	r0, #36676	; 0x8f44
  12c944:	e3400014 	movt	r0, #20
  12c948:	ebff79c5 	bl	10b064 <sys_arch_assert>
  12c94c:	e3e03005 	mvn	r3, #5
  12c950:	ea000174 	b	12cf28 <dhcp_parse_reply+0x90c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
  12c954:	e3a03007 	mov	r3, #7
  12c958:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        break;
  12c95c:	ea00008b 	b	12cb90 <dhcp_parse_reply+0x574>
#if LWIP_DHCP_PROVIDE_DNS_SERVERS
      case(DHCP_OPTION_DNS_SERVER):
        /* special case: there might be more than one server */
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
  12c960:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c964:	e2033003 	and	r3, r3, #3
  12c968:	e6ef3073 	uxtb	r3, r3
  12c96c:	e3530000 	cmp	r3, #0
  12c970:	0a000008 	beq	12c998 <dhcp_parse_reply+0x37c>
  12c974:	e30901c4 	movw	r0, #37316	; 0x91c4
  12c978:	e3400014 	movt	r0, #20
  12c97c:	ebff59e4 	bl	103114 <rt_kprintf>
  12c980:	e3001602 	movw	r1, #1538	; 0x602
  12c984:	e3080f44 	movw	r0, #36676	; 0x8f44
  12c988:	e3400014 	movt	r0, #20
  12c98c:	ebff79b4 	bl	10b064 <sys_arch_assert>
  12c990:	e3e03005 	mvn	r3, #5
  12c994:	ea000163 	b	12cf28 <dhcp_parse_reply+0x90c>
        /* limit number of DNS servers */
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
  12c998:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c99c:	e3530008 	cmp	r3, #8
  12c9a0:	31a03003 	movcc	r3, r3
  12c9a4:	23a03008 	movcs	r3, #8
  12c9a8:	e54b301e 	strb	r3, [fp, #-30]	; 0xffffffe2
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
  12c9ac:	e55b201d 	ldrb	r2, [fp, #-29]	; 0xffffffe3
  12c9b0:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
  12c9b4:	e1520003 	cmp	r2, r3
  12c9b8:	2a000008 	bcs	12c9e0 <dhcp_parse_reply+0x3c4>
  12c9bc:	e30901b0 	movw	r0, #37296	; 0x91b0
  12c9c0:	e3400014 	movt	r0, #20
  12c9c4:	ebff59d2 	bl	103114 <rt_kprintf>
  12c9c8:	e3001605 	movw	r1, #1541	; 0x605
  12c9cc:	e3080f44 	movw	r0, #36676	; 0x8f44
  12c9d0:	e3400014 	movt	r0, #20
  12c9d4:	ebff79a2 	bl	10b064 <sys_arch_assert>
  12c9d8:	e3e03005 	mvn	r3, #5
  12c9dc:	ea000151 	b	12cf28 <dhcp_parse_reply+0x90c>
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
  12c9e0:	e3a03008 	mov	r3, #8
  12c9e4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        break;
  12c9e8:	ea000068 	b	12cb90 <dhcp_parse_reply+0x574>
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case(DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
  12c9ec:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12c9f0:	e3530004 	cmp	r3, #4
  12c9f4:	0a000008 	beq	12ca1c <dhcp_parse_reply+0x400>
  12c9f8:	e30901a4 	movw	r0, #37284	; 0x91a4
  12c9fc:	e3400014 	movt	r0, #20
  12ca00:	ebff59c3 	bl	103114 <rt_kprintf>
  12ca04:	e300160a 	movw	r1, #1546	; 0x60a
  12ca08:	e3080f44 	movw	r0, #36676	; 0x8f44
  12ca0c:	e3400014 	movt	r0, #20
  12ca10:	ebff7993 	bl	10b064 <sys_arch_assert>
  12ca14:	e3e03005 	mvn	r3, #5
  12ca18:	ea000142 	b	12cf28 <dhcp_parse_reply+0x90c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
  12ca1c:	e3a03003 	mov	r3, #3
  12ca20:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        break;
  12ca24:	ea000059 	b	12cb90 <dhcp_parse_reply+0x574>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case(DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
  12ca28:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12ca2c:	e3530001 	cmp	r3, #1
  12ca30:	0a000008 	beq	12ca58 <dhcp_parse_reply+0x43c>
  12ca34:	e30901d4 	movw	r0, #37332	; 0x91d4
  12ca38:	e3400014 	movt	r0, #20
  12ca3c:	ebff59b4 	bl	103114 <rt_kprintf>
  12ca40:	e3001618 	movw	r1, #1560	; 0x618
  12ca44:	e3080f44 	movw	r0, #36676	; 0x8f44
  12ca48:	e3400014 	movt	r0, #20
  12ca4c:	ebff7984 	bl	10b064 <sys_arch_assert>
  12ca50:	e3e03005 	mvn	r3, #5
  12ca54:	ea000133 	b	12cf28 <dhcp_parse_reply+0x90c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
  12ca58:	e15b30be 	ldrh	r3, [fp, #-14]
  12ca5c:	e35300f0 	cmp	r3, #240	; 0xf0
  12ca60:	0a000008 	beq	12ca88 <dhcp_parse_reply+0x46c>
  12ca64:	e30901e0 	movw	r0, #37344	; 0x91e0
  12ca68:	e3400014 	movt	r0, #20
  12ca6c:	ebff59a8 	bl	103114 <rt_kprintf>
  12ca70:	e300161a 	movw	r1, #1562	; 0x61a
  12ca74:	e3080f44 	movw	r0, #36676	; 0x8f44
  12ca78:	e3400014 	movt	r0, #20
  12ca7c:	ebff7978 	bl	10b064 <sys_arch_assert>
  12ca80:	e3e03005 	mvn	r3, #5
  12ca84:	ea000127 	b	12cf28 <dhcp_parse_reply+0x90c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
  12ca88:	e3a03000 	mov	r3, #0
  12ca8c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        break;
  12ca90:	ea00003e 	b	12cb90 <dhcp_parse_reply+0x574>
      case(DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
  12ca94:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12ca98:	e3530001 	cmp	r3, #1
  12ca9c:	0a000008 	beq	12cac4 <dhcp_parse_reply+0x4a8>
  12caa0:	e30901d4 	movw	r0, #37332	; 0x91d4
  12caa4:	e3400014 	movt	r0, #20
  12caa8:	ebff5999 	bl	103114 <rt_kprintf>
  12caac:	e300161e 	movw	r1, #1566	; 0x61e
  12cab0:	e3080f44 	movw	r0, #36676	; 0x8f44
  12cab4:	e3400014 	movt	r0, #20
  12cab8:	ebff7969 	bl	10b064 <sys_arch_assert>
  12cabc:	e3e03005 	mvn	r3, #5
  12cac0:	ea000118 	b	12cf28 <dhcp_parse_reply+0x90c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
  12cac4:	e3a03001 	mov	r3, #1
  12cac8:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        break;
  12cacc:	ea00002f 	b	12cb90 <dhcp_parse_reply+0x574>
      case(DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
  12cad0:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12cad4:	e3530004 	cmp	r3, #4
  12cad8:	0a000008 	beq	12cb00 <dhcp_parse_reply+0x4e4>
  12cadc:	e30901a4 	movw	r0, #37284	; 0x91a4
  12cae0:	e3400014 	movt	r0, #20
  12cae4:	ebff598a 	bl	103114 <rt_kprintf>
  12cae8:	e3001622 	movw	r1, #1570	; 0x622
  12caec:	e3080f44 	movw	r0, #36676	; 0x8f44
  12caf0:	e3400014 	movt	r0, #20
  12caf4:	ebff795a 	bl	10b064 <sys_arch_assert>
  12caf8:	e3e03005 	mvn	r3, #5
  12cafc:	ea000109 	b	12cf28 <dhcp_parse_reply+0x90c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
  12cb00:	e3a03002 	mov	r3, #2
  12cb04:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        break;
  12cb08:	ea000020 	b	12cb90 <dhcp_parse_reply+0x574>
      case(DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
  12cb0c:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12cb10:	e3530004 	cmp	r3, #4
  12cb14:	0a000008 	beq	12cb3c <dhcp_parse_reply+0x520>
  12cb18:	e30901a4 	movw	r0, #37284	; 0x91a4
  12cb1c:	e3400014 	movt	r0, #20
  12cb20:	ebff597b 	bl	103114 <rt_kprintf>
  12cb24:	e3001626 	movw	r1, #1574	; 0x626
  12cb28:	e3080f44 	movw	r0, #36676	; 0x8f44
  12cb2c:	e3400014 	movt	r0, #20
  12cb30:	ebff794b 	bl	10b064 <sys_arch_assert>
  12cb34:	e3e03005 	mvn	r3, #5
  12cb38:	ea0000fa 	b	12cf28 <dhcp_parse_reply+0x90c>
        decode_idx = DHCP_OPTION_IDX_T1;
  12cb3c:	e3a03004 	mov	r3, #4
  12cb40:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        break;
  12cb44:	ea000011 	b	12cb90 <dhcp_parse_reply+0x574>
      case(DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
  12cb48:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12cb4c:	e3530004 	cmp	r3, #4
  12cb50:	0a000008 	beq	12cb78 <dhcp_parse_reply+0x55c>
  12cb54:	e30901a4 	movw	r0, #37284	; 0x91a4
  12cb58:	e3400014 	movt	r0, #20
  12cb5c:	ebff596c 	bl	103114 <rt_kprintf>
  12cb60:	e300162a 	movw	r1, #1578	; 0x62a
  12cb64:	e3080f44 	movw	r0, #36676	; 0x8f44
  12cb68:	e3400014 	movt	r0, #20
  12cb6c:	ebff793c 	bl	10b064 <sys_arch_assert>
  12cb70:	e3e03005 	mvn	r3, #5
  12cb74:	ea0000eb 	b	12cf28 <dhcp_parse_reply+0x90c>
        decode_idx = DHCP_OPTION_IDX_T2;
  12cb78:	e3a03005 	mov	r3, #5
  12cb7c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        break;
  12cb80:	ea000002 	b	12cb90 <dhcp_parse_reply+0x574>
      default:
        decode_len = 0;
  12cb84:	e3a03000 	mov	r3, #0
  12cb88:	e54b301e 	strb	r3, [fp, #-30]	; 0xffffffe2
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        break;
  12cb8c:	e320f000 	nop	{0}
    }
    offset += len + 2;
  12cb90:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12cb94:	e6ff2073 	uxth	r2, r3
  12cb98:	e15b30ba 	ldrh	r3, [fp, #-10]
  12cb9c:	e0823003 	add	r3, r2, r3
  12cba0:	e6ff3073 	uxth	r3, r3
  12cba4:	e2833002 	add	r3, r3, #2
  12cba8:	e14b30ba 	strh	r3, [fp, #-10]
    if (decode_len > 0) {
  12cbac:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
  12cbb0:	e3530000 	cmp	r3, #0
  12cbb4:	0a000073 	beq	12cd88 <dhcp_parse_reply+0x76c>
      u32_t value = 0;
  12cbb8:	e3a03000 	mov	r3, #0
  12cbbc:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
      u16_t copy_len;
decode_next:
      LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
  12cbc0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  12cbc4:	e3530000 	cmp	r3, #0
  12cbc8:	ba000002 	blt	12cbd8 <dhcp_parse_reply+0x5bc>
  12cbcc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  12cbd0:	e3530009 	cmp	r3, #9
  12cbd4:	da000006 	ble	12cbf4 <dhcp_parse_reply+0x5d8>
  12cbd8:	e30901f8 	movw	r0, #37368	; 0x91f8
  12cbdc:	e3400014 	movt	r0, #20
  12cbe0:	ebff594b 	bl	103114 <rt_kprintf>
  12cbe4:	e3001637 	movw	r1, #1591	; 0x637
  12cbe8:	e3080f44 	movw	r0, #36676	; 0x8f44
  12cbec:	e3400014 	movt	r0, #20
  12cbf0:	ebff791b 	bl	10b064 <sys_arch_assert>
      if (!dhcp_option_given(dhcp, decode_idx)) {
  12cbf4:	e3063a4c 	movw	r3, #27212	; 0x6a4c
  12cbf8:	e3403057 	movt	r3, #87	; 0x57
  12cbfc:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  12cc00:	e0833002 	add	r3, r3, r2
  12cc04:	e5d33000 	ldrb	r3, [r3]
  12cc08:	e3530000 	cmp	r3, #0
  12cc0c:	1a00005d 	bne	12cd88 <dhcp_parse_reply+0x76c>
        copy_len = LWIP_MIN(decode_len, 4);
  12cc10:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
  12cc14:	e3530004 	cmp	r3, #4
  12cc18:	31a03003 	movcc	r3, r3
  12cc1c:	23a03004 	movcs	r3, #4
  12cc20:	e6ef3073 	uxtb	r3, r3
  12cc24:	e14b32ba 	strh	r3, [fp, #-42]	; 0xffffffd6
        if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
  12cc28:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
  12cc2c:	e15b22ba 	ldrh	r2, [fp, #-42]	; 0xffffffd6
  12cc30:	e24b1034 	sub	r1, fp, #52	; 0x34
  12cc34:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  12cc38:	ebffbb22 	bl	11b8c8 <pbuf_copy_partial>
  12cc3c:	e1a03000 	mov	r3, r0
  12cc40:	e1a02003 	mov	r2, r3
  12cc44:	e15b32ba 	ldrh	r3, [fp, #-42]	; 0xffffffd6
  12cc48:	e1530002 	cmp	r3, r2
  12cc4c:	0a000001 	beq	12cc58 <dhcp_parse_reply+0x63c>
          return ERR_BUF;
  12cc50:	e3e03001 	mvn	r3, #1
  12cc54:	ea0000b3 	b	12cf28 <dhcp_parse_reply+0x90c>
        }
        if (decode_len > 4) {
  12cc58:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
  12cc5c:	e3530004 	cmp	r3, #4
  12cc60:	9a000025 	bls	12ccfc <dhcp_parse_reply+0x6e0>
          /* decode more than one u32_t */
          LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
  12cc64:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
  12cc68:	e2033003 	and	r3, r3, #3
  12cc6c:	e6ef3073 	uxtb	r3, r3
  12cc70:	e3530000 	cmp	r3, #0
  12cc74:	0a000008 	beq	12cc9c <dhcp_parse_reply+0x680>
  12cc78:	e309020c 	movw	r0, #37388	; 0x920c
  12cc7c:	e3400014 	movt	r0, #20
  12cc80:	ebff5923 	bl	103114 <rt_kprintf>
  12cc84:	e300163f 	movw	r1, #1599	; 0x63f
  12cc88:	e3080f44 	movw	r0, #36676	; 0x8f44
  12cc8c:	e3400014 	movt	r0, #20
  12cc90:	ebff78f3 	bl	10b064 <sys_arch_assert>
  12cc94:	e3e03005 	mvn	r3, #5
  12cc98:	ea0000a2 	b	12cf28 <dhcp_parse_reply+0x90c>
          dhcp_got_option(dhcp, decode_idx);
  12cc9c:	e3063a4c 	movw	r3, #27212	; 0x6a4c
  12cca0:	e3403057 	movt	r3, #87	; 0x57
  12cca4:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  12cca8:	e0833002 	add	r3, r3, r2
  12ccac:	e3a02001 	mov	r2, #1
  12ccb0:	e5c32000 	strb	r2, [r3]
          dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
  12ccb4:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  12ccb8:	e1a00003 	mov	r0, r3
  12ccbc:	ebffa6cb 	bl	1167f0 <lwip_htonl>
  12ccc0:	e1a01000 	mov	r1, r0
  12ccc4:	e3063a58 	movw	r3, #27224	; 0x6a58
  12ccc8:	e3403057 	movt	r3, #87	; 0x57
  12cccc:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  12ccd0:	e7831102 	str	r1, [r3, r2, lsl #2]
          decode_len -= 4;
  12ccd4:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
  12ccd8:	e2433004 	sub	r3, r3, #4
  12ccdc:	e54b301e 	strb	r3, [fp, #-30]	; 0xffffffe2
          val_offset += 4;
  12cce0:	e15b32b6 	ldrh	r3, [fp, #-38]	; 0xffffffda
  12cce4:	e2833004 	add	r3, r3, #4
  12cce8:	e14b32b6 	strh	r3, [fp, #-38]	; 0xffffffda
          decode_idx++;
  12ccec:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  12ccf0:	e2833001 	add	r3, r3, #1
  12ccf4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
          goto decode_next;
  12ccf8:	eaffffb0 	b	12cbc0 <dhcp_parse_reply+0x5a4>
        } else if (decode_len == 4) {
  12ccfc:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
  12cd00:	e3530004 	cmp	r3, #4
  12cd04:	1a000005 	bne	12cd20 <dhcp_parse_reply+0x704>
          value = lwip_ntohl(value);
  12cd08:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  12cd0c:	e1a00003 	mov	r0, r3
  12cd10:	ebffa6b6 	bl	1167f0 <lwip_htonl>
  12cd14:	e1a03000 	mov	r3, r0
  12cd18:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
  12cd1c:	ea00000e 	b	12cd5c <dhcp_parse_reply+0x740>
        } else {
          LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
  12cd20:	e55b301e 	ldrb	r3, [fp, #-30]	; 0xffffffe2
  12cd24:	e3530001 	cmp	r3, #1
  12cd28:	0a000008 	beq	12cd50 <dhcp_parse_reply+0x734>
  12cd2c:	e3090224 	movw	r0, #37412	; 0x9224
  12cd30:	e3400014 	movt	r0, #20
  12cd34:	ebff58f6 	bl	103114 <rt_kprintf>
  12cd38:	e3001649 	movw	r1, #1609	; 0x649
  12cd3c:	e3080f44 	movw	r0, #36676	; 0x8f44
  12cd40:	e3400014 	movt	r0, #20
  12cd44:	ebff78c6 	bl	10b064 <sys_arch_assert>
  12cd48:	e3e03005 	mvn	r3, #5
  12cd4c:	ea000075 	b	12cf28 <dhcp_parse_reply+0x90c>
          value = ((u8_t*)&value)[0];
  12cd50:	e24b3034 	sub	r3, fp, #52	; 0x34
  12cd54:	e5d33000 	ldrb	r3, [r3]
  12cd58:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
        }
        dhcp_got_option(dhcp, decode_idx);
  12cd5c:	e3063a4c 	movw	r3, #27212	; 0x6a4c
  12cd60:	e3403057 	movt	r3, #87	; 0x57
  12cd64:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  12cd68:	e0833002 	add	r3, r3, r2
  12cd6c:	e3a02001 	mov	r2, #1
  12cd70:	e5c32000 	strb	r2, [r3]
        dhcp_set_option_value(dhcp, decode_idx, value);
  12cd74:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  12cd78:	e3063a58 	movw	r3, #27224	; 0x6a58
  12cd7c:	e3403057 	movt	r3, #87	; 0x57
  12cd80:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  12cd84:	e7831102 	str	r1, [r3, r2, lsl #2]
      }
    }
    if (offset >= q->len) {
  12cd88:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12cd8c:	e1d330ba 	ldrh	r3, [r3, #10]
  12cd90:	e15b20ba 	ldrh	r2, [fp, #-10]
  12cd94:	e1520003 	cmp	r2, r3
  12cd98:	3a000020 	bcc	12ce20 <dhcp_parse_reply+0x804>
      offset -= q->len;
  12cd9c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12cda0:	e1d330ba 	ldrh	r3, [r3, #10]
  12cda4:	e15b20ba 	ldrh	r2, [fp, #-10]
  12cda8:	e0423003 	sub	r3, r2, r3
  12cdac:	e14b30ba 	strh	r3, [fp, #-10]
      offset_max -= q->len;
  12cdb0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12cdb4:	e1d330ba 	ldrh	r3, [r3, #10]
  12cdb8:	e15b20bc 	ldrh	r2, [fp, #-12]
  12cdbc:	e0423003 	sub	r3, r2, r3
  12cdc0:	e14b30bc 	strh	r3, [fp, #-12]
      if ((offset < offset_max) && offset_max) {
  12cdc4:	e15b20ba 	ldrh	r2, [fp, #-10]
  12cdc8:	e15b30bc 	ldrh	r3, [fp, #-12]
  12cdcc:	e1520003 	cmp	r2, r3
  12cdd0:	2a00001f 	bcs	12ce54 <dhcp_parse_reply+0x838>
  12cdd4:	e15b30bc 	ldrh	r3, [fp, #-12]
  12cdd8:	e3530000 	cmp	r3, #0
  12cddc:	0a00001c 	beq	12ce54 <dhcp_parse_reply+0x838>
        q = q->next;
  12cde0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12cde4:	e5933000 	ldr	r3, [r3]
  12cde8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        LWIP_ASSERT("next pbuf was null", q);
  12cdec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12cdf0:	e3530000 	cmp	r3, #0
  12cdf4:	1a000006 	bne	12ce14 <dhcp_parse_reply+0x7f8>
  12cdf8:	e3090238 	movw	r0, #37432	; 0x9238
  12cdfc:	e3400014 	movt	r0, #20
  12ce00:	ebff58c3 	bl	103114 <rt_kprintf>
  12ce04:	e3001655 	movw	r1, #1621	; 0x655
  12ce08:	e3080f44 	movw	r0, #36676	; 0x8f44
  12ce0c:	e3400014 	movt	r0, #20
  12ce10:	ebff7893 	bl	10b064 <sys_arch_assert>
        options = (u8_t*)q->payload;
  12ce14:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12ce18:	e5933004 	ldr	r3, [r3, #4]
  12ce1c:	e50b3008 	str	r3, [fp, #-8]
  while ((q != NULL) && (options[offset] != DHCP_OPTION_END) && (offset < offset_max)) {
  12ce20:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12ce24:	e3530000 	cmp	r3, #0
  12ce28:	0a000009 	beq	12ce54 <dhcp_parse_reply+0x838>
  12ce2c:	e15b30ba 	ldrh	r3, [fp, #-10]
  12ce30:	e51b2008 	ldr	r2, [fp, #-8]
  12ce34:	e0823003 	add	r3, r2, r3
  12ce38:	e5d33000 	ldrb	r3, [r3]
  12ce3c:	e35300ff 	cmp	r3, #255	; 0xff
  12ce40:	0a000003 	beq	12ce54 <dhcp_parse_reply+0x838>
  12ce44:	e15b20ba 	ldrh	r2, [fp, #-10]
  12ce48:	e15b30bc 	ldrh	r3, [fp, #-12]
  12ce4c:	e1520003 	cmp	r2, r3
  12ce50:	3afffe33 	bcc	12c724 <dhcp_parse_reply+0x108>
        break;
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
  12ce54:	e3063a4c 	movw	r3, #27212	; 0x6a4c
  12ce58:	e3403057 	movt	r3, #87	; 0x57
  12ce5c:	e5d33000 	ldrb	r3, [r3]
  12ce60:	e3530000 	cmp	r3, #0
  12ce64:	0a00001a 	beq	12ced4 <dhcp_parse_reply+0x8b8>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
  12ce68:	e3063a58 	movw	r3, #27224	; 0x6a58
  12ce6c:	e3403057 	movt	r3, #87	; 0x57
  12ce70:	e5933000 	ldr	r3, [r3]
  12ce74:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
  12ce78:	e3063a4c 	movw	r3, #27212	; 0x6a4c
  12ce7c:	e3403057 	movt	r3, #87	; 0x57
  12ce80:	e3a02000 	mov	r2, #0
  12ce84:	e5c32000 	strb	r2, [r3]
    if (overload == DHCP_OVERLOAD_FILE) {
  12ce88:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12ce8c:	e3530001 	cmp	r3, #1
  12ce90:	1a000002 	bne	12cea0 <dhcp_parse_reply+0x884>
      parse_file_as_options = 1;
  12ce94:	e3a03001 	mov	r3, #1
  12ce98:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  12ce9c:	ea00000c 	b	12ced4 <dhcp_parse_reply+0x8b8>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
  12cea0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12cea4:	e3530002 	cmp	r3, #2
  12cea8:	1a000002 	bne	12ceb8 <dhcp_parse_reply+0x89c>
      parse_sname_as_options = 1;
  12ceac:	e3a03001 	mov	r3, #1
  12ceb0:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  12ceb4:	ea000006 	b	12ced4 <dhcp_parse_reply+0x8b8>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
  12ceb8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12cebc:	e3530003 	cmp	r3, #3
  12cec0:	1a000003 	bne	12ced4 <dhcp_parse_reply+0x8b8>
      parse_sname_as_options = 1;
  12cec4:	e3a03001 	mov	r3, #1
  12cec8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
      parse_file_as_options = 1;
  12cecc:	e3a03001 	mov	r3, #1
  12ced0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
      /* make sure the string is really NULL-terminated */
      dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
    }
#endif /* LWIP_DHCP_BOOTP_FILE */
  }
  if (parse_file_as_options) {
  12ced4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12ced8:	e3530000 	cmp	r3, #0
  12cedc:	0a000006 	beq	12cefc <dhcp_parse_reply+0x8e0>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
  12cee0:	e3a03000 	mov	r3, #0
  12cee4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    options_idx = DHCP_FILE_OFS;
  12cee8:	e3a0306c 	mov	r3, #108	; 0x6c
  12ceec:	e14b30be 	strh	r3, [fp, #-14]
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
  12cef0:	e3a030ec 	mov	r3, #236	; 0xec
  12cef4:	e14b31b0 	strh	r3, [fp, #-16]
    goto again;
  12cef8:	eafffde4 	b	12c690 <dhcp_parse_reply+0x74>
  } else if (parse_sname_as_options) {
  12cefc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12cf00:	e3530000 	cmp	r3, #0
  12cf04:	0a000006 	beq	12cf24 <dhcp_parse_reply+0x908>
    parse_sname_as_options = 0;
  12cf08:	e3a03000 	mov	r3, #0
  12cf0c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    options_idx = DHCP_SNAME_OFS;
  12cf10:	e3a0302c 	mov	r3, #44	; 0x2c
  12cf14:	e14b30be 	strh	r3, [fp, #-14]
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
  12cf18:	e3a0306c 	mov	r3, #108	; 0x6c
  12cf1c:	e14b31b0 	strh	r3, [fp, #-16]
    goto again;
  12cf20:	eafffdda 	b	12c690 <dhcp_parse_reply+0x74>
  }
  return ERR_OK;
  12cf24:	e3a03000 	mov	r3, #0
}
  12cf28:	e1a00003 	mov	r0, r3
  12cf2c:	e24bd004 	sub	sp, fp, #4
  12cf30:	e8bd8800 	pop	{fp, pc}

0012cf34 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
  12cf34:	e92d4800 	push	{fp, lr}
  12cf38:	e28db004 	add	fp, sp, #4
  12cf3c:	e24dd028 	sub	sp, sp, #40	; 0x28
  12cf40:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  12cf44:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  12cf48:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  12cf4c:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
  struct netif *netif = ip_current_input_netif();
  12cf50:	e30035e8 	movw	r3, #1512	; 0x5e8
  12cf54:	e3403015 	movt	r3, #21
  12cf58:	e5933004 	ldr	r3, [r3, #4]
  12cf5c:	e50b300c 	str	r3, [fp, #-12]
  struct dhcp *dhcp = netif_dhcp_data(netif);
  12cf60:	e51b300c 	ldr	r3, [fp, #-12]
  12cf64:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12cf68:	e50b3010 	str	r3, [fp, #-16]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
  12cf6c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12cf70:	e5933004 	ldr	r3, [r3, #4]
  12cf74:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  u8_t i;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
  12cf78:	e51b3010 	ldr	r3, [fp, #-16]
  12cf7c:	e3530000 	cmp	r3, #0
  12cf80:	0a000091 	beq	12d1cc <dhcp_recv+0x298>
  12cf84:	e51b3010 	ldr	r3, [fp, #-16]
  12cf88:	e5d33008 	ldrb	r3, [r3, #8]
  12cf8c:	e3530000 	cmp	r3, #0
  12cf90:	0a00008d 	beq	12d1cc <dhcp_recv+0x298>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
  12cf94:	e51b3010 	ldr	r3, [fp, #-16]
  12cf98:	e5933004 	ldr	r3, [r3, #4]
  12cf9c:	e3530000 	cmp	r3, #0
  12cfa0:	0a000006 	beq	12cfc0 <dhcp_recv+0x8c>
  12cfa4:	e309001c 	movw	r0, #36892	; 0x901c
  12cfa8:	e3400014 	movt	r0, #20
  12cfac:	ebff5858 	bl	103114 <rt_kprintf>
  12cfb0:	e30016a9 	movw	r1, #1705	; 0x6a9
  12cfb4:	e3080f44 	movw	r0, #36676	; 0x8f44
  12cfb8:	e3400014 	movt	r0, #20
  12cfbc:	ebff7828 	bl	10b064 <sys_arch_assert>

  if (p->len < DHCP_MIN_REPLY_LEN) {
  12cfc0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12cfc4:	e1d330ba 	ldrh	r3, [r3, #10]
  12cfc8:	e353002b 	cmp	r3, #43	; 0x2b
  12cfcc:	9a000080 	bls	12d1d4 <dhcp_recv+0x2a0>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
  12cfd0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12cfd4:	e5d33000 	ldrb	r3, [r3]
  12cfd8:	e3530002 	cmp	r3, #2
  12cfdc:	1a00007e 	bne	12d1dc <dhcp_recv+0x2a8>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
  12cfe0:	e3a03000 	mov	r3, #0
  12cfe4:	e54b3005 	strb	r3, [fp, #-5]
  12cfe8:	ea00000c 	b	12d020 <dhcp_recv+0xec>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
  12cfec:	e55b3005 	ldrb	r3, [fp, #-5]
  12cff0:	e51b200c 	ldr	r2, [fp, #-12]
  12cff4:	e0823003 	add	r3, r2, r3
  12cff8:	e5d3203b 	ldrb	r2, [r3, #59]	; 0x3b
  12cffc:	e55b3005 	ldrb	r3, [fp, #-5]
  12d000:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  12d004:	e0813003 	add	r3, r1, r3
  12d008:	e5d3301c 	ldrb	r3, [r3, #28]
  12d00c:	e1520003 	cmp	r2, r3
  12d010:	1a000073 	bne	12d1e4 <dhcp_recv+0x2b0>
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
  12d014:	e55b3005 	ldrb	r3, [fp, #-5]
  12d018:	e2833001 	add	r3, r3, #1
  12d01c:	e54b3005 	strb	r3, [fp, #-5]
  12d020:	e51b300c 	ldr	r3, [fp, #-12]
  12d024:	e5d3303a 	ldrb	r3, [r3, #58]	; 0x3a
  12d028:	e55b2005 	ldrb	r2, [fp, #-5]
  12d02c:	e1520003 	cmp	r2, r3
  12d030:	2a000005 	bcs	12d04c <dhcp_recv+0x118>
  12d034:	e55b3005 	ldrb	r3, [fp, #-5]
  12d038:	e3530005 	cmp	r3, #5
  12d03c:	8a000002 	bhi	12d04c <dhcp_recv+0x118>
  12d040:	e55b3005 	ldrb	r3, [fp, #-5]
  12d044:	e353000f 	cmp	r3, #15
  12d048:	9affffe7 	bls	12cfec <dhcp_recv+0xb8>
        (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
  12d04c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12d050:	e5933004 	ldr	r3, [r3, #4]
  12d054:	e1a00003 	mov	r0, r3
  12d058:	ebffa5e4 	bl	1167f0 <lwip_htonl>
  12d05c:	e1a02000 	mov	r2, r0
  12d060:	e51b3010 	ldr	r3, [fp, #-16]
  12d064:	e5933000 	ldr	r3, [r3]
  12d068:	e1520003 	cmp	r2, r3
  12d06c:	1a00005e 	bne	12d1ec <dhcp_recv+0x2b8>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n",lwip_ntohl(reply_msg->xid),dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(dhcp, p) != ERR_OK) {
  12d070:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
  12d074:	e51b0010 	ldr	r0, [fp, #-16]
  12d078:	ebfffd67 	bl	12c61c <dhcp_parse_reply>
  12d07c:	e1a03000 	mov	r3, r0
  12d080:	e3530000 	cmp	r3, #0
  12d084:	1a00005a 	bne	12d1f4 <dhcp_recv+0x2c0>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
  12d088:	e3063a4c 	movw	r3, #27212	; 0x6a4c
  12d08c:	e3403057 	movt	r3, #87	; 0x57
  12d090:	e5d33001 	ldrb	r3, [r3, #1]
  12d094:	e3530000 	cmp	r3, #0
  12d098:	0a000057 	beq	12d1fc <dhcp_recv+0x2c8>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
  12d09c:	e3063a58 	movw	r3, #27224	; 0x6a58
  12d0a0:	e3403057 	movt	r3, #87	; 0x57
  12d0a4:	e5933004 	ldr	r3, [r3, #4]
  12d0a8:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
  12d0ac:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  12d0b0:	e3530005 	cmp	r3, #5
  12d0b4:	1a000021 	bne	12d140 <dhcp_recv+0x20c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
  12d0b8:	e51b3010 	ldr	r3, [fp, #-16]
  12d0bc:	e5d33009 	ldrb	r3, [r3, #9]
  12d0c0:	e3530001 	cmp	r3, #1
  12d0c4:	1a00000c 	bne	12d0fc <dhcp_recv+0x1c8>
      dhcp_handle_ack(netif);
  12d0c8:	e51b000c 	ldr	r0, [fp, #-12]
  12d0cc:	ebfff6b6 	bl	12abac <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
  12d0d0:	e51b300c 	ldr	r3, [fp, #-12]
  12d0d4:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  12d0d8:	e2033008 	and	r3, r3, #8
  12d0dc:	e3530000 	cmp	r3, #0
  12d0e0:	0a000002 	beq	12d0f0 <dhcp_recv+0x1bc>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
  12d0e4:	e51b000c 	ldr	r0, [fp, #-12]
  12d0e8:	ebfff4c0 	bl	12a3f0 <dhcp_check>
  12d0ec:	ea000043 	b	12d200 <dhcp_recv+0x2cc>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
  12d0f0:	e51b000c 	ldr	r0, [fp, #-12]
  12d0f4:	ebfff952 	bl	12b644 <dhcp_bind>
  12d0f8:	ea000040 	b	12d200 <dhcp_recv+0x2cc>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
  12d0fc:	e51b3010 	ldr	r3, [fp, #-16]
  12d100:	e5d33009 	ldrb	r3, [r3, #9]
  12d104:	e3530003 	cmp	r3, #3
  12d108:	0a000007 	beq	12d12c <dhcp_recv+0x1f8>
  12d10c:	e51b3010 	ldr	r3, [fp, #-16]
  12d110:	e5d33009 	ldrb	r3, [r3, #9]
  12d114:	e3530004 	cmp	r3, #4
  12d118:	0a000003 	beq	12d12c <dhcp_recv+0x1f8>
             (dhcp->state == DHCP_STATE_RENEWING)) {
  12d11c:	e51b3010 	ldr	r3, [fp, #-16]
  12d120:	e5d33009 	ldrb	r3, [r3, #9]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
  12d124:	e3530005 	cmp	r3, #5
  12d128:	1a000034 	bne	12d200 <dhcp_recv+0x2cc>
      dhcp_handle_ack(netif);
  12d12c:	e51b000c 	ldr	r0, [fp, #-12]
  12d130:	ebfff69d 	bl	12abac <dhcp_handle_ack>
      dhcp_bind(netif);
  12d134:	e51b000c 	ldr	r0, [fp, #-12]
  12d138:	ebfff941 	bl	12b644 <dhcp_bind>
  12d13c:	ea00002f 	b	12d200 <dhcp_recv+0x2cc>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
  12d140:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  12d144:	e3530006 	cmp	r3, #6
  12d148:	1a000012 	bne	12d198 <dhcp_recv+0x264>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
  12d14c:	e51b3010 	ldr	r3, [fp, #-16]
  12d150:	e5d33009 	ldrb	r3, [r3, #9]
  else if ((msg_type == DHCP_NAK) &&
  12d154:	e3530003 	cmp	r3, #3
  12d158:	0a00000b 	beq	12d18c <dhcp_recv+0x258>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
  12d15c:	e51b3010 	ldr	r3, [fp, #-16]
  12d160:	e5d33009 	ldrb	r3, [r3, #9]
  12d164:	e3530001 	cmp	r3, #1
  12d168:	0a000007 	beq	12d18c <dhcp_recv+0x258>
     (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
  12d16c:	e51b3010 	ldr	r3, [fp, #-16]
  12d170:	e5d33009 	ldrb	r3, [r3, #9]
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
  12d174:	e3530004 	cmp	r3, #4
  12d178:	0a000003 	beq	12d18c <dhcp_recv+0x258>
     (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
  12d17c:	e51b3010 	ldr	r3, [fp, #-16]
  12d180:	e5d33009 	ldrb	r3, [r3, #9]
  12d184:	e3530005 	cmp	r3, #5
  12d188:	1a000002 	bne	12d198 <dhcp_recv+0x264>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
  12d18c:	e51b000c 	ldr	r0, [fp, #-12]
  12d190:	ebfff47f 	bl	12a394 <dhcp_handle_nak>
  12d194:	ea000019 	b	12d200 <dhcp_recv+0x2cc>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
  12d198:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  12d19c:	e3530002 	cmp	r3, #2
  12d1a0:	1a000009 	bne	12d1cc <dhcp_recv+0x298>
  12d1a4:	e51b3010 	ldr	r3, [fp, #-16]
  12d1a8:	e5d33009 	ldrb	r3, [r3, #9]
  12d1ac:	e3530006 	cmp	r3, #6
  12d1b0:	1a000005 	bne	12d1cc <dhcp_recv+0x298>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    dhcp->request_timeout = 0;
  12d1b4:	e51b3010 	ldr	r3, [fp, #-16]
  12d1b8:	e3a02000 	mov	r2, #0
  12d1bc:	e1c321b6 	strh	r2, [r3, #22]
    /* remember offered lease */
    dhcp_handle_offer(netif);
  12d1c0:	e51b000c 	ldr	r0, [fp, #-12]
  12d1c4:	ebfff4b6 	bl	12a4a4 <dhcp_handle_offer>
  12d1c8:	ea00000c 	b	12d200 <dhcp_recv+0x2cc>
  }

free_pbuf_and_return:
  12d1cc:	e320f000 	nop	{0}
  12d1d0:	ea00000a 	b	12d200 <dhcp_recv+0x2cc>
    goto free_pbuf_and_return;
  12d1d4:	e320f000 	nop	{0}
  12d1d8:	ea000008 	b	12d200 <dhcp_recv+0x2cc>
    goto free_pbuf_and_return;
  12d1dc:	e320f000 	nop	{0}
  12d1e0:	ea000006 	b	12d200 <dhcp_recv+0x2cc>
      goto free_pbuf_and_return;
  12d1e4:	e320f000 	nop	{0}
  12d1e8:	ea000004 	b	12d200 <dhcp_recv+0x2cc>
    goto free_pbuf_and_return;
  12d1ec:	e320f000 	nop	{0}
  12d1f0:	ea000002 	b	12d200 <dhcp_recv+0x2cc>
    goto free_pbuf_and_return;
  12d1f4:	e320f000 	nop	{0}
  12d1f8:	ea000000 	b	12d200 <dhcp_recv+0x2cc>
    goto free_pbuf_and_return;
  12d1fc:	e320f000 	nop	{0}
  if (dhcp != NULL) {
  12d200:	e51b3010 	ldr	r3, [fp, #-16]
  12d204:	e3530000 	cmp	r3, #0
  12d208:	0a000002 	beq	12d218 <dhcp_recv+0x2e4>
    dhcp->msg_in = NULL;
  12d20c:	e51b3010 	ldr	r3, [fp, #-16]
  12d210:	e3a02000 	mov	r2, #0
  12d214:	e5832004 	str	r2, [r3, #4]
  }
  pbuf_free(p);
  12d218:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12d21c:	ebffb79e 	bl	11b09c <pbuf_free>
}
  12d220:	e320f000 	nop	{0}
  12d224:	e24bd004 	sub	sp, fp, #4
  12d228:	e8bd8800 	pop	{fp, pc}

0012d22c <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static err_t
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type)
{
  12d22c:	e92d4810 	push	{r4, fp, lr}
  12d230:	e28db008 	add	fp, sp, #8
  12d234:	e24dd01c 	sub	sp, sp, #28
  12d238:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  12d23c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  12d240:	e1a03002 	mov	r3, r2
  12d244:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return ERR_ARG;);
  12d248:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12d24c:	e3530000 	cmp	r3, #0
  12d250:	1a000008 	bne	12d278 <dhcp_create_msg+0x4c>
  12d254:	e309024c 	movw	r0, #37452	; 0x924c
  12d258:	e3400014 	movt	r0, #20
  12d25c:	ebff57ac 	bl	103114 <rt_kprintf>
  12d260:	e300171e 	movw	r1, #1822	; 0x71e
  12d264:	e3080f44 	movw	r0, #36676	; 0x8f44
  12d268:	e3400014 	movt	r0, #20
  12d26c:	ebff777c 	bl	10b064 <sys_arch_assert>
  12d270:	e3e0300f 	mvn	r3, #15
  12d274:	ea000121 	b	12d700 <dhcp_create_msg+0x4d4>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
  12d278:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d27c:	e3530000 	cmp	r3, #0
  12d280:	1a000008 	bne	12d2a8 <dhcp_create_msg+0x7c>
  12d284:	e309026c 	movw	r0, #37484	; 0x926c
  12d288:	e3400014 	movt	r0, #20
  12d28c:	ebff57a0 	bl	103114 <rt_kprintf>
  12d290:	e300171f 	movw	r1, #1823	; 0x71f
  12d294:	e3080f44 	movw	r0, #36676	; 0x8f44
  12d298:	e3400014 	movt	r0, #20
  12d29c:	ebff7770 	bl	10b064 <sys_arch_assert>
  12d2a0:	e3e03005 	mvn	r3, #5
  12d2a4:	ea000115 	b	12d700 <dhcp_create_msg+0x4d4>
  LWIP_ASSERT("dhcp_create_msg: dhcp->p_out == NULL", dhcp->p_out == NULL);
  12d2a8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d2ac:	e593300c 	ldr	r3, [r3, #12]
  12d2b0:	e3530000 	cmp	r3, #0
  12d2b4:	0a000006 	beq	12d2d4 <dhcp_create_msg+0xa8>
  12d2b8:	e309028c 	movw	r0, #37516	; 0x928c
  12d2bc:	e3400014 	movt	r0, #20
  12d2c0:	ebff5793 	bl	103114 <rt_kprintf>
  12d2c4:	e3a01e72 	mov	r1, #1824	; 0x720
  12d2c8:	e3080f44 	movw	r0, #36676	; 0x8f44
  12d2cc:	e3400014 	movt	r0, #20
  12d2d0:	ebff7763 	bl	10b064 <sys_arch_assert>
  LWIP_ASSERT("dhcp_create_msg: dhcp->msg_out == NULL", dhcp->msg_out == NULL);
  12d2d4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d2d8:	e5933010 	ldr	r3, [r3, #16]
  12d2dc:	e3530000 	cmp	r3, #0
  12d2e0:	0a000006 	beq	12d300 <dhcp_create_msg+0xd4>
  12d2e4:	e30902b4 	movw	r0, #37556	; 0x92b4
  12d2e8:	e3400014 	movt	r0, #20
  12d2ec:	ebff5788 	bl	103114 <rt_kprintf>
  12d2f0:	e3001721 	movw	r1, #1825	; 0x721
  12d2f4:	e3080f44 	movw	r0, #36676	; 0x8f44
  12d2f8:	e3400014 	movt	r0, #20
  12d2fc:	ebff7758 	bl	10b064 <sys_arch_assert>
  dhcp->p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
  12d300:	e3a02000 	mov	r2, #0
  12d304:	e3a01f4d 	mov	r1, #308	; 0x134
  12d308:	e3a00000 	mov	r0, #0
  12d30c:	ebffb45b 	bl	11a480 <pbuf_alloc>
  12d310:	e1a02000 	mov	r2, r0
  12d314:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d318:	e583200c 	str	r2, [r3, #12]
  if (dhcp->p_out == NULL) {
  12d31c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d320:	e593300c 	ldr	r3, [r3, #12]
  12d324:	e3530000 	cmp	r3, #0
  12d328:	1a000001 	bne	12d334 <dhcp_create_msg+0x108>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_create_msg(): could not allocate pbuf\n"));
    return ERR_MEM;
  12d32c:	e3e03000 	mvn	r3, #0
  12d330:	ea0000f2 	b	12d700 <dhcp_create_msg+0x4d4>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
  12d334:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d338:	e593300c 	ldr	r3, [r3, #12]
  12d33c:	e1d330ba 	ldrh	r3, [r3, #10]
  12d340:	e3530f4d 	cmp	r3, #308	; 0x134
  12d344:	2a000006 	bcs	12d364 <dhcp_create_msg+0x138>
  12d348:	e30902dc 	movw	r0, #37596	; 0x92dc
  12d34c:	e3400014 	movt	r0, #20
  12d350:	ebff576f 	bl	103114 <rt_kprintf>
  12d354:	e3001729 	movw	r1, #1833	; 0x729
  12d358:	e3080f44 	movw	r0, #36676	; 0x8f44
  12d35c:	e3400014 	movt	r0, #20
  12d360:	ebff773f 	bl	10b064 <sys_arch_assert>
           (dhcp->p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if (message_type != DHCP_REQUEST) {
  12d364:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12d368:	e3530003 	cmp	r3, #3
  12d36c:	0a00000e 	beq	12d3ac <dhcp_create_msg+0x180>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
  12d370:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d374:	e5d3300a 	ldrb	r3, [r3, #10]
  12d378:	e3530000 	cmp	r3, #0
  12d37c:	1a000005 	bne	12d398 <dhcp_create_msg+0x16c>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
  12d380:	eb0043fb 	bl	13e374 <rand>
  12d384:	e1a03000 	mov	r3, r0
  12d388:	e1a02003 	mov	r2, r3
  12d38c:	e30f3ad0 	movw	r3, #64208	; 0xfad0
  12d390:	e3403014 	movt	r3, #20
  12d394:	e5832000 	str	r2, [r3]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
  12d398:	e30f3ad0 	movw	r3, #64208	; 0xfad0
  12d39c:	e3403014 	movt	r3, #20
  12d3a0:	e5932000 	ldr	r2, [r3]
  12d3a4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d3a8:	e5832000 	str	r2, [r3]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
  12d3ac:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d3b0:	e593300c 	ldr	r3, [r3, #12]
  12d3b4:	e5932004 	ldr	r2, [r3, #4]
  12d3b8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d3bc:	e5832010 	str	r2, [r3, #16]

  dhcp->msg_out->op = DHCP_BOOTREQUEST;
  12d3c0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d3c4:	e5933010 	ldr	r3, [r3, #16]
  12d3c8:	e3a02001 	mov	r2, #1
  12d3cc:	e5c32000 	strb	r2, [r3]
  /* @todo: make link layer independent */
  dhcp->msg_out->htype = DHCP_HTYPE_ETH;
  12d3d0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d3d4:	e5933010 	ldr	r3, [r3, #16]
  12d3d8:	e3a02001 	mov	r2, #1
  12d3dc:	e5c32001 	strb	r2, [r3, #1]
  dhcp->msg_out->hlen = netif->hwaddr_len;
  12d3e0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d3e4:	e5933010 	ldr	r3, [r3, #16]
  12d3e8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  12d3ec:	e5d2203a 	ldrb	r2, [r2, #58]	; 0x3a
  12d3f0:	e5c32002 	strb	r2, [r3, #2]
  dhcp->msg_out->hops = 0;
  12d3f4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d3f8:	e5933010 	ldr	r3, [r3, #16]
  12d3fc:	e3a02000 	mov	r2, #0
  12d400:	e5c32003 	strb	r2, [r3, #3]
  dhcp->msg_out->xid = lwip_htonl(dhcp->xid);
  12d404:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d408:	e5932000 	ldr	r2, [r3]
  12d40c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d410:	e5934010 	ldr	r4, [r3, #16]
  12d414:	e1a00002 	mov	r0, r2
  12d418:	ebffa4f4 	bl	1167f0 <lwip_htonl>
  12d41c:	e1a03000 	mov	r3, r0
  12d420:	e5843004 	str	r3, [r4, #4]
  dhcp->msg_out->secs = 0;
  12d424:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d428:	e5933010 	ldr	r3, [r3, #16]
  12d42c:	e3a02000 	mov	r2, #0
  12d430:	e5c32008 	strb	r2, [r3, #8]
  12d434:	e3a02000 	mov	r2, #0
  12d438:	e5c32009 	strb	r2, [r3, #9]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  dhcp->msg_out->flags = 0;
  12d43c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d440:	e5933010 	ldr	r3, [r3, #16]
  12d444:	e3a02000 	mov	r2, #0
  12d448:	e5c3200a 	strb	r2, [r3, #10]
  12d44c:	e3a02000 	mov	r2, #0
  12d450:	e5c3200b 	strb	r2, [r3, #11]
  ip4_addr_set_zero(&dhcp->msg_out->ciaddr);
  12d454:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d458:	e5933010 	ldr	r3, [r3, #16]
  12d45c:	e3a02000 	mov	r2, #0
  12d460:	e5c3200c 	strb	r2, [r3, #12]
  12d464:	e3a02000 	mov	r2, #0
  12d468:	e5c3200d 	strb	r2, [r3, #13]
  12d46c:	e3a02000 	mov	r2, #0
  12d470:	e5c3200e 	strb	r2, [r3, #14]
  12d474:	e3a02000 	mov	r2, #0
  12d478:	e5c3200f 	strb	r2, [r3, #15]
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
  12d47c:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12d480:	e3530008 	cmp	r3, #8
  12d484:	0a000010 	beq	12d4cc <dhcp_create_msg+0x2a0>
  12d488:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12d48c:	e3530004 	cmp	r3, #4
  12d490:	0a00000d 	beq	12d4cc <dhcp_create_msg+0x2a0>
  12d494:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12d498:	e3530007 	cmp	r3, #7
  12d49c:	0a00000a 	beq	12d4cc <dhcp_create_msg+0x2a0>
  12d4a0:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12d4a4:	e3530003 	cmp	r3, #3
  12d4a8:	1a00000d 	bne	12d4e4 <dhcp_create_msg+0x2b8>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
  12d4ac:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d4b0:	e5d33009 	ldrb	r3, [r3, #9]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
  12d4b4:	e3530005 	cmp	r3, #5
  12d4b8:	0a000003 	beq	12d4cc <dhcp_create_msg+0x2a0>
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
  12d4bc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d4c0:	e5d33009 	ldrb	r3, [r3, #9]
  12d4c4:	e3530004 	cmp	r3, #4
  12d4c8:	1a000005 	bne	12d4e4 <dhcp_create_msg+0x2b8>
    ip4_addr_copy(dhcp->msg_out->ciaddr, *netif_ip4_addr(netif));
  12d4cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12d4d0:	e2832004 	add	r2, r3, #4
  12d4d4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d4d8:	e5933010 	ldr	r3, [r3, #16]
  12d4dc:	e5922000 	ldr	r2, [r2]
  12d4e0:	e583200c 	str	r2, [r3, #12]
  }
  ip4_addr_set_zero(&dhcp->msg_out->yiaddr);
  12d4e4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d4e8:	e5933010 	ldr	r3, [r3, #16]
  12d4ec:	e3a02000 	mov	r2, #0
  12d4f0:	e5c32010 	strb	r2, [r3, #16]
  12d4f4:	e3a02000 	mov	r2, #0
  12d4f8:	e5c32011 	strb	r2, [r3, #17]
  12d4fc:	e3a02000 	mov	r2, #0
  12d500:	e5c32012 	strb	r2, [r3, #18]
  12d504:	e3a02000 	mov	r2, #0
  12d508:	e5c32013 	strb	r2, [r3, #19]
  ip4_addr_set_zero(&dhcp->msg_out->siaddr);
  12d50c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d510:	e5933010 	ldr	r3, [r3, #16]
  12d514:	e3a02000 	mov	r2, #0
  12d518:	e5c32014 	strb	r2, [r3, #20]
  12d51c:	e3a02000 	mov	r2, #0
  12d520:	e5c32015 	strb	r2, [r3, #21]
  12d524:	e3a02000 	mov	r2, #0
  12d528:	e5c32016 	strb	r2, [r3, #22]
  12d52c:	e3a02000 	mov	r2, #0
  12d530:	e5c32017 	strb	r2, [r3, #23]
  ip4_addr_set_zero(&dhcp->msg_out->giaddr);
  12d534:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d538:	e5933010 	ldr	r3, [r3, #16]
  12d53c:	e3a02000 	mov	r2, #0
  12d540:	e5c32018 	strb	r2, [r3, #24]
  12d544:	e3a02000 	mov	r2, #0
  12d548:	e5c32019 	strb	r2, [r3, #25]
  12d54c:	e3a02000 	mov	r2, #0
  12d550:	e5c3201a 	strb	r2, [r3, #26]
  12d554:	e3a02000 	mov	r2, #0
  12d558:	e5c3201b 	strb	r2, [r3, #27]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
  12d55c:	e3a03000 	mov	r3, #0
  12d560:	e14b30be 	strh	r3, [fp, #-14]
  12d564:	ea000017 	b	12d5c8 <dhcp_create_msg+0x39c>
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
  12d568:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12d56c:	e5d3303a 	ldrb	r3, [r3, #58]	; 0x3a
  12d570:	e6ff3073 	uxth	r3, r3
  12d574:	e15b20be 	ldrh	r2, [fp, #-14]
  12d578:	e1520003 	cmp	r2, r3
  12d57c:	2a000007 	bcs	12d5a0 <dhcp_create_msg+0x374>
  12d580:	e15b30be 	ldrh	r3, [fp, #-14]
  12d584:	e3530005 	cmp	r3, #5
  12d588:	8a000004 	bhi	12d5a0 <dhcp_create_msg+0x374>
  12d58c:	e15b30be 	ldrh	r3, [fp, #-14]
  12d590:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  12d594:	e0823003 	add	r3, r2, r3
  12d598:	e5d3103b 	ldrb	r1, [r3, #59]	; 0x3b
  12d59c:	ea000000 	b	12d5a4 <dhcp_create_msg+0x378>
  12d5a0:	e3a01000 	mov	r1, #0
  12d5a4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d5a8:	e5932010 	ldr	r2, [r3, #16]
  12d5ac:	e15b30be 	ldrh	r3, [fp, #-14]
  12d5b0:	e0823003 	add	r3, r2, r3
  12d5b4:	e1a02001 	mov	r2, r1
  12d5b8:	e5c3201c 	strb	r2, [r3, #28]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
  12d5bc:	e15b30be 	ldrh	r3, [fp, #-14]
  12d5c0:	e2833001 	add	r3, r3, #1
  12d5c4:	e14b30be 	strh	r3, [fp, #-14]
  12d5c8:	e15b30be 	ldrh	r3, [fp, #-14]
  12d5cc:	e353000f 	cmp	r3, #15
  12d5d0:	9affffe4 	bls	12d568 <dhcp_create_msg+0x33c>
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
  12d5d4:	e3a03000 	mov	r3, #0
  12d5d8:	e14b30be 	strh	r3, [fp, #-14]
  12d5dc:	ea000008 	b	12d604 <dhcp_create_msg+0x3d8>
    dhcp->msg_out->sname[i] = 0;
  12d5e0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d5e4:	e5932010 	ldr	r2, [r3, #16]
  12d5e8:	e15b30be 	ldrh	r3, [fp, #-14]
  12d5ec:	e0823003 	add	r3, r2, r3
  12d5f0:	e3a02000 	mov	r2, #0
  12d5f4:	e5c3202c 	strb	r2, [r3, #44]	; 0x2c
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
  12d5f8:	e15b30be 	ldrh	r3, [fp, #-14]
  12d5fc:	e2833001 	add	r3, r3, #1
  12d600:	e14b30be 	strh	r3, [fp, #-14]
  12d604:	e15b30be 	ldrh	r3, [fp, #-14]
  12d608:	e353003f 	cmp	r3, #63	; 0x3f
  12d60c:	9afffff3 	bls	12d5e0 <dhcp_create_msg+0x3b4>
  }
  for (i = 0; i < DHCP_FILE_LEN; i++) {
  12d610:	e3a03000 	mov	r3, #0
  12d614:	e14b30be 	strh	r3, [fp, #-14]
  12d618:	ea000008 	b	12d640 <dhcp_create_msg+0x414>
    dhcp->msg_out->file[i] = 0;
  12d61c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d620:	e5932010 	ldr	r2, [r3, #16]
  12d624:	e15b30be 	ldrh	r3, [fp, #-14]
  12d628:	e0823003 	add	r3, r2, r3
  12d62c:	e3a02000 	mov	r2, #0
  12d630:	e5c3206c 	strb	r2, [r3, #108]	; 0x6c
  for (i = 0; i < DHCP_FILE_LEN; i++) {
  12d634:	e15b30be 	ldrh	r3, [fp, #-14]
  12d638:	e2833001 	add	r3, r3, #1
  12d63c:	e14b30be 	strh	r3, [fp, #-14]
  12d640:	e15b30be 	ldrh	r3, [fp, #-14]
  12d644:	e353007f 	cmp	r3, #127	; 0x7f
  12d648:	9afffff3 	bls	12d61c <dhcp_create_msg+0x3f0>
  }
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
  12d64c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d650:	e5932010 	ldr	r2, [r3, #16]
  12d654:	e3a03000 	mov	r3, #0
  12d658:	e3833063 	orr	r3, r3, #99	; 0x63
  12d65c:	e5c230ec 	strb	r3, [r2, #236]	; 0xec
  12d660:	e3a03000 	mov	r3, #0
  12d664:	e1e03003 	mvn	r3, r3
  12d668:	e203307d 	and	r3, r3, #125	; 0x7d
  12d66c:	e1e03003 	mvn	r3, r3
  12d670:	e5c230ed 	strb	r3, [r2, #237]	; 0xed
  12d674:	e3a03000 	mov	r3, #0
  12d678:	e3833053 	orr	r3, r3, #83	; 0x53
  12d67c:	e5c230ee 	strb	r3, [r2, #238]	; 0xee
  12d680:	e3a03000 	mov	r3, #0
  12d684:	e3833063 	orr	r3, r3, #99	; 0x63
  12d688:	e5c230ef 	strb	r3, [r2, #239]	; 0xef
  dhcp->options_out_len = 0;
  12d68c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d690:	e3a02000 	mov	r2, #0
  12d694:	e1c321b4 	strh	r2, [r3, #20]
  /* fill options field with an incrementing array (for debugging purposes) */
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
  12d698:	e3a03000 	mov	r3, #0
  12d69c:	e14b30be 	strh	r3, [fp, #-14]
  12d6a0:	ea00000a 	b	12d6d0 <dhcp_create_msg+0x4a4>
    dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
  12d6a4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12d6a8:	e5932010 	ldr	r2, [r3, #16]
  12d6ac:	e15b30be 	ldrh	r3, [fp, #-14]
  12d6b0:	e15b10be 	ldrh	r1, [fp, #-14]
  12d6b4:	e6ef1071 	uxtb	r1, r1
  12d6b8:	e0823003 	add	r3, r2, r3
  12d6bc:	e1a02001 	mov	r2, r1
  12d6c0:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
  12d6c4:	e15b30be 	ldrh	r3, [fp, #-14]
  12d6c8:	e2833001 	add	r3, r3, #1
  12d6cc:	e14b30be 	strh	r3, [fp, #-14]
  12d6d0:	e15b30be 	ldrh	r3, [fp, #-14]
  12d6d4:	e3530043 	cmp	r3, #67	; 0x43
  12d6d8:	9afffff1 	bls	12d6a4 <dhcp_create_msg+0x478>
  }
  /* Add option MESSAGE_TYPE */
  dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
  12d6dc:	e3a02001 	mov	r2, #1
  12d6e0:	e3a01035 	mov	r1, #53	; 0x35
  12d6e4:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  12d6e8:	ebfffab7 	bl	12c1cc <dhcp_option>
  dhcp_option_byte(dhcp, message_type);
  12d6ec:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  12d6f0:	e1a01003 	mov	r1, r3
  12d6f4:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  12d6f8:	ebfffae3 	bl	12c28c <dhcp_option_byte>
  return ERR_OK;
  12d6fc:	e3a03000 	mov	r3, #0
}
  12d700:	e1a00003 	mov	r0, r3
  12d704:	e24bd008 	sub	sp, fp, #8
  12d708:	e8bd8810 	pop	{r4, fp, pc}

0012d70c <dhcp_delete_msg>:
 *
 * @param dhcp the dhcp struct to free the request from
 */
static void
dhcp_delete_msg(struct dhcp *dhcp)
{
  12d70c:	e92d4800 	push	{fp, lr}
  12d710:	e28db004 	add	fp, sp, #4
  12d714:	e24dd008 	sub	sp, sp, #8
  12d718:	e50b0008 	str	r0, [fp, #-8]
  LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
  12d71c:	e51b3008 	ldr	r3, [fp, #-8]
  12d720:	e3530000 	cmp	r3, #0
  12d724:	1a000007 	bne	12d748 <dhcp_delete_msg+0x3c>
  12d728:	e309031c 	movw	r0, #37660	; 0x931c
  12d72c:	e3400014 	movt	r0, #20
  12d730:	ebff5677 	bl	103114 <rt_kprintf>
  12d734:	e300176e 	movw	r1, #1902	; 0x76e
  12d738:	e3080f44 	movw	r0, #36676	; 0x8f44
  12d73c:	e3400014 	movt	r0, #20
  12d740:	ebff7647 	bl	10b064 <sys_arch_assert>
  12d744:	ea000023 	b	12d7d8 <dhcp_delete_msg+0xcc>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->p_out != NULL", dhcp->p_out != NULL);
  12d748:	e51b3008 	ldr	r3, [fp, #-8]
  12d74c:	e593300c 	ldr	r3, [r3, #12]
  12d750:	e3530000 	cmp	r3, #0
  12d754:	1a000006 	bne	12d774 <dhcp_delete_msg+0x68>
  12d758:	e309033c 	movw	r0, #37692	; 0x933c
  12d75c:	e3400014 	movt	r0, #20
  12d760:	ebff566b 	bl	103114 <rt_kprintf>
  12d764:	e300176f 	movw	r1, #1903	; 0x76f
  12d768:	e3080f44 	movw	r0, #36676	; 0x8f44
  12d76c:	e3400014 	movt	r0, #20
  12d770:	ebff763b 	bl	10b064 <sys_arch_assert>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->msg_out != NULL", dhcp->msg_out != NULL);
  12d774:	e51b3008 	ldr	r3, [fp, #-8]
  12d778:	e5933010 	ldr	r3, [r3, #16]
  12d77c:	e3530000 	cmp	r3, #0
  12d780:	1a000006 	bne	12d7a0 <dhcp_delete_msg+0x94>
  12d784:	e3090364 	movw	r0, #37732	; 0x9364
  12d788:	e3400014 	movt	r0, #20
  12d78c:	ebff5660 	bl	103114 <rt_kprintf>
  12d790:	e3a01e77 	mov	r1, #1904	; 0x770
  12d794:	e3080f44 	movw	r0, #36676	; 0x8f44
  12d798:	e3400014 	movt	r0, #20
  12d79c:	ebff7630 	bl	10b064 <sys_arch_assert>
  if (dhcp->p_out != NULL) {
  12d7a0:	e51b3008 	ldr	r3, [fp, #-8]
  12d7a4:	e593300c 	ldr	r3, [r3, #12]
  12d7a8:	e3530000 	cmp	r3, #0
  12d7ac:	0a000003 	beq	12d7c0 <dhcp_delete_msg+0xb4>
    pbuf_free(dhcp->p_out);
  12d7b0:	e51b3008 	ldr	r3, [fp, #-8]
  12d7b4:	e593300c 	ldr	r3, [r3, #12]
  12d7b8:	e1a00003 	mov	r0, r3
  12d7bc:	ebffb636 	bl	11b09c <pbuf_free>
  }
  dhcp->p_out = NULL;
  12d7c0:	e51b3008 	ldr	r3, [fp, #-8]
  12d7c4:	e3a02000 	mov	r2, #0
  12d7c8:	e583200c 	str	r2, [r3, #12]
  dhcp->msg_out = NULL;
  12d7cc:	e51b3008 	ldr	r3, [fp, #-8]
  12d7d0:	e3a02000 	mov	r2, #0
  12d7d4:	e5832010 	str	r2, [r3, #16]
}
  12d7d8:	e24bd004 	sub	sp, fp, #4
  12d7dc:	e8bd8800 	pop	{fp, pc}

0012d7e0 <dhcp_option_trailer>:
 *
 * @param dhcp DHCP state structure
 */
static void
dhcp_option_trailer(struct dhcp *dhcp)
{
  12d7e0:	e92d4800 	push	{fp, lr}
  12d7e4:	e28db004 	add	fp, sp, #4
  12d7e8:	e24dd008 	sub	sp, sp, #8
  12d7ec:	e50b0008 	str	r0, [fp, #-8]
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
  12d7f0:	e51b3008 	ldr	r3, [fp, #-8]
  12d7f4:	e3530000 	cmp	r3, #0
  12d7f8:	1a000007 	bne	12d81c <dhcp_option_trailer+0x3c>
  12d7fc:	e309038c 	movw	r0, #37772	; 0x938c
  12d800:	e3400014 	movt	r0, #20
  12d804:	ebff5642 	bl	103114 <rt_kprintf>
  12d808:	e3001783 	movw	r1, #1923	; 0x783
  12d80c:	e3080f44 	movw	r0, #36676	; 0x8f44
  12d810:	e3400014 	movt	r0, #20
  12d814:	ebff7612 	bl	10b064 <sys_arch_assert>
  12d818:	ea000039 	b	12d904 <dhcp_option_trailer+0x124>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
  12d81c:	e51b3008 	ldr	r3, [fp, #-8]
  12d820:	e5933010 	ldr	r3, [r3, #16]
  12d824:	e3530000 	cmp	r3, #0
  12d828:	1a000006 	bne	12d848 <dhcp_option_trailer+0x68>
  12d82c:	e30903b0 	movw	r0, #37808	; 0x93b0
  12d830:	e3400014 	movt	r0, #20
  12d834:	ebff5636 	bl	103114 <rt_kprintf>
  12d838:	e3001784 	movw	r1, #1924	; 0x784
  12d83c:	e3080f44 	movw	r0, #36676	; 0x8f44
  12d840:	e3400014 	movt	r0, #20
  12d844:	ebff7606 	bl	10b064 <sys_arch_assert>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
  12d848:	e51b3008 	ldr	r3, [fp, #-8]
  12d84c:	e1d331b4 	ldrh	r3, [r3, #20]
  12d850:	e3530043 	cmp	r3, #67	; 0x43
  12d854:	9a000006 	bls	12d874 <dhcp_option_trailer+0x94>
  12d858:	e30903dc 	movw	r0, #37852	; 0x93dc
  12d85c:	e3400014 	movt	r0, #20
  12d860:	ebff562b 	bl	103114 <rt_kprintf>
  12d864:	e3001785 	movw	r1, #1925	; 0x785
  12d868:	e3080f44 	movw	r0, #36676	; 0x8f44
  12d86c:	e3400014 	movt	r0, #20
  12d870:	ebff75fb 	bl	10b064 <sys_arch_assert>
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
  12d874:	e51b3008 	ldr	r3, [fp, #-8]
  12d878:	e5932010 	ldr	r2, [r3, #16]
  12d87c:	e51b3008 	ldr	r3, [fp, #-8]
  12d880:	e1d331b4 	ldrh	r3, [r3, #20]
  12d884:	e2831001 	add	r1, r3, #1
  12d888:	e6ff0071 	uxth	r0, r1
  12d88c:	e51b1008 	ldr	r1, [fp, #-8]
  12d890:	e1c101b4 	strh	r0, [r1, #20]
  12d894:	e0823003 	add	r3, r2, r3
  12d898:	e3e02000 	mvn	r2, #0
  12d89c:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
  /* packet is too small, or not 4 byte aligned? */
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
  12d8a0:	ea00000a 	b	12d8d0 <dhcp_option_trailer+0xf0>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
  12d8a4:	e51b3008 	ldr	r3, [fp, #-8]
  12d8a8:	e5932010 	ldr	r2, [r3, #16]
  12d8ac:	e51b3008 	ldr	r3, [fp, #-8]
  12d8b0:	e1d331b4 	ldrh	r3, [r3, #20]
  12d8b4:	e2831001 	add	r1, r3, #1
  12d8b8:	e6ff0071 	uxth	r0, r1
  12d8bc:	e51b1008 	ldr	r1, [fp, #-8]
  12d8c0:	e1c101b4 	strh	r0, [r1, #20]
  12d8c4:	e0823003 	add	r3, r2, r3
  12d8c8:	e3a02000 	mov	r2, #0
  12d8cc:	e5c320f0 	strb	r2, [r3, #240]	; 0xf0
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
  12d8d0:	e51b3008 	ldr	r3, [fp, #-8]
  12d8d4:	e1d331b4 	ldrh	r3, [r3, #20]
  12d8d8:	e3530043 	cmp	r3, #67	; 0x43
  12d8dc:	9a000004 	bls	12d8f4 <dhcp_option_trailer+0x114>
  12d8e0:	e51b3008 	ldr	r3, [fp, #-8]
  12d8e4:	e1d331b4 	ldrh	r3, [r3, #20]
  12d8e8:	e2033003 	and	r3, r3, #3
  12d8ec:	e3530000 	cmp	r3, #0
  12d8f0:	0a000003 	beq	12d904 <dhcp_option_trailer+0x124>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
  12d8f4:	e51b3008 	ldr	r3, [fp, #-8]
  12d8f8:	e1d331b4 	ldrh	r3, [r3, #20]
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
  12d8fc:	e3530043 	cmp	r3, #67	; 0x43
  12d900:	9affffe7 	bls	12d8a4 <dhcp_option_trailer+0xc4>
  }
}
  12d904:	e24bd004 	sub	sp, fp, #4
  12d908:	e8bd8800 	pop	{fp, pc}

0012d90c <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
  12d90c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  12d910:	e28db000 	add	fp, sp, #0
  12d914:	e24dd014 	sub	sp, sp, #20
  12d918:	e50b0010 	str	r0, [fp, #-16]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
  12d91c:	e51b3010 	ldr	r3, [fp, #-16]
  12d920:	e3530000 	cmp	r3, #0
  12d924:	0a000013 	beq	12d978 <dhcp_supplied_address+0x6c>
  12d928:	e51b3010 	ldr	r3, [fp, #-16]
  12d92c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12d930:	e3530000 	cmp	r3, #0
  12d934:	0a00000f 	beq	12d978 <dhcp_supplied_address+0x6c>
    struct dhcp* dhcp = netif_dhcp_data(netif);
  12d938:	e51b3010 	ldr	r3, [fp, #-16]
  12d93c:	e5933028 	ldr	r3, [r3, #40]	; 0x28
  12d940:	e50b3008 	str	r3, [fp, #-8]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING);
  12d944:	e51b3008 	ldr	r3, [fp, #-8]
  12d948:	e5d33009 	ldrb	r3, [r3, #9]
  12d94c:	e353000a 	cmp	r3, #10
  12d950:	0a000003 	beq	12d964 <dhcp_supplied_address+0x58>
  12d954:	e51b3008 	ldr	r3, [fp, #-8]
  12d958:	e5d33009 	ldrb	r3, [r3, #9]
  12d95c:	e3530005 	cmp	r3, #5
  12d960:	1a000001 	bne	12d96c <dhcp_supplied_address+0x60>
  12d964:	e3a03001 	mov	r3, #1
  12d968:	ea000000 	b	12d970 <dhcp_supplied_address+0x64>
  12d96c:	e3a03000 	mov	r3, #0
  12d970:	e6ef3073 	uxtb	r3, r3
  12d974:	ea000000 	b	12d97c <dhcp_supplied_address+0x70>
  }
  return 0;
  12d978:	e3a03000 	mov	r3, #0
}
  12d97c:	e1a00003 	mov	r0, r3
  12d980:	e28bd000 	add	sp, fp, #0
  12d984:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  12d988:	e12fff1e 	bx	lr

0012d98c <free_etharp_q>:
 *
 * @param q a qeueue of etharp_q_entry's to free
 */
static void
free_etharp_q(struct etharp_q_entry *q)
{
  12d98c:	e92d4800 	push	{fp, lr}
  12d990:	e28db004 	add	fp, sp, #4
  12d994:	e24dd010 	sub	sp, sp, #16
  12d998:	e50b0010 	str	r0, [fp, #-16]
  struct etharp_q_entry *r;
  LWIP_ASSERT("q != NULL", q != NULL);
  12d99c:	e51b3010 	ldr	r3, [fp, #-16]
  12d9a0:	e3530000 	cmp	r3, #0
  12d9a4:	1a000006 	bne	12d9c4 <free_etharp_q+0x38>
  12d9a8:	e309041c 	movw	r0, #37916	; 0x941c
  12d9ac:	e3400014 	movt	r0, #20
  12d9b0:	ebff55d7 	bl	103114 <rt_kprintf>
  12d9b4:	e3a01097 	mov	r1, #151	; 0x97
  12d9b8:	e3090428 	movw	r0, #37928	; 0x9428
  12d9bc:	e3400014 	movt	r0, #20
  12d9c0:	ebff75a7 	bl	10b064 <sys_arch_assert>
  LWIP_ASSERT("q->p != NULL", q->p != NULL);
  12d9c4:	e51b3010 	ldr	r3, [fp, #-16]
  12d9c8:	e5933004 	ldr	r3, [r3, #4]
  12d9cc:	e3530000 	cmp	r3, #0
  12d9d0:	1a00001e 	bne	12da50 <free_etharp_q+0xc4>
  12d9d4:	e309045c 	movw	r0, #37980	; 0x945c
  12d9d8:	e3400014 	movt	r0, #20
  12d9dc:	ebff55cc 	bl	103114 <rt_kprintf>
  12d9e0:	e3a01098 	mov	r1, #152	; 0x98
  12d9e4:	e3090428 	movw	r0, #37928	; 0x9428
  12d9e8:	e3400014 	movt	r0, #20
  12d9ec:	ebff759c 	bl	10b064 <sys_arch_assert>
  while (q) {
  12d9f0:	ea000016 	b	12da50 <free_etharp_q+0xc4>
    r = q;
  12d9f4:	e51b3010 	ldr	r3, [fp, #-16]
  12d9f8:	e50b3008 	str	r3, [fp, #-8]
    q = q->next;
  12d9fc:	e51b3010 	ldr	r3, [fp, #-16]
  12da00:	e5933000 	ldr	r3, [r3]
  12da04:	e50b3010 	str	r3, [fp, #-16]
    LWIP_ASSERT("r->p != NULL", (r->p != NULL));
  12da08:	e51b3008 	ldr	r3, [fp, #-8]
  12da0c:	e5933004 	ldr	r3, [r3, #4]
  12da10:	e3530000 	cmp	r3, #0
  12da14:	1a000006 	bne	12da34 <free_etharp_q+0xa8>
  12da18:	e309046c 	movw	r0, #37996	; 0x946c
  12da1c:	e3400014 	movt	r0, #20
  12da20:	ebff55bb 	bl	103114 <rt_kprintf>
  12da24:	e3a0109c 	mov	r1, #156	; 0x9c
  12da28:	e3090428 	movw	r0, #37928	; 0x9428
  12da2c:	e3400014 	movt	r0, #20
  12da30:	ebff758b 	bl	10b064 <sys_arch_assert>
    pbuf_free(r->p);
  12da34:	e51b3008 	ldr	r3, [fp, #-8]
  12da38:	e5933004 	ldr	r3, [r3, #4]
  12da3c:	e1a00003 	mov	r0, r3
  12da40:	ebffb595 	bl	11b09c <pbuf_free>
    memp_free(MEMP_ARP_QUEUE, r);
  12da44:	e51b1008 	ldr	r1, [fp, #-8]
  12da48:	e3a0000b 	mov	r0, #11
  12da4c:	ebffae84 	bl	119464 <memp_free>
  while (q) {
  12da50:	e51b3010 	ldr	r3, [fp, #-16]
  12da54:	e3530000 	cmp	r3, #0
  12da58:	1affffe5 	bne	12d9f4 <free_etharp_q+0x68>
  }
}
  12da5c:	e320f000 	nop	{0}
  12da60:	e24bd004 	sub	sp, fp, #4
  12da64:	e8bd8800 	pop	{fp, pc}

0012da68 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
  12da68:	e92d4800 	push	{fp, lr}
  12da6c:	e28db004 	add	fp, sp, #4
  12da70:	e24dd008 	sub	sp, sp, #8
  12da74:	e50b0008 	str	r0, [fp, #-8]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
  12da78:	e30f3ad4 	movw	r3, #64212	; 0xfad4
  12da7c:	e3403014 	movt	r3, #20
  12da80:	e51b2008 	ldr	r2, [fp, #-8]
  12da84:	e3a01018 	mov	r1, #24
  12da88:	e0020291 	mul	r2, r1, r2
  12da8c:	e0833002 	add	r3, r3, r2
  12da90:	e5933000 	ldr	r3, [r3]
  12da94:	e3530000 	cmp	r3, #0
  12da98:	0a000010 	beq	12dae0 <etharp_free_entry+0x78>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
  12da9c:	e30f3ad4 	movw	r3, #64212	; 0xfad4
  12daa0:	e3403014 	movt	r3, #20
  12daa4:	e51b2008 	ldr	r2, [fp, #-8]
  12daa8:	e3a01018 	mov	r1, #24
  12daac:	e0020291 	mul	r2, r1, r2
  12dab0:	e0833002 	add	r3, r3, r2
  12dab4:	e5933000 	ldr	r3, [r3]
  12dab8:	e1a00003 	mov	r0, r3
  12dabc:	ebffffb2 	bl	12d98c <free_etharp_q>
    arp_table[i].q = NULL;
  12dac0:	e30f3ad4 	movw	r3, #64212	; 0xfad4
  12dac4:	e3403014 	movt	r3, #20
  12dac8:	e51b2008 	ldr	r2, [fp, #-8]
  12dacc:	e3a01018 	mov	r1, #24
  12dad0:	e0020291 	mul	r2, r1, r2
  12dad4:	e0833002 	add	r3, r3, r2
  12dad8:	e3a02000 	mov	r2, #0
  12dadc:	e5832000 	str	r2, [r3]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
  12dae0:	e30f3ad4 	movw	r3, #64212	; 0xfad4
  12dae4:	e3403014 	movt	r3, #20
  12dae8:	e51b2008 	ldr	r2, [fp, #-8]
  12daec:	e3a01018 	mov	r1, #24
  12daf0:	e0020291 	mul	r2, r1, r2
  12daf4:	e0833002 	add	r3, r3, r2
  12daf8:	e2833014 	add	r3, r3, #20
  12dafc:	e3a02000 	mov	r2, #0
  12db00:	e5c32000 	strb	r2, [r3]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
  12db04:	e320f000 	nop	{0}
  12db08:	e24bd004 	sub	sp, fp, #4
  12db0c:	e8bd8800 	pop	{fp, pc}

0012db10 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
  12db10:	e92d4800 	push	{fp, lr}
  12db14:	e28db004 	add	fp, sp, #4
  12db18:	e24dd008 	sub	sp, sp, #8
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  12db1c:	e3a03000 	mov	r3, #0
  12db20:	e54b3005 	strb	r3, [fp, #-5]
  12db24:	ea000084 	b	12dd3c <etharp_tmr+0x22c>
    u8_t state = arp_table[i].state;
  12db28:	e55b2005 	ldrb	r2, [fp, #-5]
  12db2c:	e30f3ad4 	movw	r3, #64212	; 0xfad4
  12db30:	e3403014 	movt	r3, #20
  12db34:	e3a01018 	mov	r1, #24
  12db38:	e0020291 	mul	r2, r1, r2
  12db3c:	e0833002 	add	r3, r3, r2
  12db40:	e2833014 	add	r3, r3, #20
  12db44:	e5d33000 	ldrb	r3, [r3]
  12db48:	e54b3006 	strb	r3, [fp, #-6]
    if (state != ETHARP_STATE_EMPTY
  12db4c:	e55b3006 	ldrb	r3, [fp, #-6]
  12db50:	e3530000 	cmp	r3, #0
  12db54:	0a000075 	beq	12dd30 <etharp_tmr+0x220>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
  12db58:	e55b2005 	ldrb	r2, [fp, #-5]
  12db5c:	e30f3ad4 	movw	r3, #64212	; 0xfad4
  12db60:	e3403014 	movt	r3, #20
  12db64:	e3a01018 	mov	r1, #24
  12db68:	e0010291 	mul	r1, r1, r2
  12db6c:	e0833001 	add	r3, r3, r1
  12db70:	e2833012 	add	r3, r3, #18
  12db74:	e1d330b0 	ldrh	r3, [r3]
  12db78:	e2833001 	add	r3, r3, #1
  12db7c:	e6ff1073 	uxth	r1, r3
  12db80:	e30f3ad4 	movw	r3, #64212	; 0xfad4
  12db84:	e3403014 	movt	r3, #20
  12db88:	e3a00018 	mov	r0, #24
  12db8c:	e0020290 	mul	r2, r0, r2
  12db90:	e0833002 	add	r3, r3, r2
  12db94:	e2833012 	add	r3, r3, #18
  12db98:	e1c310b0 	strh	r1, [r3]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
  12db9c:	e55b2005 	ldrb	r2, [fp, #-5]
  12dba0:	e30f3ad4 	movw	r3, #64212	; 0xfad4
  12dba4:	e3403014 	movt	r3, #20
  12dba8:	e3a01018 	mov	r1, #24
  12dbac:	e0020291 	mul	r2, r1, r2
  12dbb0:	e0833002 	add	r3, r3, r2
  12dbb4:	e2833012 	add	r3, r3, #18
  12dbb8:	e1d330b0 	ldrh	r3, [r3]
  12dbbc:	e3530f4b 	cmp	r3, #300	; 0x12c
  12dbc0:	2a000013 	bcs	12dc14 <etharp_tmr+0x104>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
  12dbc4:	e55b2005 	ldrb	r2, [fp, #-5]
  12dbc8:	e30f3ad4 	movw	r3, #64212	; 0xfad4
  12dbcc:	e3403014 	movt	r3, #20
  12dbd0:	e3a01018 	mov	r1, #24
  12dbd4:	e0020291 	mul	r2, r1, r2
  12dbd8:	e0833002 	add	r3, r3, r2
  12dbdc:	e2833014 	add	r3, r3, #20
  12dbe0:	e5d33000 	ldrb	r3, [r3]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
  12dbe4:	e3530001 	cmp	r3, #1
  12dbe8:	1a00000d 	bne	12dc24 <etharp_tmr+0x114>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
  12dbec:	e55b2005 	ldrb	r2, [fp, #-5]
  12dbf0:	e30f3ad4 	movw	r3, #64212	; 0xfad4
  12dbf4:	e3403014 	movt	r3, #20
  12dbf8:	e3a01018 	mov	r1, #24
  12dbfc:	e0020291 	mul	r2, r1, r2
  12dc00:	e0833002 	add	r3, r3, r2
  12dc04:	e2833012 	add	r3, r3, #18
  12dc08:	e1d330b0 	ldrh	r3, [r3]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
  12dc0c:	e3530004 	cmp	r3, #4
  12dc10:	9a000003 	bls	12dc24 <etharp_tmr+0x114>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
  12dc14:	e55b3005 	ldrb	r3, [fp, #-5]
  12dc18:	e1a00003 	mov	r0, r3
  12dc1c:	ebffff91 	bl	12da68 <etharp_free_entry>
  12dc20:	ea000042 	b	12dd30 <etharp_tmr+0x220>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
  12dc24:	e55b2005 	ldrb	r2, [fp, #-5]
  12dc28:	e30f3ad4 	movw	r3, #64212	; 0xfad4
  12dc2c:	e3403014 	movt	r3, #20
  12dc30:	e3a01018 	mov	r1, #24
  12dc34:	e0020291 	mul	r2, r1, r2
  12dc38:	e0833002 	add	r3, r3, r2
  12dc3c:	e2833014 	add	r3, r3, #20
  12dc40:	e5d33000 	ldrb	r3, [r3]
  12dc44:	e3530003 	cmp	r3, #3
  12dc48:	1a000009 	bne	12dc74 <etharp_tmr+0x164>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
  12dc4c:	e55b2005 	ldrb	r2, [fp, #-5]
  12dc50:	e30f3ad4 	movw	r3, #64212	; 0xfad4
  12dc54:	e3403014 	movt	r3, #20
  12dc58:	e3a01018 	mov	r1, #24
  12dc5c:	e0020291 	mul	r2, r1, r2
  12dc60:	e0833002 	add	r3, r3, r2
  12dc64:	e2833014 	add	r3, r3, #20
  12dc68:	e3a02004 	mov	r2, #4
  12dc6c:	e5c32000 	strb	r2, [r3]
  12dc70:	ea00002e 	b	12dd30 <etharp_tmr+0x220>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
  12dc74:	e55b2005 	ldrb	r2, [fp, #-5]
  12dc78:	e30f3ad4 	movw	r3, #64212	; 0xfad4
  12dc7c:	e3403014 	movt	r3, #20
  12dc80:	e3a01018 	mov	r1, #24
  12dc84:	e0020291 	mul	r2, r1, r2
  12dc88:	e0833002 	add	r3, r3, r2
  12dc8c:	e2833014 	add	r3, r3, #20
  12dc90:	e5d33000 	ldrb	r3, [r3]
  12dc94:	e3530004 	cmp	r3, #4
  12dc98:	1a000009 	bne	12dcc4 <etharp_tmr+0x1b4>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
  12dc9c:	e55b2005 	ldrb	r2, [fp, #-5]
  12dca0:	e30f3ad4 	movw	r3, #64212	; 0xfad4
  12dca4:	e3403014 	movt	r3, #20
  12dca8:	e3a01018 	mov	r1, #24
  12dcac:	e0020291 	mul	r2, r1, r2
  12dcb0:	e0833002 	add	r3, r3, r2
  12dcb4:	e2833014 	add	r3, r3, #20
  12dcb8:	e3a02002 	mov	r2, #2
  12dcbc:	e5c32000 	strb	r2, [r3]
  12dcc0:	ea00001a 	b	12dd30 <etharp_tmr+0x220>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
  12dcc4:	e55b2005 	ldrb	r2, [fp, #-5]
  12dcc8:	e30f3ad4 	movw	r3, #64212	; 0xfad4
  12dccc:	e3403014 	movt	r3, #20
  12dcd0:	e3a01018 	mov	r1, #24
  12dcd4:	e0020291 	mul	r2, r1, r2
  12dcd8:	e0833002 	add	r3, r3, r2
  12dcdc:	e2833014 	add	r3, r3, #20
  12dce0:	e5d33000 	ldrb	r3, [r3]
  12dce4:	e3530001 	cmp	r3, #1
  12dce8:	1a000010 	bne	12dd30 <etharp_tmr+0x220>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
  12dcec:	e55b2005 	ldrb	r2, [fp, #-5]
  12dcf0:	e30f3ad4 	movw	r3, #64212	; 0xfad4
  12dcf4:	e3403014 	movt	r3, #20
  12dcf8:	e3a01018 	mov	r1, #24
  12dcfc:	e0020291 	mul	r2, r1, r2
  12dd00:	e0833002 	add	r3, r3, r2
  12dd04:	e2833008 	add	r3, r3, #8
  12dd08:	e5930000 	ldr	r0, [r3]
  12dd0c:	e55b3005 	ldrb	r3, [fp, #-5]
  12dd10:	e3a02018 	mov	r2, #24
  12dd14:	e0020392 	mul	r2, r2, r3
  12dd18:	e30f3ad4 	movw	r3, #64212	; 0xfad4
  12dd1c:	e3403014 	movt	r3, #20
  12dd20:	e0823003 	add	r3, r2, r3
  12dd24:	e2833004 	add	r3, r3, #4
  12dd28:	e1a01003 	mov	r1, r3
  12dd2c:	eb00066b 	bl	12f6e0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  12dd30:	e55b3005 	ldrb	r3, [fp, #-5]
  12dd34:	e2833001 	add	r3, r3, #1
  12dd38:	e54b3005 	strb	r3, [fp, #-5]
  12dd3c:	e55b3005 	ldrb	r3, [fp, #-5]
  12dd40:	e3530009 	cmp	r3, #9
  12dd44:	9affff77 	bls	12db28 <etharp_tmr+0x18>
      }
    }
  }
}
  12dd48:	e320f000 	nop	{0}
  12dd4c:	e24bd004 	sub	sp, fp, #4
  12dd50:	e8bd8800 	pop	{fp, pc}

0012dd54 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
  12dd54:	e92d4800 	push	{fp, lr}
  12dd58:	e28db004 	add	fp, sp, #4
  12dd5c:	e24dd020 	sub	sp, sp, #32
  12dd60:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  12dd64:	e1a03001 	mov	r3, r1
  12dd68:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  12dd6c:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  12dd70:	e3a0300a 	mov	r3, #10
  12dd74:	e54b3005 	strb	r3, [fp, #-5]
  12dd78:	e3a0300a 	mov	r3, #10
  12dd7c:	e54b3006 	strb	r3, [fp, #-6]
  s8_t empty = ARP_TABLE_SIZE;
  12dd80:	e3a0300a 	mov	r3, #10
  12dd84:	e54b3007 	strb	r3, [fp, #-7]
  u8_t i = 0;
  12dd88:	e3a03000 	mov	r3, #0
  12dd8c:	e54b3008 	strb	r3, [fp, #-8]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
  12dd90:	e3a0300a 	mov	r3, #10
  12dd94:	e54b3009 	strb	r3, [fp, #-9]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
  12dd98:	e3a03000 	mov	r3, #0
  12dd9c:	e14b30bc 	strh	r3, [fp, #-12]
  12dda0:	e3a03000 	mov	r3, #0
  12dda4:	e14b30be 	strh	r3, [fp, #-14]
  12dda8:	e3a03000 	mov	r3, #0
  12ddac:	e14b31b0 	strh	r3, [fp, #-16]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  12ddb0:	e3a03000 	mov	r3, #0
  12ddb4:	e54b3008 	strb	r3, [fp, #-8]
  12ddb8:	ea000088 	b	12dfe0 <etharp_find_entry+0x28c>
    u8_t state = arp_table[i].state;
  12ddbc:	e55b2008 	ldrb	r2, [fp, #-8]
  12ddc0:	e30f3ad4 	movw	r3, #64212	; 0xfad4
  12ddc4:	e3403014 	movt	r3, #20
  12ddc8:	e3a01018 	mov	r1, #24
  12ddcc:	e0020291 	mul	r2, r1, r2
  12ddd0:	e0833002 	add	r3, r3, r2
  12ddd4:	e2833014 	add	r3, r3, #20
  12ddd8:	e5d33000 	ldrb	r3, [r3]
  12dddc:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
  12dde0:	e15b30d7 	ldrsb	r3, [fp, #-7]
  12dde4:	e353000a 	cmp	r3, #10
  12dde8:	1a000005 	bne	12de04 <etharp_find_entry+0xb0>
  12ddec:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  12ddf0:	e3530000 	cmp	r3, #0
  12ddf4:	1a000002 	bne	12de04 <etharp_find_entry+0xb0>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
  12ddf8:	e55b3008 	ldrb	r3, [fp, #-8]
  12ddfc:	e54b3007 	strb	r3, [fp, #-7]
  12de00:	ea000073 	b	12dfd4 <etharp_find_entry+0x280>
    } else if (state != ETHARP_STATE_EMPTY) {
  12de04:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  12de08:	e3530000 	cmp	r3, #0
  12de0c:	0a000070 	beq	12dfd4 <etharp_find_entry+0x280>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
  12de10:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  12de14:	e3530001 	cmp	r3, #1
  12de18:	0a000009 	beq	12de44 <etharp_find_entry+0xf0>
  12de1c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  12de20:	e3530001 	cmp	r3, #1
  12de24:	8a000006 	bhi	12de44 <etharp_find_entry+0xf0>
  12de28:	e309047c 	movw	r0, #38012	; 0x947c
  12de2c:	e3400014 	movt	r0, #20
  12de30:	ebff54b7 	bl	103114 <rt_kprintf>
  12de34:	e3001126 	movw	r1, #294	; 0x126
  12de38:	e3090428 	movw	r0, #37928	; 0x9428
  12de3c:	e3400014 	movt	r0, #20
  12de40:	ebff7487 	bl	10b064 <sys_arch_assert>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
  12de44:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12de48:	e3530000 	cmp	r3, #0
  12de4c:	0a00000d 	beq	12de88 <etharp_find_entry+0x134>
  12de50:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12de54:	e5932000 	ldr	r2, [r3]
  12de58:	e55b1008 	ldrb	r1, [fp, #-8]
  12de5c:	e30f3ad4 	movw	r3, #64212	; 0xfad4
  12de60:	e3403014 	movt	r3, #20
  12de64:	e3a00018 	mov	r0, #24
  12de68:	e0010190 	mul	r1, r0, r1
  12de6c:	e0833001 	add	r3, r3, r1
  12de70:	e2833004 	add	r3, r3, #4
  12de74:	e5933000 	ldr	r3, [r3]
  12de78:	e1520003 	cmp	r2, r3
  12de7c:	1a000001 	bne	12de88 <etharp_find_entry+0x134>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
  12de80:	e15b30d8 	ldrsb	r3, [fp, #-8]
  12de84:	ea0000ce 	b	12e1c4 <etharp_find_entry+0x470>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
  12de88:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  12de8c:	e3530001 	cmp	r3, #1
  12de90:	1a000036 	bne	12df70 <etharp_find_entry+0x21c>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
  12de94:	e55b2008 	ldrb	r2, [fp, #-8]
  12de98:	e30f3ad4 	movw	r3, #64212	; 0xfad4
  12de9c:	e3403014 	movt	r3, #20
  12dea0:	e3a01018 	mov	r1, #24
  12dea4:	e0020291 	mul	r2, r1, r2
  12dea8:	e0833002 	add	r3, r3, r2
  12deac:	e5933000 	ldr	r3, [r3]
  12deb0:	e3530000 	cmp	r3, #0
  12deb4:	0a000016 	beq	12df14 <etharp_find_entry+0x1c0>
          if (arp_table[i].ctime >= age_queue) {
  12deb8:	e55b2008 	ldrb	r2, [fp, #-8]
  12debc:	e30f3ad4 	movw	r3, #64212	; 0xfad4
  12dec0:	e3403014 	movt	r3, #20
  12dec4:	e3a01018 	mov	r1, #24
  12dec8:	e0020291 	mul	r2, r1, r2
  12decc:	e0833002 	add	r3, r3, r2
  12ded0:	e2833012 	add	r3, r3, #18
  12ded4:	e1d330b0 	ldrh	r3, [r3]
  12ded8:	e15b20bc 	ldrh	r2, [fp, #-12]
  12dedc:	e1520003 	cmp	r2, r3
  12dee0:	8a00003b 	bhi	12dfd4 <etharp_find_entry+0x280>
            old_queue = i;
  12dee4:	e55b3008 	ldrb	r3, [fp, #-8]
  12dee8:	e54b3009 	strb	r3, [fp, #-9]
            age_queue = arp_table[i].ctime;
  12deec:	e55b2008 	ldrb	r2, [fp, #-8]
  12def0:	e30f3ad4 	movw	r3, #64212	; 0xfad4
  12def4:	e3403014 	movt	r3, #20
  12def8:	e3a01018 	mov	r1, #24
  12defc:	e0020291 	mul	r2, r1, r2
  12df00:	e0833002 	add	r3, r3, r2
  12df04:	e2833012 	add	r3, r3, #18
  12df08:	e1d330b0 	ldrh	r3, [r3]
  12df0c:	e14b30bc 	strh	r3, [fp, #-12]
  12df10:	ea00002f 	b	12dfd4 <etharp_find_entry+0x280>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
  12df14:	e55b2008 	ldrb	r2, [fp, #-8]
  12df18:	e30f3ad4 	movw	r3, #64212	; 0xfad4
  12df1c:	e3403014 	movt	r3, #20
  12df20:	e3a01018 	mov	r1, #24
  12df24:	e0020291 	mul	r2, r1, r2
  12df28:	e0833002 	add	r3, r3, r2
  12df2c:	e2833012 	add	r3, r3, #18
  12df30:	e1d330b0 	ldrh	r3, [r3]
  12df34:	e15b20be 	ldrh	r2, [fp, #-14]
  12df38:	e1520003 	cmp	r2, r3
  12df3c:	8a000024 	bhi	12dfd4 <etharp_find_entry+0x280>
            old_pending = i;
  12df40:	e55b3008 	ldrb	r3, [fp, #-8]
  12df44:	e54b3005 	strb	r3, [fp, #-5]
            age_pending = arp_table[i].ctime;
  12df48:	e55b2008 	ldrb	r2, [fp, #-8]
  12df4c:	e30f3ad4 	movw	r3, #64212	; 0xfad4
  12df50:	e3403014 	movt	r3, #20
  12df54:	e3a01018 	mov	r1, #24
  12df58:	e0020291 	mul	r2, r1, r2
  12df5c:	e0833002 	add	r3, r3, r2
  12df60:	e2833012 	add	r3, r3, #18
  12df64:	e1d330b0 	ldrh	r3, [r3]
  12df68:	e14b30be 	strh	r3, [fp, #-14]
  12df6c:	ea000018 	b	12dfd4 <etharp_find_entry+0x280>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
  12df70:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  12df74:	e3530001 	cmp	r3, #1
  12df78:	9a000015 	bls	12dfd4 <etharp_find_entry+0x280>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
  12df7c:	e55b2008 	ldrb	r2, [fp, #-8]
  12df80:	e30f3ad4 	movw	r3, #64212	; 0xfad4
  12df84:	e3403014 	movt	r3, #20
  12df88:	e3a01018 	mov	r1, #24
  12df8c:	e0020291 	mul	r2, r1, r2
  12df90:	e0833002 	add	r3, r3, r2
  12df94:	e2833012 	add	r3, r3, #18
  12df98:	e1d330b0 	ldrh	r3, [r3]
  12df9c:	e15b21b0 	ldrh	r2, [fp, #-16]
  12dfa0:	e1520003 	cmp	r2, r3
  12dfa4:	8a00000a 	bhi	12dfd4 <etharp_find_entry+0x280>
            old_stable = i;
  12dfa8:	e55b3008 	ldrb	r3, [fp, #-8]
  12dfac:	e54b3006 	strb	r3, [fp, #-6]
            age_stable = arp_table[i].ctime;
  12dfb0:	e55b2008 	ldrb	r2, [fp, #-8]
  12dfb4:	e30f3ad4 	movw	r3, #64212	; 0xfad4
  12dfb8:	e3403014 	movt	r3, #20
  12dfbc:	e3a01018 	mov	r1, #24
  12dfc0:	e0020291 	mul	r2, r1, r2
  12dfc4:	e0833002 	add	r3, r3, r2
  12dfc8:	e2833012 	add	r3, r3, #18
  12dfcc:	e1d330b0 	ldrh	r3, [r3]
  12dfd0:	e14b31b0 	strh	r3, [fp, #-16]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  12dfd4:	e55b3008 	ldrb	r3, [fp, #-8]
  12dfd8:	e2833001 	add	r3, r3, #1
  12dfdc:	e54b3008 	strb	r3, [fp, #-8]
  12dfe0:	e55b3008 	ldrb	r3, [fp, #-8]
  12dfe4:	e3530009 	cmp	r3, #9
  12dfe8:	9affff73 	bls	12ddbc <etharp_find_entry+0x68>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
  12dfec:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
  12dff0:	e2033002 	and	r3, r3, #2
  12dff4:	e3530000 	cmp	r3, #0
  12dff8:	1a000006 	bne	12e018 <etharp_find_entry+0x2c4>
  12dffc:	e15b30d7 	ldrsb	r3, [fp, #-7]
  12e000:	e353000a 	cmp	r3, #10
  12e004:	1a000005 	bne	12e020 <etharp_find_entry+0x2cc>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
  12e008:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
  12e00c:	e2033001 	and	r3, r3, #1
  12e010:	e3530000 	cmp	r3, #0
  12e014:	1a000001 	bne	12e020 <etharp_find_entry+0x2cc>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
  12e018:	e3e03000 	mvn	r3, #0
  12e01c:	ea000068 	b	12e1c4 <etharp_find_entry+0x470>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
  12e020:	e15b30d7 	ldrsb	r3, [fp, #-7]
  12e024:	e3530009 	cmp	r3, #9
  12e028:	ca000002 	bgt	12e038 <etharp_find_entry+0x2e4>
    i = empty;
  12e02c:	e55b3007 	ldrb	r3, [fp, #-7]
  12e030:	e54b3008 	strb	r3, [fp, #-8]
  12e034:	ea000030 	b	12e0fc <etharp_find_entry+0x3a8>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
  12e038:	e15b30d6 	ldrsb	r3, [fp, #-6]
  12e03c:	e3530009 	cmp	r3, #9
  12e040:	ca000012 	bgt	12e090 <etharp_find_entry+0x33c>
      /* recycle oldest stable*/
      i = old_stable;
  12e044:	e55b3006 	ldrb	r3, [fp, #-6]
  12e048:	e54b3008 	strb	r3, [fp, #-8]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
  12e04c:	e55b2008 	ldrb	r2, [fp, #-8]
  12e050:	e30f3ad4 	movw	r3, #64212	; 0xfad4
  12e054:	e3403014 	movt	r3, #20
  12e058:	e3a01018 	mov	r1, #24
  12e05c:	e0020291 	mul	r2, r1, r2
  12e060:	e0833002 	add	r3, r3, r2
  12e064:	e5933000 	ldr	r3, [r3]
  12e068:	e3530000 	cmp	r3, #0
  12e06c:	0a000015 	beq	12e0c8 <etharp_find_entry+0x374>
  12e070:	e30904bc 	movw	r0, #38076	; 0x94bc
  12e074:	e3400014 	movt	r0, #20
  12e078:	ebff5425 	bl	103114 <rt_kprintf>
  12e07c:	e300116f 	movw	r1, #367	; 0x16f
  12e080:	e3090428 	movw	r0, #37928	; 0x9428
  12e084:	e3400014 	movt	r0, #20
  12e088:	ebff73f5 	bl	10b064 <sys_arch_assert>
  12e08c:	ea00000d 	b	12e0c8 <etharp_find_entry+0x374>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
  12e090:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12e094:	e3530009 	cmp	r3, #9
  12e098:	ca000002 	bgt	12e0a8 <etharp_find_entry+0x354>
      /* recycle oldest pending */
      i = old_pending;
  12e09c:	e55b3005 	ldrb	r3, [fp, #-5]
  12e0a0:	e54b3008 	strb	r3, [fp, #-8]
  12e0a4:	ea000007 	b	12e0c8 <etharp_find_entry+0x374>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
  12e0a8:	e15b30d9 	ldrsb	r3, [fp, #-9]
  12e0ac:	e3530009 	cmp	r3, #9
  12e0b0:	ca000002 	bgt	12e0c0 <etharp_find_entry+0x36c>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
  12e0b4:	e55b3009 	ldrb	r3, [fp, #-9]
  12e0b8:	e54b3008 	strb	r3, [fp, #-8]
  12e0bc:	ea000001 	b	12e0c8 <etharp_find_entry+0x374>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
  12e0c0:	e3e03000 	mvn	r3, #0
  12e0c4:	ea00003e 	b	12e1c4 <etharp_find_entry+0x470>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  12e0c8:	e55b3008 	ldrb	r3, [fp, #-8]
  12e0cc:	e3530009 	cmp	r3, #9
  12e0d0:	9a000006 	bls	12e0f0 <etharp_find_entry+0x39c>
  12e0d4:	e30904d4 	movw	r0, #38100	; 0x94d4
  12e0d8:	e3400014 	movt	r0, #20
  12e0dc:	ebff540c 	bl	103114 <rt_kprintf>
  12e0e0:	e3001181 	movw	r1, #385	; 0x181
  12e0e4:	e3090428 	movw	r0, #37928	; 0x9428
  12e0e8:	e3400014 	movt	r0, #20
  12e0ec:	ebff73dc 	bl	10b064 <sys_arch_assert>
    etharp_free_entry(i);
  12e0f0:	e55b3008 	ldrb	r3, [fp, #-8]
  12e0f4:	e1a00003 	mov	r0, r3
  12e0f8:	ebfffe5a 	bl	12da68 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  12e0fc:	e55b3008 	ldrb	r3, [fp, #-8]
  12e100:	e3530009 	cmp	r3, #9
  12e104:	9a000006 	bls	12e124 <etharp_find_entry+0x3d0>
  12e108:	e30904d4 	movw	r0, #38100	; 0x94d4
  12e10c:	e3400014 	movt	r0, #20
  12e110:	ebff53ff 	bl	103114 <rt_kprintf>
  12e114:	e3001185 	movw	r1, #389	; 0x185
  12e118:	e3090428 	movw	r0, #37928	; 0x9428
  12e11c:	e3400014 	movt	r0, #20
  12e120:	ebff73cf 	bl	10b064 <sys_arch_assert>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
  12e124:	e55b2008 	ldrb	r2, [fp, #-8]
  12e128:	e30f3ad4 	movw	r3, #64212	; 0xfad4
  12e12c:	e3403014 	movt	r3, #20
  12e130:	e3a01018 	mov	r1, #24
  12e134:	e0020291 	mul	r2, r1, r2
  12e138:	e0833002 	add	r3, r3, r2
  12e13c:	e2833014 	add	r3, r3, #20
  12e140:	e5d33000 	ldrb	r3, [r3]
  12e144:	e3530000 	cmp	r3, #0
  12e148:	0a000006 	beq	12e168 <etharp_find_entry+0x414>
  12e14c:	e30904e8 	movw	r0, #38120	; 0x94e8
  12e150:	e3400014 	movt	r0, #20
  12e154:	ebff53ee 	bl	103114 <rt_kprintf>
  12e158:	e3001187 	movw	r1, #391	; 0x187
  12e15c:	e3090428 	movw	r0, #37928	; 0x9428
  12e160:	e3400014 	movt	r0, #20
  12e164:	ebff73be 	bl	10b064 <sys_arch_assert>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
  12e168:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12e16c:	e3530000 	cmp	r3, #0
  12e170:	0a000009 	beq	12e19c <etharp_find_entry+0x448>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
  12e174:	e55b1008 	ldrb	r1, [fp, #-8]
  12e178:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12e17c:	e5932000 	ldr	r2, [r3]
  12e180:	e30f3ad4 	movw	r3, #64212	; 0xfad4
  12e184:	e3403014 	movt	r3, #20
  12e188:	e3a00018 	mov	r0, #24
  12e18c:	e0010190 	mul	r1, r0, r1
  12e190:	e0833001 	add	r3, r3, r1
  12e194:	e2833004 	add	r3, r3, #4
  12e198:	e5832000 	str	r2, [r3]
  }
  arp_table[i].ctime = 0;
  12e19c:	e55b2008 	ldrb	r2, [fp, #-8]
  12e1a0:	e30f3ad4 	movw	r3, #64212	; 0xfad4
  12e1a4:	e3403014 	movt	r3, #20
  12e1a8:	e3a01018 	mov	r1, #24
  12e1ac:	e0020291 	mul	r2, r1, r2
  12e1b0:	e0833002 	add	r3, r3, r2
  12e1b4:	e2833012 	add	r3, r3, #18
  12e1b8:	e3a02000 	mov	r2, #0
  12e1bc:	e1c320b0 	strh	r2, [r3]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
  12e1c0:	e15b30d8 	ldrsb	r3, [fp, #-8]
}
  12e1c4:	e1a00003 	mov	r0, r3
  12e1c8:	e24bd004 	sub	sp, fp, #4
  12e1cc:	e8bd8800 	pop	{fp, pc}

0012e1d0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
  12e1d0:	e92d4800 	push	{fp, lr}
  12e1d4:	e28db004 	add	fp, sp, #4
  12e1d8:	e24dd028 	sub	sp, sp, #40	; 0x28
  12e1dc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  12e1e0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  12e1e4:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  12e1e8:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
  12e1ec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12e1f0:	e5d3303a 	ldrb	r3, [r3, #58]	; 0x3a
  12e1f4:	e3530006 	cmp	r3, #6
  12e1f8:	0a000006 	beq	12e218 <etharp_update_arp_entry+0x48>
  12e1fc:	e3090514 	movw	r0, #38164	; 0x9514
  12e200:	e3400014 	movt	r0, #20
  12e204:	ebff53c2 	bl	103114 <rt_kprintf>
  12e208:	e30011ab 	movw	r1, #427	; 0x1ab
  12e20c:	e3090428 	movw	r0, #37928	; 0x9428
  12e210:	e3400014 	movt	r0, #20
  12e214:	ebff7392 	bl	10b064 <sys_arch_assert>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
  12e218:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e21c:	e3530000 	cmp	r3, #0
  12e220:	0a000010 	beq	12e268 <etharp_update_arp_entry+0x98>
  12e224:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e228:	e5933000 	ldr	r3, [r3]
  12e22c:	e3530000 	cmp	r3, #0
  12e230:	0a00000c 	beq	12e268 <etharp_update_arp_entry+0x98>
      ip4_addr_isbroadcast(ipaddr, netif) ||
  12e234:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e238:	e5933000 	ldr	r3, [r3]
  12e23c:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  12e240:	e1a00003 	mov	r0, r3
  12e244:	eb00112a 	bl	1326f4 <ip4_addr_isbroadcast_u32>
  12e248:	e1a03000 	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
  12e24c:	e3530000 	cmp	r3, #0
  12e250:	1a000004 	bne	12e268 <etharp_update_arp_entry+0x98>
      ip4_addr_ismulticast(ipaddr)) {
  12e254:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e258:	e5933000 	ldr	r3, [r3]
  12e25c:	e20330f0 	and	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
  12e260:	e35300e0 	cmp	r3, #224	; 0xe0
  12e264:	1a000001 	bne	12e270 <etharp_update_arp_entry+0xa0>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
  12e268:	e3e0300f 	mvn	r3, #15
  12e26c:	ea00005e 	b	12e3ec <etharp_update_arp_entry+0x21c>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
  12e270:	e55b3021 	ldrb	r3, [fp, #-33]	; 0xffffffdf
  12e274:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  12e278:	e1a01003 	mov	r1, r3
  12e27c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  12e280:	ebfffeb3 	bl	12dd54 <etharp_find_entry>
  12e284:	e1a03000 	mov	r3, r0
  12e288:	e54b3005 	strb	r3, [fp, #-5]
  /* bail out if no entry could be found */
  if (i < 0) {
  12e28c:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12e290:	e3530000 	cmp	r3, #0
  12e294:	aa000001 	bge	12e2a0 <etharp_update_arp_entry+0xd0>
    return (err_t)i;
  12e298:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12e29c:	ea000052 	b	12e3ec <etharp_update_arp_entry+0x21c>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
  12e2a0:	e15b20d5 	ldrsb	r2, [fp, #-5]
  12e2a4:	e30f3ad4 	movw	r3, #64212	; 0xfad4
  12e2a8:	e3403014 	movt	r3, #20
  12e2ac:	e3a01018 	mov	r1, #24
  12e2b0:	e0020291 	mul	r2, r1, r2
  12e2b4:	e0833002 	add	r3, r3, r2
  12e2b8:	e2833014 	add	r3, r3, #20
  12e2bc:	e3a02002 	mov	r2, #2
  12e2c0:	e5c32000 	strb	r2, [r3]
  }

  /* record network interface */
  arp_table[i].netif = netif;
  12e2c4:	e15b20d5 	ldrsb	r2, [fp, #-5]
  12e2c8:	e30f3ad4 	movw	r3, #64212	; 0xfad4
  12e2cc:	e3403014 	movt	r3, #20
  12e2d0:	e3a01018 	mov	r1, #24
  12e2d4:	e0020291 	mul	r2, r1, r2
  12e2d8:	e0833002 	add	r3, r3, r2
  12e2dc:	e2833008 	add	r3, r3, #8
  12e2e0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  12e2e4:	e5832000 	str	r2, [r3]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
  12e2e8:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12e2ec:	e3a02018 	mov	r2, #24
  12e2f0:	e0030392 	mul	r3, r2, r3
  12e2f4:	e2832008 	add	r2, r3, #8
  12e2f8:	e30f3ad4 	movw	r3, #64212	; 0xfad4
  12e2fc:	e3403014 	movt	r3, #20
  12e300:	e0823003 	add	r3, r2, r3
  12e304:	e2833004 	add	r3, r3, #4
  12e308:	e3a02006 	mov	r2, #6
  12e30c:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  12e310:	e1a00003 	mov	r0, r3
  12e314:	eb004b18 	bl	140f7c <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
  12e318:	e15b20d5 	ldrsb	r2, [fp, #-5]
  12e31c:	e30f3ad4 	movw	r3, #64212	; 0xfad4
  12e320:	e3403014 	movt	r3, #20
  12e324:	e3a01018 	mov	r1, #24
  12e328:	e0020291 	mul	r2, r1, r2
  12e32c:	e0833002 	add	r3, r3, r2
  12e330:	e2833012 	add	r3, r3, #18
  12e334:	e3a02000 	mov	r2, #0
  12e338:	e1c320b0 	strh	r2, [r3]
  /* this is where we will send out queued packets! */
#if ARP_QUEUEING
  while (arp_table[i].q != NULL) {
  12e33c:	ea000020 	b	12e3c4 <etharp_update_arp_entry+0x1f4>
    struct pbuf *p;
    /* remember remainder of queue */
    struct etharp_q_entry *q = arp_table[i].q;
  12e340:	e15b20d5 	ldrsb	r2, [fp, #-5]
  12e344:	e30f3ad4 	movw	r3, #64212	; 0xfad4
  12e348:	e3403014 	movt	r3, #20
  12e34c:	e3a01018 	mov	r1, #24
  12e350:	e0020291 	mul	r2, r1, r2
  12e354:	e0833002 	add	r3, r3, r2
  12e358:	e5933000 	ldr	r3, [r3]
  12e35c:	e50b300c 	str	r3, [fp, #-12]
    /* pop first item off the queue */
    arp_table[i].q = q->next;
  12e360:	e15b10d5 	ldrsb	r1, [fp, #-5]
  12e364:	e51b300c 	ldr	r3, [fp, #-12]
  12e368:	e5932000 	ldr	r2, [r3]
  12e36c:	e30f3ad4 	movw	r3, #64212	; 0xfad4
  12e370:	e3403014 	movt	r3, #20
  12e374:	e3a00018 	mov	r0, #24
  12e378:	e0010190 	mul	r1, r0, r1
  12e37c:	e0833001 	add	r3, r3, r1
  12e380:	e5832000 	str	r2, [r3]
    /* get the packet pointer */
    p = q->p;
  12e384:	e51b300c 	ldr	r3, [fp, #-12]
  12e388:	e5933004 	ldr	r3, [r3, #4]
  12e38c:	e50b3010 	str	r3, [fp, #-16]
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
  12e390:	e51b100c 	ldr	r1, [fp, #-12]
  12e394:	e3a0000b 	mov	r0, #11
  12e398:	ebffac31 	bl	119464 <memp_free>
  if (arp_table[i].q != NULL) {
    struct pbuf *p = arp_table[i].q;
    arp_table[i].q = NULL;
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
  12e39c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12e3a0:	e283203b 	add	r2, r3, #59	; 0x3b
  12e3a4:	e3a03b02 	mov	r3, #2048	; 0x800
  12e3a8:	e58d3000 	str	r3, [sp]
  12e3ac:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12e3b0:	e51b1010 	ldr	r1, [fp, #-16]
  12e3b4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12e3b8:	ebffeb48 	bl	1290e0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
  12e3bc:	e51b0010 	ldr	r0, [fp, #-16]
  12e3c0:	ebffb335 	bl	11b09c <pbuf_free>
  while (arp_table[i].q != NULL) {
  12e3c4:	e15b20d5 	ldrsb	r2, [fp, #-5]
  12e3c8:	e30f3ad4 	movw	r3, #64212	; 0xfad4
  12e3cc:	e3403014 	movt	r3, #20
  12e3d0:	e3a01018 	mov	r1, #24
  12e3d4:	e0020291 	mul	r2, r1, r2
  12e3d8:	e0833002 	add	r3, r3, r2
  12e3dc:	e5933000 	ldr	r3, [r3]
  12e3e0:	e3530000 	cmp	r3, #0
  12e3e4:	1affffd5 	bne	12e340 <etharp_update_arp_entry+0x170>
  }
  return ERR_OK;
  12e3e8:	e3a03000 	mov	r3, #0
}
  12e3ec:	e1a00003 	mov	r0, r3
  12e3f0:	e24bd004 	sub	sp, fp, #4
  12e3f4:	e8bd8800 	pop	{fp, pc}

0012e3f8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
  12e3f8:	e92d4800 	push	{fp, lr}
  12e3fc:	e28db004 	add	fp, sp, #4
  12e400:	e24dd010 	sub	sp, sp, #16
  12e404:	e50b0010 	str	r0, [fp, #-16]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  12e408:	e3a03000 	mov	r3, #0
  12e40c:	e54b3005 	strb	r3, [fp, #-5]
  12e410:	ea00001c 	b	12e488 <etharp_cleanup_netif+0x90>
    u8_t state = arp_table[i].state;
  12e414:	e55b2005 	ldrb	r2, [fp, #-5]
  12e418:	e30f3ad4 	movw	r3, #64212	; 0xfad4
  12e41c:	e3403014 	movt	r3, #20
  12e420:	e3a01018 	mov	r1, #24
  12e424:	e0020291 	mul	r2, r1, r2
  12e428:	e0833002 	add	r3, r3, r2
  12e42c:	e2833014 	add	r3, r3, #20
  12e430:	e5d33000 	ldrb	r3, [r3]
  12e434:	e54b3006 	strb	r3, [fp, #-6]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
  12e438:	e55b3006 	ldrb	r3, [fp, #-6]
  12e43c:	e3530000 	cmp	r3, #0
  12e440:	0a00000d 	beq	12e47c <etharp_cleanup_netif+0x84>
  12e444:	e55b2005 	ldrb	r2, [fp, #-5]
  12e448:	e30f3ad4 	movw	r3, #64212	; 0xfad4
  12e44c:	e3403014 	movt	r3, #20
  12e450:	e3a01018 	mov	r1, #24
  12e454:	e0020291 	mul	r2, r1, r2
  12e458:	e0833002 	add	r3, r3, r2
  12e45c:	e2833008 	add	r3, r3, #8
  12e460:	e5933000 	ldr	r3, [r3]
  12e464:	e51b2010 	ldr	r2, [fp, #-16]
  12e468:	e1520003 	cmp	r2, r3
  12e46c:	1a000002 	bne	12e47c <etharp_cleanup_netif+0x84>
      etharp_free_entry(i);
  12e470:	e55b3005 	ldrb	r3, [fp, #-5]
  12e474:	e1a00003 	mov	r0, r3
  12e478:	ebfffd7a 	bl	12da68 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
  12e47c:	e55b3005 	ldrb	r3, [fp, #-5]
  12e480:	e2833001 	add	r3, r3, #1
  12e484:	e54b3005 	strb	r3, [fp, #-5]
  12e488:	e55b3005 	ldrb	r3, [fp, #-5]
  12e48c:	e3530009 	cmp	r3, #9
  12e490:	9affffdf 	bls	12e414 <etharp_cleanup_netif+0x1c>
    }
  }
}
  12e494:	e320f000 	nop	{0}
  12e498:	e24bd004 	sub	sp, fp, #4
  12e49c:	e8bd8800 	pop	{fp, pc}

0012e4a0 <etharp_find_addr>:
 * @return table index if found, -1 otherwise
 */
s8_t
etharp_find_addr(struct netif *netif, const ip4_addr_t *ipaddr,
         struct eth_addr **eth_ret, const ip4_addr_t **ip_ret)
{
  12e4a0:	e92d4800 	push	{fp, lr}
  12e4a4:	e28db004 	add	fp, sp, #4
  12e4a8:	e24dd018 	sub	sp, sp, #24
  12e4ac:	e50b0010 	str	r0, [fp, #-16]
  12e4b0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  12e4b4:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  12e4b8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  s8_t i;

  LWIP_ASSERT("eth_ret != NULL && ip_ret != NULL",
  12e4bc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12e4c0:	e3530000 	cmp	r3, #0
  12e4c4:	0a000002 	beq	12e4d4 <etharp_find_addr+0x34>
  12e4c8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e4cc:	e3530000 	cmp	r3, #0
  12e4d0:	1a000006 	bne	12e4f0 <etharp_find_addr+0x50>
  12e4d4:	e3090538 	movw	r0, #38200	; 0x9538
  12e4d8:	e3400014 	movt	r0, #20
  12e4dc:	ebff530c 	bl	103114 <rt_kprintf>
  12e4e0:	e300124d 	movw	r1, #589	; 0x24d
  12e4e4:	e3090428 	movw	r0, #37928	; 0x9428
  12e4e8:	e3400014 	movt	r0, #20
  12e4ec:	ebff72dc 	bl	10b064 <sys_arch_assert>
    eth_ret != NULL && ip_ret != NULL);

  LWIP_UNUSED_ARG(netif);

  i = etharp_find_entry(ipaddr, ETHARP_FLAG_FIND_ONLY, netif);
  12e4f0:	e51b2010 	ldr	r2, [fp, #-16]
  12e4f4:	e3a01002 	mov	r1, #2
  12e4f8:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  12e4fc:	ebfffe14 	bl	12dd54 <etharp_find_entry>
  12e500:	e1a03000 	mov	r3, r0
  12e504:	e54b3005 	strb	r3, [fp, #-5]
  if ((i >= 0) && (arp_table[i].state >= ETHARP_STATE_STABLE)) {
  12e508:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12e50c:	e3530000 	cmp	r3, #0
  12e510:	ba00001e 	blt	12e590 <etharp_find_addr+0xf0>
  12e514:	e15b20d5 	ldrsb	r2, [fp, #-5]
  12e518:	e30f3ad4 	movw	r3, #64212	; 0xfad4
  12e51c:	e3403014 	movt	r3, #20
  12e520:	e3a01018 	mov	r1, #24
  12e524:	e0020291 	mul	r2, r1, r2
  12e528:	e0833002 	add	r3, r3, r2
  12e52c:	e2833014 	add	r3, r3, #20
  12e530:	e5d33000 	ldrb	r3, [r3]
  12e534:	e3530001 	cmp	r3, #1
  12e538:	9a000014 	bls	12e590 <etharp_find_addr+0xf0>
      *eth_ret = &arp_table[i].ethaddr;
  12e53c:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12e540:	e3a02018 	mov	r2, #24
  12e544:	e0030392 	mul	r3, r2, r3
  12e548:	e2832008 	add	r2, r3, #8
  12e54c:	e30f3ad4 	movw	r3, #64212	; 0xfad4
  12e550:	e3403014 	movt	r3, #20
  12e554:	e0823003 	add	r3, r2, r3
  12e558:	e2832004 	add	r2, r3, #4
  12e55c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12e560:	e5832000 	str	r2, [r3]
      *ip_ret = &arp_table[i].ipaddr;
  12e564:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12e568:	e3a02018 	mov	r2, #24
  12e56c:	e0020392 	mul	r2, r2, r3
  12e570:	e30f3ad4 	movw	r3, #64212	; 0xfad4
  12e574:	e3403014 	movt	r3, #20
  12e578:	e0823003 	add	r3, r2, r3
  12e57c:	e2832004 	add	r2, r3, #4
  12e580:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e584:	e5832000 	str	r2, [r3]
      return i;
  12e588:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12e58c:	ea000000 	b	12e594 <etharp_find_addr+0xf4>
  }
  return -1;
  12e590:	e3e03000 	mvn	r3, #0
}
  12e594:	e1a00003 	mov	r0, r3
  12e598:	e24bd004 	sub	sp, fp, #4
  12e59c:	e8bd8800 	pop	{fp, pc}

0012e5a0 <etharp_get_entry>:
 * @param eth_ret return value: ETH address
 * @return 1 on valid index, 0 otherwise
 */
u8_t
etharp_get_entry(u8_t i, ip4_addr_t **ipaddr, struct netif **netif, struct eth_addr **eth_ret)
{
  12e5a0:	e92d4800 	push	{fp, lr}
  12e5a4:	e28db004 	add	fp, sp, #4
  12e5a8:	e24dd010 	sub	sp, sp, #16
  12e5ac:	e50b100c 	str	r1, [fp, #-12]
  12e5b0:	e50b2010 	str	r2, [fp, #-16]
  12e5b4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  12e5b8:	e1a03000 	mov	r3, r0
  12e5bc:	e54b3005 	strb	r3, [fp, #-5]
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
  12e5c0:	e51b300c 	ldr	r3, [fp, #-12]
  12e5c4:	e3530000 	cmp	r3, #0
  12e5c8:	1a000006 	bne	12e5e8 <etharp_get_entry+0x48>
  12e5cc:	e309055c 	movw	r0, #38236	; 0x955c
  12e5d0:	e3400014 	movt	r0, #20
  12e5d4:	ebff52ce 	bl	103114 <rt_kprintf>
  12e5d8:	e3001266 	movw	r1, #614	; 0x266
  12e5dc:	e3090428 	movw	r0, #37928	; 0x9428
  12e5e0:	e3400014 	movt	r0, #20
  12e5e4:	ebff729e 	bl	10b064 <sys_arch_assert>
  LWIP_ASSERT("netif != NULL", netif != NULL);
  12e5e8:	e51b3010 	ldr	r3, [fp, #-16]
  12e5ec:	e3530000 	cmp	r3, #0
  12e5f0:	1a000006 	bne	12e610 <etharp_get_entry+0x70>
  12e5f4:	e309056c 	movw	r0, #38252	; 0x956c
  12e5f8:	e3400014 	movt	r0, #20
  12e5fc:	ebff52c4 	bl	103114 <rt_kprintf>
  12e600:	e3001267 	movw	r1, #615	; 0x267
  12e604:	e3090428 	movw	r0, #37928	; 0x9428
  12e608:	e3400014 	movt	r0, #20
  12e60c:	ebff7294 	bl	10b064 <sys_arch_assert>
  LWIP_ASSERT("eth_ret != NULL", eth_ret != NULL);
  12e610:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12e614:	e3530000 	cmp	r3, #0
  12e618:	1a000006 	bne	12e638 <etharp_get_entry+0x98>
  12e61c:	e309057c 	movw	r0, #38268	; 0x957c
  12e620:	e3400014 	movt	r0, #20
  12e624:	ebff52ba 	bl	103114 <rt_kprintf>
  12e628:	e3a01f9a 	mov	r1, #616	; 0x268
  12e62c:	e3090428 	movw	r0, #37928	; 0x9428
  12e630:	e3400014 	movt	r0, #20
  12e634:	ebff728a 	bl	10b064 <sys_arch_assert>

  if((i < ARP_TABLE_SIZE) && (arp_table[i].state >= ETHARP_STATE_STABLE)) {
  12e638:	e55b3005 	ldrb	r3, [fp, #-5]
  12e63c:	e3530009 	cmp	r3, #9
  12e640:	8a000028 	bhi	12e6e8 <etharp_get_entry+0x148>
  12e644:	e55b2005 	ldrb	r2, [fp, #-5]
  12e648:	e30f3ad4 	movw	r3, #64212	; 0xfad4
  12e64c:	e3403014 	movt	r3, #20
  12e650:	e3a01018 	mov	r1, #24
  12e654:	e0020291 	mul	r2, r1, r2
  12e658:	e0833002 	add	r3, r3, r2
  12e65c:	e2833014 	add	r3, r3, #20
  12e660:	e5d33000 	ldrb	r3, [r3]
  12e664:	e3530001 	cmp	r3, #1
  12e668:	9a00001e 	bls	12e6e8 <etharp_get_entry+0x148>
    *ipaddr  = &arp_table[i].ipaddr;
  12e66c:	e55b3005 	ldrb	r3, [fp, #-5]
  12e670:	e3a02018 	mov	r2, #24
  12e674:	e0020392 	mul	r2, r2, r3
  12e678:	e30f3ad4 	movw	r3, #64212	; 0xfad4
  12e67c:	e3403014 	movt	r3, #20
  12e680:	e0823003 	add	r3, r2, r3
  12e684:	e2832004 	add	r2, r3, #4
  12e688:	e51b300c 	ldr	r3, [fp, #-12]
  12e68c:	e5832000 	str	r2, [r3]
    *netif   = arp_table[i].netif;
  12e690:	e55b2005 	ldrb	r2, [fp, #-5]
  12e694:	e30f3ad4 	movw	r3, #64212	; 0xfad4
  12e698:	e3403014 	movt	r3, #20
  12e69c:	e3a01018 	mov	r1, #24
  12e6a0:	e0020291 	mul	r2, r1, r2
  12e6a4:	e0833002 	add	r3, r3, r2
  12e6a8:	e2833008 	add	r3, r3, #8
  12e6ac:	e5932000 	ldr	r2, [r3]
  12e6b0:	e51b3010 	ldr	r3, [fp, #-16]
  12e6b4:	e5832000 	str	r2, [r3]
    *eth_ret = &arp_table[i].ethaddr;
  12e6b8:	e55b3005 	ldrb	r3, [fp, #-5]
  12e6bc:	e3a02018 	mov	r2, #24
  12e6c0:	e0030392 	mul	r3, r2, r3
  12e6c4:	e2832008 	add	r2, r3, #8
  12e6c8:	e30f3ad4 	movw	r3, #64212	; 0xfad4
  12e6cc:	e3403014 	movt	r3, #20
  12e6d0:	e0823003 	add	r3, r2, r3
  12e6d4:	e2832004 	add	r2, r3, #4
  12e6d8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12e6dc:	e5832000 	str	r2, [r3]
    return 1;
  12e6e0:	e3a03001 	mov	r3, #1
  12e6e4:	ea000000 	b	12e6ec <etharp_get_entry+0x14c>
  } else {
    return 0;
  12e6e8:	e3a03000 	mov	r3, #0
  }
}
  12e6ec:	e1a00003 	mov	r0, r3
  12e6f0:	e24bd004 	sub	sp, fp, #4
  12e6f4:	e8bd8800 	pop	{fp, pc}

0012e6f8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
  12e6f8:	e92d4800 	push	{fp, lr}
  12e6fc:	e28db004 	add	fp, sp, #4
  12e700:	e24dd028 	sub	sp, sp, #40	; 0x28
  12e704:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  12e708:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
  12e70c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e710:	e3530000 	cmp	r3, #0
  12e714:	1a000007 	bne	12e738 <etharp_input+0x40>
  12e718:	e309056c 	movw	r0, #38252	; 0x956c
  12e71c:	e3400014 	movt	r0, #20
  12e720:	ebff527b 	bl	103114 <rt_kprintf>
  12e724:	e3a01fa2 	mov	r1, #648	; 0x288
  12e728:	e3090428 	movw	r0, #37928	; 0x9428
  12e72c:	e3400014 	movt	r0, #20
  12e730:	ebff724b 	bl	10b064 <sys_arch_assert>
  12e734:	ea000085 	b	12e950 <etharp_input+0x258>

  hdr = (struct etharp_hdr *)p->payload;
  12e738:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12e73c:	e5933004 	ldr	r3, [r3, #4]
  12e740:	e50b300c 	str	r3, [fp, #-12]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
  12e744:	e51b300c 	ldr	r3, [fp, #-12]
  12e748:	e1d330b0 	ldrh	r3, [r3]
  12e74c:	e6ff3073 	uxth	r3, r3
  12e750:	e3530c01 	cmp	r3, #256	; 0x100
  12e754:	1a00000c 	bne	12e78c <etharp_input+0x94>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
  12e758:	e51b300c 	ldr	r3, [fp, #-12]
  12e75c:	e5d33004 	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
  12e760:	e3530006 	cmp	r3, #6
  12e764:	1a000008 	bne	12e78c <etharp_input+0x94>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
  12e768:	e51b300c 	ldr	r3, [fp, #-12]
  12e76c:	e5d33005 	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
  12e770:	e3530004 	cmp	r3, #4
  12e774:	1a000004 	bne	12e78c <etharp_input+0x94>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
  12e778:	e51b300c 	ldr	r3, [fp, #-12]
  12e77c:	e1d330b2 	ldrh	r3, [r3, #2]
  12e780:	e6ff3073 	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
  12e784:	e3530008 	cmp	r3, #8
  12e788:	0a000012 	beq	12e7d8 <etharp_input+0xe0>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
  12e78c:	e3063840 	movw	r3, #26688	; 0x6840
  12e790:	e3403057 	movt	r3, #87	; 0x57
  12e794:	e1d332b8 	ldrh	r3, [r3, #40]	; 0x28
  12e798:	e2833001 	add	r3, r3, #1
  12e79c:	e6ff2073 	uxth	r2, r3
  12e7a0:	e3063840 	movw	r3, #26688	; 0x6840
  12e7a4:	e3403057 	movt	r3, #87	; 0x57
  12e7a8:	e1c322b8 	strh	r2, [r3, #40]	; 0x28
    ETHARP_STATS_INC(etharp.drop);
  12e7ac:	e3063840 	movw	r3, #26688	; 0x6840
  12e7b0:	e3403057 	movt	r3, #87	; 0x57
  12e7b4:	e1d331be 	ldrh	r3, [r3, #30]
  12e7b8:	e2833001 	add	r3, r3, #1
  12e7bc:	e6ff2073 	uxth	r2, r3
  12e7c0:	e3063840 	movw	r3, #26688	; 0x6840
  12e7c4:	e3403057 	movt	r3, #87	; 0x57
  12e7c8:	e1c321be 	strh	r2, [r3, #30]
    pbuf_free(p);
  12e7cc:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12e7d0:	ebffb231 	bl	11b09c <pbuf_free>
    return;
  12e7d4:	ea00005d 	b	12e950 <etharp_input+0x258>
  }
  ETHARP_STATS_INC(etharp.recv);
  12e7d8:	e3063840 	movw	r3, #26688	; 0x6840
  12e7dc:	e3403057 	movt	r3, #87	; 0x57
  12e7e0:	e1d331ba 	ldrh	r3, [r3, #26]
  12e7e4:	e2833001 	add	r3, r3, #1
  12e7e8:	e6ff2073 	uxth	r2, r3
  12e7ec:	e3063840 	movw	r3, #26688	; 0x6840
  12e7f0:	e3403057 	movt	r3, #87	; 0x57
  12e7f4:	e1c321ba 	strh	r2, [r3, #26]
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
  12e7f8:	e51b300c 	ldr	r3, [fp, #-12]
  12e7fc:	e283300e 	add	r3, r3, #14
  12e800:	e5933000 	ldr	r3, [r3]
  12e804:	e50b3010 	str	r3, [fp, #-16]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
  12e808:	e51b300c 	ldr	r3, [fp, #-12]
  12e80c:	e2833018 	add	r3, r3, #24
  12e810:	e5933000 	ldr	r3, [r3]
  12e814:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
  12e818:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e81c:	e2833004 	add	r3, r3, #4
  12e820:	e5933000 	ldr	r3, [r3]
  12e824:	e3530000 	cmp	r3, #0
  12e828:	1a000002 	bne	12e838 <etharp_input+0x140>
    for_us = 0;
  12e82c:	e3a03000 	mov	r3, #0
  12e830:	e54b3005 	strb	r3, [fp, #-5]
  12e834:	ea000008 	b	12e85c <etharp_input+0x164>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
  12e838:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  12e83c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e840:	e2833004 	add	r3, r3, #4
  12e844:	e5933000 	ldr	r3, [r3]
  12e848:	e1520003 	cmp	r2, r3
  12e84c:	03a03001 	moveq	r3, #1
  12e850:	13a03000 	movne	r3, #0
  12e854:	e6ef3073 	uxtb	r3, r3
  12e858:	e54b3005 	strb	r3, [fp, #-5]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
  12e85c:	e51b300c 	ldr	r3, [fp, #-12]
  12e860:	e2832008 	add	r2, r3, #8
  12e864:	e55b3005 	ldrb	r3, [fp, #-5]
  12e868:	e3530000 	cmp	r3, #0
  12e86c:	0a000001 	beq	12e878 <etharp_input+0x180>
  12e870:	e3a03001 	mov	r3, #1
  12e874:	ea000000 	b	12e87c <etharp_input+0x184>
  12e878:	e3a03002 	mov	r3, #2
  12e87c:	e24b1010 	sub	r1, fp, #16
  12e880:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  12e884:	ebfffe51 	bl	12e1d0 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
  12e888:	e51b300c 	ldr	r3, [fp, #-12]
  12e88c:	e1d330b6 	ldrh	r3, [r3, #6]
  12e890:	e6ff3073 	uxth	r3, r3
  12e894:	e3530c01 	cmp	r3, #256	; 0x100
  12e898:	0a000002 	beq	12e8a8 <etharp_input+0x1b0>
  12e89c:	e3530c02 	cmp	r3, #512	; 0x200
  12e8a0:	0a000019 	beq	12e90c <etharp_input+0x214>
  12e8a4:	ea00001d 	b	12e920 <etharp_input+0x228>
     * reply. In any case, we time-stamp any existing ARP entry,
     * and possibly send out an IP packet that was queued on it. */

    LWIP_DEBUGF (ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: incoming ARP request\n"));
    /* ARP request for our address? */
    if (for_us) {
  12e8a8:	e55b3005 	ldrb	r3, [fp, #-5]
  12e8ac:	e3530000 	cmp	r3, #0
  12e8b0:	0a000023 	beq	12e944 <etharp_input+0x24c>
      /* send ARP response */
      etharp_raw(netif,
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
  12e8b4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e8b8:	e283003b 	add	r0, r3, #59	; 0x3b
  12e8bc:	e51b300c 	ldr	r3, [fp, #-12]
  12e8c0:	e283c008 	add	ip, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
  12e8c4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e8c8:	e283e03b 	add	lr, r3, #59	; 0x3b
  12e8cc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12e8d0:	e2833004 	add	r3, r3, #4
                 &hdr->shwaddr, &sipaddr,
  12e8d4:	e51b200c 	ldr	r2, [fp, #-12]
  12e8d8:	e2822008 	add	r2, r2, #8
      etharp_raw(netif,
  12e8dc:	e3a01002 	mov	r1, #2
  12e8e0:	e58d100c 	str	r1, [sp, #12]
  12e8e4:	e24b1010 	sub	r1, fp, #16
  12e8e8:	e58d1008 	str	r1, [sp, #8]
  12e8ec:	e58d2004 	str	r2, [sp, #4]
  12e8f0:	e58d3000 	str	r3, [sp]
  12e8f4:	e1a0300e 	mov	r3, lr
  12e8f8:	e1a0200c 	mov	r2, ip
  12e8fc:	e1a01000 	mov	r1, r0
  12e900:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  12e904:	eb0002d5 	bl	12f460 <etharp_raw>
    /* request was not directed to us */
    } else {
      /* { for_us == 0 and netif->ip_addr.addr != 0 } */
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP request was not for us.\n"));
    }
    break;
  12e908:	ea00000d 	b	12e944 <etharp_input+0x24c>
#if (LWIP_DHCP && DHCP_DOES_ARP_CHECK)
    /* DHCP wants to know about ARP replies from any host with an
     * IP address also offered to us by the DHCP server. We do not
     * want to take a duplicate IP address on a single network.
     * @todo How should we handle redundant (fail-over) interfaces? */
    dhcp_arp_reply(netif, &sipaddr);
  12e90c:	e24b3010 	sub	r3, fp, #16
  12e910:	e1a01003 	mov	r1, r3
  12e914:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  12e918:	ebfff256 	bl	12b278 <dhcp_arp_reply>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  12e91c:	ea000009 	b	12e948 <etharp_input+0x250>
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
  12e920:	e3063840 	movw	r3, #26688	; 0x6840
  12e924:	e3403057 	movt	r3, #87	; 0x57
  12e928:	e1d332bc 	ldrh	r3, [r3, #44]	; 0x2c
  12e92c:	e2833001 	add	r3, r3, #1
  12e930:	e6ff2073 	uxth	r2, r3
  12e934:	e3063840 	movw	r3, #26688	; 0x6840
  12e938:	e3403057 	movt	r3, #87	; 0x57
  12e93c:	e1c322bc 	strh	r2, [r3, #44]	; 0x2c
    break;
  12e940:	ea000000 	b	12e948 <etharp_input+0x250>
    break;
  12e944:	e320f000 	nop	{0}
  }
  /* free ARP packet */
  pbuf_free(p);
  12e948:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12e94c:	ebffb1d2 	bl	11b09c <pbuf_free>
}
  12e950:	e24bd004 	sub	sp, fp, #4
  12e954:	e8bd8800 	pop	{fp, pc}

0012e958 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
  12e958:	e92d4800 	push	{fp, lr}
  12e95c:	e28db004 	add	fp, sp, #4
  12e960:	e24dd018 	sub	sp, sp, #24
  12e964:	e50b0008 	str	r0, [fp, #-8]
  12e968:	e50b100c 	str	r1, [fp, #-12]
  12e96c:	e1a03002 	mov	r3, r2
  12e970:	e54b300d 	strb	r3, [fp, #-13]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
  12e974:	e55b200d 	ldrb	r2, [fp, #-13]
  12e978:	e30f3ad4 	movw	r3, #64212	; 0xfad4
  12e97c:	e3403014 	movt	r3, #20
  12e980:	e3a01018 	mov	r1, #24
  12e984:	e0020291 	mul	r2, r1, r2
  12e988:	e0833002 	add	r3, r3, r2
  12e98c:	e2833014 	add	r3, r3, #20
  12e990:	e5d33000 	ldrb	r3, [r3]
  12e994:	e3530001 	cmp	r3, #1
  12e998:	8a000006 	bhi	12e9b8 <etharp_output_to_arp_index+0x60>
  12e99c:	e309058c 	movw	r0, #38284	; 0x958c
  12e9a0:	e3400014 	movt	r0, #20
  12e9a4:	ebff51da 	bl	103114 <rt_kprintf>
  12e9a8:	e30012ed 	movw	r1, #749	; 0x2ed
  12e9ac:	e3090428 	movw	r0, #37928	; 0x9428
  12e9b0:	e3400014 	movt	r0, #20
  12e9b4:	ebff71aa 	bl	10b064 <sys_arch_assert>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
  12e9b8:	e55b200d 	ldrb	r2, [fp, #-13]
  12e9bc:	e30f3ad4 	movw	r3, #64212	; 0xfad4
  12e9c0:	e3403014 	movt	r3, #20
  12e9c4:	e3a01018 	mov	r1, #24
  12e9c8:	e0020291 	mul	r2, r1, r2
  12e9cc:	e0833002 	add	r3, r3, r2
  12e9d0:	e2833014 	add	r3, r3, #20
  12e9d4:	e5d33000 	ldrb	r3, [r3]
  12e9d8:	e3530002 	cmp	r3, #2
  12e9dc:	1a000049 	bne	12eb08 <etharp_output_to_arp_index+0x1b0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
  12e9e0:	e55b200d 	ldrb	r2, [fp, #-13]
  12e9e4:	e30f3ad4 	movw	r3, #64212	; 0xfad4
  12e9e8:	e3403014 	movt	r3, #20
  12e9ec:	e3a01018 	mov	r1, #24
  12e9f0:	e0020291 	mul	r2, r1, r2
  12e9f4:	e0833002 	add	r3, r3, r2
  12e9f8:	e2833012 	add	r3, r3, #18
  12e9fc:	e1d330b0 	ldrh	r3, [r3]
  12ea00:	e3530f47 	cmp	r3, #284	; 0x11c
  12ea04:	9a000016 	bls	12ea64 <etharp_output_to_arp_index+0x10c>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
  12ea08:	e55b300d 	ldrb	r3, [fp, #-13]
  12ea0c:	e3a02018 	mov	r2, #24
  12ea10:	e0020392 	mul	r2, r2, r3
  12ea14:	e30f3ad4 	movw	r3, #64212	; 0xfad4
  12ea18:	e3403014 	movt	r3, #20
  12ea1c:	e0823003 	add	r3, r2, r3
  12ea20:	e2833004 	add	r3, r3, #4
  12ea24:	e1a01003 	mov	r1, r3
  12ea28:	e51b0008 	ldr	r0, [fp, #-8]
  12ea2c:	eb00032b 	bl	12f6e0 <etharp_request>
  12ea30:	e1a03000 	mov	r3, r0
  12ea34:	e3530000 	cmp	r3, #0
  12ea38:	1a000032 	bne	12eb08 <etharp_output_to_arp_index+0x1b0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
  12ea3c:	e55b200d 	ldrb	r2, [fp, #-13]
  12ea40:	e30f3ad4 	movw	r3, #64212	; 0xfad4
  12ea44:	e3403014 	movt	r3, #20
  12ea48:	e3a01018 	mov	r1, #24
  12ea4c:	e0020291 	mul	r2, r1, r2
  12ea50:	e0833002 	add	r3, r3, r2
  12ea54:	e2833014 	add	r3, r3, #20
  12ea58:	e3a02003 	mov	r2, #3
  12ea5c:	e5c32000 	strb	r2, [r3]
  12ea60:	ea000028 	b	12eb08 <etharp_output_to_arp_index+0x1b0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
  12ea64:	e55b200d 	ldrb	r2, [fp, #-13]
  12ea68:	e30f3ad4 	movw	r3, #64212	; 0xfad4
  12ea6c:	e3403014 	movt	r3, #20
  12ea70:	e3a01018 	mov	r1, #24
  12ea74:	e0020291 	mul	r2, r1, r2
  12ea78:	e0833002 	add	r3, r3, r2
  12ea7c:	e2833012 	add	r3, r3, #18
  12ea80:	e1d330b0 	ldrh	r3, [r3]
  12ea84:	e300210d 	movw	r2, #269	; 0x10d
  12ea88:	e1530002 	cmp	r3, r2
  12ea8c:	9a00001d 	bls	12eb08 <etharp_output_to_arp_index+0x1b0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
  12ea90:	e55b300d 	ldrb	r3, [fp, #-13]
  12ea94:	e3a02018 	mov	r2, #24
  12ea98:	e0020392 	mul	r2, r2, r3
  12ea9c:	e30f3ad4 	movw	r3, #64212	; 0xfad4
  12eaa0:	e3403014 	movt	r3, #20
  12eaa4:	e0823003 	add	r3, r2, r3
  12eaa8:	e2831004 	add	r1, r3, #4
  12eaac:	e55b300d 	ldrb	r3, [fp, #-13]
  12eab0:	e3a02018 	mov	r2, #24
  12eab4:	e0030392 	mul	r3, r2, r3
  12eab8:	e2832008 	add	r2, r3, #8
  12eabc:	e30f3ad4 	movw	r3, #64212	; 0xfad4
  12eac0:	e3403014 	movt	r3, #20
  12eac4:	e0823003 	add	r3, r2, r3
  12eac8:	e2833004 	add	r3, r3, #4
  12eacc:	e1a02003 	mov	r2, r3
  12ead0:	e51b0008 	ldr	r0, [fp, #-8]
  12ead4:	eb0002e5 	bl	12f670 <etharp_request_dst>
  12ead8:	e1a03000 	mov	r3, r0
  12eadc:	e3530000 	cmp	r3, #0
  12eae0:	1a000008 	bne	12eb08 <etharp_output_to_arp_index+0x1b0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
  12eae4:	e55b200d 	ldrb	r2, [fp, #-13]
  12eae8:	e30f3ad4 	movw	r3, #64212	; 0xfad4
  12eaec:	e3403014 	movt	r3, #20
  12eaf0:	e3a01018 	mov	r1, #24
  12eaf4:	e0020291 	mul	r2, r1, r2
  12eaf8:	e0833002 	add	r3, r3, r2
  12eafc:	e2833014 	add	r3, r3, #20
  12eb00:	e3a02003 	mov	r2, #3
  12eb04:	e5c32000 	strb	r2, [r3]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
  12eb08:	e51b3008 	ldr	r3, [fp, #-8]
  12eb0c:	e283103b 	add	r1, r3, #59	; 0x3b
  12eb10:	e55b300d 	ldrb	r3, [fp, #-13]
  12eb14:	e3a02018 	mov	r2, #24
  12eb18:	e0030392 	mul	r3, r2, r3
  12eb1c:	e2832008 	add	r2, r3, #8
  12eb20:	e30f3ad4 	movw	r3, #64212	; 0xfad4
  12eb24:	e3403014 	movt	r3, #20
  12eb28:	e0823003 	add	r3, r2, r3
  12eb2c:	e2832004 	add	r2, r3, #4
  12eb30:	e3a03b02 	mov	r3, #2048	; 0x800
  12eb34:	e58d3000 	str	r3, [sp]
  12eb38:	e1a03002 	mov	r3, r2
  12eb3c:	e1a02001 	mov	r2, r1
  12eb40:	e51b100c 	ldr	r1, [fp, #-12]
  12eb44:	e51b0008 	ldr	r0, [fp, #-8]
  12eb48:	ebffe964 	bl	1290e0 <ethernet_output>
  12eb4c:	e1a03000 	mov	r3, r0
}
  12eb50:	e1a00003 	mov	r0, r3
  12eb54:	e24bd004 	sub	sp, fp, #4
  12eb58:	e8bd8800 	pop	{fp, pc}

0012eb5c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
  12eb5c:	e92d4800 	push	{fp, lr}
  12eb60:	e28db004 	add	fp, sp, #4
  12eb64:	e24dd028 	sub	sp, sp, #40	; 0x28
  12eb68:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  12eb6c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  12eb70:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
  12eb74:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12eb78:	e50b300c 	str	r3, [fp, #-12]

  LWIP_ASSERT("netif != NULL", netif != NULL);
  12eb7c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12eb80:	e3530000 	cmp	r3, #0
  12eb84:	1a000006 	bne	12eba4 <etharp_output+0x48>
  12eb88:	e309056c 	movw	r0, #38252	; 0x956c
  12eb8c:	e3400014 	movt	r0, #20
  12eb90:	ebff515f 	bl	103114 <rt_kprintf>
  12eb94:	e300131b 	movw	r1, #795	; 0x31b
  12eb98:	e3090428 	movw	r0, #37928	; 0x9428
  12eb9c:	e3400014 	movt	r0, #20
  12eba0:	ebff712f 	bl	10b064 <sys_arch_assert>
  LWIP_ASSERT("q != NULL", q != NULL);
  12eba4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12eba8:	e3530000 	cmp	r3, #0
  12ebac:	1a000006 	bne	12ebcc <etharp_output+0x70>
  12ebb0:	e309041c 	movw	r0, #37916	; 0x941c
  12ebb4:	e3400014 	movt	r0, #20
  12ebb8:	ebff5155 	bl	103114 <rt_kprintf>
  12ebbc:	e3a01fc7 	mov	r1, #796	; 0x31c
  12ebc0:	e3090428 	movw	r0, #37928	; 0x9428
  12ebc4:	e3400014 	movt	r0, #20
  12ebc8:	ebff7125 	bl	10b064 <sys_arch_assert>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
  12ebcc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12ebd0:	e3530000 	cmp	r3, #0
  12ebd4:	1a000006 	bne	12ebf4 <etharp_output+0x98>
  12ebd8:	e309055c 	movw	r0, #38236	; 0x955c
  12ebdc:	e3400014 	movt	r0, #20
  12ebe0:	ebff514b 	bl	103114 <rt_kprintf>
  12ebe4:	e300131d 	movw	r1, #797	; 0x31d
  12ebe8:	e3090428 	movw	r0, #37928	; 0x9428
  12ebec:	e3400014 	movt	r0, #20
  12ebf0:	ebff711b 	bl	10b064 <sys_arch_assert>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
  12ebf4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12ebf8:	e5933000 	ldr	r3, [r3]
  12ebfc:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  12ec00:	e1a00003 	mov	r0, r3
  12ec04:	eb000eba 	bl	1326f4 <ip4_addr_isbroadcast_u32>
  12ec08:	e1a03000 	mov	r3, r0
  12ec0c:	e3530000 	cmp	r3, #0
  12ec10:	0a000003 	beq	12ec24 <etharp_output+0xc8>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
  12ec14:	e3083d04 	movw	r3, #36100	; 0x8d04
  12ec18:	e3403014 	movt	r3, #20
  12ec1c:	e50b3008 	str	r3, [fp, #-8]
  12ec20:	ea000097 	b	12ee84 <etharp_output+0x328>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
  12ec24:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12ec28:	e5933000 	ldr	r3, [r3]
  12ec2c:	e20330f0 	and	r3, r3, #240	; 0xf0
  12ec30:	e35300e0 	cmp	r3, #224	; 0xe0
  12ec34:	1a000016 	bne	12ec94 <etharp_output+0x138>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
  12ec38:	e3a03001 	mov	r3, #1
  12ec3c:	e54b3014 	strb	r3, [fp, #-20]	; 0xffffffec
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
  12ec40:	e3a03000 	mov	r3, #0
  12ec44:	e54b3013 	strb	r3, [fp, #-19]	; 0xffffffed
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
  12ec48:	e3a0305e 	mov	r3, #94	; 0x5e
  12ec4c:	e54b3012 	strb	r3, [fp, #-18]	; 0xffffffee
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
  12ec50:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12ec54:	e2833001 	add	r3, r3, #1
  12ec58:	e5d33000 	ldrb	r3, [r3]
  12ec5c:	e203307f 	and	r3, r3, #127	; 0x7f
  12ec60:	e6ef3073 	uxtb	r3, r3
  12ec64:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
  12ec68:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12ec6c:	e2833002 	add	r3, r3, #2
  12ec70:	e5d33000 	ldrb	r3, [r3]
  12ec74:	e54b3010 	strb	r3, [fp, #-16]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
  12ec78:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12ec7c:	e2833003 	add	r3, r3, #3
  12ec80:	e5d33000 	ldrb	r3, [r3]
  12ec84:	e54b300f 	strb	r3, [fp, #-15]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
  12ec88:	e24b3014 	sub	r3, fp, #20
  12ec8c:	e50b3008 	str	r3, [fp, #-8]
  12ec90:	ea00007b 	b	12ee84 <etharp_output+0x328>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
  12ec94:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12ec98:	e5932000 	ldr	r2, [r3]
  12ec9c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12eca0:	e2833004 	add	r3, r3, #4
  12eca4:	e5933000 	ldr	r3, [r3]
  12eca8:	e0222003 	eor	r2, r2, r3
  12ecac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12ecb0:	e2833008 	add	r3, r3, #8
  12ecb4:	e5933000 	ldr	r3, [r3]
  12ecb8:	e0033002 	and	r3, r3, r2
  12ecbc:	e3530000 	cmp	r3, #0
  12ecc0:	0a000010 	beq	12ed08 <etharp_output+0x1ac>
        !ip4_addr_islinklocal(ipaddr)) {
  12ecc4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12ecc8:	e5933000 	ldr	r3, [r3]
  12eccc:	e6ff3073 	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
  12ecd0:	e30f2ea9 	movw	r2, #65193	; 0xfea9
  12ecd4:	e1530002 	cmp	r3, r2
  12ecd8:	0a00000a 	beq	12ed08 <etharp_output+0x1ac>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
  12ecdc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12ece0:	e283300c 	add	r3, r3, #12
  12ece4:	e5933000 	ldr	r3, [r3]
  12ece8:	e3530000 	cmp	r3, #0
  12ecec:	0a000003 	beq	12ed00 <etharp_output+0x1a4>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
  12ecf0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12ecf4:	e283300c 	add	r3, r3, #12
  12ecf8:	e50b300c 	str	r3, [fp, #-12]
  12ecfc:	ea000001 	b	12ed08 <etharp_output+0x1ac>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
  12ed00:	e3e03003 	mvn	r3, #3
  12ed04:	ea000067 	b	12eea8 <etharp_output+0x34c>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
  12ed08:	e30f3bc4 	movw	r3, #64452	; 0xfbc4
  12ed0c:	e3403014 	movt	r3, #20
  12ed10:	e5d33000 	ldrb	r3, [r3]
  12ed14:	e1a01003 	mov	r1, r3
  12ed18:	e30f3ad4 	movw	r3, #64212	; 0xfad4
  12ed1c:	e3403014 	movt	r3, #20
  12ed20:	e3a02018 	mov	r2, #24
  12ed24:	e0020192 	mul	r2, r2, r1
  12ed28:	e0833002 	add	r3, r3, r2
  12ed2c:	e2833014 	add	r3, r3, #20
  12ed30:	e5d33000 	ldrb	r3, [r3]
  12ed34:	e3530001 	cmp	r3, #1
  12ed38:	9a00001f 	bls	12edbc <etharp_output+0x260>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
  12ed3c:	e51b300c 	ldr	r3, [fp, #-12]
  12ed40:	e5932000 	ldr	r2, [r3]
  12ed44:	e30f3bc4 	movw	r3, #64452	; 0xfbc4
  12ed48:	e3403014 	movt	r3, #20
  12ed4c:	e5d33000 	ldrb	r3, [r3]
  12ed50:	e1a00003 	mov	r0, r3
  12ed54:	e30f3ad4 	movw	r3, #64212	; 0xfad4
  12ed58:	e3403014 	movt	r3, #20
  12ed5c:	e3a01018 	mov	r1, #24
  12ed60:	e0010091 	mul	r1, r1, r0
  12ed64:	e0833001 	add	r3, r3, r1
  12ed68:	e2833004 	add	r3, r3, #4
  12ed6c:	e5933000 	ldr	r3, [r3]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
  12ed70:	e1520003 	cmp	r2, r3
  12ed74:	1a000010 	bne	12edbc <etharp_output+0x260>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
  12ed78:	e3063840 	movw	r3, #26688	; 0x6840
  12ed7c:	e3403057 	movt	r3, #87	; 0x57
  12ed80:	e1d332be 	ldrh	r3, [r3, #46]	; 0x2e
  12ed84:	e2833001 	add	r3, r3, #1
  12ed88:	e6ff2073 	uxth	r2, r3
  12ed8c:	e3063840 	movw	r3, #26688	; 0x6840
  12ed90:	e3403057 	movt	r3, #87	; 0x57
  12ed94:	e1c322be 	strh	r2, [r3, #46]	; 0x2e
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
  12ed98:	e30f3bc4 	movw	r3, #64452	; 0xfbc4
  12ed9c:	e3403014 	movt	r3, #20
  12eda0:	e5d33000 	ldrb	r3, [r3]
  12eda4:	e1a02003 	mov	r2, r3
  12eda8:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  12edac:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12edb0:	ebfffee8 	bl	12e958 <etharp_output_to_arp_index>
  12edb4:	e1a03000 	mov	r3, r0
  12edb8:	ea00003a 	b	12eea8 <etharp_output+0x34c>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
  12edbc:	e3a03000 	mov	r3, #0
  12edc0:	e54b300d 	strb	r3, [fp, #-13]
  12edc4:	ea000025 	b	12ee60 <etharp_output+0x304>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
  12edc8:	e15b20dd 	ldrsb	r2, [fp, #-13]
  12edcc:	e30f3ad4 	movw	r3, #64212	; 0xfad4
  12edd0:	e3403014 	movt	r3, #20
  12edd4:	e3a01018 	mov	r1, #24
  12edd8:	e0020291 	mul	r2, r1, r2
  12eddc:	e0833002 	add	r3, r3, r2
  12ede0:	e2833014 	add	r3, r3, #20
  12ede4:	e5d33000 	ldrb	r3, [r3]
  12ede8:	e3530001 	cmp	r3, #1
  12edec:	9a000016 	bls	12ee4c <etharp_output+0x2f0>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
  12edf0:	e51b300c 	ldr	r3, [fp, #-12]
  12edf4:	e5932000 	ldr	r2, [r3]
  12edf8:	e15b10dd 	ldrsb	r1, [fp, #-13]
  12edfc:	e30f3ad4 	movw	r3, #64212	; 0xfad4
  12ee00:	e3403014 	movt	r3, #20
  12ee04:	e3a00018 	mov	r0, #24
  12ee08:	e0010190 	mul	r1, r0, r1
  12ee0c:	e0833001 	add	r3, r3, r1
  12ee10:	e2833004 	add	r3, r3, #4
  12ee14:	e5933000 	ldr	r3, [r3]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
  12ee18:	e1520003 	cmp	r2, r3
  12ee1c:	1a00000a 	bne	12ee4c <etharp_output+0x2f0>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
  12ee20:	e55b200d 	ldrb	r2, [fp, #-13]
  12ee24:	e30f3bc4 	movw	r3, #64452	; 0xfbc4
  12ee28:	e3403014 	movt	r3, #20
  12ee2c:	e5c32000 	strb	r2, [r3]
        return etharp_output_to_arp_index(netif, q, i);
  12ee30:	e55b300d 	ldrb	r3, [fp, #-13]
  12ee34:	e1a02003 	mov	r2, r3
  12ee38:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  12ee3c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12ee40:	ebfffec4 	bl	12e958 <etharp_output_to_arp_index>
  12ee44:	e1a03000 	mov	r3, r0
  12ee48:	ea000016 	b	12eea8 <etharp_output+0x34c>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
  12ee4c:	e15b30dd 	ldrsb	r3, [fp, #-13]
  12ee50:	e6ef3073 	uxtb	r3, r3
  12ee54:	e2833001 	add	r3, r3, #1
  12ee58:	e6ef3073 	uxtb	r3, r3
  12ee5c:	e54b300d 	strb	r3, [fp, #-13]
  12ee60:	e15b30dd 	ldrsb	r3, [fp, #-13]
  12ee64:	e3530009 	cmp	r3, #9
  12ee68:	daffffd6 	ble	12edc8 <etharp_output+0x26c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
  12ee6c:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  12ee70:	e51b100c 	ldr	r1, [fp, #-12]
  12ee74:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12ee78:	eb00000d 	bl	12eeb4 <etharp_query>
  12ee7c:	e1a03000 	mov	r3, r0
  12ee80:	ea000008 	b	12eea8 <etharp_output+0x34c>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
  12ee84:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12ee88:	e283203b 	add	r2, r3, #59	; 0x3b
  12ee8c:	e3a03b02 	mov	r3, #2048	; 0x800
  12ee90:	e58d3000 	str	r3, [sp]
  12ee94:	e51b3008 	ldr	r3, [fp, #-8]
  12ee98:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  12ee9c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12eea0:	ebffe88e 	bl	1290e0 <ethernet_output>
  12eea4:	e1a03000 	mov	r3, r0
}
  12eea8:	e1a00003 	mov	r0, r3
  12eeac:	e24bd004 	sub	sp, fp, #4
  12eeb0:	e8bd8800 	pop	{fp, pc}

0012eeb4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
  12eeb4:	e92d4800 	push	{fp, lr}
  12eeb8:	e28db004 	add	fp, sp, #4
  12eebc:	e24dd040 	sub	sp, sp, #64	; 0x40
  12eec0:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
  12eec4:	e50b1034 	str	r1, [fp, #-52]	; 0xffffffcc
  12eec8:	e50b2038 	str	r2, [fp, #-56]	; 0xffffffc8
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
  12eecc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  12eed0:	e283303b 	add	r3, r3, #59	; 0x3b
  12eed4:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
  err_t result = ERR_MEM;
  12eed8:	e3e03000 	mvn	r3, #0
  12eedc:	e54b3005 	strb	r3, [fp, #-5]
  int is_new_entry = 0;
  12eee0:	e3a03000 	mov	r3, #0
  12eee4:	e50b300c 	str	r3, [fp, #-12]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
  12eee8:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  12eeec:	e5933000 	ldr	r3, [r3]
  12eef0:	e51b1030 	ldr	r1, [fp, #-48]	; 0xffffffd0
  12eef4:	e1a00003 	mov	r0, r3
  12eef8:	eb000dfd 	bl	1326f4 <ip4_addr_isbroadcast_u32>
  12eefc:	e1a03000 	mov	r3, r0
  12ef00:	e3530000 	cmp	r3, #0
  12ef04:	1a00000b 	bne	12ef38 <etharp_query+0x84>
      ip4_addr_ismulticast(ipaddr) ||
  12ef08:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  12ef0c:	e5933000 	ldr	r3, [r3]
  12ef10:	e20330f0 	and	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
  12ef14:	e35300e0 	cmp	r3, #224	; 0xe0
  12ef18:	0a000006 	beq	12ef38 <etharp_query+0x84>
      ip4_addr_ismulticast(ipaddr) ||
  12ef1c:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  12ef20:	e3530000 	cmp	r3, #0
  12ef24:	0a000003 	beq	12ef38 <etharp_query+0x84>
      ip4_addr_isany(ipaddr)) {
  12ef28:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  12ef2c:	e5933000 	ldr	r3, [r3]
  12ef30:	e3530000 	cmp	r3, #0
  12ef34:	1a000001 	bne	12ef40 <etharp_query+0x8c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
  12ef38:	e3e0300f 	mvn	r3, #15
  12ef3c:	ea000144 	b	12f454 <etharp_query+0x5a0>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
  12ef40:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  12ef44:	e3a01001 	mov	r1, #1
  12ef48:	e51b0034 	ldr	r0, [fp, #-52]	; 0xffffffcc
  12ef4c:	ebfffb80 	bl	12dd54 <etharp_find_entry>
  12ef50:	e1a03000 	mov	r3, r0
  12ef54:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf

  /* could not find or create entry? */
  if (i < 0) {
  12ef58:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
  12ef5c:	e3530000 	cmp	r3, #0
  12ef60:	aa00000c 	bge	12ef98 <etharp_query+0xe4>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
  12ef64:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  12ef68:	e3530000 	cmp	r3, #0
  12ef6c:	0a000007 	beq	12ef90 <etharp_query+0xdc>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
  12ef70:	e3063840 	movw	r3, #26688	; 0x6840
  12ef74:	e3403057 	movt	r3, #87	; 0x57
  12ef78:	e1d332b4 	ldrh	r3, [r3, #36]	; 0x24
  12ef7c:	e2833001 	add	r3, r3, #1
  12ef80:	e6ff2073 	uxth	r2, r3
  12ef84:	e3063840 	movw	r3, #26688	; 0x6840
  12ef88:	e3403057 	movt	r3, #87	; 0x57
  12ef8c:	e1c322b4 	strh	r2, [r3, #36]	; 0x24
    }
    return (err_t)i;
  12ef90:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
  12ef94:	ea00012e 	b	12f454 <etharp_query+0x5a0>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
  12ef98:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12ef9c:	e30f3ad4 	movw	r3, #64212	; 0xfad4
  12efa0:	e3403014 	movt	r3, #20
  12efa4:	e3a01018 	mov	r1, #24
  12efa8:	e0020291 	mul	r2, r1, r2
  12efac:	e0833002 	add	r3, r3, r2
  12efb0:	e2833014 	add	r3, r3, #20
  12efb4:	e5d33000 	ldrb	r3, [r3]
  12efb8:	e3530000 	cmp	r3, #0
  12efbc:	1a000013 	bne	12f010 <etharp_query+0x15c>
    is_new_entry = 1;
  12efc0:	e3a03001 	mov	r3, #1
  12efc4:	e50b300c 	str	r3, [fp, #-12]
    arp_table[i].state = ETHARP_STATE_PENDING;
  12efc8:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12efcc:	e30f3ad4 	movw	r3, #64212	; 0xfad4
  12efd0:	e3403014 	movt	r3, #20
  12efd4:	e3a01018 	mov	r1, #24
  12efd8:	e0020291 	mul	r2, r1, r2
  12efdc:	e0833002 	add	r3, r3, r2
  12efe0:	e2833014 	add	r3, r3, #20
  12efe4:	e3a02001 	mov	r2, #1
  12efe8:	e5c32000 	strb	r2, [r3]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
  12efec:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12eff0:	e30f3ad4 	movw	r3, #64212	; 0xfad4
  12eff4:	e3403014 	movt	r3, #20
  12eff8:	e3a01018 	mov	r1, #24
  12effc:	e0020291 	mul	r2, r1, r2
  12f000:	e0833002 	add	r3, r3, r2
  12f004:	e2833008 	add	r3, r3, #8
  12f008:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  12f00c:	e5832000 	str	r2, [r3]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
  12f010:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12f014:	e30f3ad4 	movw	r3, #64212	; 0xfad4
  12f018:	e3403014 	movt	r3, #20
  12f01c:	e3a01018 	mov	r1, #24
  12f020:	e0020291 	mul	r2, r1, r2
  12f024:	e0833002 	add	r3, r3, r2
  12f028:	e2833014 	add	r3, r3, #20
  12f02c:	e5d33000 	ldrb	r3, [r3]
  12f030:	e3530001 	cmp	r3, #1
  12f034:	0a000010 	beq	12f07c <etharp_query+0x1c8>
  12f038:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12f03c:	e30f3ad4 	movw	r3, #64212	; 0xfad4
  12f040:	e3403014 	movt	r3, #20
  12f044:	e3a01018 	mov	r1, #24
  12f048:	e0020291 	mul	r2, r1, r2
  12f04c:	e0833002 	add	r3, r3, r2
  12f050:	e2833014 	add	r3, r3, #20
  12f054:	e5d33000 	ldrb	r3, [r3]
  12f058:	e3530001 	cmp	r3, #1
  12f05c:	8a000006 	bhi	12f07c <etharp_query+0x1c8>
  12f060:	e30905bc 	movw	r0, #38332	; 0x95bc
  12f064:	e3400014 	movt	r0, #20
  12f068:	ebff5029 	bl	103114 <rt_kprintf>
  12f06c:	e30013c9 	movw	r1, #969	; 0x3c9
  12f070:	e3090428 	movw	r0, #37928	; 0x9428
  12f074:	e3400014 	movt	r0, #20
  12f078:	ebff6ff9 	bl	10b064 <sys_arch_assert>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
  12f07c:	e51b300c 	ldr	r3, [fp, #-12]
  12f080:	e3530000 	cmp	r3, #0
  12f084:	1a000002 	bne	12f094 <etharp_query+0x1e0>
  12f088:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  12f08c:	e3530000 	cmp	r3, #0
  12f090:	1a000009 	bne	12f0bc <etharp_query+0x208>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
  12f094:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  12f098:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  12f09c:	eb00018f 	bl	12f6e0 <etharp_request>
  12f0a0:	e1a03000 	mov	r3, r0
  12f0a4:	e54b3005 	strb	r3, [fp, #-5]
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
  12f0a8:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  12f0ac:	e3530000 	cmp	r3, #0
  12f0b0:	1a000001 	bne	12f0bc <etharp_query+0x208>
      return result;
  12f0b4:	e15b30d5 	ldrsb	r3, [fp, #-5]
  12f0b8:	ea0000e5 	b	12f454 <etharp_query+0x5a0>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
  12f0bc:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  12f0c0:	e3530000 	cmp	r3, #0
  12f0c4:	1a000006 	bne	12f0e4 <etharp_query+0x230>
  12f0c8:	e309041c 	movw	r0, #37916	; 0x941c
  12f0cc:	e3400014 	movt	r0, #20
  12f0d0:	ebff500f 	bl	103114 <rt_kprintf>
  12f0d4:	e30013db 	movw	r1, #987	; 0x3db
  12f0d8:	e3090428 	movw	r0, #37928	; 0x9428
  12f0dc:	e3400014 	movt	r0, #20
  12f0e0:	ebff6fdf 	bl	10b064 <sys_arch_assert>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
  12f0e4:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12f0e8:	e30f3ad4 	movw	r3, #64212	; 0xfad4
  12f0ec:	e3403014 	movt	r3, #20
  12f0f0:	e3a01018 	mov	r1, #24
  12f0f4:	e0020291 	mul	r2, r1, r2
  12f0f8:	e0833002 	add	r3, r3, r2
  12f0fc:	e2833014 	add	r3, r3, #20
  12f100:	e5d33000 	ldrb	r3, [r3]
  12f104:	e3530001 	cmp	r3, #1
  12f108:	9a000015 	bls	12f164 <etharp_query+0x2b0>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
  12f10c:	e55b2021 	ldrb	r2, [fp, #-33]	; 0xffffffdf
  12f110:	e30f3bc4 	movw	r3, #64452	; 0xfbc4
  12f114:	e3403014 	movt	r3, #20
  12f118:	e5c32000 	strb	r2, [r3]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
  12f11c:	e15b32d1 	ldrsb	r3, [fp, #-33]	; 0xffffffdf
  12f120:	e3a02018 	mov	r2, #24
  12f124:	e0030392 	mul	r3, r2, r3
  12f128:	e2832008 	add	r2, r3, #8
  12f12c:	e30f3ad4 	movw	r3, #64212	; 0xfad4
  12f130:	e3403014 	movt	r3, #20
  12f134:	e0823003 	add	r3, r2, r3
  12f138:	e2832004 	add	r2, r3, #4
  12f13c:	e3a03b02 	mov	r3, #2048	; 0x800
  12f140:	e58d3000 	str	r3, [sp]
  12f144:	e1a03002 	mov	r3, r2
  12f148:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  12f14c:	e51b1038 	ldr	r1, [fp, #-56]	; 0xffffffc8
  12f150:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  12f154:	ebffe7e1 	bl	1290e0 <ethernet_output>
  12f158:	e1a03000 	mov	r3, r0
  12f15c:	e54b3005 	strb	r3, [fp, #-5]
  12f160:	ea0000ba 	b	12f450 <etharp_query+0x59c>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
  12f164:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12f168:	e30f3ad4 	movw	r3, #64212	; 0xfad4
  12f16c:	e3403014 	movt	r3, #20
  12f170:	e3a01018 	mov	r1, #24
  12f174:	e0020291 	mul	r2, r1, r2
  12f178:	e0833002 	add	r3, r3, r2
  12f17c:	e2833014 	add	r3, r3, #20
  12f180:	e5d33000 	ldrb	r3, [r3]
  12f184:	e3530001 	cmp	r3, #1
  12f188:	1a0000b0 	bne	12f450 <etharp_query+0x59c>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
  12f18c:	e3a03000 	mov	r3, #0
  12f190:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
  12f194:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  12f198:	e50b3010 	str	r3, [fp, #-16]
    while (p) {
  12f19c:	ea00001a 	b	12f20c <etharp_query+0x358>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
  12f1a0:	e51b3010 	ldr	r3, [fp, #-16]
  12f1a4:	e1d320ba 	ldrh	r2, [r3, #10]
  12f1a8:	e51b3010 	ldr	r3, [fp, #-16]
  12f1ac:	e1d330b8 	ldrh	r3, [r3, #8]
  12f1b0:	e1520003 	cmp	r2, r3
  12f1b4:	1a00000a 	bne	12f1e4 <etharp_query+0x330>
  12f1b8:	e51b3010 	ldr	r3, [fp, #-16]
  12f1bc:	e5933000 	ldr	r3, [r3]
  12f1c0:	e3530000 	cmp	r3, #0
  12f1c4:	0a000006 	beq	12f1e4 <etharp_query+0x330>
  12f1c8:	e30905e4 	movw	r0, #38372	; 0x95e4
  12f1cc:	e3400014 	movt	r0, #20
  12f1d0:	ebff4fcf 	bl	103114 <rt_kprintf>
  12f1d4:	e3a01ffb 	mov	r1, #1004	; 0x3ec
  12f1d8:	e3090428 	movw	r0, #37928	; 0x9428
  12f1dc:	e3400014 	movt	r0, #20
  12f1e0:	ebff6f9f 	bl	10b064 <sys_arch_assert>
      if (p->type != PBUF_ROM) {
  12f1e4:	e51b3010 	ldr	r3, [fp, #-16]
  12f1e8:	e5d3300c 	ldrb	r3, [r3, #12]
  12f1ec:	e3530001 	cmp	r3, #1
  12f1f0:	0a000002 	beq	12f200 <etharp_query+0x34c>
        copy_needed = 1;
  12f1f4:	e3a03001 	mov	r3, #1
  12f1f8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        break;
  12f1fc:	ea000005 	b	12f218 <etharp_query+0x364>
      }
      p = p->next;
  12f200:	e51b3010 	ldr	r3, [fp, #-16]
  12f204:	e5933000 	ldr	r3, [r3]
  12f208:	e50b3010 	str	r3, [fp, #-16]
    while (p) {
  12f20c:	e51b3010 	ldr	r3, [fp, #-16]
  12f210:	e3530000 	cmp	r3, #0
  12f214:	1affffe1 	bne	12f1a0 <etharp_query+0x2ec>
    }
    if (copy_needed) {
  12f218:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12f21c:	e3530000 	cmp	r3, #0
  12f220:	0a000014 	beq	12f278 <etharp_query+0x3c4>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
  12f224:	e51b3010 	ldr	r3, [fp, #-16]
  12f228:	e1d330b8 	ldrh	r3, [r3, #8]
  12f22c:	e3a02000 	mov	r2, #0
  12f230:	e1a01003 	mov	r1, r3
  12f234:	e3a00002 	mov	r0, #2
  12f238:	ebffac90 	bl	11a480 <pbuf_alloc>
  12f23c:	e50b0010 	str	r0, [fp, #-16]
      if (p != NULL) {
  12f240:	e51b3010 	ldr	r3, [fp, #-16]
  12f244:	e3530000 	cmp	r3, #0
  12f248:	0a00000e 	beq	12f288 <etharp_query+0x3d4>
        if (pbuf_copy(p, q) != ERR_OK) {
  12f24c:	e51b1038 	ldr	r1, [fp, #-56]	; 0xffffffc8
  12f250:	e51b0010 	ldr	r0, [fp, #-16]
  12f254:	ebffb0e5 	bl	11b5f0 <pbuf_copy>
  12f258:	e1a03000 	mov	r3, r0
  12f25c:	e3530000 	cmp	r3, #0
  12f260:	0a000008 	beq	12f288 <etharp_query+0x3d4>
          pbuf_free(p);
  12f264:	e51b0010 	ldr	r0, [fp, #-16]
  12f268:	ebffaf8b 	bl	11b09c <pbuf_free>
          p = NULL;
  12f26c:	e3a03000 	mov	r3, #0
  12f270:	e50b3010 	str	r3, [fp, #-16]
  12f274:	ea000003 	b	12f288 <etharp_query+0x3d4>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
  12f278:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  12f27c:	e50b3010 	str	r3, [fp, #-16]
      pbuf_ref(p);
  12f280:	e51b0010 	ldr	r0, [fp, #-16]
  12f284:	ebffb01e 	bl	11b304 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
  12f288:	e51b3010 	ldr	r3, [fp, #-16]
  12f28c:	e3530000 	cmp	r3, #0
  12f290:	0a000064 	beq	12f428 <etharp_query+0x574>
      /* queue packet ... */
#if ARP_QUEUEING
      struct etharp_q_entry *new_entry;
      /* allocate a new arp queue entry */
      new_entry = (struct etharp_q_entry *)memp_malloc(MEMP_ARP_QUEUE);
  12f294:	e3002407 	movw	r2, #1031	; 0x407
  12f298:	e3091428 	movw	r1, #37928	; 0x9428
  12f29c:	e3401014 	movt	r1, #20
  12f2a0:	e3a0000b 	mov	r0, #11
  12f2a4:	ebffa806 	bl	1192c4 <memp_malloc_fn>
  12f2a8:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
      if (new_entry != NULL) {
  12f2ac:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12f2b0:	e3530000 	cmp	r3, #0
  12f2b4:	0a000056 	beq	12f414 <etharp_query+0x560>
        unsigned int qlen = 0;
  12f2b8:	e3a03000 	mov	r3, #0
  12f2bc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
        new_entry->next = 0;
  12f2c0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12f2c4:	e3a02000 	mov	r2, #0
  12f2c8:	e5832000 	str	r2, [r3]
        new_entry->p = p;
  12f2cc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12f2d0:	e51b2010 	ldr	r2, [fp, #-16]
  12f2d4:	e5832004 	str	r2, [r3, #4]
        if (arp_table[i].q != NULL) {
  12f2d8:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12f2dc:	e30f3ad4 	movw	r3, #64212	; 0xfad4
  12f2e0:	e3403014 	movt	r3, #20
  12f2e4:	e3a01018 	mov	r1, #24
  12f2e8:	e0020291 	mul	r2, r1, r2
  12f2ec:	e0833002 	add	r3, r3, r2
  12f2f0:	e5933000 	ldr	r3, [r3]
  12f2f4:	e3530000 	cmp	r3, #0
  12f2f8:	0a000019 	beq	12f364 <etharp_query+0x4b0>
          /* queue was already existent, append the new entry to the end */
          struct etharp_q_entry *r;
          r = arp_table[i].q;
  12f2fc:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12f300:	e30f3ad4 	movw	r3, #64212	; 0xfad4
  12f304:	e3403014 	movt	r3, #20
  12f308:	e3a01018 	mov	r1, #24
  12f30c:	e0020291 	mul	r2, r1, r2
  12f310:	e0833002 	add	r3, r3, r2
  12f314:	e5933000 	ldr	r3, [r3]
  12f318:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
          qlen++;
  12f31c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12f320:	e2833001 	add	r3, r3, #1
  12f324:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
          while (r->next != NULL) {
  12f328:	ea000005 	b	12f344 <etharp_query+0x490>
            r = r->next;
  12f32c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12f330:	e5933000 	ldr	r3, [r3]
  12f334:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
            qlen++;
  12f338:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12f33c:	e2833001 	add	r3, r3, #1
  12f340:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
          while (r->next != NULL) {
  12f344:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12f348:	e5933000 	ldr	r3, [r3]
  12f34c:	e3530000 	cmp	r3, #0
  12f350:	1afffff5 	bne	12f32c <etharp_query+0x478>
          }
          r->next = new_entry;
  12f354:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12f358:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  12f35c:	e5832000 	str	r2, [r3]
  12f360:	ea000007 	b	12f384 <etharp_query+0x4d0>
        } else {
          /* queue did not exist, first item in queue */
          arp_table[i].q = new_entry;
  12f364:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12f368:	e30f3ad4 	movw	r3, #64212	; 0xfad4
  12f36c:	e3403014 	movt	r3, #20
  12f370:	e3a01018 	mov	r1, #24
  12f374:	e0020291 	mul	r2, r1, r2
  12f378:	e0833002 	add	r3, r3, r2
  12f37c:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  12f380:	e5832000 	str	r2, [r3]
        }
#if ARP_QUEUE_LEN
        if (qlen >= ARP_QUEUE_LEN) {
  12f384:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12f388:	e3530002 	cmp	r3, #2
  12f38c:	9a00001d 	bls	12f408 <etharp_query+0x554>
          struct etharp_q_entry *old;
          old = arp_table[i].q;
  12f390:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12f394:	e30f3ad4 	movw	r3, #64212	; 0xfad4
  12f398:	e3403014 	movt	r3, #20
  12f39c:	e3a01018 	mov	r1, #24
  12f3a0:	e0020291 	mul	r2, r1, r2
  12f3a4:	e0833002 	add	r3, r3, r2
  12f3a8:	e5933000 	ldr	r3, [r3]
  12f3ac:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
          arp_table[i].q = arp_table[i].q->next;
  12f3b0:	e15b22d1 	ldrsb	r2, [fp, #-33]	; 0xffffffdf
  12f3b4:	e30f3ad4 	movw	r3, #64212	; 0xfad4
  12f3b8:	e3403014 	movt	r3, #20
  12f3bc:	e3a01018 	mov	r1, #24
  12f3c0:	e0020291 	mul	r2, r1, r2
  12f3c4:	e0833002 	add	r3, r3, r2
  12f3c8:	e5933000 	ldr	r3, [r3]
  12f3cc:	e15b12d1 	ldrsb	r1, [fp, #-33]	; 0xffffffdf
  12f3d0:	e5932000 	ldr	r2, [r3]
  12f3d4:	e30f3ad4 	movw	r3, #64212	; 0xfad4
  12f3d8:	e3403014 	movt	r3, #20
  12f3dc:	e3a00018 	mov	r0, #24
  12f3e0:	e0010190 	mul	r1, r0, r1
  12f3e4:	e0833001 	add	r3, r3, r1
  12f3e8:	e5832000 	str	r2, [r3]
          pbuf_free(old->p);
  12f3ec:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  12f3f0:	e5933004 	ldr	r3, [r3, #4]
  12f3f4:	e1a00003 	mov	r0, r3
  12f3f8:	ebffaf27 	bl	11b09c <pbuf_free>
          memp_free(MEMP_ARP_QUEUE, old);
  12f3fc:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  12f400:	e3a0000b 	mov	r0, #11
  12f404:	ebffa816 	bl	119464 <memp_free>
        }
#endif
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        result = ERR_OK;
  12f408:	e3a03000 	mov	r3, #0
  12f40c:	e54b3005 	strb	r3, [fp, #-5]
  12f410:	ea00000e 	b	12f450 <etharp_query+0x59c>
      } else {
        /* the pool MEMP_ARP_QUEUE is empty */
        pbuf_free(p);
  12f414:	e51b0010 	ldr	r0, [fp, #-16]
  12f418:	ebffaf1f 	bl	11b09c <pbuf_free>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
  12f41c:	e3e03000 	mvn	r3, #0
  12f420:	e54b3005 	strb	r3, [fp, #-5]
  12f424:	ea000009 	b	12f450 <etharp_query+0x59c>
      arp_table[i].q = p;
      result = ERR_OK;
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
  12f428:	e3063840 	movw	r3, #26688	; 0x6840
  12f42c:	e3403057 	movt	r3, #87	; 0x57
  12f430:	e1d332b4 	ldrh	r3, [r3, #36]	; 0x24
  12f434:	e2833001 	add	r3, r3, #1
  12f438:	e6ff2073 	uxth	r2, r3
  12f43c:	e3063840 	movw	r3, #26688	; 0x6840
  12f440:	e3403057 	movt	r3, #87	; 0x57
  12f444:	e1c322b4 	strh	r2, [r3, #36]	; 0x24
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
  12f448:	e3e03000 	mvn	r3, #0
  12f44c:	e54b3005 	strb	r3, [fp, #-5]
    }
  }
  return result;
  12f450:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  12f454:	e1a00003 	mov	r0, r3
  12f458:	e24bd004 	sub	sp, fp, #4
  12f45c:	e8bd8800 	pop	{fp, pc}

0012f460 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
  12f460:	e92d4800 	push	{fp, lr}
  12f464:	e28db004 	add	fp, sp, #4
  12f468:	e24dd028 	sub	sp, sp, #40	; 0x28
  12f46c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  12f470:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  12f474:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  12f478:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
  struct pbuf *p;
  err_t result = ERR_OK;
  12f47c:	e3a03000 	mov	r3, #0
  12f480:	e54b3005 	strb	r3, [fp, #-5]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
  12f484:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12f488:	e3530000 	cmp	r3, #0
  12f48c:	1a000006 	bne	12f4ac <etharp_raw+0x4c>
  12f490:	e309056c 	movw	r0, #38252	; 0x956c
  12f494:	e3400014 	movt	r0, #20
  12f498:	ebff4f1d 	bl	103114 <rt_kprintf>
  12f49c:	e3001458 	movw	r1, #1112	; 0x458
  12f4a0:	e3090428 	movw	r0, #37928	; 0x9428
  12f4a4:	e3400014 	movt	r0, #20
  12f4a8:	ebff6eed 	bl	10b064 <sys_arch_assert>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
  12f4ac:	e3a02000 	mov	r2, #0
  12f4b0:	e3a0101c 	mov	r1, #28
  12f4b4:	e3a00002 	mov	r0, #2
  12f4b8:	ebffabf0 	bl	11a480 <pbuf_alloc>
  12f4bc:	e50b000c 	str	r0, [fp, #-12]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
  12f4c0:	e51b300c 	ldr	r3, [fp, #-12]
  12f4c4:	e3530000 	cmp	r3, #0
  12f4c8:	1a000009 	bne	12f4f4 <etharp_raw+0x94>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
  12f4cc:	e3063840 	movw	r3, #26688	; 0x6840
  12f4d0:	e3403057 	movt	r3, #87	; 0x57
  12f4d4:	e1d332b4 	ldrh	r3, [r3, #36]	; 0x24
  12f4d8:	e2833001 	add	r3, r3, #1
  12f4dc:	e6ff2073 	uxth	r2, r3
  12f4e0:	e3063840 	movw	r3, #26688	; 0x6840
  12f4e4:	e3403057 	movt	r3, #87	; 0x57
  12f4e8:	e1c322b4 	strh	r2, [r3, #36]	; 0x24
    return ERR_MEM;
  12f4ec:	e3e03000 	mvn	r3, #0
  12f4f0:	ea00005b 	b	12f664 <etharp_raw+0x204>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
  12f4f4:	e51b300c 	ldr	r3, [fp, #-12]
  12f4f8:	e1d330ba 	ldrh	r3, [r3, #10]
  12f4fc:	e353001b 	cmp	r3, #27
  12f500:	8a000006 	bhi	12f520 <etharp_raw+0xc0>
  12f504:	e3090600 	movw	r0, #38400	; 0x9600
  12f508:	e3400014 	movt	r0, #20
  12f50c:	ebff4f00 	bl	103114 <rt_kprintf>
  12f510:	e3001464 	movw	r1, #1124	; 0x464
  12f514:	e3090428 	movw	r0, #37928	; 0x9428
  12f518:	e3400014 	movt	r0, #20
  12f51c:	ebff6ed0 	bl	10b064 <sys_arch_assert>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
  12f520:	e51b300c 	ldr	r3, [fp, #-12]
  12f524:	e5933004 	ldr	r3, [r3, #4]
  12f528:	e50b3010 	str	r3, [fp, #-16]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
  12f52c:	e1db31b0 	ldrh	r3, [fp, #16]
  12f530:	e1a00003 	mov	r0, r3
  12f534:	ebff9ca1 	bl	1167c0 <lwip_htons>
  12f538:	e1a03000 	mov	r3, r0
  12f53c:	e1a02003 	mov	r2, r3
  12f540:	e51b3010 	ldr	r3, [fp, #-16]
  12f544:	e1c320b6 	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
  12f548:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12f54c:	e5d3303a 	ldrb	r3, [r3, #58]	; 0x3a
  12f550:	e3530006 	cmp	r3, #6
  12f554:	0a000006 	beq	12f574 <etharp_raw+0x114>
  12f558:	e3090634 	movw	r0, #38452	; 0x9634
  12f55c:	e3400014 	movt	r0, #20
  12f560:	ebff4eeb 	bl	103114 <rt_kprintf>
  12f564:	e300146b 	movw	r1, #1131	; 0x46b
  12f568:	e3090428 	movw	r0, #37928	; 0x9428
  12f56c:	e3400014 	movt	r0, #20
  12f570:	ebff6ebb 	bl	10b064 <sys_arch_assert>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
  12f574:	e51b3010 	ldr	r3, [fp, #-16]
  12f578:	e2833008 	add	r3, r3, #8
  12f57c:	e3a02006 	mov	r2, #6
  12f580:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  12f584:	e1a00003 	mov	r0, r3
  12f588:	eb00467b 	bl	140f7c <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
  12f58c:	e51b3010 	ldr	r3, [fp, #-16]
  12f590:	e2833012 	add	r3, r3, #18
  12f594:	e3a02006 	mov	r2, #6
  12f598:	e59b1008 	ldr	r1, [fp, #8]
  12f59c:	e1a00003 	mov	r0, r3
  12f5a0:	eb004675 	bl	140f7c <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
  12f5a4:	e51b3010 	ldr	r3, [fp, #-16]
  12f5a8:	e283300e 	add	r3, r3, #14
  12f5ac:	e59b2004 	ldr	r2, [fp, #4]
  12f5b0:	e5922000 	ldr	r2, [r2]
  12f5b4:	e5832000 	str	r2, [r3]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
  12f5b8:	e51b3010 	ldr	r3, [fp, #-16]
  12f5bc:	e2833018 	add	r3, r3, #24
  12f5c0:	e59b200c 	ldr	r2, [fp, #12]
  12f5c4:	e5922000 	ldr	r2, [r2]
  12f5c8:	e5832000 	str	r2, [r3]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
  12f5cc:	e51b3010 	ldr	r3, [fp, #-16]
  12f5d0:	e3a02000 	mov	r2, #0
  12f5d4:	e5c32000 	strb	r2, [r3]
  12f5d8:	e3a02000 	mov	r2, #0
  12f5dc:	e3822001 	orr	r2, r2, #1
  12f5e0:	e5c32001 	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
  12f5e4:	e51b3010 	ldr	r3, [fp, #-16]
  12f5e8:	e3a02000 	mov	r2, #0
  12f5ec:	e3822008 	orr	r2, r2, #8
  12f5f0:	e5c32002 	strb	r2, [r3, #2]
  12f5f4:	e3a02000 	mov	r2, #0
  12f5f8:	e5c32003 	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
  12f5fc:	e51b3010 	ldr	r3, [fp, #-16]
  12f600:	e3a02006 	mov	r2, #6
  12f604:	e5c32004 	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
  12f608:	e51b3010 	ldr	r3, [fp, #-16]
  12f60c:	e3a02004 	mov	r2, #4
  12f610:	e5c32005 	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
  12f614:	e3003806 	movw	r3, #2054	; 0x806
  12f618:	e58d3000 	str	r3, [sp]
  12f61c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12f620:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  12f624:	e51b100c 	ldr	r1, [fp, #-12]
  12f628:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  12f62c:	ebffe6ab 	bl	1290e0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  12f630:	e3063840 	movw	r3, #26688	; 0x6840
  12f634:	e3403057 	movt	r3, #87	; 0x57
  12f638:	e1d331b8 	ldrh	r3, [r3, #24]
  12f63c:	e2833001 	add	r3, r3, #1
  12f640:	e6ff2073 	uxth	r2, r3
  12f644:	e3063840 	movw	r3, #26688	; 0x6840
  12f648:	e3403057 	movt	r3, #87	; 0x57
  12f64c:	e1c321b8 	strh	r2, [r3, #24]
  /* free ARP query packet */
  pbuf_free(p);
  12f650:	e51b000c 	ldr	r0, [fp, #-12]
  12f654:	ebffae90 	bl	11b09c <pbuf_free>
  p = NULL;
  12f658:	e3a03000 	mov	r3, #0
  12f65c:	e50b300c 	str	r3, [fp, #-12]
  /* could not allocate pbuf for ARP request */

  return result;
  12f660:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  12f664:	e1a00003 	mov	r0, r3
  12f668:	e24bd004 	sub	sp, fp, #4
  12f66c:	e8bd8800 	pop	{fp, pc}

0012f670 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
  12f670:	e92d4800 	push	{fp, lr}
  12f674:	e28db004 	add	fp, sp, #4
  12f678:	e24dd020 	sub	sp, sp, #32
  12f67c:	e50b0008 	str	r0, [fp, #-8]
  12f680:	e50b100c 	str	r1, [fp, #-12]
  12f684:	e50b2010 	str	r2, [fp, #-16]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
  12f688:	e51b3008 	ldr	r3, [fp, #-8]
  12f68c:	e283103b 	add	r1, r3, #59	; 0x3b
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
  12f690:	e51b3008 	ldr	r3, [fp, #-8]
  12f694:	e283003b 	add	r0, r3, #59	; 0x3b
  12f698:	e51b3008 	ldr	r3, [fp, #-8]
  12f69c:	e2832004 	add	r2, r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
  12f6a0:	e3a03001 	mov	r3, #1
  12f6a4:	e58d300c 	str	r3, [sp, #12]
  12f6a8:	e51b300c 	ldr	r3, [fp, #-12]
  12f6ac:	e58d3008 	str	r3, [sp, #8]
  12f6b0:	e3083d0c 	movw	r3, #36108	; 0x8d0c
  12f6b4:	e3403014 	movt	r3, #20
  12f6b8:	e58d3004 	str	r3, [sp, #4]
  12f6bc:	e58d2000 	str	r2, [sp]
  12f6c0:	e1a03000 	mov	r3, r0
  12f6c4:	e51b2010 	ldr	r2, [fp, #-16]
  12f6c8:	e51b0008 	ldr	r0, [fp, #-8]
  12f6cc:	ebffff63 	bl	12f460 <etharp_raw>
  12f6d0:	e1a03000 	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
  12f6d4:	e1a00003 	mov	r0, r3
  12f6d8:	e24bd004 	sub	sp, fp, #4
  12f6dc:	e8bd8800 	pop	{fp, pc}

0012f6e0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
  12f6e0:	e92d4800 	push	{fp, lr}
  12f6e4:	e28db004 	add	fp, sp, #4
  12f6e8:	e24dd008 	sub	sp, sp, #8
  12f6ec:	e50b0008 	str	r0, [fp, #-8]
  12f6f0:	e50b100c 	str	r1, [fp, #-12]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
  12f6f4:	e3082d04 	movw	r2, #36100	; 0x8d04
  12f6f8:	e3402014 	movt	r2, #20
  12f6fc:	e51b100c 	ldr	r1, [fp, #-12]
  12f700:	e51b0008 	ldr	r0, [fp, #-8]
  12f704:	ebffffd9 	bl	12f670 <etharp_request_dst>
  12f708:	e1a03000 	mov	r3, r0
}
  12f70c:	e1a00003 	mov	r0, r3
  12f710:	e24bd004 	sub	sp, fp, #4
  12f714:	e8bd8800 	pop	{fp, pc}

0012f718 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
  12f718:	e92d4800 	push	{fp, lr}
  12f71c:	e28db004 	add	fp, sp, #4
  12f720:	e24dd038 	sub	sp, sp, #56	; 0x38
  12f724:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  12f728:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  struct icmp_echo_hdr *iecho;
  const struct ip_hdr *iphdr_in;
  u16_t hlen;
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  12f72c:	e3063840 	movw	r3, #26688	; 0x6840
  12f730:	e3403057 	movt	r3, #87	; 0x57
  12f734:	e1d336b2 	ldrh	r3, [r3, #98]	; 0x62
  12f738:	e2833001 	add	r3, r3, #1
  12f73c:	e6ff2073 	uxth	r2, r3
  12f740:	e3063840 	movw	r3, #26688	; 0x6840
  12f744:	e3403057 	movt	r3, #87	; 0x57
  12f748:	e1c326b2 	strh	r2, [r3, #98]	; 0x62
  MIB2_STATS_INC(mib2.icmpinmsgs);
  12f74c:	e3063840 	movw	r3, #26688	; 0x6840
  12f750:	e3403057 	movt	r3, #87	; 0x57
  12f754:	e59331a0 	ldr	r3, [r3, #416]	; 0x1a0
  12f758:	e2832001 	add	r2, r3, #1
  12f75c:	e3063840 	movw	r3, #26688	; 0x6840
  12f760:	e3403057 	movt	r3, #87	; 0x57
  12f764:	e58321a0 	str	r2, [r3, #416]	; 0x1a0

  iphdr_in = ip4_current_header();
  12f768:	e30035e8 	movw	r3, #1512	; 0x5e8
  12f76c:	e3403015 	movt	r3, #21
  12f770:	e5933008 	ldr	r3, [r3, #8]
  12f774:	e50b3008 	str	r3, [fp, #-8]
  hlen = IPH_HL(iphdr_in) * 4;
  12f778:	e51b3008 	ldr	r3, [fp, #-8]
  12f77c:	e5d33000 	ldrb	r3, [r3]
  12f780:	e6ff3073 	uxth	r3, r3
  12f784:	e203300f 	and	r3, r3, #15
  12f788:	e6ff3073 	uxth	r3, r3
  12f78c:	e1a03103 	lsl	r3, r3, #2
  12f790:	e14b30ba 	strh	r3, [fp, #-10]
  if (hlen < IP_HLEN) {
  12f794:	e15b30ba 	ldrh	r3, [fp, #-10]
  12f798:	e3530013 	cmp	r3, #19
  12f79c:	9a000182 	bls	12fdac <icmp_input+0x694>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
  12f7a0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12f7a4:	e1d330ba 	ldrh	r3, [r3, #10]
  12f7a8:	e3530003 	cmp	r3, #3
  12f7ac:	9a000180 	bls	12fdb4 <icmp_input+0x69c>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
  12f7b0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12f7b4:	e5933004 	ldr	r3, [r3, #4]
  12f7b8:	e5d33000 	ldrb	r3, [r3]
  12f7bc:	e54b300b 	strb	r3, [fp, #-11]
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
  12f7c0:	e55b300b 	ldrb	r3, [fp, #-11]
  12f7c4:	e3530000 	cmp	r3, #0
  12f7c8:	0a000002 	beq	12f7d8 <icmp_input+0xc0>
  12f7cc:	e3530008 	cmp	r3, #8
  12f7d0:	0a000008 	beq	12f7f8 <icmp_input+0xe0>
  12f7d4:	ea0000fd 	b	12fbd0 <icmp_input+0x4b8>
  case ICMP_ER:
    /* This is OK, echo reply might have been parsed by a raw PCB
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
  12f7d8:	e3063840 	movw	r3, #26688	; 0x6840
  12f7dc:	e3403057 	movt	r3, #87	; 0x57
  12f7e0:	e59331c0 	ldr	r3, [r3, #448]	; 0x1c0
  12f7e4:	e2832001 	add	r2, r3, #1
  12f7e8:	e3063840 	movw	r3, #26688	; 0x6840
  12f7ec:	e3403057 	movt	r3, #87	; 0x57
  12f7f0:	e58321c0 	str	r2, [r3, #448]	; 0x1c0
    break;
  12f7f4:	ea000169 	b	12fda0 <icmp_input+0x688>
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
  12f7f8:	e3063840 	movw	r3, #26688	; 0x6840
  12f7fc:	e3403057 	movt	r3, #87	; 0x57
  12f800:	e59331bc 	ldr	r3, [r3, #444]	; 0x1bc
  12f804:	e2832001 	add	r2, r3, #1
  12f808:	e3063840 	movw	r3, #26688	; 0x6840
  12f80c:	e3403057 	movt	r3, #87	; 0x57
  12f810:	e58321bc 	str	r2, [r3, #444]	; 0x1bc
    src = ip4_current_dest_addr();
  12f814:	e59f3650 	ldr	r3, [pc, #1616]	; 12fe6c <icmp_input+0x754>
  12f818:	e50b3010 	str	r3, [fp, #-16]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
  12f81c:	e30035e8 	movw	r3, #1512	; 0x5e8
  12f820:	e3403015 	movt	r3, #21
  12f824:	e5933014 	ldr	r3, [r3, #20]
  12f828:	e20330f0 	and	r3, r3, #240	; 0xf0
  12f82c:	e35300e0 	cmp	r3, #224	; 0xe0
  12f830:	0a000174 	beq	12fe08 <icmp_input+0x6f0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
  12f834:	e30035e8 	movw	r3, #1512	; 0x5e8
  12f838:	e3403015 	movt	r3, #21
  12f83c:	e5932014 	ldr	r2, [r3, #20]
  12f840:	e30035e8 	movw	r3, #1512	; 0x5e8
  12f844:	e3403015 	movt	r3, #21
  12f848:	e5933000 	ldr	r3, [r3]
  12f84c:	e1a01003 	mov	r1, r3
  12f850:	e1a00002 	mov	r0, r2
  12f854:	eb000ba6 	bl	1326f4 <ip4_addr_isbroadcast_u32>
  12f858:	e1a03000 	mov	r3, r0
  12f85c:	e3530000 	cmp	r3, #0
  12f860:	1a00016a 	bne	12fe10 <icmp_input+0x6f8>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
  12f864:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12f868:	e1d330b8 	ldrh	r3, [r3, #8]
  12f86c:	e3530007 	cmp	r3, #7
  12f870:	9a000151 	bls	12fdbc <icmp_input+0x6a4>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
      goto lenerr;
    }
#if CHECKSUM_CHECK_ICMP
    IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
      if (inet_chksum_pbuf(p) != 0) {
  12f874:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12f878:	ebffa4ef 	bl	118c3c <inet_chksum_pbuf>
  12f87c:	e1a03000 	mov	r3, r0
  12f880:	e3530000 	cmp	r3, #0
  12f884:	0a000011 	beq	12f8d0 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
        pbuf_free(p);
  12f888:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12f88c:	ebffae02 	bl	11b09c <pbuf_free>
        ICMP_STATS_INC(icmp.chkerr);
  12f890:	e3063840 	movw	r3, #26688	; 0x6840
  12f894:	e3403057 	movt	r3, #87	; 0x57
  12f898:	e1d336b8 	ldrh	r3, [r3, #104]	; 0x68
  12f89c:	e2833001 	add	r3, r3, #1
  12f8a0:	e6ff2073 	uxth	r2, r3
  12f8a4:	e3063840 	movw	r3, #26688	; 0x6840
  12f8a8:	e3403057 	movt	r3, #87	; 0x57
  12f8ac:	e1c326b8 	strh	r2, [r3, #104]	; 0x68
        MIB2_STATS_INC(mib2.icmpinerrors);
  12f8b0:	e3063840 	movw	r3, #26688	; 0x6840
  12f8b4:	e3403057 	movt	r3, #87	; 0x57
  12f8b8:	e59331a4 	ldr	r3, [r3, #420]	; 0x1a4
  12f8bc:	e2832001 	add	r2, r3, #1
  12f8c0:	e3063840 	movw	r3, #26688	; 0x6840
  12f8c4:	e3403057 	movt	r3, #87	; 0x57
  12f8c8:	e58321a4 	str	r2, [r3, #420]	; 0x1a4
        return;
  12f8cc:	ea000164 	b	12fe64 <icmp_input+0x74c>
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
  12f8d0:	e15b30ba 	ldrh	r3, [fp, #-10]
  12f8d4:	e2833010 	add	r3, r3, #16
  12f8d8:	e6ff3073 	uxth	r3, r3
  12f8dc:	e6bf3073 	sxth	r3, r3
  12f8e0:	e1a01003 	mov	r1, r3
  12f8e4:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12f8e8:	ebffadcd 	bl	11b024 <pbuf_header>
  12f8ec:	e1a03000 	mov	r3, r0
  12f8f0:	e3530000 	cmp	r3, #0
  12f8f4:	0a00003e 	beq	12f9f4 <icmp_input+0x2dc>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
  12f8f8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12f8fc:	e1d320b8 	ldrh	r2, [r3, #8]
  12f900:	e15b30ba 	ldrh	r3, [fp, #-10]
  12f904:	e0823003 	add	r3, r2, r3
  12f908:	e6ff3073 	uxth	r3, r3
  12f90c:	e3a02000 	mov	r2, #0
  12f910:	e1a01003 	mov	r1, r3
  12f914:	e3a00002 	mov	r0, #2
  12f918:	ebffaad8 	bl	11a480 <pbuf_alloc>
  12f91c:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
      if (r == NULL) {
  12f920:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12f924:	e3530000 	cmp	r3, #0
  12f928:	0a00013a 	beq	12fe18 <icmp_input+0x700>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
  12f92c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12f930:	e1d330ba 	ldrh	r3, [r3, #10]
  12f934:	e1a02003 	mov	r2, r3
  12f938:	e15b30ba 	ldrh	r3, [fp, #-10]
  12f93c:	e2833008 	add	r3, r3, #8
  12f940:	e1520003 	cmp	r2, r3
  12f944:	2a000002 	bcs	12f954 <icmp_input+0x23c>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
  12f948:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  12f94c:	ebffadd2 	bl	11b09c <pbuf_free>
        goto icmperr;
  12f950:	ea000131 	b	12fe1c <icmp_input+0x704>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
  12f954:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12f958:	e5933004 	ldr	r3, [r3, #4]
  12f95c:	e15b20ba 	ldrh	r2, [fp, #-10]
  12f960:	e51b1008 	ldr	r1, [fp, #-8]
  12f964:	e1a00003 	mov	r0, r3
  12f968:	eb004583 	bl	140f7c <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
  12f96c:	e15b30ba 	ldrh	r3, [fp, #-10]
  12f970:	e2633000 	rsb	r3, r3, #0
  12f974:	e6ff3073 	uxth	r3, r3
  12f978:	e6bf3073 	sxth	r3, r3
  12f97c:	e1a01003 	mov	r1, r3
  12f980:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  12f984:	ebffada6 	bl	11b024 <pbuf_header>
  12f988:	e1a03000 	mov	r3, r0
  12f98c:	e3530000 	cmp	r3, #0
  12f990:	0a000009 	beq	12f9bc <icmp_input+0x2a4>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
  12f994:	e3090678 	movw	r0, #38520	; 0x9678
  12f998:	e3400014 	movt	r0, #20
  12f99c:	ebff4ddc 	bl	103114 <rt_kprintf>
  12f9a0:	e3a010af 	mov	r1, #175	; 0xaf
  12f9a4:	e30906b0 	movw	r0, #38576	; 0x96b0
  12f9a8:	e3400014 	movt	r0, #20
  12f9ac:	ebff6dac 	bl	10b064 <sys_arch_assert>
        pbuf_free(r);
  12f9b0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  12f9b4:	ebffadb8 	bl	11b09c <pbuf_free>
        goto icmperr;
  12f9b8:	ea000117 	b	12fe1c <icmp_input+0x704>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
  12f9bc:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
  12f9c0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  12f9c4:	ebffaf09 	bl	11b5f0 <pbuf_copy>
  12f9c8:	e1a03000 	mov	r3, r0
  12f9cc:	e3530000 	cmp	r3, #0
  12f9d0:	0a000002 	beq	12f9e0 <icmp_input+0x2c8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
  12f9d4:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  12f9d8:	ebffadaf 	bl	11b09c <pbuf_free>
        goto icmperr;
  12f9dc:	ea00010e 	b	12fe1c <icmp_input+0x704>
      }
      /* free the original p */
      pbuf_free(p);
  12f9e0:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12f9e4:	ebffadac 	bl	11b09c <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
  12f9e8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  12f9ec:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  12f9f0:	ea000014 	b	12fa48 <icmp_input+0x330>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
  12f9f4:	e15b30ba 	ldrh	r3, [fp, #-10]
  12f9f8:	e26334ff 	rsb	r3, r3, #-16777216	; 0xff000000
  12f9fc:	e28338ff 	add	r3, r3, #16711680	; 0xff0000
  12fa00:	e2833cff 	add	r3, r3, #65280	; 0xff00
  12fa04:	e28330f0 	add	r3, r3, #240	; 0xf0
  12fa08:	e6ff3073 	uxth	r3, r3
  12fa0c:	e6bf3073 	sxth	r3, r3
  12fa10:	e1a01003 	mov	r1, r3
  12fa14:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12fa18:	ebffad81 	bl	11b024 <pbuf_header>
  12fa1c:	e1a03000 	mov	r3, r0
  12fa20:	e3530000 	cmp	r3, #0
  12fa24:	0a000007 	beq	12fa48 <icmp_input+0x330>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
  12fa28:	e30906e4 	movw	r0, #38628	; 0x96e4
  12fa2c:	e3400014 	movt	r0, #20
  12fa30:	ebff4db7 	bl	103114 <rt_kprintf>
  12fa34:	e3a010c0 	mov	r1, #192	; 0xc0
  12fa38:	e30906b0 	movw	r0, #38576	; 0x96b0
  12fa3c:	e3400014 	movt	r0, #20
  12fa40:	ebff6d87 	bl	10b064 <sys_arch_assert>
        goto icmperr;
  12fa44:	ea0000f4 	b	12fe1c <icmp_input+0x704>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
  12fa48:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12fa4c:	e5933004 	ldr	r3, [r3, #4]
  12fa50:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    if (pbuf_header(p, (s16_t)hlen)) {
  12fa54:	e15b30fa 	ldrsh	r3, [fp, #-10]
  12fa58:	e1a01003 	mov	r1, r3
  12fa5c:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12fa60:	ebffad6f 	bl	11b024 <pbuf_header>
  12fa64:	e1a03000 	mov	r3, r0
  12fa68:	e3530000 	cmp	r3, #0
  12fa6c:	1a0000ca 	bne	12fd9c <icmp_input+0x684>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
  12fa70:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  12fa74:	e5933004 	ldr	r3, [r3, #4]
  12fa78:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
      ip4_addr_copy(iphdr->src, *src);
  12fa7c:	e51b3010 	ldr	r3, [fp, #-16]
  12fa80:	e5932000 	ldr	r2, [r3]
  12fa84:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12fa88:	e583200c 	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
  12fa8c:	e30035e8 	movw	r3, #1512	; 0x5e8
  12fa90:	e3403015 	movt	r3, #21
  12fa94:	e5932010 	ldr	r2, [r3, #16]
  12fa98:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12fa9c:	e5832010 	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
  12faa0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12faa4:	e3a02000 	mov	r2, #0
  12faa8:	e5c32000 	strb	r2, [r3]
#if CHECKSUM_GEN_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
        /* adjust the checksum */
        if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
  12faac:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12fab0:	e1d330b2 	ldrh	r3, [r3, #2]
  12fab4:	e6ff3073 	uxth	r3, r3
  12fab8:	e30f2ff7 	movw	r2, #65527	; 0xfff7
  12fabc:	e1530002 	cmp	r3, r2
  12fac0:	9a000007 	bls	12fae4 <icmp_input+0x3cc>
          iecho->chksum += PP_HTONS(ICMP_ECHO << 8) + 1;
  12fac4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12fac8:	e1d330b2 	ldrh	r3, [r3, #2]
  12facc:	e6ff3073 	uxth	r3, r3
  12fad0:	e2833009 	add	r3, r3, #9
  12fad4:	e6ff2073 	uxth	r2, r3
  12fad8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12fadc:	e1c320b2 	strh	r2, [r3, #2]
  12fae0:	ea000006 	b	12fb00 <icmp_input+0x3e8>
        } else {
          iecho->chksum += PP_HTONS(ICMP_ECHO << 8);
  12fae4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12fae8:	e1d330b2 	ldrh	r3, [r3, #2]
  12faec:	e6ff3073 	uxth	r3, r3
  12faf0:	e2833008 	add	r3, r3, #8
  12faf4:	e6ff2073 	uxth	r2, r3
  12faf8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  12fafc:	e1c320b2 	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
  12fb00:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12fb04:	e3e02000 	mvn	r2, #0
  12fb08:	e5c32008 	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
  12fb0c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12fb10:	e3a02000 	mov	r2, #0
  12fb14:	e5c3200a 	strb	r2, [r3, #10]
  12fb18:	e3a02000 	mov	r2, #0
  12fb1c:	e5c3200b 	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_IP) {
        IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
  12fb20:	e15b30ba 	ldrh	r3, [fp, #-10]
  12fb24:	e1a01003 	mov	r1, r3
  12fb28:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  12fb2c:	ebffa432 	bl	118bfc <inet_chksum>
  12fb30:	e1a03000 	mov	r3, r0
  12fb34:	e1a02003 	mov	r2, r3
  12fb38:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  12fb3c:	e1c320ba 	strh	r2, [r3, #10]
      }
#endif /* CHECKSUM_GEN_IP */

      ICMP_STATS_INC(icmp.xmit);
  12fb40:	e3063840 	movw	r3, #26688	; 0x6840
  12fb44:	e3403057 	movt	r3, #87	; 0x57
  12fb48:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  12fb4c:	e2833001 	add	r3, r3, #1
  12fb50:	e6ff2073 	uxth	r2, r3
  12fb54:	e3063840 	movw	r3, #26688	; 0x6840
  12fb58:	e3403057 	movt	r3, #87	; 0x57
  12fb5c:	e1c326b0 	strh	r2, [r3, #96]	; 0x60
      /* increase number of messages attempted to send */
      MIB2_STATS_INC(mib2.icmpoutmsgs);
  12fb60:	e3063840 	movw	r3, #26688	; 0x6840
  12fb64:	e3403057 	movt	r3, #87	; 0x57
  12fb68:	e59331d4 	ldr	r3, [r3, #468]	; 0x1d4
  12fb6c:	e2832001 	add	r2, r3, #1
  12fb70:	e3063840 	movw	r3, #26688	; 0x6840
  12fb74:	e3403057 	movt	r3, #87	; 0x57
  12fb78:	e58321d4 	str	r2, [r3, #468]	; 0x1d4
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);
  12fb7c:	e3063840 	movw	r3, #26688	; 0x6840
  12fb80:	e3403057 	movt	r3, #87	; 0x57
  12fb84:	e59331e8 	ldr	r3, [r3, #488]	; 0x1e8
  12fb88:	e2832001 	add	r2, r3, #1
  12fb8c:	e3063840 	movw	r3, #26688	; 0x6840
  12fb90:	e3403057 	movt	r3, #87	; 0x57
  12fb94:	e58321e8 	str	r2, [r3, #488]	; 0x1e8

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
  12fb98:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  12fb9c:	e58d3008 	str	r3, [sp, #8]
  12fba0:	e3a03001 	mov	r3, #1
  12fba4:	e58d3004 	str	r3, [sp, #4]
  12fba8:	e3a03000 	mov	r3, #0
  12fbac:	e58d3000 	str	r3, [sp]
  12fbb0:	e3a030ff 	mov	r3, #255	; 0xff
  12fbb4:	e3a02000 	mov	r2, #0
  12fbb8:	e51b1010 	ldr	r1, [fp, #-16]
  12fbbc:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12fbc0:	eb0008c5 	bl	131edc <ip4_output_if>
  12fbc4:	e1a03000 	mov	r3, r0
  12fbc8:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
  12fbcc:	ea000072 	b	12fd9c <icmp_input+0x684>
  default:
    if (type == ICMP_DUR) {
  12fbd0:	e55b300b 	ldrb	r3, [fp, #-11]
  12fbd4:	e3530003 	cmp	r3, #3
  12fbd8:	1a000007 	bne	12fbfc <icmp_input+0x4e4>
      MIB2_STATS_INC(mib2.icmpindestunreachs);
  12fbdc:	e3063840 	movw	r3, #26688	; 0x6840
  12fbe0:	e3403057 	movt	r3, #87	; 0x57
  12fbe4:	e59331a8 	ldr	r3, [r3, #424]	; 0x1a8
  12fbe8:	e2832001 	add	r2, r3, #1
  12fbec:	e3063840 	movw	r3, #26688	; 0x6840
  12fbf0:	e3403057 	movt	r3, #87	; 0x57
  12fbf4:	e58321a8 	str	r2, [r3, #424]	; 0x1a8
  12fbf8:	ea000056 	b	12fd58 <icmp_input+0x640>
    } else if (type == ICMP_TE) {
  12fbfc:	e55b300b 	ldrb	r3, [fp, #-11]
  12fc00:	e353000b 	cmp	r3, #11
  12fc04:	1a000007 	bne	12fc28 <icmp_input+0x510>
      MIB2_STATS_INC(mib2.icmpintimeexcds);
  12fc08:	e3063840 	movw	r3, #26688	; 0x6840
  12fc0c:	e3403057 	movt	r3, #87	; 0x57
  12fc10:	e59331ac 	ldr	r3, [r3, #428]	; 0x1ac
  12fc14:	e2832001 	add	r2, r3, #1
  12fc18:	e3063840 	movw	r3, #26688	; 0x6840
  12fc1c:	e3403057 	movt	r3, #87	; 0x57
  12fc20:	e58321ac 	str	r2, [r3, #428]	; 0x1ac
  12fc24:	ea00004b 	b	12fd58 <icmp_input+0x640>
    } else if (type == ICMP_PP) {
  12fc28:	e55b300b 	ldrb	r3, [fp, #-11]
  12fc2c:	e353000c 	cmp	r3, #12
  12fc30:	1a000007 	bne	12fc54 <icmp_input+0x53c>
      MIB2_STATS_INC(mib2.icmpinparmprobs);
  12fc34:	e3063840 	movw	r3, #26688	; 0x6840
  12fc38:	e3403057 	movt	r3, #87	; 0x57
  12fc3c:	e59331b0 	ldr	r3, [r3, #432]	; 0x1b0
  12fc40:	e2832001 	add	r2, r3, #1
  12fc44:	e3063840 	movw	r3, #26688	; 0x6840
  12fc48:	e3403057 	movt	r3, #87	; 0x57
  12fc4c:	e58321b0 	str	r2, [r3, #432]	; 0x1b0
  12fc50:	ea000040 	b	12fd58 <icmp_input+0x640>
    } else if (type == ICMP_SQ) {
  12fc54:	e55b300b 	ldrb	r3, [fp, #-11]
  12fc58:	e3530004 	cmp	r3, #4
  12fc5c:	1a000007 	bne	12fc80 <icmp_input+0x568>
      MIB2_STATS_INC(mib2.icmpinsrcquenchs);
  12fc60:	e3063840 	movw	r3, #26688	; 0x6840
  12fc64:	e3403057 	movt	r3, #87	; 0x57
  12fc68:	e59331b4 	ldr	r3, [r3, #436]	; 0x1b4
  12fc6c:	e2832001 	add	r2, r3, #1
  12fc70:	e3063840 	movw	r3, #26688	; 0x6840
  12fc74:	e3403057 	movt	r3, #87	; 0x57
  12fc78:	e58321b4 	str	r2, [r3, #436]	; 0x1b4
  12fc7c:	ea000035 	b	12fd58 <icmp_input+0x640>
    } else if (type == ICMP_RD) {
  12fc80:	e55b300b 	ldrb	r3, [fp, #-11]
  12fc84:	e3530005 	cmp	r3, #5
  12fc88:	1a000007 	bne	12fcac <icmp_input+0x594>
      MIB2_STATS_INC(mib2.icmpinredirects);
  12fc8c:	e3063840 	movw	r3, #26688	; 0x6840
  12fc90:	e3403057 	movt	r3, #87	; 0x57
  12fc94:	e59331b8 	ldr	r3, [r3, #440]	; 0x1b8
  12fc98:	e2832001 	add	r2, r3, #1
  12fc9c:	e3063840 	movw	r3, #26688	; 0x6840
  12fca0:	e3403057 	movt	r3, #87	; 0x57
  12fca4:	e58321b8 	str	r2, [r3, #440]	; 0x1b8
  12fca8:	ea00002a 	b	12fd58 <icmp_input+0x640>
    } else if (type == ICMP_TS) {
  12fcac:	e55b300b 	ldrb	r3, [fp, #-11]
  12fcb0:	e353000d 	cmp	r3, #13
  12fcb4:	1a000007 	bne	12fcd8 <icmp_input+0x5c0>
      MIB2_STATS_INC(mib2.icmpintimestamps);
  12fcb8:	e3063840 	movw	r3, #26688	; 0x6840
  12fcbc:	e3403057 	movt	r3, #87	; 0x57
  12fcc0:	e59331c4 	ldr	r3, [r3, #452]	; 0x1c4
  12fcc4:	e2832001 	add	r2, r3, #1
  12fcc8:	e3063840 	movw	r3, #26688	; 0x6840
  12fccc:	e3403057 	movt	r3, #87	; 0x57
  12fcd0:	e58321c4 	str	r2, [r3, #452]	; 0x1c4
  12fcd4:	ea00001f 	b	12fd58 <icmp_input+0x640>
    } else if (type == ICMP_TSR) {
  12fcd8:	e55b300b 	ldrb	r3, [fp, #-11]
  12fcdc:	e353000e 	cmp	r3, #14
  12fce0:	1a000007 	bne	12fd04 <icmp_input+0x5ec>
      MIB2_STATS_INC(mib2.icmpintimestampreps);
  12fce4:	e3063840 	movw	r3, #26688	; 0x6840
  12fce8:	e3403057 	movt	r3, #87	; 0x57
  12fcec:	e59331c8 	ldr	r3, [r3, #456]	; 0x1c8
  12fcf0:	e2832001 	add	r2, r3, #1
  12fcf4:	e3063840 	movw	r3, #26688	; 0x6840
  12fcf8:	e3403057 	movt	r3, #87	; 0x57
  12fcfc:	e58321c8 	str	r2, [r3, #456]	; 0x1c8
  12fd00:	ea000014 	b	12fd58 <icmp_input+0x640>
    } else if (type == ICMP_AM) {
  12fd04:	e55b300b 	ldrb	r3, [fp, #-11]
  12fd08:	e3530011 	cmp	r3, #17
  12fd0c:	1a000007 	bne	12fd30 <icmp_input+0x618>
      MIB2_STATS_INC(mib2.icmpinaddrmasks);
  12fd10:	e3063840 	movw	r3, #26688	; 0x6840
  12fd14:	e3403057 	movt	r3, #87	; 0x57
  12fd18:	e59331cc 	ldr	r3, [r3, #460]	; 0x1cc
  12fd1c:	e2832001 	add	r2, r3, #1
  12fd20:	e3063840 	movw	r3, #26688	; 0x6840
  12fd24:	e3403057 	movt	r3, #87	; 0x57
  12fd28:	e58321cc 	str	r2, [r3, #460]	; 0x1cc
  12fd2c:	ea000009 	b	12fd58 <icmp_input+0x640>
    } else if (type == ICMP_AMR) {
  12fd30:	e55b300b 	ldrb	r3, [fp, #-11]
  12fd34:	e3530012 	cmp	r3, #18
  12fd38:	1a000006 	bne	12fd58 <icmp_input+0x640>
      MIB2_STATS_INC(mib2.icmpinaddrmaskreps);
  12fd3c:	e3063840 	movw	r3, #26688	; 0x6840
  12fd40:	e3403057 	movt	r3, #87	; 0x57
  12fd44:	e59331d0 	ldr	r3, [r3, #464]	; 0x1d0
  12fd48:	e2832001 	add	r2, r3, #1
  12fd4c:	e3063840 	movw	r3, #26688	; 0x6840
  12fd50:	e3403057 	movt	r3, #87	; 0x57
  12fd54:	e58321d0 	str	r2, [r3, #464]	; 0x1d0
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
  12fd58:	e3063840 	movw	r3, #26688	; 0x6840
  12fd5c:	e3403057 	movt	r3, #87	; 0x57
  12fd60:	e1d337b0 	ldrh	r3, [r3, #112]	; 0x70
  12fd64:	e2833001 	add	r3, r3, #1
  12fd68:	e6ff2073 	uxth	r2, r3
  12fd6c:	e3063840 	movw	r3, #26688	; 0x6840
  12fd70:	e3403057 	movt	r3, #87	; 0x57
  12fd74:	e1c327b0 	strh	r2, [r3, #112]	; 0x70
    ICMP_STATS_INC(icmp.drop);
  12fd78:	e3063840 	movw	r3, #26688	; 0x6840
  12fd7c:	e3403057 	movt	r3, #87	; 0x57
  12fd80:	e1d336b6 	ldrh	r3, [r3, #102]	; 0x66
  12fd84:	e2833001 	add	r3, r3, #1
  12fd88:	e6ff2073 	uxth	r2, r3
  12fd8c:	e3063840 	movw	r3, #26688	; 0x6840
  12fd90:	e3403057 	movt	r3, #87	; 0x57
  12fd94:	e1c326b6 	strh	r2, [r3, #102]	; 0x66
  12fd98:	ea000000 	b	12fda0 <icmp_input+0x688>
    break;
  12fd9c:	e320f000 	nop	{0}
  }
  pbuf_free(p);
  12fda0:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12fda4:	ebffacbc 	bl	11b09c <pbuf_free>
  return;
  12fda8:	ea00002d 	b	12fe64 <icmp_input+0x74c>
    goto lenerr;
  12fdac:	e320f000 	nop	{0}
  12fdb0:	ea000002 	b	12fdc0 <icmp_input+0x6a8>
    goto lenerr;
  12fdb4:	e320f000 	nop	{0}
  12fdb8:	ea000000 	b	12fdc0 <icmp_input+0x6a8>
      goto lenerr;
  12fdbc:	e320f000 	nop	{0}
lenerr:
  pbuf_free(p);
  12fdc0:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12fdc4:	ebffacb4 	bl	11b09c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  12fdc8:	e3063840 	movw	r3, #26688	; 0x6840
  12fdcc:	e3403057 	movt	r3, #87	; 0x57
  12fdd0:	e1d336ba 	ldrh	r3, [r3, #106]	; 0x6a
  12fdd4:	e2833001 	add	r3, r3, #1
  12fdd8:	e6ff2073 	uxth	r2, r3
  12fddc:	e3063840 	movw	r3, #26688	; 0x6840
  12fde0:	e3403057 	movt	r3, #87	; 0x57
  12fde4:	e1c326ba 	strh	r2, [r3, #106]	; 0x6a
  MIB2_STATS_INC(mib2.icmpinerrors);
  12fde8:	e3063840 	movw	r3, #26688	; 0x6840
  12fdec:	e3403057 	movt	r3, #87	; 0x57
  12fdf0:	e59331a4 	ldr	r3, [r3, #420]	; 0x1a4
  12fdf4:	e2832001 	add	r2, r3, #1
  12fdf8:	e3063840 	movw	r3, #26688	; 0x6840
  12fdfc:	e3403057 	movt	r3, #87	; 0x57
  12fe00:	e58321a4 	str	r2, [r3, #420]	; 0x1a4
  return;
  12fe04:	ea000016 	b	12fe64 <icmp_input+0x74c>
      goto icmperr;
  12fe08:	e320f000 	nop	{0}
  12fe0c:	ea000002 	b	12fe1c <icmp_input+0x704>
      goto icmperr;
  12fe10:	e320f000 	nop	{0}
  12fe14:	ea000000 	b	12fe1c <icmp_input+0x704>
        goto icmperr;
  12fe18:	e320f000 	nop	{0}
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
  12fe1c:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  12fe20:	ebffac9d 	bl	11b09c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  12fe24:	e3063840 	movw	r3, #26688	; 0x6840
  12fe28:	e3403057 	movt	r3, #87	; 0x57
  12fe2c:	e1d337b4 	ldrh	r3, [r3, #116]	; 0x74
  12fe30:	e2833001 	add	r3, r3, #1
  12fe34:	e6ff2073 	uxth	r2, r3
  12fe38:	e3063840 	movw	r3, #26688	; 0x6840
  12fe3c:	e3403057 	movt	r3, #87	; 0x57
  12fe40:	e1c327b4 	strh	r2, [r3, #116]	; 0x74
  MIB2_STATS_INC(mib2.icmpinerrors);
  12fe44:	e3063840 	movw	r3, #26688	; 0x6840
  12fe48:	e3403057 	movt	r3, #87	; 0x57
  12fe4c:	e59331a4 	ldr	r3, [r3, #420]	; 0x1a4
  12fe50:	e2832001 	add	r2, r3, #1
  12fe54:	e3063840 	movw	r3, #26688	; 0x6840
  12fe58:	e3403057 	movt	r3, #87	; 0x57
  12fe5c:	e58321a4 	str	r2, [r3, #420]	; 0x1a4
  return;
  12fe60:	e320f000 	nop	{0}
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
  12fe64:	e24bd004 	sub	sp, fp, #4
  12fe68:	e8bd8800 	pop	{fp, pc}
  12fe6c:	001505fc 	.word	0x001505fc

0012fe70 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
  12fe70:	e92d4800 	push	{fp, lr}
  12fe74:	e28db004 	add	fp, sp, #4
  12fe78:	e24dd008 	sub	sp, sp, #8
  12fe7c:	e50b0008 	str	r0, [fp, #-8]
  12fe80:	e50b100c 	str	r1, [fp, #-12]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  12fe84:	e3063840 	movw	r3, #26688	; 0x6840
  12fe88:	e3403057 	movt	r3, #87	; 0x57
  12fe8c:	e59331dc 	ldr	r3, [r3, #476]	; 0x1dc
  12fe90:	e2832001 	add	r2, r3, #1
  12fe94:	e3063840 	movw	r3, #26688	; 0x6840
  12fe98:	e3403057 	movt	r3, #87	; 0x57
  12fe9c:	e58321dc 	str	r2, [r3, #476]	; 0x1dc
  icmp_send_response(p, ICMP_DUR, t);
  12fea0:	e51b300c 	ldr	r3, [fp, #-12]
  12fea4:	e6ef3073 	uxtb	r3, r3
  12fea8:	e1a02003 	mov	r2, r3
  12feac:	e3a01003 	mov	r1, #3
  12feb0:	e51b0008 	ldr	r0, [fp, #-8]
  12feb4:	eb000017 	bl	12ff18 <icmp_send_response>
}
  12feb8:	e320f000 	nop	{0}
  12febc:	e24bd004 	sub	sp, fp, #4
  12fec0:	e8bd8800 	pop	{fp, pc}

0012fec4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
  12fec4:	e92d4800 	push	{fp, lr}
  12fec8:	e28db004 	add	fp, sp, #4
  12fecc:	e24dd008 	sub	sp, sp, #8
  12fed0:	e50b0008 	str	r0, [fp, #-8]
  12fed4:	e50b100c 	str	r1, [fp, #-12]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  12fed8:	e3063840 	movw	r3, #26688	; 0x6840
  12fedc:	e3403057 	movt	r3, #87	; 0x57
  12fee0:	e59331e0 	ldr	r3, [r3, #480]	; 0x1e0
  12fee4:	e2832001 	add	r2, r3, #1
  12fee8:	e3063840 	movw	r3, #26688	; 0x6840
  12feec:	e3403057 	movt	r3, #87	; 0x57
  12fef0:	e58321e0 	str	r2, [r3, #480]	; 0x1e0
  icmp_send_response(p, ICMP_TE, t);
  12fef4:	e51b300c 	ldr	r3, [fp, #-12]
  12fef8:	e6ef3073 	uxtb	r3, r3
  12fefc:	e1a02003 	mov	r2, r3
  12ff00:	e3a0100b 	mov	r1, #11
  12ff04:	e51b0008 	ldr	r0, [fp, #-8]
  12ff08:	eb000002 	bl	12ff18 <icmp_send_response>
}
  12ff0c:	e320f000 	nop	{0}
  12ff10:	e24bd004 	sub	sp, fp, #4
  12ff14:	e8bd8800 	pop	{fp, pc}

0012ff18 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
  12ff18:	e92d4800 	push	{fp, lr}
  12ff1c:	e28db004 	add	fp, sp, #4
  12ff20:	e24dd030 	sub	sp, sp, #48	; 0x30
  12ff24:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  12ff28:	e1a03001 	mov	r3, r1
  12ff2c:	e54b3021 	strb	r3, [fp, #-33]	; 0xffffffdf
  12ff30:	e1a03002 	mov	r3, r2
  12ff34:	e54b3022 	strb	r3, [fp, #-34]	; 0xffffffde
  struct icmp_echo_hdr *icmphdr;
  ip4_addr_t iphdr_src;
  struct netif *netif;

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);
  12ff38:	e3063840 	movw	r3, #26688	; 0x6840
  12ff3c:	e3403057 	movt	r3, #87	; 0x57
  12ff40:	e59331d4 	ldr	r3, [r3, #468]	; 0x1d4
  12ff44:	e2832001 	add	r2, r3, #1
  12ff48:	e3063840 	movw	r3, #26688	; 0x6840
  12ff4c:	e3403057 	movt	r3, #87	; 0x57
  12ff50:	e58321d4 	str	r2, [r3, #468]	; 0x1d4

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
  12ff54:	e3a02000 	mov	r2, #0
  12ff58:	e3a01024 	mov	r1, #36	; 0x24
  12ff5c:	e3a00001 	mov	r0, #1
  12ff60:	ebffa946 	bl	11a480 <pbuf_alloc>
  12ff64:	e50b0008 	str	r0, [fp, #-8]
                 PBUF_RAM);
  if (q == NULL) {
  12ff68:	e51b3008 	ldr	r3, [fp, #-8]
  12ff6c:	e3530000 	cmp	r3, #0
  12ff70:	1a000007 	bne	12ff94 <icmp_send_response+0x7c>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
  12ff74:	e3063840 	movw	r3, #26688	; 0x6840
  12ff78:	e3403057 	movt	r3, #87	; 0x57
  12ff7c:	e59331d8 	ldr	r3, [r3, #472]	; 0x1d8
  12ff80:	e2832001 	add	r2, r3, #1
  12ff84:	e3063840 	movw	r3, #26688	; 0x6840
  12ff88:	e3403057 	movt	r3, #87	; 0x57
  12ff8c:	e58321d8 	str	r2, [r3, #472]	; 0x1d8
  12ff90:	ea000055 	b	1300ec <icmp_send_response+0x1d4>
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
  12ff94:	e51b3008 	ldr	r3, [fp, #-8]
  12ff98:	e1d330ba 	ldrh	r3, [r3, #10]
  12ff9c:	e3530023 	cmp	r3, #35	; 0x23
  12ffa0:	8a000006 	bhi	12ffc0 <icmp_send_response+0xa8>
  12ffa4:	e3090718 	movw	r0, #38680	; 0x9718
  12ffa8:	e3400014 	movt	r0, #20
  12ffac:	ebff4c58 	bl	103114 <rt_kprintf>
  12ffb0:	e3001162 	movw	r1, #354	; 0x162
  12ffb4:	e30906b0 	movw	r0, #38576	; 0x96b0
  12ffb8:	e3400014 	movt	r0, #20
  12ffbc:	ebff6c28 	bl	10b064 <sys_arch_assert>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
  12ffc0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  12ffc4:	e5933004 	ldr	r3, [r3, #4]
  12ffc8:	e50b300c 	str	r3, [fp, #-12]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
  12ffcc:	e51b3008 	ldr	r3, [fp, #-8]
  12ffd0:	e5933004 	ldr	r3, [r3, #4]
  12ffd4:	e50b3010 	str	r3, [fp, #-16]
  icmphdr->type = type;
  12ffd8:	e51b3010 	ldr	r3, [fp, #-16]
  12ffdc:	e55b2021 	ldrb	r2, [fp, #-33]	; 0xffffffdf
  12ffe0:	e5c32000 	strb	r2, [r3]
  icmphdr->code = code;
  12ffe4:	e51b3010 	ldr	r3, [fp, #-16]
  12ffe8:	e55b2022 	ldrb	r2, [fp, #-34]	; 0xffffffde
  12ffec:	e5c32001 	strb	r2, [r3, #1]
  icmphdr->id = 0;
  12fff0:	e51b3010 	ldr	r3, [fp, #-16]
  12fff4:	e3a02000 	mov	r2, #0
  12fff8:	e5c32004 	strb	r2, [r3, #4]
  12fffc:	e3a02000 	mov	r2, #0
  130000:	e5c32005 	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
  130004:	e51b3010 	ldr	r3, [fp, #-16]
  130008:	e3a02000 	mov	r2, #0
  13000c:	e5c32006 	strb	r2, [r3, #6]
  130010:	e3a02000 	mov	r2, #0
  130014:	e5c32007 	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
  130018:	e51b3008 	ldr	r3, [fp, #-8]
  13001c:	e5933004 	ldr	r3, [r3, #4]
  130020:	e2830008 	add	r0, r3, #8
  130024:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  130028:	e5933004 	ldr	r3, [r3, #4]
  13002c:	e3a0201c 	mov	r2, #28
  130030:	e1a01003 	mov	r1, r3
  130034:	eb0043d0 	bl	140f7c <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
  130038:	e51b300c 	ldr	r3, [fp, #-12]
  13003c:	e593300c 	ldr	r3, [r3, #12]
  130040:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
  130044:	e24b3018 	sub	r3, fp, #24
  130048:	e1a00003 	mov	r0, r3
  13004c:	eb0004c9 	bl	131378 <ip4_route>
  130050:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
#endif
  if (netif != NULL) {
  130054:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  130058:	e3530000 	cmp	r3, #0
  13005c:	0a000020 	beq	1300e4 <icmp_send_response+0x1cc>
    /* calculate checksum */
    icmphdr->chksum = 0;
  130060:	e51b3010 	ldr	r3, [fp, #-16]
  130064:	e3a02000 	mov	r2, #0
  130068:	e5c32002 	strb	r2, [r3, #2]
  13006c:	e3a02000 	mov	r2, #0
  130070:	e5c32003 	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
  130074:	e51b3008 	ldr	r3, [fp, #-8]
  130078:	e1d330ba 	ldrh	r3, [r3, #10]
  13007c:	e1a01003 	mov	r1, r3
  130080:	e51b0010 	ldr	r0, [fp, #-16]
  130084:	ebffa2dc 	bl	118bfc <inet_chksum>
  130088:	e1a03000 	mov	r3, r0
  13008c:	e1a02003 	mov	r2, r3
  130090:	e51b3010 	ldr	r3, [fp, #-16]
  130094:	e1c320b2 	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
  130098:	e3063840 	movw	r3, #26688	; 0x6840
  13009c:	e3403057 	movt	r3, #87	; 0x57
  1300a0:	e1d336b0 	ldrh	r3, [r3, #96]	; 0x60
  1300a4:	e2833001 	add	r3, r3, #1
  1300a8:	e6ff2073 	uxth	r2, r3
  1300ac:	e3063840 	movw	r3, #26688	; 0x6840
  1300b0:	e3403057 	movt	r3, #87	; 0x57
  1300b4:	e1c326b0 	strh	r2, [r3, #96]	; 0x60
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
  1300b8:	e24b2018 	sub	r2, fp, #24
  1300bc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1300c0:	e58d3008 	str	r3, [sp, #8]
  1300c4:	e3a03001 	mov	r3, #1
  1300c8:	e58d3004 	str	r3, [sp, #4]
  1300cc:	e3a03000 	mov	r3, #0
  1300d0:	e58d3000 	str	r3, [sp]
  1300d4:	e3a030ff 	mov	r3, #255	; 0xff
  1300d8:	e3a01000 	mov	r1, #0
  1300dc:	e51b0008 	ldr	r0, [fp, #-8]
  1300e0:	eb00077d 	bl	131edc <ip4_output_if>
  }
  pbuf_free(q);
  1300e4:	e51b0008 	ldr	r0, [fp, #-8]
  1300e8:	ebffabeb 	bl	11b09c <pbuf_free>
}
  1300ec:	e24bd004 	sub	sp, fp, #4
  1300f0:	e8bd8800 	pop	{fp, pc}

001300f4 <igmp_init>:
/**
 * Initialize the IGMP module
 */
void
igmp_init(void)
{
  1300f4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1300f8:	e28db000 	add	fp, sp, #0
  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_init: initializing\n"));

  IP4_ADDR(&allsystems, 224, 0, 0, 1);
  1300fc:	e30f2bc8 	movw	r2, #64456	; 0xfbc8
  130100:	e3402014 	movt	r2, #20
  130104:	e3a030e0 	mov	r3, #224	; 0xe0
  130108:	e3403100 	movt	r3, #256	; 0x100
  13010c:	e5823000 	str	r3, [r2]
  IP4_ADDR(&allrouters, 224, 0, 0, 2);
  130110:	e30f2bcc 	movw	r2, #64460	; 0xfbcc
  130114:	e3402014 	movt	r2, #20
  130118:	e3a030e0 	mov	r3, #224	; 0xe0
  13011c:	e3403200 	movt	r3, #512	; 0x200
  130120:	e5823000 	str	r3, [r2]
}
  130124:	e320f000 	nop	{0}
  130128:	e28bd000 	add	sp, fp, #0
  13012c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  130130:	e12fff1e 	bx	lr

00130134 <igmp_start>:
 *
 * @param netif network interface on which start IGMP processing
 */
err_t
igmp_start(struct netif *netif)
{
  130134:	e92d4800 	push	{fp, lr}
  130138:	e28db004 	add	fp, sp, #4
  13013c:	e24dd010 	sub	sp, sp, #16
  130140:	e50b0010 	str	r0, [fp, #-16]
  struct igmp_group* group;

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_start: starting IGMP processing on if %p\n", (void*)netif));

  group = igmp_lookup_group(netif, &allsystems);
  130144:	e30f1bc8 	movw	r1, #64456	; 0xfbc8
  130148:	e3401014 	movt	r1, #20
  13014c:	e51b0010 	ldr	r0, [fp, #-16]
  130150:	eb000078 	bl	130338 <igmp_lookup_group>
  130154:	e50b0008 	str	r0, [fp, #-8]

  if (group != NULL) {
  130158:	e51b3008 	ldr	r3, [fp, #-8]
  13015c:	e3530000 	cmp	r3, #0
  130160:	0a000015 	beq	1301bc <igmp_start+0x88>
    group->group_state = IGMP_GROUP_IDLE_MEMBER;
  130164:	e51b3008 	ldr	r3, [fp, #-8]
  130168:	e3a02002 	mov	r2, #2
  13016c:	e5c32009 	strb	r2, [r3, #9]
    group->use++;
  130170:	e51b3008 	ldr	r3, [fp, #-8]
  130174:	e5d3300c 	ldrb	r3, [r3, #12]
  130178:	e2833001 	add	r3, r3, #1
  13017c:	e6ef2073 	uxtb	r2, r3
  130180:	e51b3008 	ldr	r3, [fp, #-8]
  130184:	e5c3200c 	strb	r2, [r3, #12]

    /* Allow the igmp messages at the MAC level */
    if (netif->igmp_mac_filter != NULL) {
  130188:	e51b3010 	ldr	r3, [fp, #-16]
  13018c:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  130190:	e3530000 	cmp	r3, #0
  130194:	0a000006 	beq	1301b4 <igmp_start+0x80>
      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_start: igmp_mac_filter(ADD "));
      ip4_addr_debug_print_val(IGMP_DEBUG, allsystems);
      LWIP_DEBUGF(IGMP_DEBUG, (") on if %p\n", (void*)netif));
      netif->igmp_mac_filter(netif, &allsystems, NETIF_ADD_MAC_FILTER);
  130198:	e51b3010 	ldr	r3, [fp, #-16]
  13019c:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  1301a0:	e3a02001 	mov	r2, #1
  1301a4:	e30f1bc8 	movw	r1, #64456	; 0xfbc8
  1301a8:	e3401014 	movt	r1, #20
  1301ac:	e51b0010 	ldr	r0, [fp, #-16]
  1301b0:	e12fff33 	blx	r3
    }

    return ERR_OK;
  1301b4:	e3a03000 	mov	r3, #0
  1301b8:	ea000000 	b	1301c0 <igmp_start+0x8c>
  }

  return ERR_MEM;
  1301bc:	e3e03000 	mvn	r3, #0
}
  1301c0:	e1a00003 	mov	r0, r3
  1301c4:	e24bd004 	sub	sp, fp, #4
  1301c8:	e8bd8800 	pop	{fp, pc}

001301cc <igmp_stop>:
 *
 * @param netif network interface on which stop IGMP processing
 */
err_t
igmp_stop(struct netif *netif)
{
  1301cc:	e92d4800 	push	{fp, lr}
  1301d0:	e28db004 	add	fp, sp, #4
  1301d4:	e24dd010 	sub	sp, sp, #16
  1301d8:	e50b0010 	str	r0, [fp, #-16]
  struct igmp_group *group = netif_igmp_data(netif);
  1301dc:	e51b3010 	ldr	r3, [fp, #-16]
  1301e0:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  1301e4:	e50b3008 	str	r3, [fp, #-8]

  netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_IGMP, NULL);
  1301e8:	e51b3010 	ldr	r3, [fp, #-16]
  1301ec:	e3a02000 	mov	r2, #0
  1301f0:	e583202c 	str	r2, [r3, #44]	; 0x2c

  while (group != NULL) {
  1301f4:	ea000012 	b	130244 <igmp_stop+0x78>
    struct igmp_group *next = group->next; /* avoid use-after-free below */
  1301f8:	e51b3008 	ldr	r3, [fp, #-8]
  1301fc:	e5933000 	ldr	r3, [r3]
  130200:	e50b300c 	str	r3, [fp, #-12]

    /* disable the group at the MAC level */
    if (netif->igmp_mac_filter != NULL) {
  130204:	e51b3010 	ldr	r3, [fp, #-16]
  130208:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  13020c:	e3530000 	cmp	r3, #0
  130210:	0a000006 	beq	130230 <igmp_stop+0x64>
      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_stop: igmp_mac_filter(DEL "));
      ip4_addr_debug_print(IGMP_DEBUG, &group->group_address);
      LWIP_DEBUGF(IGMP_DEBUG, (") on if %p\n", (void*)netif));
      netif->igmp_mac_filter(netif, &(group->group_address), NETIF_DEL_MAC_FILTER);
  130214:	e51b3010 	ldr	r3, [fp, #-16]
  130218:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  13021c:	e51b2008 	ldr	r2, [fp, #-8]
  130220:	e2821004 	add	r1, r2, #4
  130224:	e3a02000 	mov	r2, #0
  130228:	e51b0010 	ldr	r0, [fp, #-16]
  13022c:	e12fff33 	blx	r3
    }

    /* free group */
    memp_free(MEMP_IGMP_GROUP, group);
  130230:	e51b1008 	ldr	r1, [fp, #-8]
  130234:	e3a0000c 	mov	r0, #12
  130238:	ebffa489 	bl	119464 <memp_free>

    /* move to "next" */
    group = next;
  13023c:	e51b300c 	ldr	r3, [fp, #-12]
  130240:	e50b3008 	str	r3, [fp, #-8]
  while (group != NULL) {
  130244:	e51b3008 	ldr	r3, [fp, #-8]
  130248:	e3530000 	cmp	r3, #0
  13024c:	1affffe9 	bne	1301f8 <igmp_stop+0x2c>
  }
  return ERR_OK;
  130250:	e3a03000 	mov	r3, #0
}
  130254:	e1a00003 	mov	r0, r3
  130258:	e24bd004 	sub	sp, fp, #4
  13025c:	e8bd8800 	pop	{fp, pc}

00130260 <igmp_report_groups>:
 *
 * @param netif network interface on which report IGMP memberships
 */
void
igmp_report_groups(struct netif *netif)
{
  130260:	e92d4800 	push	{fp, lr}
  130264:	e28db004 	add	fp, sp, #4
  130268:	e24dd010 	sub	sp, sp, #16
  13026c:	e50b0010 	str	r0, [fp, #-16]
  struct igmp_group *group = netif_igmp_data(netif);
  130270:	e51b3010 	ldr	r3, [fp, #-16]
  130274:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  130278:	e50b3008 	str	r3, [fp, #-8]

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_report_groups: sending IGMP reports on if %p\n", (void*)netif));

  /* Skip the first group in the list, it is always the allsystems group added in igmp_start() */
  if(group != NULL) {
  13027c:	e51b3008 	ldr	r3, [fp, #-8]
  130280:	e3530000 	cmp	r3, #0
  130284:	0a000009 	beq	1302b0 <igmp_report_groups+0x50>
    group = group->next;
  130288:	e51b3008 	ldr	r3, [fp, #-8]
  13028c:	e5933000 	ldr	r3, [r3]
  130290:	e50b3008 	str	r3, [fp, #-8]
  }
  
  while (group != NULL) {
  130294:	ea000005 	b	1302b0 <igmp_report_groups+0x50>
    igmp_delaying_member(group, IGMP_JOIN_DELAYING_MEMBER_TMR);
  130298:	e3a01005 	mov	r1, #5
  13029c:	e51b0008 	ldr	r0, [fp, #-8]
  1302a0:	eb000372 	bl	131070 <igmp_delaying_member>
    group = group->next;
  1302a4:	e51b3008 	ldr	r3, [fp, #-8]
  1302a8:	e5933000 	ldr	r3, [r3]
  1302ac:	e50b3008 	str	r3, [fp, #-8]
  while (group != NULL) {
  1302b0:	e51b3008 	ldr	r3, [fp, #-8]
  1302b4:	e3530000 	cmp	r3, #0
  1302b8:	1afffff6 	bne	130298 <igmp_report_groups+0x38>
  }
}
  1302bc:	e320f000 	nop	{0}
  1302c0:	e24bd004 	sub	sp, fp, #4
  1302c4:	e8bd8800 	pop	{fp, pc}

001302c8 <igmp_lookfor_group>:
 * @return a struct igmp_group* if the group has been found,
 *         NULL if the group wasn't found.
 */
struct igmp_group *
igmp_lookfor_group(struct netif *ifp, const ip4_addr_t *addr)
{
  1302c8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1302cc:	e28db000 	add	fp, sp, #0
  1302d0:	e24dd014 	sub	sp, sp, #20
  1302d4:	e50b0010 	str	r0, [fp, #-16]
  1302d8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct igmp_group *group = netif_igmp_data(ifp);
  1302dc:	e51b3010 	ldr	r3, [fp, #-16]
  1302e0:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  1302e4:	e50b3008 	str	r3, [fp, #-8]

  while (group != NULL) {
  1302e8:	ea00000a 	b	130318 <igmp_lookfor_group+0x50>
    if (ip4_addr_cmp(&(group->group_address), addr)) {
  1302ec:	e51b3008 	ldr	r3, [fp, #-8]
  1302f0:	e5932004 	ldr	r2, [r3, #4]
  1302f4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1302f8:	e5933000 	ldr	r3, [r3]
  1302fc:	e1520003 	cmp	r2, r3
  130300:	1a000001 	bne	13030c <igmp_lookfor_group+0x44>
      return group;
  130304:	e51b3008 	ldr	r3, [fp, #-8]
  130308:	ea000006 	b	130328 <igmp_lookfor_group+0x60>
    }
    group = group->next;
  13030c:	e51b3008 	ldr	r3, [fp, #-8]
  130310:	e5933000 	ldr	r3, [r3]
  130314:	e50b3008 	str	r3, [fp, #-8]
  while (group != NULL) {
  130318:	e51b3008 	ldr	r3, [fp, #-8]
  13031c:	e3530000 	cmp	r3, #0
  130320:	1afffff1 	bne	1302ec <igmp_lookfor_group+0x24>
  }

  /* to be clearer, we return NULL here instead of
   * 'group' (which is also NULL at this point).
   */
  return NULL;
  130324:	e3a03000 	mov	r3, #0
}
  130328:	e1a00003 	mov	r0, r3
  13032c:	e28bd000 	add	sp, fp, #0
  130330:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  130334:	e12fff1e 	bx	lr

00130338 <igmp_lookup_group>:
 * @return a struct igmp_group*,
 *         NULL on memory error.
 */
static struct igmp_group *
igmp_lookup_group(struct netif *ifp, const ip4_addr_t *addr)
{
  130338:	e92d4800 	push	{fp, lr}
  13033c:	e28db004 	add	fp, sp, #4
  130340:	e24dd010 	sub	sp, sp, #16
  130344:	e50b0010 	str	r0, [fp, #-16]
  130348:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct igmp_group *group;
  struct igmp_group *list_head = netif_igmp_data(ifp);
  13034c:	e51b3010 	ldr	r3, [fp, #-16]
  130350:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  130354:	e50b3008 	str	r3, [fp, #-8]

  /* Search if the group already exists */
  group = igmp_lookfor_group(ifp, addr);
  130358:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  13035c:	e51b0010 	ldr	r0, [fp, #-16]
  130360:	ebffffd8 	bl	1302c8 <igmp_lookfor_group>
  130364:	e50b000c 	str	r0, [fp, #-12]
  if (group != NULL) {
  130368:	e51b300c 	ldr	r3, [fp, #-12]
  13036c:	e3530000 	cmp	r3, #0
  130370:	0a000001 	beq	13037c <igmp_lookup_group+0x44>
    /* Group already exists. */
    return group;
  130374:	e51b300c 	ldr	r3, [fp, #-12]
  130378:	ea00004b 	b	1304ac <igmp_lookup_group+0x174>
  }
  
  /* Group doesn't exist yet, create a new one */
  group = (struct igmp_group *)memp_malloc(MEMP_IGMP_GROUP);
  13037c:	e3002101 	movw	r2, #257	; 0x101
  130380:	e3091744 	movw	r1, #38724	; 0x9744
  130384:	e3401014 	movt	r1, #20
  130388:	e3a0000c 	mov	r0, #12
  13038c:	ebffa3cc 	bl	1192c4 <memp_malloc_fn>
  130390:	e50b000c 	str	r0, [fp, #-12]
  if (group != NULL) {
  130394:	e51b300c 	ldr	r3, [fp, #-12]
  130398:	e3530000 	cmp	r3, #0
  13039c:	0a000041 	beq	1304a8 <igmp_lookup_group+0x170>
    ip4_addr_set(&(group->group_address), addr);
  1303a0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1303a4:	e3530000 	cmp	r3, #0
  1303a8:	0a000002 	beq	1303b8 <igmp_lookup_group+0x80>
  1303ac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1303b0:	e5933000 	ldr	r3, [r3]
  1303b4:	ea000000 	b	1303bc <igmp_lookup_group+0x84>
  1303b8:	e3a03000 	mov	r3, #0
  1303bc:	e51b200c 	ldr	r2, [fp, #-12]
  1303c0:	e5823004 	str	r3, [r2, #4]
    group->timer              = 0; /* Not running */
  1303c4:	e51b300c 	ldr	r3, [fp, #-12]
  1303c8:	e3a02000 	mov	r2, #0
  1303cc:	e1c320ba 	strh	r2, [r3, #10]
    group->group_state        = IGMP_GROUP_NON_MEMBER;
  1303d0:	e51b300c 	ldr	r3, [fp, #-12]
  1303d4:	e3a02000 	mov	r2, #0
  1303d8:	e5c32009 	strb	r2, [r3, #9]
    group->last_reporter_flag = 0;
  1303dc:	e51b300c 	ldr	r3, [fp, #-12]
  1303e0:	e3a02000 	mov	r2, #0
  1303e4:	e5c32008 	strb	r2, [r3, #8]
    group->use                = 0;
  1303e8:	e51b300c 	ldr	r3, [fp, #-12]
  1303ec:	e3a02000 	mov	r2, #0
  1303f0:	e5c3200c 	strb	r2, [r3, #12]

    /* Ensure allsystems group is always first in list */    
    if (list_head == NULL) {
  1303f4:	e51b3008 	ldr	r3, [fp, #-8]
  1303f8:	e3530000 	cmp	r3, #0
  1303fc:	1a000014 	bne	130454 <igmp_lookup_group+0x11c>
      /* this is the first entry in linked list */
      LWIP_ASSERT("igmp_lookup_group: first group must be allsystems",
  130400:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  130404:	e5932000 	ldr	r2, [r3]
  130408:	e30f3bc8 	movw	r3, #64456	; 0xfbc8
  13040c:	e3403014 	movt	r3, #20
  130410:	e5933000 	ldr	r3, [r3]
  130414:	e1520003 	cmp	r2, r3
  130418:	0a000006 	beq	130438 <igmp_lookup_group+0x100>
  13041c:	e3090778 	movw	r0, #38776	; 0x9778
  130420:	e3400014 	movt	r0, #20
  130424:	ebff4b3a 	bl	103114 <rt_kprintf>
  130428:	e300110d 	movw	r1, #269	; 0x10d
  13042c:	e3090744 	movw	r0, #38724	; 0x9744
  130430:	e3400014 	movt	r0, #20
  130434:	ebff6b0a 	bl	10b064 <sys_arch_assert>
        (ip4_addr_cmp(addr, &allsystems) != 0));
      group->next = NULL;
  130438:	e51b300c 	ldr	r3, [fp, #-12]
  13043c:	e3a02000 	mov	r2, #0
  130440:	e5832000 	str	r2, [r3]
      netif_set_client_data(ifp, LWIP_NETIF_CLIENT_DATA_INDEX_IGMP, group);
  130444:	e51b3010 	ldr	r3, [fp, #-16]
  130448:	e51b200c 	ldr	r2, [fp, #-12]
  13044c:	e583202c 	str	r2, [r3, #44]	; 0x2c
  130450:	ea000014 	b	1304a8 <igmp_lookup_group+0x170>
    } else {
      /* append _after_ first entry */
      LWIP_ASSERT("igmp_lookup_group: all except first group must not be allsystems",
  130454:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  130458:	e5932000 	ldr	r2, [r3]
  13045c:	e30f3bc8 	movw	r3, #64456	; 0xfbc8
  130460:	e3403014 	movt	r3, #20
  130464:	e5933000 	ldr	r3, [r3]
  130468:	e1520003 	cmp	r2, r3
  13046c:	1a000006 	bne	13048c <igmp_lookup_group+0x154>
  130470:	e30907ac 	movw	r0, #38828	; 0x97ac
  130474:	e3400014 	movt	r0, #20
  130478:	ebff4b25 	bl	103114 <rt_kprintf>
  13047c:	e3001113 	movw	r1, #275	; 0x113
  130480:	e3090744 	movw	r0, #38724	; 0x9744
  130484:	e3400014 	movt	r0, #20
  130488:	ebff6af5 	bl	10b064 <sys_arch_assert>
        (ip4_addr_cmp(addr, &allsystems) == 0));
      group->next = list_head->next;
  13048c:	e51b3008 	ldr	r3, [fp, #-8]
  130490:	e5932000 	ldr	r2, [r3]
  130494:	e51b300c 	ldr	r3, [fp, #-12]
  130498:	e5832000 	str	r2, [r3]
      list_head->next = group;
  13049c:	e51b3008 	ldr	r3, [fp, #-8]
  1304a0:	e51b200c 	ldr	r2, [fp, #-12]
  1304a4:	e5832000 	str	r2, [r3]

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_lookup_group: %sallocated a new group with address ", (group?"":"impossible to ")));
  ip4_addr_debug_print(IGMP_DEBUG, addr);
  LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", (void*)ifp));

  return group;
  1304a8:	e51b300c 	ldr	r3, [fp, #-12]
}
  1304ac:	e1a00003 	mov	r0, r3
  1304b0:	e24bd004 	sub	sp, fp, #4
  1304b4:	e8bd8800 	pop	{fp, pc}

001304b8 <igmp_remove_group>:
 * @param group the group to remove from the global igmp_group_list
 * @return ERR_OK if group was removed from the list, an err_t otherwise
 */
static err_t
igmp_remove_group(struct netif* netif, struct igmp_group *group)
{
  1304b8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1304bc:	e28db000 	add	fp, sp, #0
  1304c0:	e24dd014 	sub	sp, sp, #20
  1304c4:	e50b0010 	str	r0, [fp, #-16]
  1304c8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  err_t err = ERR_OK;
  1304cc:	e3a03000 	mov	r3, #0
  1304d0:	e54b3005 	strb	r3, [fp, #-5]
  struct igmp_group *tmp_group;

  /* Skip the first group in the list, it is always the allsystems group added in igmp_start() */
  for (tmp_group = netif_igmp_data(netif); tmp_group != NULL; tmp_group = tmp_group->next) {
  1304d4:	e51b3010 	ldr	r3, [fp, #-16]
  1304d8:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  1304dc:	e50b300c 	str	r3, [fp, #-12]
  1304e0:	ea00000c 	b	130518 <igmp_remove_group+0x60>
    if (tmp_group->next == group) {
  1304e4:	e51b300c 	ldr	r3, [fp, #-12]
  1304e8:	e5933000 	ldr	r3, [r3]
  1304ec:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1304f0:	e1520003 	cmp	r2, r3
  1304f4:	1a000004 	bne	13050c <igmp_remove_group+0x54>
      tmp_group->next = group->next;
  1304f8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1304fc:	e5932000 	ldr	r2, [r3]
  130500:	e51b300c 	ldr	r3, [fp, #-12]
  130504:	e5832000 	str	r2, [r3]
      break;
  130508:	ea000005 	b	130524 <igmp_remove_group+0x6c>
  for (tmp_group = netif_igmp_data(netif); tmp_group != NULL; tmp_group = tmp_group->next) {
  13050c:	e51b300c 	ldr	r3, [fp, #-12]
  130510:	e5933000 	ldr	r3, [r3]
  130514:	e50b300c 	str	r3, [fp, #-12]
  130518:	e51b300c 	ldr	r3, [fp, #-12]
  13051c:	e3530000 	cmp	r3, #0
  130520:	1affffef 	bne	1304e4 <igmp_remove_group+0x2c>
    }
  }
  /* Group not found in the global igmp_group_list */
  if (tmp_group == NULL) {
  130524:	e51b300c 	ldr	r3, [fp, #-12]
  130528:	e3530000 	cmp	r3, #0
  13052c:	1a000001 	bne	130538 <igmp_remove_group+0x80>
    err = ERR_ARG;
  130530:	e3e0300f 	mvn	r3, #15
  130534:	e54b3005 	strb	r3, [fp, #-5]
  }

  return err;
  130538:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  13053c:	e1a00003 	mov	r0, r3
  130540:	e28bd000 	add	sp, fp, #0
  130544:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  130548:	e12fff1e 	bx	lr

0013054c <igmp_input>:
 * @param inp network interface on which the packet was received
 * @param dest destination ip address of the igmp packet
 */
void
igmp_input(struct pbuf *p, struct netif *inp, const ip4_addr_t *dest)
{
  13054c:	e92d4800 	push	{fp, lr}
  130550:	e28db004 	add	fp, sp, #4
  130554:	e24dd020 	sub	sp, sp, #32
  130558:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  13055c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  130560:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  struct igmp_msg*   igmp;
  struct igmp_group* group;
  struct igmp_group* groupref;

  IGMP_STATS_INC(igmp.recv);
  130564:	e3063840 	movw	r3, #26688	; 0x6840
  130568:	e3403057 	movt	r3, #87	; 0x57
  13056c:	e1d337ba 	ldrh	r3, [r3, #122]	; 0x7a
  130570:	e2833001 	add	r3, r3, #1
  130574:	e6ff2073 	uxth	r2, r3
  130578:	e3063840 	movw	r3, #26688	; 0x6840
  13057c:	e3403057 	movt	r3, #87	; 0x57
  130580:	e1c327ba 	strh	r2, [r3, #122]	; 0x7a

  /* Note that the length CAN be greater than 8 but only 8 are used - All are included in the checksum */
  if (p->len < IGMP_MINLEN) {
  130584:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  130588:	e1d330ba 	ldrh	r3, [r3, #10]
  13058c:	e3530007 	cmp	r3, #7
  130590:	8a00000a 	bhi	1305c0 <igmp_input+0x74>
    pbuf_free(p);
  130594:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  130598:	ebffaabf 	bl	11b09c <pbuf_free>
    IGMP_STATS_INC(igmp.lenerr);
  13059c:	e3063840 	movw	r3, #26688	; 0x6840
  1305a0:	e3403057 	movt	r3, #87	; 0x57
  1305a4:	e1d338b0 	ldrh	r3, [r3, #128]	; 0x80
  1305a8:	e2833001 	add	r3, r3, #1
  1305ac:	e6ff2073 	uxth	r2, r3
  1305b0:	e3063840 	movw	r3, #26688	; 0x6840
  1305b4:	e3403057 	movt	r3, #87	; 0x57
  1305b8:	e1c328b0 	strh	r2, [r3, #128]	; 0x80
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: length error\n"));
    return;
  1305bc:	ea0000c9 	b	1308e8 <igmp_input+0x39c>
  LWIP_DEBUGF(IGMP_DEBUG, (" to address "));
  ip4_addr_debug_print(IGMP_DEBUG, &(ip4_current_header()->dest));
  LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", (void*)inp));

  /* Now calculate and check the checksum */
  igmp = (struct igmp_msg *)p->payload;
  1305c0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1305c4:	e5933004 	ldr	r3, [r3, #4]
  1305c8:	e50b3010 	str	r3, [fp, #-16]
  if (inet_chksum(igmp, p->len)) {
  1305cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1305d0:	e1d330ba 	ldrh	r3, [r3, #10]
  1305d4:	e1a01003 	mov	r1, r3
  1305d8:	e51b0010 	ldr	r0, [fp, #-16]
  1305dc:	ebffa186 	bl	118bfc <inet_chksum>
  1305e0:	e1a03000 	mov	r3, r0
  1305e4:	e3530000 	cmp	r3, #0
  1305e8:	0a00000a 	beq	130618 <igmp_input+0xcc>
    pbuf_free(p);
  1305ec:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1305f0:	ebffaaa9 	bl	11b09c <pbuf_free>
    IGMP_STATS_INC(igmp.chkerr);
  1305f4:	e3063840 	movw	r3, #26688	; 0x6840
  1305f8:	e3403057 	movt	r3, #87	; 0x57
  1305fc:	e1d337be 	ldrh	r3, [r3, #126]	; 0x7e
  130600:	e2833001 	add	r3, r3, #1
  130604:	e6ff2073 	uxth	r2, r3
  130608:	e3063840 	movw	r3, #26688	; 0x6840
  13060c:	e3403057 	movt	r3, #87	; 0x57
  130610:	e1c327be 	strh	r2, [r3, #126]	; 0x7e
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: checksum error\n"));
    return;
  130614:	ea0000b3 	b	1308e8 <igmp_input+0x39c>
  }

  /* Packet is ok so find an existing group */
  group = igmp_lookfor_group(inp, dest); /* use the destination IP address of incoming packet */
  130618:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  13061c:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  130620:	ebffff28 	bl	1302c8 <igmp_lookfor_group>
  130624:	e50b0008 	str	r0, [fp, #-8]

  /* If group can be found or create... */
  if (!group) {
  130628:	e51b3008 	ldr	r3, [fp, #-8]
  13062c:	e3530000 	cmp	r3, #0
  130630:	1a00000a 	bne	130660 <igmp_input+0x114>
    pbuf_free(p);
  130634:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  130638:	ebffaa97 	bl	11b09c <pbuf_free>
    IGMP_STATS_INC(igmp.drop);
  13063c:	e3063840 	movw	r3, #26688	; 0x6840
  130640:	e3403057 	movt	r3, #87	; 0x57
  130644:	e1d337bc 	ldrh	r3, [r3, #124]	; 0x7c
  130648:	e2833001 	add	r3, r3, #1
  13064c:	e6ff2073 	uxth	r2, r3
  130650:	e3063840 	movw	r3, #26688	; 0x6840
  130654:	e3403057 	movt	r3, #87	; 0x57
  130658:	e1c327bc 	strh	r2, [r3, #124]	; 0x7c
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: IGMP frame not for us\n"));
    return;
  13065c:	ea0000a1 	b	1308e8 <igmp_input+0x39c>
  }

  /* NOW ACT ON THE INCOMING MESSAGE TYPE... */
  switch (igmp->igmp_msgtype) {
  130660:	e51b3010 	ldr	r3, [fp, #-16]
  130664:	e5d33000 	ldrb	r3, [r3]
  130668:	e3530011 	cmp	r3, #17
  13066c:	0a000002 	beq	13067c <igmp_input+0x130>
  130670:	e3530016 	cmp	r3, #22
  130674:	0a000078 	beq	13085c <igmp_input+0x310>
  130678:	ea00008d 	b	1308b4 <igmp_input+0x368>
  case IGMP_MEMB_QUERY:
    /* IGMP_MEMB_QUERY to the "all systems" address ? */
    if ((ip4_addr_cmp(dest, &allsystems)) && ip4_addr_isany(&igmp->igmp_group_address)) {
  13067c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  130680:	e5932000 	ldr	r2, [r3]
  130684:	e30f3bc8 	movw	r3, #64456	; 0xfbc8
  130688:	e3403014 	movt	r3, #20
  13068c:	e5933000 	ldr	r3, [r3]
  130690:	e1520003 	cmp	r2, r3
  130694:	1a000035 	bne	130770 <igmp_input+0x224>
  130698:	e51b3010 	ldr	r3, [fp, #-16]
  13069c:	e2833004 	add	r3, r3, #4
  1306a0:	e3530000 	cmp	r3, #0
  1306a4:	0a000003 	beq	1306b8 <igmp_input+0x16c>
  1306a8:	e51b3010 	ldr	r3, [fp, #-16]
  1306ac:	e5933004 	ldr	r3, [r3, #4]
  1306b0:	e3530000 	cmp	r3, #0
  1306b4:	1a00002d 	bne	130770 <igmp_input+0x224>
      /* THIS IS THE GENERAL QUERY */
      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: General IGMP_MEMB_QUERY on \"ALL SYSTEMS\" address (224.0.0.1) [igmp_maxresp=%i]\n", (int)(igmp->igmp_maxresp)));

      if (igmp->igmp_maxresp == 0) {
  1306b8:	e51b3010 	ldr	r3, [fp, #-16]
  1306bc:	e5d33001 	ldrb	r3, [r3, #1]
  1306c0:	e3530000 	cmp	r3, #0
  1306c4:	1a00000b 	bne	1306f8 <igmp_input+0x1ac>
        IGMP_STATS_INC(igmp.rx_v1);
  1306c8:	e3063840 	movw	r3, #26688	; 0x6840
  1306cc:	e3403057 	movt	r3, #87	; 0x57
  1306d0:	e1d338b6 	ldrh	r3, [r3, #134]	; 0x86
  1306d4:	e2833001 	add	r3, r3, #1
  1306d8:	e6ff2073 	uxth	r2, r3
  1306dc:	e3063840 	movw	r3, #26688	; 0x6840
  1306e0:	e3403057 	movt	r3, #87	; 0x57
  1306e4:	e1c328b6 	strh	r2, [r3, #134]	; 0x86
        LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: got an all hosts query with time== 0 - this is V1 and not implemented - treat as v2\n"));
        igmp->igmp_maxresp = IGMP_V1_DELAYING_MEMBER_TMR;
  1306e8:	e51b3010 	ldr	r3, [fp, #-16]
  1306ec:	e3a0200a 	mov	r2, #10
  1306f0:	e5c32001 	strb	r2, [r3, #1]
  1306f4:	ea000007 	b	130718 <igmp_input+0x1cc>
      } else {
        IGMP_STATS_INC(igmp.rx_general);
  1306f8:	e3063840 	movw	r3, #26688	; 0x6840
  1306fc:	e3403057 	movt	r3, #87	; 0x57
  130700:	e1d338ba 	ldrh	r3, [r3, #138]	; 0x8a
  130704:	e2833001 	add	r3, r3, #1
  130708:	e6ff2073 	uxth	r2, r3
  13070c:	e3063840 	movw	r3, #26688	; 0x6840
  130710:	e3403057 	movt	r3, #87	; 0x57
  130714:	e1c328ba 	strh	r2, [r3, #138]	; 0x8a
      }

      groupref = netif_igmp_data(inp);
  130718:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  13071c:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  130720:	e50b300c 	str	r3, [fp, #-12]
      
      /* Do not send messages on the all systems group address! */
      /* Skip the first group in the list, it is always the allsystems group added in igmp_start() */
      if(groupref != NULL) {
  130724:	e51b300c 	ldr	r3, [fp, #-12]
  130728:	e3530000 	cmp	r3, #0
  13072c:	0a00000b 	beq	130760 <igmp_input+0x214>
        groupref = groupref->next;
  130730:	e51b300c 	ldr	r3, [fp, #-12]
  130734:	e5933000 	ldr	r3, [r3]
  130738:	e50b300c 	str	r3, [fp, #-12]
      }

      while (groupref) {
  13073c:	ea000007 	b	130760 <igmp_input+0x214>
        igmp_delaying_member(groupref, igmp->igmp_maxresp);
  130740:	e51b3010 	ldr	r3, [fp, #-16]
  130744:	e5d33001 	ldrb	r3, [r3, #1]
  130748:	e1a01003 	mov	r1, r3
  13074c:	e51b000c 	ldr	r0, [fp, #-12]
  130750:	eb000246 	bl	131070 <igmp_delaying_member>
        groupref = groupref->next;
  130754:	e51b300c 	ldr	r3, [fp, #-12]
  130758:	e5933000 	ldr	r3, [r3]
  13075c:	e50b300c 	str	r3, [fp, #-12]
      while (groupref) {
  130760:	e51b300c 	ldr	r3, [fp, #-12]
  130764:	e3530000 	cmp	r3, #0
  130768:	1afffff4 	bne	130740 <igmp_input+0x1f4>
    if ((ip4_addr_cmp(dest, &allsystems)) && ip4_addr_isany(&igmp->igmp_group_address)) {
  13076c:	ea000039 	b	130858 <igmp_input+0x30c>
      }
    } else {
      /* IGMP_MEMB_QUERY to a specific group ? */
      if (!ip4_addr_isany(&igmp->igmp_group_address)) {
  130770:	e51b3010 	ldr	r3, [fp, #-16]
  130774:	e2833004 	add	r3, r3, #4
  130778:	e3530000 	cmp	r3, #0
  13077c:	0a00002c 	beq	130834 <igmp_input+0x2e8>
  130780:	e51b3010 	ldr	r3, [fp, #-16]
  130784:	e5933004 	ldr	r3, [r3, #4]
  130788:	e3530000 	cmp	r3, #0
  13078c:	0a000028 	beq	130834 <igmp_input+0x2e8>
        LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: IGMP_MEMB_QUERY to a specific group "));
        ip4_addr_debug_print(IGMP_DEBUG, &igmp->igmp_group_address);
        if (ip4_addr_cmp(dest, &allsystems)) {
  130790:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  130794:	e5932000 	ldr	r2, [r3]
  130798:	e30f3bc8 	movw	r3, #64456	; 0xfbc8
  13079c:	e3403014 	movt	r3, #20
  1307a0:	e5933000 	ldr	r3, [r3]
  1307a4:	e1520003 	cmp	r2, r3
  1307a8:	1a000007 	bne	1307cc <igmp_input+0x280>
          ip4_addr_t groupaddr;
          LWIP_DEBUGF(IGMP_DEBUG, (" using \"ALL SYSTEMS\" address (224.0.0.1) [igmp_maxresp=%i]\n", (int)(igmp->igmp_maxresp)));
          /* we first need to re-look for the group since we used dest last time */
          ip4_addr_copy(groupaddr, igmp->igmp_group_address);
  1307ac:	e51b3010 	ldr	r3, [fp, #-16]
  1307b0:	e5933004 	ldr	r3, [r3, #4]
  1307b4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
          group = igmp_lookfor_group(inp, &groupaddr);
  1307b8:	e24b3014 	sub	r3, fp, #20
  1307bc:	e1a01003 	mov	r1, r3
  1307c0:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  1307c4:	ebfffebf 	bl	1302c8 <igmp_lookfor_group>
  1307c8:	e50b0008 	str	r0, [fp, #-8]
        } else {
          LWIP_DEBUGF(IGMP_DEBUG, (" with the group address as destination [igmp_maxresp=%i]\n", (int)(igmp->igmp_maxresp)));
        }

        if (group != NULL) {
  1307cc:	e51b3008 	ldr	r3, [fp, #-8]
  1307d0:	e3530000 	cmp	r3, #0
  1307d4:	0a00000d 	beq	130810 <igmp_input+0x2c4>
          IGMP_STATS_INC(igmp.rx_group);
  1307d8:	e3063840 	movw	r3, #26688	; 0x6840
  1307dc:	e3403057 	movt	r3, #87	; 0x57
  1307e0:	e1d338b8 	ldrh	r3, [r3, #136]	; 0x88
  1307e4:	e2833001 	add	r3, r3, #1
  1307e8:	e6ff2073 	uxth	r2, r3
  1307ec:	e3063840 	movw	r3, #26688	; 0x6840
  1307f0:	e3403057 	movt	r3, #87	; 0x57
  1307f4:	e1c328b8 	strh	r2, [r3, #136]	; 0x88
          igmp_delaying_member(group, igmp->igmp_maxresp);
  1307f8:	e51b3010 	ldr	r3, [fp, #-16]
  1307fc:	e5d33001 	ldrb	r3, [r3, #1]
  130800:	e1a01003 	mov	r1, r3
  130804:	e51b0008 	ldr	r0, [fp, #-8]
  130808:	eb000218 	bl	131070 <igmp_delaying_member>
        if (group != NULL) {
  13080c:	ea000011 	b	130858 <igmp_input+0x30c>
        } else {
          IGMP_STATS_INC(igmp.drop);
  130810:	e3063840 	movw	r3, #26688	; 0x6840
  130814:	e3403057 	movt	r3, #87	; 0x57
  130818:	e1d337bc 	ldrh	r3, [r3, #124]	; 0x7c
  13081c:	e2833001 	add	r3, r3, #1
  130820:	e6ff2073 	uxth	r2, r3
  130824:	e3063840 	movw	r3, #26688	; 0x6840
  130828:	e3403057 	movt	r3, #87	; 0x57
  13082c:	e1c327bc 	strh	r2, [r3, #124]	; 0x7c
        if (group != NULL) {
  130830:	ea000008 	b	130858 <igmp_input+0x30c>
        }
      } else {
        IGMP_STATS_INC(igmp.proterr);
  130834:	e3063840 	movw	r3, #26688	; 0x6840
  130838:	e3403057 	movt	r3, #87	; 0x57
  13083c:	e1d338b4 	ldrh	r3, [r3, #132]	; 0x84
  130840:	e2833001 	add	r3, r3, #1
  130844:	e6ff2073 	uxth	r2, r3
  130848:	e3063840 	movw	r3, #26688	; 0x6840
  13084c:	e3403057 	movt	r3, #87	; 0x57
  130850:	e1c328b4 	strh	r2, [r3, #132]	; 0x84
      }
    }
    break;
  130854:	ea000020 	b	1308dc <igmp_input+0x390>
  130858:	ea00001f 	b	1308dc <igmp_input+0x390>
  case IGMP_V2_MEMB_REPORT:
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: IGMP_V2_MEMB_REPORT\n"));
    IGMP_STATS_INC(igmp.rx_report);
  13085c:	e3063840 	movw	r3, #26688	; 0x6840
  130860:	e3403057 	movt	r3, #87	; 0x57
  130864:	e1d338bc 	ldrh	r3, [r3, #140]	; 0x8c
  130868:	e2833001 	add	r3, r3, #1
  13086c:	e6ff2073 	uxth	r2, r3
  130870:	e3063840 	movw	r3, #26688	; 0x6840
  130874:	e3403057 	movt	r3, #87	; 0x57
  130878:	e1c328bc 	strh	r2, [r3, #140]	; 0x8c
    if (group->group_state == IGMP_GROUP_DELAYING_MEMBER) {
  13087c:	e51b3008 	ldr	r3, [fp, #-8]
  130880:	e5d33009 	ldrb	r3, [r3, #9]
  130884:	e3530001 	cmp	r3, #1
  130888:	1a000012 	bne	1308d8 <igmp_input+0x38c>
      /* This is on a specific group we have already looked up */
      group->timer = 0; /* stopped */
  13088c:	e51b3008 	ldr	r3, [fp, #-8]
  130890:	e3a02000 	mov	r2, #0
  130894:	e1c320ba 	strh	r2, [r3, #10]
      group->group_state = IGMP_GROUP_IDLE_MEMBER;
  130898:	e51b3008 	ldr	r3, [fp, #-8]
  13089c:	e3a02002 	mov	r2, #2
  1308a0:	e5c32009 	strb	r2, [r3, #9]
      group->last_reporter_flag = 0;
  1308a4:	e51b3008 	ldr	r3, [fp, #-8]
  1308a8:	e3a02000 	mov	r2, #0
  1308ac:	e5c32008 	strb	r2, [r3, #8]
    }
    break;
  1308b0:	ea000008 	b	1308d8 <igmp_input+0x38c>
  default:
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: unexpected msg %d in state %d on group %p on if %p\n",
      igmp->igmp_msgtype, group->group_state, (void*)&group, (void*)inp));
    IGMP_STATS_INC(igmp.proterr);
  1308b4:	e3063840 	movw	r3, #26688	; 0x6840
  1308b8:	e3403057 	movt	r3, #87	; 0x57
  1308bc:	e1d338b4 	ldrh	r3, [r3, #132]	; 0x84
  1308c0:	e2833001 	add	r3, r3, #1
  1308c4:	e6ff2073 	uxth	r2, r3
  1308c8:	e3063840 	movw	r3, #26688	; 0x6840
  1308cc:	e3403057 	movt	r3, #87	; 0x57
  1308d0:	e1c328b4 	strh	r2, [r3, #132]	; 0x84
    break;
  1308d4:	ea000000 	b	1308dc <igmp_input+0x390>
    break;
  1308d8:	e320f000 	nop	{0}
  }

  pbuf_free(p);
  1308dc:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1308e0:	ebffa9ed 	bl	11b09c <pbuf_free>
  return;
  1308e4:	e320f000 	nop	{0}
}
  1308e8:	e24bd004 	sub	sp, fp, #4
  1308ec:	e8bd8800 	pop	{fp, pc}

001308f0 <igmp_joingroup>:
 * @param groupaddr the ip address of the group which to join
 * @return ERR_OK if group was joined on the netif(s), an err_t otherwise
 */
err_t
igmp_joingroup(const ip4_addr_t *ifaddr, const ip4_addr_t *groupaddr)
{
  1308f0:	e92d4800 	push	{fp, lr}
  1308f4:	e28db004 	add	fp, sp, #4
  1308f8:	e24dd010 	sub	sp, sp, #16
  1308fc:	e50b0010 	str	r0, [fp, #-16]
  130900:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  err_t err = ERR_VAL; /* no matching interface */
  130904:	e3e03005 	mvn	r3, #5
  130908:	e54b3005 	strb	r3, [fp, #-5]
  struct netif *netif;

  /* make sure it is multicast address */
  LWIP_ERROR("igmp_joingroup: attempt to join non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
  13090c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  130910:	e5933000 	ldr	r3, [r3]
  130914:	e20330f0 	and	r3, r3, #240	; 0xf0
  130918:	e35300e0 	cmp	r3, #224	; 0xe0
  13091c:	0a000008 	beq	130944 <igmp_joingroup+0x54>
  130920:	e30907f0 	movw	r0, #38896	; 0x97f0
  130924:	e3400014 	movt	r0, #20
  130928:	ebff49f9 	bl	103114 <rt_kprintf>
  13092c:	e30011c7 	movw	r1, #455	; 0x1c7
  130930:	e3090744 	movw	r0, #38724	; 0x9744
  130934:	e3400014 	movt	r0, #20
  130938:	ebff69c9 	bl	10b064 <sys_arch_assert>
  13093c:	e3e03005 	mvn	r3, #5
  130940:	ea000038 	b	130a28 <igmp_joingroup+0x138>
  LWIP_ERROR("igmp_joingroup: attempt to join allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
  130944:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  130948:	e5932000 	ldr	r2, [r3]
  13094c:	e30f3bc8 	movw	r3, #64456	; 0xfbc8
  130950:	e3403014 	movt	r3, #20
  130954:	e5933000 	ldr	r3, [r3]
  130958:	e1520003 	cmp	r2, r3
  13095c:	1a000008 	bne	130984 <igmp_joingroup+0x94>
  130960:	e3090828 	movw	r0, #38952	; 0x9828
  130964:	e3400014 	movt	r0, #20
  130968:	ebff49e9 	bl	103114 <rt_kprintf>
  13096c:	e3a01f72 	mov	r1, #456	; 0x1c8
  130970:	e3090744 	movw	r0, #38724	; 0x9744
  130974:	e3400014 	movt	r0, #20
  130978:	ebff69b9 	bl	10b064 <sys_arch_assert>
  13097c:	e3e03005 	mvn	r3, #5
  130980:	ea000028 	b	130a28 <igmp_joingroup+0x138>

  /* loop through netif's */
  netif = netif_list;
  130984:	e3063834 	movw	r3, #26676	; 0x6834
  130988:	e3403057 	movt	r3, #87	; 0x57
  13098c:	e5933000 	ldr	r3, [r3]
  130990:	e50b300c 	str	r3, [fp, #-12]
  while (netif != NULL) {
  130994:	ea00001f 	b	130a18 <igmp_joingroup+0x128>
    /* Should we join this interface ? */
    if ((netif->flags & NETIF_FLAG_IGMP) && ((ip4_addr_isany(ifaddr) || ip4_addr_cmp(netif_ip4_addr(netif), ifaddr)))) {
  130998:	e51b300c 	ldr	r3, [fp, #-12]
  13099c:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  1309a0:	e2033020 	and	r3, r3, #32
  1309a4:	e3530000 	cmp	r3, #0
  1309a8:	0a000017 	beq	130a0c <igmp_joingroup+0x11c>
  1309ac:	e51b3010 	ldr	r3, [fp, #-16]
  1309b0:	e3530000 	cmp	r3, #0
  1309b4:	0a00000a 	beq	1309e4 <igmp_joingroup+0xf4>
  1309b8:	e51b3010 	ldr	r3, [fp, #-16]
  1309bc:	e5933000 	ldr	r3, [r3]
  1309c0:	e3530000 	cmp	r3, #0
  1309c4:	0a000006 	beq	1309e4 <igmp_joingroup+0xf4>
  1309c8:	e51b300c 	ldr	r3, [fp, #-12]
  1309cc:	e2833004 	add	r3, r3, #4
  1309d0:	e5932000 	ldr	r2, [r3]
  1309d4:	e51b3010 	ldr	r3, [fp, #-16]
  1309d8:	e5933000 	ldr	r3, [r3]
  1309dc:	e1520003 	cmp	r2, r3
  1309e0:	1a000009 	bne	130a0c <igmp_joingroup+0x11c>
      err = igmp_joingroup_netif(netif, groupaddr);
  1309e4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1309e8:	e51b000c 	ldr	r0, [fp, #-12]
  1309ec:	eb000010 	bl	130a34 <igmp_joingroup_netif>
  1309f0:	e1a03000 	mov	r3, r0
  1309f4:	e54b3005 	strb	r3, [fp, #-5]
      if (err != ERR_OK) {
  1309f8:	e15b30d5 	ldrsb	r3, [fp, #-5]
  1309fc:	e3530000 	cmp	r3, #0
  130a00:	0a000001 	beq	130a0c <igmp_joingroup+0x11c>
        /* Return an error even if some network interfaces are joined */
        /** @todo undo any other netif already joined */
        return err;
  130a04:	e15b30d5 	ldrsb	r3, [fp, #-5]
  130a08:	ea000006 	b	130a28 <igmp_joingroup+0x138>
      }
    }
    /* proceed to next network interface */
    netif = netif->next;
  130a0c:	e51b300c 	ldr	r3, [fp, #-12]
  130a10:	e5933000 	ldr	r3, [r3]
  130a14:	e50b300c 	str	r3, [fp, #-12]
  while (netif != NULL) {
  130a18:	e51b300c 	ldr	r3, [fp, #-12]
  130a1c:	e3530000 	cmp	r3, #0
  130a20:	1affffdc 	bne	130998 <igmp_joingroup+0xa8>
  }

  return err;
  130a24:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  130a28:	e1a00003 	mov	r0, r3
  130a2c:	e24bd004 	sub	sp, fp, #4
  130a30:	e8bd8800 	pop	{fp, pc}

00130a34 <igmp_joingroup_netif>:
 * @param groupaddr the ip address of the group which to join
 * @return ERR_OK if group was joined on the netif, an err_t otherwise
 */
err_t
igmp_joingroup_netif(struct netif *netif, const ip4_addr_t *groupaddr)
{
  130a34:	e92d4800 	push	{fp, lr}
  130a38:	e28db004 	add	fp, sp, #4
  130a3c:	e24dd010 	sub	sp, sp, #16
  130a40:	e50b0010 	str	r0, [fp, #-16]
  130a44:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct igmp_group *group;

  /* make sure it is multicast address */
  LWIP_ERROR("igmp_joingroup_netif: attempt to join non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
  130a48:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  130a4c:	e5933000 	ldr	r3, [r3]
  130a50:	e20330f0 	and	r3, r3, #240	; 0xf0
  130a54:	e35300e0 	cmp	r3, #224	; 0xe0
  130a58:	0a000008 	beq	130a80 <igmp_joingroup_netif+0x4c>
  130a5c:	e309085c 	movw	r0, #39004	; 0x985c
  130a60:	e3400014 	movt	r0, #20
  130a64:	ebff49aa 	bl	103114 <rt_kprintf>
  130a68:	e30011eb 	movw	r1, #491	; 0x1eb
  130a6c:	e3090744 	movw	r0, #38724	; 0x9744
  130a70:	e3400014 	movt	r0, #20
  130a74:	ebff697a 	bl	10b064 <sys_arch_assert>
  130a78:	e3e03005 	mvn	r3, #5
  130a7c:	ea000051 	b	130bc8 <igmp_joingroup_netif+0x194>
  LWIP_ERROR("igmp_joingroup_netif: attempt to join allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
  130a80:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  130a84:	e5932000 	ldr	r2, [r3]
  130a88:	e30f3bc8 	movw	r3, #64456	; 0xfbc8
  130a8c:	e3403014 	movt	r3, #20
  130a90:	e5933000 	ldr	r3, [r3]
  130a94:	e1520003 	cmp	r2, r3
  130a98:	1a000008 	bne	130ac0 <igmp_joingroup_netif+0x8c>
  130a9c:	e3090898 	movw	r0, #39064	; 0x9898
  130aa0:	e3400014 	movt	r0, #20
  130aa4:	ebff499a 	bl	103114 <rt_kprintf>
  130aa8:	e3a01f7b 	mov	r1, #492	; 0x1ec
  130aac:	e3090744 	movw	r0, #38724	; 0x9744
  130ab0:	e3400014 	movt	r0, #20
  130ab4:	ebff696a 	bl	10b064 <sys_arch_assert>
  130ab8:	e3e03005 	mvn	r3, #5
  130abc:	ea000041 	b	130bc8 <igmp_joingroup_netif+0x194>

  /* make sure it is an igmp-enabled netif */
  LWIP_ERROR("igmp_joingroup_netif: attempt to join on non-IGMP netif", netif->flags & NETIF_FLAG_IGMP, return ERR_VAL;);
  130ac0:	e51b3010 	ldr	r3, [fp, #-16]
  130ac4:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  130ac8:	e2033020 	and	r3, r3, #32
  130acc:	e3530000 	cmp	r3, #0
  130ad0:	1a000008 	bne	130af8 <igmp_joingroup_netif+0xc4>
  130ad4:	e30908d4 	movw	r0, #39124	; 0x98d4
  130ad8:	e3400014 	movt	r0, #20
  130adc:	ebff498c 	bl	103114 <rt_kprintf>
  130ae0:	e30011ef 	movw	r1, #495	; 0x1ef
  130ae4:	e3090744 	movw	r0, #38724	; 0x9744
  130ae8:	e3400014 	movt	r0, #20
  130aec:	ebff695c 	bl	10b064 <sys_arch_assert>
  130af0:	e3e03005 	mvn	r3, #5
  130af4:	ea000033 	b	130bc8 <igmp_joingroup_netif+0x194>

  /* find group or create a new one if not found */
  group = igmp_lookup_group(netif, groupaddr);
  130af8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  130afc:	e51b0010 	ldr	r0, [fp, #-16]
  130b00:	ebfffe0c 	bl	130338 <igmp_lookup_group>
  130b04:	e50b0008 	str	r0, [fp, #-8]

  if (group != NULL) {
  130b08:	e51b3008 	ldr	r3, [fp, #-8]
  130b0c:	e3530000 	cmp	r3, #0
  130b10:	0a00002b 	beq	130bc4 <igmp_joingroup_netif+0x190>
    /* This should create a new group, check the state to make sure */
    if (group->group_state != IGMP_GROUP_NON_MEMBER) {
  130b14:	e51b3008 	ldr	r3, [fp, #-8]
  130b18:	e5d33009 	ldrb	r3, [r3, #9]
  130b1c:	e3530000 	cmp	r3, #0
  130b20:	1a00001f 	bne	130ba4 <igmp_joingroup_netif+0x170>
      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_joingroup_netif: join to new group: "));
      ip4_addr_debug_print(IGMP_DEBUG, groupaddr);
      LWIP_DEBUGF(IGMP_DEBUG, ("\n"));

      /* If first use of the group, allow the group at the MAC level */
      if ((group->use==0) && (netif->igmp_mac_filter != NULL)) {
  130b24:	e51b3008 	ldr	r3, [fp, #-8]
  130b28:	e5d3300c 	ldrb	r3, [r3, #12]
  130b2c:	e3530000 	cmp	r3, #0
  130b30:	1a000009 	bne	130b5c <igmp_joingroup_netif+0x128>
  130b34:	e51b3010 	ldr	r3, [fp, #-16]
  130b38:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  130b3c:	e3530000 	cmp	r3, #0
  130b40:	0a000005 	beq	130b5c <igmp_joingroup_netif+0x128>
        LWIP_DEBUGF(IGMP_DEBUG, ("igmp_joingroup_netif: igmp_mac_filter(ADD "));
        ip4_addr_debug_print(IGMP_DEBUG, groupaddr);
        LWIP_DEBUGF(IGMP_DEBUG, (") on if %p\n", (void*)netif));
        netif->igmp_mac_filter(netif, groupaddr, NETIF_ADD_MAC_FILTER);
  130b44:	e51b3010 	ldr	r3, [fp, #-16]
  130b48:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  130b4c:	e3a02001 	mov	r2, #1
  130b50:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  130b54:	e51b0010 	ldr	r0, [fp, #-16]
  130b58:	e12fff33 	blx	r3
      }

      IGMP_STATS_INC(igmp.tx_join);
  130b5c:	e3063840 	movw	r3, #26688	; 0x6840
  130b60:	e3403057 	movt	r3, #87	; 0x57
  130b64:	e1d338be 	ldrh	r3, [r3, #142]	; 0x8e
  130b68:	e2833001 	add	r3, r3, #1
  130b6c:	e6ff2073 	uxth	r2, r3
  130b70:	e3063840 	movw	r3, #26688	; 0x6840
  130b74:	e3403057 	movt	r3, #87	; 0x57
  130b78:	e1c328be 	strh	r2, [r3, #142]	; 0x8e
      igmp_send(netif, group, IGMP_V2_MEMB_REPORT);
  130b7c:	e3a02016 	mov	r2, #22
  130b80:	e51b1008 	ldr	r1, [fp, #-8]
  130b84:	e51b0010 	ldr	r0, [fp, #-16]
  130b88:	eb000180 	bl	131190 <igmp_send>

      igmp_start_timer(group, IGMP_JOIN_DELAYING_MEMBER_TMR);
  130b8c:	e3a01005 	mov	r1, #5
  130b90:	e51b0008 	ldr	r0, [fp, #-8]
  130b94:	eb000116 	bl	130ff4 <igmp_start_timer>

      /* Need to work out where this timer comes from */
      group->group_state = IGMP_GROUP_DELAYING_MEMBER;
  130b98:	e51b3008 	ldr	r3, [fp, #-8]
  130b9c:	e3a02001 	mov	r2, #1
  130ba0:	e5c32009 	strb	r2, [r3, #9]
    }
    /* Increment group use */
    group->use++;
  130ba4:	e51b3008 	ldr	r3, [fp, #-8]
  130ba8:	e5d3300c 	ldrb	r3, [r3, #12]
  130bac:	e2833001 	add	r3, r3, #1
  130bb0:	e6ef2073 	uxtb	r2, r3
  130bb4:	e51b3008 	ldr	r3, [fp, #-8]
  130bb8:	e5c3200c 	strb	r2, [r3, #12]
    /* Join on this interface */
    return ERR_OK;
  130bbc:	e3a03000 	mov	r3, #0
  130bc0:	ea000000 	b	130bc8 <igmp_joingroup_netif+0x194>
  } else {
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_joingroup_netif: Not enough memory to join to group\n"));
    return ERR_MEM;
  130bc4:	e3e03000 	mvn	r3, #0
  }
}
  130bc8:	e1a00003 	mov	r0, r3
  130bcc:	e24bd004 	sub	sp, fp, #4
  130bd0:	e8bd8800 	pop	{fp, pc}

00130bd4 <igmp_leavegroup>:
 * @param groupaddr the ip address of the group which to leave
 * @return ERR_OK if group was left on the netif(s), an err_t otherwise
 */
err_t
igmp_leavegroup(const ip4_addr_t *ifaddr, const ip4_addr_t *groupaddr)
{
  130bd4:	e92d4800 	push	{fp, lr}
  130bd8:	e28db004 	add	fp, sp, #4
  130bdc:	e24dd018 	sub	sp, sp, #24
  130be0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  130be4:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  err_t err = ERR_VAL; /* no matching interface */
  130be8:	e3e03005 	mvn	r3, #5
  130bec:	e54b3005 	strb	r3, [fp, #-5]
  struct netif *netif;

  /* make sure it is multicast address */
  LWIP_ERROR("igmp_leavegroup: attempt to leave non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
  130bf0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  130bf4:	e5933000 	ldr	r3, [r3]
  130bf8:	e20330f0 	and	r3, r3, #240	; 0xf0
  130bfc:	e35300e0 	cmp	r3, #224	; 0xe0
  130c00:	0a000008 	beq	130c28 <igmp_leavegroup+0x54>
  130c04:	e309090c 	movw	r0, #39180	; 0x990c
  130c08:	e3400014 	movt	r0, #20
  130c0c:	ebff4940 	bl	103114 <rt_kprintf>
  130c10:	e3001227 	movw	r1, #551	; 0x227
  130c14:	e3090744 	movw	r0, #38724	; 0x9744
  130c18:	e3400014 	movt	r0, #20
  130c1c:	ebff6910 	bl	10b064 <sys_arch_assert>
  130c20:	e3e03005 	mvn	r3, #5
  130c24:	ea000038 	b	130d0c <igmp_leavegroup+0x138>
  LWIP_ERROR("igmp_leavegroup: attempt to leave allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
  130c28:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  130c2c:	e5932000 	ldr	r2, [r3]
  130c30:	e30f3bc8 	movw	r3, #64456	; 0xfbc8
  130c34:	e3403014 	movt	r3, #20
  130c38:	e5933000 	ldr	r3, [r3]
  130c3c:	e1520003 	cmp	r2, r3
  130c40:	1a000008 	bne	130c68 <igmp_leavegroup+0x94>
  130c44:	e3090944 	movw	r0, #39236	; 0x9944
  130c48:	e3400014 	movt	r0, #20
  130c4c:	ebff4930 	bl	103114 <rt_kprintf>
  130c50:	e3a01f8a 	mov	r1, #552	; 0x228
  130c54:	e3090744 	movw	r0, #38724	; 0x9744
  130c58:	e3400014 	movt	r0, #20
  130c5c:	ebff6900 	bl	10b064 <sys_arch_assert>
  130c60:	e3e03005 	mvn	r3, #5
  130c64:	ea000028 	b	130d0c <igmp_leavegroup+0x138>

  /* loop through netif's */
  netif = netif_list;
  130c68:	e3063834 	movw	r3, #26676	; 0x6834
  130c6c:	e3403057 	movt	r3, #87	; 0x57
  130c70:	e5933000 	ldr	r3, [r3]
  130c74:	e50b300c 	str	r3, [fp, #-12]
  while (netif != NULL) {
  130c78:	ea00001f 	b	130cfc <igmp_leavegroup+0x128>
    /* Should we leave this interface ? */
    if ((netif->flags & NETIF_FLAG_IGMP) && ((ip4_addr_isany(ifaddr) || ip4_addr_cmp(netif_ip4_addr(netif), ifaddr)))) {
  130c7c:	e51b300c 	ldr	r3, [fp, #-12]
  130c80:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  130c84:	e2033020 	and	r3, r3, #32
  130c88:	e3530000 	cmp	r3, #0
  130c8c:	0a000017 	beq	130cf0 <igmp_leavegroup+0x11c>
  130c90:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  130c94:	e3530000 	cmp	r3, #0
  130c98:	0a00000a 	beq	130cc8 <igmp_leavegroup+0xf4>
  130c9c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  130ca0:	e5933000 	ldr	r3, [r3]
  130ca4:	e3530000 	cmp	r3, #0
  130ca8:	0a000006 	beq	130cc8 <igmp_leavegroup+0xf4>
  130cac:	e51b300c 	ldr	r3, [fp, #-12]
  130cb0:	e2833004 	add	r3, r3, #4
  130cb4:	e5932000 	ldr	r2, [r3]
  130cb8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  130cbc:	e5933000 	ldr	r3, [r3]
  130cc0:	e1520003 	cmp	r2, r3
  130cc4:	1a000009 	bne	130cf0 <igmp_leavegroup+0x11c>
      err_t res = igmp_leavegroup_netif(netif, groupaddr);
  130cc8:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  130ccc:	e51b000c 	ldr	r0, [fp, #-12]
  130cd0:	eb000010 	bl	130d18 <igmp_leavegroup_netif>
  130cd4:	e1a03000 	mov	r3, r0
  130cd8:	e54b300d 	strb	r3, [fp, #-13]
      if (err != ERR_OK) {
  130cdc:	e15b30d5 	ldrsb	r3, [fp, #-5]
  130ce0:	e3530000 	cmp	r3, #0
  130ce4:	0a000001 	beq	130cf0 <igmp_leavegroup+0x11c>
        /* Store this result if we have not yet gotten a success */
        err = res;
  130ce8:	e55b300d 	ldrb	r3, [fp, #-13]
  130cec:	e54b3005 	strb	r3, [fp, #-5]
      }
    }
    /* proceed to next network interface */
    netif = netif->next;
  130cf0:	e51b300c 	ldr	r3, [fp, #-12]
  130cf4:	e5933000 	ldr	r3, [r3]
  130cf8:	e50b300c 	str	r3, [fp, #-12]
  while (netif != NULL) {
  130cfc:	e51b300c 	ldr	r3, [fp, #-12]
  130d00:	e3530000 	cmp	r3, #0
  130d04:	1affffdc 	bne	130c7c <igmp_leavegroup+0xa8>
  }

  return err;
  130d08:	e15b30d5 	ldrsb	r3, [fp, #-5]
}
  130d0c:	e1a00003 	mov	r0, r3
  130d10:	e24bd004 	sub	sp, fp, #4
  130d14:	e8bd8800 	pop	{fp, pc}

00130d18 <igmp_leavegroup_netif>:
 * @param groupaddr the ip address of the group which to leave
 * @return ERR_OK if group was left on the netif, an err_t otherwise
 */
err_t
igmp_leavegroup_netif(struct netif *netif, const ip4_addr_t *groupaddr)
{
  130d18:	e92d4800 	push	{fp, lr}
  130d1c:	e28db004 	add	fp, sp, #4
  130d20:	e24dd010 	sub	sp, sp, #16
  130d24:	e50b0010 	str	r0, [fp, #-16]
  130d28:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  struct igmp_group *group;

  /* make sure it is multicast address */
  LWIP_ERROR("igmp_leavegroup_netif: attempt to leave non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
  130d2c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  130d30:	e5933000 	ldr	r3, [r3]
  130d34:	e20330f0 	and	r3, r3, #240	; 0xf0
  130d38:	e35300e0 	cmp	r3, #224	; 0xe0
  130d3c:	0a000008 	beq	130d64 <igmp_leavegroup_netif+0x4c>
  130d40:	e309097c 	movw	r0, #39292	; 0x997c
  130d44:	e3400014 	movt	r0, #20
  130d48:	ebff48f1 	bl	103114 <rt_kprintf>
  130d4c:	e300124a 	movw	r1, #586	; 0x24a
  130d50:	e3090744 	movw	r0, #38724	; 0x9744
  130d54:	e3400014 	movt	r0, #20
  130d58:	ebff68c1 	bl	10b064 <sys_arch_assert>
  130d5c:	e3e03005 	mvn	r3, #5
  130d60:	ea000052 	b	130eb0 <igmp_leavegroup_netif+0x198>
  LWIP_ERROR("igmp_leavegroup_netif: attempt to leave allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
  130d64:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  130d68:	e5932000 	ldr	r2, [r3]
  130d6c:	e30f3bc8 	movw	r3, #64456	; 0xfbc8
  130d70:	e3403014 	movt	r3, #20
  130d74:	e5933000 	ldr	r3, [r3]
  130d78:	e1520003 	cmp	r2, r3
  130d7c:	1a000008 	bne	130da4 <igmp_leavegroup_netif+0x8c>
  130d80:	e30909bc 	movw	r0, #39356	; 0x99bc
  130d84:	e3400014 	movt	r0, #20
  130d88:	ebff48e1 	bl	103114 <rt_kprintf>
  130d8c:	e300124b 	movw	r1, #587	; 0x24b
  130d90:	e3090744 	movw	r0, #38724	; 0x9744
  130d94:	e3400014 	movt	r0, #20
  130d98:	ebff68b1 	bl	10b064 <sys_arch_assert>
  130d9c:	e3e03005 	mvn	r3, #5
  130da0:	ea000042 	b	130eb0 <igmp_leavegroup_netif+0x198>

  /* make sure it is an igmp-enabled netif */
  LWIP_ERROR("igmp_leavegroup_netif: attempt to leave on non-IGMP netif", netif->flags & NETIF_FLAG_IGMP, return ERR_VAL;);
  130da4:	e51b3010 	ldr	r3, [fp, #-16]
  130da8:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  130dac:	e2033020 	and	r3, r3, #32
  130db0:	e3530000 	cmp	r3, #0
  130db4:	1a000008 	bne	130ddc <igmp_leavegroup_netif+0xc4>
  130db8:	e30909f8 	movw	r0, #39416	; 0x99f8
  130dbc:	e3400014 	movt	r0, #20
  130dc0:	ebff48d3 	bl	103114 <rt_kprintf>
  130dc4:	e300124e 	movw	r1, #590	; 0x24e
  130dc8:	e3090744 	movw	r0, #38724	; 0x9744
  130dcc:	e3400014 	movt	r0, #20
  130dd0:	ebff68a3 	bl	10b064 <sys_arch_assert>
  130dd4:	e3e03005 	mvn	r3, #5
  130dd8:	ea000034 	b	130eb0 <igmp_leavegroup_netif+0x198>

  /* find group */
  group = igmp_lookfor_group(netif, groupaddr);
  130ddc:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  130de0:	e51b0010 	ldr	r0, [fp, #-16]
  130de4:	ebfffd37 	bl	1302c8 <igmp_lookfor_group>
  130de8:	e50b0008 	str	r0, [fp, #-8]

  if (group != NULL) {
  130dec:	e51b3008 	ldr	r3, [fp, #-8]
  130df0:	e3530000 	cmp	r3, #0
  130df4:	0a00002c 	beq	130eac <igmp_leavegroup_netif+0x194>
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_leavegroup_netif: Leaving group: "));
    ip4_addr_debug_print(IGMP_DEBUG, groupaddr);
    LWIP_DEBUGF(IGMP_DEBUG, ("\n"));

    /* If there is no other use of the group */
    if (group->use <= 1) {
  130df8:	e51b3008 	ldr	r3, [fp, #-8]
  130dfc:	e5d3300c 	ldrb	r3, [r3, #12]
  130e00:	e3530001 	cmp	r3, #1
  130e04:	8a000020 	bhi	130e8c <igmp_leavegroup_netif+0x174>
      /* Remove the group from the list */
      igmp_remove_group(netif, group);
  130e08:	e51b1008 	ldr	r1, [fp, #-8]
  130e0c:	e51b0010 	ldr	r0, [fp, #-16]
  130e10:	ebfffda8 	bl	1304b8 <igmp_remove_group>

      /* If we are the last reporter for this group */
      if (group->last_reporter_flag) {
  130e14:	e51b3008 	ldr	r3, [fp, #-8]
  130e18:	e5d33008 	ldrb	r3, [r3, #8]
  130e1c:	e3530000 	cmp	r3, #0
  130e20:	0a00000b 	beq	130e54 <igmp_leavegroup_netif+0x13c>
        LWIP_DEBUGF(IGMP_DEBUG, ("igmp_leavegroup_netif: sending leaving group\n"));
        IGMP_STATS_INC(igmp.tx_leave);
  130e24:	e3063840 	movw	r3, #26688	; 0x6840
  130e28:	e3403057 	movt	r3, #87	; 0x57
  130e2c:	e1d339b0 	ldrh	r3, [r3, #144]	; 0x90
  130e30:	e2833001 	add	r3, r3, #1
  130e34:	e6ff2073 	uxth	r2, r3
  130e38:	e3063840 	movw	r3, #26688	; 0x6840
  130e3c:	e3403057 	movt	r3, #87	; 0x57
  130e40:	e1c329b0 	strh	r2, [r3, #144]	; 0x90
        igmp_send(netif, group, IGMP_LEAVE_GROUP);
  130e44:	e3a02017 	mov	r2, #23
  130e48:	e51b1008 	ldr	r1, [fp, #-8]
  130e4c:	e51b0010 	ldr	r0, [fp, #-16]
  130e50:	eb0000ce 	bl	131190 <igmp_send>
      }

      /* Disable the group at the MAC level */
      if (netif->igmp_mac_filter != NULL) {
  130e54:	e51b3010 	ldr	r3, [fp, #-16]
  130e58:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  130e5c:	e3530000 	cmp	r3, #0
  130e60:	0a000005 	beq	130e7c <igmp_leavegroup_netif+0x164>
        LWIP_DEBUGF(IGMP_DEBUG, ("igmp_leavegroup_netif: igmp_mac_filter(DEL "));
        ip4_addr_debug_print(IGMP_DEBUG, groupaddr);
        LWIP_DEBUGF(IGMP_DEBUG, (") on if %p\n", (void*)netif));
        netif->igmp_mac_filter(netif, groupaddr, NETIF_DEL_MAC_FILTER);
  130e64:	e51b3010 	ldr	r3, [fp, #-16]
  130e68:	e593307c 	ldr	r3, [r3, #124]	; 0x7c
  130e6c:	e3a02000 	mov	r2, #0
  130e70:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  130e74:	e51b0010 	ldr	r0, [fp, #-16]
  130e78:	e12fff33 	blx	r3
      }

      /* Free group struct */
      memp_free(MEMP_IGMP_GROUP, group);
  130e7c:	e51b1008 	ldr	r1, [fp, #-8]
  130e80:	e3a0000c 	mov	r0, #12
  130e84:	ebffa176 	bl	119464 <memp_free>
  130e88:	ea000005 	b	130ea4 <igmp_leavegroup_netif+0x18c>
    } else {
      /* Decrement group use */
      group->use--;
  130e8c:	e51b3008 	ldr	r3, [fp, #-8]
  130e90:	e5d3300c 	ldrb	r3, [r3, #12]
  130e94:	e2433001 	sub	r3, r3, #1
  130e98:	e6ef2073 	uxtb	r2, r3
  130e9c:	e51b3008 	ldr	r3, [fp, #-8]
  130ea0:	e5c3200c 	strb	r2, [r3, #12]
    }
    return ERR_OK;
  130ea4:	e3a03000 	mov	r3, #0
  130ea8:	ea000000 	b	130eb0 <igmp_leavegroup_netif+0x198>
  } else {
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_leavegroup_netif: not member of group\n"));
    return ERR_VAL;
  130eac:	e3e03005 	mvn	r3, #5
  }
}
  130eb0:	e1a00003 	mov	r0, r3
  130eb4:	e24bd004 	sub	sp, fp, #4
  130eb8:	e8bd8800 	pop	{fp, pc}

00130ebc <igmp_tmr>:
 * The igmp timer function (both for NO_SYS=1 and =0)
 * Should be called every IGMP_TMR_INTERVAL milliseconds (100 ms is default).
 */
void
igmp_tmr(void)
{
  130ebc:	e92d4800 	push	{fp, lr}
  130ec0:	e28db004 	add	fp, sp, #4
  130ec4:	e24dd008 	sub	sp, sp, #8
  struct netif *netif = netif_list;
  130ec8:	e3063834 	movw	r3, #26676	; 0x6834
  130ecc:	e3403057 	movt	r3, #87	; 0x57
  130ed0:	e5933000 	ldr	r3, [r3]
  130ed4:	e50b3008 	str	r3, [fp, #-8]

  while (netif != NULL) {
  130ed8:	ea00001d 	b	130f54 <igmp_tmr+0x98>
    struct igmp_group *group = netif_igmp_data(netif);
  130edc:	e51b3008 	ldr	r3, [fp, #-8]
  130ee0:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  130ee4:	e50b300c 	str	r3, [fp, #-12]

    while (group != NULL) {
  130ee8:	ea000013 	b	130f3c <igmp_tmr+0x80>
      if (group->timer > 0) {
  130eec:	e51b300c 	ldr	r3, [fp, #-12]
  130ef0:	e1d330ba 	ldrh	r3, [r3, #10]
  130ef4:	e3530000 	cmp	r3, #0
  130ef8:	0a00000c 	beq	130f30 <igmp_tmr+0x74>
        group->timer--;
  130efc:	e51b300c 	ldr	r3, [fp, #-12]
  130f00:	e1d330ba 	ldrh	r3, [r3, #10]
  130f04:	e2433001 	sub	r3, r3, #1
  130f08:	e6ff2073 	uxth	r2, r3
  130f0c:	e51b300c 	ldr	r3, [fp, #-12]
  130f10:	e1c320ba 	strh	r2, [r3, #10]
        if (group->timer == 0) {
  130f14:	e51b300c 	ldr	r3, [fp, #-12]
  130f18:	e1d330ba 	ldrh	r3, [r3, #10]
  130f1c:	e3530000 	cmp	r3, #0
  130f20:	1a000002 	bne	130f30 <igmp_tmr+0x74>
          igmp_timeout(netif, group);
  130f24:	e51b100c 	ldr	r1, [fp, #-12]
  130f28:	e51b0008 	ldr	r0, [fp, #-8]
  130f2c:	eb00000e 	bl	130f6c <igmp_timeout>
        }
      }
      group = group->next;
  130f30:	e51b300c 	ldr	r3, [fp, #-12]
  130f34:	e5933000 	ldr	r3, [r3]
  130f38:	e50b300c 	str	r3, [fp, #-12]
    while (group != NULL) {
  130f3c:	e51b300c 	ldr	r3, [fp, #-12]
  130f40:	e3530000 	cmp	r3, #0
  130f44:	1affffe8 	bne	130eec <igmp_tmr+0x30>
    }
    netif = netif->next;
  130f48:	e51b3008 	ldr	r3, [fp, #-8]
  130f4c:	e5933000 	ldr	r3, [r3]
  130f50:	e50b3008 	str	r3, [fp, #-8]
  while (netif != NULL) {
  130f54:	e51b3008 	ldr	r3, [fp, #-8]
  130f58:	e3530000 	cmp	r3, #0
  130f5c:	1affffde 	bne	130edc <igmp_tmr+0x20>
  }
}
  130f60:	e320f000 	nop	{0}
  130f64:	e24bd004 	sub	sp, fp, #4
  130f68:	e8bd8800 	pop	{fp, pc}

00130f6c <igmp_timeout>:
 *
 * @param group an igmp_group for which a timeout is reached
 */
static void
igmp_timeout(struct netif *netif, struct igmp_group *group)
{
  130f6c:	e92d4800 	push	{fp, lr}
  130f70:	e28db004 	add	fp, sp, #4
  130f74:	e24dd008 	sub	sp, sp, #8
  130f78:	e50b0008 	str	r0, [fp, #-8]
  130f7c:	e50b100c 	str	r1, [fp, #-12]
  /* If the state is IGMP_GROUP_DELAYING_MEMBER then we send a report for this group
     (unless it is the allsystems group) */
  if ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
  130f80:	e51b300c 	ldr	r3, [fp, #-12]
  130f84:	e5d33009 	ldrb	r3, [r3, #9]
  130f88:	e3530001 	cmp	r3, #1
  130f8c:	1a000015 	bne	130fe8 <igmp_timeout+0x7c>
      (!(ip4_addr_cmp(&(group->group_address), &allsystems)))) {
  130f90:	e51b300c 	ldr	r3, [fp, #-12]
  130f94:	e5932004 	ldr	r2, [r3, #4]
  130f98:	e30f3bc8 	movw	r3, #64456	; 0xfbc8
  130f9c:	e3403014 	movt	r3, #20
  130fa0:	e5933000 	ldr	r3, [r3]
  if ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
  130fa4:	e1520003 	cmp	r2, r3
  130fa8:	0a00000e 	beq	130fe8 <igmp_timeout+0x7c>
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_timeout: report membership for group with address "));
    ip4_addr_debug_print(IGMP_DEBUG, &(group->group_address));
    LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", (void*)netif));

    group->group_state = IGMP_GROUP_IDLE_MEMBER;
  130fac:	e51b300c 	ldr	r3, [fp, #-12]
  130fb0:	e3a02002 	mov	r2, #2
  130fb4:	e5c32009 	strb	r2, [r3, #9]
    
    IGMP_STATS_INC(igmp.tx_report);
  130fb8:	e3063840 	movw	r3, #26688	; 0x6840
  130fbc:	e3403057 	movt	r3, #87	; 0x57
  130fc0:	e1d339b2 	ldrh	r3, [r3, #146]	; 0x92
  130fc4:	e2833001 	add	r3, r3, #1
  130fc8:	e6ff2073 	uxth	r2, r3
  130fcc:	e3063840 	movw	r3, #26688	; 0x6840
  130fd0:	e3403057 	movt	r3, #87	; 0x57
  130fd4:	e1c329b2 	strh	r2, [r3, #146]	; 0x92
    igmp_send(netif, group, IGMP_V2_MEMB_REPORT);
  130fd8:	e3a02016 	mov	r2, #22
  130fdc:	e51b100c 	ldr	r1, [fp, #-12]
  130fe0:	e51b0008 	ldr	r0, [fp, #-8]
  130fe4:	eb000069 	bl	131190 <igmp_send>
  }
}
  130fe8:	e320f000 	nop	{0}
  130fec:	e24bd004 	sub	sp, fp, #4
  130ff0:	e8bd8800 	pop	{fp, pc}

00130ff4 <igmp_start_timer>:
 * @param max_time the time in multiples of IGMP_TMR_INTERVAL (decrease with
 *        every call to igmp_tmr())
 */
static void
igmp_start_timer(struct igmp_group *group, u8_t max_time)
{
  130ff4:	e92d4800 	push	{fp, lr}
  130ff8:	e28db004 	add	fp, sp, #4
  130ffc:	e24dd008 	sub	sp, sp, #8
  131000:	e50b0008 	str	r0, [fp, #-8]
  131004:	e1a03001 	mov	r3, r1
  131008:	e54b3009 	strb	r3, [fp, #-9]
#ifdef LWIP_RAND
  group->timer = max_time > 2 ? (LWIP_RAND() % max_time) : 1;
  13100c:	e55b3009 	ldrb	r3, [fp, #-9]
  131010:	e3530002 	cmp	r3, #2
  131014:	9a000008 	bls	13103c <igmp_start_timer+0x48>
  131018:	eb0034d5 	bl	13e374 <rand>
  13101c:	e1a02000 	mov	r2, r0
  131020:	e55b3009 	ldrb	r3, [fp, #-9]
  131024:	e1a01003 	mov	r1, r3
  131028:	e1a00002 	mov	r0, r2
  13102c:	eb001f95 	bl	138e88 <__aeabi_idivmod>
  131030:	e1a03001 	mov	r3, r1
  131034:	e6ff3073 	uxth	r3, r3
  131038:	ea000000 	b	131040 <igmp_start_timer+0x4c>
  13103c:	e3a03001 	mov	r3, #1
  131040:	e51b2008 	ldr	r2, [fp, #-8]
  131044:	e1c230ba 	strh	r3, [r2, #10]
#else /* LWIP_RAND */
  /* ATTENTION: use this only if absolutely necessary! */
  group->timer = max_time / 2;
#endif /* LWIP_RAND */

  if (group->timer == 0) {
  131048:	e51b3008 	ldr	r3, [fp, #-8]
  13104c:	e1d330ba 	ldrh	r3, [r3, #10]
  131050:	e3530000 	cmp	r3, #0
  131054:	1a000002 	bne	131064 <igmp_start_timer+0x70>
    group->timer = 1;
  131058:	e51b3008 	ldr	r3, [fp, #-8]
  13105c:	e3a02001 	mov	r2, #1
  131060:	e1c320ba 	strh	r2, [r3, #10]
  }
}
  131064:	e320f000 	nop	{0}
  131068:	e24bd004 	sub	sp, fp, #4
  13106c:	e8bd8800 	pop	{fp, pc}

00131070 <igmp_delaying_member>:
 * @param group the igmp_group for which "delaying" membership report
 * @param maxresp query delay
 */
static void
igmp_delaying_member(struct igmp_group *group, u8_t maxresp)
{
  131070:	e92d4800 	push	{fp, lr}
  131074:	e28db004 	add	fp, sp, #4
  131078:	e24dd008 	sub	sp, sp, #8
  13107c:	e50b0008 	str	r0, [fp, #-8]
  131080:	e1a03001 	mov	r3, r1
  131084:	e54b3009 	strb	r3, [fp, #-9]
  if ((group->group_state == IGMP_GROUP_IDLE_MEMBER) ||
  131088:	e51b3008 	ldr	r3, [fp, #-8]
  13108c:	e5d33009 	ldrb	r3, [r3, #9]
  131090:	e3530002 	cmp	r3, #2
  131094:	0a00000d 	beq	1310d0 <igmp_delaying_member+0x60>
     ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
  131098:	e51b3008 	ldr	r3, [fp, #-8]
  13109c:	e5d33009 	ldrb	r3, [r3, #9]
  if ((group->group_state == IGMP_GROUP_IDLE_MEMBER) ||
  1310a0:	e3530001 	cmp	r3, #1
  1310a4:	1a000010 	bne	1310ec <igmp_delaying_member+0x7c>
      ((group->timer == 0) || (maxresp < group->timer)))) {
  1310a8:	e51b3008 	ldr	r3, [fp, #-8]
  1310ac:	e1d330ba 	ldrh	r3, [r3, #10]
     ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
  1310b0:	e3530000 	cmp	r3, #0
  1310b4:	0a000005 	beq	1310d0 <igmp_delaying_member+0x60>
      ((group->timer == 0) || (maxresp < group->timer)))) {
  1310b8:	e55b3009 	ldrb	r3, [fp, #-9]
  1310bc:	e6ff2073 	uxth	r2, r3
  1310c0:	e51b3008 	ldr	r3, [fp, #-8]
  1310c4:	e1d330ba 	ldrh	r3, [r3, #10]
  1310c8:	e1520003 	cmp	r2, r3
  1310cc:	2a000006 	bcs	1310ec <igmp_delaying_member+0x7c>
    igmp_start_timer(group, maxresp);
  1310d0:	e55b3009 	ldrb	r3, [fp, #-9]
  1310d4:	e1a01003 	mov	r1, r3
  1310d8:	e51b0008 	ldr	r0, [fp, #-8]
  1310dc:	ebffffc4 	bl	130ff4 <igmp_start_timer>
    group->group_state = IGMP_GROUP_DELAYING_MEMBER;
  1310e0:	e51b3008 	ldr	r3, [fp, #-8]
  1310e4:	e3a02001 	mov	r2, #1
  1310e8:	e5c32009 	strb	r2, [r3, #9]
  }
}
  1310ec:	e320f000 	nop	{0}
  1310f0:	e24bd004 	sub	sp, fp, #4
  1310f4:	e8bd8800 	pop	{fp, pc}

001310f8 <igmp_ip_output_if>:
 *         ERR_BUF if p doesn't have enough space for IP/LINK headers
 *         returns errors returned by netif->output
 */
static err_t
igmp_ip_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest, struct netif *netif)
{
  1310f8:	e92d4800 	push	{fp, lr}
  1310fc:	e28db004 	add	fp, sp, #4
  131100:	e24dd030 	sub	sp, sp, #48	; 0x30
  131104:	e50b0010 	str	r0, [fp, #-16]
  131108:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  13110c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  131110:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  /* This is the "router alert" option */
  u16_t ra[2];
  ra[0] = PP_HTONS(ROUTER_ALERT);
  131114:	e3003494 	movw	r3, #1172	; 0x494
  131118:	e14b30b8 	strh	r3, [fp, #-8]
  ra[1] = 0x0000; /* Router shall examine packet */
  13111c:	e3a03000 	mov	r3, #0
  131120:	e14b30b6 	strh	r3, [fp, #-6]
  IGMP_STATS_INC(igmp.xmit);
  131124:	e3063840 	movw	r3, #26688	; 0x6840
  131128:	e3403057 	movt	r3, #87	; 0x57
  13112c:	e1d337b8 	ldrh	r3, [r3, #120]	; 0x78
  131130:	e2833001 	add	r3, r3, #1
  131134:	e6ff2073 	uxth	r2, r3
  131138:	e3063840 	movw	r3, #26688	; 0x6840
  13113c:	e3403057 	movt	r3, #87	; 0x57
  131140:	e1c327b8 	strh	r2, [r3, #120]	; 0x78
  return ip4_output_if_opt(p, src, dest, IGMP_TTL, 0, IP_PROTO_IGMP, netif, ra, ROUTER_ALERTLEN);
  131144:	e3a03004 	mov	r3, #4
  131148:	e58d3010 	str	r3, [sp, #16]
  13114c:	e24b3008 	sub	r3, fp, #8
  131150:	e58d300c 	str	r3, [sp, #12]
  131154:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  131158:	e58d3008 	str	r3, [sp, #8]
  13115c:	e3a03002 	mov	r3, #2
  131160:	e58d3004 	str	r3, [sp, #4]
  131164:	e3a03000 	mov	r3, #0
  131168:	e58d3000 	str	r3, [sp]
  13116c:	e3a03001 	mov	r3, #1
  131170:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  131174:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  131178:	e51b0010 	ldr	r0, [fp, #-16]
  13117c:	eb000371 	bl	131f48 <ip4_output_if_opt>
  131180:	e1a03000 	mov	r3, r0
}
  131184:	e1a00003 	mov	r0, r3
  131188:	e24bd004 	sub	sp, fp, #4
  13118c:	e8bd8800 	pop	{fp, pc}

00131190 <igmp_send>:
 * @param group the group to which to send the packet
 * @param type the type of igmp packet to send
 */
static void
igmp_send(struct netif *netif, struct igmp_group *group, u8_t type)
{
  131190:	e92d4800 	push	{fp, lr}
  131194:	e28db004 	add	fp, sp, #4
  131198:	e24dd020 	sub	sp, sp, #32
  13119c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1311a0:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  1311a4:	e1a03002 	mov	r3, r2
  1311a8:	e54b301d 	strb	r3, [fp, #-29]	; 0xffffffe3
  struct pbuf*     p    = NULL;
  1311ac:	e3a03000 	mov	r3, #0
  1311b0:	e50b300c 	str	r3, [fp, #-12]
  struct igmp_msg* igmp = NULL;
  1311b4:	e3a03000 	mov	r3, #0
  1311b8:	e50b3010 	str	r3, [fp, #-16]
  ip4_addr_t   src  = *IP4_ADDR_ANY4;
  1311bc:	e3093adc 	movw	r3, #39644	; 0x9adc
  1311c0:	e3403014 	movt	r3, #20
  1311c4:	e5933000 	ldr	r3, [r3]
  1311c8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  ip4_addr_t*  dest = NULL;
  1311cc:	e3a03000 	mov	r3, #0
  1311d0:	e50b3008 	str	r3, [fp, #-8]

  /* IP header + "router alert" option + IGMP header */
  p = pbuf_alloc(PBUF_TRANSPORT, IGMP_MINLEN, PBUF_RAM);
  1311d4:	e3a02000 	mov	r2, #0
  1311d8:	e3a01008 	mov	r1, #8
  1311dc:	e3a00000 	mov	r0, #0
  1311e0:	ebffa4a6 	bl	11a480 <pbuf_alloc>
  1311e4:	e50b000c 	str	r0, [fp, #-12]

  if (p) {
  1311e8:	e51b300c 	ldr	r3, [fp, #-12]
  1311ec:	e3530000 	cmp	r3, #0
  1311f0:	0a000049 	beq	13131c <igmp_send+0x18c>
    igmp = (struct igmp_msg *)p->payload;
  1311f4:	e51b300c 	ldr	r3, [fp, #-12]
  1311f8:	e5933004 	ldr	r3, [r3, #4]
  1311fc:	e50b3010 	str	r3, [fp, #-16]
    LWIP_ASSERT("igmp_send: check that first pbuf can hold struct igmp_msg",
  131200:	e51b300c 	ldr	r3, [fp, #-12]
  131204:	e1d330ba 	ldrh	r3, [r3, #10]
  131208:	e3530007 	cmp	r3, #7
  13120c:	8a000006 	bhi	13122c <igmp_send+0x9c>
  131210:	e3090a34 	movw	r0, #39476	; 0x9a34
  131214:	e3400014 	movt	r0, #20
  131218:	ebff47bd 	bl	103114 <rt_kprintf>
  13121c:	e3001302 	movw	r1, #770	; 0x302
  131220:	e3090744 	movw	r0, #38724	; 0x9744
  131224:	e3400014 	movt	r0, #20
  131228:	ebff678d 	bl	10b064 <sys_arch_assert>
               (p->len >= sizeof(struct igmp_msg)));
    ip4_addr_copy(src, *netif_ip4_addr(netif));
  13122c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  131230:	e2833004 	add	r3, r3, #4
  131234:	e5933000 	ldr	r3, [r3]
  131238:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

    if (type == IGMP_V2_MEMB_REPORT) {
  13123c:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  131240:	e3530016 	cmp	r3, #22
  131244:	1a00000a 	bne	131274 <igmp_send+0xe4>
      dest = &(group->group_address);
  131248:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  13124c:	e2833004 	add	r3, r3, #4
  131250:	e50b3008 	str	r3, [fp, #-8]
      ip4_addr_copy(igmp->igmp_group_address, group->group_address);
  131254:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  131258:	e5932004 	ldr	r2, [r3, #4]
  13125c:	e51b3010 	ldr	r3, [fp, #-16]
  131260:	e5832004 	str	r2, [r3, #4]
      group->last_reporter_flag = 1; /* Remember we were the last to report */
  131264:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  131268:	e3a02001 	mov	r2, #1
  13126c:	e5c32008 	strb	r2, [r3, #8]
  131270:	ea000009 	b	13129c <igmp_send+0x10c>
    } else {
      if (type == IGMP_LEAVE_GROUP) {
  131274:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  131278:	e3530017 	cmp	r3, #23
  13127c:	1a000006 	bne	13129c <igmp_send+0x10c>
        dest = &allrouters;
  131280:	e30f3bcc 	movw	r3, #64460	; 0xfbcc
  131284:	e3403014 	movt	r3, #20
  131288:	e50b3008 	str	r3, [fp, #-8]
        ip4_addr_copy(igmp->igmp_group_address, group->group_address);
  13128c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  131290:	e5932004 	ldr	r2, [r3, #4]
  131294:	e51b3010 	ldr	r3, [fp, #-16]
  131298:	e5832004 	str	r2, [r3, #4]
      }
    }

    if ((type == IGMP_V2_MEMB_REPORT) || (type == IGMP_LEAVE_GROUP)) {
  13129c:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  1312a0:	e3530016 	cmp	r3, #22
  1312a4:	0a000002 	beq	1312b4 <igmp_send+0x124>
  1312a8:	e55b301d 	ldrb	r3, [fp, #-29]	; 0xffffffe3
  1312ac:	e3530017 	cmp	r3, #23
  1312b0:	1a000016 	bne	131310 <igmp_send+0x180>
      igmp->igmp_msgtype  = type;
  1312b4:	e51b3010 	ldr	r3, [fp, #-16]
  1312b8:	e55b201d 	ldrb	r2, [fp, #-29]	; 0xffffffe3
  1312bc:	e5c32000 	strb	r2, [r3]
      igmp->igmp_maxresp  = 0;
  1312c0:	e51b3010 	ldr	r3, [fp, #-16]
  1312c4:	e3a02000 	mov	r2, #0
  1312c8:	e5c32001 	strb	r2, [r3, #1]
      igmp->igmp_checksum = 0;
  1312cc:	e51b3010 	ldr	r3, [fp, #-16]
  1312d0:	e3a02000 	mov	r2, #0
  1312d4:	e5c32002 	strb	r2, [r3, #2]
  1312d8:	e3a02000 	mov	r2, #0
  1312dc:	e5c32003 	strb	r2, [r3, #3]
      igmp->igmp_checksum = inet_chksum(igmp, IGMP_MINLEN);
  1312e0:	e3a01008 	mov	r1, #8
  1312e4:	e51b0010 	ldr	r0, [fp, #-16]
  1312e8:	ebff9e43 	bl	118bfc <inet_chksum>
  1312ec:	e1a03000 	mov	r3, r0
  1312f0:	e1a02003 	mov	r2, r3
  1312f4:	e51b3010 	ldr	r3, [fp, #-16]
  1312f8:	e1c320b2 	strh	r2, [r3, #2]

      igmp_ip_output_if(p, &src, dest, netif);
  1312fc:	e24b1014 	sub	r1, fp, #20
  131300:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  131304:	e51b2008 	ldr	r2, [fp, #-8]
  131308:	e51b000c 	ldr	r0, [fp, #-12]
  13130c:	ebffff79 	bl	1310f8 <igmp_ip_output_if>
    }

    pbuf_free(p);
  131310:	e51b000c 	ldr	r0, [fp, #-12]
  131314:	ebffa760 	bl	11b09c <pbuf_free>
  } else {
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_send: not enough memory for igmp_send\n"));
    IGMP_STATS_INC(igmp.memerr);
  }
}
  131318:	ea000007 	b	13133c <igmp_send+0x1ac>
    IGMP_STATS_INC(igmp.memerr);
  13131c:	e3063840 	movw	r3, #26688	; 0x6840
  131320:	e3403057 	movt	r3, #87	; 0x57
  131324:	e1d338b2 	ldrh	r3, [r3, #130]	; 0x82
  131328:	e2833001 	add	r3, r3, #1
  13132c:	e6ff2073 	uxth	r2, r3
  131330:	e3063840 	movw	r3, #26688	; 0x6840
  131334:	e3403057 	movt	r3, #87	; 0x57
  131338:	e1c328b2 	strh	r2, [r3, #130]	; 0x82
}
  13133c:	e320f000 	nop	{0}
  131340:	e24bd004 	sub	sp, fp, #4
  131344:	e8bd8800 	pop	{fp, pc}

00131348 <ip4_set_default_multicast_netif>:
/**
 * @ingroup ip4
 * Set a default netif for IPv4 multicast. */
void
ip4_set_default_multicast_netif(struct netif* default_multicast_netif)
{
  131348:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  13134c:	e28db000 	add	fp, sp, #0
  131350:	e24dd00c 	sub	sp, sp, #12
  131354:	e50b0008 	str	r0, [fp, #-8]
  ip4_default_multicast_netif = default_multicast_netif;
  131358:	e30f3bd4 	movw	r3, #64468	; 0xfbd4
  13135c:	e3403014 	movt	r3, #20
  131360:	e51b2008 	ldr	r2, [fp, #-8]
  131364:	e5832000 	str	r2, [r3]
}
  131368:	e320f000 	nop	{0}
  13136c:	e28bd000 	add	sp, fp, #0
  131370:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  131374:	e12fff1e 	bx	lr

00131378 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
  131378:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  13137c:	e28db000 	add	fp, sp, #0
  131380:	e24dd014 	sub	sp, sp, #20
  131384:	e50b0010 	str	r0, [fp, #-16]
  struct netif *netif;

#if LWIP_MULTICAST_TX_OPTIONS
  /* Use administratively selected interface for multicast by default */
  if (ip4_addr_ismulticast(dest) && ip4_default_multicast_netif) {
  131388:	e51b3010 	ldr	r3, [fp, #-16]
  13138c:	e5933000 	ldr	r3, [r3]
  131390:	e20330f0 	and	r3, r3, #240	; 0xf0
  131394:	e35300e0 	cmp	r3, #224	; 0xe0
  131398:	1a000008 	bne	1313c0 <ip4_route+0x48>
  13139c:	e30f3bd4 	movw	r3, #64468	; 0xfbd4
  1313a0:	e3403014 	movt	r3, #20
  1313a4:	e5933000 	ldr	r3, [r3]
  1313a8:	e3530000 	cmp	r3, #0
  1313ac:	0a000003 	beq	1313c0 <ip4_route+0x48>
    return ip4_default_multicast_netif;
  1313b0:	e30f3bd4 	movw	r3, #64468	; 0xfbd4
  1313b4:	e3403014 	movt	r3, #20
  1313b8:	e5933000 	ldr	r3, [r3]
  1313bc:	ea000091 	b	131608 <ip4_route+0x290>
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
  1313c0:	e3063834 	movw	r3, #26676	; 0x6834
  1313c4:	e3403057 	movt	r3, #87	; 0x57
  1313c8:	e5933000 	ldr	r3, [r3]
  1313cc:	e50b3008 	str	r3, [fp, #-8]
  1313d0:	ea000030 	b	131498 <ip4_route+0x120>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
  1313d4:	e51b3008 	ldr	r3, [fp, #-8]
  1313d8:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  1313dc:	e2033001 	and	r3, r3, #1
  1313e0:	e6ef3073 	uxtb	r3, r3
  1313e4:	e3530000 	cmp	r3, #0
  1313e8:	0a000027 	beq	13148c <ip4_route+0x114>
  1313ec:	e51b3008 	ldr	r3, [fp, #-8]
  1313f0:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  1313f4:	e1a03123 	lsr	r3, r3, #2
  1313f8:	e2033001 	and	r3, r3, #1
  1313fc:	e6ef3073 	uxtb	r3, r3
  131400:	e3530000 	cmp	r3, #0
  131404:	0a000020 	beq	13148c <ip4_route+0x114>
  131408:	e51b3008 	ldr	r3, [fp, #-8]
  13140c:	e2833004 	add	r3, r3, #4
  131410:	e5933000 	ldr	r3, [r3]
  131414:	e3530000 	cmp	r3, #0
  131418:	0a00001b 	beq	13148c <ip4_route+0x114>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
  13141c:	e51b3010 	ldr	r3, [fp, #-16]
  131420:	e5932000 	ldr	r2, [r3]
  131424:	e51b3008 	ldr	r3, [fp, #-8]
  131428:	e2833004 	add	r3, r3, #4
  13142c:	e5933000 	ldr	r3, [r3]
  131430:	e0222003 	eor	r2, r2, r3
  131434:	e51b3008 	ldr	r3, [fp, #-8]
  131438:	e2833008 	add	r3, r3, #8
  13143c:	e5933000 	ldr	r3, [r3]
  131440:	e0033002 	and	r3, r3, r2
  131444:	e3530000 	cmp	r3, #0
  131448:	1a000001 	bne	131454 <ip4_route+0xdc>
        /* return netif on which to forward IP packet */
        return netif;
  13144c:	e51b3008 	ldr	r3, [fp, #-8]
  131450:	ea00006c 	b	131608 <ip4_route+0x290>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
  131454:	e51b3008 	ldr	r3, [fp, #-8]
  131458:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  13145c:	e2033002 	and	r3, r3, #2
  131460:	e3530000 	cmp	r3, #0
  131464:	1a000008 	bne	13148c <ip4_route+0x114>
  131468:	e51b3010 	ldr	r3, [fp, #-16]
  13146c:	e5932000 	ldr	r2, [r3]
  131470:	e51b3008 	ldr	r3, [fp, #-8]
  131474:	e283300c 	add	r3, r3, #12
  131478:	e5933000 	ldr	r3, [r3]
  13147c:	e1520003 	cmp	r2, r3
  131480:	1a000001 	bne	13148c <ip4_route+0x114>
        /* return netif on which to forward IP packet */
        return netif;
  131484:	e51b3008 	ldr	r3, [fp, #-8]
  131488:	ea00005e 	b	131608 <ip4_route+0x290>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
  13148c:	e51b3008 	ldr	r3, [fp, #-8]
  131490:	e5933000 	ldr	r3, [r3]
  131494:	e50b3008 	str	r3, [fp, #-8]
  131498:	e51b3008 	ldr	r3, [fp, #-8]
  13149c:	e3530000 	cmp	r3, #0
  1314a0:	1affffcb 	bne	1313d4 <ip4_route+0x5c>
    }
  }

#if LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF
  /* loopif is disabled, looopback traffic is passed through any netif */
  if (ip4_addr_isloopback(dest)) {
  1314a4:	e51b3010 	ldr	r3, [fp, #-16]
  1314a8:	e5933000 	ldr	r3, [r3]
  1314ac:	e6ef3073 	uxtb	r3, r3
  1314b0:	e353007f 	cmp	r3, #127	; 0x7f
  1314b4:	1a000025 	bne	131550 <ip4_route+0x1d8>
    /* don't check for link on loopback traffic */
    if (netif_default != NULL && netif_is_up(netif_default)) {
  1314b8:	e3063838 	movw	r3, #26680	; 0x6838
  1314bc:	e3403057 	movt	r3, #87	; 0x57
  1314c0:	e5933000 	ldr	r3, [r3]
  1314c4:	e3530000 	cmp	r3, #0
  1314c8:	0a00000b 	beq	1314fc <ip4_route+0x184>
  1314cc:	e3063838 	movw	r3, #26680	; 0x6838
  1314d0:	e3403057 	movt	r3, #87	; 0x57
  1314d4:	e5933000 	ldr	r3, [r3]
  1314d8:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  1314dc:	e2033001 	and	r3, r3, #1
  1314e0:	e6ef3073 	uxtb	r3, r3
  1314e4:	e3530000 	cmp	r3, #0
  1314e8:	0a000003 	beq	1314fc <ip4_route+0x184>
      return netif_default;
  1314ec:	e3063838 	movw	r3, #26680	; 0x6838
  1314f0:	e3403057 	movt	r3, #87	; 0x57
  1314f4:	e5933000 	ldr	r3, [r3]
  1314f8:	ea000042 	b	131608 <ip4_route+0x290>
    }
    /* default netif is not up, just use any netif for loopback traffic */
    for (netif = netif_list; netif != NULL; netif = netif->next) {
  1314fc:	e3063834 	movw	r3, #26676	; 0x6834
  131500:	e3403057 	movt	r3, #87	; 0x57
  131504:	e5933000 	ldr	r3, [r3]
  131508:	e50b3008 	str	r3, [fp, #-8]
  13150c:	ea00000a 	b	13153c <ip4_route+0x1c4>
      if (netif_is_up(netif)) {
  131510:	e51b3008 	ldr	r3, [fp, #-8]
  131514:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  131518:	e2033001 	and	r3, r3, #1
  13151c:	e6ef3073 	uxtb	r3, r3
  131520:	e3530000 	cmp	r3, #0
  131524:	0a000001 	beq	131530 <ip4_route+0x1b8>
        return netif;
  131528:	e51b3008 	ldr	r3, [fp, #-8]
  13152c:	ea000035 	b	131608 <ip4_route+0x290>
    for (netif = netif_list; netif != NULL; netif = netif->next) {
  131530:	e51b3008 	ldr	r3, [fp, #-8]
  131534:	e5933000 	ldr	r3, [r3]
  131538:	e50b3008 	str	r3, [fp, #-8]
  13153c:	e51b3008 	ldr	r3, [fp, #-8]
  131540:	e3530000 	cmp	r3, #0
  131544:	1afffff1 	bne	131510 <ip4_route+0x198>
      }
    }
    return NULL;
  131548:	e3a03000 	mov	r3, #0
  13154c:	ea00002d 	b	131608 <ip4_route+0x290>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
  131550:	e3063838 	movw	r3, #26680	; 0x6838
  131554:	e3403057 	movt	r3, #87	; 0x57
  131558:	e5933000 	ldr	r3, [r3]
  13155c:	e3530000 	cmp	r3, #0
  131560:	0a000014 	beq	1315b8 <ip4_route+0x240>
  131564:	e3063838 	movw	r3, #26680	; 0x6838
  131568:	e3403057 	movt	r3, #87	; 0x57
  13156c:	e5933000 	ldr	r3, [r3]
  131570:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  131574:	e2033001 	and	r3, r3, #1
  131578:	e3530000 	cmp	r3, #0
  13157c:	0a00000d 	beq	1315b8 <ip4_route+0x240>
  131580:	e3063838 	movw	r3, #26680	; 0x6838
  131584:	e3403057 	movt	r3, #87	; 0x57
  131588:	e5933000 	ldr	r3, [r3]
  13158c:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  131590:	e2033004 	and	r3, r3, #4
  131594:	e3530000 	cmp	r3, #0
  131598:	0a000006 	beq	1315b8 <ip4_route+0x240>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
  13159c:	e3063838 	movw	r3, #26680	; 0x6838
  1315a0:	e3403057 	movt	r3, #87	; 0x57
  1315a4:	e5933000 	ldr	r3, [r3]
  1315a8:	e2833004 	add	r3, r3, #4
  1315ac:	e5933000 	ldr	r3, [r3]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
  1315b0:	e3530000 	cmp	r3, #0
  1315b4:	1a000010 	bne	1315fc <ip4_route+0x284>
    /* No matching netif found and default netif is not usable.
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
  1315b8:	e3063840 	movw	r3, #26688	; 0x6840
  1315bc:	e3403057 	movt	r3, #87	; 0x57
  1315c0:	e1d335b6 	ldrh	r3, [r3, #86]	; 0x56
  1315c4:	e2833001 	add	r3, r3, #1
  1315c8:	e6ff2073 	uxth	r2, r3
  1315cc:	e3063840 	movw	r3, #26688	; 0x6840
  1315d0:	e3403057 	movt	r3, #87	; 0x57
  1315d4:	e1c325b6 	strh	r2, [r3, #86]	; 0x56
    MIB2_STATS_INC(mib2.ipoutnoroutes);
  1315d8:	e3063840 	movw	r3, #26688	; 0x6840
  1315dc:	e3403057 	movt	r3, #87	; 0x57
  1315e0:	e5933148 	ldr	r3, [r3, #328]	; 0x148
  1315e4:	e2832001 	add	r2, r3, #1
  1315e8:	e3063840 	movw	r3, #26688	; 0x6840
  1315ec:	e3403057 	movt	r3, #87	; 0x57
  1315f0:	e5832148 	str	r2, [r3, #328]	; 0x148
    return NULL;
  1315f4:	e3a03000 	mov	r3, #0
  1315f8:	ea000002 	b	131608 <ip4_route+0x290>
  }

  return netif_default;
  1315fc:	e3063838 	movw	r3, #26680	; 0x6838
  131600:	e3403057 	movt	r3, #87	; 0x57
  131604:	e5933000 	ldr	r3, [r3]
}
  131608:	e1a00003 	mov	r0, r3
  13160c:	e28bd000 	add	sp, fp, #0
  131610:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  131614:	e12fff1e 	bx	lr

00131618 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
  131618:	e92d4800 	push	{fp, lr}
  13161c:	e28db004 	add	fp, sp, #4
  131620:	e24dd028 	sub	sp, sp, #40	; 0x28
  131624:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  131628:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
  13162c:	e3a03001 	mov	r3, #1
  131630:	e50b3010 	str	r3, [fp, #-16]
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP */

  IP_STATS_INC(ip.recv);
  131634:	e3063840 	movw	r3, #26688	; 0x6840
  131638:	e3403057 	movt	r3, #87	; 0x57
  13163c:	e1d334ba 	ldrh	r3, [r3, #74]	; 0x4a
  131640:	e2833001 	add	r3, r3, #1
  131644:	e6ff2073 	uxth	r2, r3
  131648:	e3063840 	movw	r3, #26688	; 0x6840
  13164c:	e3403057 	movt	r3, #87	; 0x57
  131650:	e1c324ba 	strh	r2, [r3, #74]	; 0x4a
  MIB2_STATS_INC(mib2.ipinreceives);
  131654:	e3063840 	movw	r3, #26688	; 0x6840
  131658:	e3403057 	movt	r3, #87	; 0x57
  13165c:	e5933168 	ldr	r3, [r3, #360]	; 0x168
  131660:	e2832001 	add	r2, r3, #1
  131664:	e3063840 	movw	r3, #26688	; 0x6840
  131668:	e3403057 	movt	r3, #87	; 0x57
  13166c:	e5832168 	str	r2, [r3, #360]	; 0x168

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
  131670:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  131674:	e5933004 	ldr	r3, [r3, #4]
  131678:	e50b3008 	str	r3, [fp, #-8]
  if (IPH_V(iphdr) != 4) {
  13167c:	e51b3008 	ldr	r3, [fp, #-8]
  131680:	e5d33000 	ldrb	r3, [r3]
  131684:	e1a03223 	lsr	r3, r3, #4
  131688:	e6ef3073 	uxtb	r3, r3
  13168c:	e3530004 	cmp	r3, #4
  131690:	0a00001a 	beq	131700 <ip4_input+0xe8>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
  131694:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131698:	ebffa67f 	bl	11b09c <pbuf_free>
    IP_STATS_INC(ip.err);
  13169c:	e3063840 	movw	r3, #26688	; 0x6840
  1316a0:	e3403057 	movt	r3, #87	; 0x57
  1316a4:	e1d335bc 	ldrh	r3, [r3, #92]	; 0x5c
  1316a8:	e2833001 	add	r3, r3, #1
  1316ac:	e6ff2073 	uxth	r2, r3
  1316b0:	e3063840 	movw	r3, #26688	; 0x6840
  1316b4:	e3403057 	movt	r3, #87	; 0x57
  1316b8:	e1c325bc 	strh	r2, [r3, #92]	; 0x5c
    IP_STATS_INC(ip.drop);
  1316bc:	e3063840 	movw	r3, #26688	; 0x6840
  1316c0:	e3403057 	movt	r3, #87	; 0x57
  1316c4:	e1d334be 	ldrh	r3, [r3, #78]	; 0x4e
  1316c8:	e2833001 	add	r3, r3, #1
  1316cc:	e6ff2073 	uxth	r2, r3
  1316d0:	e3063840 	movw	r3, #26688	; 0x6840
  1316d4:	e3403057 	movt	r3, #87	; 0x57
  1316d8:	e1c324be 	strh	r2, [r3, #78]	; 0x4e
    MIB2_STATS_INC(mib2.ipinhdrerrors);
  1316dc:	e3063840 	movw	r3, #26688	; 0x6840
  1316e0:	e3403057 	movt	r3, #87	; 0x57
  1316e4:	e593312c 	ldr	r3, [r3, #300]	; 0x12c
  1316e8:	e2832001 	add	r2, r3, #1
  1316ec:	e3063840 	movw	r3, #26688	; 0x6840
  1316f0:	e3403057 	movt	r3, #87	; 0x57
  1316f4:	e583212c 	str	r2, [r3, #300]	; 0x12c
    return ERR_OK;
  1316f8:	e3a03000 	mov	r3, #0
  1316fc:	ea0001f2 	b	131ecc <ip4_input+0x8b4>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
  131700:	e51b3008 	ldr	r3, [fp, #-8]
  131704:	e5d33000 	ldrb	r3, [r3]
  131708:	e6ff3073 	uxth	r3, r3
  13170c:	e203300f 	and	r3, r3, #15
  131710:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
  131714:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  131718:	e1a03103 	lsl	r3, r3, #2
  13171c:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
  131720:	e51b3008 	ldr	r3, [fp, #-8]
  131724:	e1d330b2 	ldrh	r3, [r3, #2]
  131728:	e6ff3073 	uxth	r3, r3
  13172c:	e1a00003 	mov	r0, r3
  131730:	ebff9422 	bl	1167c0 <lwip_htons>
  131734:	e1a03000 	mov	r3, r0
  131738:	e14b31b8 	strh	r3, [fp, #-24]	; 0xffffffe8

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
  13173c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  131740:	e1d330b8 	ldrh	r3, [r3, #8]
  131744:	e15b21b8 	ldrh	r2, [fp, #-24]	; 0xffffffe8
  131748:	e1520003 	cmp	r2, r3
  13174c:	2a000003 	bcs	131760 <ip4_input+0x148>
    pbuf_realloc(p, iphdr_len);
  131750:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
  131754:	e1a01003 	mov	r1, r3
  131758:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  13175c:	ebffa505 	bl	11ab78 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
  131760:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  131764:	e1d330ba 	ldrh	r3, [r3, #10]
  131768:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  13176c:	e1520003 	cmp	r2, r3
  131770:	8a000007 	bhi	131794 <ip4_input+0x17c>
  131774:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  131778:	e1d330b8 	ldrh	r3, [r3, #8]
  13177c:	e15b21b8 	ldrh	r2, [fp, #-24]	; 0xffffffe8
  131780:	e1520003 	cmp	r2, r3
  131784:	8a000002 	bhi	131794 <ip4_input+0x17c>
  131788:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  13178c:	e3530013 	cmp	r3, #19
  131790:	8a00001a 	bhi	131800 <ip4_input+0x1e8>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
  131794:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131798:	ebffa63f 	bl	11b09c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
  13179c:	e3063840 	movw	r3, #26688	; 0x6840
  1317a0:	e3403057 	movt	r3, #87	; 0x57
  1317a4:	e1d335b2 	ldrh	r3, [r3, #82]	; 0x52
  1317a8:	e2833001 	add	r3, r3, #1
  1317ac:	e6ff2073 	uxth	r2, r3
  1317b0:	e3063840 	movw	r3, #26688	; 0x6840
  1317b4:	e3403057 	movt	r3, #87	; 0x57
  1317b8:	e1c325b2 	strh	r2, [r3, #82]	; 0x52
    IP_STATS_INC(ip.drop);
  1317bc:	e3063840 	movw	r3, #26688	; 0x6840
  1317c0:	e3403057 	movt	r3, #87	; 0x57
  1317c4:	e1d334be 	ldrh	r3, [r3, #78]	; 0x4e
  1317c8:	e2833001 	add	r3, r3, #1
  1317cc:	e6ff2073 	uxth	r2, r3
  1317d0:	e3063840 	movw	r3, #26688	; 0x6840
  1317d4:	e3403057 	movt	r3, #87	; 0x57
  1317d8:	e1c324be 	strh	r2, [r3, #78]	; 0x4e
    MIB2_STATS_INC(mib2.ipindiscards);
  1317dc:	e3063840 	movw	r3, #26688	; 0x6840
  1317e0:	e3403057 	movt	r3, #87	; 0x57
  1317e4:	e5933138 	ldr	r3, [r3, #312]	; 0x138
  1317e8:	e2832001 	add	r2, r3, #1
  1317ec:	e3063840 	movw	r3, #26688	; 0x6840
  1317f0:	e3403057 	movt	r3, #87	; 0x57
  1317f4:	e5832138 	str	r2, [r3, #312]	; 0x138
    return ERR_OK;
  1317f8:	e3a03000 	mov	r3, #0
  1317fc:	ea0001b2 	b	131ecc <ip4_input+0x8b4>
  }

  /* verify checksum */
#if CHECKSUM_CHECK_IP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_IP) {
    if (inet_chksum(iphdr, iphdr_hlen) != 0) {
  131800:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  131804:	e1a01003 	mov	r1, r3
  131808:	e51b0008 	ldr	r0, [fp, #-8]
  13180c:	ebff9cfa 	bl	118bfc <inet_chksum>
  131810:	e1a03000 	mov	r3, r0
  131814:	e3530000 	cmp	r3, #0
  131818:	0a00001a 	beq	131888 <ip4_input+0x270>

      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("Checksum (0x%"X16_F") failed, IP packet dropped.\n", inet_chksum(iphdr, iphdr_hlen)));
      ip4_debug_print(p);
      pbuf_free(p);
  13181c:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131820:	ebffa61d 	bl	11b09c <pbuf_free>
      IP_STATS_INC(ip.chkerr);
  131824:	e3063840 	movw	r3, #26688	; 0x6840
  131828:	e3403057 	movt	r3, #87	; 0x57
  13182c:	e1d335b0 	ldrh	r3, [r3, #80]	; 0x50
  131830:	e2833001 	add	r3, r3, #1
  131834:	e6ff2073 	uxth	r2, r3
  131838:	e3063840 	movw	r3, #26688	; 0x6840
  13183c:	e3403057 	movt	r3, #87	; 0x57
  131840:	e1c325b0 	strh	r2, [r3, #80]	; 0x50
      IP_STATS_INC(ip.drop);
  131844:	e3063840 	movw	r3, #26688	; 0x6840
  131848:	e3403057 	movt	r3, #87	; 0x57
  13184c:	e1d334be 	ldrh	r3, [r3, #78]	; 0x4e
  131850:	e2833001 	add	r3, r3, #1
  131854:	e6ff2073 	uxth	r2, r3
  131858:	e3063840 	movw	r3, #26688	; 0x6840
  13185c:	e3403057 	movt	r3, #87	; 0x57
  131860:	e1c324be 	strh	r2, [r3, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinhdrerrors);
  131864:	e3063840 	movw	r3, #26688	; 0x6840
  131868:	e3403057 	movt	r3, #87	; 0x57
  13186c:	e593312c 	ldr	r3, [r3, #300]	; 0x12c
  131870:	e2832001 	add	r2, r3, #1
  131874:	e3063840 	movw	r3, #26688	; 0x6840
  131878:	e3403057 	movt	r3, #87	; 0x57
  13187c:	e583212c 	str	r2, [r3, #300]	; 0x12c
      return ERR_OK;
  131880:	e3a03000 	mov	r3, #0
  131884:	ea000190 	b	131ecc <ip4_input+0x8b4>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
  131888:	e51b3008 	ldr	r3, [fp, #-8]
  13188c:	e5932010 	ldr	r2, [r3, #16]
  131890:	e30035e8 	movw	r3, #1512	; 0x5e8
  131894:	e3403015 	movt	r3, #21
  131898:	e5832014 	str	r2, [r3, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
  13189c:	e51b3008 	ldr	r3, [fp, #-8]
  1318a0:	e593200c 	ldr	r2, [r3, #12]
  1318a4:	e30035e8 	movw	r3, #1512	; 0x5e8
  1318a8:	e3403015 	movt	r3, #21
  1318ac:	e5832010 	str	r2, [r3, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
  1318b0:	e30035e8 	movw	r3, #1512	; 0x5e8
  1318b4:	e3403015 	movt	r3, #21
  1318b8:	e5933014 	ldr	r3, [r3, #20]
  1318bc:	e20330f0 	and	r3, r3, #240	; 0xf0
  1318c0:	e35300e0 	cmp	r3, #224	; 0xe0
  1318c4:	1a000020 	bne	13194c <ip4_input+0x334>
#if LWIP_IGMP
    if ((inp->flags & NETIF_FLAG_IGMP) && (igmp_lookfor_group(inp, ip4_current_dest_addr()))) {
  1318c8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1318cc:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  1318d0:	e2033020 	and	r3, r3, #32
  1318d4:	e3530000 	cmp	r3, #0
  1318d8:	0a000018 	beq	131940 <ip4_input+0x328>
  1318dc:	e59f15f4 	ldr	r1, [pc, #1524]	; 131ed8 <ip4_input+0x8c0>
  1318e0:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
  1318e4:	ebfffa77 	bl	1302c8 <igmp_lookfor_group>
  1318e8:	e1a03000 	mov	r3, r0
  1318ec:	e3530000 	cmp	r3, #0
  1318f0:	0a000012 	beq	131940 <ip4_input+0x328>
      /* IGMP snooping switches need 0.0.0.0 to be allowed as source address (RFC 4541) */
      ip4_addr_t allsystems;
      IP4_ADDR(&allsystems, 224, 0, 0, 1);
  1318f4:	e3a030e0 	mov	r3, #224	; 0xe0
  1318f8:	e3403100 	movt	r3, #256	; 0x100
  1318fc:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
      if (ip4_addr_cmp(ip4_current_dest_addr(), &allsystems) &&
  131900:	e30035e8 	movw	r3, #1512	; 0x5e8
  131904:	e3403015 	movt	r3, #21
  131908:	e5932014 	ldr	r2, [r3, #20]
  13190c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  131910:	e1520003 	cmp	r2, r3
  131914:	1a000006 	bne	131934 <ip4_input+0x31c>
          ip4_addr_isany(ip4_current_src_addr())) {
  131918:	e30035e8 	movw	r3, #1512	; 0x5e8
  13191c:	e3403015 	movt	r3, #21
  131920:	e5933010 	ldr	r3, [r3, #16]
      if (ip4_addr_cmp(ip4_current_dest_addr(), &allsystems) &&
  131924:	e3530000 	cmp	r3, #0
  131928:	1a000001 	bne	131934 <ip4_input+0x31c>
        check_ip_src = 0;
  13192c:	e3a03000 	mov	r3, #0
  131930:	e50b3010 	str	r3, [fp, #-16]
      }
      netif = inp;
  131934:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  131938:	e50b300c 	str	r3, [fp, #-12]
    if ((inp->flags & NETIF_FLAG_IGMP) && (igmp_lookfor_group(inp, ip4_current_dest_addr()))) {
  13193c:	ea000040 	b	131a44 <ip4_input+0x42c>
    } else {
      netif = NULL;
  131940:	e3a03000 	mov	r3, #0
  131944:	e50b300c 	str	r3, [fp, #-12]
  131948:	ea00003d 	b	131a44 <ip4_input+0x42c>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
  13194c:	e3a03001 	mov	r3, #1
  131950:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    netif = inp;
  131954:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  131958:	e50b300c 	str	r3, [fp, #-12]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
  13195c:	e51b300c 	ldr	r3, [fp, #-12]
  131960:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  131964:	e2033001 	and	r3, r3, #1
  131968:	e6ef3073 	uxtb	r3, r3
  13196c:	e3530000 	cmp	r3, #0
  131970:	0a00001c 	beq	1319e8 <ip4_input+0x3d0>
  131974:	e51b300c 	ldr	r3, [fp, #-12]
  131978:	e2833004 	add	r3, r3, #4
  13197c:	e5933000 	ldr	r3, [r3]
  131980:	e3530000 	cmp	r3, #0
  131984:	0a000017 	beq	1319e8 <ip4_input+0x3d0>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
  131988:	e30035e8 	movw	r3, #1512	; 0x5e8
  13198c:	e3403015 	movt	r3, #21
  131990:	e5932014 	ldr	r2, [r3, #20]
  131994:	e51b300c 	ldr	r3, [fp, #-12]
  131998:	e2833004 	add	r3, r3, #4
  13199c:	e5933000 	ldr	r3, [r3]
  1319a0:	e1520003 	cmp	r2, r3
  1319a4:	0a000026 	beq	131a44 <ip4_input+0x42c>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
  1319a8:	e30035e8 	movw	r3, #1512	; 0x5e8
  1319ac:	e3403015 	movt	r3, #21
  1319b0:	e5933014 	ldr	r3, [r3, #20]
  1319b4:	e51b100c 	ldr	r1, [fp, #-12]
  1319b8:	e1a00003 	mov	r0, r3
  1319bc:	eb00034c 	bl	1326f4 <ip4_addr_isbroadcast_u32>
  1319c0:	e1a03000 	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
  1319c4:	e3530000 	cmp	r3, #0
  1319c8:	1a00001d 	bne	131a44 <ip4_input+0x42c>
#if LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF
            || (ip4_addr_get_u32(ip4_current_dest_addr()) == PP_HTONL(IPADDR_LOOPBACK))
  1319cc:	e30035e8 	movw	r3, #1512	; 0x5e8
  1319d0:	e3403015 	movt	r3, #21
  1319d4:	e5932014 	ldr	r2, [r3, #20]
  1319d8:	e3a0307f 	mov	r3, #127	; 0x7f
  1319dc:	e3403100 	movt	r3, #256	; 0x100
  1319e0:	e1520003 	cmp	r2, r3
  1319e4:	0a000016 	beq	131a44 <ip4_input+0x42c>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
  1319e8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1319ec:	e3530000 	cmp	r3, #0
  1319f0:	0a000006 	beq	131a10 <ip4_input+0x3f8>
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
          netif = NULL;
          break;
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
  1319f4:	e3a03000 	mov	r3, #0
  1319f8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        netif = netif_list;
  1319fc:	e3063834 	movw	r3, #26676	; 0x6834
  131a00:	e3403057 	movt	r3, #87	; 0x57
  131a04:	e5933000 	ldr	r3, [r3]
  131a08:	e50b300c 	str	r3, [fp, #-12]
  131a0c:	ea000002 	b	131a1c <ip4_input+0x404>
      } else {
        netif = netif->next;
  131a10:	e51b300c 	ldr	r3, [fp, #-12]
  131a14:	e5933000 	ldr	r3, [r3]
  131a18:	e50b300c 	str	r3, [fp, #-12]
      }
      if (netif == inp) {
  131a1c:	e51b200c 	ldr	r2, [fp, #-12]
  131a20:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  131a24:	e1520003 	cmp	r2, r3
  131a28:	1a000002 	bne	131a38 <ip4_input+0x420>
        netif = netif->next;
  131a2c:	e51b300c 	ldr	r3, [fp, #-12]
  131a30:	e5933000 	ldr	r3, [r3]
  131a34:	e50b300c 	str	r3, [fp, #-12]
      }
    } while (netif != NULL);
  131a38:	e51b300c 	ldr	r3, [fp, #-12]
  131a3c:	e3530000 	cmp	r3, #0
  131a40:	1affffc5 	bne	13195c <ip4_input+0x344>
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
  131a44:	e51b300c 	ldr	r3, [fp, #-12]
  131a48:	e3530000 	cmp	r3, #0
  131a4c:	1a000010 	bne	131a94 <ip4_input+0x47c>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
  131a50:	e51b3008 	ldr	r3, [fp, #-8]
  131a54:	e5d33009 	ldrb	r3, [r3, #9]
  131a58:	e3530011 	cmp	r3, #17
  131a5c:	1a00000c 	bne	131a94 <ip4_input+0x47c>
      struct udp_hdr *udphdr = (struct udp_hdr *)((u8_t *)iphdr + iphdr_hlen);
  131a60:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  131a64:	e51b2008 	ldr	r2, [fp, #-8]
  131a68:	e0823003 	add	r3, r2, r3
  131a6c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
        lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
  131a70:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  131a74:	e1d330b2 	ldrh	r3, [r3, #2]
  131a78:	e6ff3073 	uxth	r3, r3
  131a7c:	e3530b11 	cmp	r3, #17408	; 0x4400
  131a80:	1a000003 	bne	131a94 <ip4_input+0x47c>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
  131a84:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  131a88:	e50b300c 	str	r3, [fp, #-12]
        check_ip_src = 0;
  131a8c:	e3a03000 	mov	r3, #0
  131a90:	e50b3010 	str	r3, [fp, #-16]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
  131a94:	e51b3010 	ldr	r3, [fp, #-16]
  131a98:	e3530000 	cmp	r3, #0
  131a9c:	0a00002d 	beq	131b58 <ip4_input+0x540>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
  131aa0:	e30035e8 	movw	r3, #1512	; 0x5e8
  131aa4:	e3403015 	movt	r3, #21
  131aa8:	e5933010 	ldr	r3, [r3, #16]
  131aac:	e3530000 	cmp	r3, #0
  131ab0:	0a000028 	beq	131b58 <ip4_input+0x540>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
  131ab4:	e30035e8 	movw	r3, #1512	; 0x5e8
  131ab8:	e3403015 	movt	r3, #21
  131abc:	e5933010 	ldr	r3, [r3, #16]
  131ac0:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  131ac4:	e1a00003 	mov	r0, r3
  131ac8:	eb000309 	bl	1326f4 <ip4_addr_isbroadcast_u32>
  131acc:	e1a03000 	mov	r3, r0
  131ad0:	e3530000 	cmp	r3, #0
  131ad4:	1a000005 	bne	131af0 <ip4_input+0x4d8>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
  131ad8:	e30035e8 	movw	r3, #1512	; 0x5e8
  131adc:	e3403015 	movt	r3, #21
  131ae0:	e5933010 	ldr	r3, [r3, #16]
  131ae4:	e20330f0 	and	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
  131ae8:	e35300e0 	cmp	r3, #224	; 0xe0
  131aec:	1a000019 	bne	131b58 <ip4_input+0x540>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
  131af0:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131af4:	ebffa568 	bl	11b09c <pbuf_free>
      IP_STATS_INC(ip.drop);
  131af8:	e3063840 	movw	r3, #26688	; 0x6840
  131afc:	e3403057 	movt	r3, #87	; 0x57
  131b00:	e1d334be 	ldrh	r3, [r3, #78]	; 0x4e
  131b04:	e2833001 	add	r3, r3, #1
  131b08:	e6ff2073 	uxth	r2, r3
  131b0c:	e3063840 	movw	r3, #26688	; 0x6840
  131b10:	e3403057 	movt	r3, #87	; 0x57
  131b14:	e1c324be 	strh	r2, [r3, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
  131b18:	e3063840 	movw	r3, #26688	; 0x6840
  131b1c:	e3403057 	movt	r3, #87	; 0x57
  131b20:	e5933130 	ldr	r3, [r3, #304]	; 0x130
  131b24:	e2832001 	add	r2, r3, #1
  131b28:	e3063840 	movw	r3, #26688	; 0x6840
  131b2c:	e3403057 	movt	r3, #87	; 0x57
  131b30:	e5832130 	str	r2, [r3, #304]	; 0x130
      MIB2_STATS_INC(mib2.ipindiscards);
  131b34:	e3063840 	movw	r3, #26688	; 0x6840
  131b38:	e3403057 	movt	r3, #87	; 0x57
  131b3c:	e5933138 	ldr	r3, [r3, #312]	; 0x138
  131b40:	e2832001 	add	r2, r3, #1
  131b44:	e3063840 	movw	r3, #26688	; 0x6840
  131b48:	e3403057 	movt	r3, #87	; 0x57
  131b4c:	e5832138 	str	r2, [r3, #312]	; 0x138
      return ERR_OK;
  131b50:	e3a03000 	mov	r3, #0
  131b54:	ea0000dc 	b	131ecc <ip4_input+0x8b4>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
  131b58:	e51b300c 	ldr	r3, [fp, #-12]
  131b5c:	e3530000 	cmp	r3, #0
  131b60:	1a000019 	bne	131bcc <ip4_input+0x5b4>
      /* try to forward IP packet on (other) interfaces */
      ip4_forward(p, iphdr, inp);
    } else
#endif /* IP_FORWARD */
    {
      IP_STATS_INC(ip.drop);
  131b64:	e3063840 	movw	r3, #26688	; 0x6840
  131b68:	e3403057 	movt	r3, #87	; 0x57
  131b6c:	e1d334be 	ldrh	r3, [r3, #78]	; 0x4e
  131b70:	e2833001 	add	r3, r3, #1
  131b74:	e6ff2073 	uxth	r2, r3
  131b78:	e3063840 	movw	r3, #26688	; 0x6840
  131b7c:	e3403057 	movt	r3, #87	; 0x57
  131b80:	e1c324be 	strh	r2, [r3, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
  131b84:	e3063840 	movw	r3, #26688	; 0x6840
  131b88:	e3403057 	movt	r3, #87	; 0x57
  131b8c:	e5933130 	ldr	r3, [r3, #304]	; 0x130
  131b90:	e2832001 	add	r2, r3, #1
  131b94:	e3063840 	movw	r3, #26688	; 0x6840
  131b98:	e3403057 	movt	r3, #87	; 0x57
  131b9c:	e5832130 	str	r2, [r3, #304]	; 0x130
      MIB2_STATS_INC(mib2.ipindiscards);
  131ba0:	e3063840 	movw	r3, #26688	; 0x6840
  131ba4:	e3403057 	movt	r3, #87	; 0x57
  131ba8:	e5933138 	ldr	r3, [r3, #312]	; 0x138
  131bac:	e2832001 	add	r2, r3, #1
  131bb0:	e3063840 	movw	r3, #26688	; 0x6840
  131bb4:	e3403057 	movt	r3, #87	; 0x57
  131bb8:	e5832138 	str	r2, [r3, #312]	; 0x138
    }
    pbuf_free(p);
  131bbc:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131bc0:	ebffa535 	bl	11b09c <pbuf_free>
    return ERR_OK;
  131bc4:	e3a03000 	mov	r3, #0
  131bc8:	ea0000bf 	b	131ecc <ip4_input+0x8b4>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
  131bcc:	e51b3008 	ldr	r3, [fp, #-8]
  131bd0:	e1d330b6 	ldrh	r3, [r3, #6]
  131bd4:	e6ff3073 	uxth	r3, r3
  131bd8:	e1a02003 	mov	r2, r3
  131bdc:	e30f3f3f 	movw	r3, #65343	; 0xff3f
  131be0:	e0033002 	and	r3, r3, r2
  131be4:	e3530000 	cmp	r3, #0
  131be8:	0a00000a 	beq	131c18 <ip4_input+0x600>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
  131bec:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131bf0:	eb000778 	bl	1339d8 <ip4_reass>
  131bf4:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
    /* packet not fully reassembled yet? */
    if (p == NULL) {
  131bf8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  131bfc:	e3530000 	cmp	r3, #0
  131c00:	1a000001 	bne	131c0c <ip4_input+0x5f4>
      return ERR_OK;
  131c04:	e3a03000 	mov	r3, #0
  131c08:	ea0000af 	b	131ecc <ip4_input+0x8b4>
    }
    iphdr = (struct ip_hdr *)p->payload;
  131c0c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  131c10:	e5933004 	ldr	r3, [r3, #4]
  131c14:	e50b3008 	str	r3, [fp, #-8]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
  131c18:	e30035e8 	movw	r3, #1512	; 0x5e8
  131c1c:	e3403015 	movt	r3, #21
  131c20:	e51b200c 	ldr	r2, [fp, #-12]
  131c24:	e5832000 	str	r2, [r3]
  ip_data.current_input_netif = inp;
  131c28:	e30035e8 	movw	r3, #1512	; 0x5e8
  131c2c:	e3403015 	movt	r3, #21
  131c30:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  131c34:	e5832004 	str	r2, [r3, #4]
  ip_data.current_ip4_header = iphdr;
  131c38:	e30035e8 	movw	r3, #1512	; 0x5e8
  131c3c:	e3403015 	movt	r3, #21
  131c40:	e51b2008 	ldr	r2, [fp, #-8]
  131c44:	e5832008 	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
  131c48:	e51b3008 	ldr	r3, [fp, #-8]
  131c4c:	e5d33000 	ldrb	r3, [r3]
  131c50:	e6ff3073 	uxth	r3, r3
  131c54:	e203300f 	and	r3, r3, #15
  131c58:	e6ff3073 	uxth	r3, r3
  131c5c:	e1a03103 	lsl	r3, r3, #2
  131c60:	e6ff2073 	uxth	r2, r3
  131c64:	e30035e8 	movw	r3, #1512	; 0x5e8
  131c68:	e3403015 	movt	r3, #21
  131c6c:	e1c320bc 	strh	r2, [r3, #12]

#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
  131c70:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  131c74:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131c78:	ebffa9d1 	bl	11c3c4 <raw_input>
  131c7c:	e1a03000 	mov	r3, r0
  131c80:	e3530000 	cmp	r3, #0
  131c84:	1a000076 	bne	131e64 <ip4_input+0x84c>
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
  131c88:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  131c8c:	e2633000 	rsb	r3, r3, #0
  131c90:	e6ff3073 	uxth	r3, r3
  131c94:	e6bf3073 	sxth	r3, r3
  131c98:	e1a01003 	mov	r1, r3
  131c9c:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131ca0:	ebffa4df 	bl	11b024 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
  131ca4:	e51b3008 	ldr	r3, [fp, #-8]
  131ca8:	e5d33009 	ldrb	r3, [r3, #9]
  131cac:	e2433001 	sub	r3, r3, #1
  131cb0:	e3530010 	cmp	r3, #16
  131cb4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  131cb8:	ea000036 	b	131d98 <ip4_input+0x780>
  131cbc:	00131d58 	.word	0x00131d58
  131cc0:	00131d84 	.word	0x00131d84
  131cc4:	00131d98 	.word	0x00131d98
  131cc8:	00131d98 	.word	0x00131d98
  131ccc:	00131d98 	.word	0x00131d98
  131cd0:	00131d2c 	.word	0x00131d2c
  131cd4:	00131d98 	.word	0x00131d98
  131cd8:	00131d98 	.word	0x00131d98
  131cdc:	00131d98 	.word	0x00131d98
  131ce0:	00131d98 	.word	0x00131d98
  131ce4:	00131d98 	.word	0x00131d98
  131ce8:	00131d98 	.word	0x00131d98
  131cec:	00131d98 	.word	0x00131d98
  131cf0:	00131d98 	.word	0x00131d98
  131cf4:	00131d98 	.word	0x00131d98
  131cf8:	00131d98 	.word	0x00131d98
  131cfc:	00131d00 	.word	0x00131d00
#if LWIP_UDP
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
  131d00:	e3063840 	movw	r3, #26688	; 0x6840
  131d04:	e3403057 	movt	r3, #87	; 0x57
  131d08:	e593313c 	ldr	r3, [r3, #316]	; 0x13c
  131d0c:	e2832001 	add	r2, r3, #1
  131d10:	e3063840 	movw	r3, #26688	; 0x6840
  131d14:	e3403057 	movt	r3, #87	; 0x57
  131d18:	e583213c 	str	r2, [r3, #316]	; 0x13c
      udp_input(p, inp);
  131d1c:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  131d20:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131d24:	ebffd80c 	bl	127d5c <udp_input>
      break;
  131d28:	ea00004e 	b	131e68 <ip4_input+0x850>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
  131d2c:	e3063840 	movw	r3, #26688	; 0x6840
  131d30:	e3403057 	movt	r3, #87	; 0x57
  131d34:	e593313c 	ldr	r3, [r3, #316]	; 0x13c
  131d38:	e2832001 	add	r2, r3, #1
  131d3c:	e3063840 	movw	r3, #26688	; 0x6840
  131d40:	e3403057 	movt	r3, #87	; 0x57
  131d44:	e583213c 	str	r2, [r3, #316]	; 0x13c
      tcp_input(p, inp);
  131d48:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  131d4c:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131d50:	ebffb9c8 	bl	120478 <tcp_input>
      break;
  131d54:	ea000043 	b	131e68 <ip4_input+0x850>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
  131d58:	e3063840 	movw	r3, #26688	; 0x6840
  131d5c:	e3403057 	movt	r3, #87	; 0x57
  131d60:	e593313c 	ldr	r3, [r3, #316]	; 0x13c
  131d64:	e2832001 	add	r2, r3, #1
  131d68:	e3063840 	movw	r3, #26688	; 0x6840
  131d6c:	e3403057 	movt	r3, #87	; 0x57
  131d70:	e583213c 	str	r2, [r3, #316]	; 0x13c
      icmp_input(p, inp);
  131d74:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  131d78:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131d7c:	ebfff665 	bl	12f718 <icmp_input>
      break;
  131d80:	ea000038 	b	131e68 <ip4_input+0x850>
#endif /* LWIP_ICMP */
#if LWIP_IGMP
    case IP_PROTO_IGMP:
      igmp_input(p, inp, ip4_current_dest_addr());
  131d84:	e59f214c 	ldr	r2, [pc, #332]	; 131ed8 <ip4_input+0x8c0>
  131d88:	e51b102c 	ldr	r1, [fp, #-44]	; 0xffffffd4
  131d8c:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131d90:	ebfff9ed 	bl	13054c <igmp_input>
      break;
  131d94:	ea000033 	b	131e68 <ip4_input+0x850>
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
  131d98:	e30035e8 	movw	r3, #1512	; 0x5e8
  131d9c:	e3403015 	movt	r3, #21
  131da0:	e5933014 	ldr	r3, [r3, #20]
  131da4:	e51b100c 	ldr	r1, [fp, #-12]
  131da8:	e1a00003 	mov	r0, r3
  131dac:	eb000250 	bl	1326f4 <ip4_addr_isbroadcast_u32>
  131db0:	e1a03000 	mov	r3, r0
  131db4:	e3530000 	cmp	r3, #0
  131db8:	1a00000f 	bne	131dfc <ip4_input+0x7e4>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
  131dbc:	e30035e8 	movw	r3, #1512	; 0x5e8
  131dc0:	e3403015 	movt	r3, #21
  131dc4:	e5933014 	ldr	r3, [r3, #20]
  131dc8:	e20330f0 	and	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
  131dcc:	e35300e0 	cmp	r3, #224	; 0xe0
  131dd0:	0a000009 	beq	131dfc <ip4_input+0x7e4>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
  131dd4:	e15b31f6 	ldrsh	r3, [fp, #-22]	; 0xffffffea
  131dd8:	e1a01003 	mov	r1, r3
  131ddc:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131de0:	ebffa49e 	bl	11b060 <pbuf_header_force>
        p->payload = iphdr;
  131de4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  131de8:	e51b2008 	ldr	r2, [fp, #-8]
  131dec:	e5832004 	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
  131df0:	e3a01002 	mov	r1, #2
  131df4:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131df8:	ebfff81c 	bl	12fe70 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
  131dfc:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  131e00:	ebffa4a5 	bl	11b09c <pbuf_free>

      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Unsupported transport protocol %"U16_F"\n", (u16_t)IPH_PROTO(iphdr)));

      IP_STATS_INC(ip.proterr);
  131e04:	e3063840 	movw	r3, #26688	; 0x6840
  131e08:	e3403057 	movt	r3, #87	; 0x57
  131e0c:	e1d335b8 	ldrh	r3, [r3, #88]	; 0x58
  131e10:	e2833001 	add	r3, r3, #1
  131e14:	e6ff2073 	uxth	r2, r3
  131e18:	e3063840 	movw	r3, #26688	; 0x6840
  131e1c:	e3403057 	movt	r3, #87	; 0x57
  131e20:	e1c325b8 	strh	r2, [r3, #88]	; 0x58
      IP_STATS_INC(ip.drop);
  131e24:	e3063840 	movw	r3, #26688	; 0x6840
  131e28:	e3403057 	movt	r3, #87	; 0x57
  131e2c:	e1d334be 	ldrh	r3, [r3, #78]	; 0x4e
  131e30:	e2833001 	add	r3, r3, #1
  131e34:	e6ff2073 	uxth	r2, r3
  131e38:	e3063840 	movw	r3, #26688	; 0x6840
  131e3c:	e3403057 	movt	r3, #87	; 0x57
  131e40:	e1c324be 	strh	r2, [r3, #78]	; 0x4e
      MIB2_STATS_INC(mib2.ipinunknownprotos);
  131e44:	e3063840 	movw	r3, #26688	; 0x6840
  131e48:	e3403057 	movt	r3, #87	; 0x57
  131e4c:	e5933134 	ldr	r3, [r3, #308]	; 0x134
  131e50:	e2832001 	add	r2, r3, #1
  131e54:	e3063840 	movw	r3, #26688	; 0x6840
  131e58:	e3403057 	movt	r3, #87	; 0x57
  131e5c:	e5832134 	str	r2, [r3, #308]	; 0x134
  131e60:	ea000000 	b	131e68 <ip4_input+0x850>
    }
  }
  131e64:	e320f000 	nop	{0}

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
  131e68:	e30035e8 	movw	r3, #1512	; 0x5e8
  131e6c:	e3403015 	movt	r3, #21
  131e70:	e3a02000 	mov	r2, #0
  131e74:	e5832000 	str	r2, [r3]
  ip_data.current_input_netif = NULL;
  131e78:	e30035e8 	movw	r3, #1512	; 0x5e8
  131e7c:	e3403015 	movt	r3, #21
  131e80:	e3a02000 	mov	r2, #0
  131e84:	e5832004 	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
  131e88:	e30035e8 	movw	r3, #1512	; 0x5e8
  131e8c:	e3403015 	movt	r3, #21
  131e90:	e3a02000 	mov	r2, #0
  131e94:	e5832008 	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
  131e98:	e30035e8 	movw	r3, #1512	; 0x5e8
  131e9c:	e3403015 	movt	r3, #21
  131ea0:	e3a02000 	mov	r2, #0
  131ea4:	e1c320bc 	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
  131ea8:	e30035e8 	movw	r3, #1512	; 0x5e8
  131eac:	e3403015 	movt	r3, #21
  131eb0:	e3a02000 	mov	r2, #0
  131eb4:	e5832010 	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
  131eb8:	e30035e8 	movw	r3, #1512	; 0x5e8
  131ebc:	e3403015 	movt	r3, #21
  131ec0:	e3a02000 	mov	r2, #0
  131ec4:	e5832014 	str	r2, [r3, #20]

  return ERR_OK;
  131ec8:	e3a03000 	mov	r3, #0
}
  131ecc:	e1a00003 	mov	r0, r3
  131ed0:	e24bd004 	sub	sp, fp, #4
  131ed4:	e8bd8800 	pop	{fp, pc}
  131ed8:	001505fc 	.word	0x001505fc

00131edc <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
  131edc:	e92d4800 	push	{fp, lr}
  131ee0:	e28db004 	add	fp, sp, #4
  131ee4:	e24dd028 	sub	sp, sp, #40	; 0x28
  131ee8:	e50b0008 	str	r0, [fp, #-8]
  131eec:	e50b100c 	str	r1, [fp, #-12]
  131ef0:	e50b2010 	str	r2, [fp, #-16]
  131ef4:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
#if IP_OPTIONS_SEND
  return ip4_output_if_opt(p, src, dest, ttl, tos, proto, netif, NULL, 0);
  131ef8:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  131efc:	e3a03000 	mov	r3, #0
  131f00:	e58d3010 	str	r3, [sp, #16]
  131f04:	e3a03000 	mov	r3, #0
  131f08:	e58d300c 	str	r3, [sp, #12]
  131f0c:	e59b300c 	ldr	r3, [fp, #12]
  131f10:	e58d3008 	str	r3, [sp, #8]
  131f14:	e5db3008 	ldrb	r3, [fp, #8]
  131f18:	e58d3004 	str	r3, [sp, #4]
  131f1c:	e5db3004 	ldrb	r3, [fp, #4]
  131f20:	e58d3000 	str	r3, [sp]
  131f24:	e1a03002 	mov	r3, r2
  131f28:	e51b2010 	ldr	r2, [fp, #-16]
  131f2c:	e51b100c 	ldr	r1, [fp, #-12]
  131f30:	e51b0008 	ldr	r0, [fp, #-8]
  131f34:	eb000003 	bl	131f48 <ip4_output_if_opt>
  131f38:	e1a03000 	mov	r3, r0
}
  131f3c:	e1a00003 	mov	r0, r3
  131f40:	e24bd004 	sub	sp, fp, #4
  131f44:	e8bd8800 	pop	{fp, pc}

00131f48 <ip4_output_if_opt>:
 */
err_t
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
  131f48:	e92d4800 	push	{fp, lr}
  131f4c:	e28db004 	add	fp, sp, #4
  131f50:	e24dd030 	sub	sp, sp, #48	; 0x30
  131f54:	e50b0010 	str	r0, [fp, #-16]
  131f58:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  131f5c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  131f60:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
  131f64:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131f68:	e50b3008 	str	r3, [fp, #-8]
  if (dest != LWIP_IP_HDRINCL) {
  131f6c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  131f70:	e3530000 	cmp	r3, #0
  131f74:	0a000009 	beq	131fa0 <ip4_output_if_opt+0x58>
    if (ip4_addr_isany(src)) {
  131f78:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131f7c:	e3530000 	cmp	r3, #0
  131f80:	0a000003 	beq	131f94 <ip4_output_if_opt+0x4c>
  131f84:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  131f88:	e5933000 	ldr	r3, [r3]
  131f8c:	e3530000 	cmp	r3, #0
  131f90:	1a000002 	bne	131fa0 <ip4_output_if_opt+0x58>
      src_used = netif_ip4_addr(netif);
  131f94:	e59b300c 	ldr	r3, [fp, #12]
  131f98:	e2833004 	add	r3, r3, #4
  131f9c:	e50b3008 	str	r3, [fp, #-8]
    }
  }

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
  131fa0:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
  131fa4:	e1db31b4 	ldrh	r3, [fp, #20]
  131fa8:	e58d3010 	str	r3, [sp, #16]
  131fac:	e59b3010 	ldr	r3, [fp, #16]
  131fb0:	e58d300c 	str	r3, [sp, #12]
  131fb4:	e59b300c 	ldr	r3, [fp, #12]
  131fb8:	e58d3008 	str	r3, [sp, #8]
  131fbc:	e5db3008 	ldrb	r3, [fp, #8]
  131fc0:	e58d3004 	str	r3, [sp, #4]
  131fc4:	e5db3004 	ldrb	r3, [fp, #4]
  131fc8:	e58d3000 	str	r3, [sp]
  131fcc:	e1a03002 	mov	r3, r2
  131fd0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  131fd4:	e51b1008 	ldr	r1, [fp, #-8]
  131fd8:	e51b0010 	ldr	r0, [fp, #-16]
  131fdc:	eb00001e 	bl	13205c <ip4_output_if_opt_src>
  131fe0:	e1a03000 	mov	r3, r0
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
#endif /* IP_OPTIONS_SEND */
}
  131fe4:	e1a00003 	mov	r0, r3
  131fe8:	e24bd004 	sub	sp, fp, #4
  131fec:	e8bd8800 	pop	{fp, pc}

00131ff0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
  131ff0:	e92d4800 	push	{fp, lr}
  131ff4:	e28db004 	add	fp, sp, #4
  131ff8:	e24dd028 	sub	sp, sp, #40	; 0x28
  131ffc:	e50b0008 	str	r0, [fp, #-8]
  132000:	e50b100c 	str	r1, [fp, #-12]
  132004:	e50b2010 	str	r2, [fp, #-16]
  132008:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src, dest, ttl, tos, proto, netif, NULL, 0);
  13200c:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  132010:	e3a03000 	mov	r3, #0
  132014:	e58d3010 	str	r3, [sp, #16]
  132018:	e3a03000 	mov	r3, #0
  13201c:	e58d300c 	str	r3, [sp, #12]
  132020:	e59b300c 	ldr	r3, [fp, #12]
  132024:	e58d3008 	str	r3, [sp, #8]
  132028:	e5db3008 	ldrb	r3, [fp, #8]
  13202c:	e58d3004 	str	r3, [sp, #4]
  132030:	e5db3004 	ldrb	r3, [fp, #4]
  132034:	e58d3000 	str	r3, [sp]
  132038:	e1a03002 	mov	r3, r2
  13203c:	e51b2010 	ldr	r2, [fp, #-16]
  132040:	e51b100c 	ldr	r1, [fp, #-12]
  132044:	e51b0008 	ldr	r0, [fp, #-8]
  132048:	eb000003 	bl	13205c <ip4_output_if_opt_src>
  13204c:	e1a03000 	mov	r3, r0
}
  132050:	e1a00003 	mov	r0, r3
  132054:	e24bd004 	sub	sp, fp, #4
  132058:	e8bd8800 	pop	{fp, pc}

0013205c <ip4_output_if_opt_src>:
 */
err_t
ip4_output_if_opt_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
  13205c:	e92d4800 	push	{fp, lr}
  132060:	e28db004 	add	fp, sp, #4
  132064:	e24dd028 	sub	sp, sp, #40	; 0x28
  132068:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  13206c:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  132070:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
  132074:	e54b3029 	strb	r3, [fp, #-41]	; 0xffffffd7
#endif /* IP_OPTIONS_SEND */
  struct ip_hdr *iphdr;
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
  132078:	e3a03000 	mov	r3, #0
  13207c:	e50b3008 	str	r3, [fp, #-8]
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
  132080:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132084:	e1d330be 	ldrh	r3, [r3, #14]
  132088:	e3530001 	cmp	r3, #1
  13208c:	0a000006 	beq	1320ac <ip4_output_if_opt_src+0x50>
  132090:	e3090a70 	movw	r0, #39536	; 0x9a70
  132094:	e3400014 	movt	r0, #20
  132098:	ebff441d 	bl	103114 <rt_kprintf>
  13209c:	e3001333 	movw	r1, #819	; 0x333
  1320a0:	e3090a7c 	movw	r0, #39548	; 0x9a7c
  1320a4:	e3400014 	movt	r0, #20
  1320a8:	ebff63ed 	bl	10b064 <sys_arch_assert>

  MIB2_STATS_INC(mib2.ipoutrequests);
  1320ac:	e3063840 	movw	r3, #26688	; 0x6840
  1320b0:	e3403057 	movt	r3, #87	; 0x57
  1320b4:	e5933140 	ldr	r3, [r3, #320]	; 0x140
  1320b8:	e2832001 	add	r2, r3, #1
  1320bc:	e3063840 	movw	r3, #26688	; 0x6840
  1320c0:	e3403057 	movt	r3, #87	; 0x57
  1320c4:	e5832140 	str	r2, [r3, #320]	; 0x140

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
  1320c8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1320cc:	e3530000 	cmp	r3, #0
  1320d0:	0a000112 	beq	132520 <ip4_output_if_opt_src+0x4c4>
    u16_t ip_hlen = IP_HLEN;
  1320d4:	e3a03014 	mov	r3, #20
  1320d8:	e14b30ba 	strh	r3, [fp, #-10]
#if IP_OPTIONS_SEND
    u16_t optlen_aligned = 0;
  1320dc:	e3a03000 	mov	r3, #0
  1320e0:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
    if (optlen != 0) {
  1320e4:	e1db31b4 	ldrh	r3, [fp, #20]
  1320e8:	e3530000 	cmp	r3, #0
  1320ec:	0a00004b 	beq	132220 <ip4_output_if_opt_src+0x1c4>
#if CHECKSUM_GEN_IP_INLINE
      int i;
#endif /* CHECKSUM_GEN_IP_INLINE */
      /* round up to a multiple of 4 */
      optlen_aligned = ((optlen + 3) & ~3);
  1320f0:	e1db31b4 	ldrh	r3, [fp, #20]
  1320f4:	e2833003 	add	r3, r3, #3
  1320f8:	e6ff3073 	uxth	r3, r3
  1320fc:	e3c33003 	bic	r3, r3, #3
  132100:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
      ip_hlen += optlen_aligned;
  132104:	e15b20ba 	ldrh	r2, [fp, #-10]
  132108:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  13210c:	e0823003 	add	r3, r2, r3
  132110:	e14b30ba 	strh	r3, [fp, #-10]
      /* First write in the IP options */
      if (pbuf_header(p, optlen_aligned)) {
  132114:	e15b31f6 	ldrsh	r3, [fp, #-22]	; 0xffffffea
  132118:	e1a01003 	mov	r1, r3
  13211c:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  132120:	ebffa3bf 	bl	11b024 <pbuf_header>
  132124:	e1a03000 	mov	r3, r0
  132128:	e3530000 	cmp	r3, #0
  13212c:	0a000010 	beq	132174 <ip4_output_if_opt_src+0x118>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output_if_opt: not enough room for IP options in pbuf\n"));
        IP_STATS_INC(ip.err);
  132130:	e3063840 	movw	r3, #26688	; 0x6840
  132134:	e3403057 	movt	r3, #87	; 0x57
  132138:	e1d335bc 	ldrh	r3, [r3, #92]	; 0x5c
  13213c:	e2833001 	add	r3, r3, #1
  132140:	e6ff2073 	uxth	r2, r3
  132144:	e3063840 	movw	r3, #26688	; 0x6840
  132148:	e3403057 	movt	r3, #87	; 0x57
  13214c:	e1c325bc 	strh	r2, [r3, #92]	; 0x5c
        MIB2_STATS_INC(mib2.ipoutdiscards);
  132150:	e3063840 	movw	r3, #26688	; 0x6840
  132154:	e3403057 	movt	r3, #87	; 0x57
  132158:	e5933144 	ldr	r3, [r3, #324]	; 0x144
  13215c:	e2832001 	add	r2, r3, #1
  132160:	e3063840 	movw	r3, #26688	; 0x6840
  132164:	e3403057 	movt	r3, #87	; 0x57
  132168:	e5832144 	str	r2, [r3, #324]	; 0x144
        return ERR_BUF;
  13216c:	e3e03001 	mvn	r3, #1
  132170:	ea00012a 	b	132620 <ip4_output_if_opt_src+0x5c4>
      }
      MEMCPY(p->payload, ip_options, optlen);
  132174:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132178:	e5933004 	ldr	r3, [r3, #4]
  13217c:	e1db21b4 	ldrh	r2, [fp, #20]
  132180:	e59b1010 	ldr	r1, [fp, #16]
  132184:	e1a00003 	mov	r0, r3
  132188:	eb003b7b 	bl	140f7c <memcpy>
      if (optlen < optlen_aligned) {
  13218c:	e1db21b4 	ldrh	r2, [fp, #20]
  132190:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  132194:	e1520003 	cmp	r2, r3
  132198:	2a000009 	bcs	1321c4 <ip4_output_if_opt_src+0x168>
        /* zero the remaining bytes */
        memset(((char*)p->payload) + optlen, 0, optlen_aligned - optlen);
  13219c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1321a0:	e5932004 	ldr	r2, [r3, #4]
  1321a4:	e1db31b4 	ldrh	r3, [fp, #20]
  1321a8:	e0820003 	add	r0, r2, r3
  1321ac:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  1321b0:	e1db31b4 	ldrh	r3, [fp, #20]
  1321b4:	e0423003 	sub	r3, r2, r3
  1321b8:	e1a02003 	mov	r2, r3
  1321bc:	e3a01000 	mov	r1, #0
  1321c0:	eb003ca5 	bl	14145c <memset>
      }
#if CHECKSUM_GEN_IP_INLINE
      for (i = 0; i < optlen_aligned/2; i++) {
  1321c4:	e3a03000 	mov	r3, #0
  1321c8:	e50b3010 	str	r3, [fp, #-16]
  1321cc:	ea00000c 	b	132204 <ip4_output_if_opt_src+0x1a8>
        chk_sum += ((u16_t*)p->payload)[i];
  1321d0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1321d4:	e5932004 	ldr	r2, [r3, #4]
  1321d8:	e51b3010 	ldr	r3, [fp, #-16]
  1321dc:	e1a03083 	lsl	r3, r3, #1
  1321e0:	e0823003 	add	r3, r2, r3
  1321e4:	e1d330b0 	ldrh	r3, [r3]
  1321e8:	e1a02003 	mov	r2, r3
  1321ec:	e51b3008 	ldr	r3, [fp, #-8]
  1321f0:	e0833002 	add	r3, r3, r2
  1321f4:	e50b3008 	str	r3, [fp, #-8]
      for (i = 0; i < optlen_aligned/2; i++) {
  1321f8:	e51b3010 	ldr	r3, [fp, #-16]
  1321fc:	e2833001 	add	r3, r3, #1
  132200:	e50b3010 	str	r3, [fp, #-16]
  132204:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
  132208:	e1a030a3 	lsr	r3, r3, #1
  13220c:	e6ff3073 	uxth	r3, r3
  132210:	e1a02003 	mov	r2, r3
  132214:	e51b3010 	ldr	r3, [fp, #-16]
  132218:	e1530002 	cmp	r3, r2
  13221c:	baffffeb 	blt	1321d0 <ip4_output_if_opt_src+0x174>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
  132220:	e3a01014 	mov	r1, #20
  132224:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  132228:	ebffa37d 	bl	11b024 <pbuf_header>
  13222c:	e1a03000 	mov	r3, r0
  132230:	e3530000 	cmp	r3, #0
  132234:	0a000010 	beq	13227c <ip4_output_if_opt_src+0x220>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
  132238:	e3063840 	movw	r3, #26688	; 0x6840
  13223c:	e3403057 	movt	r3, #87	; 0x57
  132240:	e1d335bc 	ldrh	r3, [r3, #92]	; 0x5c
  132244:	e2833001 	add	r3, r3, #1
  132248:	e6ff2073 	uxth	r2, r3
  13224c:	e3063840 	movw	r3, #26688	; 0x6840
  132250:	e3403057 	movt	r3, #87	; 0x57
  132254:	e1c325bc 	strh	r2, [r3, #92]	; 0x5c
      MIB2_STATS_INC(mib2.ipoutdiscards);
  132258:	e3063840 	movw	r3, #26688	; 0x6840
  13225c:	e3403057 	movt	r3, #87	; 0x57
  132260:	e5933144 	ldr	r3, [r3, #324]	; 0x144
  132264:	e2832001 	add	r2, r3, #1
  132268:	e3063840 	movw	r3, #26688	; 0x6840
  13226c:	e3403057 	movt	r3, #87	; 0x57
  132270:	e5832144 	str	r2, [r3, #324]	; 0x144
      return ERR_BUF;
  132274:	e3e03001 	mvn	r3, #1
  132278:	ea0000e8 	b	132620 <ip4_output_if_opt_src+0x5c4>
    }

    iphdr = (struct ip_hdr *)p->payload;
  13227c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132280:	e5933004 	ldr	r3, [r3, #4]
  132284:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
  132288:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  13228c:	e1d330ba 	ldrh	r3, [r3, #10]
  132290:	e3530013 	cmp	r3, #19
  132294:	8a000006 	bhi	1322b4 <ip4_output_if_opt_src+0x258>
  132298:	e3090aac 	movw	r0, #39596	; 0x9aac
  13229c:	e3400014 	movt	r0, #20
  1322a0:	ebff439b 	bl	103114 <rt_kprintf>
  1322a4:	e3001361 	movw	r1, #865	; 0x361
  1322a8:	e3090a7c 	movw	r0, #39548	; 0x9a7c
  1322ac:	e3400014 	movt	r0, #20
  1322b0:	ebff636b 	bl	10b064 <sys_arch_assert>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
  1322b4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1322b8:	e55b2029 	ldrb	r2, [fp, #-41]	; 0xffffffd7
  1322bc:	e5c32008 	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
  1322c0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1322c4:	e5db2008 	ldrb	r2, [fp, #8]
  1322c8:	e5c32009 	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
  1322cc:	e5db2008 	ldrb	r2, [fp, #8]
  1322d0:	e55b3029 	ldrb	r3, [fp, #-41]	; 0xffffffd7
  1322d4:	e1a03403 	lsl	r3, r3, #8
  1322d8:	e1823003 	orr	r3, r2, r3
  1322dc:	e1a03403 	lsl	r3, r3, #8
  1322e0:	e6ff2073 	uxth	r2, r3
  1322e4:	e5db1008 	ldrb	r1, [fp, #8]
  1322e8:	e55b3029 	ldrb	r3, [fp, #-41]	; 0xffffffd7
  1322ec:	e1a03403 	lsl	r3, r3, #8
  1322f0:	e1813003 	orr	r3, r1, r3
  1322f4:	e1a03423 	lsr	r3, r3, #8
  1322f8:	e6ef3073 	uxtb	r3, r3
  1322fc:	e1823003 	orr	r3, r2, r3
  132300:	e51b2008 	ldr	r2, [fp, #-8]
  132304:	e0823003 	add	r3, r2, r3
  132308:	e50b3008 	str	r3, [fp, #-8]
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
  13230c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  132310:	e5932000 	ldr	r2, [r3]
  132314:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132318:	e5832010 	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
  13231c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132320:	e5933010 	ldr	r3, [r3, #16]
  132324:	e6ff3073 	uxth	r3, r3
  132328:	e51b2008 	ldr	r2, [fp, #-8]
  13232c:	e0823003 	add	r3, r2, r3
  132330:	e50b3008 	str	r3, [fp, #-8]
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
  132334:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132338:	e5933010 	ldr	r3, [r3, #16]
  13233c:	e1a03823 	lsr	r3, r3, #16
  132340:	e51b2008 	ldr	r2, [fp, #-8]
  132344:	e0823003 	add	r3, r2, r3
  132348:	e50b3008 	str	r3, [fp, #-8]
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
  13234c:	e15b30ba 	ldrh	r3, [fp, #-10]
  132350:	e1a03123 	lsr	r3, r3, #2
  132354:	e6ff3073 	uxth	r3, r3
  132358:	e6ef3073 	uxtb	r3, r3
  13235c:	e3833040 	orr	r3, r3, #64	; 0x40
  132360:	e6ef2073 	uxtb	r2, r3
  132364:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132368:	e5c32000 	strb	r2, [r3]
    IPH_TOS_SET(iphdr, tos);
  13236c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132370:	e5db2004 	ldrb	r2, [fp, #4]
  132374:	e5c32001 	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
  132378:	e5db2004 	ldrb	r2, [fp, #4]
  13237c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132380:	e5d33000 	ldrb	r3, [r3]
  132384:	e1a03403 	lsl	r3, r3, #8
  132388:	e1823003 	orr	r3, r2, r3
  13238c:	e1a03403 	lsl	r3, r3, #8
  132390:	e6ff2073 	uxth	r2, r3
  132394:	e5db1004 	ldrb	r1, [fp, #4]
  132398:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13239c:	e5d33000 	ldrb	r3, [r3]
  1323a0:	e1a03403 	lsl	r3, r3, #8
  1323a4:	e1813003 	orr	r3, r1, r3
  1323a8:	e1a03423 	lsr	r3, r3, #8
  1323ac:	e6ef3073 	uxtb	r3, r3
  1323b0:	e1823003 	orr	r3, r2, r3
  1323b4:	e51b2008 	ldr	r2, [fp, #-8]
  1323b8:	e0823003 	add	r3, r2, r3
  1323bc:	e50b3008 	str	r3, [fp, #-8]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
  1323c0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1323c4:	e1d330b8 	ldrh	r3, [r3, #8]
  1323c8:	e1a00003 	mov	r0, r3
  1323cc:	ebff90fb 	bl	1167c0 <lwip_htons>
  1323d0:	e1a03000 	mov	r3, r0
  1323d4:	e1a02003 	mov	r2, r3
  1323d8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1323dc:	e1c320b2 	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
  1323e0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1323e4:	e1d330b2 	ldrh	r3, [r3, #2]
  1323e8:	e6ff3073 	uxth	r3, r3
  1323ec:	e1a02003 	mov	r2, r3
  1323f0:	e51b3008 	ldr	r3, [fp, #-8]
  1323f4:	e0833002 	add	r3, r3, r2
  1323f8:	e50b3008 	str	r3, [fp, #-8]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
  1323fc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132400:	e3a02000 	mov	r2, #0
  132404:	e5c32006 	strb	r2, [r3, #6]
  132408:	e3a02000 	mov	r2, #0
  13240c:	e5c32007 	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
  132410:	e30f3bd0 	movw	r3, #64464	; 0xfbd0
  132414:	e3403014 	movt	r3, #20
  132418:	e1d330b0 	ldrh	r3, [r3]
  13241c:	e1a00003 	mov	r0, r3
  132420:	ebff90e6 	bl	1167c0 <lwip_htons>
  132424:	e1a03000 	mov	r3, r0
  132428:	e1a02003 	mov	r2, r3
  13242c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132430:	e1c320b4 	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
  132434:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132438:	e1d330b4 	ldrh	r3, [r3, #4]
  13243c:	e6ff3073 	uxth	r3, r3
  132440:	e1a02003 	mov	r2, r3
  132444:	e51b3008 	ldr	r3, [fp, #-8]
  132448:	e0833002 	add	r3, r3, r2
  13244c:	e50b3008 	str	r3, [fp, #-8]
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
  132450:	e30f3bd0 	movw	r3, #64464	; 0xfbd0
  132454:	e3403014 	movt	r3, #20
  132458:	e1d330b0 	ldrh	r3, [r3]
  13245c:	e2833001 	add	r3, r3, #1
  132460:	e6ff2073 	uxth	r2, r3
  132464:	e30f3bd0 	movw	r3, #64464	; 0xfbd0
  132468:	e3403014 	movt	r3, #20
  13246c:	e1c320b0 	strh	r2, [r3]

    if (src == NULL) {
  132470:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  132474:	e3530000 	cmp	r3, #0
  132478:	1a000005 	bne	132494 <ip4_output_if_opt_src+0x438>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
  13247c:	e3093adc 	movw	r3, #39644	; 0x9adc
  132480:	e3403014 	movt	r3, #20
  132484:	e5932000 	ldr	r2, [r3]
  132488:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13248c:	e583200c 	str	r2, [r3, #12]
  132490:	ea000003 	b	1324a4 <ip4_output_if_opt_src+0x448>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
  132494:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  132498:	e5932000 	ldr	r2, [r3]
  13249c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1324a0:	e583200c 	str	r2, [r3, #12]
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
  1324a4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1324a8:	e593300c 	ldr	r3, [r3, #12]
  1324ac:	e6ff3073 	uxth	r3, r3
  1324b0:	e51b2008 	ldr	r2, [fp, #-8]
  1324b4:	e0823003 	add	r3, r2, r3
  1324b8:	e50b3008 	str	r3, [fp, #-8]
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
  1324bc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1324c0:	e593300c 	ldr	r3, [r3, #12]
  1324c4:	e1a03823 	lsr	r3, r3, #16
  1324c8:	e51b2008 	ldr	r2, [fp, #-8]
  1324cc:	e0823003 	add	r3, r2, r3
  1324d0:	e50b3008 	str	r3, [fp, #-8]
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
  1324d4:	e51b3008 	ldr	r3, [fp, #-8]
  1324d8:	e1a02823 	lsr	r2, r3, #16
  1324dc:	e51b3008 	ldr	r3, [fp, #-8]
  1324e0:	e6ff3073 	uxth	r3, r3
  1324e4:	e0823003 	add	r3, r2, r3
  1324e8:	e50b3008 	str	r3, [fp, #-8]
    chk_sum = (chk_sum >> 16) + chk_sum;
  1324ec:	e51b3008 	ldr	r3, [fp, #-8]
  1324f0:	e1a03823 	lsr	r3, r3, #16
  1324f4:	e51b2008 	ldr	r2, [fp, #-8]
  1324f8:	e0823003 	add	r3, r2, r3
  1324fc:	e50b3008 	str	r3, [fp, #-8]
    chk_sum = ~chk_sum;
  132500:	e51b3008 	ldr	r3, [fp, #-8]
  132504:	e1e03003 	mvn	r3, r3
  132508:	e50b3008 	str	r3, [fp, #-8]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      iphdr->_chksum = (u16_t)chk_sum; /* network order */
  13250c:	e51b3008 	ldr	r3, [fp, #-8]
  132510:	e6ff2073 	uxth	r2, r3
  132514:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132518:	e1c320ba 	strh	r2, [r3, #10]
  13251c:	ea000007 	b	132540 <ip4_output_if_opt_src+0x4e4>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
  132520:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132524:	e5933004 	ldr	r3, [r3, #4]
  132528:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    ip4_addr_copy(dest_addr, iphdr->dest);
  13252c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132530:	e5933010 	ldr	r3, [r3, #16]
  132534:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    dest = &dest_addr;
  132538:	e24b301c 	sub	r3, fp, #28
  13253c:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  }

  IP_STATS_INC(ip.xmit);
  132540:	e3063840 	movw	r3, #26688	; 0x6840
  132544:	e3403057 	movt	r3, #87	; 0x57
  132548:	e1d334b8 	ldrh	r3, [r3, #72]	; 0x48
  13254c:	e2833001 	add	r3, r3, #1
  132550:	e6ff2073 	uxth	r2, r3
  132554:	e3063840 	movw	r3, #26688	; 0x6840
  132558:	e3403057 	movt	r3, #87	; 0x57
  13255c:	e1c324b8 	strh	r2, [r3, #72]	; 0x48

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: %c%c%"U16_F"\n", netif->name[0], netif->name[1], (u16_t)netif->num));
  ip4_debug_print(p);

#if ENABLE_LOOPBACK
  if (ip4_addr_cmp(dest, netif_ip4_addr(netif))
  132560:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  132564:	e5932000 	ldr	r2, [r3]
  132568:	e59b300c 	ldr	r3, [fp, #12]
  13256c:	e2833004 	add	r3, r3, #4
  132570:	e5933000 	ldr	r3, [r3]
  132574:	e1520003 	cmp	r2, r3
  132578:	0a000004 	beq	132590 <ip4_output_if_opt_src+0x534>
#if !LWIP_HAVE_LOOPIF
      || ip4_addr_isloopback(dest)
  13257c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  132580:	e5933000 	ldr	r3, [r3]
  132584:	e6ef3073 	uxtb	r3, r3
  132588:	e353007f 	cmp	r3, #127	; 0x7f
  13258c:	1a000004 	bne	1325a4 <ip4_output_if_opt_src+0x548>
#endif /* !LWIP_HAVE_LOOPIF */
      ) {
    /* Packet to self, enqueue it for loopback */
    LWIP_DEBUGF(IP_DEBUG, ("netif_loop_output()"));
    return netif_loop_output(netif, p);
  132590:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  132594:	e59b000c 	ldr	r0, [fp, #12]
  132598:	ebff9e77 	bl	119f7c <netif_loop_output>
  13259c:	e1a03000 	mov	r3, r0
  1325a0:	ea00001e 	b	132620 <ip4_output_if_opt_src+0x5c4>
  }
#if LWIP_MULTICAST_TX_OPTIONS
  if ((p->flags & PBUF_FLAG_MCASTLOOP) != 0) {
  1325a4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1325a8:	e5d3300d 	ldrb	r3, [r3, #13]
  1325ac:	e2033004 	and	r3, r3, #4
  1325b0:	e3530000 	cmp	r3, #0
  1325b4:	0a000002 	beq	1325c4 <ip4_output_if_opt_src+0x568>
    netif_loop_output(netif, p);
  1325b8:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  1325bc:	e59b000c 	ldr	r0, [fp, #12]
  1325c0:	ebff9e6d 	bl	119f7c <netif_loop_output>
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
  1325c4:	e59b300c 	ldr	r3, [fp, #12]
  1325c8:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  1325cc:	e3530000 	cmp	r3, #0
  1325d0:	0a00000b 	beq	132604 <ip4_output_if_opt_src+0x5a8>
  1325d4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1325d8:	e1d320b8 	ldrh	r2, [r3, #8]
  1325dc:	e59b300c 	ldr	r3, [fp, #12]
  1325e0:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  1325e4:	e1520003 	cmp	r2, r3
  1325e8:	9a000005 	bls	132604 <ip4_output_if_opt_src+0x5a8>
    return ip4_frag(p, netif, dest);
  1325ec:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  1325f0:	e59b100c 	ldr	r1, [fp, #12]
  1325f4:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  1325f8:	eb00068e 	bl	134038 <ip4_frag>
  1325fc:	e1a03000 	mov	r3, r0
  132600:	ea000006 	b	132620 <ip4_output_if_opt_src+0x5c4>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
  132604:	e59b300c 	ldr	r3, [fp, #12]
  132608:	e5933014 	ldr	r3, [r3, #20]
  13260c:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  132610:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  132614:	e59b000c 	ldr	r0, [fp, #12]
  132618:	e12fff33 	blx	r3
  13261c:	e1a03000 	mov	r3, r0
}
  132620:	e1a00003 	mov	r0, r3
  132624:	e24bd004 	sub	sp, fp, #4
  132628:	e8bd8800 	pop	{fp, pc}

0013262c <ip4_output>:
 *         see ip_output_if() for more return values
 */
err_t
ip4_output(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
          u8_t ttl, u8_t tos, u8_t proto)
{
  13262c:	e92d4800 	push	{fp, lr}
  132630:	e28db004 	add	fp, sp, #4
  132634:	e24dd028 	sub	sp, sp, #40	; 0x28
  132638:	e50b0010 	str	r0, [fp, #-16]
  13263c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  132640:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  132644:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
  struct netif *netif;

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
  132648:	e51b3010 	ldr	r3, [fp, #-16]
  13264c:	e1d330be 	ldrh	r3, [r3, #14]
  132650:	e3530001 	cmp	r3, #1
  132654:	0a000006 	beq	132674 <ip4_output+0x48>
  132658:	e3090a70 	movw	r0, #39536	; 0x9a70
  13265c:	e3400014 	movt	r0, #20
  132660:	ebff42ab 	bl	103114 <rt_kprintf>
  132664:	e30013db 	movw	r1, #987	; 0x3db
  132668:	e3090a7c 	movw	r0, #39548	; 0x9a7c
  13266c:	e3400014 	movt	r0, #20
  132670:	ebff627b 	bl	10b064 <sys_arch_assert>

  if ((netif = ip4_route_src(dest, src)) == NULL) {
  132674:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  132678:	ebfffb3e 	bl	131378 <ip4_route>
  13267c:	e50b0008 	str	r0, [fp, #-8]
  132680:	e51b3008 	ldr	r3, [fp, #-8]
  132684:	e3530000 	cmp	r3, #0
  132688:	1a000009 	bne	1326b4 <ip4_output+0x88>
    LWIP_DEBUGF(IP_DEBUG, ("ip4_output: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
  13268c:	e3063840 	movw	r3, #26688	; 0x6840
  132690:	e3403057 	movt	r3, #87	; 0x57
  132694:	e1d335b6 	ldrh	r3, [r3, #86]	; 0x56
  132698:	e2833001 	add	r3, r3, #1
  13269c:	e6ff2073 	uxth	r2, r3
  1326a0:	e3063840 	movw	r3, #26688	; 0x6840
  1326a4:	e3403057 	movt	r3, #87	; 0x57
  1326a8:	e1c325b6 	strh	r2, [r3, #86]	; 0x56
    return ERR_RTE;
  1326ac:	e3e03003 	mvn	r3, #3
  1326b0:	ea00000c 	b	1326e8 <ip4_output+0xbc>
  }

  return ip4_output_if(p, src, dest, ttl, tos, proto, netif);
  1326b4:	e55b2019 	ldrb	r2, [fp, #-25]	; 0xffffffe7
  1326b8:	e51b3008 	ldr	r3, [fp, #-8]
  1326bc:	e58d3008 	str	r3, [sp, #8]
  1326c0:	e5db3008 	ldrb	r3, [fp, #8]
  1326c4:	e58d3004 	str	r3, [sp, #4]
  1326c8:	e5db3004 	ldrb	r3, [fp, #4]
  1326cc:	e58d3000 	str	r3, [sp]
  1326d0:	e1a03002 	mov	r3, r2
  1326d4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1326d8:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1326dc:	e51b0010 	ldr	r0, [fp, #-16]
  1326e0:	ebfffdfd 	bl	131edc <ip4_output_if>
  1326e4:	e1a03000 	mov	r3, r0
}
  1326e8:	e1a00003 	mov	r0, r3
  1326ec:	e24bd004 	sub	sp, fp, #4
  1326f0:	e8bd8800 	pop	{fp, pc}

001326f4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
  1326f4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1326f8:	e28db000 	add	fp, sp, #0
  1326fc:	e24dd014 	sub	sp, sp, #20
  132700:	e50b0010 	str	r0, [fp, #-16]
  132704:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
  132708:	e51b3010 	ldr	r3, [fp, #-16]
  13270c:	e50b3008 	str	r3, [fp, #-8]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
  132710:	e51b3010 	ldr	r3, [fp, #-16]
  132714:	e3730001 	cmn	r3, #1
  132718:	0a000002 	beq	132728 <ip4_addr_isbroadcast_u32+0x34>
  13271c:	e51b3010 	ldr	r3, [fp, #-16]
  132720:	e3530000 	cmp	r3, #0
  132724:	1a000001 	bne	132730 <ip4_addr_isbroadcast_u32+0x3c>
      (addr == IPADDR_ANY)) {
    return 1;
  132728:	e3a03001 	mov	r3, #1
  13272c:	ea000028 	b	1327d4 <ip4_addr_isbroadcast_u32+0xe0>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
  132730:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132734:	e5d33041 	ldrb	r3, [r3, #65]	; 0x41
  132738:	e2033002 	and	r3, r3, #2
  13273c:	e3530000 	cmp	r3, #0
  132740:	1a000001 	bne	13274c <ip4_addr_isbroadcast_u32+0x58>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
  132744:	e3a03000 	mov	r3, #0
  132748:	ea000021 	b	1327d4 <ip4_addr_isbroadcast_u32+0xe0>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
  13274c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132750:	e2833004 	add	r3, r3, #4
  132754:	e5933000 	ldr	r3, [r3]
  132758:	e51b2010 	ldr	r2, [fp, #-16]
  13275c:	e1520003 	cmp	r2, r3
  132760:	1a000001 	bne	13276c <ip4_addr_isbroadcast_u32+0x78>
    return 0;
  132764:	e3a03000 	mov	r3, #0
  132768:	ea000019 	b	1327d4 <ip4_addr_isbroadcast_u32+0xe0>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
  13276c:	e51b2008 	ldr	r2, [fp, #-8]
  132770:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132774:	e2833004 	add	r3, r3, #4
  132778:	e5933000 	ldr	r3, [r3]
  13277c:	e0222003 	eor	r2, r2, r3
  132780:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132784:	e2833008 	add	r3, r3, #8
  132788:	e5933000 	ldr	r3, [r3]
  13278c:	e0033002 	and	r3, r3, r2
  132790:	e3530000 	cmp	r3, #0
  132794:	1a00000d 	bne	1327d0 <ip4_addr_isbroadcast_u32+0xdc>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
  132798:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13279c:	e2833008 	add	r3, r3, #8
  1327a0:	e5933000 	ldr	r3, [r3]
  1327a4:	e1e02003 	mvn	r2, r3
  1327a8:	e51b3010 	ldr	r3, [fp, #-16]
  1327ac:	e0022003 	and	r2, r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
  1327b0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1327b4:	e2833008 	add	r3, r3, #8
  1327b8:	e5933000 	ldr	r3, [r3]
  1327bc:	e1e03003 	mvn	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
  1327c0:	e1520003 	cmp	r2, r3
  1327c4:	1a000001 	bne	1327d0 <ip4_addr_isbroadcast_u32+0xdc>
    /* => network broadcast address */
    return 1;
  1327c8:	e3a03001 	mov	r3, #1
  1327cc:	ea000000 	b	1327d4 <ip4_addr_isbroadcast_u32+0xe0>
  } else {
    return 0;
  1327d0:	e3a03000 	mov	r3, #0
  }
}
  1327d4:	e1a00003 	mov	r0, r3
  1327d8:	e28bd000 	add	sp, fp, #0
  1327dc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1327e0:	e12fff1e 	bx	lr

001327e4 <ip4_addr_netmask_valid>:
 * @param netmask the IPv4 netmask to check (in network byte order!)
 * @return 1 if the netmask is valid, 0 if it is not
 */
u8_t
ip4_addr_netmask_valid(u32_t netmask)
{
  1327e4:	e92d4800 	push	{fp, lr}
  1327e8:	e28db004 	add	fp, sp, #4
  1327ec:	e24dd010 	sub	sp, sp, #16
  1327f0:	e50b0010 	str	r0, [fp, #-16]
  u32_t mask;
  u32_t nm_hostorder = lwip_htonl(netmask);
  1327f4:	e51b0010 	ldr	r0, [fp, #-16]
  1327f8:	ebff8ffc 	bl	1167f0 <lwip_htonl>
  1327fc:	e50b000c 	str	r0, [fp, #-12]

  /* first, check for the first zero */
  for (mask = 1UL << 31 ; mask != 0; mask >>= 1) {
  132800:	e3a03102 	mov	r3, #-2147483648	; 0x80000000
  132804:	e50b3008 	str	r3, [fp, #-8]
  132808:	ea000007 	b	13282c <ip4_addr_netmask_valid+0x48>
    if ((nm_hostorder & mask) == 0) {
  13280c:	e51b200c 	ldr	r2, [fp, #-12]
  132810:	e51b3008 	ldr	r3, [fp, #-8]
  132814:	e0033002 	and	r3, r3, r2
  132818:	e3530000 	cmp	r3, #0
  13281c:	0a000006 	beq	13283c <ip4_addr_netmask_valid+0x58>
  for (mask = 1UL << 31 ; mask != 0; mask >>= 1) {
  132820:	e51b3008 	ldr	r3, [fp, #-8]
  132824:	e1a030a3 	lsr	r3, r3, #1
  132828:	e50b3008 	str	r3, [fp, #-8]
  13282c:	e51b3008 	ldr	r3, [fp, #-8]
  132830:	e3530000 	cmp	r3, #0
  132834:	1afffff4 	bne	13280c <ip4_addr_netmask_valid+0x28>
  132838:	ea00000b 	b	13286c <ip4_addr_netmask_valid+0x88>
      break;
  13283c:	e320f000 	nop	{0}
    }
  }
  /* then check that there is no one */
  for (; mask != 0; mask >>= 1) {
  132840:	ea000009 	b	13286c <ip4_addr_netmask_valid+0x88>
    if ((nm_hostorder & mask) != 0) {
  132844:	e51b200c 	ldr	r2, [fp, #-12]
  132848:	e51b3008 	ldr	r3, [fp, #-8]
  13284c:	e0033002 	and	r3, r3, r2
  132850:	e3530000 	cmp	r3, #0
  132854:	0a000001 	beq	132860 <ip4_addr_netmask_valid+0x7c>
      /* there is a one after the first zero -> invalid */
      return 0;
  132858:	e3a03000 	mov	r3, #0
  13285c:	ea000006 	b	13287c <ip4_addr_netmask_valid+0x98>
  for (; mask != 0; mask >>= 1) {
  132860:	e51b3008 	ldr	r3, [fp, #-8]
  132864:	e1a030a3 	lsr	r3, r3, #1
  132868:	e50b3008 	str	r3, [fp, #-8]
  13286c:	e51b3008 	ldr	r3, [fp, #-8]
  132870:	e3530000 	cmp	r3, #0
  132874:	1afffff2 	bne	132844 <ip4_addr_netmask_valid+0x60>
    }
  }
  /* no one after the first zero -> valid */
  return 1;
  132878:	e3a03001 	mov	r3, #1
}
  13287c:	e1a00003 	mov	r0, r3
  132880:	e24bd004 	sub	sp, fp, #4
  132884:	e8bd8800 	pop	{fp, pc}

00132888 <ipaddr_addr>:
 * @param cp IP address in ascii representation (e.g. "127.0.0.1")
 * @return ip address in network order
 */
u32_t
ipaddr_addr(const char *cp)
{
  132888:	e92d4800 	push	{fp, lr}
  13288c:	e28db004 	add	fp, sp, #4
  132890:	e24dd010 	sub	sp, sp, #16
  132894:	e50b0010 	str	r0, [fp, #-16]
  ip4_addr_t val;

  if (ip4addr_aton(cp, &val)) {
  132898:	e24b3008 	sub	r3, fp, #8
  13289c:	e1a01003 	mov	r1, r3
  1328a0:	e51b0010 	ldr	r0, [fp, #-16]
  1328a4:	eb000008 	bl	1328cc <ip4addr_aton>
  1328a8:	e1a03000 	mov	r3, r0
  1328ac:	e3530000 	cmp	r3, #0
  1328b0:	0a000001 	beq	1328bc <ipaddr_addr+0x34>
    return ip4_addr_get_u32(&val);
  1328b4:	e51b3008 	ldr	r3, [fp, #-8]
  1328b8:	ea000000 	b	1328c0 <ipaddr_addr+0x38>
  }
  return (IPADDR_NONE);
  1328bc:	e3e03000 	mvn	r3, #0
}
  1328c0:	e1a00003 	mov	r0, r3
  1328c4:	e24bd004 	sub	sp, fp, #4
  1328c8:	e8bd8800 	pop	{fp, pc}

001328cc <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
  1328cc:	e92d4800 	push	{fp, lr}
  1328d0:	e28db004 	add	fp, sp, #4
  1328d4:	e24dd028 	sub	sp, sp, #40	; 0x28
  1328d8:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  1328dc:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
  1328e0:	e24b3020 	sub	r3, fp, #32
  1328e4:	e50b3010 	str	r3, [fp, #-16]

  c = *cp;
  1328e8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1328ec:	e5d33000 	ldrb	r3, [r3]
  1328f0:	e54b300a 	strb	r3, [fp, #-10]
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!isdigit(c)) {
  1328f4:	e55b300a 	ldrb	r3, [fp, #-10]
  1328f8:	e353002f 	cmp	r3, #47	; 0x2f
  1328fc:	9a000002 	bls	13290c <ip4addr_aton+0x40>
  132900:	e55b300a 	ldrb	r3, [fp, #-10]
  132904:	e3530039 	cmp	r3, #57	; 0x39
  132908:	9a000001 	bls	132914 <ip4addr_aton+0x48>
      return 0;
  13290c:	e3a03000 	mov	r3, #0
  132910:	ea0000ee 	b	132cd0 <ip4addr_aton+0x404>
    }
    val = 0;
  132914:	e3a03000 	mov	r3, #0
  132918:	e50b3008 	str	r3, [fp, #-8]
    base = 10;
  13291c:	e3a0300a 	mov	r3, #10
  132920:	e54b3009 	strb	r3, [fp, #-9]
    if (c == '0') {
  132924:	e55b300a 	ldrb	r3, [fp, #-10]
  132928:	e3530030 	cmp	r3, #48	; 0x30
  13292c:	1a000016 	bne	13298c <ip4addr_aton+0xc0>
      c = *++cp;
  132930:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  132934:	e2833001 	add	r3, r3, #1
  132938:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  13293c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  132940:	e5d33000 	ldrb	r3, [r3]
  132944:	e54b300a 	strb	r3, [fp, #-10]
      if (c == 'x' || c == 'X') {
  132948:	e55b300a 	ldrb	r3, [fp, #-10]
  13294c:	e3530078 	cmp	r3, #120	; 0x78
  132950:	0a000002 	beq	132960 <ip4addr_aton+0x94>
  132954:	e55b300a 	ldrb	r3, [fp, #-10]
  132958:	e3530058 	cmp	r3, #88	; 0x58
  13295c:	1a000008 	bne	132984 <ip4addr_aton+0xb8>
        base = 16;
  132960:	e3a03010 	mov	r3, #16
  132964:	e54b3009 	strb	r3, [fp, #-9]
        c = *++cp;
  132968:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  13296c:	e2833001 	add	r3, r3, #1
  132970:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  132974:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  132978:	e5d33000 	ldrb	r3, [r3]
  13297c:	e54b300a 	strb	r3, [fp, #-10]
  132980:	ea000001 	b	13298c <ip4addr_aton+0xc0>
      } else {
        base = 8;
  132984:	e3a03008 	mov	r3, #8
  132988:	e54b3009 	strb	r3, [fp, #-9]
      }
    }
    for (;;) {
      if (isdigit(c)) {
  13298c:	e55b300a 	ldrb	r3, [fp, #-10]
  132990:	e353002f 	cmp	r3, #47	; 0x2f
  132994:	9a000010 	bls	1329dc <ip4addr_aton+0x110>
  132998:	e55b300a 	ldrb	r3, [fp, #-10]
  13299c:	e3530039 	cmp	r3, #57	; 0x39
  1329a0:	8a00000d 	bhi	1329dc <ip4addr_aton+0x110>
        val = (val * base) + (u32_t)(c - '0');
  1329a4:	e55b3009 	ldrb	r3, [fp, #-9]
  1329a8:	e51b2008 	ldr	r2, [fp, #-8]
  1329ac:	e0020392 	mul	r2, r2, r3
  1329b0:	e55b300a 	ldrb	r3, [fp, #-10]
  1329b4:	e0823003 	add	r3, r2, r3
  1329b8:	e2433030 	sub	r3, r3, #48	; 0x30
  1329bc:	e50b3008 	str	r3, [fp, #-8]
        c = *++cp;
  1329c0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1329c4:	e2833001 	add	r3, r3, #1
  1329c8:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  1329cc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1329d0:	e5d33000 	ldrb	r3, [r3]
  1329d4:	e54b300a 	strb	r3, [fp, #-10]
  1329d8:	ea00002a 	b	132a88 <ip4addr_aton+0x1bc>
      } else if (base == 16 && isxdigit(c)) {
  1329dc:	e55b3009 	ldrb	r3, [fp, #-9]
  1329e0:	e3530010 	cmp	r3, #16
  1329e4:	1a000028 	bne	132a8c <ip4addr_aton+0x1c0>
  1329e8:	e55b300a 	ldrb	r3, [fp, #-10]
  1329ec:	e353002f 	cmp	r3, #47	; 0x2f
  1329f0:	9a000002 	bls	132a00 <ip4addr_aton+0x134>
  1329f4:	e55b300a 	ldrb	r3, [fp, #-10]
  1329f8:	e3530039 	cmp	r3, #57	; 0x39
  1329fc:	9a00000b 	bls	132a30 <ip4addr_aton+0x164>
  132a00:	e55b300a 	ldrb	r3, [fp, #-10]
  132a04:	e3530060 	cmp	r3, #96	; 0x60
  132a08:	9a000002 	bls	132a18 <ip4addr_aton+0x14c>
  132a0c:	e55b300a 	ldrb	r3, [fp, #-10]
  132a10:	e3530066 	cmp	r3, #102	; 0x66
  132a14:	9a000005 	bls	132a30 <ip4addr_aton+0x164>
  132a18:	e55b300a 	ldrb	r3, [fp, #-10]
  132a1c:	e3530040 	cmp	r3, #64	; 0x40
  132a20:	9a000019 	bls	132a8c <ip4addr_aton+0x1c0>
  132a24:	e55b300a 	ldrb	r3, [fp, #-10]
  132a28:	e3530046 	cmp	r3, #70	; 0x46
  132a2c:	8a000016 	bhi	132a8c <ip4addr_aton+0x1c0>
        val = (val << 4) | (u32_t)(c + 10 - (islower(c) ? 'a' : 'A'));
  132a30:	e51b3008 	ldr	r3, [fp, #-8]
  132a34:	e1a03203 	lsl	r3, r3, #4
  132a38:	e55b200a 	ldrb	r2, [fp, #-10]
  132a3c:	e282100a 	add	r1, r2, #10
  132a40:	e55b200a 	ldrb	r2, [fp, #-10]
  132a44:	e3520060 	cmp	r2, #96	; 0x60
  132a48:	9a000004 	bls	132a60 <ip4addr_aton+0x194>
  132a4c:	e55b200a 	ldrb	r2, [fp, #-10]
  132a50:	e352007a 	cmp	r2, #122	; 0x7a
  132a54:	8a000001 	bhi	132a60 <ip4addr_aton+0x194>
  132a58:	e3a02061 	mov	r2, #97	; 0x61
  132a5c:	ea000000 	b	132a64 <ip4addr_aton+0x198>
  132a60:	e3a02041 	mov	r2, #65	; 0x41
  132a64:	e0412002 	sub	r2, r1, r2
  132a68:	e1833002 	orr	r3, r3, r2
  132a6c:	e50b3008 	str	r3, [fp, #-8]
        c = *++cp;
  132a70:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  132a74:	e2833001 	add	r3, r3, #1
  132a78:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  132a7c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  132a80:	e5d33000 	ldrb	r3, [r3]
  132a84:	e54b300a 	strb	r3, [fp, #-10]
      if (isdigit(c)) {
  132a88:	eaffffbf 	b	13298c <ip4addr_aton+0xc0>
      } else {
        break;
      }
    }
    if (c == '.') {
  132a8c:	e55b300a 	ldrb	r3, [fp, #-10]
  132a90:	e353002e 	cmp	r3, #46	; 0x2e
  132a94:	1a000012 	bne	132ae4 <ip4addr_aton+0x218>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
  132a98:	e24b3020 	sub	r3, fp, #32
  132a9c:	e283300c 	add	r3, r3, #12
  132aa0:	e51b2010 	ldr	r2, [fp, #-16]
  132aa4:	e1520003 	cmp	r2, r3
  132aa8:	3a000001 	bcc	132ab4 <ip4addr_aton+0x1e8>
        return 0;
  132aac:	e3a03000 	mov	r3, #0
  132ab0:	ea000086 	b	132cd0 <ip4addr_aton+0x404>
      }
      *pp++ = val;
  132ab4:	e51b3010 	ldr	r3, [fp, #-16]
  132ab8:	e2832004 	add	r2, r3, #4
  132abc:	e50b2010 	str	r2, [fp, #-16]
  132ac0:	e51b2008 	ldr	r2, [fp, #-8]
  132ac4:	e5832000 	str	r2, [r3]
      c = *++cp;
  132ac8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  132acc:	e2833001 	add	r3, r3, #1
  132ad0:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
  132ad4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  132ad8:	e5d33000 	ldrb	r3, [r3]
  132adc:	e54b300a 	strb	r3, [fp, #-10]
    if (!isdigit(c)) {
  132ae0:	eaffff83 	b	1328f4 <ip4addr_aton+0x28>
    } else {
      break;
  132ae4:	e320f000 	nop	{0}
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !isspace(c)) {
  132ae8:	e55b300a 	ldrb	r3, [fp, #-10]
  132aec:	e3530000 	cmp	r3, #0
  132af0:	0a000013 	beq	132b44 <ip4addr_aton+0x278>
  132af4:	e55b300a 	ldrb	r3, [fp, #-10]
  132af8:	e3530020 	cmp	r3, #32
  132afc:	0a000010 	beq	132b44 <ip4addr_aton+0x278>
  132b00:	e55b300a 	ldrb	r3, [fp, #-10]
  132b04:	e353000c 	cmp	r3, #12
  132b08:	0a00000d 	beq	132b44 <ip4addr_aton+0x278>
  132b0c:	e55b300a 	ldrb	r3, [fp, #-10]
  132b10:	e353000a 	cmp	r3, #10
  132b14:	0a00000a 	beq	132b44 <ip4addr_aton+0x278>
  132b18:	e55b300a 	ldrb	r3, [fp, #-10]
  132b1c:	e353000d 	cmp	r3, #13
  132b20:	0a000007 	beq	132b44 <ip4addr_aton+0x278>
  132b24:	e55b300a 	ldrb	r3, [fp, #-10]
  132b28:	e3530009 	cmp	r3, #9
  132b2c:	0a000004 	beq	132b44 <ip4addr_aton+0x278>
  132b30:	e55b300a 	ldrb	r3, [fp, #-10]
  132b34:	e353000b 	cmp	r3, #11
  132b38:	0a000001 	beq	132b44 <ip4addr_aton+0x278>
    return 0;
  132b3c:	e3a03000 	mov	r3, #0
  132b40:	ea000062 	b	132cd0 <ip4addr_aton+0x404>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
  132b44:	e51b2010 	ldr	r2, [fp, #-16]
  132b48:	e24b3020 	sub	r3, fp, #32
  132b4c:	e0423003 	sub	r3, r2, r3
  132b50:	e1a03143 	asr	r3, r3, #2
  132b54:	e2833001 	add	r3, r3, #1
  132b58:	e3530004 	cmp	r3, #4
  132b5c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  132b60:	ea000048 	b	132c88 <ip4addr_aton+0x3bc>
  132b64:	00132b78 	.word	0x00132b78
  132b68:	00132ca8 	.word	0x00132ca8
  132b6c:	00132b80 	.word	0x00132b80
  132b70:	00132bc0 	.word	0x00132bc0
  132b74:	00132c18 	.word	0x00132c18

  case 0:
    return 0;       /* initial nondigit */
  132b78:	e3a03000 	mov	r3, #0
  132b7c:	ea000053 	b	132cd0 <ip4addr_aton+0x404>

  case 1:             /* a -- 32 bits */
    break;

  case 2:             /* a.b -- 8.24 bits */
    if (val > 0xffffffUL) {
  132b80:	e51b3008 	ldr	r3, [fp, #-8]
  132b84:	e3530401 	cmp	r3, #16777216	; 0x1000000
  132b88:	3a000001 	bcc	132b94 <ip4addr_aton+0x2c8>
      return 0;
  132b8c:	e3a03000 	mov	r3, #0
  132b90:	ea00004e 	b	132cd0 <ip4addr_aton+0x404>
    }
    if (parts[0] > 0xff) {
  132b94:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132b98:	e35300ff 	cmp	r3, #255	; 0xff
  132b9c:	9a000001 	bls	132ba8 <ip4addr_aton+0x2dc>
      return 0;
  132ba0:	e3a03000 	mov	r3, #0
  132ba4:	ea000049 	b	132cd0 <ip4addr_aton+0x404>
    }
    val |= parts[0] << 24;
  132ba8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132bac:	e1a03c03 	lsl	r3, r3, #24
  132bb0:	e51b2008 	ldr	r2, [fp, #-8]
  132bb4:	e1823003 	orr	r3, r2, r3
  132bb8:	e50b3008 	str	r3, [fp, #-8]
    break;
  132bbc:	ea00003a 	b	132cac <ip4addr_aton+0x3e0>

  case 3:             /* a.b.c -- 8.8.16 bits */
    if (val > 0xffff) {
  132bc0:	e51b3008 	ldr	r3, [fp, #-8]
  132bc4:	e3530801 	cmp	r3, #65536	; 0x10000
  132bc8:	3a000001 	bcc	132bd4 <ip4addr_aton+0x308>
      return 0;
  132bcc:	e3a03000 	mov	r3, #0
  132bd0:	ea00003e 	b	132cd0 <ip4addr_aton+0x404>
    }
    if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
  132bd4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132bd8:	e35300ff 	cmp	r3, #255	; 0xff
  132bdc:	8a000002 	bhi	132bec <ip4addr_aton+0x320>
  132be0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  132be4:	e35300ff 	cmp	r3, #255	; 0xff
  132be8:	9a000001 	bls	132bf4 <ip4addr_aton+0x328>
      return 0;
  132bec:	e3a03000 	mov	r3, #0
  132bf0:	ea000036 	b	132cd0 <ip4addr_aton+0x404>
    }
    val |= (parts[0] << 24) | (parts[1] << 16);
  132bf4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132bf8:	e1a02c03 	lsl	r2, r3, #24
  132bfc:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  132c00:	e1a03803 	lsl	r3, r3, #16
  132c04:	e1823003 	orr	r3, r2, r3
  132c08:	e51b2008 	ldr	r2, [fp, #-8]
  132c0c:	e1823003 	orr	r3, r2, r3
  132c10:	e50b3008 	str	r3, [fp, #-8]
    break;
  132c14:	ea000024 	b	132cac <ip4addr_aton+0x3e0>

  case 4:             /* a.b.c.d -- 8.8.8.8 bits */
    if (val > 0xff) {
  132c18:	e51b3008 	ldr	r3, [fp, #-8]
  132c1c:	e35300ff 	cmp	r3, #255	; 0xff
  132c20:	9a000001 	bls	132c2c <ip4addr_aton+0x360>
      return 0;
  132c24:	e3a03000 	mov	r3, #0
  132c28:	ea000028 	b	132cd0 <ip4addr_aton+0x404>
    }
    if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
  132c2c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132c30:	e35300ff 	cmp	r3, #255	; 0xff
  132c34:	8a000005 	bhi	132c50 <ip4addr_aton+0x384>
  132c38:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  132c3c:	e35300ff 	cmp	r3, #255	; 0xff
  132c40:	8a000002 	bhi	132c50 <ip4addr_aton+0x384>
  132c44:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  132c48:	e35300ff 	cmp	r3, #255	; 0xff
  132c4c:	9a000001 	bls	132c58 <ip4addr_aton+0x38c>
      return 0;
  132c50:	e3a03000 	mov	r3, #0
  132c54:	ea00001d 	b	132cd0 <ip4addr_aton+0x404>
    }
    val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
  132c58:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132c5c:	e1a02c03 	lsl	r2, r3, #24
  132c60:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  132c64:	e1a03803 	lsl	r3, r3, #16
  132c68:	e1822003 	orr	r2, r2, r3
  132c6c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  132c70:	e1a03403 	lsl	r3, r3, #8
  132c74:	e1823003 	orr	r3, r2, r3
  132c78:	e51b2008 	ldr	r2, [fp, #-8]
  132c7c:	e1823003 	orr	r3, r2, r3
  132c80:	e50b3008 	str	r3, [fp, #-8]
    break;
  132c84:	ea000008 	b	132cac <ip4addr_aton+0x3e0>
  default:
    LWIP_ASSERT("unhandled", 0);
  132c88:	e3090ae4 	movw	r0, #39652	; 0x9ae4
  132c8c:	e3400014 	movt	r0, #20
  132c90:	ebff411f 	bl	103114 <rt_kprintf>
  132c94:	e3001103 	movw	r1, #259	; 0x103
  132c98:	e3090af0 	movw	r0, #39664	; 0x9af0
  132c9c:	e3400014 	movt	r0, #20
  132ca0:	ebff60ef 	bl	10b064 <sys_arch_assert>
    break;
  132ca4:	ea000000 	b	132cac <ip4addr_aton+0x3e0>
    break;
  132ca8:	e320f000 	nop	{0}
  }
  if (addr) {
  132cac:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  132cb0:	e3530000 	cmp	r3, #0
  132cb4:	0a000004 	beq	132ccc <ip4addr_aton+0x400>
    ip4_addr_set_u32(addr, lwip_htonl(val));
  132cb8:	e51b0008 	ldr	r0, [fp, #-8]
  132cbc:	ebff8ecb 	bl	1167f0 <lwip_htonl>
  132cc0:	e1a02000 	mov	r2, r0
  132cc4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  132cc8:	e5832000 	str	r2, [r3]
  }
  return 1;
  132ccc:	e3a03001 	mov	r3, #1
}
  132cd0:	e1a00003 	mov	r0, r3
  132cd4:	e24bd004 	sub	sp, fp, #4
  132cd8:	e8bd8800 	pop	{fp, pc}

00132cdc <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char*
ip4addr_ntoa(const ip4_addr_t *addr)
{
  132cdc:	e92d4800 	push	{fp, lr}
  132ce0:	e28db004 	add	fp, sp, #4
  132ce4:	e24dd008 	sub	sp, sp, #8
  132ce8:	e50b0008 	str	r0, [fp, #-8]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
  132cec:	e3a02010 	mov	r2, #16
  132cf0:	e30f1bd8 	movw	r1, #64472	; 0xfbd8
  132cf4:	e3401014 	movt	r1, #20
  132cf8:	e51b0008 	ldr	r0, [fp, #-8]
  132cfc:	eb000003 	bl	132d10 <ip4addr_ntoa_r>
  132d00:	e1a03000 	mov	r3, r0
}
  132d04:	e1a00003 	mov	r0, r3
  132d08:	e24bd004 	sub	sp, fp, #4
  132d0c:	e8bd8800 	pop	{fp, pc}

00132d10 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char*
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
  132d10:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  132d14:	e28db000 	add	fp, sp, #0
  132d18:	e24dd034 	sub	sp, sp, #52	; 0x34
  132d1c:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  132d20:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  132d24:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
  132d28:	e3a03000 	mov	r3, #0
  132d2c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

  s_addr = ip4_addr_get_u32(addr);
  132d30:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  132d34:	e5933000 	ldr	r3, [r3]
  132d38:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

  rp = buf;
  132d3c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  132d40:	e50b3008 	str	r3, [fp, #-8]
  ap = (u8_t *)&s_addr;
  132d44:	e24b301c 	sub	r3, fp, #28
  132d48:	e50b300c 	str	r3, [fp, #-12]
  for (n = 0; n < 4; n++) {
  132d4c:	e3a03000 	mov	r3, #0
  132d50:	e54b300d 	strb	r3, [fp, #-13]
  132d54:	ea00004b 	b	132e88 <ip4addr_ntoa_r+0x178>
    i = 0;
  132d58:	e3a03000 	mov	r3, #0
  132d5c:	e54b300e 	strb	r3, [fp, #-14]
    do {
      rem = *ap % (u8_t)10;
  132d60:	e51b300c 	ldr	r3, [fp, #-12]
  132d64:	e5d31000 	ldrb	r1, [r3]
  132d68:	e30c3ccd 	movw	r3, #52429	; 0xcccd
  132d6c:	e34c3ccc 	movt	r3, #52428	; 0xcccc
  132d70:	e0832391 	umull	r2, r3, r1, r3
  132d74:	e1a031a3 	lsr	r3, r3, #3
  132d78:	e3a0200a 	mov	r2, #10
  132d7c:	e0030392 	mul	r3, r2, r3
  132d80:	e0413003 	sub	r3, r1, r3
  132d84:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
      *ap /= (u8_t)10;
  132d88:	e51b300c 	ldr	r3, [fp, #-12]
  132d8c:	e5d32000 	ldrb	r2, [r3]
  132d90:	e30c3ccd 	movw	r3, #52429	; 0xcccd
  132d94:	e34c3ccc 	movt	r3, #52428	; 0xcccc
  132d98:	e0832392 	umull	r2, r3, r2, r3
  132d9c:	e1a031a3 	lsr	r3, r3, #3
  132da0:	e6ef2073 	uxtb	r2, r3
  132da4:	e51b300c 	ldr	r3, [fp, #-12]
  132da8:	e5c32000 	strb	r2, [r3]
      inv[i++] = (char)('0' + rem);
  132dac:	e55b300e 	ldrb	r3, [fp, #-14]
  132db0:	e2832001 	add	r2, r3, #1
  132db4:	e54b200e 	strb	r2, [fp, #-14]
  132db8:	e1a01003 	mov	r1, r3
  132dbc:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
  132dc0:	e2833030 	add	r3, r3, #48	; 0x30
  132dc4:	e6ef2073 	uxtb	r2, r3
  132dc8:	e24b3004 	sub	r3, fp, #4
  132dcc:	e0833001 	add	r3, r3, r1
  132dd0:	e543201c 	strb	r2, [r3, #-28]	; 0xffffffe4
    } while (*ap);
  132dd4:	e51b300c 	ldr	r3, [fp, #-12]
  132dd8:	e5d33000 	ldrb	r3, [r3]
  132ddc:	e3530000 	cmp	r3, #0
  132de0:	1affffde 	bne	132d60 <ip4addr_ntoa_r+0x50>
    while (i--) {
  132de4:	ea00000f 	b	132e28 <ip4addr_ntoa_r+0x118>
      if (len++ >= buflen) {
  132de8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132dec:	e2832001 	add	r2, r3, #1
  132df0:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
  132df4:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  132df8:	e1520003 	cmp	r2, r3
  132dfc:	ca000001 	bgt	132e08 <ip4addr_ntoa_r+0xf8>
        return NULL;
  132e00:	e3a03000 	mov	r3, #0
  132e04:	ea000029 	b	132eb0 <ip4addr_ntoa_r+0x1a0>
      }
      *rp++ = inv[i];
  132e08:	e55b200e 	ldrb	r2, [fp, #-14]
  132e0c:	e51b3008 	ldr	r3, [fp, #-8]
  132e10:	e2831001 	add	r1, r3, #1
  132e14:	e50b1008 	str	r1, [fp, #-8]
  132e18:	e24b1004 	sub	r1, fp, #4
  132e1c:	e0812002 	add	r2, r1, r2
  132e20:	e552201c 	ldrb	r2, [r2, #-28]	; 0xffffffe4
  132e24:	e5c32000 	strb	r2, [r3]
    while (i--) {
  132e28:	e55b300e 	ldrb	r3, [fp, #-14]
  132e2c:	e2432001 	sub	r2, r3, #1
  132e30:	e54b200e 	strb	r2, [fp, #-14]
  132e34:	e3530000 	cmp	r3, #0
  132e38:	1affffea 	bne	132de8 <ip4addr_ntoa_r+0xd8>
    }
    if (len++ >= buflen) {
  132e3c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  132e40:	e2832001 	add	r2, r3, #1
  132e44:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
  132e48:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  132e4c:	e1520003 	cmp	r2, r3
  132e50:	ca000001 	bgt	132e5c <ip4addr_ntoa_r+0x14c>
      return NULL;
  132e54:	e3a03000 	mov	r3, #0
  132e58:	ea000014 	b	132eb0 <ip4addr_ntoa_r+0x1a0>
    }
    *rp++ = '.';
  132e5c:	e51b3008 	ldr	r3, [fp, #-8]
  132e60:	e2832001 	add	r2, r3, #1
  132e64:	e50b2008 	str	r2, [fp, #-8]
  132e68:	e3a0202e 	mov	r2, #46	; 0x2e
  132e6c:	e5c32000 	strb	r2, [r3]
    ap++;
  132e70:	e51b300c 	ldr	r3, [fp, #-12]
  132e74:	e2833001 	add	r3, r3, #1
  132e78:	e50b300c 	str	r3, [fp, #-12]
  for (n = 0; n < 4; n++) {
  132e7c:	e55b300d 	ldrb	r3, [fp, #-13]
  132e80:	e2833001 	add	r3, r3, #1
  132e84:	e54b300d 	strb	r3, [fp, #-13]
  132e88:	e55b300d 	ldrb	r3, [fp, #-13]
  132e8c:	e3530003 	cmp	r3, #3
  132e90:	9affffb0 	bls	132d58 <ip4addr_ntoa_r+0x48>
  }
  *--rp = 0;
  132e94:	e51b3008 	ldr	r3, [fp, #-8]
  132e98:	e2433001 	sub	r3, r3, #1
  132e9c:	e50b3008 	str	r3, [fp, #-8]
  132ea0:	e51b3008 	ldr	r3, [fp, #-8]
  132ea4:	e3a02000 	mov	r2, #0
  132ea8:	e5c32000 	strb	r2, [r3]
  return buf;
  132eac:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
}
  132eb0:	e1a00003 	mov	r0, r3
  132eb4:	e28bd000 	add	sp, fp, #0
  132eb8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  132ebc:	e12fff1e 	bx	lr

00132ec0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
  132ec0:	e92d4800 	push	{fp, lr}
  132ec4:	e28db004 	add	fp, sp, #4
  132ec8:	e24dd010 	sub	sp, sp, #16
  struct ip_reassdata *r, *prev = NULL;
  132ecc:	e3a03000 	mov	r3, #0
  132ed0:	e50b300c 	str	r3, [fp, #-12]

  r = reassdatagrams;
  132ed4:	e30f3be8 	movw	r3, #64488	; 0xfbe8
  132ed8:	e3403014 	movt	r3, #20
  132edc:	e5933000 	ldr	r3, [r3]
  132ee0:	e50b3008 	str	r3, [fp, #-8]
  while (r != NULL) {
  132ee4:	ea000017 	b	132f48 <ip_reass_tmr+0x88>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
  132ee8:	e51b3008 	ldr	r3, [fp, #-8]
  132eec:	e5d3301f 	ldrb	r3, [r3, #31]
  132ef0:	e3530000 	cmp	r3, #0
  132ef4:	0a00000b 	beq	132f28 <ip_reass_tmr+0x68>
      r->timer--;
  132ef8:	e51b3008 	ldr	r3, [fp, #-8]
  132efc:	e5d3301f 	ldrb	r3, [r3, #31]
  132f00:	e2433001 	sub	r3, r3, #1
  132f04:	e6ef2073 	uxtb	r2, r3
  132f08:	e51b3008 	ldr	r3, [fp, #-8]
  132f0c:	e5c3201f 	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
  132f10:	e51b3008 	ldr	r3, [fp, #-8]
  132f14:	e50b300c 	str	r3, [fp, #-12]
      r = r->next;
  132f18:	e51b3008 	ldr	r3, [fp, #-8]
  132f1c:	e5933000 	ldr	r3, [r3]
  132f20:	e50b3008 	str	r3, [fp, #-8]
  132f24:	ea000007 	b	132f48 <ip_reass_tmr+0x88>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
  132f28:	e51b3008 	ldr	r3, [fp, #-8]
  132f2c:	e50b3010 	str	r3, [fp, #-16]
      /* get the next pointer before freeing */
      r = r->next;
  132f30:	e51b3008 	ldr	r3, [fp, #-8]
  132f34:	e5933000 	ldr	r3, [r3]
  132f38:	e50b3008 	str	r3, [fp, #-8]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
  132f3c:	e51b100c 	ldr	r1, [fp, #-12]
  132f40:	e51b0010 	ldr	r0, [fp, #-16]
  132f44:	eb000005 	bl	132f60 <ip_reass_free_complete_datagram>
  while (r != NULL) {
  132f48:	e51b3008 	ldr	r3, [fp, #-8]
  132f4c:	e3530000 	cmp	r3, #0
  132f50:	1affffe4 	bne	132ee8 <ip_reass_tmr+0x28>
     }
   }
}
  132f54:	e320f000 	nop	{0}
  132f58:	e24bd004 	sub	sp, fp, #4
  132f5c:	e8bd8800 	pop	{fp, pc}

00132f60 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
  132f60:	e92d4800 	push	{fp, lr}
  132f64:	e28db004 	add	fp, sp, #4
  132f68:	e24dd020 	sub	sp, sp, #32
  132f6c:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  132f70:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  u16_t pbufs_freed = 0;
  132f74:	e3a03000 	mov	r3, #0
  132f78:	e14b30b6 	strh	r3, [fp, #-6]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
  132f7c:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  132f80:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  132f84:	e1520003 	cmp	r2, r3
  132f88:	1a000006 	bne	132fa8 <ip_reass_free_complete_datagram+0x48>
  132f8c:	e3090b28 	movw	r0, #39720	; 0x9b28
  132f90:	e3400014 	movt	r0, #20
  132f94:	ebff405e 	bl	103114 <rt_kprintf>
  132f98:	e3a010a7 	mov	r1, #167	; 0xa7
  132f9c:	e3090b34 	movw	r0, #39732	; 0x9b34
  132fa0:	e3400014 	movt	r0, #20
  132fa4:	ebff602e 	bl	10b064 <sys_arch_assert>
  if (prev != NULL) {
  132fa8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  132fac:	e3530000 	cmp	r3, #0
  132fb0:	0a00000b 	beq	132fe4 <ip_reass_free_complete_datagram+0x84>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
  132fb4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  132fb8:	e5933000 	ldr	r3, [r3]
  132fbc:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  132fc0:	e1520003 	cmp	r2, r3
  132fc4:	0a000006 	beq	132fe4 <ip_reass_free_complete_datagram+0x84>
  132fc8:	e3090b6c 	movw	r0, #39788	; 0x9b6c
  132fcc:	e3400014 	movt	r0, #20
  132fd0:	ebff404f 	bl	103114 <rt_kprintf>
  132fd4:	e3a010a9 	mov	r1, #169	; 0xa9
  132fd8:	e3090b34 	movw	r0, #39732	; 0x9b34
  132fdc:	e3400014 	movt	r0, #20
  132fe0:	ebff601f 	bl	10b064 <sys_arch_assert>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
  132fe4:	e3063840 	movw	r3, #26688	; 0x6840
  132fe8:	e3403057 	movt	r3, #87	; 0x57
  132fec:	e5933150 	ldr	r3, [r3, #336]	; 0x150
  132ff0:	e2832001 	add	r2, r3, #1
  132ff4:	e3063840 	movw	r3, #26688	; 0x6840
  132ff8:	e3403057 	movt	r3, #87	; 0x57
  132ffc:	e5832150 	str	r2, [r3, #336]	; 0x150
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
  133000:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  133004:	e5933004 	ldr	r3, [r3, #4]
  133008:	e5933004 	ldr	r3, [r3, #4]
  13300c:	e50b3010 	str	r3, [fp, #-16]
  if (iprh->start == 0) {
  133010:	e51b3010 	ldr	r3, [fp, #-16]
  133014:	e1d330b4 	ldrh	r3, [r3, #4]
  133018:	e6ff3073 	uxth	r3, r3
  13301c:	e3530000 	cmp	r3, #0
  133020:	1a000026 	bne	1330c0 <ip_reass_free_complete_datagram+0x160>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
  133024:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  133028:	e5933004 	ldr	r3, [r3, #4]
  13302c:	e50b300c 	str	r3, [fp, #-12]
    ipr->p = iprh->next_pbuf;
  133030:	e51b3010 	ldr	r3, [fp, #-16]
  133034:	e5932000 	ldr	r2, [r3]
  133038:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  13303c:	e5832004 	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
  133040:	e51b300c 	ldr	r3, [fp, #-12]
  133044:	e5930004 	ldr	r0, [r3, #4]
  133048:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  13304c:	e2833008 	add	r3, r3, #8
  133050:	e3a02014 	mov	r2, #20
  133054:	e1a01003 	mov	r1, r3
  133058:	eb0037c7 	bl	140f7c <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
  13305c:	e3a01001 	mov	r1, #1
  133060:	e51b000c 	ldr	r0, [fp, #-12]
  133064:	ebfff396 	bl	12fec4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
  133068:	e51b000c 	ldr	r0, [fp, #-12]
  13306c:	ebffa08f 	bl	11b2b0 <pbuf_clen>
  133070:	e1a03000 	mov	r3, r0
  133074:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
  133078:	e15b20b6 	ldrh	r2, [fp, #-6]
  13307c:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  133080:	e0823003 	add	r3, r2, r3
  133084:	e3530801 	cmp	r3, #65536	; 0x10000
  133088:	ba000006 	blt	1330a8 <ip_reass_free_complete_datagram+0x148>
  13308c:	e3090b80 	movw	r0, #39808	; 0x9b80
  133090:	e3400014 	movt	r0, #20
  133094:	ebff401e 	bl	103114 <rt_kprintf>
  133098:	e3a010b8 	mov	r1, #184	; 0xb8
  13309c:	e3090b34 	movw	r0, #39732	; 0x9b34
  1330a0:	e3400014 	movt	r0, #20
  1330a4:	ebff5fee 	bl	10b064 <sys_arch_assert>
    pbufs_freed += clen;
  1330a8:	e15b20b6 	ldrh	r2, [fp, #-6]
  1330ac:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  1330b0:	e0823003 	add	r3, r2, r3
  1330b4:	e14b30b6 	strh	r3, [fp, #-6]
    pbuf_free(p);
  1330b8:	e51b000c 	ldr	r0, [fp, #-12]
  1330bc:	ebff9ff6 	bl	11b09c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
  1330c0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1330c4:	e5933004 	ldr	r3, [r3, #4]
  1330c8:	e50b300c 	str	r3, [fp, #-12]
  while (p != NULL) {
  1330cc:	ea00001d 	b	133148 <ip_reass_free_complete_datagram+0x1e8>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
  1330d0:	e51b300c 	ldr	r3, [fp, #-12]
  1330d4:	e5933004 	ldr	r3, [r3, #4]
  1330d8:	e50b3010 	str	r3, [fp, #-16]
    pcur = p;
  1330dc:	e51b300c 	ldr	r3, [fp, #-12]
  1330e0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
  1330e4:	e51b3010 	ldr	r3, [fp, #-16]
  1330e8:	e5933000 	ldr	r3, [r3]
  1330ec:	e50b300c 	str	r3, [fp, #-12]
    clen = pbuf_clen(pcur);
  1330f0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1330f4:	ebffa06d 	bl	11b2b0 <pbuf_clen>
  1330f8:	e1a03000 	mov	r3, r0
  1330fc:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
  133100:	e15b20b6 	ldrh	r2, [fp, #-6]
  133104:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  133108:	e0823003 	add	r3, r2, r3
  13310c:	e3530801 	cmp	r3, #65536	; 0x10000
  133110:	ba000006 	blt	133130 <ip_reass_free_complete_datagram+0x1d0>
  133114:	e3090b80 	movw	r0, #39808	; 0x9b80
  133118:	e3400014 	movt	r0, #20
  13311c:	ebff3ffc 	bl	103114 <rt_kprintf>
  133120:	e3a010c8 	mov	r1, #200	; 0xc8
  133124:	e3090b34 	movw	r0, #39732	; 0x9b34
  133128:	e3400014 	movt	r0, #20
  13312c:	ebff5fcc 	bl	10b064 <sys_arch_assert>
    pbufs_freed += clen;
  133130:	e15b20b6 	ldrh	r2, [fp, #-6]
  133134:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  133138:	e0823003 	add	r3, r2, r3
  13313c:	e14b30b6 	strh	r3, [fp, #-6]
    pbuf_free(pcur);
  133140:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  133144:	ebff9fd4 	bl	11b09c <pbuf_free>
  while (p != NULL) {
  133148:	e51b300c 	ldr	r3, [fp, #-12]
  13314c:	e3530000 	cmp	r3, #0
  133150:	1affffde 	bne	1330d0 <ip_reass_free_complete_datagram+0x170>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
  133154:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  133158:	e51b0020 	ldr	r0, [fp, #-32]	; 0xffffffe0
  13315c:	eb0000b9 	bl	133448 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
  133160:	e30f3bec 	movw	r3, #64492	; 0xfbec
  133164:	e3403014 	movt	r3, #20
  133168:	e1d330b0 	ldrh	r3, [r3]
  13316c:	e15b20b6 	ldrh	r2, [fp, #-6]
  133170:	e1520003 	cmp	r2, r3
  133174:	9a000006 	bls	133194 <ip_reass_free_complete_datagram+0x234>
  133178:	e3090ba0 	movw	r0, #39840	; 0x9ba0
  13317c:	e3400014 	movt	r0, #20
  133180:	ebff3fe3 	bl	103114 <rt_kprintf>
  133184:	e3a010ce 	mov	r1, #206	; 0xce
  133188:	e3090b34 	movw	r0, #39732	; 0x9b34
  13318c:	e3400014 	movt	r0, #20
  133190:	ebff5fb3 	bl	10b064 <sys_arch_assert>
  ip_reass_pbufcount -= pbufs_freed;
  133194:	e30f3bec 	movw	r3, #64492	; 0xfbec
  133198:	e3403014 	movt	r3, #20
  13319c:	e1d320b0 	ldrh	r2, [r3]
  1331a0:	e15b30b6 	ldrh	r3, [fp, #-6]
  1331a4:	e0423003 	sub	r3, r2, r3
  1331a8:	e6ff2073 	uxth	r2, r3
  1331ac:	e30f3bec 	movw	r3, #64492	; 0xfbec
  1331b0:	e3403014 	movt	r3, #20
  1331b4:	e1c320b0 	strh	r2, [r3]

  return pbufs_freed;
  1331b8:	e15b30b6 	ldrh	r3, [fp, #-6]
}
  1331bc:	e1a00003 	mov	r0, r3
  1331c0:	e24bd004 	sub	sp, fp, #4
  1331c4:	e8bd8800 	pop	{fp, pc}

001331c8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
  1331c8:	e92d4800 	push	{fp, lr}
  1331cc:	e28db004 	add	fp, sp, #4
  1331d0:	e24dd028 	sub	sp, sp, #40	; 0x28
  1331d4:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  1331d8:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
  1331dc:	e3a03000 	mov	r3, #0
  1331e0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
  1331e4:	e3a03000 	mov	r3, #0
  1331e8:	e50b300c 	str	r3, [fp, #-12]
    prev = NULL;
  1331ec:	e3a03000 	mov	r3, #0
  1331f0:	e50b3010 	str	r3, [fp, #-16]
    oldest_prev = NULL;
  1331f4:	e3a03000 	mov	r3, #0
  1331f8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    other_datagrams = 0;
  1331fc:	e3a03000 	mov	r3, #0
  133200:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    r = reassdatagrams;
  133204:	e30f3be8 	movw	r3, #64488	; 0xfbe8
  133208:	e3403014 	movt	r3, #20
  13320c:	e5933000 	ldr	r3, [r3]
  133210:	e50b3008 	str	r3, [fp, #-8]
    while (r != NULL) {
  133214:	ea000030 	b	1332dc <ip_reass_remove_oldest_datagram+0x114>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
  133218:	e51b3008 	ldr	r3, [fp, #-8]
  13321c:	e5932014 	ldr	r2, [r3, #20]
  133220:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  133224:	e593300c 	ldr	r3, [r3, #12]
  133228:	e1520003 	cmp	r2, r3
  13322c:	1a00000c 	bne	133264 <ip_reass_remove_oldest_datagram+0x9c>
  133230:	e51b3008 	ldr	r3, [fp, #-8]
  133234:	e5932018 	ldr	r2, [r3, #24]
  133238:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  13323c:	e5933010 	ldr	r3, [r3, #16]
  133240:	e1520003 	cmp	r2, r3
  133244:	1a000006 	bne	133264 <ip_reass_remove_oldest_datagram+0x9c>
  133248:	e51b3008 	ldr	r3, [fp, #-8]
  13324c:	e1d320bc 	ldrh	r2, [r3, #12]
  133250:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  133254:	e1d330b4 	ldrh	r3, [r3, #4]
  133258:	e6ff3073 	uxth	r3, r3
  13325c:	e1520003 	cmp	r2, r3
  133260:	0a000014 	beq	1332b8 <ip_reass_remove_oldest_datagram+0xf0>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
  133264:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  133268:	e2833001 	add	r3, r3, #1
  13326c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
        if (oldest == NULL) {
  133270:	e51b300c 	ldr	r3, [fp, #-12]
  133274:	e3530000 	cmp	r3, #0
  133278:	1a000004 	bne	133290 <ip_reass_remove_oldest_datagram+0xc8>
          oldest = r;
  13327c:	e51b3008 	ldr	r3, [fp, #-8]
  133280:	e50b300c 	str	r3, [fp, #-12]
          oldest_prev = prev;
  133284:	e51b3010 	ldr	r3, [fp, #-16]
  133288:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  13328c:	ea000009 	b	1332b8 <ip_reass_remove_oldest_datagram+0xf0>
        } else if (r->timer <= oldest->timer) {
  133290:	e51b3008 	ldr	r3, [fp, #-8]
  133294:	e5d3201f 	ldrb	r2, [r3, #31]
  133298:	e51b300c 	ldr	r3, [fp, #-12]
  13329c:	e5d3301f 	ldrb	r3, [r3, #31]
  1332a0:	e1520003 	cmp	r2, r3
  1332a4:	8a000003 	bhi	1332b8 <ip_reass_remove_oldest_datagram+0xf0>
          /* older than the previous oldest */
          oldest = r;
  1332a8:	e51b3008 	ldr	r3, [fp, #-8]
  1332ac:	e50b300c 	str	r3, [fp, #-12]
          oldest_prev = prev;
  1332b0:	e51b3010 	ldr	r3, [fp, #-16]
  1332b4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        }
      }
      if (r->next != NULL) {
  1332b8:	e51b3008 	ldr	r3, [fp, #-8]
  1332bc:	e5933000 	ldr	r3, [r3]
  1332c0:	e3530000 	cmp	r3, #0
  1332c4:	0a000001 	beq	1332d0 <ip_reass_remove_oldest_datagram+0x108>
        prev = r;
  1332c8:	e51b3008 	ldr	r3, [fp, #-8]
  1332cc:	e50b3010 	str	r3, [fp, #-16]
      }
      r = r->next;
  1332d0:	e51b3008 	ldr	r3, [fp, #-8]
  1332d4:	e5933000 	ldr	r3, [r3]
  1332d8:	e50b3008 	str	r3, [fp, #-8]
    while (r != NULL) {
  1332dc:	e51b3008 	ldr	r3, [fp, #-8]
  1332e0:	e3530000 	cmp	r3, #0
  1332e4:	1affffcb 	bne	133218 <ip_reass_remove_oldest_datagram+0x50>
    }
    if (oldest != NULL) {
  1332e8:	e51b300c 	ldr	r3, [fp, #-12]
  1332ec:	e3530000 	cmp	r3, #0
  1332f0:	0a000007 	beq	133314 <ip_reass_remove_oldest_datagram+0x14c>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
  1332f4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1332f8:	e51b000c 	ldr	r0, [fp, #-12]
  1332fc:	ebffff17 	bl	132f60 <ip_reass_free_complete_datagram>
  133300:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
      pbufs_freed += pbufs_freed_current;
  133304:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  133308:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  13330c:	e0823003 	add	r3, r2, r3
  133310:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
  133314:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  133318:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  13331c:	e1520003 	cmp	r2, r3
  133320:	aa000002 	bge	133330 <ip_reass_remove_oldest_datagram+0x168>
  133324:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  133328:	e3530001 	cmp	r3, #1
  13332c:	caffffac 	bgt	1331e4 <ip_reass_remove_oldest_datagram+0x1c>
  return pbufs_freed;
  133330:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
}
  133334:	e1a00003 	mov	r0, r3
  133338:	e24bd004 	sub	sp, fp, #4
  13333c:	e8bd8800 	pop	{fp, pc}

00133340 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
  133340:	e92d4800 	push	{fp, lr}
  133344:	e28db004 	add	fp, sp, #4
  133348:	e24dd010 	sub	sp, sp, #16
  13334c:	e50b0010 	str	r0, [fp, #-16]
  133350:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
  133354:	e300211a 	movw	r2, #282	; 0x11a
  133358:	e3091b34 	movw	r1, #39732	; 0x9b34
  13335c:	e3401014 	movt	r1, #20
  133360:	e3a00005 	mov	r0, #5
  133364:	ebff97d6 	bl	1192c4 <memp_malloc_fn>
  133368:	e50b0008 	str	r0, [fp, #-8]
  if (ipr == NULL) {
  13336c:	e51b3008 	ldr	r3, [fp, #-8]
  133370:	e3530000 	cmp	r3, #0
  133374:	1a000019 	bne	1333e0 <ip_reass_enqueue_new_datagram+0xa0>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
  133378:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  13337c:	e51b0010 	ldr	r0, [fp, #-16]
  133380:	ebffff90 	bl	1331c8 <ip_reass_remove_oldest_datagram>
  133384:	e1a02000 	mov	r2, r0
  133388:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13338c:	e1530002 	cmp	r3, r2
  133390:	ca000005 	bgt	1333ac <ip_reass_enqueue_new_datagram+0x6c>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
  133394:	e300211e 	movw	r2, #286	; 0x11e
  133398:	e3091b34 	movw	r1, #39732	; 0x9b34
  13339c:	e3401014 	movt	r1, #20
  1333a0:	e3a00005 	mov	r0, #5
  1333a4:	ebff97c6 	bl	1192c4 <memp_malloc_fn>
  1333a8:	e50b0008 	str	r0, [fp, #-8]
    }
    if (ipr == NULL)
  1333ac:	e51b3008 	ldr	r3, [fp, #-8]
  1333b0:	e3530000 	cmp	r3, #0
  1333b4:	1a000009 	bne	1333e0 <ip_reass_enqueue_new_datagram+0xa0>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
  1333b8:	e3063840 	movw	r3, #26688	; 0x6840
  1333bc:	e3403057 	movt	r3, #87	; 0x57
  1333c0:	e1d333bc 	ldrh	r3, [r3, #60]	; 0x3c
  1333c4:	e2833001 	add	r3, r3, #1
  1333c8:	e6ff2073 	uxth	r2, r3
  1333cc:	e3063840 	movw	r3, #26688	; 0x6840
  1333d0:	e3403057 	movt	r3, #87	; 0x57
  1333d4:	e1c323bc 	strh	r2, [r3, #60]	; 0x3c
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
  1333d8:	e3a03000 	mov	r3, #0
  1333dc:	ea000016 	b	13343c <ip_reass_enqueue_new_datagram+0xfc>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
  1333e0:	e3a02020 	mov	r2, #32
  1333e4:	e3a01000 	mov	r1, #0
  1333e8:	e51b0008 	ldr	r0, [fp, #-8]
  1333ec:	eb00381a 	bl	14145c <memset>
  ipr->timer = IP_REASS_MAXAGE;
  1333f0:	e51b3008 	ldr	r3, [fp, #-8]
  1333f4:	e3a02003 	mov	r2, #3
  1333f8:	e5c3201f 	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
  1333fc:	e30f3be8 	movw	r3, #64488	; 0xfbe8
  133400:	e3403014 	movt	r3, #20
  133404:	e5932000 	ldr	r2, [r3]
  133408:	e51b3008 	ldr	r3, [fp, #-8]
  13340c:	e5832000 	str	r2, [r3]
  reassdatagrams = ipr;
  133410:	e30f3be8 	movw	r3, #64488	; 0xfbe8
  133414:	e3403014 	movt	r3, #20
  133418:	e51b2008 	ldr	r2, [fp, #-8]
  13341c:	e5832000 	str	r2, [r3]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
  133420:	e51b3008 	ldr	r3, [fp, #-8]
  133424:	e2833008 	add	r3, r3, #8
  133428:	e3a02014 	mov	r2, #20
  13342c:	e51b1010 	ldr	r1, [fp, #-16]
  133430:	e1a00003 	mov	r0, r3
  133434:	eb0036d0 	bl	140f7c <memcpy>
  return ipr;
  133438:	e51b3008 	ldr	r3, [fp, #-8]
}
  13343c:	e1a00003 	mov	r0, r3
  133440:	e24bd004 	sub	sp, fp, #4
  133444:	e8bd8800 	pop	{fp, pc}

00133448 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
  133448:	e92d4800 	push	{fp, lr}
  13344c:	e28db004 	add	fp, sp, #4
  133450:	e24dd008 	sub	sp, sp, #8
  133454:	e50b0008 	str	r0, [fp, #-8]
  133458:	e50b100c 	str	r1, [fp, #-12]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
  13345c:	e30f3be8 	movw	r3, #64488	; 0xfbe8
  133460:	e3403014 	movt	r3, #20
  133464:	e5933000 	ldr	r3, [r3]
  133468:	e51b2008 	ldr	r2, [fp, #-8]
  13346c:	e1520003 	cmp	r2, r3
  133470:	1a000005 	bne	13348c <ip_reass_dequeue_datagram+0x44>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
  133474:	e51b3008 	ldr	r3, [fp, #-8]
  133478:	e5932000 	ldr	r2, [r3]
  13347c:	e30f3be8 	movw	r3, #64488	; 0xfbe8
  133480:	e3403014 	movt	r3, #20
  133484:	e5832000 	str	r2, [r3]
  133488:	ea00000d 	b	1334c4 <ip_reass_dequeue_datagram+0x7c>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
  13348c:	e51b300c 	ldr	r3, [fp, #-12]
  133490:	e3530000 	cmp	r3, #0
  133494:	1a000006 	bne	1334b4 <ip_reass_dequeue_datagram+0x6c>
  133498:	e3090bbc 	movw	r0, #39868	; 0x9bbc
  13349c:	e3400014 	movt	r0, #20
  1334a0:	ebff3f1b 	bl	103114 <rt_kprintf>
  1334a4:	e3001141 	movw	r1, #321	; 0x141
  1334a8:	e3090b34 	movw	r0, #39732	; 0x9b34
  1334ac:	e3400014 	movt	r0, #20
  1334b0:	ebff5eeb 	bl	10b064 <sys_arch_assert>
    prev->next = ipr->next;
  1334b4:	e51b3008 	ldr	r3, [fp, #-8]
  1334b8:	e5932000 	ldr	r2, [r3]
  1334bc:	e51b300c 	ldr	r3, [fp, #-12]
  1334c0:	e5832000 	str	r2, [r3]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
  1334c4:	e51b1008 	ldr	r1, [fp, #-8]
  1334c8:	e3a00005 	mov	r0, #5
  1334cc:	ebff97e4 	bl	119464 <memp_free>
}
  1334d0:	e320f000 	nop	{0}
  1334d4:	e24bd004 	sub	sp, fp, #4
  1334d8:	e8bd8800 	pop	{fp, pc}

001334dc <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param new_p points to the pbuf for the current fragment
 * @return 0 if invalid, >0 otherwise
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p)
{
  1334dc:	e92d4800 	push	{fp, lr}
  1334e0:	e28db004 	add	fp, sp, #4
  1334e4:	e24dd028 	sub	sp, sp, #40	; 0x28
  1334e8:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  1334ec:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
  1334f0:	e3a03000 	mov	r3, #0
  1334f4:	e50b300c 	str	r3, [fp, #-12]
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
  1334f8:	e3a03001 	mov	r3, #1
  1334fc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
  133500:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  133504:	e5933004 	ldr	r3, [r3, #4]
  133508:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
  13350c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  133510:	e1d330b2 	ldrh	r3, [r3, #2]
  133514:	e6ff3073 	uxth	r3, r3
  133518:	e1a00003 	mov	r0, r3
  13351c:	ebff8ca7 	bl	1167c0 <lwip_htons>
  133520:	e1a03000 	mov	r3, r0
  133524:	e1a02003 	mov	r2, r3
  133528:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  13352c:	e5d33000 	ldrb	r3, [r3]
  133530:	e6ff3073 	uxth	r3, r3
  133534:	e203300f 	and	r3, r3, #15
  133538:	e6ff3073 	uxth	r3, r3
  13353c:	e1a03103 	lsl	r3, r3, #2
  133540:	e6ff3073 	uxth	r3, r3
  133544:	e0423003 	sub	r3, r2, r3
  133548:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
  13354c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  133550:	e1d330b6 	ldrh	r3, [r3, #6]
  133554:	e6ff3073 	uxth	r3, r3
  133558:	e1a00003 	mov	r0, r3
  13355c:	ebff8c97 	bl	1167c0 <lwip_htons>
  133560:	e1a03000 	mov	r3, r0
  133564:	e7ec3053 	ubfx	r3, r3, #0, #13
  133568:	e6ff3073 	uxth	r3, r3
  13356c:	e1a03183 	lsl	r3, r3, #3
  133570:	e14b31bc 	strh	r3, [fp, #-28]	; 0xffffffe4
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
  133574:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  133578:	e5933004 	ldr	r3, [r3, #4]
  13357c:	e50b3008 	str	r3, [fp, #-8]
  iprh->next_pbuf = NULL;
  133580:	e51b3008 	ldr	r3, [fp, #-8]
  133584:	e3a02000 	mov	r2, #0
  133588:	e5c32000 	strb	r2, [r3]
  13358c:	e3a02000 	mov	r2, #0
  133590:	e5c32001 	strb	r2, [r3, #1]
  133594:	e3a02000 	mov	r2, #0
  133598:	e5c32002 	strb	r2, [r3, #2]
  13359c:	e3a02000 	mov	r2, #0
  1335a0:	e5c32003 	strb	r2, [r3, #3]
  iprh->start = offset;
  1335a4:	e51b3008 	ldr	r3, [fp, #-8]
  1335a8:	e15b21bc 	ldrh	r2, [fp, #-28]	; 0xffffffe4
  1335ac:	e1c320b4 	strh	r2, [r3, #4]
  iprh->end = offset + len;
  1335b0:	e15b21bc 	ldrh	r2, [fp, #-28]	; 0xffffffe4
  1335b4:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  1335b8:	e0823003 	add	r3, r2, r3
  1335bc:	e6ff2073 	uxth	r2, r3
  1335c0:	e51b3008 	ldr	r3, [fp, #-8]
  1335c4:	e1c320b6 	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
  1335c8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1335cc:	e5933004 	ldr	r3, [r3, #4]
  1335d0:	e50b3010 	str	r3, [fp, #-16]
  1335d4:	ea00004a 	b	133704 <ip_reass_chain_frag_into_datagram_and_validate+0x228>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
  1335d8:	e51b3010 	ldr	r3, [fp, #-16]
  1335dc:	e5933004 	ldr	r3, [r3, #4]
  1335e0:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
    if (iprh->start < iprh_tmp->start) {
  1335e4:	e51b3008 	ldr	r3, [fp, #-8]
  1335e8:	e1d330b4 	ldrh	r3, [r3, #4]
  1335ec:	e6ff2073 	uxth	r2, r3
  1335f0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1335f4:	e1d330b4 	ldrh	r3, [r3, #4]
  1335f8:	e6ff3073 	uxth	r3, r3
  1335fc:	e1520003 	cmp	r2, r3
  133600:	2a00001d 	bcs	13367c <ip_reass_chain_frag_into_datagram_and_validate+0x1a0>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
  133604:	e51b3008 	ldr	r3, [fp, #-8]
  133608:	e51b2010 	ldr	r2, [fp, #-16]
  13360c:	e5832000 	str	r2, [r3]
      if (iprh_prev != NULL) {
  133610:	e51b300c 	ldr	r3, [fp, #-12]
  133614:	e3530000 	cmp	r3, #0
  133618:	0a000013 	beq	13366c <ip_reass_chain_frag_into_datagram_and_validate+0x190>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
  13361c:	e51b3008 	ldr	r3, [fp, #-8]
  133620:	e1d330b4 	ldrh	r3, [r3, #4]
  133624:	e6ff2073 	uxth	r2, r3
  133628:	e51b300c 	ldr	r3, [fp, #-12]
  13362c:	e1d330b6 	ldrh	r3, [r3, #6]
  133630:	e6ff3073 	uxth	r3, r3
  133634:	e1520003 	cmp	r2, r3
  133638:	3a0000cf 	bcc	13397c <ip_reass_chain_frag_into_datagram_and_validate+0x4a0>
  13363c:	e51b3008 	ldr	r3, [fp, #-8]
  133640:	e1d330b6 	ldrh	r3, [r3, #6]
  133644:	e6ff2073 	uxth	r2, r3
  133648:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  13364c:	e1d330b4 	ldrh	r3, [r3, #4]
  133650:	e6ff3073 	uxth	r3, r3
  133654:	e1520003 	cmp	r2, r3
  133658:	8a0000c7 	bhi	13397c <ip_reass_chain_frag_into_datagram_and_validate+0x4a0>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
  13365c:	e51b300c 	ldr	r3, [fp, #-12]
  133660:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  133664:	e5832000 	str	r2, [r3]
      } else {
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
  133668:	ea000028 	b	133710 <ip_reass_chain_frag_into_datagram_and_validate+0x234>
        ipr->p = new_p;
  13366c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  133670:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  133674:	e5832004 	str	r2, [r3, #4]
      break;
  133678:	ea000024 	b	133710 <ip_reass_chain_frag_into_datagram_and_validate+0x234>
    } else if (iprh->start == iprh_tmp->start) {
  13367c:	e51b3008 	ldr	r3, [fp, #-8]
  133680:	e1d330b4 	ldrh	r3, [r3, #4]
  133684:	e6ff2073 	uxth	r2, r3
  133688:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  13368c:	e1d330b4 	ldrh	r3, [r3, #4]
  133690:	e6ff3073 	uxth	r3, r3
  133694:	e1520003 	cmp	r2, r3
  133698:	0a0000b9 	beq	133984 <ip_reass_chain_frag_into_datagram_and_validate+0x4a8>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
  13369c:	e51b3008 	ldr	r3, [fp, #-8]
  1336a0:	e1d330b4 	ldrh	r3, [r3, #4]
  1336a4:	e6ff2073 	uxth	r2, r3
  1336a8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1336ac:	e1d330b6 	ldrh	r3, [r3, #6]
  1336b0:	e6ff3073 	uxth	r3, r3
  1336b4:	e1520003 	cmp	r2, r3
  1336b8:	3a0000b3 	bcc	13398c <ip_reass_chain_frag_into_datagram_and_validate+0x4b0>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
  1336bc:	e51b300c 	ldr	r3, [fp, #-12]
  1336c0:	e3530000 	cmp	r3, #0
  1336c4:	0a000009 	beq	1336f0 <ip_reass_chain_frag_into_datagram_and_validate+0x214>
        if (iprh_prev->end != iprh_tmp->start) {
  1336c8:	e51b300c 	ldr	r3, [fp, #-12]
  1336cc:	e1d330b6 	ldrh	r3, [r3, #6]
  1336d0:	e6ff2073 	uxth	r2, r3
  1336d4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1336d8:	e1d330b4 	ldrh	r3, [r3, #4]
  1336dc:	e6ff3073 	uxth	r3, r3
  1336e0:	e1520003 	cmp	r2, r3
  1336e4:	0a000001 	beq	1336f0 <ip_reass_chain_frag_into_datagram_and_validate+0x214>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
  1336e8:	e3a03000 	mov	r3, #0
  1336ec:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
        }
      }
    }
    q = iprh_tmp->next_pbuf;
  1336f0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1336f4:	e5933000 	ldr	r3, [r3]
  1336f8:	e50b3010 	str	r3, [fp, #-16]
    iprh_prev = iprh_tmp;
  1336fc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  133700:	e50b300c 	str	r3, [fp, #-12]
  for (q = ipr->p; q != NULL;) {
  133704:	e51b3010 	ldr	r3, [fp, #-16]
  133708:	e3530000 	cmp	r3, #0
  13370c:	1affffb1 	bne	1335d8 <ip_reass_chain_frag_into_datagram_and_validate+0xfc>
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
  133710:	e51b3010 	ldr	r3, [fp, #-16]
  133714:	e3530000 	cmp	r3, #0
  133718:	1a00002d 	bne	1337d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2f8>
    if (iprh_prev != NULL) {
  13371c:	e51b300c 	ldr	r3, [fp, #-12]
  133720:	e3530000 	cmp	r3, #0
  133724:	0a00001c 	beq	13379c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
  133728:	e51b300c 	ldr	r3, [fp, #-12]
  13372c:	e1d330b6 	ldrh	r3, [r3, #6]
  133730:	e6ff2073 	uxth	r2, r3
  133734:	e51b3008 	ldr	r3, [fp, #-8]
  133738:	e1d330b4 	ldrh	r3, [r3, #4]
  13373c:	e6ff3073 	uxth	r3, r3
  133740:	e1520003 	cmp	r2, r3
  133744:	9a000006 	bls	133764 <ip_reass_chain_frag_into_datagram_and_validate+0x288>
  133748:	e3090bd8 	movw	r0, #39896	; 0x9bd8
  13374c:	e3400014 	movt	r0, #20
  133750:	ebff3e6f 	bl	103114 <rt_kprintf>
  133754:	e300119b 	movw	r1, #411	; 0x19b
  133758:	e3090b34 	movw	r0, #39732	; 0x9b34
  13375c:	e3400014 	movt	r0, #20
  133760:	ebff5e3f 	bl	10b064 <sys_arch_assert>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
  133764:	e51b300c 	ldr	r3, [fp, #-12]
  133768:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  13376c:	e5832000 	str	r2, [r3]
      if (iprh_prev->end != iprh->start) {
  133770:	e51b300c 	ldr	r3, [fp, #-12]
  133774:	e1d330b6 	ldrh	r3, [r3, #6]
  133778:	e6ff2073 	uxth	r2, r3
  13377c:	e51b3008 	ldr	r3, [fp, #-8]
  133780:	e1d330b4 	ldrh	r3, [r3, #4]
  133784:	e6ff3073 	uxth	r3, r3
  133788:	e1520003 	cmp	r2, r3
  13378c:	0a000010 	beq	1337d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2f8>
        valid = 0;
  133790:	e3a03000 	mov	r3, #0
  133794:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  133798:	ea00000d 	b	1337d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2f8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
  13379c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1337a0:	e5933004 	ldr	r3, [r3, #4]
  1337a4:	e3530000 	cmp	r3, #0
  1337a8:	0a000006 	beq	1337c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2ec>
  1337ac:	e3090bf8 	movw	r0, #39928	; 0x9bf8
  1337b0:	e3400014 	movt	r0, #20
  1337b4:	ebff3e56 	bl	103114 <rt_kprintf>
  1337b8:	e3a01f69 	mov	r1, #420	; 0x1a4
  1337bc:	e3090b34 	movw	r0, #39732	; 0x9b34
  1337c0:	e3400014 	movt	r0, #20
  1337c4:	ebff5e26 	bl	10b064 <sys_arch_assert>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
  1337c8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1337cc:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  1337d0:	e5832004 	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0) {
  1337d4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1337d8:	e5d3301e 	ldrb	r3, [r3, #30]
  1337dc:	e2033001 	and	r3, r3, #1
  1337e0:	e3530000 	cmp	r3, #0
  1337e4:	0a000062 	beq	133974 <ip_reass_chain_frag_into_datagram_and_validate+0x498>
    /* and had no holes so far */
    if (valid) {
  1337e8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1337ec:	e3530000 	cmp	r3, #0
  1337f0:	0a00005d 	beq	13396c <ip_reass_chain_frag_into_datagram_and_validate+0x490>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
  1337f4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1337f8:	e5933004 	ldr	r3, [r3, #4]
  1337fc:	e3530000 	cmp	r3, #0
  133800:	0a000006 	beq	133820 <ip_reass_chain_frag_into_datagram_and_validate+0x344>
  133804:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  133808:	e5933004 	ldr	r3, [r3, #4]
  13380c:	e5933004 	ldr	r3, [r3, #4]
  133810:	e1d330b4 	ldrh	r3, [r3, #4]
  133814:	e6ff3073 	uxth	r3, r3
  133818:	e3530000 	cmp	r3, #0
  13381c:	0a000002 	beq	13382c <ip_reass_chain_frag_into_datagram_and_validate+0x350>
        valid = 0;
  133820:	e3a03000 	mov	r3, #0
  133824:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  133828:	ea00004f 	b	13396c <ip_reass_chain_frag_into_datagram_and_validate+0x490>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
  13382c:	e51b3008 	ldr	r3, [fp, #-8]
  133830:	e50b300c 	str	r3, [fp, #-12]
        q = iprh->next_pbuf;
  133834:	e51b3008 	ldr	r3, [fp, #-8]
  133838:	e5933000 	ldr	r3, [r3]
  13383c:	e50b3010 	str	r3, [fp, #-16]
        while (q != NULL) {
  133840:	ea000012 	b	133890 <ip_reass_chain_frag_into_datagram_and_validate+0x3b4>
          iprh = (struct ip_reass_helper*)q->payload;
  133844:	e51b3010 	ldr	r3, [fp, #-16]
  133848:	e5933004 	ldr	r3, [r3, #4]
  13384c:	e50b3008 	str	r3, [fp, #-8]
          if (iprh_prev->end != iprh->start) {
  133850:	e51b300c 	ldr	r3, [fp, #-12]
  133854:	e1d330b6 	ldrh	r3, [r3, #6]
  133858:	e6ff2073 	uxth	r2, r3
  13385c:	e51b3008 	ldr	r3, [fp, #-8]
  133860:	e1d330b4 	ldrh	r3, [r3, #4]
  133864:	e6ff3073 	uxth	r3, r3
  133868:	e1520003 	cmp	r2, r3
  13386c:	0a000002 	beq	13387c <ip_reass_chain_frag_into_datagram_and_validate+0x3a0>
            valid = 0;
  133870:	e3a03000 	mov	r3, #0
  133874:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
            break;
  133878:	ea000007 	b	13389c <ip_reass_chain_frag_into_datagram_and_validate+0x3c0>
          }
          iprh_prev = iprh;
  13387c:	e51b3008 	ldr	r3, [fp, #-8]
  133880:	e50b300c 	str	r3, [fp, #-12]
          q = iprh->next_pbuf;
  133884:	e51b3008 	ldr	r3, [fp, #-8]
  133888:	e5933000 	ldr	r3, [r3]
  13388c:	e50b3010 	str	r3, [fp, #-16]
        while (q != NULL) {
  133890:	e51b3010 	ldr	r3, [fp, #-16]
  133894:	e3530000 	cmp	r3, #0
  133898:	1affffe9 	bne	133844 <ip_reass_chain_frag_into_datagram_and_validate+0x368>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
  13389c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1338a0:	e3530000 	cmp	r3, #0
  1338a4:	0a000030 	beq	13396c <ip_reass_chain_frag_into_datagram_and_validate+0x490>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
  1338a8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1338ac:	e5933004 	ldr	r3, [r3, #4]
  1338b0:	e3530000 	cmp	r3, #0
  1338b4:	1a000006 	bne	1338d4 <ip_reass_chain_frag_into_datagram_and_validate+0x3f8>
  1338b8:	e3090c30 	movw	r0, #39984	; 0x9c30
  1338bc:	e3400014 	movt	r0, #20
  1338c0:	ebff3e13 	bl	103114 <rt_kprintf>
  1338c4:	e3a01f71 	mov	r1, #452	; 0x1c4
  1338c8:	e3090b34 	movw	r0, #39732	; 0x9b34
  1338cc:	e3400014 	movt	r0, #20
  1338d0:	ebff5de3 	bl	10b064 <sys_arch_assert>
          LWIP_ASSERT("sanity check",
  1338d4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1338d8:	e5933004 	ldr	r3, [r3, #4]
  1338dc:	e5933004 	ldr	r3, [r3, #4]
  1338e0:	e51b2008 	ldr	r2, [fp, #-8]
  1338e4:	e1520003 	cmp	r2, r3
  1338e8:	1a000006 	bne	133908 <ip_reass_chain_frag_into_datagram_and_validate+0x42c>
  1338ec:	e3090c30 	movw	r0, #39984	; 0x9c30
  1338f0:	e3400014 	movt	r0, #20
  1338f4:	ebff3e06 	bl	103114 <rt_kprintf>
  1338f8:	e30011c6 	movw	r1, #454	; 0x1c6
  1338fc:	e3090b34 	movw	r0, #39732	; 0x9b34
  133900:	e3400014 	movt	r0, #20
  133904:	ebff5dd6 	bl	10b064 <sys_arch_assert>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
  133908:	e51b3008 	ldr	r3, [fp, #-8]
  13390c:	e5933000 	ldr	r3, [r3]
  133910:	e3530000 	cmp	r3, #0
  133914:	0a000006 	beq	133934 <ip_reass_chain_frag_into_datagram_and_validate+0x458>
  133918:	e3090c40 	movw	r0, #40000	; 0x9c40
  13391c:	e3400014 	movt	r0, #20
  133920:	ebff3dfb 	bl	103114 <rt_kprintf>
  133924:	e3a01f72 	mov	r1, #456	; 0x1c8
  133928:	e3090b34 	movw	r0, #39732	; 0x9b34
  13392c:	e3400014 	movt	r0, #20
  133930:	ebff5dcb 	bl	10b064 <sys_arch_assert>
            iprh->next_pbuf == NULL);
          LWIP_ASSERT("validate_datagram:datagram end!=datagram len",
  133934:	e51b3008 	ldr	r3, [fp, #-8]
  133938:	e1d330b6 	ldrh	r3, [r3, #6]
  13393c:	e6ff2073 	uxth	r2, r3
  133940:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  133944:	e1d331bc 	ldrh	r3, [r3, #28]
  133948:	e1520003 	cmp	r2, r3
  13394c:	0a000006 	beq	13396c <ip_reass_chain_frag_into_datagram_and_validate+0x490>
  133950:	e3090c64 	movw	r0, #40036	; 0x9c64
  133954:	e3400014 	movt	r0, #20
  133958:	ebff3ded 	bl	103114 <rt_kprintf>
  13395c:	e30011ca 	movw	r1, #458	; 0x1ca
  133960:	e3090b34 	movw	r0, #39732	; 0x9b34
  133964:	e3400014 	movt	r0, #20
  133968:	ebff5dbd 	bl	10b064 <sys_arch_assert>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid;
  13396c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133970:	ea000015 	b	1339cc <ip_reass_chain_frag_into_datagram_and_validate+0x4f0>
  }
  /* If we come here, not all fragments were received, yet! */
  return 0; /* not yet valid! */
  133974:	e3a03000 	mov	r3, #0
  133978:	ea000013 	b	1339cc <ip_reass_chain_frag_into_datagram_and_validate+0x4f0>
#if IP_REASS_CHECK_OVERLAP
freepbuf:
  13397c:	e320f000 	nop	{0}
  133980:	ea000002 	b	133990 <ip_reass_chain_frag_into_datagram_and_validate+0x4b4>
      goto freepbuf;
  133984:	e320f000 	nop	{0}
  133988:	ea000000 	b	133990 <ip_reass_chain_frag_into_datagram_and_validate+0x4b4>
      goto freepbuf;
  13398c:	e320f000 	nop	{0}
  ip_reass_pbufcount -= pbuf_clen(new_p);
  133990:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
  133994:	ebff9e45 	bl	11b2b0 <pbuf_clen>
  133998:	e1a03000 	mov	r3, r0
  13399c:	e1a02003 	mov	r2, r3
  1339a0:	e30f3bec 	movw	r3, #64492	; 0xfbec
  1339a4:	e3403014 	movt	r3, #20
  1339a8:	e1d330b0 	ldrh	r3, [r3]
  1339ac:	e0433002 	sub	r3, r3, r2
  1339b0:	e6ff2073 	uxth	r2, r3
  1339b4:	e30f3bec 	movw	r3, #64492	; 0xfbec
  1339b8:	e3403014 	movt	r3, #20
  1339bc:	e1c320b0 	strh	r2, [r3]
  pbuf_free(new_p);
  1339c0:	e51b002c 	ldr	r0, [fp, #-44]	; 0xffffffd4
  1339c4:	ebff9db4 	bl	11b09c <pbuf_free>
  return 0;
  1339c8:	e3a03000 	mov	r3, #0
#endif /* IP_REASS_CHECK_OVERLAP */
}
  1339cc:	e1a00003 	mov	r0, r3
  1339d0:	e24bd004 	sub	sp, fp, #4
  1339d4:	e8bd8800 	pop	{fp, pc}

001339d8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
  1339d8:	e92d4800 	push	{fp, lr}
  1339dc:	e28db004 	add	fp, sp, #4
  1339e0:	e24dd028 	sub	sp, sp, #40	; 0x28
  1339e4:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  struct ip_hdr *fraghdr;
  struct ip_reassdata *ipr;
  struct ip_reass_helper *iprh;
  u16_t offset, len, clen;

  IPFRAG_STATS_INC(ip_frag.recv);
  1339e8:	e3063840 	movw	r3, #26688	; 0x6840
  1339ec:	e3403057 	movt	r3, #87	; 0x57
  1339f0:	e1d333b2 	ldrh	r3, [r3, #50]	; 0x32
  1339f4:	e2833001 	add	r3, r3, #1
  1339f8:	e6ff2073 	uxth	r2, r3
  1339fc:	e3063840 	movw	r3, #26688	; 0x6840
  133a00:	e3403057 	movt	r3, #87	; 0x57
  133a04:	e1c323b2 	strh	r2, [r3, #50]	; 0x32
  MIB2_STATS_INC(mib2.ipreasmreqds);
  133a08:	e3063840 	movw	r3, #26688	; 0x6840
  133a0c:	e3403057 	movt	r3, #87	; 0x57
  133a10:	e5933160 	ldr	r3, [r3, #352]	; 0x160
  133a14:	e2832001 	add	r2, r3, #1
  133a18:	e3063840 	movw	r3, #26688	; 0x6840
  133a1c:	e3403057 	movt	r3, #87	; 0x57
  133a20:	e5832160 	str	r2, [r3, #352]	; 0x160

  fraghdr = (struct ip_hdr*)p->payload;
  133a24:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  133a28:	e5933004 	ldr	r3, [r3, #4]
  133a2c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
  133a30:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133a34:	e5d33000 	ldrb	r3, [r3]
  133a38:	e203300f 	and	r3, r3, #15
  133a3c:	e1a03103 	lsl	r3, r3, #2
  133a40:	e3530014 	cmp	r3, #20
  133a44:	0a000008 	beq	133a6c <ip4_reass+0x94>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
  133a48:	e3063840 	movw	r3, #26688	; 0x6840
  133a4c:	e3403057 	movt	r3, #87	; 0x57
  133a50:	e1d334b4 	ldrh	r3, [r3, #68]	; 0x44
  133a54:	e2833001 	add	r3, r3, #1
  133a58:	e6ff2073 	uxth	r2, r3
  133a5c:	e3063840 	movw	r3, #26688	; 0x6840
  133a60:	e3403057 	movt	r3, #87	; 0x57
  133a64:	e1c324b4 	strh	r2, [r3, #68]	; 0x44
    goto nullreturn;
  133a68:	ea00011e 	b	133ee8 <ip4_reass+0x510>
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
  133a6c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133a70:	e1d330b6 	ldrh	r3, [r3, #6]
  133a74:	e6ff3073 	uxth	r3, r3
  133a78:	e1a00003 	mov	r0, r3
  133a7c:	ebff8b4f 	bl	1167c0 <lwip_htons>
  133a80:	e1a03000 	mov	r3, r0
  133a84:	e7ec3053 	ubfx	r3, r3, #0, #13
  133a88:	e6ff3073 	uxth	r3, r3
  133a8c:	e1a03183 	lsl	r3, r3, #3
  133a90:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
  133a94:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133a98:	e1d330b2 	ldrh	r3, [r3, #2]
  133a9c:	e6ff3073 	uxth	r3, r3
  133aa0:	e1a00003 	mov	r0, r3
  133aa4:	ebff8b45 	bl	1167c0 <lwip_htons>
  133aa8:	e1a03000 	mov	r3, r0
  133aac:	e1a02003 	mov	r2, r3
  133ab0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133ab4:	e5d33000 	ldrb	r3, [r3]
  133ab8:	e6ff3073 	uxth	r3, r3
  133abc:	e203300f 	and	r3, r3, #15
  133ac0:	e6ff3073 	uxth	r3, r3
  133ac4:	e1a03103 	lsl	r3, r3, #2
  133ac8:	e6ff3073 	uxth	r3, r3
  133acc:	e0423003 	sub	r3, r2, r3
  133ad0:	e14b31b8 	strh	r3, [fp, #-24]	; 0xffffffe8

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
  133ad4:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  133ad8:	ebff9df4 	bl	11b2b0 <pbuf_clen>
  133adc:	e1a03000 	mov	r3, r0
  133ae0:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
  133ae4:	e30f3bec 	movw	r3, #64492	; 0xfbec
  133ae8:	e3403014 	movt	r3, #20
  133aec:	e1d330b0 	ldrh	r3, [r3]
  133af0:	e1a02003 	mov	r2, r3
  133af4:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  133af8:	e0823003 	add	r3, r2, r3
  133afc:	e353000a 	cmp	r3, #10
  133b00:	da000017 	ble	133b64 <ip4_reass+0x18c>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
  133b04:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  133b08:	e1a01003 	mov	r1, r3
  133b0c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  133b10:	ebfffdac 	bl	1331c8 <ip_reass_remove_oldest_datagram>
  133b14:	e1a03000 	mov	r3, r0
  133b18:	e3530000 	cmp	r3, #0
  133b1c:	0a000007 	beq	133b40 <ip4_reass+0x168>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
  133b20:	e30f3bec 	movw	r3, #64492	; 0xfbec
  133b24:	e3403014 	movt	r3, #20
  133b28:	e1d330b0 	ldrh	r3, [r3]
  133b2c:	e1a02003 	mov	r2, r3
  133b30:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  133b34:	e0823003 	add	r3, r2, r3
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
  133b38:	e353000a 	cmp	r3, #10
  133b3c:	da000008 	ble	133b64 <ip4_reass+0x18c>
#endif /* IP_REASS_FREE_OLDEST */
    {
      /* No datagram could be freed and still too many pbufs enqueued */
      LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: Overflow condition: pbufct=%d, clen=%d, MAX=%d\n",
        ip_reass_pbufcount, clen, IP_REASS_MAX_PBUFS));
      IPFRAG_STATS_INC(ip_frag.memerr);
  133b40:	e3063840 	movw	r3, #26688	; 0x6840
  133b44:	e3403057 	movt	r3, #87	; 0x57
  133b48:	e1d333bc 	ldrh	r3, [r3, #60]	; 0x3c
  133b4c:	e2833001 	add	r3, r3, #1
  133b50:	e6ff2073 	uxth	r2, r3
  133b54:	e3063840 	movw	r3, #26688	; 0x6840
  133b58:	e3403057 	movt	r3, #87	; 0x57
  133b5c:	e1c323bc 	strh	r2, [r3, #60]	; 0x3c
      /* @todo: send ICMP time exceeded here? */
      /* drop this pbuf */
      goto nullreturn;
  133b60:	ea0000e0 	b	133ee8 <ip4_reass+0x510>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
  133b64:	e30f3be8 	movw	r3, #64488	; 0xfbe8
  133b68:	e3403014 	movt	r3, #20
  133b6c:	e5933000 	ldr	r3, [r3]
  133b70:	e50b300c 	str	r3, [fp, #-12]
  133b74:	ea00001e 	b	133bf4 <ip4_reass+0x21c>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
  133b78:	e51b300c 	ldr	r3, [fp, #-12]
  133b7c:	e5932014 	ldr	r2, [r3, #20]
  133b80:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133b84:	e593300c 	ldr	r3, [r3, #12]
  133b88:	e1520003 	cmp	r2, r3
  133b8c:	1a000015 	bne	133be8 <ip4_reass+0x210>
  133b90:	e51b300c 	ldr	r3, [fp, #-12]
  133b94:	e5932018 	ldr	r2, [r3, #24]
  133b98:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133b9c:	e5933010 	ldr	r3, [r3, #16]
  133ba0:	e1520003 	cmp	r2, r3
  133ba4:	1a00000f 	bne	133be8 <ip4_reass+0x210>
  133ba8:	e51b300c 	ldr	r3, [fp, #-12]
  133bac:	e1d320bc 	ldrh	r2, [r3, #12]
  133bb0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133bb4:	e1d330b4 	ldrh	r3, [r3, #4]
  133bb8:	e6ff3073 	uxth	r3, r3
  133bbc:	e1520003 	cmp	r2, r3
  133bc0:	1a000008 	bne	133be8 <ip4_reass+0x210>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
  133bc4:	e3063840 	movw	r3, #26688	; 0x6840
  133bc8:	e3403057 	movt	r3, #87	; 0x57
  133bcc:	e1d334b6 	ldrh	r3, [r3, #70]	; 0x46
  133bd0:	e2833001 	add	r3, r3, #1
  133bd4:	e6ff2073 	uxth	r2, r3
  133bd8:	e3063840 	movw	r3, #26688	; 0x6840
  133bdc:	e3403057 	movt	r3, #87	; 0x57
  133be0:	e1c324b6 	strh	r2, [r3, #70]	; 0x46
      break;
  133be4:	ea000005 	b	133c00 <ip4_reass+0x228>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
  133be8:	e51b300c 	ldr	r3, [fp, #-12]
  133bec:	e5933000 	ldr	r3, [r3]
  133bf0:	e50b300c 	str	r3, [fp, #-12]
  133bf4:	e51b300c 	ldr	r3, [fp, #-12]
  133bf8:	e3530000 	cmp	r3, #0
  133bfc:	1affffdd 	bne	133b78 <ip4_reass+0x1a0>
    }
  }

  if (ipr == NULL) {
  133c00:	e51b300c 	ldr	r3, [fp, #-12]
  133c04:	e3530000 	cmp	r3, #0
  133c08:	1a000008 	bne	133c30 <ip4_reass+0x258>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
  133c0c:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  133c10:	e1a01003 	mov	r1, r3
  133c14:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  133c18:	ebfffdc8 	bl	133340 <ip_reass_enqueue_new_datagram>
  133c1c:	e50b000c 	str	r0, [fp, #-12]
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
  133c20:	e51b300c 	ldr	r3, [fp, #-12]
  133c24:	e3530000 	cmp	r3, #0
  133c28:	1a000017 	bne	133c8c <ip4_reass+0x2b4>
      goto nullreturn;
  133c2c:	ea0000ad 	b	133ee8 <ip4_reass+0x510>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
  133c30:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133c34:	e1d330b6 	ldrh	r3, [r3, #6]
  133c38:	e6ff3073 	uxth	r3, r3
  133c3c:	e1a00003 	mov	r0, r3
  133c40:	ebff8ade 	bl	1167c0 <lwip_htons>
  133c44:	e1a03000 	mov	r3, r0
  133c48:	e7ec3053 	ubfx	r3, r3, #0, #13
  133c4c:	e3530000 	cmp	r3, #0
  133c50:	1a00000d 	bne	133c8c <ip4_reass+0x2b4>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
  133c54:	e51b300c 	ldr	r3, [fp, #-12]
  133c58:	e1d330be 	ldrh	r3, [r3, #14]
  133c5c:	e1a00003 	mov	r0, r3
  133c60:	ebff8ad6 	bl	1167c0 <lwip_htons>
  133c64:	e1a03000 	mov	r3, r0
  133c68:	e7ec3053 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
  133c6c:	e3530000 	cmp	r3, #0
  133c70:	0a000005 	beq	133c8c <ip4_reass+0x2b4>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
  133c74:	e51b300c 	ldr	r3, [fp, #-12]
  133c78:	e2833008 	add	r3, r3, #8
  133c7c:	e3a02014 	mov	r2, #20
  133c80:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  133c84:	e1a00003 	mov	r0, r3
  133c88:	eb0034bb 	bl	140f7c <memcpy>
    }
  }
  /* Track the current number of pbufs current 'in-flight', in order to limit
  the number of fragments that may be enqueued at any one time */
  ip_reass_pbufcount += clen;
  133c8c:	e30f3bec 	movw	r3, #64492	; 0xfbec
  133c90:	e3403014 	movt	r3, #20
  133c94:	e1d320b0 	ldrh	r2, [r3]
  133c98:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  133c9c:	e0823003 	add	r3, r2, r3
  133ca0:	e6ff2073 	uxth	r2, r3
  133ca4:	e30f3bec 	movw	r3, #64492	; 0xfbec
  133ca8:	e3403014 	movt	r3, #20
  133cac:	e1c320b0 	strh	r2, [r3]

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  if ((IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0) {
  133cb0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133cb4:	e1d330b6 	ldrh	r3, [r3, #6]
  133cb8:	e6ff3073 	uxth	r3, r3
  133cbc:	e2033020 	and	r3, r3, #32
  133cc0:	e3530000 	cmp	r3, #0
  133cc4:	1a00000b 	bne	133cf8 <ip4_reass+0x320>
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
  133cc8:	e51b300c 	ldr	r3, [fp, #-12]
  133ccc:	e5d3301e 	ldrb	r3, [r3, #30]
  133cd0:	e3833001 	orr	r3, r3, #1
  133cd4:	e6ef2073 	uxtb	r2, r3
  133cd8:	e51b300c 	ldr	r3, [fp, #-12]
  133cdc:	e5c3201e 	strb	r2, [r3, #30]
    ipr->datagram_len = offset + len;
  133ce0:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
  133ce4:	e15b31b8 	ldrh	r3, [fp, #-24]	; 0xffffffe8
  133ce8:	e0823003 	add	r3, r2, r3
  133cec:	e6ff2073 	uxth	r2, r3
  133cf0:	e51b300c 	ldr	r3, [fp, #-12]
  133cf4:	e1c321bc 	strh	r2, [r3, #28]
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  if (ip_reass_chain_frag_into_datagram_and_validate(ipr, p)) {
  133cf8:	e51b1028 	ldr	r1, [fp, #-40]	; 0xffffffd8
  133cfc:	e51b000c 	ldr	r0, [fp, #-12]
  133d00:	ebfffdf5 	bl	1334dc <ip_reass_chain_frag_into_datagram_and_validate>
  133d04:	e1a03000 	mov	r3, r0
  133d08:	e3530000 	cmp	r3, #0
  133d0c:	0a000073 	beq	133ee0 <ip4_reass+0x508>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
  133d10:	e51b300c 	ldr	r3, [fp, #-12]
  133d14:	e1d331bc 	ldrh	r3, [r3, #28]
  133d18:	e2833014 	add	r3, r3, #20
  133d1c:	e6ff2073 	uxth	r2, r3
  133d20:	e51b300c 	ldr	r3, [fp, #-12]
  133d24:	e1c321bc 	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
  133d28:	e51b300c 	ldr	r3, [fp, #-12]
  133d2c:	e5933004 	ldr	r3, [r3, #4]
  133d30:	e5933004 	ldr	r3, [r3, #4]
  133d34:	e5933000 	ldr	r3, [r3]
  133d38:	e50b3008 	str	r3, [fp, #-8]

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
  133d3c:	e51b300c 	ldr	r3, [fp, #-12]
  133d40:	e5933004 	ldr	r3, [r3, #4]
  133d44:	e5933004 	ldr	r3, [r3, #4]
  133d48:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
  133d4c:	e51b300c 	ldr	r3, [fp, #-12]
  133d50:	e2833008 	add	r3, r3, #8
  133d54:	e3a02014 	mov	r2, #20
  133d58:	e1a01003 	mov	r1, r3
  133d5c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  133d60:	eb003485 	bl	140f7c <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
  133d64:	e51b300c 	ldr	r3, [fp, #-12]
  133d68:	e1d331bc 	ldrh	r3, [r3, #28]
  133d6c:	e1a00003 	mov	r0, r3
  133d70:	ebff8a92 	bl	1167c0 <lwip_htons>
  133d74:	e1a03000 	mov	r3, r0
  133d78:	e1a02003 	mov	r2, r3
  133d7c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133d80:	e1c320b2 	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
  133d84:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133d88:	e3a02000 	mov	r2, #0
  133d8c:	e5c32006 	strb	r2, [r3, #6]
  133d90:	e3a02000 	mov	r2, #0
  133d94:	e5c32007 	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
  133d98:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133d9c:	e3a02000 	mov	r2, #0
  133da0:	e5c3200a 	strb	r2, [r3, #10]
  133da4:	e3a02000 	mov	r2, #0
  133da8:	e5c3200b 	strb	r2, [r3, #11]
    /* @todo: do we need to set/calculate the correct checksum? */
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
  133dac:	e3a01014 	mov	r1, #20
  133db0:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  133db4:	ebff9390 	bl	118bfc <inet_chksum>
  133db8:	e1a03000 	mov	r3, r0
  133dbc:	e1a02003 	mov	r2, r3
  133dc0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  133dc4:	e1c320ba 	strh	r2, [r3, #10]
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
  133dc8:	e51b300c 	ldr	r3, [fp, #-12]
  133dcc:	e5933004 	ldr	r3, [r3, #4]
  133dd0:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
  133dd4:	ea00000b 	b	133e08 <ip4_reass+0x430>
      iprh = (struct ip_reass_helper*)r->payload;
  133dd8:	e51b3008 	ldr	r3, [fp, #-8]
  133ddc:	e5933004 	ldr	r3, [r3, #4]
  133de0:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
  133de4:	e3e01013 	mvn	r1, #19
  133de8:	e51b0008 	ldr	r0, [fp, #-8]
  133dec:	ebff9c8c 	bl	11b024 <pbuf_header>
      pbuf_cat(p, r);
  133df0:	e51b1008 	ldr	r1, [fp, #-8]
  133df4:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  133df8:	ebff9d5e 	bl	11b378 <pbuf_cat>
      r = iprh->next_pbuf;
  133dfc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  133e00:	e5933000 	ldr	r3, [r3]
  133e04:	e50b3008 	str	r3, [fp, #-8]
    while (r != NULL) {
  133e08:	e51b3008 	ldr	r3, [fp, #-8]
  133e0c:	e3530000 	cmp	r3, #0
  133e10:	1afffff0 	bne	133dd8 <ip4_reass+0x400>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
  133e14:	e30f3be8 	movw	r3, #64488	; 0xfbe8
  133e18:	e3403014 	movt	r3, #20
  133e1c:	e5933000 	ldr	r3, [r3]
  133e20:	e51b200c 	ldr	r2, [fp, #-12]
  133e24:	e1520003 	cmp	r2, r3
  133e28:	1a000002 	bne	133e38 <ip4_reass+0x460>
      ipr_prev = NULL;
  133e2c:	e3a03000 	mov	r3, #0
  133e30:	e50b3010 	str	r3, [fp, #-16]
  133e34:	ea000011 	b	133e80 <ip4_reass+0x4a8>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
  133e38:	e30f3be8 	movw	r3, #64488	; 0xfbe8
  133e3c:	e3403014 	movt	r3, #20
  133e40:	e5933000 	ldr	r3, [r3]
  133e44:	e50b3010 	str	r3, [fp, #-16]
  133e48:	ea000007 	b	133e6c <ip4_reass+0x494>
        if (ipr_prev->next == ipr) {
  133e4c:	e51b3010 	ldr	r3, [fp, #-16]
  133e50:	e5933000 	ldr	r3, [r3]
  133e54:	e51b200c 	ldr	r2, [fp, #-12]
  133e58:	e1520003 	cmp	r2, r3
  133e5c:	0a000006 	beq	133e7c <ip4_reass+0x4a4>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
  133e60:	e51b3010 	ldr	r3, [fp, #-16]
  133e64:	e5933000 	ldr	r3, [r3]
  133e68:	e50b3010 	str	r3, [fp, #-16]
  133e6c:	e51b3010 	ldr	r3, [fp, #-16]
  133e70:	e3530000 	cmp	r3, #0
  133e74:	1afffff4 	bne	133e4c <ip4_reass+0x474>
  133e78:	ea000000 	b	133e80 <ip4_reass+0x4a8>
          break;
  133e7c:	e320f000 	nop	{0}
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
  133e80:	e51b1010 	ldr	r1, [fp, #-16]
  133e84:	e51b000c 	ldr	r0, [fp, #-12]
  133e88:	ebfffd6e 	bl	133448 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
  133e8c:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  133e90:	ebff9d06 	bl	11b2b0 <pbuf_clen>
  133e94:	e1a03000 	mov	r3, r0
  133e98:	e1a02003 	mov	r2, r3
  133e9c:	e30f3bec 	movw	r3, #64492	; 0xfbec
  133ea0:	e3403014 	movt	r3, #20
  133ea4:	e1d330b0 	ldrh	r3, [r3]
  133ea8:	e0433002 	sub	r3, r3, r2
  133eac:	e6ff2073 	uxth	r2, r3
  133eb0:	e30f3bec 	movw	r3, #64492	; 0xfbec
  133eb4:	e3403014 	movt	r3, #20
  133eb8:	e1c320b0 	strh	r2, [r3]

    MIB2_STATS_INC(mib2.ipreasmoks);
  133ebc:	e3063840 	movw	r3, #26688	; 0x6840
  133ec0:	e3403057 	movt	r3, #87	; 0x57
  133ec4:	e593314c 	ldr	r3, [r3, #332]	; 0x14c
  133ec8:	e2832001 	add	r2, r3, #1
  133ecc:	e3063840 	movw	r3, #26688	; 0x6840
  133ed0:	e3403057 	movt	r3, #87	; 0x57
  133ed4:	e583214c 	str	r2, [r3, #332]	; 0x14c

    /* Return the pbuf chain */
    return p;
  133ed8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  133edc:	ea00000c 	b	133f14 <ip4_reass+0x53c>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
  133ee0:	e3a03000 	mov	r3, #0
  133ee4:	ea00000a 	b	133f14 <ip4_reass+0x53c>

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  133ee8:	e3063840 	movw	r3, #26688	; 0x6840
  133eec:	e3403057 	movt	r3, #87	; 0x57
  133ef0:	e1d333b6 	ldrh	r3, [r3, #54]	; 0x36
  133ef4:	e2833001 	add	r3, r3, #1
  133ef8:	e6ff2073 	uxth	r2, r3
  133efc:	e3063840 	movw	r3, #26688	; 0x6840
  133f00:	e3403057 	movt	r3, #87	; 0x57
  133f04:	e1c323b6 	strh	r2, [r3, #54]	; 0x36
  pbuf_free(p);
  133f08:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  133f0c:	ebff9c62 	bl	11b09c <pbuf_free>
  return NULL;
  133f10:	e3a03000 	mov	r3, #0
}
  133f14:	e1a00003 	mov	r0, r3
  133f18:	e24bd004 	sub	sp, fp, #4
  133f1c:	e8bd8800 	pop	{fp, pc}

00133f20 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
  133f20:	e92d4800 	push	{fp, lr}
  133f24:	e28db004 	add	fp, sp, #4
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
  133f28:	e3002286 	movw	r2, #646	; 0x286
  133f2c:	e3091b34 	movw	r1, #39732	; 0x9b34
  133f30:	e3401014 	movt	r1, #20
  133f34:	e3a00006 	mov	r0, #6
  133f38:	ebff94e1 	bl	1192c4 <memp_malloc_fn>
  133f3c:	e1a03000 	mov	r3, r0
}
  133f40:	e1a00003 	mov	r0, r3
  133f44:	e8bd8800 	pop	{fp, pc}

00133f48 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
  133f48:	e92d4800 	push	{fp, lr}
  133f4c:	e28db004 	add	fp, sp, #4
  133f50:	e24dd008 	sub	sp, sp, #8
  133f54:	e50b0008 	str	r0, [fp, #-8]
  LWIP_ASSERT("p != NULL", p != NULL);
  133f58:	e51b3008 	ldr	r3, [fp, #-8]
  133f5c:	e3530000 	cmp	r3, #0
  133f60:	1a000006 	bne	133f80 <ip_frag_free_pbuf_custom_ref+0x38>
  133f64:	e3090c94 	movw	r0, #40084	; 0x9c94
  133f68:	e3400014 	movt	r0, #20
  133f6c:	ebff3c68 	bl	103114 <rt_kprintf>
  133f70:	e300128d 	movw	r1, #653	; 0x28d
  133f74:	e3090b34 	movw	r0, #39732	; 0x9b34
  133f78:	e3400014 	movt	r0, #20
  133f7c:	ebff5c38 	bl	10b064 <sys_arch_assert>
  memp_free(MEMP_FRAG_PBUF, p);
  133f80:	e51b1008 	ldr	r1, [fp, #-8]
  133f84:	e3a00006 	mov	r0, #6
  133f88:	ebff9535 	bl	119464 <memp_free>
}
  133f8c:	e320f000 	nop	{0}
  133f90:	e24bd004 	sub	sp, fp, #4
  133f94:	e8bd8800 	pop	{fp, pc}

00133f98 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
  133f98:	e92d4800 	push	{fp, lr}
  133f9c:	e28db004 	add	fp, sp, #4
  133fa0:	e24dd010 	sub	sp, sp, #16
  133fa4:	e50b0010 	str	r0, [fp, #-16]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
  133fa8:	e51b3010 	ldr	r3, [fp, #-16]
  133fac:	e50b3008 	str	r3, [fp, #-8]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
  133fb0:	e51b3008 	ldr	r3, [fp, #-8]
  133fb4:	e3530000 	cmp	r3, #0
  133fb8:	1a000006 	bne	133fd8 <ipfrag_free_pbuf_custom+0x40>
  133fbc:	e3090ca0 	movw	r0, #40096	; 0x9ca0
  133fc0:	e3400014 	movt	r0, #20
  133fc4:	ebff3c52 	bl	103114 <rt_kprintf>
  133fc8:	e3001297 	movw	r1, #663	; 0x297
  133fcc:	e3090b34 	movw	r0, #39732	; 0x9b34
  133fd0:	e3400014 	movt	r0, #20
  133fd4:	ebff5c22 	bl	10b064 <sys_arch_assert>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
  133fd8:	e51b2008 	ldr	r2, [fp, #-8]
  133fdc:	e51b3010 	ldr	r3, [fp, #-16]
  133fe0:	e1520003 	cmp	r2, r3
  133fe4:	0a000006 	beq	134004 <ipfrag_free_pbuf_custom+0x6c>
  133fe8:	e3090cac 	movw	r0, #40108	; 0x9cac
  133fec:	e3400014 	movt	r0, #20
  133ff0:	ebff3c47 	bl	103114 <rt_kprintf>
  133ff4:	e3a01fa6 	mov	r1, #664	; 0x298
  133ff8:	e3090b34 	movw	r0, #39732	; 0x9b34
  133ffc:	e3400014 	movt	r0, #20
  134000:	ebff5c17 	bl	10b064 <sys_arch_assert>
  if (pcr->original != NULL) {
  134004:	e51b3008 	ldr	r3, [fp, #-8]
  134008:	e5933014 	ldr	r3, [r3, #20]
  13400c:	e3530000 	cmp	r3, #0
  134010:	0a000003 	beq	134024 <ipfrag_free_pbuf_custom+0x8c>
    pbuf_free(pcr->original);
  134014:	e51b3008 	ldr	r3, [fp, #-8]
  134018:	e5933014 	ldr	r3, [r3, #20]
  13401c:	e1a00003 	mov	r0, r3
  134020:	ebff9c1d 	bl	11b09c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
  134024:	e51b0008 	ldr	r0, [fp, #-8]
  134028:	ebffffc6 	bl	133f48 <ip_frag_free_pbuf_custom_ref>
}
  13402c:	e320f000 	nop	{0}
  134030:	e24bd004 	sub	sp, fp, #4
  134034:	e8bd8800 	pop	{fp, pc}

00134038 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
  134038:	e92d4800 	push	{fp, lr}
  13403c:	e28db004 	add	fp, sp, #4
  134040:	e24dd048 	sub	sp, sp, #72	; 0x48
  134044:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
  134048:	e50b103c 	str	r1, [fp, #-60]	; 0xffffffc4
  13404c:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
  134050:	e3a03000 	mov	r3, #0
  134054:	e14b30b6 	strh	r3, [fp, #-6]
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
  134058:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  13405c:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  134060:	e2433014 	sub	r3, r3, #20
  134064:	e2832007 	add	r2, r3, #7
  134068:	e3530000 	cmp	r3, #0
  13406c:	b1a03002 	movlt	r3, r2
  134070:	a1a03003 	movge	r3, r3
  134074:	e1a031c3 	asr	r3, r3, #3
  134078:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
  13407c:	e3a03014 	mov	r3, #20
  134080:	e14b30be 	strh	r3, [fp, #-14]
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
  134084:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  134088:	e5933004 	ldr	r3, [r3, #4]
  13408c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
  iphdr = original_iphdr;
  134090:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  134094:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
  134098:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  13409c:	e5d33000 	ldrb	r3, [r3]
  1340a0:	e203300f 	and	r3, r3, #15
  1340a4:	e1a03103 	lsl	r3, r3, #2
  1340a8:	e3530014 	cmp	r3, #20
  1340ac:	0a000008 	beq	1340d4 <ip4_frag+0x9c>
  1340b0:	e3090cb8 	movw	r0, #40120	; 0x9cb8
  1340b4:	e3400014 	movt	r0, #20
  1340b8:	ebff3c15 	bl	103114 <rt_kprintf>
  1340bc:	e3a01d0b 	mov	r1, #704	; 0x2c0
  1340c0:	e3090b34 	movw	r0, #39732	; 0x9b34
  1340c4:	e3400014 	movt	r0, #20
  1340c8:	ebff5be5 	bl	10b064 <sys_arch_assert>
  1340cc:	e3e03005 	mvn	r3, #5
  1340d0:	ea0000ed 	b	13448c <ip4_frag+0x454>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
  1340d4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1340d8:	e1d330b6 	ldrh	r3, [r3, #6]
  1340dc:	e6ff3073 	uxth	r3, r3
  1340e0:	e1a00003 	mov	r0, r3
  1340e4:	ebff89b5 	bl	1167c0 <lwip_htons>
  1340e8:	e1a03000 	mov	r3, r0
  1340ec:	e14b31b0 	strh	r3, [fp, #-16]
  ofo = tmp & IP_OFFMASK;
  1340f0:	e15b31b0 	ldrh	r3, [fp, #-16]
  1340f4:	e7ec3053 	ubfx	r3, r3, #0, #13
  1340f8:	e14b30bc 	strh	r3, [fp, #-12]
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
  1340fc:	e15b31b0 	ldrh	r3, [fp, #-16]
  134100:	e2033a02 	and	r3, r3, #8192	; 0x2000
  134104:	e3530000 	cmp	r3, #0
  134108:	0a000008 	beq	134130 <ip4_frag+0xf8>
  13410c:	e3090ce0 	movw	r0, #40160	; 0x9ce0
  134110:	e3400014 	movt	r0, #20
  134114:	ebff3bfe 	bl	103114 <rt_kprintf>
  134118:	e30012c5 	movw	r1, #709	; 0x2c5
  13411c:	e3090b34 	movw	r0, #39732	; 0x9b34
  134120:	e3400014 	movt	r0, #20
  134124:	ebff5bce 	bl	10b064 <sys_arch_assert>
  134128:	e3e03005 	mvn	r3, #5
  13412c:	ea0000d6 	b	13448c <ip4_frag+0x454>

  left = p->tot_len - IP_HLEN;
  134130:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  134134:	e1d330b8 	ldrh	r3, [r3, #8]
  134138:	e2433014 	sub	r3, r3, #20
  13413c:	e14b30ba 	strh	r3, [fp, #-10]

  while (left) {
  134140:	ea0000bc 	b	134438 <ip4_frag+0x400>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
  134144:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  134148:	e1a02183 	lsl	r2, r3, #3
  13414c:	e15b30ba 	ldrh	r3, [fp, #-10]
  134150:	e1520003 	cmp	r2, r3
  134154:	b1a03002 	movlt	r3, r2
  134158:	a1a03003 	movge	r3, r3
  13415c:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
  134160:	e3a02000 	mov	r2, #0
  134164:	e3a01014 	mov	r1, #20
  134168:	e3a00002 	mov	r0, #2
  13416c:	ebff98c3 	bl	11a480 <pbuf_alloc>
  134170:	e50b0024 	str	r0, [fp, #-36]	; 0xffffffdc
    if (rambuf == NULL) {
  134174:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  134178:	e3530000 	cmp	r3, #0
  13417c:	0a0000b9 	beq	134468 <ip4_frag+0x430>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
  134180:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  134184:	e1d330ba 	ldrh	r3, [r3, #10]
  134188:	e3530013 	cmp	r3, #19
  13418c:	8a000006 	bhi	1341ac <ip4_frag+0x174>
  134190:	e3090cfc 	movw	r0, #40188	; 0x9cfc
  134194:	e3400014 	movt	r0, #20
  134198:	ebff3bdd 	bl	103114 <rt_kprintf>
  13419c:	e3a01fba 	mov	r1, #744	; 0x2e8
  1341a0:	e3090b34 	movw	r0, #39732	; 0x9b34
  1341a4:	e3400014 	movt	r0, #20
  1341a8:	ebff5bad 	bl	10b064 <sys_arch_assert>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
  1341ac:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1341b0:	e5933004 	ldr	r3, [r3, #4]
  1341b4:	e3a02014 	mov	r2, #20
  1341b8:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  1341bc:	e1a00003 	mov	r0, r3
  1341c0:	eb00336d 	bl	140f7c <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
  1341c4:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1341c8:	e5933004 	ldr	r3, [r3, #4]
  1341cc:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

    left_to_copy = fragsize;
  1341d0:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  1341d4:	e14b30b8 	strh	r3, [fp, #-8]
    while (left_to_copy) {
  1341d8:	ea000049 	b	134304 <ip4_frag+0x2cc>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
  1341dc:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1341e0:	e1d320ba 	ldrh	r2, [r3, #10]
  1341e4:	e15b30be 	ldrh	r3, [fp, #-14]
  1341e8:	e0423003 	sub	r3, r2, r3
  1341ec:	e14b32ba 	strh	r3, [fp, #-42]	; 0xffffffd6
      newpbuflen = LWIP_MIN(left_to_copy, plen);
  1341f0:	e15b22ba 	ldrh	r2, [fp, #-42]	; 0xffffffd6
  1341f4:	e15b30b8 	ldrh	r3, [fp, #-8]
  1341f8:	e1520003 	cmp	r2, r3
  1341fc:	31a03002 	movcc	r3, r2
  134200:	21a03003 	movcs	r3, r3
  134204:	e14b30b6 	strh	r3, [fp, #-6]
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
  134208:	e15b30b6 	ldrh	r3, [fp, #-6]
  13420c:	e3530000 	cmp	r3, #0
  134210:	1a000005 	bne	13422c <ip4_frag+0x1f4>
        poff = 0;
  134214:	e3a03000 	mov	r3, #0
  134218:	e14b30be 	strh	r3, [fp, #-14]
        p = p->next;
  13421c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  134220:	e5933000 	ldr	r3, [r3]
  134224:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
        continue;
  134228:	ea000035 	b	134304 <ip4_frag+0x2cc>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
  13422c:	ebffff3b 	bl	133f20 <ip_frag_alloc_pbuf_custom_ref>
  134230:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
      if (pcr == NULL) {
  134234:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  134238:	e3530000 	cmp	r3, #0
  13423c:	1a000002 	bne	13424c <ip4_frag+0x214>
        pbuf_free(rambuf);
  134240:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  134244:	ebff9b94 	bl	11b09c <pbuf_free>
        goto memerr;
  134248:	ea000087 	b	13446c <ip4_frag+0x434>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
  13424c:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
        (u8_t*)p->payload + poff, newpbuflen);
  134250:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  134254:	e5932004 	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
  134258:	e15b30be 	ldrh	r3, [fp, #-14]
  13425c:	e0823003 	add	r3, r2, r3
  134260:	e15b10b6 	ldrh	r1, [fp, #-6]
  134264:	e15b20b6 	ldrh	r2, [fp, #-6]
  134268:	e58d2004 	str	r2, [sp, #4]
  13426c:	e58d3000 	str	r3, [sp]
  134270:	e1a03000 	mov	r3, r0
  134274:	e3a02002 	mov	r2, #2
  134278:	e3a00004 	mov	r0, #4
  13427c:	ebff99e4 	bl	11aa14 <pbuf_alloced_custom>
  134280:	e50b0034 	str	r0, [fp, #-52]	; 0xffffffcc
      if (newpbuf == NULL) {
  134284:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
  134288:	e3530000 	cmp	r3, #0
  13428c:	1a000004 	bne	1342a4 <ip4_frag+0x26c>
        ip_frag_free_pbuf_custom_ref(pcr);
  134290:	e51b0030 	ldr	r0, [fp, #-48]	; 0xffffffd0
  134294:	ebffff2b 	bl	133f48 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
  134298:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  13429c:	ebff9b7e 	bl	11b09c <pbuf_free>
        goto memerr;
  1342a0:	ea000071 	b	13446c <ip4_frag+0x434>
      }
      pbuf_ref(p);
  1342a4:	e51b0038 	ldr	r0, [fp, #-56]	; 0xffffffc8
  1342a8:	ebff9c15 	bl	11b304 <pbuf_ref>
      pcr->original = p;
  1342ac:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1342b0:	e51b2038 	ldr	r2, [fp, #-56]	; 0xffffffc8
  1342b4:	e5832014 	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
  1342b8:	e51b2030 	ldr	r2, [fp, #-48]	; 0xffffffd0
  1342bc:	e3033f98 	movw	r3, #16280	; 0x3f98
  1342c0:	e3403013 	movt	r3, #19
  1342c4:	e5823010 	str	r3, [r2, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
  1342c8:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  1342cc:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  1342d0:	ebff9c28 	bl	11b378 <pbuf_cat>
      left_to_copy -= newpbuflen;
  1342d4:	e15b20b8 	ldrh	r2, [fp, #-8]
  1342d8:	e15b30b6 	ldrh	r3, [fp, #-6]
  1342dc:	e0423003 	sub	r3, r2, r3
  1342e0:	e14b30b8 	strh	r3, [fp, #-8]
      if (left_to_copy) {
  1342e4:	e15b30b8 	ldrh	r3, [fp, #-8]
  1342e8:	e3530000 	cmp	r3, #0
  1342ec:	0a000004 	beq	134304 <ip4_frag+0x2cc>
        poff = 0;
  1342f0:	e3a03000 	mov	r3, #0
  1342f4:	e14b30be 	strh	r3, [fp, #-14]
        p = p->next;
  1342f8:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
  1342fc:	e5933000 	ldr	r3, [r3]
  134300:	e50b3038 	str	r3, [fp, #-56]	; 0xffffffc8
    while (left_to_copy) {
  134304:	e15b30b8 	ldrh	r3, [fp, #-8]
  134308:	e3530000 	cmp	r3, #0
  13430c:	1affffb2 	bne	1341dc <ip4_frag+0x1a4>
      }
    }
    poff += newpbuflen;
  134310:	e15b20be 	ldrh	r2, [fp, #-14]
  134314:	e15b30b6 	ldrh	r3, [fp, #-6]
  134318:	e0823003 	add	r3, r2, r3
  13431c:	e14b30be 	strh	r3, [fp, #-14]
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
  134320:	e15b20ba 	ldrh	r2, [fp, #-10]
  134324:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  134328:	e1d333b8 	ldrh	r3, [r3, #56]	; 0x38
  13432c:	e2433014 	sub	r3, r3, #20
  134330:	e1520003 	cmp	r2, r3
  134334:	d3a03001 	movle	r3, #1
  134338:	c3a03000 	movgt	r3, #0
  13433c:	e6ef3073 	uxtb	r3, r3
  134340:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
  134344:	e15b30bc 	ldrh	r3, [fp, #-12]
  134348:	e7ec3053 	ubfx	r3, r3, #0, #13
  13434c:	e14b31b0 	strh	r3, [fp, #-16]
    if (!last) {
  134350:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  134354:	e3530000 	cmp	r3, #0
  134358:	1a000002 	bne	134368 <ip4_frag+0x330>
      tmp = tmp | IP_MF;
  13435c:	e15b31b0 	ldrh	r3, [fp, #-16]
  134360:	e3833a02 	orr	r3, r3, #8192	; 0x2000
  134364:	e14b31b0 	strh	r3, [fp, #-16]
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
  134368:	e15b31b0 	ldrh	r3, [fp, #-16]
  13436c:	e1a00003 	mov	r0, r3
  134370:	ebff8912 	bl	1167c0 <lwip_htons>
  134374:	e1a03000 	mov	r3, r0
  134378:	e1a02003 	mov	r2, r3
  13437c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  134380:	e1c320b6 	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
  134384:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  134388:	e2833014 	add	r3, r3, #20
  13438c:	e6ff3073 	uxth	r3, r3
  134390:	e1a00003 	mov	r0, r3
  134394:	ebff8909 	bl	1167c0 <lwip_htons>
  134398:	e1a03000 	mov	r3, r0
  13439c:	e1a02003 	mov	r2, r3
  1343a0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1343a4:	e1c320b2 	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
  1343a8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1343ac:	e3a02000 	mov	r2, #0
  1343b0:	e5c3200a 	strb	r2, [r3, #10]
  1343b4:	e3a02000 	mov	r2, #0
  1343b8:	e5c3200b 	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
  1343bc:	e3a01014 	mov	r1, #20
  1343c0:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  1343c4:	ebff920c 	bl	118bfc <inet_chksum>
  1343c8:	e1a03000 	mov	r3, r0
  1343cc:	e1a02003 	mov	r2, r3
  1343d0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1343d4:	e1c320ba 	strh	r2, [r3, #10]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
  1343d8:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
  1343dc:	e5933014 	ldr	r3, [r3, #20]
  1343e0:	e51b2040 	ldr	r2, [fp, #-64]	; 0xffffffc0
  1343e4:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  1343e8:	e51b003c 	ldr	r0, [fp, #-60]	; 0xffffffc4
  1343ec:	e12fff33 	blx	r3
    IPFRAG_STATS_INC(ip_frag.xmit);
  1343f0:	e3063840 	movw	r3, #26688	; 0x6840
  1343f4:	e3403057 	movt	r3, #87	; 0x57
  1343f8:	e1d333b0 	ldrh	r3, [r3, #48]	; 0x30
  1343fc:	e2833001 	add	r3, r3, #1
  134400:	e6ff2073 	uxth	r2, r3
  134404:	e3063840 	movw	r3, #26688	; 0x6840
  134408:	e3403057 	movt	r3, #87	; 0x57
  13440c:	e1c323b0 	strh	r2, [r3, #48]	; 0x30
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
  134410:	e51b0024 	ldr	r0, [fp, #-36]	; 0xffffffdc
  134414:	ebff9b20 	bl	11b09c <pbuf_free>
    left -= fragsize;
  134418:	e15b20ba 	ldrh	r2, [fp, #-10]
  13441c:	e15b31be 	ldrh	r3, [fp, #-30]	; 0xffffffe2
  134420:	e0423003 	sub	r3, r2, r3
  134424:	e14b30ba 	strh	r3, [fp, #-10]
    ofo += nfb;
  134428:	e15b20bc 	ldrh	r2, [fp, #-12]
  13442c:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  134430:	e0823003 	add	r3, r2, r3
  134434:	e14b30bc 	strh	r3, [fp, #-12]
  while (left) {
  134438:	e15b30ba 	ldrh	r3, [fp, #-10]
  13443c:	e3530000 	cmp	r3, #0
  134440:	1affff3f 	bne	134144 <ip4_frag+0x10c>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  134444:	e3063840 	movw	r3, #26688	; 0x6840
  134448:	e3403057 	movt	r3, #87	; 0x57
  13444c:	e5933154 	ldr	r3, [r3, #340]	; 0x154
  134450:	e2832001 	add	r2, r3, #1
  134454:	e3063840 	movw	r3, #26688	; 0x6840
  134458:	e3403057 	movt	r3, #87	; 0x57
  13445c:	e5832154 	str	r2, [r3, #340]	; 0x154
  return ERR_OK;
  134460:	e3a03000 	mov	r3, #0
  134464:	ea000008 	b	13448c <ip4_frag+0x454>
      goto memerr;
  134468:	e320f000 	nop	{0}
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  13446c:	e3063840 	movw	r3, #26688	; 0x6840
  134470:	e3403057 	movt	r3, #87	; 0x57
  134474:	e5933158 	ldr	r3, [r3, #344]	; 0x158
  134478:	e2832001 	add	r2, r3, #1
  13447c:	e3063840 	movw	r3, #26688	; 0x6840
  134480:	e3403057 	movt	r3, #87	; 0x57
  134484:	e5832158 	str	r2, [r3, #344]	; 0x158
  return ERR_MEM;
  134488:	e3e03000 	mvn	r3, #0
}
  13448c:	e1a00003 	mov	r0, r3
  134490:	e24bd004 	sub	sp, fp, #4
  134494:	e8bd8800 	pop	{fp, pc}

00134498 <ping_prepare_echo>:
    rt_uint8_t addr0, addr1, addr2, addr3;
};

/** Prepare a echo ICMP request */
static void ping_prepare_echo( struct icmp_echo_hdr *iecho, u16_t len)
{
  134498:	e92d4800 	push	{fp, lr}
  13449c:	e28db004 	add	fp, sp, #4
  1344a0:	e24dd010 	sub	sp, sp, #16
  1344a4:	e50b0010 	str	r0, [fp, #-16]
  1344a8:	e1a03001 	mov	r3, r1
  1344ac:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
    size_t i;
    size_t data_len = len - sizeof(struct icmp_echo_hdr);
  1344b0:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  1344b4:	e2433008 	sub	r3, r3, #8
  1344b8:	e50b300c 	str	r3, [fp, #-12]

    ICMPH_TYPE_SET(iecho, ICMP_ECHO);
  1344bc:	e51b3010 	ldr	r3, [fp, #-16]
  1344c0:	e3a02008 	mov	r2, #8
  1344c4:	e5c32000 	strb	r2, [r3]
    ICMPH_CODE_SET(iecho, 0);
  1344c8:	e51b3010 	ldr	r3, [fp, #-16]
  1344cc:	e3a02000 	mov	r2, #0
  1344d0:	e5c32001 	strb	r2, [r3, #1]
    iecho->chksum = 0;
  1344d4:	e51b3010 	ldr	r3, [fp, #-16]
  1344d8:	e3a02000 	mov	r2, #0
  1344dc:	e5c32002 	strb	r2, [r3, #2]
  1344e0:	e3a02000 	mov	r2, #0
  1344e4:	e5c32003 	strb	r2, [r3, #3]
    iecho->id     = PING_ID;
  1344e8:	e51b2010 	ldr	r2, [fp, #-16]
  1344ec:	e3a03000 	mov	r3, #0
  1344f0:	e1e03003 	mvn	r3, r3
  1344f4:	e2033050 	and	r3, r3, #80	; 0x50
  1344f8:	e1e03003 	mvn	r3, r3
  1344fc:	e5c23004 	strb	r3, [r2, #4]
  134500:	e3a03000 	mov	r3, #0
  134504:	e1e03003 	mvn	r3, r3
  134508:	e2033050 	and	r3, r3, #80	; 0x50
  13450c:	e1e03003 	mvn	r3, r3
  134510:	e5c23005 	strb	r3, [r2, #5]
    iecho->seqno  = htons(++ping_seq_num);
  134514:	e30f3bee 	movw	r3, #64494	; 0xfbee
  134518:	e3403014 	movt	r3, #20
  13451c:	e1d330b0 	ldrh	r3, [r3]
  134520:	e2833001 	add	r3, r3, #1
  134524:	e6ff2073 	uxth	r2, r3
  134528:	e30f3bee 	movw	r3, #64494	; 0xfbee
  13452c:	e3403014 	movt	r3, #20
  134530:	e1c320b0 	strh	r2, [r3]
  134534:	e30f3bee 	movw	r3, #64494	; 0xfbee
  134538:	e3403014 	movt	r3, #20
  13453c:	e1d330b0 	ldrh	r3, [r3]
  134540:	e1a00003 	mov	r0, r3
  134544:	ebff889d 	bl	1167c0 <lwip_htons>
  134548:	e1a03000 	mov	r3, r0
  13454c:	e1a02003 	mov	r2, r3
  134550:	e51b3010 	ldr	r3, [fp, #-16]
  134554:	e1c320b6 	strh	r2, [r3, #6]

    /* fill the additional data buffer with some data */
    for (i = 0; i < data_len; i++)
  134558:	e3a03000 	mov	r3, #0
  13455c:	e50b3008 	str	r3, [fp, #-8]
  134560:	ea000009 	b	13458c <ping_prepare_echo+0xf4>
    {
        ((char*) iecho)[sizeof(struct icmp_echo_hdr) + i] = (char) i;
  134564:	e51b3008 	ldr	r3, [fp, #-8]
  134568:	e2833008 	add	r3, r3, #8
  13456c:	e51b2010 	ldr	r2, [fp, #-16]
  134570:	e0823003 	add	r3, r2, r3
  134574:	e51b2008 	ldr	r2, [fp, #-8]
  134578:	e6ef2072 	uxtb	r2, r2
  13457c:	e5c32000 	strb	r2, [r3]
    for (i = 0; i < data_len; i++)
  134580:	e51b3008 	ldr	r3, [fp, #-8]
  134584:	e2833001 	add	r3, r3, #1
  134588:	e50b3008 	str	r3, [fp, #-8]
  13458c:	e51b2008 	ldr	r2, [fp, #-8]
  134590:	e51b300c 	ldr	r3, [fp, #-12]
  134594:	e1520003 	cmp	r2, r3
  134598:	3afffff1 	bcc	134564 <ping_prepare_echo+0xcc>
    }

#ifdef RT_LWIP_USING_HW_CHECKSUM
      iecho->chksum = 0;
#else
      iecho->chksum = inet_chksum(iecho, len);
  13459c:	e15b31b2 	ldrh	r3, [fp, #-18]	; 0xffffffee
  1345a0:	e1a01003 	mov	r1, r3
  1345a4:	e51b0010 	ldr	r0, [fp, #-16]
  1345a8:	ebff9193 	bl	118bfc <inet_chksum>
  1345ac:	e1a03000 	mov	r3, r0
  1345b0:	e1a02003 	mov	r2, r3
  1345b4:	e51b3010 	ldr	r3, [fp, #-16]
  1345b8:	e1c320b2 	strh	r2, [r3, #2]
#endif

}
  1345bc:	e320f000 	nop	{0}
  1345c0:	e24bd004 	sub	sp, fp, #4
  1345c4:	e8bd8800 	pop	{fp, pc}

001345c8 <lwip_ping_send>:

#include <stdio.h>

/* Ping using the socket ip */
err_t lwip_ping_send(int s, ip_addr_t *addr, int size)
{
  1345c8:	e92d4800 	push	{fp, lr}
  1345cc:	e28db004 	add	fp, sp, #4
  1345d0:	e24dd038 	sub	sp, sp, #56	; 0x38
  1345d4:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  1345d8:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  1345dc:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
    int err;
    struct icmp_echo_hdr *iecho;
    struct sockaddr_in to;
    int ping_size = sizeof(struct icmp_echo_hdr) + size;
  1345e0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1345e4:	e2833008 	add	r3, r3, #8
  1345e8:	e50b3008 	str	r3, [fp, #-8]
    LWIP_ASSERT("ping_size is too big", ping_size <= 0xffff);
  1345ec:	e51b3008 	ldr	r3, [fp, #-8]
  1345f0:	e3530801 	cmp	r3, #65536	; 0x10000
  1345f4:	ba000006 	blt	134614 <lwip_ping_send+0x4c>
  1345f8:	e3090d1c 	movw	r0, #40220	; 0x9d1c
  1345fc:	e3400014 	movt	r0, #20
  134600:	ebff3ac3 	bl	103114 <rt_kprintf>
  134604:	e3a01054 	mov	r1, #84	; 0x54
  134608:	e3090d34 	movw	r0, #40244	; 0x9d34
  13460c:	e3400014 	movt	r0, #20
  134610:	ebff5a93 	bl	10b064 <sys_arch_assert>

    iecho = rt_malloc(ping_size);
  134614:	e51b3008 	ldr	r3, [fp, #-8]
  134618:	e1a00003 	mov	r0, r3
  13461c:	ebff3a5c 	bl	102f94 <rt_malloc>
  134620:	e50b000c 	str	r0, [fp, #-12]
    if (iecho == RT_NULL)
  134624:	e51b300c 	ldr	r3, [fp, #-12]
  134628:	e3530000 	cmp	r3, #0
  13462c:	1a000001 	bne	134638 <lwip_ping_send+0x70>
    {
        return ERR_MEM;
  134630:	e3e03000 	mvn	r3, #0
  134634:	ea00001e 	b	1346b4 <lwip_ping_send+0xec>
    }

    ping_prepare_echo(iecho, (u16_t) ping_size);
  134638:	e51b3008 	ldr	r3, [fp, #-8]
  13463c:	e6ff3073 	uxth	r3, r3
  134640:	e1a01003 	mov	r1, r3
  134644:	e51b000c 	ldr	r0, [fp, #-12]
  134648:	ebffff92 	bl	134498 <ping_prepare_echo>

    to.sin_len = sizeof(to);
  13464c:	e3a03010 	mov	r3, #16
  134650:	e54b3020 	strb	r3, [fp, #-32]	; 0xffffffe0
    to.sin_family = AF_INET;
  134654:	e3a03002 	mov	r3, #2
  134658:	e54b301f 	strb	r3, [fp, #-31]	; 0xffffffe1
#if LWIP_IPV4 && LWIP_IPV6
    to.sin_addr.s_addr = addr->u_addr.ip4.addr;
#elif LWIP_IPV4
    to.sin_addr.s_addr = addr->addr;
  13465c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  134660:	e5933000 	ldr	r3, [r3]
  134664:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
#elif LWIP_IPV6
#error Not supported IPv6.
#endif

    err = lwip_sendto(s, iecho, ping_size, 0, (struct sockaddr*) &to, sizeof(to));
  134668:	e51b2008 	ldr	r2, [fp, #-8]
  13466c:	e3a03010 	mov	r3, #16
  134670:	e58d3004 	str	r3, [sp, #4]
  134674:	e24b3020 	sub	r3, fp, #32
  134678:	e58d3000 	str	r3, [sp]
  13467c:	e3a03000 	mov	r3, #0
  134680:	e51b100c 	ldr	r1, [fp, #-12]
  134684:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  134688:	ebff797c 	bl	112c80 <lwip_sendto>
  13468c:	e50b0010 	str	r0, [fp, #-16]
    rt_free(iecho);
  134690:	e51b000c 	ldr	r0, [fp, #-12]
  134694:	ebff3a48 	bl	102fbc <rt_free>

    return (err == ping_size ? ERR_OK : ERR_VAL);
  134698:	e51b2010 	ldr	r2, [fp, #-16]
  13469c:	e51b3008 	ldr	r3, [fp, #-8]
  1346a0:	e1520003 	cmp	r2, r3
  1346a4:	1a000001 	bne	1346b0 <lwip_ping_send+0xe8>
  1346a8:	e3a03000 	mov	r3, #0
  1346ac:	ea000000 	b	1346b4 <lwip_ping_send+0xec>
  1346b0:	e3e03005 	mvn	r3, #5
}
  1346b4:	e1a00003 	mov	r0, r3
  1346b8:	e24bd004 	sub	sp, fp, #4
  1346bc:	e8bd8800 	pop	{fp, pc}

001346c0 <lwip_ping_recv>:

int lwip_ping_recv(int s, int *ttl)
{
  1346c0:	e92d4810 	push	{r4, fp, lr}
  1346c4:	e28db008 	add	fp, sp, #8
  1346c8:	e24dd074 	sub	sp, sp, #116	; 0x74
  1346cc:	e50b0070 	str	r0, [fp, #-112]	; 0xffffff90
  1346d0:	e50b1074 	str	r1, [fp, #-116]	; 0xffffff8c
    char buf[64];
    int fromlen = sizeof(struct sockaddr_in), len;
  1346d4:	e3a03010 	mov	r3, #16
  1346d8:	e50b305c 	str	r3, [fp, #-92]	; 0xffffffa4
    struct sockaddr_in from;
    struct ip_hdr *iphdr;
    struct icmp_echo_hdr *iecho;

    while ((len = lwip_recvfrom(s, buf, sizeof(buf), 0, (struct sockaddr*) &from, (socklen_t*) &fromlen)) > 0)
  1346dc:	ea000024 	b	134774 <lwip_ping_recv+0xb4>
    {
        if (len >= (int)(sizeof(struct ip_hdr) + sizeof(struct icmp_echo_hdr)))
  1346e0:	e51b3010 	ldr	r3, [fp, #-16]
  1346e4:	e353001b 	cmp	r3, #27
  1346e8:	da000021 	ble	134774 <lwip_ping_recv+0xb4>
        {
            iphdr = (struct ip_hdr *) buf;
  1346ec:	e24b3058 	sub	r3, fp, #88	; 0x58
  1346f0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
            iecho = (struct icmp_echo_hdr *) (buf + (IPH_HL(iphdr) * 4));
  1346f4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1346f8:	e5d33000 	ldrb	r3, [r3]
  1346fc:	e203300f 	and	r3, r3, #15
  134700:	e1a03103 	lsl	r3, r3, #2
  134704:	e1a02003 	mov	r2, r3
  134708:	e24b3058 	sub	r3, fp, #88	; 0x58
  13470c:	e0833002 	add	r3, r3, r2
  134710:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
            if ((iecho->id == PING_ID) && (iecho->seqno == htons(ping_seq_num)))
  134714:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  134718:	e1d330b4 	ldrh	r3, [r3, #4]
  13471c:	e6ff3073 	uxth	r3, r3
  134720:	e30a2faf 	movw	r2, #44975	; 0xafaf
  134724:	e1530002 	cmp	r3, r2
  134728:	1a000011 	bne	134774 <lwip_ping_recv+0xb4>
  13472c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  134730:	e1d330b6 	ldrh	r3, [r3, #6]
  134734:	e6ff4073 	uxth	r4, r3
  134738:	e30f3bee 	movw	r3, #64494	; 0xfbee
  13473c:	e3403014 	movt	r3, #20
  134740:	e1d330b0 	ldrh	r3, [r3]
  134744:	e1a00003 	mov	r0, r3
  134748:	ebff881c 	bl	1167c0 <lwip_htons>
  13474c:	e1a03000 	mov	r3, r0
  134750:	e1540003 	cmp	r4, r3
  134754:	1a000006 	bne	134774 <lwip_ping_recv+0xb4>
            {
                *ttl = iphdr->_ttl;
  134758:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13475c:	e5d33008 	ldrb	r3, [r3, #8]
  134760:	e1a02003 	mov	r2, r3
  134764:	e51b3074 	ldr	r3, [fp, #-116]	; 0xffffff8c
  134768:	e5832000 	str	r2, [r3]
                return len;
  13476c:	e51b3010 	ldr	r3, [fp, #-16]
  134770:	ea00000d 	b	1347ac <lwip_ping_recv+0xec>
    while ((len = lwip_recvfrom(s, buf, sizeof(buf), 0, (struct sockaddr*) &from, (socklen_t*) &fromlen)) > 0)
  134774:	e24b1058 	sub	r1, fp, #88	; 0x58
  134778:	e24b305c 	sub	r3, fp, #92	; 0x5c
  13477c:	e58d3004 	str	r3, [sp, #4]
  134780:	e24b306c 	sub	r3, fp, #108	; 0x6c
  134784:	e58d3000 	str	r3, [sp]
  134788:	e3a03000 	mov	r3, #0
  13478c:	e3a02040 	mov	r2, #64	; 0x40
  134790:	e51b0070 	ldr	r0, [fp, #-112]	; 0xffffff90
  134794:	ebff75ce 	bl	111ed4 <lwip_recvfrom>
  134798:	e50b0010 	str	r0, [fp, #-16]
  13479c:	e51b3010 	ldr	r3, [fp, #-16]
  1347a0:	e3530000 	cmp	r3, #0
  1347a4:	caffffcd 	bgt	1346e0 <lwip_ping_recv+0x20>
            }
        }
    }

    return len;
  1347a8:	e51b3010 	ldr	r3, [fp, #-16]
}
  1347ac:	e1a00003 	mov	r0, r3
  1347b0:	e24bd008 	sub	sp, fp, #8
  1347b4:	e8bd8810 	pop	{r4, fp, pc}

001347b8 <ENET_ActiveRead>:
 * @note This must be called after the MAC configuration and
 * state are ready. It must be called after the ENET_Init() and
 * ENET_Ptp1588Configure(). This should be called when the ENET receive required.
 */
static inline void ENET_ActiveRead(ENET_Type *base)
{
  1347b8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1347bc:	e28db000 	add	fp, sp, #0
  1347c0:	e24dd00c 	sub	sp, sp, #12
  1347c4:	e50b0008 	str	r0, [fp, #-8]
    base->RDAR = ENET_RDAR_RDAR_MASK;
  1347c8:	e51b3008 	ldr	r3, [fp, #-8]
  1347cc:	e3a02401 	mov	r2, #16777216	; 0x1000000
  1347d0:	e5832010 	str	r2, [r3, #16]
}
  1347d4:	e320f000 	nop	{0}
  1347d8:	e28bd000 	add	sp, fp, #0
  1347dc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1347e0:	e12fff1e 	bx	lr

001347e4 <ENET_EnableInterrupts>:
 * @param base  ENET peripheral base address.
 * @param mask  ENET interrupts to enable. This is a logical OR of the
 *             enumeration :: enet_interrupt_enable_t.
 */
static inline void ENET_EnableInterrupts(ENET_Type *base, uint32_t mask)
{
  1347e4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1347e8:	e28db000 	add	fp, sp, #0
  1347ec:	e24dd00c 	sub	sp, sp, #12
  1347f0:	e50b0008 	str	r0, [fp, #-8]
  1347f4:	e50b100c 	str	r1, [fp, #-12]
    base->EIMR |= mask;
  1347f8:	e51b3008 	ldr	r3, [fp, #-8]
  1347fc:	e5932008 	ldr	r2, [r3, #8]
  134800:	e51b300c 	ldr	r3, [fp, #-12]
  134804:	e1822003 	orr	r2, r2, r3
  134808:	e51b3008 	ldr	r3, [fp, #-8]
  13480c:	e5832008 	str	r2, [r3, #8]
}
  134810:	e320f000 	nop	{0}
  134814:	e28bd000 	add	sp, fp, #0
  134818:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  13481c:	e12fff1e 	bx	lr

00134820 <ENET_DisableInterrupts>:
 * @param base  ENET peripheral base address.
 * @param mask  ENET interrupts to disable. This is a logical OR of the
 *             enumeration :: enet_interrupt_enable_t.
 */
static inline void ENET_DisableInterrupts(ENET_Type *base, uint32_t mask)
{
  134820:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  134824:	e28db000 	add	fp, sp, #0
  134828:	e24dd00c 	sub	sp, sp, #12
  13482c:	e50b0008 	str	r0, [fp, #-8]
  134830:	e50b100c 	str	r1, [fp, #-12]
    base->EIMR &= ~mask;
  134834:	e51b3008 	ldr	r3, [fp, #-8]
  134838:	e5932008 	ldr	r2, [r3, #8]
  13483c:	e51b300c 	ldr	r3, [fp, #-12]
  134840:	e1e03003 	mvn	r3, r3
  134844:	e0022003 	and	r2, r2, r3
  134848:	e51b3008 	ldr	r3, [fp, #-8]
  13484c:	e5832008 	str	r2, [r3, #8]
}
  134850:	e320f000 	nop	{0}
  134854:	e28bd000 	add	sp, fp, #0
  134858:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  13485c:	e12fff1e 	bx	lr

00134860 <imx6ul_eth_link_change>:
#else
#define eth_device_linkchange(x, y)
#endif

void imx6ul_eth_link_change(struct rt_imx6ul_ethps *imx6ul_device,rt_bool_t up)
{
  134860:	e92d4800 	push	{fp, lr}
  134864:	e28db004 	add	fp, sp, #4
  134868:	e24dd008 	sub	sp, sp, #8
  13486c:	e50b0008 	str	r0, [fp, #-8]
  134870:	e50b100c 	str	r1, [fp, #-12]
    if(up)
  134874:	e51b300c 	ldr	r3, [fp, #-12]
  134878:	e3530000 	cmp	r3, #0
  13487c:	0a000013 	beq	1348d0 <imx6ul_eth_link_change+0x70>
    {
        LOG_D("enet%d link up",imx6ul_device->mac_num);
  134880:	e3090d78 	movw	r0, #40312	; 0x9d78
  134884:	e3400014 	movt	r0, #20
  134888:	ebff3a21 	bl	103114 <rt_kprintf>
  13488c:	e51b3008 	ldr	r3, [fp, #-8]
  134890:	e59330a4 	ldr	r3, [r3, #164]	; 0xa4
  134894:	e1a01003 	mov	r1, r3
  134898:	e3090d8c 	movw	r0, #40332	; 0x9d8c
  13489c:	e3400014 	movt	r0, #20
  1348a0:	ebff3a1b 	bl	103114 <rt_kprintf>
  1348a4:	e3090d9c 	movw	r0, #40348	; 0x9d9c
  1348a8:	e3400014 	movt	r0, #20
  1348ac:	ebff3a18 	bl	103114 <rt_kprintf>
        eth_device_linkchange(&imx6ul_device->parent, RT_TRUE);
  1348b0:	e51b3008 	ldr	r3, [fp, #-8]
  1348b4:	e3a01001 	mov	r1, #1
  1348b8:	e1a00003 	mov	r0, r3
  1348bc:	ebffd532 	bl	129d8c <eth_device_linkchange>
        imx6ul_device->phy_link_status = RT_TRUE;
  1348c0:	e51b3008 	ldr	r3, [fp, #-8]
  1348c4:	e3a02001 	mov	r2, #1
  1348c8:	e5832088 	str	r2, [r3, #136]	; 0x88
    {
        LOG_D("enet%d link down",imx6ul_device->mac_num);
        eth_device_linkchange(&imx6ul_device->parent, RT_FALSE);
        imx6ul_device->phy_link_status = RT_FALSE;
    }
}
  1348cc:	ea000012 	b	13491c <imx6ul_eth_link_change+0xbc>
        LOG_D("enet%d link down",imx6ul_device->mac_num);
  1348d0:	e3090d78 	movw	r0, #40312	; 0x9d78
  1348d4:	e3400014 	movt	r0, #20
  1348d8:	ebff3a0d 	bl	103114 <rt_kprintf>
  1348dc:	e51b3008 	ldr	r3, [fp, #-8]
  1348e0:	e59330a4 	ldr	r3, [r3, #164]	; 0xa4
  1348e4:	e1a01003 	mov	r1, r3
  1348e8:	e3090da4 	movw	r0, #40356	; 0x9da4
  1348ec:	e3400014 	movt	r0, #20
  1348f0:	ebff3a07 	bl	103114 <rt_kprintf>
  1348f4:	e3090d9c 	movw	r0, #40348	; 0x9d9c
  1348f8:	e3400014 	movt	r0, #20
  1348fc:	ebff3a04 	bl	103114 <rt_kprintf>
        eth_device_linkchange(&imx6ul_device->parent, RT_FALSE);
  134900:	e51b3008 	ldr	r3, [fp, #-8]
  134904:	e3a01000 	mov	r1, #0
  134908:	e1a00003 	mov	r0, r3
  13490c:	ebffd51e 	bl	129d8c <eth_device_linkchange>
        imx6ul_device->phy_link_status = RT_FALSE;
  134910:	e51b3008 	ldr	r3, [fp, #-8]
  134914:	e3a02000 	mov	r2, #0
  134918:	e5832088 	str	r2, [r3, #136]	; 0x88
}
  13491c:	e320f000 	nop	{0}
  134920:	e24bd004 	sub	sp, fp, #4
  134924:	e8bd8800 	pop	{fp, pc}

00134928 <page_alloc>:

void page_alloc(size_t memsize, void **addr)
{
  134928:	e92d4800 	push	{fp, lr}
  13492c:	e28db004 	add	fp, sp, #4
  134930:	e24dd018 	sub	sp, sp, #24
  134934:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  134938:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    size_t alloc_size = memsize + SYS_PAGE_SIZE * 2;
  13493c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  134940:	e2833a02 	add	r3, r3, #8192	; 0x2000
  134944:	e50b3008 	str	r3, [fp, #-8]
    void * addr_start = malloc(alloc_size);
  134948:	e51b0008 	ldr	r0, [fp, #-8]
  13494c:	eb0022f9 	bl	13d538 <malloc>
  134950:	e1a03000 	mov	r3, r0
  134954:	e50b300c 	str	r3, [fp, #-12]
    rt_memset(addr_start, 0, alloc_size);
  134958:	e51b2008 	ldr	r2, [fp, #-8]
  13495c:	e3a01000 	mov	r1, #0
  134960:	e51b000c 	ldr	r0, [fp, #-12]
  134964:	ebff3a57 	bl	1032c8 <rt_memset>

    long mask = SYS_PAGE_SIZE - 1;
  134968:	e3003fff 	movw	r3, #4095	; 0xfff
  13496c:	e50b3010 	str	r3, [fp, #-16]
    *addr = (void*)((long)(addr_start + SYS_PAGE_SIZE) & ~mask);
  134970:	e51b300c 	ldr	r3, [fp, #-12]
  134974:	e2833a01 	add	r3, r3, #4096	; 0x1000
  134978:	e1a02003 	mov	r2, r3
  13497c:	e51b3010 	ldr	r3, [fp, #-16]
  134980:	e1e03003 	mvn	r3, r3
  134984:	e0033002 	and	r3, r3, r2
  134988:	e1a02003 	mov	r2, r3
  13498c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  134990:	e5832000 	str	r2, [r3]

    return;
  134994:	e320f000 	nop	{0}
}
  134998:	e24bd004 	sub	sp, fp, #4
  13499c:	e8bd8800 	pop	{fp, pc}

001349a0 <enet_buffer_init>:

rt_err_t enet_buffer_init(enet_buffer_config_t *buffConfig)
{
  1349a0:	e92d4800 	push	{fp, lr}
  1349a4:	e28db004 	add	fp, sp, #4
  1349a8:	e24dd030 	sub	sp, sp, #48	; 0x30
  1349ac:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
    void *tx_buff_addr = RT_NULL;
  1349b0:	e3a03000 	mov	r3, #0
  1349b4:	e50b3008 	str	r3, [fp, #-8]
    void *rx_buff_addr = RT_NULL;
  1349b8:	e3a03000 	mov	r3, #0
  1349bc:	e50b300c 	str	r3, [fp, #-12]
    void *tx_bd_addr = RT_NULL;
  1349c0:	e3a03000 	mov	r3, #0
  1349c4:	e50b3010 	str	r3, [fp, #-16]
    void *rx_bd_addr = RT_NULL;
  1349c8:	e3a03000 	mov	r3, #0
  1349cc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

    if(((SYS_PAGE_SIZE<<RX_BUFFER_INDEX_NUM)<buffConfig->rxBufferTotalSize)||
  1349d0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1349d4:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
  1349d8:	e3530701 	cmp	r3, #262144	; 0x40000
  1349dc:	8a000003 	bhi	1349f0 <enet_buffer_init+0x50>
       ((SYS_PAGE_SIZE<<TX_BUFFER_INDEX_NUM)<buffConfig->txBufferTotalSize))
  1349e0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1349e4:	e5933030 	ldr	r3, [r3, #48]	; 0x30
    if(((SYS_PAGE_SIZE<<RX_BUFFER_INDEX_NUM)<buffConfig->rxBufferTotalSize)||
  1349e8:	e3530701 	cmp	r3, #262144	; 0x40000
  1349ec:	9a00000a 	bls	134a1c <enet_buffer_init+0x7c>
    {
        LOG_E("ERROR: alloc mem not enough for enet driver");
  1349f0:	e3090db8 	movw	r0, #40376	; 0x9db8
  1349f4:	e3400014 	movt	r0, #20
  1349f8:	ebff39c5 	bl	103114 <rt_kprintf>
  1349fc:	e3090dcc 	movw	r0, #40396	; 0x9dcc
  134a00:	e3400014 	movt	r0, #20
  134a04:	ebff39c2 	bl	103114 <rt_kprintf>
  134a08:	e3090d9c 	movw	r0, #40348	; 0x9d9c
  134a0c:	e3400014 	movt	r0, #20
  134a10:	ebff39bf 	bl	103114 <rt_kprintf>
        return RT_ERROR;
  134a14:	e3a03001 	mov	r3, #1
  134a18:	ea000093 	b	134c6c <enet_buffer_init+0x2cc>
    }

    size_t rx_buff_memsize = SYS_PAGE_SIZE<<RX_BUFFER_INDEX_NUM;
  134a1c:	e3a03701 	mov	r3, #262144	; 0x40000
  134a20:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    size_t tx_buff_memsize = SYS_PAGE_SIZE<<TX_BUFFER_INDEX_NUM;
  134a24:	e3a03701 	mov	r3, #262144	; 0x40000
  134a28:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    size_t rx_bd_memsize = SYS_PAGE_SIZE<<RX_BD_INDEX_NUM;
  134a2c:	e3a03a01 	mov	r3, #4096	; 0x1000
  134a30:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
    size_t tx_bd_memsize = SYS_PAGE_SIZE<<TX_BD_INDEX_NUM;
  134a34:	e3a03a01 	mov	r3, #4096	; 0x1000
  134a38:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    size_t total_memsize = rx_buff_memsize + tx_buff_memsize + rx_bd_memsize + tx_bd_memsize;
  134a3c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  134a40:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  134a44:	e0822003 	add	r2, r2, r3
  134a48:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  134a4c:	e0823003 	add	r3, r2, r3
  134a50:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  134a54:	e0823003 	add	r3, r2, r3
  134a58:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8

    void *mem_align= RT_NULL;
  134a5c:	e3a03000 	mov	r3, #0
  134a60:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
    page_alloc(total_memsize, &mem_align);
  134a64:	e24b302c 	sub	r3, fp, #44	; 0x2c
  134a68:	e1a01003 	mov	r1, r3
  134a6c:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  134a70:	ebffffac 	bl	134928 <page_alloc>
    if (!mem_align)
  134a74:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  134a78:	e3530000 	cmp	r3, #0
  134a7c:	1a000001 	bne	134a88 <enet_buffer_init+0xe8>
    {
        return RT_ERROR;
  134a80:	e3a03001 	mov	r3, #1
  134a84:	ea000078 	b	134c6c <enet_buffer_init+0x2cc>
    }
    
    rx_buff_addr = mem_align;
  134a88:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  134a8c:	e50b300c 	str	r3, [fp, #-12]
    mem_align += rx_buff_memsize;
  134a90:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  134a94:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  134a98:	e0823003 	add	r3, r2, r3
  134a9c:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
    if(!rx_buff_addr)
  134aa0:	e51b300c 	ldr	r3, [fp, #-12]
  134aa4:	e3530000 	cmp	r3, #0
  134aa8:	1a00000a 	bne	134ad8 <enet_buffer_init+0x138>
    {
        LOG_E("ERROR: rx buff page alloc failed");
  134aac:	e3090db8 	movw	r0, #40376	; 0x9db8
  134ab0:	e3400014 	movt	r0, #20
  134ab4:	ebff3996 	bl	103114 <rt_kprintf>
  134ab8:	e3090df8 	movw	r0, #40440	; 0x9df8
  134abc:	e3400014 	movt	r0, #20
  134ac0:	ebff3993 	bl	103114 <rt_kprintf>
  134ac4:	e3090d9c 	movw	r0, #40348	; 0x9d9c
  134ac8:	e3400014 	movt	r0, #20
  134acc:	ebff3990 	bl	103114 <rt_kprintf>
        return RT_ERROR;
  134ad0:	e3a03001 	mov	r3, #1
  134ad4:	ea000064 	b	134c6c <enet_buffer_init+0x2cc>
    }
    // buffConfig->rxBufferAlign = (void *)rt_ioremap_nocache(virtual_to_physical(rx_buff_addr), (SYS_PAGE_SIZE<<RX_BUFFER_INDEX_NUM));
    // buffConfig->rxBufferAlign = ueth_remap(ueth_v2p(rx_buff_addr), UETH_REMAP_NOCACHE, rx_buff_memsize);
    buffConfig->rxBufferAlign = rx_buff_addr;
  134ad8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  134adc:	e51b200c 	ldr	r2, [fp, #-12]
  134ae0:	e5832014 	str	r2, [r3, #20]
    buffConfig->rxPhyBufferAlign = ueth_v2p(rx_buff_addr);
  134ae4:	e51b000c 	ldr	r0, [fp, #-12]
  134ae8:	ebff3e44 	bl	104400 <ueth_v2p>
  134aec:	e1a02000 	mov	r2, r0
  134af0:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  134af4:	e5832024 	str	r2, [r3, #36]	; 0x24
    
    // tx_buff_addr = (void*)rt_pages_alloc(TX_BUFFER_INDEX_NUM);
    tx_buff_addr = mem_align;
  134af8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  134afc:	e50b3008 	str	r3, [fp, #-8]
    mem_align += tx_buff_memsize;
  134b00:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  134b04:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  134b08:	e0823003 	add	r3, r2, r3
  134b0c:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
    if(!tx_buff_addr)
  134b10:	e51b3008 	ldr	r3, [fp, #-8]
  134b14:	e3530000 	cmp	r3, #0
  134b18:	1a00000a 	bne	134b48 <enet_buffer_init+0x1a8>
    {
        LOG_E("ERROR: tx buff page alloc failed");
  134b1c:	e3090db8 	movw	r0, #40376	; 0x9db8
  134b20:	e3400014 	movt	r0, #20
  134b24:	ebff397a 	bl	103114 <rt_kprintf>
  134b28:	e3090e1c 	movw	r0, #40476	; 0x9e1c
  134b2c:	e3400014 	movt	r0, #20
  134b30:	ebff3977 	bl	103114 <rt_kprintf>
  134b34:	e3090d9c 	movw	r0, #40348	; 0x9d9c
  134b38:	e3400014 	movt	r0, #20
  134b3c:	ebff3974 	bl	103114 <rt_kprintf>
        return RT_ERROR;
  134b40:	e3a03001 	mov	r3, #1
  134b44:	ea000048 	b	134c6c <enet_buffer_init+0x2cc>
    }
    // buffConfig->txBufferAlign = (void *)rt_ioremap_nocache(virtual_to_physical(tx_buff_addr), (SYS_PAGE_SIZE<<TX_BUFFER_INDEX_NUM));
    // buffConfig->txBufferAlign = ueth_remap(ueth_v2p(tx_buff_addr), UETH_REMAP_NOCACHE, tx_buff_memsize);
    buffConfig->txBufferAlign = tx_buff_addr;
  134b48:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  134b4c:	e51b2008 	ldr	r2, [fp, #-8]
  134b50:	e5832018 	str	r2, [r3, #24]
    buffConfig->txPhyBufferAlign = ueth_v2p(tx_buff_addr);
  134b54:	e51b0008 	ldr	r0, [fp, #-8]
  134b58:	ebff3e28 	bl	104400 <ueth_v2p>
  134b5c:	e1a02000 	mov	r2, r0
  134b60:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  134b64:	e5832028 	str	r2, [r3, #40]	; 0x28
    
    // rx_bd_addr = (void*)rt_pages_alloc(RX_BD_INDEX_NUM);
    rx_bd_addr = mem_align;
  134b68:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  134b6c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    mem_align += rx_bd_memsize;
  134b70:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  134b74:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  134b78:	e0823003 	add	r3, r2, r3
  134b7c:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4
    if(!rx_bd_addr)
  134b80:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  134b84:	e3530000 	cmp	r3, #0
  134b88:	1a00000a 	bne	134bb8 <enet_buffer_init+0x218>
    {
        LOG_E("ERROR: rx bd page alloc failed");
  134b8c:	e3090db8 	movw	r0, #40376	; 0x9db8
  134b90:	e3400014 	movt	r0, #20
  134b94:	ebff395e 	bl	103114 <rt_kprintf>
  134b98:	e3090e40 	movw	r0, #40512	; 0x9e40
  134b9c:	e3400014 	movt	r0, #20
  134ba0:	ebff395b 	bl	103114 <rt_kprintf>
  134ba4:	e3090d9c 	movw	r0, #40348	; 0x9d9c
  134ba8:	e3400014 	movt	r0, #20
  134bac:	ebff3958 	bl	103114 <rt_kprintf>
        return RT_ERROR;
  134bb0:	e3a03001 	mov	r3, #1
  134bb4:	ea00002c 	b	134c6c <enet_buffer_init+0x2cc>
    }
    buffConfig->rxPhyBdStartAddrAlign = ueth_v2p(rx_bd_addr);
  134bb8:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  134bbc:	ebff3e0f 	bl	104400 <ueth_v2p>
  134bc0:	e1a02000 	mov	r2, r0
  134bc4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  134bc8:	e583201c 	str	r2, [r3, #28]
    buffConfig->rxBdStartAddrAlign = ueth_remap(buffConfig->rxPhyBdStartAddrAlign, UETH_REMAP_NOCACHE, rx_bd_memsize);
  134bcc:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  134bd0:	e593301c 	ldr	r3, [r3, #28]
  134bd4:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  134bd8:	e3a01003 	mov	r1, #3
  134bdc:	e1a00003 	mov	r0, r3
  134be0:	ebff3e33 	bl	1044b4 <ueth_remap>
  134be4:	e1a02000 	mov	r2, r0
  134be8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  134bec:	e583200c 	str	r2, [r3, #12]
    // buffConfig->rxBdStartAddrAlign = (void *)rt_ioremap_nocache(virtual_to_physical(rx_bd_addr), (SYS_PAGE_SIZE<<RX_BD_INDEX_NUM));
    // buffConfig->rxBdStartAddrAlign = rx_bd_addr;
   
    // tx_bd_addr = (void*)rt_pages_alloc(TX_BD_INDEX_NUM);
    tx_bd_addr = mem_align;
  134bf0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  134bf4:	e50b3010 	str	r3, [fp, #-16]
    if(!tx_bd_addr)
  134bf8:	e51b3010 	ldr	r3, [fp, #-16]
  134bfc:	e3530000 	cmp	r3, #0
  134c00:	1a00000a 	bne	134c30 <enet_buffer_init+0x290>
    {
        LOG_E("ERROR: tx bd page alloc failed");
  134c04:	e3090db8 	movw	r0, #40376	; 0x9db8
  134c08:	e3400014 	movt	r0, #20
  134c0c:	ebff3940 	bl	103114 <rt_kprintf>
  134c10:	e3090e60 	movw	r0, #40544	; 0x9e60
  134c14:	e3400014 	movt	r0, #20
  134c18:	ebff393d 	bl	103114 <rt_kprintf>
  134c1c:	e3090d9c 	movw	r0, #40348	; 0x9d9c
  134c20:	e3400014 	movt	r0, #20
  134c24:	ebff393a 	bl	103114 <rt_kprintf>
        return RT_ERROR;
  134c28:	e3a03001 	mov	r3, #1
  134c2c:	ea00000e 	b	134c6c <enet_buffer_init+0x2cc>
    }
    // buffConfig->txBdStartAddrAlign = (void *)rt_ioremap_nocache(virtual_to_physical(tx_bd_addr), (SYS_PAGE_SIZE<<TX_BD_INDEX_NUM));
    buffConfig->txPhyBdStartAddrAlign = ueth_v2p(tx_bd_addr);
  134c30:	e51b0010 	ldr	r0, [fp, #-16]
  134c34:	ebff3df1 	bl	104400 <ueth_v2p>
  134c38:	e1a02000 	mov	r2, r0
  134c3c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  134c40:	e5832020 	str	r2, [r3, #32]
    buffConfig->txBdStartAddrAlign = ueth_remap(buffConfig->txPhyBdStartAddrAlign, UETH_REMAP_NOCACHE, tx_bd_memsize);
  134c44:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  134c48:	e5933020 	ldr	r3, [r3, #32]
  134c4c:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  134c50:	e3a01003 	mov	r1, #3
  134c54:	e1a00003 	mov	r0, r3
  134c58:	ebff3e15 	bl	1044b4 <ueth_remap>
  134c5c:	e1a02000 	mov	r2, r0
  134c60:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  134c64:	e5832010 	str	r2, [r3, #16]
    // buffConfig->txBdStartAddrAlign = tx_bd_addr;
    
    return RT_EOK;
  134c68:	e3a03000 	mov	r3, #0
}
  134c6c:	e1a00003 	mov	r0, r3
  134c70:	e24bd004 	sub	sp, fp, #4
  134c74:	e8bd8800 	pop	{fp, pc}

00134c78 <rt_imx6ul_eth_init>:

/* EMAC initialization function */
static rt_err_t rt_imx6ul_eth_init(rt_device_t dev)
{
  134c78:	e92d4800 	push	{fp, lr}
  134c7c:	e28db004 	add	fp, sp, #4
  134c80:	e24dd038 	sub	sp, sp, #56	; 0x38
  134c84:	e50b0030 	str	r0, [fp, #-48]	; 0xffffffd0
    rt_err_t state;
    struct rt_imx6ul_ethps *imx6ul_device = (struct rt_imx6ul_ethps *)dev;
  134c88:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  134c8c:	e50b300c 	str	r3, [fp, #-12]
    ENET_Type *base_addr = RT_NULL;
  134c90:	e3a03000 	mov	r3, #0
  134c94:	e50b3010 	str	r3, [fp, #-16]
    enet_handle_t *handle;
    enet_buffer_config_t *buffConfig;
    rt_uint32_t reg_value;

    // imx6ul_device->enet_virtual_base_addr = (ENET_Type *)rt_ioremap((void *)imx6ul_device->enet_phy_base_addr, SYS_PAGE_SIZE);
    imx6ul_device->enet_virtual_base_addr = (ENET_Type *)ueth_remap((void *)imx6ul_device->enet_phy_base_addr, UETH_REMAP, SYS_PAGE_SIZE);
  134c98:	e51b300c 	ldr	r3, [fp, #-12]
  134c9c:	e593309c 	ldr	r3, [r3, #156]	; 0x9c
  134ca0:	e3a02a01 	mov	r2, #4096	; 0x1000
  134ca4:	e3a01001 	mov	r1, #1
  134ca8:	e1a00003 	mov	r0, r3
  134cac:	ebff3e00 	bl	1044b4 <ueth_remap>
  134cb0:	e1a02000 	mov	r2, r0
  134cb4:	e51b300c 	ldr	r3, [fp, #-12]
  134cb8:	e58320a0 	str	r2, [r3, #160]	; 0xa0
    base_addr = imx6ul_device->enet_virtual_base_addr;
  134cbc:	e51b300c 	ldr	r3, [fp, #-12]
  134cc0:	e59330a0 	ldr	r3, [r3, #160]	; 0xa0
  134cc4:	e50b3010 	str	r3, [fp, #-16]
    config = &imx6ul_device->config;
  134cc8:	e51b300c 	ldr	r3, [fp, #-12]
  134ccc:	e28330dc 	add	r3, r3, #220	; 0xdc
  134cd0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    handle = &imx6ul_device->handle;
  134cd4:	e51b300c 	ldr	r3, [fp, #-12]
  134cd8:	e2833c01 	add	r3, r3, #256	; 0x100
  134cdc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    buffConfig = &imx6ul_device->buffConfig;
  134ce0:	e51b300c 	ldr	r3, [fp, #-12]
  134ce4:	e28330a8 	add	r3, r3, #168	; 0xa8
  134ce8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4

    for (int i=0; i<GET_ARRAY_NUM(imx6ul_device->gpio); i++)
  134cec:	e3a03000 	mov	r3, #0
  134cf0:	e50b3008 	str	r3, [fp, #-8]
  134cf4:	ea00000b 	b	134d28 <rt_imx6ul_eth_init+0xb0>
    {
        ueth_gpioinit((void *)&imx6ul_device->gpio[i], sizeof(imx6ul_device->gpio[i]));
  134cf8:	e51b3008 	ldr	r3, [fp, #-8]
  134cfc:	e3a0201c 	mov	r2, #28
  134d00:	e0030392 	mul	r3, r2, r3
  134d04:	e2833e12 	add	r3, r3, #288	; 0x120
  134d08:	e51b200c 	ldr	r2, [fp, #-12]
  134d0c:	e0823003 	add	r3, r2, r3
  134d10:	e3a0101c 	mov	r1, #28
  134d14:	e1a00003 	mov	r0, r3
  134d18:	ebff3e19 	bl	104584 <ueth_gpioinit>
    for (int i=0; i<GET_ARRAY_NUM(imx6ul_device->gpio); i++)
  134d1c:	e51b3008 	ldr	r3, [fp, #-8]
  134d20:	e2833001 	add	r3, r3, #1
  134d24:	e50b3008 	str	r3, [fp, #-8]
  134d28:	e51b3008 	ldr	r3, [fp, #-8]
  134d2c:	e3530008 	cmp	r3, #8
  134d30:	9afffff0 	bls	134cf8 <rt_imx6ul_eth_init+0x80>
    }
    
    IOMUXC_GPR_Type *GPR1 = (IOMUXC_GPR_Type *)ueth_remap((void *)IOMUXC_GPR, UETH_REMAP, 0x1000);
  134d34:	e3a02a01 	mov	r2, #4096	; 0x1000
  134d38:	e3a01001 	mov	r1, #1
  134d3c:	e3a00901 	mov	r0, #16384	; 0x4000
  134d40:	e340020e 	movt	r0, #526	; 0x20e
  134d44:	ebff3dda 	bl	1044b4 <ueth_remap>
  134d48:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
    if(imx6ul_device->mac_num == 1)
  134d4c:	e51b300c 	ldr	r3, [fp, #-12]
  134d50:	e59330a4 	ldr	r3, [r3, #164]	; 0xa4
  134d54:	e3530001 	cmp	r3, #1
  134d58:	1a00000c 	bne	134d90 <rt_imx6ul_eth_init+0x118>
    {
        reg_value = GPR1->GPR1;
  134d5c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  134d60:	e5933004 	ldr	r3, [r3, #4]
  134d64:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        reg_value &= ~(IOMUXC_GPR_GPR1_ENET1_CLK_SEL_MASK
  134d68:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  134d6c:	e3c33a02 	bic	r3, r3, #8192	; 0x2000
  134d70:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
                    | IOMUXC_GPR_GPR1_ENET1_CLK_SEL_MASK);
        reg_value |=  IOMUXC_GPR_GPR1_ENET1_TX_CLK_DIR(1);
  134d74:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  134d78:	e3833802 	orr	r3, r3, #131072	; 0x20000
  134d7c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        reg_value |=  IOMUXC_GPR_GPR1_ENET1_CLK_SEL(0);
        GPR1->GPR1 = reg_value;
  134d80:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  134d84:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  134d88:	e5832004 	str	r2, [r3, #4]
  134d8c:	ea00000f 	b	134dd0 <rt_imx6ul_eth_init+0x158>
    }
    else if(imx6ul_device->mac_num == 2)
  134d90:	e51b300c 	ldr	r3, [fp, #-12]
  134d94:	e59330a4 	ldr	r3, [r3, #164]	; 0xa4
  134d98:	e3530002 	cmp	r3, #2
  134d9c:	1a00000b 	bne	134dd0 <rt_imx6ul_eth_init+0x158>
    {
        reg_value = GPR1->GPR1;
  134da0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  134da4:	e5933004 	ldr	r3, [r3, #4]
  134da8:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        reg_value &= ~(IOMUXC_GPR_GPR1_ENET2_CLK_SEL_MASK
  134dac:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  134db0:	e3c33901 	bic	r3, r3, #16384	; 0x4000
  134db4:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
                    | IOMUXC_GPR_GPR1_ENET2_CLK_SEL_MASK);
        reg_value |=  IOMUXC_GPR_GPR1_ENET2_TX_CLK_DIR(1);
  134db8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  134dbc:	e3833701 	orr	r3, r3, #262144	; 0x40000
  134dc0:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
        reg_value |=  IOMUXC_GPR_GPR1_ENET2_CLK_SEL(0);
        GPR1->GPR1 = reg_value;
  134dc4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  134dc8:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  134dcc:	e5832004 	str	r2, [r3, #4]
    } 

    // ENET_InitModuleClock();
    ueth_init_clock();
  134dd0:	ebff3e19 	bl	10463c <ueth_init_clock>
    ENET_GetDefaultConfig(config);
  134dd4:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  134dd8:	eb00047c 	bl	135fd0 <ENET_GetDefaultConfig>
    config->interrupt |= (ENET_RX_INTERRUPT);
  134ddc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  134de0:	e5933004 	ldr	r3, [r3, #4]
  134de4:	e3832403 	orr	r2, r3, #50331648	; 0x3000000
  134de8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  134dec:	e5832004 	str	r2, [r3, #4]
    state = enet_buffer_init(buffConfig);
  134df0:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  134df4:	ebfffee9 	bl	1349a0 <enet_buffer_init>
  134df8:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
    if(state != RT_EOK)
  134dfc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  134e00:	e3530000 	cmp	r3, #0
  134e04:	0a000001 	beq	134e10 <rt_imx6ul_eth_init+0x198>
    {
        return state;
  134e08:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  134e0c:	ea000015 	b	134e68 <rt_imx6ul_eth_init+0x1f0>
    }
    ENET_Init(base_addr, handle, config, buffConfig, imx6ul_device->dev_addr, SYS_CLOCK_HZ);
  134e10:	e51b300c 	ldr	r3, [fp, #-12]
  134e14:	e2832078 	add	r2, r3, #120	; 0x78
  134e18:	e3a03d52 	mov	r3, #5248	; 0x1480
  134e1c:	e34033ef 	movt	r3, #1007	; 0x3ef
  134e20:	e58d3004 	str	r3, [sp, #4]
  134e24:	e58d2000 	str	r2, [sp]
  134e28:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  134e2c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  134e30:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  134e34:	e51b0010 	ldr	r0, [fp, #-16]
  134e38:	eb000488 	bl	136060 <ENET_Init>
    ENET_ActiveRead(base_addr);
  134e3c:	e51b0010 	ldr	r0, [fp, #-16]
  134e40:	ebfffe5c 	bl	1347b8 <ENET_ActiveRead>

    // ENET_DisableInterrupts(base_addr,ENET_RX_INTERRUPT);
    // rt_hw_interrupt_install(imx6ul_device->irq_num, (rt_isr_handler_t)ENET_DriverIRQHandler, (void *)base_addr,imx6ul_device->irq_name);     
    // rt_hw_interrupt_umask(imx6ul_device->irq_num);
#ifndef POLL_INT
    ueth_hw_interrupt_install(imx6ul_device->irq_num, (void *)imx6ul_device->enet_phy_base_addr);
  134e44:	e51b300c 	ldr	r3, [fp, #-12]
  134e48:	e5933094 	ldr	r3, [r3, #148]	; 0x94
  134e4c:	e1a02003 	mov	r2, r3
  134e50:	e51b300c 	ldr	r3, [fp, #-12]
  134e54:	e593309c 	ldr	r3, [r3, #156]	; 0x9c
  134e58:	e1a01003 	mov	r1, r3
  134e5c:	e1a00002 	mov	r0, r2
  134e60:	ebff3e73 	bl	104834 <ueth_hw_interrupt_install>
#endif

    return RT_EOK;
  134e64:	e3a03000 	mov	r3, #0
}
  134e68:	e1a00003 	mov	r0, r3
  134e6c:	e24bd004 	sub	sp, fp, #4
  134e70:	e8bd8800 	pop	{fp, pc}

00134e74 <rt_imx6ul_eth_control>:

static rt_err_t rt_imx6ul_eth_control(rt_device_t dev, int cmd, void *args)
{
  134e74:	e92d4800 	push	{fp, lr}
  134e78:	e28db004 	add	fp, sp, #4
  134e7c:	e24dd028 	sub	sp, sp, #40	; 0x28
  134e80:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  134e84:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  134e88:	e50b2028 	str	r2, [fp, #-40]	; 0xffffffd8
    struct rt_imx6ul_ethps *imx6ul_device = (struct rt_imx6ul_ethps *)dev;
  134e8c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  134e90:	e50b3008 	str	r3, [fp, #-8]

    
    switch (cmd)
  134e94:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  134e98:	e3530001 	cmp	r3, #1
  134e9c:	0a000000 	beq	134ea4 <rt_imx6ul_eth_control+0x30>
            return -RT_ERROR;
        }
        break;

    default :
        break;
  134ea0:	ea000070 	b	135068 <rt_imx6ul_eth_control+0x1f4>
        if (args)
  134ea4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  134ea8:	e3530000 	cmp	r3, #0
  134eac:	0a00006b 	beq	135060 <rt_imx6ul_eth_control+0x1ec>
            rt_uint32_t uid_crc = 0;
  134eb0:	e3a03000 	mov	r3, #0
  134eb4:	e50b300c 	str	r3, [fp, #-12]
            ocotp_base = (OCOTP_Type *)ueth_remap((void*)OCOTP_BASE, UETH_REMAP, 0x1000);
  134eb8:	e3a02a01 	mov	r2, #4096	; 0x1000
  134ebc:	e3a01001 	mov	r1, #1
  134ec0:	e3a00903 	mov	r0, #49152	; 0xc000
  134ec4:	e340021b 	movt	r0, #539	; 0x21b
  134ec8:	ebff3d79 	bl	1044b4 <ueth_remap>
  134ecc:	e50b0010 	str	r0, [fp, #-16]
            uid[0] = ocotp_base->CFG0;
  134ed0:	e51b3010 	ldr	r3, [fp, #-16]
  134ed4:	e5933410 	ldr	r3, [r3, #1040]	; 0x410
  134ed8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
            uid[1] = ocotp_base->CFG1;
  134edc:	e51b3010 	ldr	r3, [fp, #-16]
  134ee0:	e5933420 	ldr	r3, [r3, #1056]	; 0x420
  134ee4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
            ueth_remap(ocotp_base, UETH_UNMAP, 0);
  134ee8:	e3a02000 	mov	r2, #0
  134eec:	e3a01002 	mov	r1, #2
  134ef0:	e51b0010 	ldr	r0, [fp, #-16]
  134ef4:	ebff3d6e 	bl	1044b4 <ueth_remap>
            LOG_D("UNIQUE_ID is %x%x",uid[0], uid[1]);
  134ef8:	e3090d78 	movw	r0, #40312	; 0x9d78
  134efc:	e3400014 	movt	r0, #20
  134f00:	ebff3883 	bl	103114 <rt_kprintf>
  134f04:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  134f08:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  134f0c:	e1a01003 	mov	r1, r3
  134f10:	e3090e80 	movw	r0, #40576	; 0x9e80
  134f14:	e3400014 	movt	r0, #20
  134f18:	ebff387d 	bl	103114 <rt_kprintf>
  134f1c:	e3090d9c 	movw	r0, #40348	; 0x9d9c
  134f20:	e3400014 	movt	r0, #20
  134f24:	ebff387a 	bl	103114 <rt_kprintf>
            uid_crc = uid[0] - uid[1];
  134f28:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  134f2c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  134f30:	e0423003 	sub	r3, r2, r3
  134f34:	e50b300c 	str	r3, [fp, #-12]
            LOG_D("UNIQUE_ID change to 32 bits %x", uid_crc);
  134f38:	e3090d78 	movw	r0, #40312	; 0x9d78
  134f3c:	e3400014 	movt	r0, #20
  134f40:	ebff3873 	bl	103114 <rt_kprintf>
  134f44:	e51b100c 	ldr	r1, [fp, #-12]
  134f48:	e3090e94 	movw	r0, #40596	; 0x9e94
  134f4c:	e3400014 	movt	r0, #20
  134f50:	ebff386f 	bl	103114 <rt_kprintf>
  134f54:	e3090d9c 	movw	r0, #40348	; 0x9d9c
  134f58:	e3400014 	movt	r0, #20
  134f5c:	ebff386c 	bl	103114 <rt_kprintf>
            if (imx6ul_device->enet_phy_base_addr == ENET1)
  134f60:	e51b3008 	ldr	r3, [fp, #-8]
  134f64:	e593209c 	ldr	r2, [r3, #156]	; 0x9c
  134f68:	e3a03902 	mov	r3, #32768	; 0x8000
  134f6c:	e3403218 	movt	r3, #536	; 0x218
  134f70:	e1520003 	cmp	r2, r3
  134f74:	1a000019 	bne	134fe0 <rt_imx6ul_eth_control+0x16c>
                imx6ul_device->dev_addr[0] = 0xa8;
  134f78:	e51b3008 	ldr	r3, [fp, #-8]
  134f7c:	e3e02057 	mvn	r2, #87	; 0x57
  134f80:	e5c32078 	strb	r2, [r3, #120]	; 0x78
                imx6ul_device->dev_addr[1] = 0x5e;
  134f84:	e51b3008 	ldr	r3, [fp, #-8]
  134f88:	e3a0205e 	mov	r2, #94	; 0x5e
  134f8c:	e5c32079 	strb	r2, [r3, #121]	; 0x79
                imx6ul_device->dev_addr[2] = 0x45;
  134f90:	e51b3008 	ldr	r3, [fp, #-8]
  134f94:	e3a02045 	mov	r2, #69	; 0x45
  134f98:	e5c3207a 	strb	r2, [r3, #122]	; 0x7a
                imx6ul_device->dev_addr[3] = (uid_crc>>16) & 0x7f;
  134f9c:	e51b300c 	ldr	r3, [fp, #-12]
  134fa0:	e1a03823 	lsr	r3, r3, #16
  134fa4:	e6ef3073 	uxtb	r3, r3
  134fa8:	e203307f 	and	r3, r3, #127	; 0x7f
  134fac:	e6ef2073 	uxtb	r2, r3
  134fb0:	e51b3008 	ldr	r3, [fp, #-8]
  134fb4:	e5c3207b 	strb	r2, [r3, #123]	; 0x7b
                imx6ul_device->dev_addr[4] = (uid_crc>>8) & 0xff;
  134fb8:	e51b300c 	ldr	r3, [fp, #-12]
  134fbc:	e1a03423 	lsr	r3, r3, #8
  134fc0:	e6ef2073 	uxtb	r2, r3
  134fc4:	e51b3008 	ldr	r3, [fp, #-8]
  134fc8:	e5c3207c 	strb	r2, [r3, #124]	; 0x7c
                imx6ul_device->dev_addr[5] = uid_crc & 0xff;
  134fcc:	e51b300c 	ldr	r3, [fp, #-12]
  134fd0:	e6ef2073 	uxtb	r2, r3
  134fd4:	e51b3008 	ldr	r3, [fp, #-8]
  134fd8:	e5c3207d 	strb	r2, [r3, #125]	; 0x7d
  134fdc:	ea000018 	b	135044 <rt_imx6ul_eth_control+0x1d0>
                imx6ul_device->dev_addr[0] = 0xa8;
  134fe0:	e51b3008 	ldr	r3, [fp, #-8]
  134fe4:	e3e02057 	mvn	r2, #87	; 0x57
  134fe8:	e5c32078 	strb	r2, [r3, #120]	; 0x78
                imx6ul_device->dev_addr[1] = 0x5e;
  134fec:	e51b3008 	ldr	r3, [fp, #-8]
  134ff0:	e3a0205e 	mov	r2, #94	; 0x5e
  134ff4:	e5c32079 	strb	r2, [r3, #121]	; 0x79
                imx6ul_device->dev_addr[2] = 0x46;
  134ff8:	e51b3008 	ldr	r3, [fp, #-8]
  134ffc:	e3a02046 	mov	r2, #70	; 0x46
  135000:	e5c3207a 	strb	r2, [r3, #122]	; 0x7a
                imx6ul_device->dev_addr[3] = (uid_crc >> 16) & 0x7f;
  135004:	e51b300c 	ldr	r3, [fp, #-12]
  135008:	e1a03823 	lsr	r3, r3, #16
  13500c:	e6ef3073 	uxtb	r3, r3
  135010:	e203307f 	and	r3, r3, #127	; 0x7f
  135014:	e6ef2073 	uxtb	r2, r3
  135018:	e51b3008 	ldr	r3, [fp, #-8]
  13501c:	e5c3207b 	strb	r2, [r3, #123]	; 0x7b
                imx6ul_device->dev_addr[4] = (uid_crc >> 8) & 0xff;
  135020:	e51b300c 	ldr	r3, [fp, #-12]
  135024:	e1a03423 	lsr	r3, r3, #8
  135028:	e6ef2073 	uxtb	r2, r3
  13502c:	e51b3008 	ldr	r3, [fp, #-8]
  135030:	e5c3207c 	strb	r2, [r3, #124]	; 0x7c
                imx6ul_device->dev_addr[5] = uid_crc & 0xff;
  135034:	e51b300c 	ldr	r3, [fp, #-12]
  135038:	e6ef2073 	uxtb	r2, r3
  13503c:	e51b3008 	ldr	r3, [fp, #-8]
  135040:	e5c3207d 	strb	r2, [r3, #125]	; 0x7d
            memcpy(args, imx6ul_device->dev_addr, MAX_ADDR_LEN);
  135044:	e51b3008 	ldr	r3, [fp, #-8]
  135048:	e2833078 	add	r3, r3, #120	; 0x78
  13504c:	e3a02006 	mov	r2, #6
  135050:	e1a01003 	mov	r1, r3
  135054:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  135058:	eb002fc7 	bl	140f7c <memcpy>
        break;
  13505c:	ea000001 	b	135068 <rt_imx6ul_eth_control+0x1f4>
            return -RT_ERROR;
  135060:	e3e03000 	mvn	r3, #0
  135064:	ea000000 	b	13506c <rt_imx6ul_eth_control+0x1f8>
    }
    return RT_EOK;
  135068:	e3a03000 	mov	r3, #0
}
  13506c:	e1a00003 	mov	r0, r3
  135070:	e24bd004 	sub	sp, fp, #4
  135074:	e8bd8800 	pop	{fp, pc}

00135078 <read_data_from_eth>:

static status_t read_data_from_eth(rt_device_t dev,void *read_data,uint16_t *read_length)
{
  135078:	e92d4800 	push	{fp, lr}
  13507c:	e28db004 	add	fp, sp, #4
  135080:	e24dd038 	sub	sp, sp, #56	; 0x38
  135084:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  135088:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  13508c:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
    status_t status = 0;
  135090:	e3a03000 	mov	r3, #0
  135094:	e50b3008 	str	r3, [fp, #-8]
    uint16_t length = 0;
  135098:	e3a03000 	mov	r3, #0
  13509c:	e14b31be 	strh	r3, [fp, #-30]	; 0xffffffe2
    ENET_Type *base_addr = RT_NULL;
  1350a0:	e3a03000 	mov	r3, #0
  1350a4:	e50b300c 	str	r3, [fp, #-12]
    enet_config_t *config;
    enet_handle_t *handle;
    enet_buffer_config_t *buffConfig;
    struct rt_imx6ul_ethps *imx6ul_device = (struct rt_imx6ul_ethps *)dev;
  1350a8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1350ac:	e50b3010 	str	r3, [fp, #-16]
    base_addr = imx6ul_device->enet_virtual_base_addr;
  1350b0:	e51b3010 	ldr	r3, [fp, #-16]
  1350b4:	e59330a0 	ldr	r3, [r3, #160]	; 0xa0
  1350b8:	e50b300c 	str	r3, [fp, #-12]
    config = &imx6ul_device->config;
  1350bc:	e51b3010 	ldr	r3, [fp, #-16]
  1350c0:	e28330dc 	add	r3, r3, #220	; 0xdc
  1350c4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    handle = &imx6ul_device->handle;
  1350c8:	e51b3010 	ldr	r3, [fp, #-16]
  1350cc:	e2833c01 	add	r3, r3, #256	; 0x100
  1350d0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    buffConfig = &imx6ul_device->buffConfig;
  1350d4:	e51b3010 	ldr	r3, [fp, #-16]
  1350d8:	e28330a8 	add	r3, r3, #168	; 0xa8
  1350dc:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    /* Get the Frame size */
    status = ENET_ReadFrame(base_addr,handle,config,read_data,&length);
  1350e0:	e24b301e 	sub	r3, fp, #30
  1350e4:	e58d3000 	str	r3, [sp]
  1350e8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1350ec:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1350f0:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  1350f4:	e51b000c 	ldr	r0, [fp, #-12]
  1350f8:	eb00088e 	bl	137338 <ENET_ReadFrame>
  1350fc:	e50b0008 	str	r0, [fp, #-8]
    if((status == kStatus_ENET_RxFrameEmpty)||(status == kStatus_ENET_RxFrameError))
  135100:	e51b3008 	ldr	r3, [fp, #-8]
  135104:	e3002fa2 	movw	r2, #4002	; 0xfa2
  135108:	e1530002 	cmp	r3, r2
  13510c:	0a000002 	beq	13511c <read_data_from_eth+0xa4>
  135110:	e51b3008 	ldr	r3, [fp, #-8]
  135114:	e3530efa 	cmp	r3, #4000	; 0xfa0
  135118:	1a00001a 	bne	135188 <read_data_from_eth+0x110>
    {
        ENET_EnableInterrupts(base_addr,ENET_RX_INTERRUPT);
  13511c:	e3a01403 	mov	r1, #50331648	; 0x3000000
  135120:	e51b000c 	ldr	r0, [fp, #-12]
  135124:	ebfffdae 	bl	1347e4 <ENET_EnableInterrupts>
        if(status == kStatus_ENET_RxFrameError)
  135128:	e51b3008 	ldr	r3, [fp, #-8]
  13512c:	e3530efa 	cmp	r3, #4000	; 0xfa0
  135130:	1a00000e 	bne	135170 <read_data_from_eth+0xf8>
        {
            /*recv error happend reinitialize mac*/
            ENET_Init(base_addr, handle, config, buffConfig, imx6ul_device->dev_addr, SYS_CLOCK_HZ);
  135134:	e51b3010 	ldr	r3, [fp, #-16]
  135138:	e2832078 	add	r2, r3, #120	; 0x78
  13513c:	e3a03d52 	mov	r3, #5248	; 0x1480
  135140:	e34033ef 	movt	r3, #1007	; 0x3ef
  135144:	e58d3004 	str	r3, [sp, #4]
  135148:	e58d2000 	str	r2, [sp]
  13514c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  135150:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  135154:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  135158:	e51b000c 	ldr	r0, [fp, #-12]
  13515c:	eb0003bf 	bl	136060 <ENET_Init>
            ENET_ActiveRead(base_addr);
  135160:	e51b000c 	ldr	r0, [fp, #-12]
  135164:	ebfffd93 	bl	1347b8 <ENET_ActiveRead>
            return kStatus_ENET_RxFrameError;
  135168:	e3a03efa 	mov	r3, #4000	; 0xfa0
  13516c:	ea000009 	b	135198 <read_data_from_eth+0x120>
        }
        else if(status == kStatus_ENET_RxFrameEmpty)
  135170:	e51b3008 	ldr	r3, [fp, #-8]
  135174:	e3002fa2 	movw	r2, #4002	; 0xfa2
  135178:	e1530002 	cmp	r3, r2
  13517c:	1a000001 	bne	135188 <read_data_from_eth+0x110>
        {
            return kStatus_ENET_RxFrameEmpty;
  135180:	e3003fa2 	movw	r3, #4002	; 0xfa2
  135184:	ea000003 	b	135198 <read_data_from_eth+0x120>
        }
    }
    *read_length = length;
  135188:	e15b21be 	ldrh	r2, [fp, #-30]	; 0xffffffe2
  13518c:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  135190:	e1c320b0 	strh	r2, [r3]
    return status;
  135194:	e51b3008 	ldr	r3, [fp, #-8]
}
  135198:	e1a00003 	mov	r0, r3
  13519c:	e24bd004 	sub	sp, fp, #4
  1351a0:	e8bd8800 	pop	{fp, pc}

001351a4 <rt_imx6ul_eth_tx>:

#ifdef RT_USING_LWIP
/* transmit data*/
rt_err_t rt_imx6ul_eth_tx(rt_device_t dev, struct pbuf *p)
{
  1351a4:	e92d4800 	push	{fp, lr}
  1351a8:	e28db004 	add	fp, sp, #4
  1351ac:	e24dd030 	sub	sp, sp, #48	; 0x30
  1351b0:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  1351b4:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
    struct pbuf *q = RT_NULL;
  1351b8:	e3a03000 	mov	r3, #0
  1351bc:	e50b3008 	str	r3, [fp, #-8]
    uint16_t offset = 0;
  1351c0:	e3a03000 	mov	r3, #0
  1351c4:	e14b30ba 	strh	r3, [fp, #-10]
    uint32_t last_flag = 0;
  1351c8:	e3a03000 	mov	r3, #0
  1351cc:	e50b3010 	str	r3, [fp, #-16]
    status_t status;
    ENET_Type *base_addr = RT_NULL;
  1351d0:	e3a03000 	mov	r3, #0
  1351d4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    enet_handle_t *handle;
    struct rt_imx6ul_ethps *imx6ul_device = (struct rt_imx6ul_ethps *)dev;
  1351d8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1351dc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    base_addr = imx6ul_device->enet_virtual_base_addr;
  1351e0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1351e4:	e59330a0 	ldr	r3, [r3, #160]	; 0xa0
  1351e8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    handle = &imx6ul_device->handle;
  1351ec:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1351f0:	e2833c01 	add	r3, r3, #256	; 0x100
  1351f4:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(p);
  1351f8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1351fc:	e3530000 	cmp	r3, #0
  135200:	1a000005 	bne	13521c <rt_imx6ul_eth_tx+0x78>
  135204:	e3a02e1b 	mov	r2, #432	; 0x1b0
  135208:	e30a1060 	movw	r1, #41056	; 0xa060
  13520c:	e3401014 	movt	r1, #20
  135210:	e3090eb4 	movw	r0, #40628	; 0x9eb4
  135214:	e3400014 	movt	r0, #20
  135218:	ebff38de 	bl	103598 <rt_assert_handler>

    for(q = p;q != RT_NULL;q=q->next)
  13521c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  135220:	e50b3008 	str	r3, [fp, #-8]
  135224:	ea000020 	b	1352ac <rt_imx6ul_eth_tx+0x108>
    {
        if(q->next == RT_NULL)
  135228:	e51b3008 	ldr	r3, [fp, #-8]
  13522c:	e5933000 	ldr	r3, [r3]
  135230:	e3530000 	cmp	r3, #0
  135234:	1a000002 	bne	135244 <rt_imx6ul_eth_tx+0xa0>
        {
            last_flag = 1;
  135238:	e3a03001 	mov	r3, #1
  13523c:	e50b3010 	str	r3, [fp, #-16]
  135240:	ea000001 	b	13524c <rt_imx6ul_eth_tx+0xa8>
        }
        else
        {
            last_flag = 0;
  135244:	e3a03000 	mov	r3, #0
  135248:	e50b3010 	str	r3, [fp, #-16]
        }
        status = ENET_SendFrame(base_addr, handle, q->payload, q->len,last_flag);
  13524c:	e51b3008 	ldr	r3, [fp, #-8]
  135250:	e5932004 	ldr	r2, [r3, #4]
  135254:	e51b3008 	ldr	r3, [fp, #-8]
  135258:	e1d310ba 	ldrh	r1, [r3, #10]
  13525c:	e51b3010 	ldr	r3, [fp, #-16]
  135260:	e58d3000 	str	r3, [sp]
  135264:	e1a03001 	mov	r3, r1
  135268:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  13526c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  135270:	eb0008fb 	bl	137664 <ENET_SendFrame>
  135274:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0

        offset = offset + q->len;
  135278:	e51b3008 	ldr	r3, [fp, #-8]
  13527c:	e1d320ba 	ldrh	r2, [r3, #10]
  135280:	e15b30ba 	ldrh	r3, [fp, #-10]
  135284:	e0823003 	add	r3, r2, r3
  135288:	e14b30ba 	strh	r3, [fp, #-10]
        if(status == kStatus_Success)
  13528c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  135290:	e3530000 	cmp	r3, #0
  135294:	0a000001 	beq	1352a0 <rt_imx6ul_eth_tx+0xfc>
        {
        }
        else
        {
            return RT_ERROR;
  135298:	e3a03001 	mov	r3, #1
  13529c:	ea000015 	b	1352f8 <rt_imx6ul_eth_tx+0x154>
    for(q = p;q != RT_NULL;q=q->next)
  1352a0:	e51b3008 	ldr	r3, [fp, #-8]
  1352a4:	e5933000 	ldr	r3, [r3]
  1352a8:	e50b3008 	str	r3, [fp, #-8]
  1352ac:	e51b3008 	ldr	r3, [fp, #-8]
  1352b0:	e3530000 	cmp	r3, #0
  1352b4:	1affffdb 	bne	135228 <rt_imx6ul_eth_tx+0x84>
        }
    }
    if(offset > ENET_FRAME_MAX_FRAMELEN)
  1352b8:	e15b30ba 	ldrh	r3, [fp, #-10]
  1352bc:	e30025ee 	movw	r2, #1518	; 0x5ee
  1352c0:	e1530002 	cmp	r3, r2
  1352c4:	9a00000a 	bls	1352f4 <rt_imx6ul_eth_tx+0x150>
    {
        LOG_E("net error send length %d exceed max length",offset);
  1352c8:	e3090db8 	movw	r0, #40376	; 0x9db8
  1352cc:	e3400014 	movt	r0, #20
  1352d0:	ebff378f 	bl	103114 <rt_kprintf>
  1352d4:	e15b30ba 	ldrh	r3, [fp, #-10]
  1352d8:	e1a01003 	mov	r1, r3
  1352dc:	e3090eb8 	movw	r0, #40632	; 0x9eb8
  1352e0:	e3400014 	movt	r0, #20
  1352e4:	ebff378a 	bl	103114 <rt_kprintf>
  1352e8:	e3090d9c 	movw	r0, #40348	; 0x9d9c
  1352ec:	e3400014 	movt	r0, #20
  1352f0:	ebff3787 	bl	103114 <rt_kprintf>
    }
    return RT_EOK;
  1352f4:	e3a03000 	mov	r3, #0
}
  1352f8:	e1a00003 	mov	r0, r3
  1352fc:	e24bd004 	sub	sp, fp, #4
  135300:	e8bd8800 	pop	{fp, pc}

00135304 <rt_imx6ul_eth_rx>:

struct pbuf *rt_imx6ul_eth_rx(rt_device_t dev)
{
  135304:	e92d4800 	push	{fp, lr}
  135308:	e28db004 	add	fp, sp, #4
  13530c:	e24dd018 	sub	sp, sp, #24
  135310:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    static struct pbuf *p_s = RT_NULL;
    struct pbuf *p = RT_NULL;
  135314:	e3a03000 	mov	r3, #0
  135318:	e50b3008 	str	r3, [fp, #-8]
    status_t status;
    uint16_t length = 0;
  13531c:	e3a03000 	mov	r3, #0
  135320:	e14b30be 	strh	r3, [fp, #-14]

    if(p_s == RT_NULL)
  135324:	e30f3bf4 	movw	r3, #64500	; 0xfbf4
  135328:	e3403014 	movt	r3, #20
  13532c:	e5933000 	ldr	r3, [r3]
  135330:	e3530000 	cmp	r3, #0
  135334:	1a00000e 	bne	135374 <rt_imx6ul_eth_rx+0x70>
    {
        p_s = pbuf_alloc(PBUF_RAW, ENET_FRAME_MAX_FRAMELEN, PBUF_POOL);
  135338:	e3a02003 	mov	r2, #3
  13533c:	e30015ee 	movw	r1, #1518	; 0x5ee
  135340:	e3a00004 	mov	r0, #4
  135344:	ebff944d 	bl	11a480 <pbuf_alloc>
  135348:	e1a02000 	mov	r2, r0
  13534c:	e30f3bf4 	movw	r3, #64500	; 0xfbf4
  135350:	e3403014 	movt	r3, #20
  135354:	e5832000 	str	r2, [r3]
        if(p_s == RT_NULL)
  135358:	e30f3bf4 	movw	r3, #64500	; 0xfbf4
  13535c:	e3403014 	movt	r3, #20
  135360:	e5933000 	ldr	r3, [r3]
  135364:	e3530000 	cmp	r3, #0
  135368:	1a000001 	bne	135374 <rt_imx6ul_eth_rx+0x70>
        {
            return RT_NULL;
  13536c:	e3a03000 	mov	r3, #0
  135370:	ea00002f 	b	135434 <rt_imx6ul_eth_rx+0x130>
        }
    }
    p = p_s;
  135374:	e30f3bf4 	movw	r3, #64500	; 0xfbf4
  135378:	e3403014 	movt	r3, #20
  13537c:	e5933000 	ldr	r3, [r3]
  135380:	e50b3008 	str	r3, [fp, #-8]
    status = read_data_from_eth(dev,p->payload,&length);
  135384:	e51b3008 	ldr	r3, [fp, #-8]
  135388:	e5933004 	ldr	r3, [r3, #4]
  13538c:	e24b200e 	sub	r2, fp, #14
  135390:	e1a01003 	mov	r1, r3
  135394:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  135398:	ebffff36 	bl	135078 <read_data_from_eth>
  13539c:	e50b000c 	str	r0, [fp, #-12]
    if(status == kStatus_ENET_RxFrameEmpty)
  1353a0:	e51b300c 	ldr	r3, [fp, #-12]
  1353a4:	e3002fa2 	movw	r2, #4002	; 0xfa2
  1353a8:	e1530002 	cmp	r3, r2
  1353ac:	1a000001 	bne	1353b8 <rt_imx6ul_eth_rx+0xb4>
    {
        return RT_NULL;
  1353b0:	e3a03000 	mov	r3, #0
  1353b4:	ea00001e 	b	135434 <rt_imx6ul_eth_rx+0x130>
    }
    else if(status == kStatus_ENET_RxFrameError)
  1353b8:	e51b300c 	ldr	r3, [fp, #-12]
  1353bc:	e3530efa 	cmp	r3, #4000	; 0xfa0
  1353c0:	1a000001 	bne	1353cc <rt_imx6ul_eth_rx+0xc8>
    {
        return RT_NULL;
  1353c4:	e3a03000 	mov	r3, #0
  1353c8:	ea000019 	b	135434 <rt_imx6ul_eth_rx+0x130>
    }
    if(length > ENET_FRAME_MAX_FRAMELEN)
  1353cc:	e15b30be 	ldrh	r3, [fp, #-14]
  1353d0:	e30025ee 	movw	r2, #1518	; 0x5ee
  1353d4:	e1530002 	cmp	r3, r2
  1353d8:	9a00000c 	bls	135410 <rt_imx6ul_eth_rx+0x10c>
    {
        LOG_E("net error recv length %d exceed max length",length);
  1353dc:	e3090db8 	movw	r0, #40376	; 0x9db8
  1353e0:	e3400014 	movt	r0, #20
  1353e4:	ebff374a 	bl	103114 <rt_kprintf>
  1353e8:	e15b30be 	ldrh	r3, [fp, #-14]
  1353ec:	e1a01003 	mov	r1, r3
  1353f0:	e3090ee4 	movw	r0, #40676	; 0x9ee4
  1353f4:	e3400014 	movt	r0, #20
  1353f8:	ebff3745 	bl	103114 <rt_kprintf>
  1353fc:	e3090d9c 	movw	r0, #40348	; 0x9d9c
  135400:	e3400014 	movt	r0, #20
  135404:	ebff3742 	bl	103114 <rt_kprintf>
        return RT_NULL;
  135408:	e3a03000 	mov	r3, #0
  13540c:	ea000008 	b	135434 <rt_imx6ul_eth_rx+0x130>
    }
    pbuf_realloc(p, length);
  135410:	e15b30be 	ldrh	r3, [fp, #-14]
  135414:	e1a01003 	mov	r1, r3
  135418:	e51b0008 	ldr	r0, [fp, #-8]
  13541c:	ebff95d5 	bl	11ab78 <pbuf_realloc>
    p_s = RT_NULL;
  135420:	e30f3bf4 	movw	r3, #64500	; 0xfbf4
  135424:	e3403014 	movt	r3, #20
  135428:	e3a02000 	mov	r2, #0
  13542c:	e5832000 	str	r2, [r3]
    return p;
  135430:	e51b3008 	ldr	r3, [fp, #-8]
}
  135434:	e1a00003 	mov	r0, r3
  135438:	e24bd004 	sub	sp, fp, #4
  13543c:	e8bd8800 	pop	{fp, pc}

00135440 <rt_imx6ul_eth_open>:
#endif

static rt_err_t rt_imx6ul_eth_open(rt_device_t dev, rt_uint16_t oflag)
{
  135440:	e92d4800 	push	{fp, lr}
  135444:	e28db004 	add	fp, sp, #4
  135448:	e24dd010 	sub	sp, sp, #16
  13544c:	e50b0010 	str	r0, [fp, #-16]
  135450:	e1a03001 	mov	r3, r1
  135454:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
    struct rt_imx6ul_ethps *imx6ul_device = (struct rt_imx6ul_ethps *)dev;
  135458:	e51b3010 	ldr	r3, [fp, #-16]
  13545c:	e50b3008 	str	r3, [fp, #-8]
    ENET_Type *base_addr = imx6ul_device->enet_virtual_base_addr;
  135460:	e51b3008 	ldr	r3, [fp, #-8]
  135464:	e59330a0 	ldr	r3, [r3, #160]	; 0xa0
  135468:	e50b300c 	str	r3, [fp, #-12]
    ENET_EnableInterrupts(base_addr,ENET_RX_INTERRUPT);
  13546c:	e3a01403 	mov	r1, #50331648	; 0x3000000
  135470:	e51b000c 	ldr	r0, [fp, #-12]
  135474:	ebfffcda 	bl	1347e4 <ENET_EnableInterrupts>

    return RT_EOK;
  135478:	e3a03000 	mov	r3, #0
}
  13547c:	e1a00003 	mov	r0, r3
  135480:	e24bd004 	sub	sp, fp, #4
  135484:	e8bd8800 	pop	{fp, pc}

00135488 <rt_imx6ul_eth_close>:

static rt_err_t rt_imx6ul_eth_close(rt_device_t dev)
{
  135488:	e92d4800 	push	{fp, lr}
  13548c:	e28db004 	add	fp, sp, #4
  135490:	e24dd010 	sub	sp, sp, #16
  135494:	e50b0010 	str	r0, [fp, #-16]
    struct rt_imx6ul_ethps *imx6ul_device = (struct rt_imx6ul_ethps *)dev;
  135498:	e51b3010 	ldr	r3, [fp, #-16]
  13549c:	e50b3008 	str	r3, [fp, #-8]
    ENET_DisableInterrupts(imx6ul_device->enet_virtual_base_addr,ENET_RX_INTERRUPT);
  1354a0:	e51b3008 	ldr	r3, [fp, #-8]
  1354a4:	e59330a0 	ldr	r3, [r3, #160]	; 0xa0
  1354a8:	e3a01403 	mov	r1, #50331648	; 0x3000000
  1354ac:	e1a00003 	mov	r0, r3
  1354b0:	ebfffcda 	bl	134820 <ENET_DisableInterrupts>
    return RT_EOK;
  1354b4:	e3a03000 	mov	r3, #0
}
  1354b8:	e1a00003 	mov	r0, r3
  1354bc:	e24bd004 	sub	sp, fp, #4
  1354c0:	e8bd8800 	pop	{fp, pc}

001354c4 <rt_imx6ul_eth_read>:

static rt_size_t rt_imx6ul_eth_read(rt_device_t dev, rt_off_t pos, void *buffer, rt_size_t size)
{
  1354c4:	e92d4800 	push	{fp, lr}
  1354c8:	e28db004 	add	fp, sp, #4
  1354cc:	e24dd018 	sub	sp, sp, #24
  1354d0:	e50b0010 	str	r0, [fp, #-16]
  1354d4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1354d8:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  1354dc:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    uint16_t length = 0;
  1354e0:	e3a03000 	mov	r3, #0
  1354e4:	e14b30ba 	strh	r3, [fp, #-10]
    status_t status;
    if(!buffer) 
  1354e8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1354ec:	e3530000 	cmp	r3, #0
  1354f0:	1a00000c 	bne	135528 <rt_imx6ul_eth_read+0x64>
    {
        LOG_E("eth read invalid parameter buffer %p size %d",buffer,size);
  1354f4:	e3090db8 	movw	r0, #40376	; 0x9db8
  1354f8:	e3400014 	movt	r0, #20
  1354fc:	ebff3704 	bl	103114 <rt_kprintf>
  135500:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  135504:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  135508:	e3090f10 	movw	r0, #40720	; 0x9f10
  13550c:	e3400014 	movt	r0, #20
  135510:	ebff36ff 	bl	103114 <rt_kprintf>
  135514:	e3090d9c 	movw	r0, #40348	; 0x9d9c
  135518:	e3400014 	movt	r0, #20
  13551c:	ebff36fc 	bl	103114 <rt_kprintf>
        return 0;
  135520:	e3a03000 	mov	r3, #0
  135524:	ea00000f 	b	135568 <rt_imx6ul_eth_read+0xa4>
    }
    status = read_data_from_eth(dev,buffer,&length);
  135528:	e24b300a 	sub	r3, fp, #10
  13552c:	e1a02003 	mov	r2, r3
  135530:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  135534:	e51b0010 	ldr	r0, [fp, #-16]
  135538:	ebfffece 	bl	135078 <read_data_from_eth>
  13553c:	e50b0008 	str	r0, [fp, #-8]
    if((status == kStatus_ENET_RxFrameEmpty) || (status == kStatus_ENET_RxFrameError))
  135540:	e51b3008 	ldr	r3, [fp, #-8]
  135544:	e3002fa2 	movw	r2, #4002	; 0xfa2
  135548:	e1530002 	cmp	r3, r2
  13554c:	0a000002 	beq	13555c <rt_imx6ul_eth_read+0x98>
  135550:	e51b3008 	ldr	r3, [fp, #-8]
  135554:	e3530efa 	cmp	r3, #4000	; 0xfa0
  135558:	1a000001 	bne	135564 <rt_imx6ul_eth_read+0xa0>
    {
        return 0;
  13555c:	e3a03000 	mov	r3, #0
  135560:	ea000000 	b	135568 <rt_imx6ul_eth_read+0xa4>
    }
    return (rt_size_t)length;
  135564:	e15b30ba 	ldrh	r3, [fp, #-10]
}
  135568:	e1a00003 	mov	r0, r3
  13556c:	e24bd004 	sub	sp, fp, #4
  135570:	e8bd8800 	pop	{fp, pc}

00135574 <rt_imx6ul_eth_write>:

static rt_size_t rt_imx6ul_eth_write(rt_device_t dev, rt_off_t pos, const void *buffer, rt_size_t size)
{
  135574:	e92d4800 	push	{fp, lr}
  135578:	e28db004 	add	fp, sp, #4
  13557c:	e24dd028 	sub	sp, sp, #40	; 0x28
  135580:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  135584:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  135588:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  13558c:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    status_t status;
    struct rt_imx6ul_ethps *imx6ul_device = (struct rt_imx6ul_ethps *)dev;
  135590:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  135594:	e50b3008 	str	r3, [fp, #-8]
    ENET_Type *base_addr = imx6ul_device->enet_virtual_base_addr;
  135598:	e51b3008 	ldr	r3, [fp, #-8]
  13559c:	e59330a0 	ldr	r3, [r3, #160]	; 0xa0
  1355a0:	e50b300c 	str	r3, [fp, #-12]
    enet_handle_t *handle = &imx6ul_device->handle;
  1355a4:	e51b3008 	ldr	r3, [fp, #-8]
  1355a8:	e2833c01 	add	r3, r3, #256	; 0x100
  1355ac:	e50b3010 	str	r3, [fp, #-16]

    if((!buffer) || (size > ENET_FRAME_MAX_FRAMELEN))
  1355b0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1355b4:	e3530000 	cmp	r3, #0
  1355b8:	0a000003 	beq	1355cc <rt_imx6ul_eth_write+0x58>
  1355bc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1355c0:	e30025ee 	movw	r2, #1518	; 0x5ee
  1355c4:	e1530002 	cmp	r3, r2
  1355c8:	9a00000a 	bls	1355f8 <rt_imx6ul_eth_write+0x84>
    {
        LOG_E("eth write invalid parameter buffer %p size %d",buffer,size);
  1355cc:	e3090db8 	movw	r0, #40376	; 0x9db8
  1355d0:	e3400014 	movt	r0, #20
  1355d4:	ebff36ce 	bl	103114 <rt_kprintf>
  1355d8:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  1355dc:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  1355e0:	e3090f40 	movw	r0, #40768	; 0x9f40
  1355e4:	e3400014 	movt	r0, #20
  1355e8:	ebff36c9 	bl	103114 <rt_kprintf>
  1355ec:	e3090d9c 	movw	r0, #40348	; 0x9d9c
  1355f0:	e3400014 	movt	r0, #20
  1355f4:	ebff36c6 	bl	103114 <rt_kprintf>
    }
    status = ENET_SendFrame(base_addr, handle, buffer, size,1);
  1355f8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1355fc:	e6ff2073 	uxth	r2, r3
  135600:	e3a03001 	mov	r3, #1
  135604:	e58d3000 	str	r3, [sp]
  135608:	e1a03002 	mov	r3, r2
  13560c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
  135610:	e51b1010 	ldr	r1, [fp, #-16]
  135614:	e51b000c 	ldr	r0, [fp, #-12]
  135618:	eb000811 	bl	137664 <ENET_SendFrame>
  13561c:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
    if(status != kStatus_Success)
  135620:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135624:	e3530000 	cmp	r3, #0
  135628:	0a000001 	beq	135634 <rt_imx6ul_eth_write+0xc0>
    {
        return RT_ERROR;
  13562c:	e3a03001 	mov	r3, #1
  135630:	ea000000 	b	135638 <rt_imx6ul_eth_write+0xc4>
    }

    return RT_EOK;
  135634:	e3a03000 	mov	r3, #0
}
  135638:	e1a00003 	mov	r0, r3
  13563c:	e24bd004 	sub	sp, fp, #4
  135640:	e8bd8800 	pop	{fp, pc}

00135644 <get_instance_by_base>:

int32_t get_instance_by_base(void *base)
{
  135644:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  135648:	e28db000 	add	fp, sp, #0
  13564c:	e24dd014 	sub	sp, sp, #20
  135650:	e50b0010 	str	r0, [fp, #-16]
    int32_t i = 0;
  135654:	e3a03000 	mov	r3, #0
  135658:	e50b3008 	str	r3, [fp, #-8]
    int32_t instance = 0;
  13565c:	e3a03000 	mov	r3, #0
  135660:	e50b300c 	str	r3, [fp, #-12]
    for(i = 0; i < DEV_ENET_MAX; i ++)
  135664:	e3a03000 	mov	r3, #0
  135668:	e50b3008 	str	r3, [fp, #-8]
  13566c:	ea00000d 	b	1356a8 <get_instance_by_base+0x64>
    {
        if((void *)_imx6ul_eth_device[i].enet_virtual_base_addr == base)
  135670:	e30e3078 	movw	r3, #57464	; 0xe078
  135674:	e3403014 	movt	r3, #20
  135678:	e51b2008 	ldr	r2, [fp, #-8]
  13567c:	e3a01f8a 	mov	r1, #552	; 0x228
  135680:	e0020291 	mul	r2, r1, r2
  135684:	e0833002 	add	r3, r3, r2
  135688:	e28330a0 	add	r3, r3, #160	; 0xa0
  13568c:	e5933000 	ldr	r3, [r3]
  135690:	e51b2010 	ldr	r2, [fp, #-16]
  135694:	e1520003 	cmp	r2, r3
  135698:	0a000006 	beq	1356b8 <get_instance_by_base+0x74>
    for(i = 0; i < DEV_ENET_MAX; i ++)
  13569c:	e51b3008 	ldr	r3, [fp, #-8]
  1356a0:	e2833001 	add	r3, r3, #1
  1356a4:	e50b3008 	str	r3, [fp, #-8]
  1356a8:	e51b3008 	ldr	r3, [fp, #-8]
  1356ac:	e3530000 	cmp	r3, #0
  1356b0:	daffffee 	ble	135670 <get_instance_by_base+0x2c>
  1356b4:	ea000000 	b	1356bc <get_instance_by_base+0x78>
        {
            break;
  1356b8:	e320f000 	nop	{0}
        }
    }
    if(i == DEV_ENET_MAX)
  1356bc:	e51b3008 	ldr	r3, [fp, #-8]
  1356c0:	e3530001 	cmp	r3, #1
  1356c4:	1a000001 	bne	1356d0 <get_instance_by_base+0x8c>
    {
        return -1;
  1356c8:	e3e03000 	mvn	r3, #0
  1356cc:	ea000000 	b	1356d4 <get_instance_by_base+0x90>
    }
    return instance;
  1356d0:	e51b300c 	ldr	r3, [fp, #-12]
    
}
  1356d4:	e1a00003 	mov	r0, r3
  1356d8:	e28bd000 	add	sp, fp, #0
  1356dc:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1356e0:	e12fff1e 	bx	lr

001356e4 <rx_enet_callback>:

void rx_enet_callback(void *base)
{
  1356e4:	e92d4800 	push	{fp, lr}
  1356e8:	e28db004 	add	fp, sp, #4
  1356ec:	e24dd010 	sub	sp, sp, #16
  1356f0:	e50b0010 	str	r0, [fp, #-16]
    int32_t instance = 0;
  1356f4:	e3a03000 	mov	r3, #0
  1356f8:	e50b3008 	str	r3, [fp, #-8]
    instance = get_instance_by_base(base);
  1356fc:	e51b0010 	ldr	r0, [fp, #-16]
  135700:	ebffffcf 	bl	135644 <get_instance_by_base>
  135704:	e50b0008 	str	r0, [fp, #-8]
    if(instance == -1)
  135708:	e51b3008 	ldr	r3, [fp, #-8]
  13570c:	e3730001 	cmn	r3, #1
  135710:	1a000009 	bne	13573c <rx_enet_callback+0x58>
    {
        LOG_E("interrput match base addr error");
  135714:	e3090db8 	movw	r0, #40376	; 0x9db8
  135718:	e3400014 	movt	r0, #20
  13571c:	ebff367c 	bl	103114 <rt_kprintf>
  135720:	e3090f70 	movw	r0, #40816	; 0x9f70
  135724:	e3400014 	movt	r0, #20
  135728:	ebff3679 	bl	103114 <rt_kprintf>
  13572c:	e3090d9c 	movw	r0, #40348	; 0x9d9c
  135730:	e3400014 	movt	r0, #20
  135734:	ebff3676 	bl	103114 <rt_kprintf>
        return;
  135738:	ea00000a 	b	135768 <rx_enet_callback+0x84>
    }
    ENET_DisableInterrupts(base,ENET_RX_INTERRUPT);
  13573c:	e3a01403 	mov	r1, #50331648	; 0x3000000
  135740:	e51b0010 	ldr	r0, [fp, #-16]
  135744:	ebfffc35 	bl	134820 <ENET_DisableInterrupts>
    eth_device_ready(&(_imx6ul_eth_device[instance].parent));
  135748:	e51b3008 	ldr	r3, [fp, #-8]
  13574c:	e3a02f8a 	mov	r2, #552	; 0x228
  135750:	e0020392 	mul	r2, r2, r3
  135754:	e30e3078 	movw	r3, #57464	; 0xe078
  135758:	e3403014 	movt	r3, #20
  13575c:	e0823003 	add	r3, r2, r3
  135760:	e1a00003 	mov	r0, r3
  135764:	ebffd175 	bl	129d40 <eth_device_ready>
}
  135768:	e24bd004 	sub	sp, fp, #4
  13576c:	e8bd8800 	pop	{fp, pc}

00135770 <tx_enet_callback>:

void tx_enet_callback(void *base)
{
  135770:	e92d4800 	push	{fp, lr}
  135774:	e28db004 	add	fp, sp, #4
  135778:	e24dd008 	sub	sp, sp, #8
  13577c:	e50b0008 	str	r0, [fp, #-8]
    ENET_DisableInterrupts(base,ENET_TX_INTERRUPT);
  135780:	e3a01303 	mov	r1, #201326592	; 0xc000000
  135784:	e51b0008 	ldr	r0, [fp, #-8]
  135788:	ebfffc24 	bl	134820 <ENET_DisableInterrupts>
}
  13578c:	e320f000 	nop	{0}
  135790:	e24bd004 	sub	sp, fp, #4
  135794:	e8bd8800 	pop	{fp, pc}

00135798 <ueth_rx_interrupt_handle>:

static void* ueth_rx_interrupt_handle(ENET_Type *base)
{
  135798:	e92d4800 	push	{fp, lr}
  13579c:	e28db004 	add	fp, sp, #4
  1357a0:	e24dd010 	sub	sp, sp, #16
  1357a4:	e50b0010 	str	r0, [fp, #-16]
    /* Clear the transmit interrupt event. */
    base->EIR = ENET_RX_INTERRUPT;
  1357a8:	e51b3010 	ldr	r3, [fp, #-16]
  1357ac:	e3a02403 	mov	r2, #50331648	; 0x3000000
  1357b0:	e5832004 	str	r2, [r3, #4]
    int32_t instance = 0;
  1357b4:	e3a03000 	mov	r3, #0
  1357b8:	e50b3008 	str	r3, [fp, #-8]
    instance = get_instance_by_base(base);
  1357bc:	e51b0010 	ldr	r0, [fp, #-16]
  1357c0:	ebffff9f 	bl	135644 <get_instance_by_base>
  1357c4:	e50b0008 	str	r0, [fp, #-8]
    if(instance == -1)
  1357c8:	e51b3008 	ldr	r3, [fp, #-8]
  1357cc:	e3730001 	cmn	r3, #1
  1357d0:	1a00000a 	bne	135800 <ueth_rx_interrupt_handle+0x68>
    {
        LOG_E("interrput match base addr error");
  1357d4:	e3090db8 	movw	r0, #40376	; 0x9db8
  1357d8:	e3400014 	movt	r0, #20
  1357dc:	ebff364c 	bl	103114 <rt_kprintf>
  1357e0:	e3090f70 	movw	r0, #40816	; 0x9f70
  1357e4:	e3400014 	movt	r0, #20
  1357e8:	ebff3649 	bl	103114 <rt_kprintf>
  1357ec:	e3090d9c 	movw	r0, #40348	; 0x9d9c
  1357f0:	e3400014 	movt	r0, #20
  1357f4:	ebff3646 	bl	103114 <rt_kprintf>
        return RT_NULL;
  1357f8:	e3a03000 	mov	r3, #0
  1357fc:	ea000005 	b	135818 <ueth_rx_interrupt_handle+0x80>
    }
    return (void*)&(_imx6ul_eth_device[instance].parent);
  135800:	e51b3008 	ldr	r3, [fp, #-8]
  135804:	e3a02f8a 	mov	r2, #552	; 0x228
  135808:	e0020392 	mul	r2, r2, r3
  13580c:	e30e3078 	movw	r3, #57464	; 0xe078
  135810:	e3403014 	movt	r3, #20
  135814:	e0823003 	add	r3, r2, r3
}
  135818:	e1a00003 	mov	r0, r3
  13581c:	e24bd004 	sub	sp, fp, #4
  135820:	e8bd8800 	pop	{fp, pc}

00135824 <ueth_rx_interrupt_detect>:

int eth_init_done = 0;
void* ueth_rx_interrupt_detect(void) {
  135824:	e92d4800 	push	{fp, lr}
  135828:	e28db004 	add	fp, sp, #4
  13582c:	e24dd008 	sub	sp, sp, #8
    ENET_Type *base = _imx6ul_eth_device[0].enet_virtual_base_addr;
  135830:	e30e3078 	movw	r3, #57464	; 0xe078
  135834:	e3403014 	movt	r3, #20
  135838:	e59330a0 	ldr	r3, [r3, #160]	; 0xa0
  13583c:	e50b3008 	str	r3, [fp, #-8]
            ENET_DisableInterrupts(base, ENET_RX_INTERRUPT);
            return ueth_rx_interrupt_handle(base);
        }
    }
#else
    ueth_int_recv();
  135840:	ebff3ae5 	bl	1043dc <ueth_int_recv>
    return ueth_rx_interrupt_handle(base);
  135844:	e51b0008 	ldr	r0, [fp, #-8]
  135848:	ebffffd2 	bl	135798 <ueth_rx_interrupt_handle>
  13584c:	e1a03000 	mov	r3, r0
#endif
}
  135850:	e1a00003 	mov	r0, r3
  135854:	e24bd004 	sub	sp, fp, #4
  135858:	e8bd8800 	pop	{fp, pc}

0013585c <phy_detect_thread_entry>:

/*phy link detect thread*/
static void phy_detect_thread_entry(void *param)
{
  13585c:	e92d4800 	push	{fp, lr}
  135860:	e28db004 	add	fp, sp, #4
  135864:	e24dd020 	sub	sp, sp, #32
  135868:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
    bool link = false;
  13586c:	e3a03000 	mov	r3, #0
  135870:	e54b300d 	strb	r3, [fp, #-13]
    phy_speed_t speed;
    phy_duplex_t duplex;
    ENET_Type *base_addr = RT_NULL;
  135874:	e3a03000 	mov	r3, #0
  135878:	e50b3008 	str	r3, [fp, #-8]
    struct rt_imx6ul_ethps *imx6ul_device = (struct rt_imx6ul_ethps *)param;
  13587c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  135880:	e50b300c 	str	r3, [fp, #-12]
    base_addr = imx6ul_device->enet_virtual_base_addr;
  135884:	e51b300c 	ldr	r3, [fp, #-12]
  135888:	e59330a0 	ldr	r3, [r3, #160]	; 0xa0
  13588c:	e50b3008 	str	r3, [fp, #-8]

    phy_reset(imx6ul_device->phy_base_addr,imx6ul_device->phy_gpio_pin);
  135890:	e51b300c 	ldr	r3, [fp, #-12]
  135894:	e593221c 	ldr	r2, [r3, #540]	; 0x21c
  135898:	e51b300c 	ldr	r3, [fp, #-12]
  13589c:	e5933220 	ldr	r3, [r3, #544]	; 0x220
  1358a0:	e1a01003 	mov	r1, r3
  1358a4:	e1a00002 	mov	r0, r2
  1358a8:	eb000a8e 	bl	1382e8 <phy_reset>
    PHY_Init(base_addr, imx6ul_device->phy_num, SYS_CLOCK_HZ,imx6ul_device->phy_id);
  1358ac:	e51b300c 	ldr	r3, [fp, #-12]
  1358b0:	e5d33098 	ldrb	r3, [r3, #152]	; 0x98
  1358b4:	e1a01003 	mov	r1, r3
  1358b8:	e51b300c 	ldr	r3, [fp, #-12]
  1358bc:	e5933224 	ldr	r3, [r3, #548]	; 0x224
  1358c0:	e3a02d52 	mov	r2, #5248	; 0x1480
  1358c4:	e34023ef 	movt	r2, #1007	; 0x3ef
  1358c8:	e51b0008 	ldr	r0, [fp, #-8]
  1358cc:	eb000af9 	bl	1384b8 <PHY_Init>
    PHY_GetLinkStatus(base_addr, imx6ul_device->phy_num, &link);
  1358d0:	e51b300c 	ldr	r3, [fp, #-12]
  1358d4:	e5d33098 	ldrb	r3, [r3, #152]	; 0x98
  1358d8:	e1a01003 	mov	r1, r3
  1358dc:	e24b300d 	sub	r3, fp, #13
  1358e0:	e1a02003 	mov	r2, r3
  1358e4:	e51b0008 	ldr	r0, [fp, #-8]
  1358e8:	eb000be5 	bl	138884 <PHY_GetLinkStatus>
    if (link)
  1358ec:	e55b300d 	ldrb	r3, [fp, #-13]
  1358f0:	e3530000 	cmp	r3, #0
  1358f4:	0a00000d 	beq	135930 <phy_detect_thread_entry+0xd4>
    {
        /* Get the actual PHY link speed. */
        PHY_GetLinkSpeedDuplex(base_addr, imx6ul_device->phy_num, &speed, &duplex);
  1358f8:	e51b300c 	ldr	r3, [fp, #-12]
  1358fc:	e5d33098 	ldrb	r3, [r3, #152]	; 0x98
  135900:	e1a01003 	mov	r1, r3
  135904:	e24b3018 	sub	r3, fp, #24
  135908:	e24b2014 	sub	r2, fp, #20
  13590c:	e51b0008 	ldr	r0, [fp, #-8]
  135910:	eb000c04 	bl	138928 <PHY_GetLinkSpeedDuplex>
        /* Change the MII speed and duplex for actual link status. */
        imx6ul_device->config.miiSpeed = (enet_mii_speed_t)speed;
  135914:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  135918:	e51b300c 	ldr	r3, [fp, #-12]
  13591c:	e58320ec 	str	r2, [r3, #236]	; 0xec
        imx6ul_device->config.miiDuplex = (enet_mii_duplex_t)duplex;
  135920:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  135924:	e51b300c 	ldr	r3, [fp, #-12]
  135928:	e58320f0 	str	r2, [r3, #240]	; 0xf0
  13592c:	ea000008 	b	135954 <phy_detect_thread_entry+0xf8>
    }
    else
    {
        LOG_W("PHY Link down, please check the cable connection and link partner setting.");
  135930:	e3090f90 	movw	r0, #40848	; 0x9f90
  135934:	e3400014 	movt	r0, #20
  135938:	ebff35f5 	bl	103114 <rt_kprintf>
  13593c:	e3090fa4 	movw	r0, #40868	; 0x9fa4
  135940:	e3400014 	movt	r0, #20
  135944:	ebff35f2 	bl	103114 <rt_kprintf>
  135948:	e3090d9c 	movw	r0, #40348	; 0x9d9c
  13594c:	e3400014 	movt	r0, #20
  135950:	ebff35ef 	bl	103114 <rt_kprintf>
    }

    while(1)
    {
        PHY_GetLinkStatus(base_addr, imx6ul_device->phy_num, &link);
  135954:	e51b300c 	ldr	r3, [fp, #-12]
  135958:	e5d33098 	ldrb	r3, [r3, #152]	; 0x98
  13595c:	e1a01003 	mov	r1, r3
  135960:	e24b300d 	sub	r3, fp, #13
  135964:	e1a02003 	mov	r2, r3
  135968:	e51b0008 	ldr	r0, [fp, #-8]
  13596c:	eb000bc4 	bl	138884 <PHY_GetLinkStatus>
        if(link != imx6ul_device->phy_link_status)
  135970:	e55b300d 	ldrb	r3, [fp, #-13]
  135974:	e1a02003 	mov	r2, r3
  135978:	e51b300c 	ldr	r3, [fp, #-12]
  13597c:	e5933088 	ldr	r3, [r3, #136]	; 0x88
  135980:	e1520003 	cmp	r2, r3
  135984:	0a00000b 	beq	1359b8 <phy_detect_thread_entry+0x15c>
        {
            if(link == true)
  135988:	e55b300d 	ldrb	r3, [fp, #-13]
  13598c:	e3530000 	cmp	r3, #0
  135990:	0a000004 	beq	1359a8 <phy_detect_thread_entry+0x14c>
            {
                PHY_StartNegotiation(base_addr,imx6ul_device->phy_num);
  135994:	e51b300c 	ldr	r3, [fp, #-12]
  135998:	e5d33098 	ldrb	r3, [r3, #152]	; 0x98
  13599c:	e1a01003 	mov	r1, r3
  1359a0:	e51b0008 	ldr	r0, [fp, #-8]
  1359a4:	eb000a74 	bl	13837c <PHY_StartNegotiation>
                
            }            
            imx6ul_eth_link_change(imx6ul_device,link);
  1359a8:	e55b300d 	ldrb	r3, [fp, #-13]
  1359ac:	e1a01003 	mov	r1, r3
  1359b0:	e51b000c 	ldr	r0, [fp, #-12]
  1359b4:	ebfffba9 	bl	134860 <imx6ul_eth_link_change>
        }
        rt_thread_mdelay(DETECT_DELAY_ONE_SECOND);
  1359b8:	e3a00ffa 	mov	r0, #1000	; 0x3e8
  1359bc:	ebff312e 	bl	101e7c <rt_thread_mdelay>
        PHY_GetLinkStatus(base_addr, imx6ul_device->phy_num, &link);
  1359c0:	eaffffe3 	b	135954 <phy_detect_thread_entry+0xf8>

001359c4 <imx6ul_eth_init>:
    rt_imx6ul_eth_write,
    rt_imx6ul_eth_control,
};

int imx6ul_eth_init(int eth_select, const char ** eth_name)
{
  1359c4:	e92d4800 	push	{fp, lr}
  1359c8:	e28db004 	add	fp, sp, #4
  1359cc:	e24dd030 	sub	sp, sp, #48	; 0x30
  1359d0:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  1359d4:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
    rt_err_t state = RT_EOK;
  1359d8:	e3a03000 	mov	r3, #0
  1359dc:	e50b3008 	str	r3, [fp, #-8]
    char link_detect[10];
    char mac_addr[MAX_ADDR_LEN];

    if (ipc_service_init() == RT_ERROR)
  1359e0:	ebff3a48 	bl	104308 <ipc_service_init>
  1359e4:	e1a03000 	mov	r3, r0
  1359e8:	e3530001 	cmp	r3, #1
  1359ec:	1a000001 	bne	1359f8 <imx6ul_eth_init+0x34>
    {
        return -RT_ERROR;
  1359f0:	e3e03000 	mvn	r3, #0
  1359f4:	ea0000b1 	b	135cc0 <imx6ul_eth_init+0x2fc>
    }


    ueth_gpioinit((void *)&mdio_gpio[0], sizeof(mdio_gpio[0]));
  1359f8:	e3a0101c 	mov	r1, #28
  1359fc:	e30e0040 	movw	r0, #57408	; 0xe040
  135a00:	e3400014 	movt	r0, #20
  135a04:	ebff3ade 	bl	104584 <ueth_gpioinit>
    ueth_gpioinit((void *)&mdio_gpio[1], sizeof(mdio_gpio[1]));
  135a08:	e3a0101c 	mov	r1, #28
  135a0c:	e59f02b8 	ldr	r0, [pc, #696]	; 135ccc <imx6ul_eth_init+0x308>
  135a10:	ebff3adb 	bl	104584 <ueth_gpioinit>

    for (int idx=0; idx<GET_ARRAY_NUM(_imx6ul_eth_device); idx++)
  135a14:	e3a03000 	mov	r3, #0
  135a18:	e50b300c 	str	r3, [fp, #-12]
  135a1c:	ea000090 	b	135c64 <imx6ul_eth_init+0x2a0>
    {
        _imx6ul_eth_device[idx].parent.parent.ops = &_k_enet_ops;
  135a20:	e30e3078 	movw	r3, #57464	; 0xe078
  135a24:	e3403014 	movt	r3, #20
  135a28:	e51b200c 	ldr	r2, [fp, #-12]
  135a2c:	e3a01f8a 	mov	r1, #552	; 0x228
  135a30:	e0020291 	mul	r2, r1, r2
  135a34:	e0833002 	add	r3, r3, r2
  135a38:	e283202c 	add	r2, r3, #44	; 0x2c
  135a3c:	e3093ff0 	movw	r3, #40944	; 0x9ff0
  135a40:	e3403014 	movt	r3, #20
  135a44:	e5823000 	str	r3, [r2]
#ifdef RT_USING_LWIP        
        _imx6ul_eth_device[idx].parent.eth_rx     = rt_imx6ul_eth_rx;
  135a48:	e30e3078 	movw	r3, #57464	; 0xe078
  135a4c:	e3403014 	movt	r3, #20
  135a50:	e51b200c 	ldr	r2, [fp, #-12]
  135a54:	e3a01f8a 	mov	r1, #552	; 0x228
  135a58:	e0020291 	mul	r2, r1, r2
  135a5c:	e0833002 	add	r3, r3, r2
  135a60:	e2832070 	add	r2, r3, #112	; 0x70
  135a64:	e3053304 	movw	r3, #21252	; 0x5304
  135a68:	e3403013 	movt	r3, #19
  135a6c:	e5823000 	str	r3, [r2]
        _imx6ul_eth_device[idx].parent.eth_tx     = rt_imx6ul_eth_tx;
  135a70:	e30e3078 	movw	r3, #57464	; 0xe078
  135a74:	e3403014 	movt	r3, #20
  135a78:	e51b200c 	ldr	r2, [fp, #-12]
  135a7c:	e3a01f8a 	mov	r1, #552	; 0x228
  135a80:	e0020291 	mul	r2, r1, r2
  135a84:	e0833002 	add	r3, r3, r2
  135a88:	e2832074 	add	r2, r3, #116	; 0x74
  135a8c:	e30531a4 	movw	r3, #20900	; 0x51a4
  135a90:	e3403013 	movt	r3, #19
  135a94:	e5823000 	str	r3, [r2]
#endif        
        _imx6ul_eth_device[idx].phy_link_status   = RT_FALSE;
  135a98:	e30e3078 	movw	r3, #57464	; 0xe078
  135a9c:	e3403014 	movt	r3, #20
  135aa0:	e51b200c 	ldr	r2, [fp, #-12]
  135aa4:	e3a01f8a 	mov	r1, #552	; 0x228
  135aa8:	e0020291 	mul	r2, r1, r2
  135aac:	e0833002 	add	r3, r3, r2
  135ab0:	e2833088 	add	r3, r3, #136	; 0x88
  135ab4:	e3a02000 	mov	r2, #0
  135ab8:	e5832000 	str	r2, [r3]

#ifdef SAL_USING_UNET
        rt_imx6ul_eth_control((rt_device_t)(&_imx6ul_eth_device[idx]),NIOCTL_GADDR,mac_addr);
  135abc:	e51b300c 	ldr	r3, [fp, #-12]
  135ac0:	e3a02f8a 	mov	r2, #552	; 0x228
  135ac4:	e0020392 	mul	r2, r2, r3
  135ac8:	e30e3078 	movw	r3, #57464	; 0xe078
  135acc:	e3403014 	movt	r3, #20
  135ad0:	e0823003 	add	r3, r2, r3
  135ad4:	e24b2024 	sub	r2, fp, #36	; 0x24
  135ad8:	e3a01001 	mov	r1, #1
  135adc:	e1a00003 	mov	r0, r3
  135ae0:	ebfffce3 	bl	134e74 <rt_imx6ul_eth_control>
        
        rt_imx6ul_eth_init((rt_device_t)(&(_imx6ul_eth_device[idx].parent)));
  135ae4:	e51b300c 	ldr	r3, [fp, #-12]
  135ae8:	e3a02f8a 	mov	r2, #552	; 0x228
  135aec:	e0020392 	mul	r2, r2, r3
  135af0:	e30e3078 	movw	r3, #57464	; 0xe078
  135af4:	e3403014 	movt	r3, #20
  135af8:	e0823003 	add	r3, r2, r3
  135afc:	e1a00003 	mov	r0, r3
  135b00:	ebfffc5c 	bl	134c78 <rt_imx6ul_eth_init>
#endif
        eth_init_done = 1;
  135b04:	e30f3bf0 	movw	r3, #64496	; 0xfbf0
  135b08:	e3403014 	movt	r3, #20
  135b0c:	e3a02001 	mov	r2, #1
  135b10:	e5832000 	str	r2, [r3]
        /* register eth device */
        state = eth_device_init(&(_imx6ul_eth_device[idx].parent), _imx6ul_eth_device[idx].mac_name);
  135b14:	e51b300c 	ldr	r3, [fp, #-12]
  135b18:	e3a02f8a 	mov	r2, #552	; 0x228
  135b1c:	e0020392 	mul	r2, r2, r3
  135b20:	e30e3078 	movw	r3, #57464	; 0xe078
  135b24:	e3403014 	movt	r3, #20
  135b28:	e0820003 	add	r0, r2, r3
  135b2c:	e30e3078 	movw	r3, #57464	; 0xe078
  135b30:	e3403014 	movt	r3, #20
  135b34:	e51b200c 	ldr	r2, [fp, #-12]
  135b38:	e3a01f8a 	mov	r1, #552	; 0x228
  135b3c:	e0020291 	mul	r2, r1, r2
  135b40:	e0833002 	add	r3, r3, r2
  135b44:	e283308c 	add	r3, r3, #140	; 0x8c
  135b48:	e5933000 	ldr	r3, [r3]
  135b4c:	e1a01003 	mov	r1, r3
  135b50:	ebffd047 	bl	129c74 <eth_device_init>
  135b54:	e50b0008 	str	r0, [fp, #-8]
        if (RT_EOK == state)
  135b58:	e51b3008 	ldr	r3, [fp, #-8]
  135b5c:	e3530000 	cmp	r3, #0
  135b60:	1a000009 	bne	135b8c <imx6ul_eth_init+0x1c8>
        {
            LOG_I("emac device init success");
  135b64:	e30a0008 	movw	r0, #40968	; 0xa008
  135b68:	e3400014 	movt	r0, #20
  135b6c:	ebff3568 	bl	103114 <rt_kprintf>
  135b70:	e30a001c 	movw	r0, #40988	; 0xa01c
  135b74:	e3400014 	movt	r0, #20
  135b78:	ebff3565 	bl	103114 <rt_kprintf>
  135b7c:	e3090d9c 	movw	r0, #40348	; 0x9d9c
  135b80:	e3400014 	movt	r0, #20
  135b84:	ebff3562 	bl	103114 <rt_kprintf>
  135b88:	ea00000b 	b	135bbc <imx6ul_eth_init+0x1f8>
        }
        else
        {
            LOG_E("emac device init faild: %d", state);
  135b8c:	e3090db8 	movw	r0, #40376	; 0x9db8
  135b90:	e3400014 	movt	r0, #20
  135b94:	ebff355e 	bl	103114 <rt_kprintf>
  135b98:	e51b1008 	ldr	r1, [fp, #-8]
  135b9c:	e30a0038 	movw	r0, #41016	; 0xa038
  135ba0:	e3400014 	movt	r0, #20
  135ba4:	ebff355a 	bl	103114 <rt_kprintf>
  135ba8:	e3090d9c 	movw	r0, #40348	; 0x9d9c
  135bac:	e3400014 	movt	r0, #20
  135bb0:	ebff3557 	bl	103114 <rt_kprintf>
            state = -RT_ERROR;
  135bb4:	e3e03000 	mvn	r3, #0
  135bb8:	e50b3008 	str	r3, [fp, #-8]
        }

        rt_sprintf(link_detect,"link_d%d",_imx6ul_eth_device[idx].mac_num);
  135bbc:	e30e3078 	movw	r3, #57464	; 0xe078
  135bc0:	e3403014 	movt	r3, #20
  135bc4:	e51b200c 	ldr	r2, [fp, #-12]
  135bc8:	e3a01f8a 	mov	r1, #552	; 0x228
  135bcc:	e0020291 	mul	r2, r1, r2
  135bd0:	e0833002 	add	r3, r3, r2
  135bd4:	e28330a4 	add	r3, r3, #164	; 0xa4
  135bd8:	e5932000 	ldr	r2, [r3]
  135bdc:	e24b301c 	sub	r3, fp, #28
  135be0:	e30a1054 	movw	r1, #41044	; 0xa054
  135be4:	e3401014 	movt	r1, #20
  135be8:	e1a00003 	mov	r0, r3
  135bec:	ebff3526 	bl	10308c <rt_sprintf>
        /* start phy link detect */
        rt_thread_t phy_link_tid;
        phy_link_tid = rt_thread_create(link_detect,
                                phy_detect_thread_entry,
                                &_imx6ul_eth_device[idx],
  135bf0:	e51b300c 	ldr	r3, [fp, #-12]
  135bf4:	e3a02f8a 	mov	r2, #552	; 0x228
  135bf8:	e0020392 	mul	r2, r2, r3
  135bfc:	e30e3078 	movw	r3, #57464	; 0xe078
  135c00:	e3403014 	movt	r3, #20
  135c04:	e0822003 	add	r2, r2, r3
        phy_link_tid = rt_thread_create(link_detect,
  135c08:	e24b001c 	sub	r0, fp, #28
  135c0c:	e3a03002 	mov	r3, #2
  135c10:	e58d3004 	str	r3, [sp, #4]
  135c14:	e3a03019 	mov	r3, #25
  135c18:	e58d3000 	str	r3, [sp]
  135c1c:	e3a03a01 	mov	r3, #4096	; 0x1000
  135c20:	e305185c 	movw	r1, #22620	; 0x585c
  135c24:	e3401013 	movt	r1, #19
  135c28:	ebff3131 	bl	1020f4 <rt_thread_create>
  135c2c:	e50b0010 	str	r0, [fp, #-16]
                                4096,
                                25,
                                2);
        if (phy_link_tid != RT_NULL)
  135c30:	e51b3010 	ldr	r3, [fp, #-16]
  135c34:	e3530000 	cmp	r3, #0
  135c38:	0a000001 	beq	135c44 <imx6ul_eth_init+0x280>
        {
            rt_thread_startup(phy_link_tid);
  135c3c:	e51b0010 	ldr	r0, [fp, #-16]
  135c40:	ebff3160 	bl	1021c8 <rt_thread_startup>
        }
        memset(link_detect,0,sizeof(link_detect));
  135c44:	e24b301c 	sub	r3, fp, #28
  135c48:	e3a0200a 	mov	r2, #10
  135c4c:	e3a01000 	mov	r1, #0
  135c50:	e1a00003 	mov	r0, r3
  135c54:	eb002e00 	bl	14145c <memset>
    for (int idx=0; idx<GET_ARRAY_NUM(_imx6ul_eth_device); idx++)
  135c58:	e51b300c 	ldr	r3, [fp, #-12]
  135c5c:	e2833001 	add	r3, r3, #1
  135c60:	e50b300c 	str	r3, [fp, #-12]
  135c64:	e51b300c 	ldr	r3, [fp, #-12]
  135c68:	e3530000 	cmp	r3, #0
  135c6c:	0affff6b 	beq	135a20 <imx6ul_eth_init+0x5c>
    }

    if (eth_select > GET_ARRAY_NUM(_imx6ul_eth_device)) 
  135c70:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  135c74:	e3530001 	cmp	r3, #1
  135c78:	9a000005 	bls	135c94 <imx6ul_eth_init+0x2d0>
    {
        *eth_name = RT_NULL;
  135c7c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  135c80:	e3a02000 	mov	r2, #0
  135c84:	e5832000 	str	r2, [r3]
        state = -RT_ERROR;
  135c88:	e3e03000 	mvn	r3, #0
  135c8c:	e50b3008 	str	r3, [fp, #-8]
  135c90:	ea000009 	b	135cbc <imx6ul_eth_init+0x2f8>
    } 
    else 
    {
        *eth_name = _imx6ul_eth_device[eth_select].mac_name;
  135c94:	e30e3078 	movw	r3, #57464	; 0xe078
  135c98:	e3403014 	movt	r3, #20
  135c9c:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  135ca0:	e3a01f8a 	mov	r1, #552	; 0x228
  135ca4:	e0020291 	mul	r2, r1, r2
  135ca8:	e0833002 	add	r3, r3, r2
  135cac:	e283308c 	add	r3, r3, #140	; 0x8c
  135cb0:	e5932000 	ldr	r2, [r3]
  135cb4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  135cb8:	e5832000 	str	r2, [r3]
    }

    return state;
  135cbc:	e51b3008 	ldr	r3, [fp, #-8]
}
  135cc0:	e1a00003 	mov	r0, r3
  135cc4:	e24bd004 	sub	sp, fp, #4
  135cc8:	e8bd8800 	pop	{fp, pc}
  135ccc:	0014e05c 	.word	0x0014e05c

00135cd0 <__assert_func>:
        __BKPT(0);
    }
}
#elif(defined(__GNUC__))
void __assert_func(const char *file, int line, const char *func, const char *failedExpr)
{
  135cd0:	e92d4800 	push	{fp, lr}
  135cd4:	e28db004 	add	fp, sp, #4
  135cd8:	e24dd018 	sub	sp, sp, #24
  135cdc:	e50b0008 	str	r0, [fp, #-8]
  135ce0:	e50b100c 	str	r1, [fp, #-12]
  135ce4:	e50b2010 	str	r2, [fp, #-16]
  135ce8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    PRINTF("ASSERT ERROR \" %s \": file \"%s\" Line \"%d\" function name \"%s\" \n", failedExpr, file, line, func);
  135cec:	e51b3010 	ldr	r3, [fp, #-16]
  135cf0:	e58d3000 	str	r3, [sp]
  135cf4:	e51b300c 	ldr	r3, [fp, #-12]
  135cf8:	e51b2008 	ldr	r2, [fp, #-8]
  135cfc:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  135d00:	e30a0074 	movw	r0, #41076	; 0xa074
  135d04:	e3400014 	movt	r0, #20
  135d08:	ebff3501 	bl	103114 <rt_kprintf>
    for (;;)
    {
        __BKPT(0);
  135d0c:	e1200070 	bkpt	0x0000
  135d10:	eafffffd 	b	135d0c <__assert_func+0x3c>

00135d14 <SDK_Malloc>:
                           /*   SYSCON->STARTERCLR[index] = 1u << intNumber; */
}
#endif /*CPU_QN908X */

void *SDK_Malloc(size_t size, size_t alignbytes)
{
  135d14:	e92d4800 	push	{fp, lr}
  135d18:	e28db004 	add	fp, sp, #4
  135d1c:	e24dd018 	sub	sp, sp, #24
  135d20:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  135d24:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    mem_align_cb_t *p_cb = NULL;
  135d28:	e3a03000 	mov	r3, #0
  135d2c:	e50b3008 	str	r3, [fp, #-8]
    uint32_t alignedsize = SDK_SIZEALIGN(size, alignbytes) + alignbytes + sizeof(mem_align_cb_t);
  135d30:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  135d34:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  135d38:	e0823003 	add	r3, r2, r3
  135d3c:	e2432001 	sub	r2, r3, #1
  135d40:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  135d44:	e2633000 	rsb	r3, r3, #0
  135d48:	e0022003 	and	r2, r2, r3
  135d4c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  135d50:	e0823003 	add	r3, r2, r3
  135d54:	e2833004 	add	r3, r3, #4
  135d58:	e50b300c 	str	r3, [fp, #-12]
    void *p_align_addr, *p_addr = malloc(alignedsize);
  135d5c:	e51b000c 	ldr	r0, [fp, #-12]
  135d60:	eb001df4 	bl	13d538 <malloc>
  135d64:	e1a03000 	mov	r3, r0
  135d68:	e50b3010 	str	r3, [fp, #-16]

    if (!p_addr)
  135d6c:	e51b3010 	ldr	r3, [fp, #-16]
  135d70:	e3530000 	cmp	r3, #0
  135d74:	1a000001 	bne	135d80 <SDK_Malloc+0x6c>
    {
        return NULL;
  135d78:	e3a03000 	mov	r3, #0
  135d7c:	ea000014 	b	135dd4 <SDK_Malloc+0xc0>
    }

    p_align_addr = (void *)SDK_SIZEALIGN((uint32_t)p_addr + sizeof(mem_align_cb_t), alignbytes);
  135d80:	e51b2010 	ldr	r2, [fp, #-16]
  135d84:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  135d88:	e0823003 	add	r3, r2, r3
  135d8c:	e2832003 	add	r2, r3, #3
  135d90:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  135d94:	e2633000 	rsb	r3, r3, #0
  135d98:	e0033002 	and	r3, r3, r2
  135d9c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

    p_cb = (mem_align_cb_t *)((uint32_t)p_align_addr - 4);
  135da0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  135da4:	e2433004 	sub	r3, r3, #4
  135da8:	e50b3008 	str	r3, [fp, #-8]
    p_cb->identifier = SDK_MEM_MAGIC_NUMBER;
  135dac:	e51b3008 	ldr	r3, [fp, #-8]
  135db0:	e3032039 	movw	r2, #12345	; 0x3039
  135db4:	e1c320b0 	strh	r2, [r3]
    p_cb->offset = (uint32_t)p_align_addr - (uint32_t)p_addr;
  135db8:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  135dbc:	e51b3010 	ldr	r3, [fp, #-16]
  135dc0:	e0423003 	sub	r3, r2, r3
  135dc4:	e6ff2073 	uxth	r2, r3
  135dc8:	e51b3008 	ldr	r3, [fp, #-8]
  135dcc:	e1c320b2 	strh	r2, [r3, #2]

    return (void *)p_align_addr;
  135dd0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
}
  135dd4:	e1a00003 	mov	r0, r3
  135dd8:	e24bd004 	sub	sp, fp, #4
  135ddc:	e8bd8800 	pop	{fp, pc}

00135de0 <SDK_Free>:

void SDK_Free(void *ptr)
{
  135de0:	e92d4800 	push	{fp, lr}
  135de4:	e28db004 	add	fp, sp, #4
  135de8:	e24dd010 	sub	sp, sp, #16
  135dec:	e50b0010 	str	r0, [fp, #-16]
    mem_align_cb_t *p_cb = (mem_align_cb_t *)((uint32_t)ptr - 4);
  135df0:	e51b3010 	ldr	r3, [fp, #-16]
  135df4:	e2433004 	sub	r3, r3, #4
  135df8:	e50b3008 	str	r3, [fp, #-8]

    if (p_cb->identifier != SDK_MEM_MAGIC_NUMBER)
  135dfc:	e51b3008 	ldr	r3, [fp, #-8]
  135e00:	e1d330b0 	ldrh	r3, [r3]
  135e04:	e3032039 	movw	r2, #12345	; 0x3039
  135e08:	e1530002 	cmp	r3, r2
  135e0c:	1a000006 	bne	135e2c <SDK_Free+0x4c>
    {
        return;
    }

    free((void *)((uint32_t)ptr - p_cb->offset));
  135e10:	e51b3010 	ldr	r3, [fp, #-16]
  135e14:	e51b2008 	ldr	r2, [fp, #-8]
  135e18:	e1d220b2 	ldrh	r2, [r2, #2]
  135e1c:	e0433002 	sub	r3, r3, r2
  135e20:	e1a00003 	mov	r0, r3
  135e24:	eb001f7f 	bl	13dc28 <free>
  135e28:	ea000000 	b	135e30 <SDK_Free+0x50>
        return;
  135e2c:	e320f000 	nop	{0}
}
  135e30:	e24bd004 	sub	sp, fp, #4
  135e34:	e8bd8800 	pop	{fp, pc}

00135e38 <ENET_Reset>:
{
  135e38:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  135e3c:	e28db000 	add	fp, sp, #0
  135e40:	e24dd00c 	sub	sp, sp, #12
  135e44:	e50b0008 	str	r0, [fp, #-8]
    base->ECR |= ENET_ECR_RESET_MASK;
  135e48:	e51b3008 	ldr	r3, [fp, #-8]
  135e4c:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  135e50:	e3832001 	orr	r2, r3, #1
  135e54:	e51b3008 	ldr	r3, [fp, #-8]
  135e58:	e5832024 	str	r2, [r3, #36]	; 0x24
}
  135e5c:	e320f000 	nop	{0}
  135e60:	e28bd000 	add	sp, fp, #0
  135e64:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  135e68:	e12fff1e 	bx	lr

00135e6c <ENET_GetSMI>:
{
  135e6c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  135e70:	e28db000 	add	fp, sp, #0
  135e74:	e24dd00c 	sub	sp, sp, #12
  135e78:	e50b0008 	str	r0, [fp, #-8]
    return (0 != (base->MSCR & 0x7E));
  135e7c:	e51b3008 	ldr	r3, [fp, #-8]
  135e80:	e5933044 	ldr	r3, [r3, #68]	; 0x44
  135e84:	e203307e 	and	r3, r3, #126	; 0x7e
  135e88:	e3530000 	cmp	r3, #0
  135e8c:	13a03001 	movne	r3, #1
  135e90:	03a03000 	moveq	r3, #0
  135e94:	e6ef3073 	uxtb	r3, r3
}
  135e98:	e1a00003 	mov	r0, r3
  135e9c:	e28bd000 	add	sp, fp, #0
  135ea0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  135ea4:	e12fff1e 	bx	lr

00135ea8 <ENET_EnableSleepMode>:
{
  135ea8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  135eac:	e28db000 	add	fp, sp, #0
  135eb0:	e24dd00c 	sub	sp, sp, #12
  135eb4:	e50b0008 	str	r0, [fp, #-8]
  135eb8:	e1a03001 	mov	r3, r1
  135ebc:	e54b3009 	strb	r3, [fp, #-9]
    if (enable)
  135ec0:	e55b3009 	ldrb	r3, [fp, #-9]
  135ec4:	e3530000 	cmp	r3, #0
  135ec8:	0a000005 	beq	135ee4 <ENET_EnableSleepMode+0x3c>
        base->ECR |= ENET_ECR_SLEEP_MASK | ENET_ECR_MAGICEN_MASK;
  135ecc:	e51b3008 	ldr	r3, [fp, #-8]
  135ed0:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  135ed4:	e383200c 	orr	r2, r3, #12
  135ed8:	e51b3008 	ldr	r3, [fp, #-8]
  135edc:	e5832024 	str	r2, [r3, #36]	; 0x24
}
  135ee0:	ea000004 	b	135ef8 <ENET_EnableSleepMode+0x50>
        base->ECR &= ~(ENET_ECR_SLEEP_MASK | ENET_ECR_MAGICEN_MASK);
  135ee4:	e51b3008 	ldr	r3, [fp, #-8]
  135ee8:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  135eec:	e3c3200c 	bic	r2, r3, #12
  135ef0:	e51b3008 	ldr	r3, [fp, #-8]
  135ef4:	e5832024 	str	r2, [r3, #36]	; 0x24
}
  135ef8:	e320f000 	nop	{0}
  135efc:	e28bd000 	add	sp, fp, #0
  135f00:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  135f04:	e12fff1e 	bx	lr

00135f08 <ENET_EnableInterrupts>:
{
  135f08:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  135f0c:	e28db000 	add	fp, sp, #0
  135f10:	e24dd00c 	sub	sp, sp, #12
  135f14:	e50b0008 	str	r0, [fp, #-8]
  135f18:	e50b100c 	str	r1, [fp, #-12]
    base->EIMR |= mask;
  135f1c:	e51b3008 	ldr	r3, [fp, #-8]
  135f20:	e5932008 	ldr	r2, [r3, #8]
  135f24:	e51b300c 	ldr	r3, [fp, #-12]
  135f28:	e1822003 	orr	r2, r2, r3
  135f2c:	e51b3008 	ldr	r3, [fp, #-8]
  135f30:	e5832008 	str	r2, [r3, #8]
}
  135f34:	e320f000 	nop	{0}
  135f38:	e28bd000 	add	sp, fp, #0
  135f3c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  135f40:	e12fff1e 	bx	lr

00135f44 <ENET_GetInstance>:

/*******************************************************************************
 * Code
 ******************************************************************************/
uint32_t ENET_GetInstance(ENET_Type *base)
{
  135f44:	e92d4800 	push	{fp, lr}
  135f48:	e28db004 	add	fp, sp, #4
  135f4c:	e24dd010 	sub	sp, sp, #16
  135f50:	e50b0010 	str	r0, [fp, #-16]
    uint32_t instance;
    /* Find the instance index from base address mappings. */
    for (instance = 0; instance < ARRAY_SIZE(s_enetBases); instance++)
  135f54:	e3a03000 	mov	r3, #0
  135f58:	e50b3008 	str	r3, [fp, #-8]
  135f5c:	ea000009 	b	135f88 <ENET_GetInstance+0x44>
    {
        if (s_enetBases[instance] == base)
  135f60:	e30a30b4 	movw	r3, #41140	; 0xa0b4
  135f64:	e3403014 	movt	r3, #20
  135f68:	e51b2008 	ldr	r2, [fp, #-8]
  135f6c:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  135f70:	e51b2010 	ldr	r2, [fp, #-16]
  135f74:	e1520003 	cmp	r2, r3
  135f78:	0a000006 	beq	135f98 <ENET_GetInstance+0x54>
    for (instance = 0; instance < ARRAY_SIZE(s_enetBases); instance++)
  135f7c:	e51b3008 	ldr	r3, [fp, #-8]
  135f80:	e2833001 	add	r3, r3, #1
  135f84:	e50b3008 	str	r3, [fp, #-8]
  135f88:	e51b3008 	ldr	r3, [fp, #-8]
  135f8c:	e3530002 	cmp	r3, #2
  135f90:	9afffff2 	bls	135f60 <ENET_GetInstance+0x1c>
  135f94:	ea000000 	b	135f9c <ENET_GetInstance+0x58>
        {
            break;
  135f98:	e320f000 	nop	{0}
        }
    }
    RT_ASSERT(instance < ARRAY_SIZE(s_enetBases));
  135f9c:	e51b3008 	ldr	r3, [fp, #-8]
  135fa0:	e3530002 	cmp	r3, #2
  135fa4:	9a000005 	bls	135fc0 <ENET_GetInstance+0x7c>
  135fa8:	e3a020d7 	mov	r2, #215	; 0xd7
  135fac:	e30a1430 	movw	r1, #42032	; 0xa430
  135fb0:	e3401014 	movt	r1, #20
  135fb4:	e30a00c0 	movw	r0, #41152	; 0xa0c0
  135fb8:	e3400014 	movt	r0, #20
  135fbc:	ebff3575 	bl	103598 <rt_assert_handler>

    return instance;
  135fc0:	e51b3008 	ldr	r3, [fp, #-8]
}
  135fc4:	e1a00003 	mov	r0, r3
  135fc8:	e24bd004 	sub	sp, fp, #4
  135fcc:	e8bd8800 	pop	{fp, pc}

00135fd0 <ENET_GetDefaultConfig>:
};

#endif

void ENET_GetDefaultConfig(enet_config_t *config)
{
  135fd0:	e92d4800 	push	{fp, lr}
  135fd4:	e28db004 	add	fp, sp, #4
  135fd8:	e24dd008 	sub	sp, sp, #8
  135fdc:	e50b0008 	str	r0, [fp, #-8]
    /* Checks input parameter. */
    RT_ASSERT(config);
  135fe0:	e51b3008 	ldr	r3, [fp, #-8]
  135fe4:	e3530000 	cmp	r3, #0
  135fe8:	1a000005 	bne	136004 <ENET_GetDefaultConfig+0x34>
  135fec:	e3a020e9 	mov	r2, #233	; 0xe9
  135ff0:	e30a1444 	movw	r1, #42052	; 0xa444
  135ff4:	e3401014 	movt	r1, #20
  135ff8:	e30a00e4 	movw	r0, #41188	; 0xa0e4
  135ffc:	e3400014 	movt	r0, #20
  136000:	ebff3564 	bl	103598 <rt_assert_handler>

    /* Initializes the MAC configure structure to zero. */
    memset(config, 0, sizeof(enet_config_t));
  136004:	e3a02024 	mov	r2, #36	; 0x24
  136008:	e3a01000 	mov	r1, #0
  13600c:	e51b0008 	ldr	r0, [fp, #-8]
  136010:	eb002d11 	bl	14145c <memset>

    #if defined (FSL_FEATURE_ENET_HAS_INTERRUPT_COALESCE) && FSL_FEATURE_ENET_HAS_INTERRUPT_COALESCE
    config->intCoalesceCfg = &intcoalesce_config;
  136014:	e51b2008 	ldr	r2, [fp, #-8]
  136018:	e30e32a0 	movw	r3, #58016	; 0xe2a0
  13601c:	e3403014 	movt	r3, #20
  136020:	e5823020 	str	r3, [r2, #32]
    #endif

    /* Sets MII mode, full duplex, 100Mbps for MAC and PHY data interface. */
    config->miiMode = kENET_RmiiMode;
  136024:	e51b3008 	ldr	r3, [fp, #-8]
  136028:	e3a02001 	mov	r2, #1
  13602c:	e583200c 	str	r2, [r3, #12]
    config->miiSpeed = kENET_MiiSpeed100M;
  136030:	e51b3008 	ldr	r3, [fp, #-8]
  136034:	e3a02001 	mov	r2, #1
  136038:	e5832010 	str	r2, [r3, #16]
    config->miiDuplex = kENET_MiiFullDuplex;
  13603c:	e51b3008 	ldr	r3, [fp, #-8]
  136040:	e3a02001 	mov	r2, #1
  136044:	e5832014 	str	r2, [r3, #20]

    /* Sets the maximum receive frame length. */
    config->rxMaxFrameLen = ENET_FRAME_MAX_FRAMELEN;
  136048:	e51b3008 	ldr	r3, [fp, #-8]
  13604c:	e30025ee 	movw	r2, #1518	; 0x5ee
  136050:	e1c320b8 	strh	r2, [r3, #8]
}
  136054:	e320f000 	nop	{0}
  136058:	e24bd004 	sub	sp, fp, #4
  13605c:	e8bd8800 	pop	{fp, pc}

00136060 <ENET_Init>:
               enet_handle_t *handle,
               const enet_config_t *config,
               const enet_buffer_config_t *bufferConfig,
               uint8_t *macAddr,
               uint32_t srcClock_Hz)
{
  136060:	e92d4800 	push	{fp, lr}
  136064:	e28db004 	add	fp, sp, #4
  136068:	e24dd018 	sub	sp, sp, #24
  13606c:	e50b0008 	str	r0, [fp, #-8]
  136070:	e50b100c 	str	r1, [fp, #-12]
  136074:	e50b2010 	str	r2, [fp, #-16]
  136078:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    /* Checks input parameters. */
    RT_ASSERT(handle);
  13607c:	e51b300c 	ldr	r3, [fp, #-12]
  136080:	e3530000 	cmp	r3, #0
  136084:	1a000005 	bne	1360a0 <ENET_Init+0x40>
  136088:	e3002103 	movw	r2, #259	; 0x103
  13608c:	e30a145c 	movw	r1, #42076	; 0xa45c
  136090:	e3401014 	movt	r1, #20
  136094:	e30a00ec 	movw	r0, #41196	; 0xa0ec
  136098:	e3400014 	movt	r0, #20
  13609c:	ebff353d 	bl	103598 <rt_assert_handler>
    RT_ASSERT(config);
  1360a0:	e51b3010 	ldr	r3, [fp, #-16]
  1360a4:	e3530000 	cmp	r3, #0
  1360a8:	1a000005 	bne	1360c4 <ENET_Init+0x64>
  1360ac:	e3a02f41 	mov	r2, #260	; 0x104
  1360b0:	e30a145c 	movw	r1, #42076	; 0xa45c
  1360b4:	e3401014 	movt	r1, #20
  1360b8:	e30a00e4 	movw	r0, #41188	; 0xa0e4
  1360bc:	e3400014 	movt	r0, #20
  1360c0:	ebff3534 	bl	103598 <rt_assert_handler>
    RT_ASSERT(bufferConfig);
  1360c4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1360c8:	e3530000 	cmp	r3, #0
  1360cc:	1a000005 	bne	1360e8 <ENET_Init+0x88>
  1360d0:	e3002105 	movw	r2, #261	; 0x105
  1360d4:	e30a145c 	movw	r1, #42076	; 0xa45c
  1360d8:	e3401014 	movt	r1, #20
  1360dc:	e30a00f4 	movw	r0, #41204	; 0xa0f4
  1360e0:	e3400014 	movt	r0, #20
  1360e4:	ebff352b 	bl	103598 <rt_assert_handler>
    RT_ASSERT(bufferConfig->rxBdStartAddrAlign);
  1360e8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1360ec:	e593300c 	ldr	r3, [r3, #12]
  1360f0:	e3530000 	cmp	r3, #0
  1360f4:	1a000005 	bne	136110 <ENET_Init+0xb0>
  1360f8:	e3002106 	movw	r2, #262	; 0x106
  1360fc:	e30a145c 	movw	r1, #42076	; 0xa45c
  136100:	e3401014 	movt	r1, #20
  136104:	e30a0104 	movw	r0, #41220	; 0xa104
  136108:	e3400014 	movt	r0, #20
  13610c:	ebff3521 	bl	103598 <rt_assert_handler>
    RT_ASSERT(bufferConfig->txBdStartAddrAlign);
  136110:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136114:	e5933010 	ldr	r3, [r3, #16]
  136118:	e3530000 	cmp	r3, #0
  13611c:	1a000005 	bne	136138 <ENET_Init+0xd8>
  136120:	e3002107 	movw	r2, #263	; 0x107
  136124:	e30a145c 	movw	r1, #42076	; 0xa45c
  136128:	e3401014 	movt	r1, #20
  13612c:	e30a0128 	movw	r0, #41256	; 0xa128
  136130:	e3400014 	movt	r0, #20
  136134:	ebff3517 	bl	103598 <rt_assert_handler>
    RT_ASSERT(bufferConfig->rxBufferAlign);
  136138:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13613c:	e5933014 	ldr	r3, [r3, #20]
  136140:	e3530000 	cmp	r3, #0
  136144:	1a000005 	bne	136160 <ENET_Init+0x100>
  136148:	e3a02f42 	mov	r2, #264	; 0x108
  13614c:	e30a145c 	movw	r1, #42076	; 0xa45c
  136150:	e3401014 	movt	r1, #20
  136154:	e30a014c 	movw	r0, #41292	; 0xa14c
  136158:	e3400014 	movt	r0, #20
  13615c:	ebff350d 	bl	103598 <rt_assert_handler>
    RT_ASSERT(bufferConfig->txBufferAlign);
  136160:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136164:	e5933018 	ldr	r3, [r3, #24]
  136168:	e3530000 	cmp	r3, #0
  13616c:	1a000005 	bne	136188 <ENET_Init+0x128>
  136170:	e3002109 	movw	r2, #265	; 0x109
  136174:	e30a145c 	movw	r1, #42076	; 0xa45c
  136178:	e3401014 	movt	r1, #20
  13617c:	e30a0168 	movw	r0, #41320	; 0xa168
  136180:	e3400014 	movt	r0, #20
  136184:	ebff3503 	bl	103598 <rt_assert_handler>
    RT_ASSERT(macAddr);
  136188:	e59b3004 	ldr	r3, [fp, #4]
  13618c:	e3530000 	cmp	r3, #0
  136190:	1a000005 	bne	1361ac <ENET_Init+0x14c>
  136194:	e300210a 	movw	r2, #266	; 0x10a
  136198:	e30a145c 	movw	r1, #42076	; 0xa45c
  13619c:	e3401014 	movt	r1, #20
  1361a0:	e30a0184 	movw	r0, #41348	; 0xa184
  1361a4:	e3400014 	movt	r0, #20
  1361a8:	ebff34fa 	bl	103598 <rt_assert_handler>
    RT_ASSERT(bufferConfig->rxBuffSizeAlign >= ENET_RX_MIN_BUFFERSIZE);
  1361ac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1361b0:	e5933004 	ldr	r3, [r3, #4]
  1361b4:	e35300ff 	cmp	r3, #255	; 0xff
  1361b8:	8a000005 	bhi	1361d4 <ENET_Init+0x174>
  1361bc:	e300210b 	movw	r2, #267	; 0x10b
  1361c0:	e30a145c 	movw	r1, #42076	; 0xa45c
  1361c4:	e3401014 	movt	r1, #20
  1361c8:	e30a018c 	movw	r0, #41356	; 0xa18c
  1361cc:	e3400014 	movt	r0, #20
  1361d0:	ebff34f0 	bl	103598 <rt_assert_handler>
    /* Make sure the buffers should be have the capability of process at least one maximum frame. */
    if (config->macSpecialConfig & kENET_ControlVLANTagEnable)
  1361d4:	e51b3010 	ldr	r3, [fp, #-16]
  1361d8:	e5933000 	ldr	r3, [r3]
  1361dc:	e2033c02 	and	r3, r3, #512	; 0x200
  1361e0:	e3530000 	cmp	r3, #0
  1361e4:	0a00000e 	beq	136224 <ENET_Init+0x1c4>
    {
        RT_ASSERT(bufferConfig->txBuffSizeAlign * bufferConfig->txBdNumber > (ENET_FRAME_MAX_FRAMELEN + ENET_FRAME_VLAN_TAGLEN));
  1361e8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1361ec:	e5933008 	ldr	r3, [r3, #8]
  1361f0:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1361f4:	e1d220b2 	ldrh	r2, [r2, #2]
  1361f8:	e0030392 	mul	r3, r2, r3
  1361fc:	e30025f2 	movw	r2, #1522	; 0x5f2
  136200:	e1530002 	cmp	r3, r2
  136204:	8a000023 	bhi	136298 <ENET_Init+0x238>
  136208:	e300210f 	movw	r2, #271	; 0x10f
  13620c:	e30a145c 	movw	r1, #42076	; 0xa45c
  136210:	e3401014 	movt	r1, #20
  136214:	e30a01c4 	movw	r0, #41412	; 0xa1c4
  136218:	e3400014 	movt	r0, #20
  13621c:	ebff34dd 	bl	103598 <rt_assert_handler>
  136220:	ea00001c 	b	136298 <ENET_Init+0x238>
    }
    else
    {
        RT_ASSERT(bufferConfig->txBuffSizeAlign * bufferConfig->txBdNumber > ENET_FRAME_MAX_FRAMELEN);
  136224:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136228:	e5933008 	ldr	r3, [r3, #8]
  13622c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  136230:	e1d220b2 	ldrh	r2, [r2, #2]
  136234:	e0030392 	mul	r3, r2, r3
  136238:	e30025ee 	movw	r2, #1518	; 0x5ee
  13623c:	e1530002 	cmp	r3, r2
  136240:	8a000005 	bhi	13625c <ENET_Init+0x1fc>
  136244:	e3002113 	movw	r2, #275	; 0x113
  136248:	e30a145c 	movw	r1, #42076	; 0xa45c
  13624c:	e3401014 	movt	r1, #20
  136250:	e30a0234 	movw	r0, #41524	; 0xa234
  136254:	e3400014 	movt	r0, #20
  136258:	ebff34ce 	bl	103598 <rt_assert_handler>
        RT_ASSERT(bufferConfig->rxBuffSizeAlign * bufferConfig->rxBdNumber > config->rxMaxFrameLen);
  13625c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136260:	e5933004 	ldr	r3, [r3, #4]
  136264:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  136268:	e1d220b0 	ldrh	r2, [r2]
  13626c:	e0030392 	mul	r3, r2, r3
  136270:	e51b2010 	ldr	r2, [fp, #-16]
  136274:	e1d220b8 	ldrh	r2, [r2, #8]
  136278:	e1530002 	cmp	r3, r2
  13627c:	8a000005 	bhi	136298 <ENET_Init+0x238>
  136280:	e3a02f45 	mov	r2, #276	; 0x114
  136284:	e30a145c 	movw	r1, #42076	; 0xa45c
  136288:	e3401014 	movt	r1, #20
  13628c:	e30a0288 	movw	r0, #41608	; 0xa288
  136290:	e3400014 	movt	r0, #20
  136294:	ebff34bf 	bl	103598 <rt_assert_handler>
    }

    /* Reset ENET module. */
    ENET_Reset(base);
  136298:	e51b0008 	ldr	r0, [fp, #-8]
  13629c:	ebfffee5 	bl	135e38 <ENET_Reset>
    /* Initializes the ENET transmit buffer descriptors. */
    ENET_SetTxBufferDescriptors(bufferConfig->txBdStartAddrAlign, bufferConfig->txPhyBufferAlign, bufferConfig->txBufferAlign, 
  1362a0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1362a4:	e5930010 	ldr	r0, [r3, #16]
  1362a8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1362ac:	e5931028 	ldr	r1, [r3, #40]	; 0x28
  1362b0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1362b4:	e5932018 	ldr	r2, [r3, #24]
  1362b8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1362bc:	e593c008 	ldr	ip, [r3, #8]
                                bufferConfig->txBuffSizeAlign, bufferConfig->txBdNumber);
  1362c0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1362c4:	e1d330b2 	ldrh	r3, [r3, #2]
    ENET_SetTxBufferDescriptors(bufferConfig->txBdStartAddrAlign, bufferConfig->txPhyBufferAlign, bufferConfig->txBufferAlign, 
  1362c8:	e58d3000 	str	r3, [sp]
  1362cc:	e1a0300c 	mov	r3, ip
  1362d0:	eb00018b 	bl	136904 <ENET_SetTxBufferDescriptors>
    /* Initializes the ENET receive buffer descriptors. */
    ENET_SetRxBufferDescriptors(bufferConfig->rxBdStartAddrAlign, bufferConfig->rxPhyBufferAlign, bufferConfig->rxBufferAlign, 
  1362d4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1362d8:	e593000c 	ldr	r0, [r3, #12]
  1362dc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1362e0:	e5931024 	ldr	r1, [r3, #36]	; 0x24
  1362e4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1362e8:	e5932014 	ldr	r2, [r3, #20]
  1362ec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1362f0:	e593c004 	ldr	ip, [r3, #4]
                                bufferConfig->rxBuffSizeAlign, bufferConfig->rxBdNumber,
  1362f4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1362f8:	e1d330b0 	ldrh	r3, [r3]
    ENET_SetRxBufferDescriptors(bufferConfig->rxBdStartAddrAlign, bufferConfig->rxPhyBufferAlign, bufferConfig->rxBufferAlign, 
  1362fc:	e1a0e003 	mov	lr, r3
                                !!(config->interrupt & (kENET_RxFrameInterrupt | kENET_RxBufferInterrupt)));
  136300:	e51b3010 	ldr	r3, [fp, #-16]
  136304:	e5933004 	ldr	r3, [r3, #4]
  136308:	e2033403 	and	r3, r3, #50331648	; 0x3000000
    ENET_SetRxBufferDescriptors(bufferConfig->rxBdStartAddrAlign, bufferConfig->rxPhyBufferAlign, bufferConfig->rxBufferAlign, 
  13630c:	e3530000 	cmp	r3, #0
  136310:	13a03001 	movne	r3, #1
  136314:	03a03000 	moveq	r3, #0
  136318:	e6ef3073 	uxtb	r3, r3
  13631c:	e58d3004 	str	r3, [sp, #4]
  136320:	e58de000 	str	lr, [sp]
  136324:	e1a0300c 	mov	r3, ip
  136328:	eb0001c7 	bl	136a4c <ENET_SetRxBufferDescriptors>
    /* Initializes the ENET MAC controller. */
    ENET_SetMacController(base, config, bufferConfig, macAddr, srcClock_Hz);
  13632c:	e59b3008 	ldr	r3, [fp, #8]
  136330:	e58d3000 	str	r3, [sp]
  136334:	e59b3004 	ldr	r3, [fp, #4]
  136338:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  13633c:	e51b1010 	ldr	r1, [fp, #-16]
  136340:	e51b0008 	ldr	r0, [fp, #-8]
  136344:	eb00005e 	bl	1364c4 <ENET_SetMacController>
    /* Set all buffers or data in handler for data transmit/receive process. */
    ENET_SetHandler(base, handle, config, bufferConfig);
  136348:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13634c:	e51b2010 	ldr	r2, [fp, #-16]
  136350:	e51b100c 	ldr	r1, [fp, #-12]
  136354:	e51b0008 	ldr	r0, [fp, #-8]
  136358:	eb00002a 	bl	136408 <ENET_SetHandler>
}
  13635c:	e320f000 	nop	{0}
  136360:	e24bd004 	sub	sp, fp, #4
  136364:	e8bd8800 	pop	{fp, pc}

00136368 <ENET_Deinit>:

void ENET_Deinit(ENET_Type *base)
{
  136368:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  13636c:	e28db000 	add	fp, sp, #0
  136370:	e24dd00c 	sub	sp, sp, #12
  136374:	e50b0008 	str	r0, [fp, #-8]
    /* Disable interrupt. */
    base->EIMR = 0;
  136378:	e51b3008 	ldr	r3, [fp, #-8]
  13637c:	e3a02000 	mov	r2, #0
  136380:	e5832008 	str	r2, [r3, #8]

    /* Disable ENET. */
    base->ECR &= ~ENET_ECR_ETHEREN_MASK;
  136384:	e51b3008 	ldr	r3, [fp, #-8]
  136388:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  13638c:	e3c32002 	bic	r2, r3, #2
  136390:	e51b3008 	ldr	r3, [fp, #-8]
  136394:	e5832024 	str	r2, [r3, #36]	; 0x24

}
  136398:	e320f000 	nop	{0}
  13639c:	e28bd000 	add	sp, fp, #0
  1363a0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1363a4:	e12fff1e 	bx	lr

001363a8 <ENET_SetCallback>:

void ENET_SetCallback(enet_handle_t *handle, enet_callback_t callback, void *userData)
{
  1363a8:	e92d4800 	push	{fp, lr}
  1363ac:	e28db004 	add	fp, sp, #4
  1363b0:	e24dd010 	sub	sp, sp, #16
  1363b4:	e50b0008 	str	r0, [fp, #-8]
  1363b8:	e50b100c 	str	r1, [fp, #-12]
  1363bc:	e50b2010 	str	r2, [fp, #-16]
    RT_ASSERT(handle);
  1363c0:	e51b3008 	ldr	r3, [fp, #-8]
  1363c4:	e3530000 	cmp	r3, #0
  1363c8:	1a000005 	bne	1363e4 <ENET_SetCallback+0x3c>
  1363cc:	e3002132 	movw	r2, #306	; 0x132
  1363d0:	e30a1468 	movw	r1, #42088	; 0xa468
  1363d4:	e3401014 	movt	r1, #20
  1363d8:	e30a00ec 	movw	r0, #41196	; 0xa0ec
  1363dc:	e3400014 	movt	r0, #20
  1363e0:	ebff346c 	bl	103598 <rt_assert_handler>

    /* Set callback and userData. */
    handle->callback = callback;
  1363e4:	e51b3008 	ldr	r3, [fp, #-8]
  1363e8:	e51b200c 	ldr	r2, [fp, #-12]
  1363ec:	e5832018 	str	r2, [r3, #24]
    handle->userData = userData;
  1363f0:	e51b3008 	ldr	r3, [fp, #-8]
  1363f4:	e51b2010 	ldr	r2, [fp, #-16]
  1363f8:	e583201c 	str	r2, [r3, #28]
}
  1363fc:	e320f000 	nop	{0}
  136400:	e24bd004 	sub	sp, fp, #4
  136404:	e8bd8800 	pop	{fp, pc}

00136408 <ENET_SetHandler>:

static void ENET_SetHandler(ENET_Type *base,
                            enet_handle_t *handle,
                            const enet_config_t *config,
                            const enet_buffer_config_t *bufferConfig)
{
  136408:	e92d4800 	push	{fp, lr}
  13640c:	e28db004 	add	fp, sp, #4
  136410:	e24dd018 	sub	sp, sp, #24
  136414:	e50b0010 	str	r0, [fp, #-16]
  136418:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  13641c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  136420:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    // struct rt_imx6ul_ethps *imx6ul_device = rt_container_of(config,struct rt_imx6ul_ethps,config);
    uint32_t instance = get_instance_by_base(base);
  136424:	e51b0010 	ldr	r0, [fp, #-16]
  136428:	ebfffc85 	bl	135644 <get_instance_by_base>
  13642c:	e1a03000 	mov	r3, r0
  136430:	e50b3008 	str	r3, [fp, #-8]
    memset(handle, 0, sizeof(enet_handle_t));
  136434:	e3a02020 	mov	r2, #32
  136438:	e3a01000 	mov	r1, #0
  13643c:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
  136440:	eb002c05 	bl	14145c <memset>
    handle->rxBdBase = bufferConfig->rxBdStartAddrAlign;
  136444:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  136448:	e593200c 	ldr	r2, [r3, #12]
  13644c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136450:	e5832000 	str	r2, [r3]
    handle->rxBdCurrent = bufferConfig->rxBdStartAddrAlign;
  136454:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  136458:	e593200c 	ldr	r2, [r3, #12]
  13645c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136460:	e5832004 	str	r2, [r3, #4]
    handle->txBdBase = bufferConfig->txBdStartAddrAlign;
  136464:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  136468:	e5932010 	ldr	r2, [r3, #16]
  13646c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136470:	e5832008 	str	r2, [r3, #8]
    handle->txBdCurrent = bufferConfig->txBdStartAddrAlign;
  136474:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  136478:	e5932010 	ldr	r2, [r3, #16]
  13647c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136480:	e583200c 	str	r2, [r3, #12]
    handle->rxBuffSizeAlign = bufferConfig->rxBuffSizeAlign;
  136484:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  136488:	e5932004 	ldr	r2, [r3, #4]
  13648c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136490:	e5832010 	str	r2, [r3, #16]
    handle->txBuffSizeAlign = bufferConfig->txBuffSizeAlign;
  136494:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  136498:	e5932008 	ldr	r2, [r3, #8]
  13649c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1364a0:	e5832014 	str	r2, [r3, #20]

    /* Save the handle pointer in the global variables. */
    s_ENETHandle[instance] = handle;
  1364a4:	e30f3bf8 	movw	r3, #64504	; 0xfbf8
  1364a8:	e3403014 	movt	r3, #20
  1364ac:	e51b2008 	ldr	r2, [fp, #-8]
  1364b0:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1364b4:	e7831102 	str	r1, [r3, r2, lsl #2]
    // if (config->interrupt & ENET_ERR_INTERRUPT)
    // {
    //     s_enetErrIsr = ENET_ErrorIRQHandler;
    //     EnableIRQ(imx6ul_device->irq_num);
    // }
}
  1364b8:	e320f000 	nop	{0}
  1364bc:	e24bd004 	sub	sp, fp, #4
  1364c0:	e8bd8800 	pop	{fp, pc}

001364c4 <ENET_SetMacController>:
static void ENET_SetMacController(ENET_Type *base,
                                  const enet_config_t *config,
                                  const enet_buffer_config_t *bufferConfig,
                                  uint8_t *macAddr,
                                  uint32_t srcClock_Hz)
{
  1364c4:	e92d4800 	push	{fp, lr}
  1364c8:	e28db004 	add	fp, sp, #4
  1364cc:	e24dd030 	sub	sp, sp, #48	; 0x30
  1364d0:	e50b0028 	str	r0, [fp, #-40]	; 0xffffffd8
  1364d4:	e50b102c 	str	r1, [fp, #-44]	; 0xffffffd4
  1364d8:	e50b2030 	str	r2, [fp, #-48]	; 0xffffffd0
  1364dc:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
    uint32_t rcr = 0;
  1364e0:	e3a03000 	mov	r3, #0
  1364e4:	e50b3008 	str	r3, [fp, #-8]
    uint32_t tcr = 0;
  1364e8:	e3a03000 	mov	r3, #0
  1364ec:	e50b3010 	str	r3, [fp, #-16]
    uint32_t ecr = 0;
  1364f0:	e3a03000 	mov	r3, #0
  1364f4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    uint32_t macSpecialConfig = config->macSpecialConfig;
  1364f8:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1364fc:	e5933000 	ldr	r3, [r3]
  136500:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    uint32_t maxFrameLen = config->rxMaxFrameLen;
  136504:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  136508:	e1d330b8 	ldrh	r3, [r3, #8]
  13650c:	e50b300c 	str	r3, [fp, #-12]

    /* Maximum frame length check. */
    if ((macSpecialConfig & kENET_ControlVLANTagEnable) && (maxFrameLen <= ENET_FRAME_MAX_FRAMELEN))
  136510:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136514:	e2033c02 	and	r3, r3, #512	; 0x200
  136518:	e3530000 	cmp	r3, #0
  13651c:	0a000005 	beq	136538 <ENET_SetMacController+0x74>
  136520:	e51b300c 	ldr	r3, [fp, #-12]
  136524:	e30025ee 	movw	r2, #1518	; 0x5ee
  136528:	e1530002 	cmp	r3, r2
  13652c:	8a000001 	bhi	136538 <ENET_SetMacController+0x74>
    {
        maxFrameLen = (ENET_FRAME_MAX_FRAMELEN + ENET_FRAME_VLAN_TAGLEN);
  136530:	e30035f2 	movw	r3, #1522	; 0x5f2
  136534:	e50b300c 	str	r3, [fp, #-12]
    }

    /* Configures MAC receive controller with user configure structure. */
    rcr = ENET_RCR_NLC(!!(macSpecialConfig & kENET_ControlRxPayloadCheckEnable)) |
  136538:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  13653c:	e1a03e83 	lsl	r3, r3, #29
  136540:	e2032101 	and	r2, r3, #1073741824	; 0x40000000
          ENET_RCR_CFEN(!!(macSpecialConfig & kENET_ControlFlowControlEnable)) |
  136544:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136548:	e1a03783 	lsl	r3, r3, #15
  13654c:	e6ff3073 	uxth	r3, r3
    rcr = ENET_RCR_NLC(!!(macSpecialConfig & kENET_ControlRxPayloadCheckEnable)) |
  136550:	e1822003 	orr	r2, r2, r3
          ENET_RCR_FCE(!!(macSpecialConfig & kENET_ControlFlowControlEnable)) |
  136554:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136558:	e1a03283 	lsl	r3, r3, #5
  13655c:	e2033020 	and	r3, r3, #32
          ENET_RCR_CFEN(!!(macSpecialConfig & kENET_ControlFlowControlEnable)) |
  136560:	e1822003 	orr	r2, r2, r3
          ENET_RCR_PADEN(!!(macSpecialConfig & kENET_ControlRxPadRemoveEnable)) |
  136564:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136568:	e1a03503 	lsl	r3, r3, #10
  13656c:	e2033a01 	and	r3, r3, #4096	; 0x1000
          ENET_RCR_FCE(!!(macSpecialConfig & kENET_ControlFlowControlEnable)) |
  136570:	e1822003 	orr	r2, r2, r3
          ENET_RCR_BC_REJ(!!(macSpecialConfig & kENET_ControlRxBroadCastRejectEnable)) |
  136574:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136578:	e1a03083 	lsl	r3, r3, #1
  13657c:	e2033010 	and	r3, r3, #16
          ENET_RCR_PADEN(!!(macSpecialConfig & kENET_ControlRxPadRemoveEnable)) |
  136580:	e1822003 	orr	r2, r2, r3
          ENET_RCR_PROM(!!(macSpecialConfig & kENET_ControlPromiscuousEnable)) | ENET_RCR_MII_MODE(1) |
  136584:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136588:	e1a03223 	lsr	r3, r3, #4
  13658c:	e2033008 	and	r3, r3, #8
          ENET_RCR_BC_REJ(!!(macSpecialConfig & kENET_ControlRxBroadCastRejectEnable)) |
  136590:	e1822003 	orr	r2, r2, r3
          ENET_RCR_RMII_MODE(config->miiMode) | ENET_RCR_RMII_10T(!config->miiSpeed) |
  136594:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  136598:	e593300c 	ldr	r3, [r3, #12]
  13659c:	e1a03403 	lsl	r3, r3, #8
  1365a0:	e2033c01 	and	r3, r3, #256	; 0x100
          ENET_RCR_PROM(!!(macSpecialConfig & kENET_ControlPromiscuousEnable)) | ENET_RCR_MII_MODE(1) |
  1365a4:	e1823003 	orr	r3, r2, r3
          ENET_RCR_RMII_MODE(config->miiMode) | ENET_RCR_RMII_10T(!config->miiSpeed) |
  1365a8:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  1365ac:	e5922010 	ldr	r2, [r2, #16]
  1365b0:	e3520000 	cmp	r2, #0
  1365b4:	1a000001 	bne	1365c0 <ENET_SetMacController+0xfc>
  1365b8:	e3a02c02 	mov	r2, #512	; 0x200
  1365bc:	ea000000 	b	1365c4 <ENET_SetMacController+0x100>
  1365c0:	e3a02000 	mov	r2, #0
  1365c4:	e1822003 	orr	r2, r2, r3
          ENET_RCR_MAX_FL(maxFrameLen) | ENET_RCR_CRCFWD(1);
  1365c8:	e51b300c 	ldr	r3, [fp, #-12]
  1365cc:	e1a01803 	lsl	r1, r3, #16
  1365d0:	e3a03000 	mov	r3, #0
  1365d4:	e3433fff 	movt	r3, #16383	; 0x3fff
  1365d8:	e0033001 	and	r3, r3, r1
          ENET_RCR_RMII_MODE(config->miiMode) | ENET_RCR_RMII_10T(!config->miiSpeed) |
  1365dc:	e1823003 	orr	r3, r2, r3
    rcr = ENET_RCR_NLC(!!(macSpecialConfig & kENET_ControlRxPayloadCheckEnable)) |
  1365e0:	e3833901 	orr	r3, r3, #16384	; 0x4000
  1365e4:	e3833004 	orr	r3, r3, #4
  1365e8:	e50b3008 	str	r3, [fp, #-8]
    /* Receive setting for half duplex. */
    if (config->miiDuplex == kENET_MiiHalfDuplex)
  1365ec:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1365f0:	e5933014 	ldr	r3, [r3, #20]
  1365f4:	e3530000 	cmp	r3, #0
  1365f8:	1a000002 	bne	136608 <ENET_SetMacController+0x144>
    {
        rcr |= ENET_RCR_DRT_MASK;
  1365fc:	e51b3008 	ldr	r3, [fp, #-8]
  136600:	e3833002 	orr	r3, r3, #2
  136604:	e50b3008 	str	r3, [fp, #-8]
    }
    /* Sets internal loop only for MII mode. */
    if ((config->macSpecialConfig & kENET_ControlMIILoopEnable) && (config->miiMode == kENET_MiiMode))
  136608:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  13660c:	e5933000 	ldr	r3, [r3]
  136610:	e2033c01 	and	r3, r3, #256	; 0x100
  136614:	e3530000 	cmp	r3, #0
  136618:	0a000009 	beq	136644 <ENET_SetMacController+0x180>
  13661c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  136620:	e593300c 	ldr	r3, [r3, #12]
  136624:	e3530000 	cmp	r3, #0
  136628:	1a000005 	bne	136644 <ENET_SetMacController+0x180>
    {
        rcr |= ENET_RCR_LOOP_MASK;
  13662c:	e51b3008 	ldr	r3, [fp, #-8]
  136630:	e3833001 	orr	r3, r3, #1
  136634:	e50b3008 	str	r3, [fp, #-8]
        rcr &= ~ENET_RCR_DRT_MASK;
  136638:	e51b3008 	ldr	r3, [fp, #-8]
  13663c:	e3c33002 	bic	r3, r3, #2
  136640:	e50b3008 	str	r3, [fp, #-8]
    }
    base->RCR = rcr;
  136644:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136648:	e51b2008 	ldr	r2, [fp, #-8]
  13664c:	e5832084 	str	r2, [r3, #132]	; 0x84

    /* Configures MAC transmit controller: duplex mode, mac address insertion. */
    tcr = base->TCR & ~(ENET_TCR_FDEN_MASK | ENET_TCR_ADDINS_MASK);
  136650:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136654:	e59330c4 	ldr	r3, [r3, #196]	; 0xc4
  136658:	e3c33f41 	bic	r3, r3, #260	; 0x104
  13665c:	e50b3010 	str	r3, [fp, #-16]
    tcr |= ENET_TCR_FDEN(config->miiDuplex) | ENET_TCR_ADDINS(!!(macSpecialConfig & kENET_ControlMacAddrInsert));
  136660:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  136664:	e5933014 	ldr	r3, [r3, #20]
  136668:	e1a03103 	lsl	r3, r3, #2
  13666c:	e2032004 	and	r2, r3, #4
  136670:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136674:	e1a03203 	lsl	r3, r3, #4
  136678:	e2033c01 	and	r3, r3, #256	; 0x100
  13667c:	e1823003 	orr	r3, r2, r3
  136680:	e51b2010 	ldr	r2, [fp, #-16]
  136684:	e1823003 	orr	r3, r2, r3
  136688:	e50b3010 	str	r3, [fp, #-16]
    base->TCR = tcr;
  13668c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136690:	e51b2010 	ldr	r2, [fp, #-16]
  136694:	e58320c4 	str	r2, [r3, #196]	; 0xc4

    /* Configures receive and transmit accelerator. */
    base->TACC = config->txAccelerConfig;
  136698:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  13669c:	e5d33019 	ldrb	r3, [r3, #25]
  1366a0:	e1a02003 	mov	r2, r3
  1366a4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1366a8:	e58321c0 	str	r2, [r3, #448]	; 0x1c0
    base->RACC = config->rxAccelerConfig;
  1366ac:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1366b0:	e5d33018 	ldrb	r3, [r3, #24]
  1366b4:	e1a02003 	mov	r2, r3
  1366b8:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1366bc:	e58321c4 	str	r2, [r3, #452]	; 0x1c4

    /* Sets the pause duration and FIFO threshold for the flow control enabled case. */
    if (macSpecialConfig & kENET_ControlFlowControlEnable)
  1366c0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1366c4:	e2033001 	and	r3, r3, #1
  1366c8:	e3530000 	cmp	r3, #0
  1366cc:	0a00000a 	beq	1366fc <ENET_SetMacController+0x238>
    {
        uint32_t reemReg;
        base->OPD = config->pauseDuration;
  1366d0:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1366d4:	e1d331ba 	ldrh	r3, [r3, #26]
  1366d8:	e1a02003 	mov	r2, r3
  1366dc:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1366e0:	e58320ec 	str	r2, [r3, #236]	; 0xec
        reemReg = ENET_RSEM_RX_SECTION_EMPTY(config->rxFifoEmptyThreshold);
  1366e4:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1366e8:	e5d3301c 	ldrb	r3, [r3, #28]
  1366ec:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
#if defined (FSL_FEATURE_ENET_HAS_RECEIVE_STATUS_THRESHOLD) && FSL_FEATURE_ENET_HAS_RECEIVE_STATUS_THRESHOLD
        reemReg |= ENET_RSEM_STAT_SECTION_EMPTY(config->rxFifoStatEmptyThreshold);
#endif /* FSL_FEATURE_ENET_HAS_RECEIVE_STATUS_THRESHOLD */
        base->RSEM = reemReg;
  1366f0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1366f4:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1366f8:	e5832194 	str	r2, [r3, #404]	; 0x194
    }

    /* FIFO threshold setting for store and forward enable/disable case. */
    if (macSpecialConfig & kENET_ControlStoreAndFwdDisable)
  1366fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136700:	e2033020 	and	r3, r3, #32
  136704:	e3530000 	cmp	r3, #0
  136708:	0a00000a 	beq	136738 <ENET_SetMacController+0x274>
    {
        /* Transmit fifo watermark settings. */
        base->TFWR = config->txFifoWatermark & ENET_TFWR_TFWR_MASK;
  13670c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  136710:	e5d3301e 	ldrb	r3, [r3, #30]
  136714:	e203203f 	and	r2, r3, #63	; 0x3f
  136718:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  13671c:	e5832144 	str	r2, [r3, #324]	; 0x144
        /* Receive fifo full threshold settings. */
        base->RSFL = config->rxFifoFullThreshold & ENET_RSFL_RX_SECTION_FULL_MASK;
  136720:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  136724:	e5d3301d 	ldrb	r3, [r3, #29]
  136728:	e1a02003 	mov	r2, r3
  13672c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136730:	e5832190 	str	r2, [r3, #400]	; 0x190
  136734:	ea000005 	b	136750 <ENET_SetMacController+0x28c>
    }
    else
    {
        /* Transmit fifo watermark settings. */
        base->TFWR = ENET_TFWR_STRFWD_MASK;
  136738:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  13673c:	e3a02c01 	mov	r2, #256	; 0x100
  136740:	e5832144 	str	r2, [r3, #324]	; 0x144
        base->RSFL = 0;
  136744:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136748:	e3a02000 	mov	r2, #0
  13674c:	e5832190 	str	r2, [r3, #400]	; 0x190
    }

    /* Enable store and forward when accelerator is enabled */
    if (config->txAccelerConfig & (kENET_TxAccelIpCheckEnabled | kENET_TxAccelProtoCheckEnabled))
  136750:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  136754:	e5d33019 	ldrb	r3, [r3, #25]
  136758:	e2033018 	and	r3, r3, #24
  13675c:	e3530000 	cmp	r3, #0
  136760:	0a000002 	beq	136770 <ENET_SetMacController+0x2ac>
    {
        base->TFWR = ENET_TFWR_STRFWD_MASK;
  136764:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136768:	e3a02c01 	mov	r2, #256	; 0x100
  13676c:	e5832144 	str	r2, [r3, #324]	; 0x144
    }
    if (config->rxAccelerConfig & (kENET_RxAccelIpCheckEnabled | kENET_RxAccelProtoCheckEnabled))
  136770:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  136774:	e5d33018 	ldrb	r3, [r3, #24]
  136778:	e2033006 	and	r3, r3, #6
  13677c:	e3530000 	cmp	r3, #0
  136780:	0a000002 	beq	136790 <ENET_SetMacController+0x2cc>
    {
        base->RSFL = 0;
  136784:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136788:	e3a02000 	mov	r2, #0
  13678c:	e5832190 	str	r2, [r3, #400]	; 0x190
    }

    /* Initializes transmit buffer descriptor rings start address, two start address should be aligned. */
    base->TDSR = (uint32_t)bufferConfig->txPhyBdStartAddrAlign;
  136790:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  136794:	e5933020 	ldr	r3, [r3, #32]
  136798:	e1a02003 	mov	r2, r3
  13679c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1367a0:	e5832184 	str	r2, [r3, #388]	; 0x184
    base->RDSR = (uint32_t)bufferConfig->rxPhyBdStartAddrAlign;
  1367a4:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1367a8:	e593301c 	ldr	r3, [r3, #28]
  1367ac:	e1a02003 	mov	r2, r3
  1367b0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1367b4:	e5832180 	str	r2, [r3, #384]	; 0x180

    /* Initializes the maximum buffer size, the buffer size should be aligned. */

    base->MRBR = ENET_MRBR_R_BUF_SIZE(bufferConfig->rxBuffSizeAlign);
  1367b8:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
  1367bc:	e5933004 	ldr	r3, [r3, #4]
  1367c0:	e1a02203 	lsl	r2, r3, #4
  1367c4:	e3033ff0 	movw	r3, #16368	; 0x3ff0
  1367c8:	e0033002 	and	r3, r3, r2
  1367cc:	e51b2028 	ldr	r2, [fp, #-40]	; 0xffffffd8
  1367d0:	e5823188 	str	r3, [r2, #392]	; 0x188

    /* Configures the Mac address. */
    ENET_SetMacAddr(base, macAddr);
  1367d4:	e51b1034 	ldr	r1, [fp, #-52]	; 0xffffffcc
  1367d8:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  1367dc:	eb00011e 	bl	136c5c <ENET_SetMacAddr>

    /* Initialize the SMI if uninitialized. */
    if (!ENET_GetSMI(base))
  1367e0:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  1367e4:	ebfffda0 	bl	135e6c <ENET_GetSMI>
  1367e8:	e1a03000 	mov	r3, r0
  1367ec:	e2233001 	eor	r3, r3, #1
  1367f0:	e6ef3073 	uxtb	r3, r3
  1367f4:	e3530000 	cmp	r3, #0
  1367f8:	0a00000a 	beq	136828 <ENET_SetMacController+0x364>
    {
        ENET_SetSMI(base, srcClock_Hz, !!(config->macSpecialConfig & kENET_ControlSMIPreambleDisable));
  1367fc:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  136800:	e5933000 	ldr	r3, [r3]
  136804:	e2033040 	and	r3, r3, #64	; 0x40
  136808:	e3530000 	cmp	r3, #0
  13680c:	13a03001 	movne	r3, #1
  136810:	03a03000 	moveq	r3, #0
  136814:	e6ef3073 	uxtb	r3, r3
  136818:	e1a02003 	mov	r2, r3
  13681c:	e59b1004 	ldr	r1, [fp, #4]
  136820:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  136824:	eb000171 	bl	136df0 <ENET_SetSMI>
    }
/* Enables Ethernet interrupt and NVIC. */
#if defined(FSL_FEATURE_ENET_HAS_INTERRUPT_COALESCE) && FSL_FEATURE_ENET_HAS_INTERRUPT_COALESCE
    if (config->intCoalesceCfg)
  136828:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  13682c:	e5933020 	ldr	r3, [r3, #32]
  136830:	e3530000 	cmp	r3, #0
  136834:	0a000020 	beq	1368bc <ENET_SetMacController+0x3f8>
    {
        uint32_t intMask = (ENET_EIMR_TXB_MASK | ENET_EIMR_RXB_MASK);
  136838:	e3a03405 	mov	r3, #83886080	; 0x5000000
  13683c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0

        /* Clear all buffer interrupts. */
        base->EIMR &= ~intMask;
  136840:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136844:	e5932008 	ldr	r2, [r3, #8]
  136848:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  13684c:	e1e03003 	mvn	r3, r3
  136850:	e0022003 	and	r2, r2, r3
  136854:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136858:	e5832008 	str	r2, [r3, #8]
        /* Set the interrupt coalescence. */
        base->TXIC = ENET_TXIC_ICFT(config->intCoalesceCfg->txCoalesceFrameCount[0]) |
  13685c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  136860:	e5933020 	ldr	r3, [r3, #32]
  136864:	e5d33000 	ldrb	r3, [r3]
  136868:	e1a03a03 	lsl	r3, r3, #20
  13686c:	e20336ff 	and	r3, r3, #267386880	; 0xff00000
                     config->intCoalesceCfg->txCoalesceTimeCount[0] | ENET_TXIC_ICCS_MASK | ENET_TXIC_ICEN_MASK;
  136870:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  136874:	e5922020 	ldr	r2, [r2, #32]
  136878:	e1d220b2 	ldrh	r2, [r2, #2]
        base->TXIC = ENET_TXIC_ICFT(config->intCoalesceCfg->txCoalesceFrameCount[0]) |
  13687c:	e1833002 	orr	r3, r3, r2
                     config->intCoalesceCfg->txCoalesceTimeCount[0] | ENET_TXIC_ICCS_MASK | ENET_TXIC_ICEN_MASK;
  136880:	e3832103 	orr	r2, r3, #-1073741824	; 0xc0000000
        base->TXIC = ENET_TXIC_ICFT(config->intCoalesceCfg->txCoalesceFrameCount[0]) |
  136884:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  136888:	e58320f0 	str	r2, [r3, #240]	; 0xf0
        base->RXIC = ENET_RXIC_ICFT(config->intCoalesceCfg->rxCoalesceFrameCount[0]) |
  13688c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  136890:	e5933020 	ldr	r3, [r3, #32]
  136894:	e5d33004 	ldrb	r3, [r3, #4]
  136898:	e1a03a03 	lsl	r3, r3, #20
  13689c:	e20336ff 	and	r3, r3, #267386880	; 0xff00000
                     config->intCoalesceCfg->rxCoalesceTimeCount[0] | ENET_RXIC_ICCS_MASK | ENET_RXIC_ICEN_MASK;
  1368a0:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
  1368a4:	e5922020 	ldr	r2, [r2, #32]
  1368a8:	e1d220b6 	ldrh	r2, [r2, #6]
        base->RXIC = ENET_RXIC_ICFT(config->intCoalesceCfg->rxCoalesceFrameCount[0]) |
  1368ac:	e1833002 	orr	r3, r3, r2
                     config->intCoalesceCfg->rxCoalesceTimeCount[0] | ENET_RXIC_ICCS_MASK | ENET_RXIC_ICEN_MASK;
  1368b0:	e3832103 	orr	r2, r3, #-1073741824	; 0xc0000000
        base->RXIC = ENET_RXIC_ICFT(config->intCoalesceCfg->rxCoalesceFrameCount[0]) |
  1368b4:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1368b8:	e5832100 	str	r2, [r3, #256]	; 0x100
    }
#endif /* FSL_FEATURE_ENET_HAS_INTERRUPT_COALESCE */
    ENET_EnableInterrupts(base, config->interrupt);
  1368bc:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
  1368c0:	e5933004 	ldr	r3, [r3, #4]
  1368c4:	e1a01003 	mov	r1, r3
  1368c8:	e51b0028 	ldr	r0, [fp, #-40]	; 0xffffffd8
  1368cc:	ebfffd8d 	bl	135f08 <ENET_EnableInterrupts>

    /* ENET control register setting. */
    ecr = base->ECR;
  1368d0:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1368d4:	e5933024 	ldr	r3, [r3, #36]	; 0x24
  1368d8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

    /* Enables Ethernet module after all configuration except the buffer descriptor active. */
    ecr |= ENET_ECR_ETHEREN_MASK | ENET_ECR_DBSWP_MASK;
  1368dc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1368e0:	e3833c01 	orr	r3, r3, #256	; 0x100
  1368e4:	e3833002 	orr	r3, r3, #2
  1368e8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    base->ECR = ecr;
  1368ec:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
  1368f0:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  1368f4:	e5832024 	str	r2, [r3, #36]	; 0x24
}
  1368f8:	e320f000 	nop	{0}
  1368fc:	e24bd004 	sub	sp, fp, #4
  136900:	e8bd8800 	pop	{fp, pc}

00136904 <ENET_SetTxBufferDescriptors>:
static void ENET_SetTxBufferDescriptors(volatile enet_tx_bd_struct_t *txBdStartAlign,
                                        uint8_t *txBuffStartAlign,
                                        uint8_t *txBuffStartAlign_vaddr,
                                        uint32_t txBuffSizeAlign,
                                        uint32_t txBdNumber)
{
  136904:	e92d4800 	push	{fp, lr}
  136908:	e28db004 	add	fp, sp, #4
  13690c:	e24dd018 	sub	sp, sp, #24
  136910:	e50b0010 	str	r0, [fp, #-16]
  136914:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  136918:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  13691c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(txBdStartAlign);
  136920:	e51b3010 	ldr	r3, [fp, #-16]
  136924:	e3530000 	cmp	r3, #0
  136928:	1a000005 	bne	136944 <ENET_SetTxBufferDescriptors+0x40>
  13692c:	e30021e2 	movw	r2, #482	; 0x1e2
  136930:	e30a147c 	movw	r1, #42108	; 0xa47c
  136934:	e3401014 	movt	r1, #20
  136938:	e30a02dc 	movw	r0, #41692	; 0xa2dc
  13693c:	e3400014 	movt	r0, #20
  136940:	ebff3314 	bl	103598 <rt_assert_handler>
    RT_ASSERT(txBuffStartAlign);
  136944:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136948:	e3530000 	cmp	r3, #0
  13694c:	1a000005 	bne	136968 <ENET_SetTxBufferDescriptors+0x64>
  136950:	e30021e3 	movw	r2, #483	; 0x1e3
  136954:	e30a147c 	movw	r1, #42108	; 0xa47c
  136958:	e3401014 	movt	r1, #20
  13695c:	e30a02ec 	movw	r0, #41708	; 0xa2ec
  136960:	e3400014 	movt	r0, #20
  136964:	ebff330b 	bl	103598 <rt_assert_handler>
    uint32_t count;
    volatile enet_tx_bd_struct_t *curBuffDescrip = txBdStartAlign;
  136968:	e51b3010 	ldr	r3, [fp, #-16]
  13696c:	e50b300c 	str	r3, [fp, #-12]
    for (count = 0; count < txBdNumber; count++)
  136970:	e3a03000 	mov	r3, #0
  136974:	e50b3008 	str	r3, [fp, #-8]
  136978:	ea00002c 	b	136a30 <ENET_SetTxBufferDescriptors+0x12c>
        /* Set data buffer address. */
        // curBuffDescrip->buffer = (uint8_t *)((uint32_t)&txBuffStartAlign[(-1) * count * txBuffSizeAlign]);
        // curBuffDescrip->buffer = (uint8_t *)ueth_v2p((void*)&txBuffStartAlign_vaddr[count * txBuffSizeAlign]);
        // curBuffDescrip->buffer_vaddr = (uint8_t *)((uint32_t)&txBuffStartAlign_vaddr[count * txBuffSizeAlign]);
        // buffer_vaddr_tx[count] = (uint8_t *)((void*)&txBuffStartAlign_vaddr[count * txBuffSizeAlign]);
        curBuffDescrip->buffer = (uint8_t *)ueth_v2p((void*)&txBuffStartAlign_vaddr[count * txBuffSizeAlign]);
  13697c:	e51b3008 	ldr	r3, [fp, #-8]
  136980:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  136984:	e0030392 	mul	r3, r2, r3
  136988:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  13698c:	e0823003 	add	r3, r2, r3
  136990:	e1a00003 	mov	r0, r3
  136994:	ebff3699 	bl	104400 <ueth_v2p>
  136998:	e1a02000 	mov	r2, r0
  13699c:	e51b300c 	ldr	r3, [fp, #-12]
  1369a0:	e5832004 	str	r2, [r3, #4]
        buffer_vaddr_tx[count] = (uint8_t *)ueth_remap(curBuffDescrip->buffer, UETH_REMAP_NOCACHE, txBuffSizeAlign);
  1369a4:	e51b300c 	ldr	r3, [fp, #-12]
  1369a8:	e5933004 	ldr	r3, [r3, #4]
  1369ac:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1369b0:	e3a01003 	mov	r1, #3
  1369b4:	e1a00003 	mov	r0, r3
  1369b8:	ebff36bd 	bl	1044b4 <ueth_remap>
  1369bc:	e1a01000 	mov	r1, r0
  1369c0:	e3063c80 	movw	r3, #27776	; 0x6c80
  1369c4:	e3403057 	movt	r3, #87	; 0x57
  1369c8:	e51b2008 	ldr	r2, [fp, #-8]
  1369cc:	e7831102 	str	r1, [r3, r2, lsl #2]
        /* Initializes data length. */
        curBuffDescrip->length = 0;
  1369d0:	e51b300c 	ldr	r3, [fp, #-12]
  1369d4:	e3a02000 	mov	r2, #0
  1369d8:	e1c320b0 	strh	r2, [r3]
        /* Sets the crc. */
        curBuffDescrip->control = (ENET_BUFFDESCRIPTOR_TX_TRANMITCRC_MASK);
  1369dc:	e51b300c 	ldr	r3, [fp, #-12]
  1369e0:	e3a02b01 	mov	r2, #1024	; 0x400
  1369e4:	e1c320b2 	strh	r2, [r3, #2]
        /* Sets the last buffer descriptor with the wrap flag. */
        if (count == txBdNumber - 1)
  1369e8:	e59b3004 	ldr	r3, [fp, #4]
  1369ec:	e2433001 	sub	r3, r3, #1
  1369f0:	e51b2008 	ldr	r2, [fp, #-8]
  1369f4:	e1520003 	cmp	r2, r3
  1369f8:	1a000006 	bne	136a18 <ENET_SetTxBufferDescriptors+0x114>
        {
            curBuffDescrip->control |= ENET_BUFFDESCRIPTOR_TX_WRAP_MASK;
  1369fc:	e51b300c 	ldr	r3, [fp, #-12]
  136a00:	e1d330b2 	ldrh	r3, [r3, #2]
  136a04:	e6ff3073 	uxth	r3, r3
  136a08:	e3833a02 	orr	r3, r3, #8192	; 0x2000
  136a0c:	e6ff2073 	uxth	r2, r3
  136a10:	e51b300c 	ldr	r3, [fp, #-12]
  136a14:	e1c320b2 	strh	r2, [r3, #2]

        /* Add cache clean operation. */
        // rt_hw_cpu_dcache_clean((void *)curBuffDescrip, sizeof(enet_tx_bd_struct_t));
        // ueth_dcache_clean((void *)curBuffDescrip, sizeof(enet_tx_bd_struct_t));
        /* Increase the index. */
        curBuffDescrip++;
  136a18:	e51b300c 	ldr	r3, [fp, #-12]
  136a1c:	e2833008 	add	r3, r3, #8
  136a20:	e50b300c 	str	r3, [fp, #-12]
    for (count = 0; count < txBdNumber; count++)
  136a24:	e51b3008 	ldr	r3, [fp, #-8]
  136a28:	e2833001 	add	r3, r3, #1
  136a2c:	e50b3008 	str	r3, [fp, #-8]
  136a30:	e51b2008 	ldr	r2, [fp, #-8]
  136a34:	e59b3004 	ldr	r3, [fp, #4]
  136a38:	e1520003 	cmp	r2, r3
  136a3c:	3affffce 	bcc	13697c <ENET_SetTxBufferDescriptors+0x78>
    }
}
  136a40:	e320f000 	nop	{0}
  136a44:	e24bd004 	sub	sp, fp, #4
  136a48:	e8bd8800 	pop	{fp, pc}

00136a4c <ENET_SetRxBufferDescriptors>:
                                        uint8_t *rxBuffStartAlign,
                                        uint8_t *rxBuffStartAlign_vaddr,
                                        uint32_t rxBuffSizeAlign,
                                        uint32_t rxBdNumber,
                                        bool enableInterrupt)
{
  136a4c:	e92d4800 	push	{fp, lr}
  136a50:	e28db004 	add	fp, sp, #4
  136a54:	e24dd018 	sub	sp, sp, #24
  136a58:	e50b0010 	str	r0, [fp, #-16]
  136a5c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  136a60:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  136a64:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(rxBdStartAlign);
  136a68:	e51b3010 	ldr	r3, [fp, #-16]
  136a6c:	e3530000 	cmp	r3, #0
  136a70:	1a000005 	bne	136a8c <ENET_SetRxBufferDescriptors+0x40>
  136a74:	e3002209 	movw	r2, #521	; 0x209
  136a78:	e30a1498 	movw	r1, #42136	; 0xa498
  136a7c:	e3401014 	movt	r1, #20
  136a80:	e30a0300 	movw	r0, #41728	; 0xa300
  136a84:	e3400014 	movt	r0, #20
  136a88:	ebff32c2 	bl	103598 <rt_assert_handler>
    RT_ASSERT(rxBuffStartAlign);
  136a8c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136a90:	e3530000 	cmp	r3, #0
  136a94:	1a000005 	bne	136ab0 <ENET_SetRxBufferDescriptors+0x64>
  136a98:	e300220a 	movw	r2, #522	; 0x20a
  136a9c:	e30a1498 	movw	r1, #42136	; 0xa498
  136aa0:	e3401014 	movt	r1, #20
  136aa4:	e30a0310 	movw	r0, #41744	; 0xa310
  136aa8:	e3400014 	movt	r0, #20
  136aac:	ebff32b9 	bl	103598 <rt_assert_handler>

    volatile enet_rx_bd_struct_t *curBuffDescrip = rxBdStartAlign;
  136ab0:	e51b3010 	ldr	r3, [fp, #-16]
  136ab4:	e50b3008 	str	r3, [fp, #-8]
    uint32_t count = 0;
  136ab8:	e3a03000 	mov	r3, #0
  136abc:	e50b300c 	str	r3, [fp, #-12]

    /* Initializes receive buffer descriptors. */
    for (count = 0; count < rxBdNumber; count++)
  136ac0:	e3a03000 	mov	r3, #0
  136ac4:	e50b300c 	str	r3, [fp, #-12]
  136ac8:	ea00002c 	b	136b80 <ENET_SetRxBufferDescriptors+0x134>
    {
        /* Set data buffer and the length. */
        // curBuffDescrip->buffer = (uint8_t *)((void *)&rxBuffStartAlign[(-1) * count * rxBuffSizeAlign]);
        curBuffDescrip->buffer = (uint8_t *)ueth_v2p((void*)&rxBuffStartAlign_vaddr[count * rxBuffSizeAlign]);
  136acc:	e51b300c 	ldr	r3, [fp, #-12]
  136ad0:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  136ad4:	e0030392 	mul	r3, r2, r3
  136ad8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  136adc:	e0823003 	add	r3, r2, r3
  136ae0:	e1a00003 	mov	r0, r3
  136ae4:	ebff3645 	bl	104400 <ueth_v2p>
  136ae8:	e1a02000 	mov	r2, r0
  136aec:	e51b3008 	ldr	r3, [fp, #-8]
  136af0:	e5832004 	str	r2, [r3, #4]
        // curBuffDescrip->buffer_vaddr = (uint8_t *)((void *)&rxBuffStartAlign_vaddr[count * rxBuffSizeAlign]);
        buffer_vaddr_rx[count] = (uint8_t *)ueth_remap(curBuffDescrip->buffer, UETH_REMAP_NOCACHE, rxBuffSizeAlign);
  136af4:	e51b3008 	ldr	r3, [fp, #-8]
  136af8:	e5933004 	ldr	r3, [r3, #4]
  136afc:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  136b00:	e3a01003 	mov	r1, #3
  136b04:	e1a00003 	mov	r0, r3
  136b08:	ebff3669 	bl	1044b4 <ueth_remap>
  136b0c:	e1a01000 	mov	r1, r0
  136b10:	e3063a80 	movw	r3, #27264	; 0x6a80
  136b14:	e3403057 	movt	r3, #87	; 0x57
  136b18:	e51b200c 	ldr	r2, [fp, #-12]
  136b1c:	e7831102 	str	r1, [r3, r2, lsl #2]
        curBuffDescrip->length = 0;
  136b20:	e51b3008 	ldr	r3, [fp, #-8]
  136b24:	e3a02000 	mov	r2, #0
  136b28:	e1c320b0 	strh	r2, [r3]
        /* Initializes the buffer descriptors with empty bit. */
        curBuffDescrip->control = ENET_BUFFDESCRIPTOR_RX_EMPTY_MASK;
  136b2c:	e51b3008 	ldr	r3, [fp, #-8]
  136b30:	e3a02902 	mov	r2, #32768	; 0x8000
  136b34:	e1c320b2 	strh	r2, [r3, #2]
        /* Sets the last buffer descriptor with the wrap flag. */
        if (count == rxBdNumber - 1)
  136b38:	e59b3004 	ldr	r3, [fp, #4]
  136b3c:	e2433001 	sub	r3, r3, #1
  136b40:	e51b200c 	ldr	r2, [fp, #-12]
  136b44:	e1520003 	cmp	r2, r3
  136b48:	1a000006 	bne	136b68 <ENET_SetRxBufferDescriptors+0x11c>
        {
            curBuffDescrip->control |= ENET_BUFFDESCRIPTOR_RX_WRAP_MASK;
  136b4c:	e51b3008 	ldr	r3, [fp, #-8]
  136b50:	e1d330b2 	ldrh	r3, [r3, #2]
  136b54:	e6ff3073 	uxth	r3, r3
  136b58:	e3833a02 	orr	r3, r3, #8192	; 0x2000
  136b5c:	e6ff2073 	uxth	r2, r3
  136b60:	e51b3008 	ldr	r3, [fp, #-8]
  136b64:	e1c320b2 	strh	r2, [r3, #2]
        
#ifdef ENET_ENHANCEDBUFFERDESCRIPTOR_MODE
        curBuffDescrip->controlExtend1 |= ENET_BUFFDESCRIPTOR_RX_INTERRUPT_MASK;
#endif

        curBuffDescrip++;
  136b68:	e51b3008 	ldr	r3, [fp, #-8]
  136b6c:	e2833008 	add	r3, r3, #8
  136b70:	e50b3008 	str	r3, [fp, #-8]
    for (count = 0; count < rxBdNumber; count++)
  136b74:	e51b300c 	ldr	r3, [fp, #-12]
  136b78:	e2833001 	add	r3, r3, #1
  136b7c:	e50b300c 	str	r3, [fp, #-12]
  136b80:	e51b200c 	ldr	r2, [fp, #-12]
  136b84:	e59b3004 	ldr	r3, [fp, #4]
  136b88:	e1520003 	cmp	r2, r3
  136b8c:	3affffce 	bcc	136acc <ENET_SetRxBufferDescriptors+0x80>

    }
}
  136b90:	e320f000 	nop	{0}
  136b94:	e24bd004 	sub	sp, fp, #4
  136b98:	e8bd8800 	pop	{fp, pc}

00136b9c <ENET_SetMII>:

void ENET_SetMII(ENET_Type *base, enet_mii_speed_t speed, enet_mii_duplex_t duplex)
{
  136b9c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  136ba0:	e28db000 	add	fp, sp, #0
  136ba4:	e24dd01c 	sub	sp, sp, #28
  136ba8:	e50b0010 	str	r0, [fp, #-16]
  136bac:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  136bb0:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    uint32_t rcr = base->RCR;
  136bb4:	e51b3010 	ldr	r3, [fp, #-16]
  136bb8:	e5933084 	ldr	r3, [r3, #132]	; 0x84
  136bbc:	e50b3008 	str	r3, [fp, #-8]
    uint32_t tcr = base->TCR;
  136bc0:	e51b3010 	ldr	r3, [fp, #-16]
  136bc4:	e59330c4 	ldr	r3, [r3, #196]	; 0xc4
  136bc8:	e50b300c 	str	r3, [fp, #-12]
    /* Sets speed mode. */
    if (kENET_MiiSpeed10M == speed)
  136bcc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136bd0:	e3530000 	cmp	r3, #0
  136bd4:	1a000003 	bne	136be8 <ENET_SetMII+0x4c>
    {
        rcr |= ENET_RCR_RMII_10T_MASK;
  136bd8:	e51b3008 	ldr	r3, [fp, #-8]
  136bdc:	e3833c02 	orr	r3, r3, #512	; 0x200
  136be0:	e50b3008 	str	r3, [fp, #-8]
  136be4:	ea000002 	b	136bf4 <ENET_SetMII+0x58>
    }
    else
    {
        rcr &= ~ENET_RCR_RMII_10T_MASK;
  136be8:	e51b3008 	ldr	r3, [fp, #-8]
  136bec:	e3c33c02 	bic	r3, r3, #512	; 0x200
  136bf0:	e50b3008 	str	r3, [fp, #-8]
    }
    /* Set duplex mode. */
    if (duplex == kENET_MiiHalfDuplex)
  136bf4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136bf8:	e3530000 	cmp	r3, #0
  136bfc:	1a000006 	bne	136c1c <ENET_SetMII+0x80>
    {
        rcr |= ENET_RCR_DRT_MASK;
  136c00:	e51b3008 	ldr	r3, [fp, #-8]
  136c04:	e3833002 	orr	r3, r3, #2
  136c08:	e50b3008 	str	r3, [fp, #-8]
        tcr &= ~ENET_TCR_FDEN_MASK;
  136c0c:	e51b300c 	ldr	r3, [fp, #-12]
  136c10:	e3c33004 	bic	r3, r3, #4
  136c14:	e50b300c 	str	r3, [fp, #-12]
  136c18:	ea000005 	b	136c34 <ENET_SetMII+0x98>
    }
    else
    {
        rcr &= ~ENET_RCR_DRT_MASK;
  136c1c:	e51b3008 	ldr	r3, [fp, #-8]
  136c20:	e3c33002 	bic	r3, r3, #2
  136c24:	e50b3008 	str	r3, [fp, #-8]
        tcr |= ENET_TCR_FDEN_MASK;
  136c28:	e51b300c 	ldr	r3, [fp, #-12]
  136c2c:	e3833004 	orr	r3, r3, #4
  136c30:	e50b300c 	str	r3, [fp, #-12]
    }

    base->RCR = rcr;
  136c34:	e51b3010 	ldr	r3, [fp, #-16]
  136c38:	e51b2008 	ldr	r2, [fp, #-8]
  136c3c:	e5832084 	str	r2, [r3, #132]	; 0x84
    base->TCR = tcr;
  136c40:	e51b3010 	ldr	r3, [fp, #-16]
  136c44:	e51b200c 	ldr	r2, [fp, #-12]
  136c48:	e58320c4 	str	r2, [r3, #196]	; 0xc4
}
  136c4c:	e320f000 	nop	{0}
  136c50:	e28bd000 	add	sp, fp, #0
  136c54:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  136c58:	e12fff1e 	bx	lr

00136c5c <ENET_SetMacAddr>:

void ENET_SetMacAddr(ENET_Type *base, uint8_t *macAddr)
{
  136c5c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  136c60:	e28db000 	add	fp, sp, #0
  136c64:	e24dd014 	sub	sp, sp, #20
  136c68:	e50b0010 	str	r0, [fp, #-16]
  136c6c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    uint32_t address;

    /* Set physical address lower register. */
    address = (uint32_t)(((uint32_t)macAddr[0] << 24U) | ((uint32_t)macAddr[1] << 16U) | ((uint32_t)macAddr[2] << 8U) |
  136c70:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136c74:	e5d33000 	ldrb	r3, [r3]
  136c78:	e1a02c03 	lsl	r2, r3, #24
  136c7c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136c80:	e2833001 	add	r3, r3, #1
  136c84:	e5d33000 	ldrb	r3, [r3]
  136c88:	e1a03803 	lsl	r3, r3, #16
  136c8c:	e1822003 	orr	r2, r2, r3
  136c90:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136c94:	e2833002 	add	r3, r3, #2
  136c98:	e5d33000 	ldrb	r3, [r3]
  136c9c:	e1a03403 	lsl	r3, r3, #8
  136ca0:	e1823003 	orr	r3, r2, r3
                         (uint32_t)macAddr[3]);
  136ca4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  136ca8:	e2822003 	add	r2, r2, #3
  136cac:	e5d22000 	ldrb	r2, [r2]
    address = (uint32_t)(((uint32_t)macAddr[0] << 24U) | ((uint32_t)macAddr[1] << 16U) | ((uint32_t)macAddr[2] << 8U) |
  136cb0:	e1833002 	orr	r3, r3, r2
  136cb4:	e50b3008 	str	r3, [fp, #-8]
    base->PALR = address;
  136cb8:	e51b3010 	ldr	r3, [fp, #-16]
  136cbc:	e51b2008 	ldr	r2, [fp, #-8]
  136cc0:	e58320e4 	str	r2, [r3, #228]	; 0xe4
    /* Set physical address high register. */
    address = (uint32_t)(((uint32_t)macAddr[4] << 8U) | ((uint32_t)macAddr[5]));
  136cc4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136cc8:	e2833004 	add	r3, r3, #4
  136ccc:	e5d33000 	ldrb	r3, [r3]
  136cd0:	e1a03403 	lsl	r3, r3, #8
  136cd4:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  136cd8:	e2822005 	add	r2, r2, #5
  136cdc:	e5d22000 	ldrb	r2, [r2]
  136ce0:	e1833002 	orr	r3, r3, r2
  136ce4:	e50b3008 	str	r3, [fp, #-8]
    base->PAUR = address << ENET_PAUR_PADDR2_SHIFT;
  136ce8:	e51b3008 	ldr	r3, [fp, #-8]
  136cec:	e1a02803 	lsl	r2, r3, #16
  136cf0:	e51b3010 	ldr	r3, [fp, #-16]
  136cf4:	e58320e8 	str	r2, [r3, #232]	; 0xe8
}
  136cf8:	e320f000 	nop	{0}
  136cfc:	e28bd000 	add	sp, fp, #0
  136d00:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  136d04:	e12fff1e 	bx	lr

00136d08 <ENET_GetMacAddr>:

void ENET_GetMacAddr(ENET_Type *base, uint8_t *macAddr)
{
  136d08:	e92d4800 	push	{fp, lr}
  136d0c:	e28db004 	add	fp, sp, #4
  136d10:	e24dd010 	sub	sp, sp, #16
  136d14:	e50b0010 	str	r0, [fp, #-16]
  136d18:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    RT_ASSERT(macAddr);
  136d1c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136d20:	e3530000 	cmp	r3, #0
  136d24:	1a000005 	bne	136d40 <ENET_GetMacAddr+0x38>
  136d28:	e3002259 	movw	r2, #601	; 0x259
  136d2c:	e30a14b4 	movw	r1, #42164	; 0xa4b4
  136d30:	e3401014 	movt	r1, #20
  136d34:	e30a0184 	movw	r0, #41348	; 0xa184
  136d38:	e3400014 	movt	r0, #20
  136d3c:	ebff3215 	bl	103598 <rt_assert_handler>

    uint32_t address;

    /* Get from physical address lower register. */
    address = base->PALR;
  136d40:	e51b3010 	ldr	r3, [fp, #-16]
  136d44:	e59330e4 	ldr	r3, [r3, #228]	; 0xe4
  136d48:	e50b3008 	str	r3, [fp, #-8]
    macAddr[0] = 0xFFU & (address >> 24U);
  136d4c:	e51b3008 	ldr	r3, [fp, #-8]
  136d50:	e1a03c23 	lsr	r3, r3, #24
  136d54:	e6ef2073 	uxtb	r2, r3
  136d58:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136d5c:	e5c32000 	strb	r2, [r3]
    macAddr[1] = 0xFFU & (address >> 16U);
  136d60:	e51b3008 	ldr	r3, [fp, #-8]
  136d64:	e1a02823 	lsr	r2, r3, #16
  136d68:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136d6c:	e2833001 	add	r3, r3, #1
  136d70:	e6ef2072 	uxtb	r2, r2
  136d74:	e5c32000 	strb	r2, [r3]
    macAddr[2] = 0xFFU & (address >> 8U);
  136d78:	e51b3008 	ldr	r3, [fp, #-8]
  136d7c:	e1a02423 	lsr	r2, r3, #8
  136d80:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136d84:	e2833002 	add	r3, r3, #2
  136d88:	e6ef2072 	uxtb	r2, r2
  136d8c:	e5c32000 	strb	r2, [r3]
    macAddr[3] = 0xFFU & address;
  136d90:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136d94:	e2833003 	add	r3, r3, #3
  136d98:	e51b2008 	ldr	r2, [fp, #-8]
  136d9c:	e6ef2072 	uxtb	r2, r2
  136da0:	e5c32000 	strb	r2, [r3]

    /* Get from physical address high register. */
    address = (base->PAUR & ENET_PAUR_PADDR2_MASK) >> ENET_PAUR_PADDR2_SHIFT;
  136da4:	e51b3010 	ldr	r3, [fp, #-16]
  136da8:	e59330e8 	ldr	r3, [r3, #232]	; 0xe8
  136dac:	e1a03823 	lsr	r3, r3, #16
  136db0:	e6ff3073 	uxth	r3, r3
  136db4:	e50b3008 	str	r3, [fp, #-8]
    macAddr[4] = 0xFFU & (address >> 8U);
  136db8:	e51b3008 	ldr	r3, [fp, #-8]
  136dbc:	e1a02423 	lsr	r2, r3, #8
  136dc0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136dc4:	e2833004 	add	r3, r3, #4
  136dc8:	e6ef2072 	uxtb	r2, r2
  136dcc:	e5c32000 	strb	r2, [r3]
    macAddr[5] = 0xFFU & address;
  136dd0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136dd4:	e2833005 	add	r3, r3, #5
  136dd8:	e51b2008 	ldr	r2, [fp, #-8]
  136ddc:	e6ef2072 	uxtb	r2, r2
  136de0:	e5c32000 	strb	r2, [r3]
}
  136de4:	e320f000 	nop	{0}
  136de8:	e24bd004 	sub	sp, fp, #4
  136dec:	e8bd8800 	pop	{fp, pc}

00136df0 <ENET_SetSMI>:

void ENET_SetSMI(ENET_Type *base, uint32_t srcClock_Hz, bool isPreambleDisabled)
{
  136df0:	e92d4810 	push	{r4, fp, lr}
  136df4:	e28db008 	add	fp, sp, #8
  136df8:	e24dd024 	sub	sp, sp, #36	; 0x24
  136dfc:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
  136e00:	e50b1024 	str	r1, [fp, #-36]	; 0xffffffdc
  136e04:	e1a03002 	mov	r3, r2
  136e08:	e54b3025 	strb	r3, [fp, #-37]	; 0xffffffdb
    RT_ASSERT(srcClock_Hz);
  136e0c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  136e10:	e3530000 	cmp	r3, #0
  136e14:	1a000005 	bne	136e30 <ENET_SetSMI+0x40>
  136e18:	e3a02f9b 	mov	r2, #620	; 0x26c
  136e1c:	e30a14c4 	movw	r1, #42180	; 0xa4c4
  136e20:	e3401014 	movt	r1, #20
  136e24:	e30a0324 	movw	r0, #41764	; 0xa324
  136e28:	e3400014 	movt	r0, #20
  136e2c:	ebff31d9 	bl	103598 <rt_assert_handler>

    uint32_t clkCycle = 0;
  136e30:	e3a03000 	mov	r3, #0
  136e34:	e50b3010 	str	r3, [fp, #-16]
    uint32_t speed = 0;
  136e38:	e3a03000 	mov	r3, #0
  136e3c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    uint32_t mscr = 0;
  136e40:	e3a03000 	mov	r3, #0
  136e44:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

    /* Calculate the MII speed which controls the frequency of the MDC. */
    speed = srcClock_Hz / (2 * ENET_MDC_FREQUENCY);
  136e48:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  136e4c:	e30c3a6b 	movw	r3, #51819	; 0xca6b
  136e50:	e3463b5f 	movt	r3, #27487	; 0x6b5f
  136e54:	e0832392 	umull	r2, r3, r2, r3
  136e58:	e1a03aa3 	lsr	r3, r3, #21
  136e5c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    /* Calculate the hold time on the MDIO output. */
    clkCycle = (10 + ENET_NANOSECOND_ONE_SECOND / srcClock_Hz - 1) / (ENET_NANOSECOND_ONE_SECOND / srcClock_Hz) - 1;
  136e60:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  136e64:	e3a00cca 	mov	r0, #51712	; 0xca00
  136e68:	e3430b9a 	movt	r0, #15258	; 0x3b9a
  136e6c:	eb0006fa 	bl	138a5c <__udivsi3>
  136e70:	e1a03000 	mov	r3, r0
  136e74:	e2834009 	add	r4, r3, #9
  136e78:	e51b1024 	ldr	r1, [fp, #-36]	; 0xffffffdc
  136e7c:	e3a00cca 	mov	r0, #51712	; 0xca00
  136e80:	e3430b9a 	movt	r0, #15258	; 0x3b9a
  136e84:	eb0006f4 	bl	138a5c <__udivsi3>
  136e88:	e1a03000 	mov	r3, r0
  136e8c:	e1a01003 	mov	r1, r3
  136e90:	e1a00004 	mov	r0, r4
  136e94:	eb0006f0 	bl	138a5c <__udivsi3>
  136e98:	e1a03000 	mov	r3, r0
  136e9c:	e2433001 	sub	r3, r3, #1
  136ea0:	e50b3010 	str	r3, [fp, #-16]
    /* Build the configuration for MDC/MDIO control. */
    mscr = ENET_MSCR_MII_SPEED(speed) | ENET_MSCR_DIS_PRE(isPreambleDisabled) | ENET_MSCR_HOLDTIME(clkCycle);
  136ea4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136ea8:	e1a03083 	lsl	r3, r3, #1
  136eac:	e203207e 	and	r2, r3, #126	; 0x7e
  136eb0:	e55b3025 	ldrb	r3, [fp, #-37]	; 0xffffffdb
  136eb4:	e1a03383 	lsl	r3, r3, #7
  136eb8:	e6ef3073 	uxtb	r3, r3
  136ebc:	e1822003 	orr	r2, r2, r3
  136ec0:	e51b3010 	ldr	r3, [fp, #-16]
  136ec4:	e1a03403 	lsl	r3, r3, #8
  136ec8:	e2033c07 	and	r3, r3, #1792	; 0x700
  136ecc:	e1823003 	orr	r3, r2, r3
  136ed0:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    base->MSCR = mscr;
  136ed4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  136ed8:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  136edc:	e5832044 	str	r2, [r3, #68]	; 0x44
}
  136ee0:	e320f000 	nop	{0}
  136ee4:	e24bd008 	sub	sp, fp, #8
  136ee8:	e8bd8810 	pop	{r4, fp, pc}

00136eec <ENET_StartSMIWrite>:

void ENET_StartSMIWrite(ENET_Type *base, uint32_t phyAddr, uint32_t phyReg, enet_mii_write_t operation, uint32_t data)
{
  136eec:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  136ef0:	e28db000 	add	fp, sp, #0
  136ef4:	e24dd01c 	sub	sp, sp, #28
  136ef8:	e50b0010 	str	r0, [fp, #-16]
  136efc:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  136f00:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  136f04:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    uint32_t mmfr = 0;
  136f08:	e3a03000 	mov	r3, #0
  136f0c:	e50b3008 	str	r3, [fp, #-8]

    /* Build MII write command. */
    mmfr = ENET_MMFR_ST(1) | ENET_MMFR_OP(operation) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(phyReg) | ENET_MMFR_TA(2) |
  136f10:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  136f14:	e1a03e03 	lsl	r3, r3, #28
  136f18:	e2032203 	and	r2, r3, #805306368	; 0x30000000
  136f1c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136f20:	e1a03b83 	lsl	r3, r3, #23
  136f24:	e203353e 	and	r3, r3, #260046848	; 0xf800000
  136f28:	e1822003 	orr	r2, r2, r3
  136f2c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136f30:	e1a03903 	lsl	r3, r3, #18
  136f34:	e203371f 	and	r3, r3, #8126464	; 0x7c0000
  136f38:	e1822003 	orr	r2, r2, r3
           (data & 0xFFFF);
  136f3c:	e59b3004 	ldr	r3, [fp, #4]
  136f40:	e6ff3073 	uxth	r3, r3
    mmfr = ENET_MMFR_ST(1) | ENET_MMFR_OP(operation) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(phyReg) | ENET_MMFR_TA(2) |
  136f44:	e1823003 	orr	r3, r2, r3
  136f48:	e3833101 	orr	r3, r3, #1073741824	; 0x40000000
  136f4c:	e3833802 	orr	r3, r3, #131072	; 0x20000
  136f50:	e50b3008 	str	r3, [fp, #-8]
    base->MMFR = mmfr;
  136f54:	e51b3010 	ldr	r3, [fp, #-16]
  136f58:	e51b2008 	ldr	r2, [fp, #-8]
  136f5c:	e5832040 	str	r2, [r3, #64]	; 0x40
}
  136f60:	e320f000 	nop	{0}
  136f64:	e28bd000 	add	sp, fp, #0
  136f68:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  136f6c:	e12fff1e 	bx	lr

00136f70 <ENET_StartSMIRead>:

void ENET_StartSMIRead(ENET_Type *base, uint32_t phyAddr, uint32_t phyReg, enet_mii_read_t operation)
{
  136f70:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  136f74:	e28db000 	add	fp, sp, #0
  136f78:	e24dd01c 	sub	sp, sp, #28
  136f7c:	e50b0010 	str	r0, [fp, #-16]
  136f80:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  136f84:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  136f88:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    uint32_t mmfr = 0;
  136f8c:	e3a03000 	mov	r3, #0
  136f90:	e50b3008 	str	r3, [fp, #-8]

    /* Build MII read command. */
    mmfr = ENET_MMFR_ST(1) | ENET_MMFR_OP(operation) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(phyReg) | ENET_MMFR_TA(2);
  136f94:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  136f98:	e1a03e03 	lsl	r3, r3, #28
  136f9c:	e2032203 	and	r2, r3, #805306368	; 0x30000000
  136fa0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  136fa4:	e1a03b83 	lsl	r3, r3, #23
  136fa8:	e203353e 	and	r3, r3, #260046848	; 0xf800000
  136fac:	e1822003 	orr	r2, r2, r3
  136fb0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  136fb4:	e1a03903 	lsl	r3, r3, #18
  136fb8:	e203371f 	and	r3, r3, #8126464	; 0x7c0000
  136fbc:	e1823003 	orr	r3, r2, r3
  136fc0:	e3833101 	orr	r3, r3, #1073741824	; 0x40000000
  136fc4:	e3833802 	orr	r3, r3, #131072	; 0x20000
  136fc8:	e50b3008 	str	r3, [fp, #-8]
    base->MMFR = mmfr;
  136fcc:	e51b3010 	ldr	r3, [fp, #-16]
  136fd0:	e51b2008 	ldr	r2, [fp, #-8]
  136fd4:	e5832040 	str	r2, [r3, #64]	; 0x40
}
  136fd8:	e320f000 	nop	{0}
  136fdc:	e28bd000 	add	sp, fp, #0
  136fe0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  136fe4:	e12fff1e 	bx	lr

00136fe8 <ENET_StartExtC45SMIWrite>:

#if defined(FSL_FEATURE_ENET_HAS_EXTEND_MDIO) && FSL_FEATURE_ENET_HAS_EXTEND_MDIO
void ENET_StartExtC45SMIWrite(ENET_Type *base, uint32_t phyAddr, uint32_t phyReg, uint32_t data)
{
  136fe8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  136fec:	e28db000 	add	fp, sp, #0
  136ff0:	e24dd01c 	sub	sp, sp, #28
  136ff4:	e50b0010 	str	r0, [fp, #-16]
  136ff8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  136ffc:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  137000:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    uint32_t mmfr = 0;
  137004:	e3a03000 	mov	r3, #0
  137008:	e50b3008 	str	r3, [fp, #-8]

    /* Parse the address from the input register. */
    uint16_t devAddr = (phyReg >> ENET_MMFR_TA_SHIFT) & 0x1FU;
  13700c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  137010:	e1a03823 	lsr	r3, r3, #16
  137014:	e6ff3073 	uxth	r3, r3
  137018:	e203301f 	and	r3, r3, #31
  13701c:	e14b30ba 	strh	r3, [fp, #-10]
    uint16_t regAddr = (uint16_t)(phyReg & 0xFFFFU);
  137020:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  137024:	e14b30bc 	strh	r3, [fp, #-12]

    /* Address write firstly. */
    mmfr = ENET_MMFR_ST(0) | ENET_MMFR_OP(kENET_MiiAddrWrite_C45) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(devAddr) |
  137028:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13702c:	e1a03b83 	lsl	r3, r3, #23
  137030:	e203253e 	and	r2, r3, #260046848	; 0xf800000
  137034:	e15b30ba 	ldrh	r3, [fp, #-10]
  137038:	e1a03903 	lsl	r3, r3, #18
  13703c:	e203371f 	and	r3, r3, #8126464	; 0x7c0000
  137040:	e1822003 	orr	r2, r2, r3
           ENET_MMFR_TA(2) | ENET_MMFR_DATA(regAddr);
  137044:	e15b30bc 	ldrh	r3, [fp, #-12]
  137048:	e1823003 	orr	r3, r2, r3
    mmfr = ENET_MMFR_ST(0) | ENET_MMFR_OP(kENET_MiiAddrWrite_C45) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(devAddr) |
  13704c:	e3833802 	orr	r3, r3, #131072	; 0x20000
  137050:	e50b3008 	str	r3, [fp, #-8]
    base->MMFR = mmfr;
  137054:	e51b3010 	ldr	r3, [fp, #-16]
  137058:	e51b2008 	ldr	r2, [fp, #-8]
  13705c:	e5832040 	str	r2, [r3, #64]	; 0x40

    /* Build MII write command. */
    mmfr = ENET_MMFR_ST(0) | ENET_MMFR_OP(kENET_MiiWriteFrame_C45) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(devAddr) |
  137060:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137064:	e1a03b83 	lsl	r3, r3, #23
  137068:	e203253e 	and	r2, r3, #260046848	; 0xf800000
  13706c:	e15b30ba 	ldrh	r3, [fp, #-10]
  137070:	e1a03903 	lsl	r3, r3, #18
  137074:	e203371f 	and	r3, r3, #8126464	; 0x7c0000
  137078:	e1822003 	orr	r2, r2, r3
           ENET_MMFR_TA(2) | ENET_MMFR_DATA(data);
  13707c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  137080:	e6ff3073 	uxth	r3, r3
  137084:	e1823003 	orr	r3, r2, r3
    mmfr = ENET_MMFR_ST(0) | ENET_MMFR_OP(kENET_MiiWriteFrame_C45) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(devAddr) |
  137088:	e3833201 	orr	r3, r3, #268435456	; 0x10000000
  13708c:	e3833802 	orr	r3, r3, #131072	; 0x20000
  137090:	e50b3008 	str	r3, [fp, #-8]
    base->MMFR = mmfr;
  137094:	e51b3010 	ldr	r3, [fp, #-16]
  137098:	e51b2008 	ldr	r2, [fp, #-8]
  13709c:	e5832040 	str	r2, [r3, #64]	; 0x40
}
  1370a0:	e320f000 	nop	{0}
  1370a4:	e28bd000 	add	sp, fp, #0
  1370a8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1370ac:	e12fff1e 	bx	lr

001370b0 <ENET_StartExtC45SMIRead>:

void ENET_StartExtC45SMIRead(ENET_Type *base, uint32_t phyAddr, uint32_t phyReg)
{
  1370b0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1370b4:	e28db000 	add	fp, sp, #0
  1370b8:	e24dd01c 	sub	sp, sp, #28
  1370bc:	e50b0010 	str	r0, [fp, #-16]
  1370c0:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1370c4:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    uint32_t mmfr = 0;
  1370c8:	e3a03000 	mov	r3, #0
  1370cc:	e50b3008 	str	r3, [fp, #-8]

    /* Parse the address from the input register. */
    uint16_t devAddr = (phyReg >> ENET_MMFR_TA_SHIFT) & 0x1FU;
  1370d0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1370d4:	e1a03823 	lsr	r3, r3, #16
  1370d8:	e6ff3073 	uxth	r3, r3
  1370dc:	e203301f 	and	r3, r3, #31
  1370e0:	e14b30ba 	strh	r3, [fp, #-10]
    uint16_t regAddr = (uint16_t)(phyReg & 0xFFFFU);
  1370e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1370e8:	e14b30bc 	strh	r3, [fp, #-12]

    /* Address write firstly. */
    mmfr = ENET_MMFR_ST(0) | ENET_MMFR_OP(kENET_MiiAddrWrite_C45) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(devAddr) |
  1370ec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1370f0:	e1a03b83 	lsl	r3, r3, #23
  1370f4:	e203253e 	and	r2, r3, #260046848	; 0xf800000
  1370f8:	e15b30ba 	ldrh	r3, [fp, #-10]
  1370fc:	e1a03903 	lsl	r3, r3, #18
  137100:	e203371f 	and	r3, r3, #8126464	; 0x7c0000
  137104:	e1822003 	orr	r2, r2, r3
           ENET_MMFR_TA(2) | ENET_MMFR_DATA(regAddr);
  137108:	e15b30bc 	ldrh	r3, [fp, #-12]
  13710c:	e1823003 	orr	r3, r2, r3
    mmfr = ENET_MMFR_ST(0) | ENET_MMFR_OP(kENET_MiiAddrWrite_C45) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(devAddr) |
  137110:	e3833802 	orr	r3, r3, #131072	; 0x20000
  137114:	e50b3008 	str	r3, [fp, #-8]
    base->MMFR = mmfr;
  137118:	e51b3010 	ldr	r3, [fp, #-16]
  13711c:	e51b2008 	ldr	r2, [fp, #-8]
  137120:	e5832040 	str	r2, [r3, #64]	; 0x40

    /* Build MII read command. */
    mmfr = ENET_MMFR_ST(0) | ENET_MMFR_OP(kENET_MiiReadFrame_C45) | ENET_MMFR_PA(phyAddr) | ENET_MMFR_RA(devAddr) |
  137124:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137128:	e1a03b83 	lsl	r3, r3, #23
  13712c:	e203253e 	and	r2, r3, #260046848	; 0xf800000
  137130:	e15b30ba 	ldrh	r3, [fp, #-10]
  137134:	e1a03903 	lsl	r3, r3, #18
  137138:	e203371f 	and	r3, r3, #8126464	; 0x7c0000
  13713c:	e1823003 	orr	r3, r2, r3
  137140:	e3833203 	orr	r3, r3, #805306368	; 0x30000000
  137144:	e3833802 	orr	r3, r3, #131072	; 0x20000
  137148:	e50b3008 	str	r3, [fp, #-8]
           ENET_MMFR_TA(2);
    base->MMFR = mmfr;
  13714c:	e51b3010 	ldr	r3, [fp, #-16]
  137150:	e51b2008 	ldr	r2, [fp, #-8]
  137154:	e5832040 	str	r2, [r3, #64]	; 0x40
}
  137158:	e320f000 	nop	{0}
  13715c:	e28bd000 	add	sp, fp, #0
  137160:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  137164:	e12fff1e 	bx	lr

00137168 <ENET_GetRxErrBeforeReadFrame>:
#endif /* FSL_FEATURE_ENET_HAS_EXTEND_MDIO */

void ENET_GetRxErrBeforeReadFrame(enet_handle_t *handle, enet_data_error_stats_t *eErrorStatic)
{
  137168:	e92d4800 	push	{fp, lr}
  13716c:	e28db004 	add	fp, sp, #4
  137170:	e24dd010 	sub	sp, sp, #16
  137174:	e50b0010 	str	r0, [fp, #-16]
  137178:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
    RT_ASSERT(handle);
  13717c:	e51b3010 	ldr	r3, [fp, #-16]
  137180:	e3530000 	cmp	r3, #0
  137184:	1a000005 	bne	1371a0 <ENET_GetRxErrBeforeReadFrame+0x38>
  137188:	e3a02fae 	mov	r2, #696	; 0x2b8
  13718c:	e30a14d0 	movw	r1, #42192	; 0xa4d0
  137190:	e3401014 	movt	r1, #20
  137194:	e30a00ec 	movw	r0, #41196	; 0xa0ec
  137198:	e3400014 	movt	r0, #20
  13719c:	ebff30fd 	bl	103598 <rt_assert_handler>
    RT_ASSERT(handle->rxBdCurrent);
  1371a0:	e51b3010 	ldr	r3, [fp, #-16]
  1371a4:	e5933004 	ldr	r3, [r3, #4]
  1371a8:	e3530000 	cmp	r3, #0
  1371ac:	1a000005 	bne	1371c8 <ENET_GetRxErrBeforeReadFrame+0x60>
  1371b0:	e30022b9 	movw	r2, #697	; 0x2b9
  1371b4:	e30a14d0 	movw	r1, #42192	; 0xa4d0
  1371b8:	e3401014 	movt	r1, #20
  1371bc:	e30a0330 	movw	r0, #41776	; 0xa330
  1371c0:	e3400014 	movt	r0, #20
  1371c4:	ebff30f3 	bl	103598 <rt_assert_handler>
    RT_ASSERT(eErrorStatic);
  1371c8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1371cc:	e3530000 	cmp	r3, #0
  1371d0:	1a000005 	bne	1371ec <ENET_GetRxErrBeforeReadFrame+0x84>
  1371d4:	e30022ba 	movw	r2, #698	; 0x2ba
  1371d8:	e30a14d0 	movw	r1, #42192	; 0xa4d0
  1371dc:	e3401014 	movt	r1, #20
  1371e0:	e30a0344 	movw	r0, #41796	; 0xa344
  1371e4:	e3400014 	movt	r0, #20
  1371e8:	ebff30ea 	bl	103598 <rt_assert_handler>

    uint16_t control = 0;
  1371ec:	e3a03000 	mov	r3, #0
  1371f0:	e14b30ba 	strh	r3, [fp, #-10]
    volatile enet_rx_bd_struct_t *curBuffDescrip = handle->rxBdCurrent;
  1371f4:	e51b3010 	ldr	r3, [fp, #-16]
  1371f8:	e5933004 	ldr	r3, [r3, #4]
  1371fc:	e50b3008 	str	r3, [fp, #-8]
        /* Add the cache invalidate maintain. */
        // rt_hw_cpu_dcache_invalidate((void *)curBuffDescrip, sizeof(enet_rx_bd_struct_t));
        // ueth_dcache_invalid((void *)curBuffDescrip, sizeof(enet_rx_bd_struct_t));

        /* The last buffer descriptor of a frame. */
        if (curBuffDescrip->control & ENET_BUFFDESCRIPTOR_RX_LAST_MASK)
  137200:	e51b3008 	ldr	r3, [fp, #-8]
  137204:	e1d330b2 	ldrh	r3, [r3, #2]
  137208:	e6ff3073 	uxth	r3, r3
  13720c:	e2033b02 	and	r3, r3, #2048	; 0x800
  137210:	e3530000 	cmp	r3, #0
  137214:	0a000030 	beq	1372dc <ENET_GetRxErrBeforeReadFrame+0x174>
        {
            control = curBuffDescrip->control;
  137218:	e51b3008 	ldr	r3, [fp, #-8]
  13721c:	e1d330b2 	ldrh	r3, [r3, #2]
  137220:	e14b30ba 	strh	r3, [fp, #-10]
            if (control & ENET_BUFFDESCRIPTOR_RX_TRUNC_MASK)
  137224:	e15b30ba 	ldrh	r3, [fp, #-10]
  137228:	e2033001 	and	r3, r3, #1
  13722c:	e3530000 	cmp	r3, #0
  137230:	0a000004 	beq	137248 <ENET_GetRxErrBeforeReadFrame+0xe0>
            {
                /* The receive truncate error. */
                eErrorStatic->statsRxTruncateErr++;
  137234:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137238:	e5933010 	ldr	r3, [r3, #16]
  13723c:	e2832001 	add	r2, r3, #1
  137240:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137244:	e5832010 	str	r2, [r3, #16]
            }
            if (control & ENET_BUFFDESCRIPTOR_RX_OVERRUN_MASK)
  137248:	e15b30ba 	ldrh	r3, [fp, #-10]
  13724c:	e2033002 	and	r3, r3, #2
  137250:	e3530000 	cmp	r3, #0
  137254:	0a000004 	beq	13726c <ENET_GetRxErrBeforeReadFrame+0x104>
            {
                /* The receive over run error. */
                eErrorStatic->statsRxOverRunErr++;
  137258:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13725c:	e593300c 	ldr	r3, [r3, #12]
  137260:	e2832001 	add	r2, r3, #1
  137264:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137268:	e583200c 	str	r2, [r3, #12]
            }
            if (control & ENET_BUFFDESCRIPTOR_RX_LENVLIOLATE_MASK)
  13726c:	e15b30ba 	ldrh	r3, [fp, #-10]
  137270:	e2033020 	and	r3, r3, #32
  137274:	e3530000 	cmp	r3, #0
  137278:	0a000004 	beq	137290 <ENET_GetRxErrBeforeReadFrame+0x128>
            {
                /* The receive length violation error. */
                eErrorStatic->statsRxLenGreaterErr++;
  13727c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137280:	e5933000 	ldr	r3, [r3]
  137284:	e2832001 	add	r2, r3, #1
  137288:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13728c:	e5832000 	str	r2, [r3]
            }
            if (control & ENET_BUFFDESCRIPTOR_RX_NOOCTET_MASK)
  137290:	e15b30ba 	ldrh	r3, [fp, #-10]
  137294:	e2033010 	and	r3, r3, #16
  137298:	e3530000 	cmp	r3, #0
  13729c:	0a000004 	beq	1372b4 <ENET_GetRxErrBeforeReadFrame+0x14c>
            {
                /* The receive alignment error. */
                eErrorStatic->statsRxAlignErr++;
  1372a0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1372a4:	e5933004 	ldr	r3, [r3, #4]
  1372a8:	e2832001 	add	r2, r3, #1
  1372ac:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1372b0:	e5832004 	str	r2, [r3, #4]
            }
            if (control & ENET_BUFFDESCRIPTOR_RX_CRC_MASK)
  1372b4:	e15b30ba 	ldrh	r3, [fp, #-10]
  1372b8:	e2033004 	and	r3, r3, #4
  1372bc:	e3530000 	cmp	r3, #0
  1372c0:	0a000018 	beq	137328 <ENET_GetRxErrBeforeReadFrame+0x1c0>
            {
                /* The receive CRC error. */
                eErrorStatic->statsRxFcsErr++;
  1372c4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1372c8:	e5933008 	ldr	r3, [r3, #8]
  1372cc:	e2832001 	add	r2, r3, #1
  1372d0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1372d4:	e5832008 	str	r2, [r3, #8]
            }
            break;
  1372d8:	ea000012 	b	137328 <ENET_GetRxErrBeforeReadFrame+0x1c0>
        }

        /* Increase the buffer descriptor, if it is the last one, increase to first one of the ring buffer. */
        if (curBuffDescrip->control & ENET_BUFFDESCRIPTOR_RX_WRAP_MASK)
  1372dc:	e51b3008 	ldr	r3, [fp, #-8]
  1372e0:	e1d330b2 	ldrh	r3, [r3, #2]
  1372e4:	e6ff3073 	uxth	r3, r3
  1372e8:	e2033a02 	and	r3, r3, #8192	; 0x2000
  1372ec:	e3530000 	cmp	r3, #0
  1372f0:	0a000003 	beq	137304 <ENET_GetRxErrBeforeReadFrame+0x19c>
        {
            curBuffDescrip = handle->rxBdBase;
  1372f4:	e51b3010 	ldr	r3, [fp, #-16]
  1372f8:	e5933000 	ldr	r3, [r3]
  1372fc:	e50b3008 	str	r3, [fp, #-8]
  137300:	ea000002 	b	137310 <ENET_GetRxErrBeforeReadFrame+0x1a8>
        }
        else
        {
            curBuffDescrip++;
  137304:	e51b3008 	ldr	r3, [fp, #-8]
  137308:	e2833008 	add	r3, r3, #8
  13730c:	e50b3008 	str	r3, [fp, #-8]
        }

    } while (curBuffDescrip != handle->rxBdCurrent);
  137310:	e51b3010 	ldr	r3, [fp, #-16]
  137314:	e5933004 	ldr	r3, [r3, #4]
  137318:	e51b2008 	ldr	r2, [fp, #-8]
  13731c:	e1520003 	cmp	r2, r3
  137320:	1affffb6 	bne	137200 <ENET_GetRxErrBeforeReadFrame+0x98>
}
  137324:	ea000000 	b	13732c <ENET_GetRxErrBeforeReadFrame+0x1c4>
            break;
  137328:	e320f000 	nop	{0}
}
  13732c:	e320f000 	nop	{0}
  137330:	e24bd004 	sub	sp, fp, #4
  137334:	e8bd8800 	pop	{fp, pc}

00137338 <ENET_ReadFrame>:

status_t ENET_ReadFrame(ENET_Type *base,enet_handle_t *handle,const enet_config_t *config,uint8_t *data,uint16_t *length)
{
  137338:	e92d4800 	push	{fp, lr}
  13733c:	e28db004 	add	fp, sp, #4
  137340:	e24dd018 	sub	sp, sp, #24
  137344:	e50b0010 	str	r0, [fp, #-16]
  137348:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  13734c:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  137350:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(handle);
  137354:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137358:	e3530000 	cmp	r3, #0
  13735c:	1a000005 	bne	137378 <ENET_ReadFrame+0x40>
  137360:	e3a02fbd 	mov	r2, #756	; 0x2f4
  137364:	e30a14f0 	movw	r1, #42224	; 0xa4f0
  137368:	e3401014 	movt	r1, #20
  13736c:	e30a00ec 	movw	r0, #41196	; 0xa0ec
  137370:	e3400014 	movt	r0, #20
  137374:	ebff3087 	bl	103598 <rt_assert_handler>
    RT_ASSERT(handle->rxBdCurrent);
  137378:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13737c:	e5933004 	ldr	r3, [r3, #4]
  137380:	e3530000 	cmp	r3, #0
  137384:	1a000005 	bne	1373a0 <ENET_ReadFrame+0x68>
  137388:	e30022f5 	movw	r2, #757	; 0x2f5
  13738c:	e30a14f0 	movw	r1, #42224	; 0xa4f0
  137390:	e3401014 	movt	r1, #20
  137394:	e30a0330 	movw	r0, #41776	; 0xa330
  137398:	e3400014 	movt	r0, #20
  13739c:	ebff307d 	bl	103598 <rt_assert_handler>
    RT_ASSERT(length);
  1373a0:	e59b3004 	ldr	r3, [fp, #4]
  1373a4:	e3530000 	cmp	r3, #0
  1373a8:	1a000005 	bne	1373c4 <ENET_ReadFrame+0x8c>
  1373ac:	e30022f6 	movw	r2, #758	; 0x2f6
  1373b0:	e30a14f0 	movw	r1, #42224	; 0xa4f0
  1373b4:	e3401014 	movt	r1, #20
  1373b8:	e30a0354 	movw	r0, #41812	; 0xa354
  1373bc:	e3400014 	movt	r0, #20
  1373c0:	ebff3074 	bl	103598 <rt_assert_handler>

    /* Reset the length to zero. */
    *length = 0;
  1373c4:	e59b3004 	ldr	r3, [fp, #4]
  1373c8:	e3a02000 	mov	r2, #0
  1373cc:	e1c320b0 	strh	r2, [r3]

    uint16_t validLastMask = ENET_BUFFDESCRIPTOR_RX_LAST_MASK | ENET_BUFFDESCRIPTOR_RX_EMPTY_MASK;
  1373d0:	e3a03b22 	mov	r3, #34816	; 0x8800
  1373d4:	e14b30b6 	strh	r3, [fp, #-6]
    volatile enet_rx_bd_struct_t *curBuffDescrip = handle->rxBdCurrent;
  1373d8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1373dc:	e5933004 	ldr	r3, [r3, #4]
  1373e0:	e50b300c 	str	r3, [fp, #-12]

    // rt_hw_cpu_dcache_invalidate((void *)physical_to_virtual(curBuffDescrip->buffer), handle->rxBuffSizeAlign);
    // ueth_dcache_invalid((void *)(curBuffDescrip->buffer_vaddr), handle->rxBuffSizeAlign);
    /* Check the current buffer descriptor's empty flag.  if empty means there is no frame received. */
    if (curBuffDescrip->control & ENET_BUFFDESCRIPTOR_RX_EMPTY_MASK)
  1373e4:	e51b300c 	ldr	r3, [fp, #-12]
  1373e8:	e1d330b2 	ldrh	r3, [r3, #2]
  1373ec:	e6ff3073 	uxth	r3, r3
  1373f0:	e6bf3073 	sxth	r3, r3
  1373f4:	e3530000 	cmp	r3, #0
  1373f8:	aa000001 	bge	137404 <ENET_ReadFrame+0xcc>
    {
        return kStatus_ENET_RxFrameEmpty;
  1373fc:	e3003fa2 	movw	r3, #4002	; 0xfa2
  137400:	ea00005c 	b	137578 <ENET_ReadFrame+0x240>
    }
    else
    {
        if ((curBuffDescrip->control & validLastMask) == ENET_BUFFDESCRIPTOR_RX_LAST_MASK)
  137404:	e51b300c 	ldr	r3, [fp, #-12]
  137408:	e1d330b2 	ldrh	r3, [r3, #2]
  13740c:	e6ff2073 	uxth	r2, r3
  137410:	e15b30b6 	ldrh	r3, [fp, #-6]
  137414:	e0033002 	and	r3, r3, r2
  137418:	e6ff3073 	uxth	r3, r3
  13741c:	e3530b02 	cmp	r3, #2048	; 0x800
  137420:	1a00003a 	bne	137510 <ENET_ReadFrame+0x1d8>
        {
            if(curBuffDescrip->length <= config->rxMaxFrameLen)
  137424:	e51b300c 	ldr	r3, [fp, #-12]
  137428:	e1d330b0 	ldrh	r3, [r3]
  13742c:	e6ff2073 	uxth	r2, r3
  137430:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  137434:	e1d330b8 	ldrh	r3, [r3, #8]
  137438:	e1520003 	cmp	r2, r3
  13743c:	8a000018 	bhi	1374a4 <ENET_ReadFrame+0x16c>
            {
                *length = curBuffDescrip->length;
  137440:	e51b300c 	ldr	r3, [fp, #-12]
  137444:	e1d330b0 	ldrh	r3, [r3]
  137448:	e6ff2073 	uxth	r2, r3
  13744c:	e59b3004 	ldr	r3, [fp, #4]
  137450:	e1c320b0 	strh	r2, [r3]
                rt_memcpy(data, buffer_vaddr_rx[curBuffDescrip - handle->rxBdBase], curBuffDescrip->length);
  137454:	e51b300c 	ldr	r3, [fp, #-12]
  137458:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  13745c:	e5922000 	ldr	r2, [r2]
  137460:	e0433002 	sub	r3, r3, r2
  137464:	e1a031c3 	asr	r3, r3, #3
  137468:	e1a02003 	mov	r2, r3
  13746c:	e3063a80 	movw	r3, #27264	; 0x6a80
  137470:	e3403057 	movt	r3, #87	; 0x57
  137474:	e7931102 	ldr	r1, [r3, r2, lsl #2]
  137478:	e51b300c 	ldr	r3, [fp, #-12]
  13747c:	e1d330b0 	ldrh	r3, [r3]
  137480:	e6ff3073 	uxth	r3, r3
  137484:	e1a02003 	mov	r2, r3
  137488:	e51b001c 	ldr	r0, [fp, #-28]	; 0xffffffe4
  13748c:	ebff2f9b 	bl	103300 <rt_memcpy>
                /* Updates the receive buffer descriptors. */
                ENET_UpdateReadBuffers(base, handle);
  137490:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  137494:	e51b0010 	ldr	r0, [fp, #-16]
  137498:	eb000039 	bl	137584 <ENET_UpdateReadBuffers>
                return kStatus_Success;
  13749c:	e3a03000 	mov	r3, #0
  1374a0:	ea000034 	b	137578 <ENET_ReadFrame+0x240>
            }
            else
            {
                LOG_E("frame error0 curBuffDescrip->control 0x%04x length %d\n",curBuffDescrip->control,curBuffDescrip->length);
  1374a4:	e30a035c 	movw	r0, #41820	; 0xa35c
  1374a8:	e3400014 	movt	r0, #20
  1374ac:	ebff2f18 	bl	103114 <rt_kprintf>
  1374b0:	e51b300c 	ldr	r3, [fp, #-12]
  1374b4:	e1d330b2 	ldrh	r3, [r3, #2]
  1374b8:	e6ff3073 	uxth	r3, r3
  1374bc:	e1a01003 	mov	r1, r3
  1374c0:	e51b300c 	ldr	r3, [fp, #-12]
  1374c4:	e1d330b0 	ldrh	r3, [r3]
  1374c8:	e6ff3073 	uxth	r3, r3
  1374cc:	e1a02003 	mov	r2, r3
  1374d0:	e30a0370 	movw	r0, #41840	; 0xa370
  1374d4:	e3400014 	movt	r0, #20
  1374d8:	ebff2f0d 	bl	103114 <rt_kprintf>
  1374dc:	e30a03a8 	movw	r0, #41896	; 0xa3a8
  1374e0:	e3400014 	movt	r0, #20
  1374e4:	ebff2f0a 	bl	103114 <rt_kprintf>
                *length = curBuffDescrip->length;
  1374e8:	e51b300c 	ldr	r3, [fp, #-12]
  1374ec:	e1d330b0 	ldrh	r3, [r3]
  1374f0:	e6ff2073 	uxth	r2, r3
  1374f4:	e59b3004 	ldr	r3, [fp, #4]
  1374f8:	e1c320b0 	strh	r2, [r3]
                /* Updates the receive buffer descriptors. */
                ENET_UpdateReadBuffers(base, handle);
  1374fc:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  137500:	e51b0010 	ldr	r0, [fp, #-16]
  137504:	eb00001e 	bl	137584 <ENET_UpdateReadBuffers>
                return kStatus_ENET_RxFrameError;
  137508:	e3a03efa 	mov	r3, #4000	; 0xfa0
  13750c:	ea000019 	b	137578 <ENET_ReadFrame+0x240>
            }
        }
        else
        {
            LOG_E("frame error1 curBuffDescrip->control 0x%04x length %d\n",curBuffDescrip->control,curBuffDescrip->length);
  137510:	e30a035c 	movw	r0, #41820	; 0xa35c
  137514:	e3400014 	movt	r0, #20
  137518:	ebff2efd 	bl	103114 <rt_kprintf>
  13751c:	e51b300c 	ldr	r3, [fp, #-12]
  137520:	e1d330b2 	ldrh	r3, [r3, #2]
  137524:	e6ff3073 	uxth	r3, r3
  137528:	e1a01003 	mov	r1, r3
  13752c:	e51b300c 	ldr	r3, [fp, #-12]
  137530:	e1d330b0 	ldrh	r3, [r3]
  137534:	e6ff3073 	uxth	r3, r3
  137538:	e1a02003 	mov	r2, r3
  13753c:	e30a03b0 	movw	r0, #41904	; 0xa3b0
  137540:	e3400014 	movt	r0, #20
  137544:	ebff2ef2 	bl	103114 <rt_kprintf>
  137548:	e30a03a8 	movw	r0, #41896	; 0xa3a8
  13754c:	e3400014 	movt	r0, #20
  137550:	ebff2eef 	bl	103114 <rt_kprintf>
            *length = curBuffDescrip->length;
  137554:	e51b300c 	ldr	r3, [fp, #-12]
  137558:	e1d330b0 	ldrh	r3, [r3]
  13755c:	e6ff2073 	uxth	r2, r3
  137560:	e59b3004 	ldr	r3, [fp, #4]
  137564:	e1c320b0 	strh	r2, [r3]
            ENET_UpdateReadBuffers(base, handle);
  137568:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  13756c:	e51b0010 	ldr	r0, [fp, #-16]
  137570:	eb000003 	bl	137584 <ENET_UpdateReadBuffers>
            return kStatus_ENET_RxFrameError;
  137574:	e3a03efa 	mov	r3, #4000	; 0xfa0
        }
    }
    /* The frame is on processing - set to empty status to make application to receive it next time. */
    return kStatus_ENET_RxFrameEmpty;
}
  137578:	e1a00003 	mov	r0, r3
  13757c:	e24bd004 	sub	sp, fp, #4
  137580:	e8bd8800 	pop	{fp, pc}

00137584 <ENET_UpdateReadBuffers>:

static void ENET_UpdateReadBuffers(ENET_Type *base, enet_handle_t *handle)
{
  137584:	e92d4800 	push	{fp, lr}
  137588:	e28db004 	add	fp, sp, #4
  13758c:	e24dd008 	sub	sp, sp, #8
  137590:	e50b0008 	str	r0, [fp, #-8]
  137594:	e50b100c 	str	r1, [fp, #-12]
    RT_ASSERT(handle);
  137598:	e51b300c 	ldr	r3, [fp, #-12]
  13759c:	e3530000 	cmp	r3, #0
  1375a0:	1a000005 	bne	1375bc <ENET_UpdateReadBuffers+0x38>
  1375a4:	e3a02fca 	mov	r2, #808	; 0x328
  1375a8:	e30a1500 	movw	r1, #42240	; 0xa500
  1375ac:	e3401014 	movt	r1, #20
  1375b0:	e30a00ec 	movw	r0, #41196	; 0xa0ec
  1375b4:	e3400014 	movt	r0, #20
  1375b8:	ebff2ff6 	bl	103598 <rt_assert_handler>

    /* Clears status. */
    handle->rxBdCurrent->control &= ENET_BUFFDESCRIPTOR_RX_WRAP_MASK;
  1375bc:	e51b300c 	ldr	r3, [fp, #-12]
  1375c0:	e5933004 	ldr	r3, [r3, #4]
  1375c4:	e1d330b2 	ldrh	r3, [r3, #2]
  1375c8:	e6ff2073 	uxth	r2, r3
  1375cc:	e51b300c 	ldr	r3, [fp, #-12]
  1375d0:	e5933004 	ldr	r3, [r3, #4]
  1375d4:	e2022a02 	and	r2, r2, #8192	; 0x2000
  1375d8:	e6ff2072 	uxth	r2, r2
  1375dc:	e1c320b2 	strh	r2, [r3, #2]
    /* Sets the receive buffer descriptor with the empty flag. */
    handle->rxBdCurrent->control |= ENET_BUFFDESCRIPTOR_RX_EMPTY_MASK;
  1375e0:	e51b300c 	ldr	r3, [fp, #-12]
  1375e4:	e5933004 	ldr	r3, [r3, #4]
  1375e8:	e1d330b2 	ldrh	r3, [r3, #2]
  1375ec:	e6ff3073 	uxth	r3, r3
  1375f0:	e51b200c 	ldr	r2, [fp, #-12]
  1375f4:	e5922004 	ldr	r2, [r2, #4]
  1375f8:	e1e03883 	mvn	r3, r3, lsl #17
  1375fc:	e1e038a3 	mvn	r3, r3, lsr #17
  137600:	e6ff3073 	uxth	r3, r3
  137604:	e1c230b2 	strh	r3, [r2, #2]
    /* Increase current buffer descriptor to the next one. */
    if (handle->rxBdCurrent->control & ENET_BUFFDESCRIPTOR_RX_WRAP_MASK)
  137608:	e51b300c 	ldr	r3, [fp, #-12]
  13760c:	e5933004 	ldr	r3, [r3, #4]
  137610:	e1d330b2 	ldrh	r3, [r3, #2]
  137614:	e6ff3073 	uxth	r3, r3
  137618:	e2033a02 	and	r3, r3, #8192	; 0x2000
  13761c:	e3530000 	cmp	r3, #0
  137620:	0a000004 	beq	137638 <ENET_UpdateReadBuffers+0xb4>
    {
        handle->rxBdCurrent = handle->rxBdBase;
  137624:	e51b300c 	ldr	r3, [fp, #-12]
  137628:	e5932000 	ldr	r2, [r3]
  13762c:	e51b300c 	ldr	r3, [fp, #-12]
  137630:	e5832004 	str	r2, [r3, #4]
  137634:	ea000004 	b	13764c <ENET_UpdateReadBuffers+0xc8>
    }
    else
    {
        handle->rxBdCurrent++;
  137638:	e51b300c 	ldr	r3, [fp, #-12]
  13763c:	e5933004 	ldr	r3, [r3, #4]
  137640:	e2832008 	add	r2, r3, #8
  137644:	e51b300c 	ldr	r3, [fp, #-12]
  137648:	e5832004 	str	r2, [r3, #4]
    }
    /* Actives the receive buffer descriptor. */
    base->RDAR = ENET_RDAR_RDAR_MASK;
  13764c:	e51b3008 	ldr	r3, [fp, #-8]
  137650:	e3a02401 	mov	r2, #16777216	; 0x1000000
  137654:	e5832010 	str	r2, [r3, #16]
}
  137658:	e320f000 	nop	{0}
  13765c:	e24bd004 	sub	sp, fp, #4
  137660:	e8bd8800 	pop	{fp, pc}

00137664 <ENET_SendFrame>:

status_t ENET_SendFrame(ENET_Type *base, enet_handle_t *handle, const uint8_t *data, uint16_t length,uint32_t last_flag)
{
  137664:	e92d4800 	push	{fp, lr}
  137668:	e28db004 	add	fp, sp, #4
  13766c:	e24dd018 	sub	sp, sp, #24
  137670:	e50b0010 	str	r0, [fp, #-16]
  137674:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  137678:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  13767c:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
    RT_ASSERT(handle);
  137680:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137684:	e3530000 	cmp	r3, #0
  137688:	1a000005 	bne	1376a4 <ENET_SendFrame+0x40>
  13768c:	e300233d 	movw	r2, #829	; 0x33d
  137690:	e30a1518 	movw	r1, #42264	; 0xa518
  137694:	e3401014 	movt	r1, #20
  137698:	e30a00ec 	movw	r0, #41196	; 0xa0ec
  13769c:	e3400014 	movt	r0, #20
  1376a0:	ebff2fbc 	bl	103598 <rt_assert_handler>
    RT_ASSERT(handle->txBdCurrent);
  1376a4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1376a8:	e593300c 	ldr	r3, [r3, #12]
  1376ac:	e3530000 	cmp	r3, #0
  1376b0:	1a000005 	bne	1376cc <ENET_SendFrame+0x68>
  1376b4:	e300233e 	movw	r2, #830	; 0x33e
  1376b8:	e30a1518 	movw	r1, #42264	; 0xa518
  1376bc:	e3401014 	movt	r1, #20
  1376c0:	e30a03e8 	movw	r0, #41960	; 0xa3e8
  1376c4:	e3400014 	movt	r0, #20
  1376c8:	ebff2fb2 	bl	103598 <rt_assert_handler>
    RT_ASSERT(data);
  1376cc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1376d0:	e3530000 	cmp	r3, #0
  1376d4:	1a000005 	bne	1376f0 <ENET_SendFrame+0x8c>
  1376d8:	e300233f 	movw	r2, #831	; 0x33f
  1376dc:	e30a1518 	movw	r1, #42264	; 0xa518
  1376e0:	e3401014 	movt	r1, #20
  1376e4:	e30a03fc 	movw	r0, #41980	; 0xa3fc
  1376e8:	e3400014 	movt	r0, #20
  1376ec:	ebff2fa9 	bl	103598 <rt_assert_handler>
    RT_ASSERT(length <= ENET_FRAME_MAX_FRAMELEN);
  1376f0:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  1376f4:	e30025ee 	movw	r2, #1518	; 0x5ee
  1376f8:	e1530002 	cmp	r3, r2
  1376fc:	9a000005 	bls	137718 <ENET_SendFrame+0xb4>
  137700:	e3a02d0d 	mov	r2, #832	; 0x340
  137704:	e30a1518 	movw	r1, #42264	; 0xa518
  137708:	e3401014 	movt	r1, #20
  13770c:	e30a0404 	movw	r0, #41988	; 0xa404
  137710:	e3400014 	movt	r0, #20
  137714:	ebff2f9f 	bl	103598 <rt_assert_handler>

    volatile enet_tx_bd_struct_t *curBuffDescrip = handle->txBdCurrent;
  137718:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13771c:	e593300c 	ldr	r3, [r3, #12]
  137720:	e50b3008 	str	r3, [fp, #-8]
    /* Check if the transmit buffer is ready. */
    if (curBuffDescrip->control & ENET_BUFFDESCRIPTOR_TX_READY_MASK)
  137724:	e51b3008 	ldr	r3, [fp, #-8]
  137728:	e1d330b2 	ldrh	r3, [r3, #2]
  13772c:	e6ff3073 	uxth	r3, r3
  137730:	e6bf3073 	sxth	r3, r3
  137734:	e3530000 	cmp	r3, #0
  137738:	aa000001 	bge	137744 <ENET_SendFrame+0xe0>
    {
        return kStatus_ENET_TxFrameBusy;
  13773c:	e3003fa3 	movw	r3, #4003	; 0xfa3
  137740:	ea00004b 	b	137874 <ENET_SendFrame+0x210>
    }
    /* One transmit buffer is enough for one frame. */
    if (handle->txBuffSizeAlign >= length)
  137744:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137748:	e5932014 	ldr	r2, [r3, #20]
  13774c:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
  137750:	e1520003 	cmp	r2, r3
  137754:	3a000045 	bcc	137870 <ENET_SendFrame+0x20c>
    {
        /* Copy data to the buffer for uDMA transfer. */
        rt_memcpy(buffer_vaddr_tx[curBuffDescrip - handle->txBdBase], data, length);
  137758:	e51b3008 	ldr	r3, [fp, #-8]
  13775c:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
  137760:	e5922008 	ldr	r2, [r2, #8]
  137764:	e0433002 	sub	r3, r3, r2
  137768:	e1a031c3 	asr	r3, r3, #3
  13776c:	e1a02003 	mov	r2, r3
  137770:	e3063c80 	movw	r3, #27776	; 0x6c80
  137774:	e3403057 	movt	r3, #87	; 0x57
  137778:	e7933102 	ldr	r3, [r3, r2, lsl #2]
  13777c:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
  137780:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
  137784:	e1a00003 	mov	r0, r3
  137788:	ebff2edc 	bl	103300 <rt_memcpy>
        /* Set data length. */
        curBuffDescrip->length = length;
  13778c:	e51b3008 	ldr	r3, [fp, #-8]
  137790:	e15b21ba 	ldrh	r2, [fp, #-26]	; 0xffffffe6
  137794:	e1c320b0 	strh	r2, [r3]
        if(last_flag)
  137798:	e59b3004 	ldr	r3, [fp, #4]
  13779c:	e3530000 	cmp	r3, #0
  1377a0:	0a000009 	beq	1377cc <ENET_SendFrame+0x168>
        {
            curBuffDescrip->control |= (ENET_BUFFDESCRIPTOR_TX_READY_MASK | ENET_BUFFDESCRIPTOR_TX_LAST_MASK);
  1377a4:	e51b3008 	ldr	r3, [fp, #-8]
  1377a8:	e1d330b2 	ldrh	r3, [r3, #2]
  1377ac:	e6ff2073 	uxth	r2, r3
  1377b0:	e3a03b22 	mov	r3, #34816	; 0x8800
  1377b4:	e34f3fff 	movt	r3, #65535	; 0xffff
  1377b8:	e1823003 	orr	r3, r2, r3
  1377bc:	e6ff2073 	uxth	r2, r3
  1377c0:	e51b3008 	ldr	r3, [fp, #-8]
  1377c4:	e1c320b2 	strh	r2, [r3, #2]
  1377c8:	ea00000e 	b	137808 <ENET_SendFrame+0x1a4>
        }
        else
        {
            curBuffDescrip->control &= ~ENET_BUFFDESCRIPTOR_TX_LAST_MASK;
  1377cc:	e51b3008 	ldr	r3, [fp, #-8]
  1377d0:	e1d330b2 	ldrh	r3, [r3, #2]
  1377d4:	e6ff3073 	uxth	r3, r3
  1377d8:	e3c33b02 	bic	r3, r3, #2048	; 0x800
  1377dc:	e6ff2073 	uxth	r2, r3
  1377e0:	e51b3008 	ldr	r3, [fp, #-8]
  1377e4:	e1c320b2 	strh	r2, [r3, #2]
            curBuffDescrip->control |= ENET_BUFFDESCRIPTOR_TX_READY_MASK;
  1377e8:	e51b3008 	ldr	r3, [fp, #-8]
  1377ec:	e1d330b2 	ldrh	r3, [r3, #2]
  1377f0:	e6ff3073 	uxth	r3, r3
  1377f4:	e1e03883 	mvn	r3, r3, lsl #17
  1377f8:	e1e038a3 	mvn	r3, r3, lsr #17
  1377fc:	e6ff2073 	uxth	r2, r3
  137800:	e51b3008 	ldr	r3, [fp, #-8]
  137804:	e1c320b2 	strh	r2, [r3, #2]

        // rt_hw_cpu_dcache_clean((void *)physical_to_virtual(curBuffDescrip->buffer),length);
        // ueth_dcache_clean(curBuffDescrip->buffer_vaddr, length);
        /* Active the transmit buffer descriptor. */

        base->TDAR = ENET_TDAR_TDAR_MASK;
  137808:	e51b3010 	ldr	r3, [fp, #-16]
  13780c:	e3a02401 	mov	r2, #16777216	; 0x1000000
  137810:	e5832014 	str	r2, [r3, #20]
        /* Increase the buffer descriptor address. */
        while((base->TDAR != 0))
  137814:	e320f000 	nop	{0}
  137818:	e51b3010 	ldr	r3, [fp, #-16]
  13781c:	e5933014 	ldr	r3, [r3, #20]
  137820:	e3530000 	cmp	r3, #0
  137824:	1afffffb 	bne	137818 <ENET_SendFrame+0x1b4>
        {
        }
        if (curBuffDescrip->control & ENET_BUFFDESCRIPTOR_TX_WRAP_MASK)
  137828:	e51b3008 	ldr	r3, [fp, #-8]
  13782c:	e1d330b2 	ldrh	r3, [r3, #2]
  137830:	e6ff3073 	uxth	r3, r3
  137834:	e2033a02 	and	r3, r3, #8192	; 0x2000
  137838:	e3530000 	cmp	r3, #0
  13783c:	0a000004 	beq	137854 <ENET_SendFrame+0x1f0>
        {
            handle->txBdCurrent = handle->txBdBase;
  137840:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137844:	e5932008 	ldr	r2, [r3, #8]
  137848:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13784c:	e583200c 	str	r2, [r3, #12]
  137850:	ea000004 	b	137868 <ENET_SendFrame+0x204>
        }
        else
        {
            handle->txBdCurrent++;
  137854:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137858:	e593300c 	ldr	r3, [r3, #12]
  13785c:	e2832008 	add	r2, r3, #8
  137860:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  137864:	e583200c 	str	r2, [r3, #12]
        }
        return kStatus_Success;
  137868:	e3a03000 	mov	r3, #0
  13786c:	ea000000 	b	137874 <ENET_SendFrame+0x210>
    }
    else
    {
        return kStatus_ENET_RxFrameError;
  137870:	e3a03efa 	mov	r3, #4000	; 0xfa0
    }
}
  137874:	e1a00003 	mov	r0, r3
  137878:	e24bd004 	sub	sp, fp, #4
  13787c:	e8bd8800 	pop	{fp, pc}

00137880 <ENET_AddMulticastGroup>:

void ENET_AddMulticastGroup(ENET_Type *base, uint8_t *address)
{
  137880:	e92d4800 	push	{fp, lr}
  137884:	e28db004 	add	fp, sp, #4
  137888:	e24dd018 	sub	sp, sp, #24
  13788c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  137890:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(address);
  137894:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  137898:	e3530000 	cmp	r3, #0
  13789c:	1a000005 	bne	1378b8 <ENET_AddMulticastGroup+0x38>
  1378a0:	e3a02fdd 	mov	r2, #884	; 0x374
  1378a4:	e30a1528 	movw	r1, #42280	; 0xa528
  1378a8:	e3401014 	movt	r1, #20
  1378ac:	e30a0428 	movw	r0, #42024	; 0xa428
  1378b0:	e3400014 	movt	r0, #20
  1378b4:	ebff2f37 	bl	103598 <rt_assert_handler>

    uint32_t crc = 0xFFFFFFFFU;
  1378b8:	e3e03000 	mvn	r3, #0
  1378bc:	e50b3008 	str	r3, [fp, #-8]
    uint32_t count1 = 0;
  1378c0:	e3a03000 	mov	r3, #0
  1378c4:	e50b300c 	str	r3, [fp, #-12]
    uint32_t count2 = 0;
  1378c8:	e3a03000 	mov	r3, #0
  1378cc:	e50b3010 	str	r3, [fp, #-16]

    /* Calculates the CRC-32 polynomial on the multicast group address. */
    for (count1 = 0; count1 < ENET_FRAME_MACLEN; count1++)
  1378d0:	e3a03000 	mov	r3, #0
  1378d4:	e50b300c 	str	r3, [fp, #-12]
  1378d8:	ea000028 	b	137980 <ENET_AddMulticastGroup+0x100>
    {
        uint8_t c = address[count1];
  1378dc:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  1378e0:	e51b300c 	ldr	r3, [fp, #-12]
  1378e4:	e0823003 	add	r3, r2, r3
  1378e8:	e5d33000 	ldrb	r3, [r3]
  1378ec:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
        for (count2 = 0; count2 < 0x08U; count2++)
  1378f0:	e3a03000 	mov	r3, #0
  1378f4:	e50b3010 	str	r3, [fp, #-16]
  1378f8:	ea00001a 	b	137968 <ENET_AddMulticastGroup+0xe8>
        {
            if ((c ^ crc) & 1U)
  1378fc:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  137900:	e51b3008 	ldr	r3, [fp, #-8]
  137904:	e0233002 	eor	r3, r3, r2
  137908:	e2033001 	and	r3, r3, #1
  13790c:	e3530000 	cmp	r3, #0
  137910:	0a00000b 	beq	137944 <ENET_AddMulticastGroup+0xc4>
            {
                crc >>= 1U;
  137914:	e51b3008 	ldr	r3, [fp, #-8]
  137918:	e1a030a3 	lsr	r3, r3, #1
  13791c:	e50b3008 	str	r3, [fp, #-8]
                c >>= 1U;
  137920:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  137924:	e1a030a3 	lsr	r3, r3, #1
  137928:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
                crc ^= 0xEDB88320U;
  13792c:	e51b2008 	ldr	r2, [fp, #-8]
  137930:	e3083320 	movw	r3, #33568	; 0x8320
  137934:	e34e3db8 	movt	r3, #60856	; 0xedb8
  137938:	e0233002 	eor	r3, r3, r2
  13793c:	e50b3008 	str	r3, [fp, #-8]
  137940:	ea000005 	b	13795c <ENET_AddMulticastGroup+0xdc>
            }
            else
            {
                crc >>= 1U;
  137944:	e51b3008 	ldr	r3, [fp, #-8]
  137948:	e1a030a3 	lsr	r3, r3, #1
  13794c:	e50b3008 	str	r3, [fp, #-8]
                c >>= 1U;
  137950:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  137954:	e1a030a3 	lsr	r3, r3, #1
  137958:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
        for (count2 = 0; count2 < 0x08U; count2++)
  13795c:	e51b3010 	ldr	r3, [fp, #-16]
  137960:	e2833001 	add	r3, r3, #1
  137964:	e50b3010 	str	r3, [fp, #-16]
  137968:	e51b3010 	ldr	r3, [fp, #-16]
  13796c:	e3530007 	cmp	r3, #7
  137970:	9affffe1 	bls	1378fc <ENET_AddMulticastGroup+0x7c>
    for (count1 = 0; count1 < ENET_FRAME_MACLEN; count1++)
  137974:	e51b300c 	ldr	r3, [fp, #-12]
  137978:	e2833001 	add	r3, r3, #1
  13797c:	e50b300c 	str	r3, [fp, #-12]
  137980:	e51b300c 	ldr	r3, [fp, #-12]
  137984:	e3530005 	cmp	r3, #5
  137988:	9affffd3 	bls	1378dc <ENET_AddMulticastGroup+0x5c>
            }
        }
    }

    /* Enable a multicast group address. */
    if (!((crc >> 0x1FU) & 1U))
  13798c:	e51b3008 	ldr	r3, [fp, #-8]
  137990:	e3530000 	cmp	r3, #0
  137994:	ba00000a 	blt	1379c4 <ENET_AddMulticastGroup+0x144>
    {
        base->GALR |= 1U << ((crc >> 0x1AU) & 0x1FU);
  137998:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  13799c:	e5932124 	ldr	r2, [r3, #292]	; 0x124
  1379a0:	e51b3008 	ldr	r3, [fp, #-8]
  1379a4:	e1a03d23 	lsr	r3, r3, #26
  1379a8:	e203301f 	and	r3, r3, #31
  1379ac:	e3a01001 	mov	r1, #1
  1379b0:	e1a03311 	lsl	r3, r1, r3
  1379b4:	e1822003 	orr	r2, r2, r3
  1379b8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1379bc:	e5832124 	str	r2, [r3, #292]	; 0x124
    }
    else
    {
        base->GAUR |= 1U << ((crc >> 0x1AU) & 0x1FU);
    }
}
  1379c0:	ea000009 	b	1379ec <ENET_AddMulticastGroup+0x16c>
        base->GAUR |= 1U << ((crc >> 0x1AU) & 0x1FU);
  1379c4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1379c8:	e5932120 	ldr	r2, [r3, #288]	; 0x120
  1379cc:	e51b3008 	ldr	r3, [fp, #-8]
  1379d0:	e1a03d23 	lsr	r3, r3, #26
  1379d4:	e203301f 	and	r3, r3, #31
  1379d8:	e3a01001 	mov	r1, #1
  1379dc:	e1a03311 	lsl	r3, r1, r3
  1379e0:	e1822003 	orr	r2, r2, r3
  1379e4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1379e8:	e5832120 	str	r2, [r3, #288]	; 0x120
}
  1379ec:	e320f000 	nop	{0}
  1379f0:	e24bd004 	sub	sp, fp, #4
  1379f4:	e8bd8800 	pop	{fp, pc}

001379f8 <ENET_LeaveMulticastGroup>:

void ENET_LeaveMulticastGroup(ENET_Type *base, uint8_t *address)
{
  1379f8:	e92d4800 	push	{fp, lr}
  1379fc:	e28db004 	add	fp, sp, #4
  137a00:	e24dd018 	sub	sp, sp, #24
  137a04:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  137a08:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(address);
  137a0c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  137a10:	e3530000 	cmp	r3, #0
  137a14:	1a000005 	bne	137a30 <ENET_LeaveMulticastGroup+0x38>
  137a18:	e300239b 	movw	r2, #923	; 0x39b
  137a1c:	e30a1540 	movw	r1, #42304	; 0xa540
  137a20:	e3401014 	movt	r1, #20
  137a24:	e30a0428 	movw	r0, #42024	; 0xa428
  137a28:	e3400014 	movt	r0, #20
  137a2c:	ebff2ed9 	bl	103598 <rt_assert_handler>

    uint32_t crc = 0xFFFFFFFFU;
  137a30:	e3e03000 	mvn	r3, #0
  137a34:	e50b3008 	str	r3, [fp, #-8]
    uint32_t count1 = 0;
  137a38:	e3a03000 	mov	r3, #0
  137a3c:	e50b300c 	str	r3, [fp, #-12]
    uint32_t count2 = 0;
  137a40:	e3a03000 	mov	r3, #0
  137a44:	e50b3010 	str	r3, [fp, #-16]

    /* Calculates the CRC-32 polynomial on the multicast group address. */
    for (count1 = 0; count1 < ENET_FRAME_MACLEN; count1++)
  137a48:	e3a03000 	mov	r3, #0
  137a4c:	e50b300c 	str	r3, [fp, #-12]
  137a50:	ea000028 	b	137af8 <ENET_LeaveMulticastGroup+0x100>
    {
        uint8_t c = address[count1];
  137a54:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
  137a58:	e51b300c 	ldr	r3, [fp, #-12]
  137a5c:	e0823003 	add	r3, r2, r3
  137a60:	e5d33000 	ldrb	r3, [r3]
  137a64:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
        for (count2 = 0; count2 < 0x08U; count2++)
  137a68:	e3a03000 	mov	r3, #0
  137a6c:	e50b3010 	str	r3, [fp, #-16]
  137a70:	ea00001a 	b	137ae0 <ENET_LeaveMulticastGroup+0xe8>
        {
            if ((c ^ crc) & 1U)
  137a74:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
  137a78:	e51b3008 	ldr	r3, [fp, #-8]
  137a7c:	e0233002 	eor	r3, r3, r2
  137a80:	e2033001 	and	r3, r3, #1
  137a84:	e3530000 	cmp	r3, #0
  137a88:	0a00000b 	beq	137abc <ENET_LeaveMulticastGroup+0xc4>
            {
                crc >>= 1U;
  137a8c:	e51b3008 	ldr	r3, [fp, #-8]
  137a90:	e1a030a3 	lsr	r3, r3, #1
  137a94:	e50b3008 	str	r3, [fp, #-8]
                c >>= 1U;
  137a98:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  137a9c:	e1a030a3 	lsr	r3, r3, #1
  137aa0:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
                crc ^= 0xEDB88320U;
  137aa4:	e51b2008 	ldr	r2, [fp, #-8]
  137aa8:	e3083320 	movw	r3, #33568	; 0x8320
  137aac:	e34e3db8 	movt	r3, #60856	; 0xedb8
  137ab0:	e0233002 	eor	r3, r3, r2
  137ab4:	e50b3008 	str	r3, [fp, #-8]
  137ab8:	ea000005 	b	137ad4 <ENET_LeaveMulticastGroup+0xdc>
            }
            else
            {
                crc >>= 1U;
  137abc:	e51b3008 	ldr	r3, [fp, #-8]
  137ac0:	e1a030a3 	lsr	r3, r3, #1
  137ac4:	e50b3008 	str	r3, [fp, #-8]
                c >>= 1U;
  137ac8:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
  137acc:	e1a030a3 	lsr	r3, r3, #1
  137ad0:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
        for (count2 = 0; count2 < 0x08U; count2++)
  137ad4:	e51b3010 	ldr	r3, [fp, #-16]
  137ad8:	e2833001 	add	r3, r3, #1
  137adc:	e50b3010 	str	r3, [fp, #-16]
  137ae0:	e51b3010 	ldr	r3, [fp, #-16]
  137ae4:	e3530007 	cmp	r3, #7
  137ae8:	9affffe1 	bls	137a74 <ENET_LeaveMulticastGroup+0x7c>
    for (count1 = 0; count1 < ENET_FRAME_MACLEN; count1++)
  137aec:	e51b300c 	ldr	r3, [fp, #-12]
  137af0:	e2833001 	add	r3, r3, #1
  137af4:	e50b300c 	str	r3, [fp, #-12]
  137af8:	e51b300c 	ldr	r3, [fp, #-12]
  137afc:	e3530005 	cmp	r3, #5
  137b00:	9affffd3 	bls	137a54 <ENET_LeaveMulticastGroup+0x5c>
            }
        }
    }

    /* Set the hash table. */
    if (!((crc >> 0x1FU) & 1U))
  137b04:	e51b3008 	ldr	r3, [fp, #-8]
  137b08:	e3530000 	cmp	r3, #0
  137b0c:	ba00000b 	blt	137b40 <ENET_LeaveMulticastGroup+0x148>
    {
        base->GALR &= ~(1U << ((crc >> 0x1AU) & 0x1FU));
  137b10:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  137b14:	e5932124 	ldr	r2, [r3, #292]	; 0x124
  137b18:	e51b3008 	ldr	r3, [fp, #-8]
  137b1c:	e1a03d23 	lsr	r3, r3, #26
  137b20:	e203301f 	and	r3, r3, #31
  137b24:	e3a01001 	mov	r1, #1
  137b28:	e1a03311 	lsl	r3, r1, r3
  137b2c:	e1e03003 	mvn	r3, r3
  137b30:	e0022003 	and	r2, r2, r3
  137b34:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  137b38:	e5832124 	str	r2, [r3, #292]	; 0x124
    }
    else
    {
        base->GAUR &= ~(1U << ((crc >> 0x1AU) & 0x1FU));
    }
}
  137b3c:	ea00000a 	b	137b6c <ENET_LeaveMulticastGroup+0x174>
        base->GAUR &= ~(1U << ((crc >> 0x1AU) & 0x1FU));
  137b40:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  137b44:	e5932120 	ldr	r2, [r3, #288]	; 0x120
  137b48:	e51b3008 	ldr	r3, [fp, #-8]
  137b4c:	e1a03d23 	lsr	r3, r3, #26
  137b50:	e203301f 	and	r3, r3, #31
  137b54:	e3a01001 	mov	r1, #1
  137b58:	e1a03311 	lsl	r3, r1, r3
  137b5c:	e1e03003 	mvn	r3, r3
  137b60:	e0022003 	and	r2, r2, r3
  137b64:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  137b68:	e5832120 	str	r2, [r3, #288]	; 0x120
}
  137b6c:	e320f000 	nop	{0}
  137b70:	e24bd004 	sub	sp, fp, #4
  137b74:	e8bd8800 	pop	{fp, pc}

00137b78 <ENET_TransmitIRQHandler>:
void tx_enet_callback(void *base);
void ENET_TransmitIRQHandler(ENET_Type *base, enet_handle_t *handle)
{
  137b78:	e92d4800 	push	{fp, lr}
  137b7c:	e28db004 	add	fp, sp, #4
  137b80:	e24dd008 	sub	sp, sp, #8
  137b84:	e50b0008 	str	r0, [fp, #-8]
  137b88:	e50b100c 	str	r1, [fp, #-12]
    RT_ASSERT(handle);
  137b8c:	e51b300c 	ldr	r3, [fp, #-12]
  137b90:	e3530000 	cmp	r3, #0
  137b94:	1a000005 	bne	137bb0 <ENET_TransmitIRQHandler+0x38>
  137b98:	e30023c2 	movw	r2, #962	; 0x3c2
  137b9c:	e30a155c 	movw	r1, #42332	; 0xa55c
  137ba0:	e3401014 	movt	r1, #20
  137ba4:	e30a00ec 	movw	r0, #41196	; 0xa0ec
  137ba8:	e3400014 	movt	r0, #20
  137bac:	ebff2e79 	bl	103598 <rt_assert_handler>
    /* Check if the transmit interrupt happen. */
    if((kENET_TxBufferInterrupt | kENET_TxFrameInterrupt) & base->EIR)
  137bb0:	e51b3008 	ldr	r3, [fp, #-8]
  137bb4:	e5933004 	ldr	r3, [r3, #4]
  137bb8:	e2033303 	and	r3, r3, #201326592	; 0xc000000
  137bbc:	e3530000 	cmp	r3, #0
  137bc0:	0a000002 	beq	137bd0 <ENET_TransmitIRQHandler+0x58>
    {
        /* Clear the transmit interrupt event. */
        base->EIR = kENET_TxFrameInterrupt | kENET_TxBufferInterrupt;
  137bc4:	e51b3008 	ldr	r3, [fp, #-8]
  137bc8:	e3a02303 	mov	r2, #201326592	; 0xc000000
  137bcc:	e5832004 	str	r2, [r3, #4]
    }
    tx_enet_callback((void *)base);
  137bd0:	e51b0008 	ldr	r0, [fp, #-8]
  137bd4:	ebfff6e5 	bl	135770 <tx_enet_callback>
}
  137bd8:	e320f000 	nop	{0}
  137bdc:	e24bd004 	sub	sp, fp, #4
  137be0:	e8bd8800 	pop	{fp, pc}

00137be4 <ENET_ReceiveIRQHandler>:
void rx_enet_callback(void *base);
void ENET_ReceiveIRQHandler(ENET_Type *base, enet_handle_t *handle)
{
  137be4:	e92d4800 	push	{fp, lr}
  137be8:	e28db004 	add	fp, sp, #4
  137bec:	e24dd008 	sub	sp, sp, #8
  137bf0:	e50b0008 	str	r0, [fp, #-8]
  137bf4:	e50b100c 	str	r1, [fp, #-12]
    RT_ASSERT(handle);
  137bf8:	e51b300c 	ldr	r3, [fp, #-12]
  137bfc:	e3530000 	cmp	r3, #0
  137c00:	1a000005 	bne	137c1c <ENET_ReceiveIRQHandler+0x38>
  137c04:	e30023ce 	movw	r2, #974	; 0x3ce
  137c08:	e30a1574 	movw	r1, #42356	; 0xa574
  137c0c:	e3401014 	movt	r1, #20
  137c10:	e30a00ec 	movw	r0, #41196	; 0xa0ec
  137c14:	e3400014 	movt	r0, #20
  137c18:	ebff2e5e 	bl	103598 <rt_assert_handler>

    /* Check if the receive interrupt happen. */
    if((kENET_RxBufferInterrupt | kENET_RxFrameInterrupt) & base->EIR)
  137c1c:	e51b3008 	ldr	r3, [fp, #-8]
  137c20:	e5933004 	ldr	r3, [r3, #4]
  137c24:	e2033403 	and	r3, r3, #50331648	; 0x3000000
  137c28:	e3530000 	cmp	r3, #0
  137c2c:	0a000004 	beq	137c44 <ENET_ReceiveIRQHandler+0x60>
    {
        /* Clear the transmit interrupt event. */
        base->EIR = kENET_RxFrameInterrupt | kENET_RxBufferInterrupt;
  137c30:	e51b3008 	ldr	r3, [fp, #-8]
  137c34:	e3a02403 	mov	r2, #50331648	; 0x3000000
  137c38:	e5832004 	str	r2, [r3, #4]
        rx_enet_callback((void *)base);
  137c3c:	e51b0008 	ldr	r0, [fp, #-8]
  137c40:	ebfff6a7 	bl	1356e4 <rx_enet_callback>
    }
}
  137c44:	e320f000 	nop	{0}
  137c48:	e24bd004 	sub	sp, fp, #4
  137c4c:	e8bd8800 	pop	{fp, pc}

00137c50 <ENET_ErrorIRQHandler>:
void ENET_ErrorIRQHandler(ENET_Type *base, enet_handle_t *handle)
{
  137c50:	e92d4810 	push	{r4, fp, lr}
  137c54:	e28db008 	add	fp, sp, #8
  137c58:	e24dd014 	sub	sp, sp, #20
  137c5c:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  137c60:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(handle);
  137c64:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  137c68:	e3530000 	cmp	r3, #0
  137c6c:	1a000005 	bne	137c88 <ENET_ErrorIRQHandler+0x38>
  137c70:	e30023da 	movw	r2, #986	; 0x3da
  137c74:	e30a158c 	movw	r1, #42380	; 0xa58c
  137c78:	e3401014 	movt	r1, #20
  137c7c:	e30a00ec 	movw	r0, #41196	; 0xa0ec
  137c80:	e3400014 	movt	r0, #20
  137c84:	ebff2e43 	bl	103598 <rt_assert_handler>

    uint32_t errMask = kENET_BabrInterrupt | kENET_BabtInterrupt | kENET_EBusERInterrupt | kENET_PayloadRxInterrupt |
  137c88:	e3a03000 	mov	r3, #0
  137c8c:	e346307c 	movt	r3, #24700	; 0x607c
  137c90:	e50b3010 	str	r3, [fp, #-16]
                       kENET_LateCollisionInterrupt | kENET_RetryLimitInterrupt | kENET_UnderrunInterrupt;
    /* Check if the error interrupt happen. */
    if (kENET_WakeupInterrupt & base->EIR)
  137c94:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  137c98:	e5933004 	ldr	r3, [r3, #4]
  137c9c:	e2033802 	and	r3, r3, #131072	; 0x20000
  137ca0:	e3530000 	cmp	r3, #0
  137ca4:	0a000012 	beq	137cf4 <ENET_ErrorIRQHandler+0xa4>
    {
        /* Clear the wakeup interrupt. */
        base->EIR = kENET_WakeupInterrupt;
  137ca8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  137cac:	e3a02802 	mov	r2, #131072	; 0x20000
  137cb0:	e5832004 	str	r2, [r3, #4]
        /* wake up and enter the normal mode. */
        ENET_EnableSleepMode(base, false);
  137cb4:	e3a01000 	mov	r1, #0
  137cb8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  137cbc:	ebfff879 	bl	135ea8 <ENET_EnableSleepMode>
        /* Callback function. */
        if (handle->callback)
  137cc0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  137cc4:	e5933018 	ldr	r3, [r3, #24]
  137cc8:	e3530000 	cmp	r3, #0
  137ccc:	0a00001c 	beq	137d44 <ENET_ErrorIRQHandler+0xf4>
        {
            handle->callback(base, handle, kENET_WakeUpEvent, handle->userData);
  137cd0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  137cd4:	e5934018 	ldr	r4, [r3, #24]
  137cd8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  137cdc:	e593301c 	ldr	r3, [r3, #28]
  137ce0:	e3a02003 	mov	r2, #3
  137ce4:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  137ce8:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  137cec:	e12fff34 	blx	r4
        if (handle->callback)
        {
            handle->callback(base, handle, kENET_ErrEvent, handle->userData);
        }
    }
}
  137cf0:	ea000013 	b	137d44 <ENET_ErrorIRQHandler+0xf4>
        errMask &= base->EIR;
  137cf4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  137cf8:	e5933004 	ldr	r3, [r3, #4]
  137cfc:	e51b2010 	ldr	r2, [fp, #-16]
  137d00:	e0033002 	and	r3, r3, r2
  137d04:	e50b3010 	str	r3, [fp, #-16]
        base->EIR = errMask;
  137d08:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  137d0c:	e51b2010 	ldr	r2, [fp, #-16]
  137d10:	e5832004 	str	r2, [r3, #4]
        if (handle->callback)
  137d14:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  137d18:	e5933018 	ldr	r3, [r3, #24]
  137d1c:	e3530000 	cmp	r3, #0
  137d20:	0a000007 	beq	137d44 <ENET_ErrorIRQHandler+0xf4>
            handle->callback(base, handle, kENET_ErrEvent, handle->userData);
  137d24:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  137d28:	e5934018 	ldr	r4, [r3, #24]
  137d2c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  137d30:	e593301c 	ldr	r3, [r3, #28]
  137d34:	e3a02002 	mov	r2, #2
  137d38:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  137d3c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  137d40:	e12fff34 	blx	r4
}
  137d44:	e320f000 	nop	{0}
  137d48:	e24bd008 	sub	sp, fp, #8
  137d4c:	e8bd8810 	pop	{r4, fp, pc}

00137d50 <ENET_CommonFrame0IRQHandler>:

void ENET_CommonFrame0IRQHandler(ENET_Type *base)
{
  137d50:	e92d4800 	push	{fp, lr}
  137d54:	e28db004 	add	fp, sp, #4
  137d58:	e24dd010 	sub	sp, sp, #16
  137d5c:	e50b0010 	str	r0, [fp, #-16]
    uint32_t event = base->EIR;
  137d60:	e51b3010 	ldr	r3, [fp, #-16]
  137d64:	e5933004 	ldr	r3, [r3, #4]
  137d68:	e50b3008 	str	r3, [fp, #-8]
    uint32_t instance = get_instance_by_base(base);
  137d6c:	e51b0010 	ldr	r0, [fp, #-16]
  137d70:	ebfff633 	bl	135644 <get_instance_by_base>
  137d74:	e1a03000 	mov	r3, r0
  137d78:	e50b300c 	str	r3, [fp, #-12]

    if(base->EIMR & ENET_TX_INTERRUPT)
  137d7c:	e51b3010 	ldr	r3, [fp, #-16]
  137d80:	e5933008 	ldr	r3, [r3, #8]
  137d84:	e2033303 	and	r3, r3, #201326592	; 0xc000000
  137d88:	e3530000 	cmp	r3, #0
  137d8c:	0a000012 	beq	137ddc <ENET_CommonFrame0IRQHandler+0x8c>
    {
        if (event & ENET_TX_INTERRUPT)
  137d90:	e51b3008 	ldr	r3, [fp, #-8]
  137d94:	e2033303 	and	r3, r3, #201326592	; 0xc000000
  137d98:	e3530000 	cmp	r3, #0
  137d9c:	0a00000e 	beq	137ddc <ENET_CommonFrame0IRQHandler+0x8c>
        {
            if(s_enetTxIsr)
  137da0:	e30f3c00 	movw	r3, #64512	; 0xfc00
  137da4:	e3403014 	movt	r3, #20
  137da8:	e5933000 	ldr	r3, [r3]
  137dac:	e3530000 	cmp	r3, #0
  137db0:	0a000009 	beq	137ddc <ENET_CommonFrame0IRQHandler+0x8c>
            {
                s_enetTxIsr(base, s_ENETHandle[instance]);
  137db4:	e30f3c00 	movw	r3, #64512	; 0xfc00
  137db8:	e3403014 	movt	r3, #20
  137dbc:	e5932000 	ldr	r2, [r3]
  137dc0:	e30f3bf8 	movw	r3, #64504	; 0xfbf8
  137dc4:	e3403014 	movt	r3, #20
  137dc8:	e51b100c 	ldr	r1, [fp, #-12]
  137dcc:	e7933101 	ldr	r3, [r3, r1, lsl #2]
  137dd0:	e1a01003 	mov	r1, r3
  137dd4:	e51b0010 	ldr	r0, [fp, #-16]
  137dd8:	e12fff32 	blx	r2
            }
        }
    }
    if (base->EIMR & ENET_RX_INTERRUPT)
  137ddc:	e51b3010 	ldr	r3, [fp, #-16]
  137de0:	e5933008 	ldr	r3, [r3, #8]
  137de4:	e2033403 	and	r3, r3, #50331648	; 0x3000000
  137de8:	e3530000 	cmp	r3, #0
  137dec:	0a000012 	beq	137e3c <ENET_CommonFrame0IRQHandler+0xec>
    {
        if (event & ENET_RX_INTERRUPT)
  137df0:	e51b3008 	ldr	r3, [fp, #-8]
  137df4:	e2033403 	and	r3, r3, #50331648	; 0x3000000
  137df8:	e3530000 	cmp	r3, #0
  137dfc:	0a00000e 	beq	137e3c <ENET_CommonFrame0IRQHandler+0xec>
        {
            if(s_enetRxIsr)
  137e00:	e30f3c04 	movw	r3, #64516	; 0xfc04
  137e04:	e3403014 	movt	r3, #20
  137e08:	e5933000 	ldr	r3, [r3]
  137e0c:	e3530000 	cmp	r3, #0
  137e10:	0a000009 	beq	137e3c <ENET_CommonFrame0IRQHandler+0xec>
            {
                s_enetRxIsr(base, s_ENETHandle[instance]);
  137e14:	e30f3c04 	movw	r3, #64516	; 0xfc04
  137e18:	e3403014 	movt	r3, #20
  137e1c:	e5932000 	ldr	r2, [r3]
  137e20:	e30f3bf8 	movw	r3, #64504	; 0xfbf8
  137e24:	e3403014 	movt	r3, #20
  137e28:	e51b100c 	ldr	r1, [fp, #-12]
  137e2c:	e7933101 	ldr	r3, [r3, r1, lsl #2]
  137e30:	e1a01003 	mov	r1, r3
  137e34:	e51b0010 	ldr	r0, [fp, #-16]
  137e38:	e12fff32 	blx	r2
            }
        }
    }
    if(base->EIMR & ENET_TS_INTERRUPT)
  137e3c:	e51b3010 	ldr	r3, [fp, #-16]
  137e40:	e5933008 	ldr	r3, [r3, #8]
  137e44:	e2033906 	and	r3, r3, #98304	; 0x18000
  137e48:	e3530000 	cmp	r3, #0
  137e4c:	0a000012 	beq	137e9c <ENET_CommonFrame0IRQHandler+0x14c>
    {
        if (event & ENET_TS_INTERRUPT)
  137e50:	e51b3008 	ldr	r3, [fp, #-8]
  137e54:	e2033906 	and	r3, r3, #98304	; 0x18000
  137e58:	e3530000 	cmp	r3, #0
  137e5c:	0a00000e 	beq	137e9c <ENET_CommonFrame0IRQHandler+0x14c>
        {
            if(s_enetTsIsr)
  137e60:	e30f3c0c 	movw	r3, #64524	; 0xfc0c
  137e64:	e3403014 	movt	r3, #20
  137e68:	e5933000 	ldr	r3, [r3]
  137e6c:	e3530000 	cmp	r3, #0
  137e70:	0a000009 	beq	137e9c <ENET_CommonFrame0IRQHandler+0x14c>
            {
                s_enetTsIsr(base, s_ENETHandle[instance]);
  137e74:	e30f3c0c 	movw	r3, #64524	; 0xfc0c
  137e78:	e3403014 	movt	r3, #20
  137e7c:	e5932000 	ldr	r2, [r3]
  137e80:	e30f3bf8 	movw	r3, #64504	; 0xfbf8
  137e84:	e3403014 	movt	r3, #20
  137e88:	e51b100c 	ldr	r1, [fp, #-12]
  137e8c:	e7933101 	ldr	r3, [r3, r1, lsl #2]
  137e90:	e1a01003 	mov	r1, r3
  137e94:	e51b0010 	ldr	r0, [fp, #-16]
  137e98:	e12fff32 	blx	r2
            }
        }
    }
    if(base->EIMR & ENET_ERR_INTERRUPT)
  137e9c:	e51b3010 	ldr	r3, [fp, #-16]
  137ea0:	e5932008 	ldr	r2, [r3, #8]
  137ea4:	e3a03000 	mov	r3, #0
  137ea8:	e346307c 	movt	r3, #24700	; 0x607c
  137eac:	e0033002 	and	r3, r3, r2
  137eb0:	e3530000 	cmp	r3, #0
  137eb4:	0a000014 	beq	137f0c <ENET_CommonFrame0IRQHandler+0x1bc>
    {
        if (event & ENET_ERR_INTERRUPT)
  137eb8:	e51b2008 	ldr	r2, [fp, #-8]
  137ebc:	e3a03000 	mov	r3, #0
  137ec0:	e346307c 	movt	r3, #24700	; 0x607c
  137ec4:	e0033002 	and	r3, r3, r2
  137ec8:	e3530000 	cmp	r3, #0
  137ecc:	0a00000e 	beq	137f0c <ENET_CommonFrame0IRQHandler+0x1bc>
        {
            if(s_enetErrIsr)
  137ed0:	e30f3c08 	movw	r3, #64520	; 0xfc08
  137ed4:	e3403014 	movt	r3, #20
  137ed8:	e5933000 	ldr	r3, [r3]
  137edc:	e3530000 	cmp	r3, #0
  137ee0:	0a000009 	beq	137f0c <ENET_CommonFrame0IRQHandler+0x1bc>
            {
                s_enetErrIsr(base, s_ENETHandle[instance]);
  137ee4:	e30f3c08 	movw	r3, #64520	; 0xfc08
  137ee8:	e3403014 	movt	r3, #20
  137eec:	e5932000 	ldr	r2, [r3]
  137ef0:	e30f3bf8 	movw	r3, #64504	; 0xfbf8
  137ef4:	e3403014 	movt	r3, #20
  137ef8:	e51b100c 	ldr	r1, [fp, #-12]
  137efc:	e7933101 	ldr	r3, [r3, r1, lsl #2]
  137f00:	e1a01003 	mov	r1, r3
  137f04:	e51b0010 	ldr	r0, [fp, #-16]
  137f08:	e12fff32 	blx	r2
            }
        }
    }
}
  137f0c:	e320f000 	nop	{0}
  137f10:	e24bd004 	sub	sp, fp, #4
  137f14:	e8bd8800 	pop	{fp, pc}

00137f18 <ENET_DriverIRQHandler>:
void ENET_DriverIRQHandler(int irq, void *base)
{
  137f18:	e92d4800 	push	{fp, lr}
  137f1c:	e28db004 	add	fp, sp, #4
  137f20:	e24dd008 	sub	sp, sp, #8
  137f24:	e50b0008 	str	r0, [fp, #-8]
  137f28:	e50b100c 	str	r1, [fp, #-12]
    ENET_CommonFrame0IRQHandler((ENET_Type *)base);
  137f2c:	e51b000c 	ldr	r0, [fp, #-12]
  137f30:	ebffff86 	bl	137d50 <ENET_CommonFrame0IRQHandler>
  137f34:	e320f000 	nop	{0}
  137f38:	e24bd004 	sub	sp, fp, #4
  137f3c:	e8bd8800 	pop	{fp, pc}

00137f40 <GPIO_PinInit>:

//     return instance;
// }

void GPIO_PinInit(GPIO_Type* base, uint32_t pin, const gpio_pin_config_t* Config)
{
  137f40:	e92d4800 	push	{fp, lr}
  137f44:	e28db004 	add	fp, sp, #4
  137f48:	e24dd010 	sub	sp, sp, #16
  137f4c:	e50b0008 	str	r0, [fp, #-8]
  137f50:	e50b100c 	str	r1, [fp, #-12]
  137f54:	e50b2010 	str	r2, [fp, #-16]
//     /* Enable GPIO clock. */
//     CLOCK_EnableClock(s_gpioClock[GPIO_GetInstance(base)]);
// #endif /* FSL_SDK_DISABLE_DRIVER_CLOCK_CONTROL */

    /* Register reset to default value */
    base->IMR &= ~(1U << pin);
  137f58:	e51b3008 	ldr	r3, [fp, #-8]
  137f5c:	e5932014 	ldr	r2, [r3, #20]
  137f60:	e3a01001 	mov	r1, #1
  137f64:	e51b300c 	ldr	r3, [fp, #-12]
  137f68:	e1a03311 	lsl	r3, r1, r3
  137f6c:	e1e03003 	mvn	r3, r3
  137f70:	e0022003 	and	r2, r2, r3
  137f74:	e51b3008 	ldr	r3, [fp, #-8]
  137f78:	e5832014 	str	r2, [r3, #20]

    /* Configure GPIO pin direction */
    if (Config->direction == kGPIO_DigitalInput)
  137f7c:	e51b3010 	ldr	r3, [fp, #-16]
  137f80:	e5933000 	ldr	r3, [r3]
  137f84:	e3530000 	cmp	r3, #0
  137f88:	1a000009 	bne	137fb4 <GPIO_PinInit+0x74>
    {
        base->GDIR &= ~(1U << pin);
  137f8c:	e51b3008 	ldr	r3, [fp, #-8]
  137f90:	e5932004 	ldr	r2, [r3, #4]
  137f94:	e3a01001 	mov	r1, #1
  137f98:	e51b300c 	ldr	r3, [fp, #-12]
  137f9c:	e1a03311 	lsl	r3, r1, r3
  137fa0:	e1e03003 	mvn	r3, r3
  137fa4:	e0022003 	and	r2, r2, r3
  137fa8:	e51b3008 	ldr	r3, [fp, #-8]
  137fac:	e5832004 	str	r2, [r3, #4]
  137fb0:	ea00000d 	b	137fec <GPIO_PinInit+0xac>
    }
    else
    {
        GPIO_WritePinOutput(base, pin, Config->outputLogic);
  137fb4:	e51b3010 	ldr	r3, [fp, #-16]
  137fb8:	e5d33004 	ldrb	r3, [r3, #4]
  137fbc:	e1a02003 	mov	r2, r3
  137fc0:	e51b100c 	ldr	r1, [fp, #-12]
  137fc4:	e51b0008 	ldr	r0, [fp, #-8]
  137fc8:	eb000010 	bl	138010 <GPIO_WritePinOutput>
        base->GDIR |= (1U << pin);
  137fcc:	e51b3008 	ldr	r3, [fp, #-8]
  137fd0:	e5932004 	ldr	r2, [r3, #4]
  137fd4:	e3a01001 	mov	r1, #1
  137fd8:	e51b300c 	ldr	r3, [fp, #-12]
  137fdc:	e1a03311 	lsl	r3, r1, r3
  137fe0:	e1822003 	orr	r2, r2, r3
  137fe4:	e51b3008 	ldr	r3, [fp, #-8]
  137fe8:	e5832004 	str	r2, [r3, #4]
    }

    /* Configure GPIO pin interrupt mode */
    GPIO_SetPinInterruptConfig(base, pin, Config->interruptMode);
  137fec:	e51b3010 	ldr	r3, [fp, #-16]
  137ff0:	e5933008 	ldr	r3, [r3, #8]
  137ff4:	e1a02003 	mov	r2, r3
  137ff8:	e51b100c 	ldr	r1, [fp, #-12]
  137ffc:	e51b0008 	ldr	r0, [fp, #-8]
  138000:	eb00002c 	bl	1380b8 <GPIO_SetPinInterruptConfig>
}
  138004:	e320f000 	nop	{0}
  138008:	e24bd004 	sub	sp, fp, #4
  13800c:	e8bd8800 	pop	{fp, pc}

00138010 <GPIO_WritePinOutput>:

void GPIO_WritePinOutput(GPIO_Type* base, uint32_t pin, uint8_t output)
{
  138010:	e92d4800 	push	{fp, lr}
  138014:	e28db004 	add	fp, sp, #4
  138018:	e24dd010 	sub	sp, sp, #16
  13801c:	e50b0008 	str	r0, [fp, #-8]
  138020:	e50b100c 	str	r1, [fp, #-12]
  138024:	e1a03002 	mov	r3, r2
  138028:	e54b300d 	strb	r3, [fp, #-13]
    assert(pin < 32);
  13802c:	e51b300c 	ldr	r3, [fp, #-12]
  138030:	e353001f 	cmp	r3, #31
  138034:	9a000007 	bls	138058 <GPIO_WritePinOutput+0x48>
  138038:	e30a35dc 	movw	r3, #42460	; 0xa5dc
  13803c:	e3403014 	movt	r3, #20
  138040:	e3a0206a 	mov	r2, #106	; 0x6a
  138044:	e30a15a4 	movw	r1, #42404	; 0xa5a4
  138048:	e3401014 	movt	r1, #20
  13804c:	e30a05d0 	movw	r0, #42448	; 0xa5d0
  138050:	e3400014 	movt	r0, #20
  138054:	eb000445 	bl	139170 <__assert_fail>
    if (output == 0U)
  138058:	e55b300d 	ldrb	r3, [fp, #-13]
  13805c:	e3530000 	cmp	r3, #0
  138060:	1a000009 	bne	13808c <GPIO_WritePinOutput+0x7c>
    {
        base->DR &= ~(1U << pin);  /* Set pin output to low level.*/
  138064:	e51b3008 	ldr	r3, [fp, #-8]
  138068:	e5932000 	ldr	r2, [r3]
  13806c:	e3a01001 	mov	r1, #1
  138070:	e51b300c 	ldr	r3, [fp, #-12]
  138074:	e1a03311 	lsl	r3, r1, r3
  138078:	e1e03003 	mvn	r3, r3
  13807c:	e0022003 	and	r2, r2, r3
  138080:	e51b3008 	ldr	r3, [fp, #-8]
  138084:	e5832000 	str	r2, [r3]
    }
    else
    {
        base->DR |= (1U << pin);  /* Set pin output to high level.*/
    }
}
  138088:	ea000007 	b	1380ac <GPIO_WritePinOutput+0x9c>
        base->DR |= (1U << pin);  /* Set pin output to high level.*/
  13808c:	e51b3008 	ldr	r3, [fp, #-8]
  138090:	e5932000 	ldr	r2, [r3]
  138094:	e3a01001 	mov	r1, #1
  138098:	e51b300c 	ldr	r3, [fp, #-12]
  13809c:	e1a03311 	lsl	r3, r1, r3
  1380a0:	e1822003 	orr	r2, r2, r3
  1380a4:	e51b3008 	ldr	r3, [fp, #-8]
  1380a8:	e5832000 	str	r2, [r3]
}
  1380ac:	e320f000 	nop	{0}
  1380b0:	e24bd004 	sub	sp, fp, #4
  1380b4:	e8bd8800 	pop	{fp, pc}

001380b8 <GPIO_SetPinInterruptConfig>:

void GPIO_SetPinInterruptConfig(GPIO_Type* base, uint32_t pin, gpio_interrupt_mode_t pinInterruptMode)
{
  1380b8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1380bc:	e28db000 	add	fp, sp, #0
  1380c0:	e24dd01c 	sub	sp, sp, #28
  1380c4:	e50b0010 	str	r0, [fp, #-16]
  1380c8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  1380cc:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    volatile uint32_t *icr;
    uint32_t icrShift;

    icrShift = pin;
  1380d0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1380d4:	e50b300c 	str	r3, [fp, #-12]

    /* Register reset to default value */
    base->EDGE_SEL &= ~(1U << pin);
  1380d8:	e51b3010 	ldr	r3, [fp, #-16]
  1380dc:	e593201c 	ldr	r2, [r3, #28]
  1380e0:	e3a01001 	mov	r1, #1
  1380e4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  1380e8:	e1a03311 	lsl	r3, r1, r3
  1380ec:	e1e03003 	mvn	r3, r3
  1380f0:	e0022003 	and	r2, r2, r3
  1380f4:	e51b3010 	ldr	r3, [fp, #-16]
  1380f8:	e583201c 	str	r2, [r3, #28]

    if(pin < 16)
  1380fc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  138100:	e353000f 	cmp	r3, #15
  138104:	8a000003 	bhi	138118 <GPIO_SetPinInterruptConfig+0x60>
    {
        icr = &(base->ICR1);
  138108:	e51b3010 	ldr	r3, [fp, #-16]
  13810c:	e283300c 	add	r3, r3, #12
  138110:	e50b3008 	str	r3, [fp, #-8]
  138114:	ea000005 	b	138130 <GPIO_SetPinInterruptConfig+0x78>
    }
    else
    {
        icr = &(base->ICR2);
  138118:	e51b3010 	ldr	r3, [fp, #-16]
  13811c:	e2833010 	add	r3, r3, #16
  138120:	e50b3008 	str	r3, [fp, #-8]
        icrShift -= 16;
  138124:	e51b300c 	ldr	r3, [fp, #-12]
  138128:	e2433010 	sub	r3, r3, #16
  13812c:	e50b300c 	str	r3, [fp, #-12]
    }
    switch(pinInterruptMode)
  138130:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  138134:	e2433001 	sub	r3, r3, #1
  138138:	e3530004 	cmp	r3, #4
  13813c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  138140:	ea000042 	b	138250 <GPIO_SetPinInterruptConfig+0x198>
  138144:	00138158 	.word	0x00138158
  138148:	00138184 	.word	0x00138184
  13814c:	001381c4 	.word	0x001381c4
  138150:	00138204 	.word	0x00138204
  138154:	0013822c 	.word	0x0013822c
    {
        case(kGPIO_IntLowLevel):
            *icr &= ~(3U << (2 * icrShift));
  138158:	e51b3008 	ldr	r3, [fp, #-8]
  13815c:	e5932000 	ldr	r2, [r3]
  138160:	e51b300c 	ldr	r3, [fp, #-12]
  138164:	e1a03083 	lsl	r3, r3, #1
  138168:	e3a01003 	mov	r1, #3
  13816c:	e1a03311 	lsl	r3, r1, r3
  138170:	e1e03003 	mvn	r3, r3
  138174:	e0022003 	and	r2, r2, r3
  138178:	e51b3008 	ldr	r3, [fp, #-8]
  13817c:	e5832000 	str	r2, [r3]
            break;
  138180:	ea000033 	b	138254 <GPIO_SetPinInterruptConfig+0x19c>
        case(kGPIO_IntHighLevel):
            *icr = (*icr & (~(3U << (2 * icrShift)))) | (1U << (2 * icrShift));
  138184:	e51b3008 	ldr	r3, [fp, #-8]
  138188:	e5932000 	ldr	r2, [r3]
  13818c:	e51b300c 	ldr	r3, [fp, #-12]
  138190:	e1a03083 	lsl	r3, r3, #1
  138194:	e3a01003 	mov	r1, #3
  138198:	e1a03311 	lsl	r3, r1, r3
  13819c:	e1e03003 	mvn	r3, r3
  1381a0:	e0022003 	and	r2, r2, r3
  1381a4:	e51b300c 	ldr	r3, [fp, #-12]
  1381a8:	e1a03083 	lsl	r3, r3, #1
  1381ac:	e3a01001 	mov	r1, #1
  1381b0:	e1a03311 	lsl	r3, r1, r3
  1381b4:	e1822003 	orr	r2, r2, r3
  1381b8:	e51b3008 	ldr	r3, [fp, #-8]
  1381bc:	e5832000 	str	r2, [r3]
            break;
  1381c0:	ea000023 	b	138254 <GPIO_SetPinInterruptConfig+0x19c>
        case(kGPIO_IntRisingEdge):
            *icr = (*icr & (~(3U << (2 * icrShift)))) | (2U << (2 * icrShift));
  1381c4:	e51b3008 	ldr	r3, [fp, #-8]
  1381c8:	e5932000 	ldr	r2, [r3]
  1381cc:	e51b300c 	ldr	r3, [fp, #-12]
  1381d0:	e1a03083 	lsl	r3, r3, #1
  1381d4:	e3a01003 	mov	r1, #3
  1381d8:	e1a03311 	lsl	r3, r1, r3
  1381dc:	e1e03003 	mvn	r3, r3
  1381e0:	e0022003 	and	r2, r2, r3
  1381e4:	e51b300c 	ldr	r3, [fp, #-12]
  1381e8:	e1a03083 	lsl	r3, r3, #1
  1381ec:	e3a01002 	mov	r1, #2
  1381f0:	e1a03311 	lsl	r3, r1, r3
  1381f4:	e1822003 	orr	r2, r2, r3
  1381f8:	e51b3008 	ldr	r3, [fp, #-8]
  1381fc:	e5832000 	str	r2, [r3]
            break;
  138200:	ea000013 	b	138254 <GPIO_SetPinInterruptConfig+0x19c>
        case(kGPIO_IntFallingEdge):
            *icr |= (3U << (2 * icrShift));
  138204:	e51b3008 	ldr	r3, [fp, #-8]
  138208:	e5932000 	ldr	r2, [r3]
  13820c:	e51b300c 	ldr	r3, [fp, #-12]
  138210:	e1a03083 	lsl	r3, r3, #1
  138214:	e3a01003 	mov	r1, #3
  138218:	e1a03311 	lsl	r3, r1, r3
  13821c:	e1822003 	orr	r2, r2, r3
  138220:	e51b3008 	ldr	r3, [fp, #-8]
  138224:	e5832000 	str	r2, [r3]
            break;
  138228:	ea000009 	b	138254 <GPIO_SetPinInterruptConfig+0x19c>
        case(kGPIO_IntRisingOrFallingEdge):
            base->EDGE_SEL |= (1U << pin);
  13822c:	e51b3010 	ldr	r3, [fp, #-16]
  138230:	e593201c 	ldr	r2, [r3, #28]
  138234:	e3a01001 	mov	r1, #1
  138238:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  13823c:	e1a03311 	lsl	r3, r1, r3
  138240:	e1822003 	orr	r2, r2, r3
  138244:	e51b3010 	ldr	r3, [fp, #-16]
  138248:	e583201c 	str	r2, [r3, #28]
            break;
  13824c:	ea000000 	b	138254 <GPIO_SetPinInterruptConfig+0x19c>
        default:
            break;
  138250:	e320f000 	nop	{0}
    }
}
  138254:	e320f000 	nop	{0}
  138258:	e28bd000 	add	sp, fp, #0
  13825c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  138260:	e12fff1e 	bx	lr

00138264 <ENET_ReadSMIData>:
{
  138264:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  138268:	e28db000 	add	fp, sp, #0
  13826c:	e24dd00c 	sub	sp, sp, #12
  138270:	e50b0008 	str	r0, [fp, #-8]
    return (uint32_t)((base->MMFR & ENET_MMFR_DATA_MASK) >> ENET_MMFR_DATA_SHIFT);
  138274:	e51b3008 	ldr	r3, [fp, #-8]
  138278:	e5933040 	ldr	r3, [r3, #64]	; 0x40
  13827c:	e6ff3073 	uxth	r3, r3
}
  138280:	e1a00003 	mov	r0, r3
  138284:	e28bd000 	add	sp, fp, #0
  138288:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  13828c:	e12fff1e 	bx	lr

00138290 <ENET_GetInterruptStatus>:
 * @param base  ENET peripheral base address.
 * @return The event status of the interrupt source. This is the logical OR of members
 *         of the enumeration :: enet_interrupt_enable_t.
 */
static inline uint32_t ENET_GetInterruptStatus(ENET_Type *base)
{
  138290:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  138294:	e28db000 	add	fp, sp, #0
  138298:	e24dd00c 	sub	sp, sp, #12
  13829c:	e50b0008 	str	r0, [fp, #-8]
    return base->EIR;
  1382a0:	e51b3008 	ldr	r3, [fp, #-8]
  1382a4:	e5933004 	ldr	r3, [r3, #4]
}
  1382a8:	e1a00003 	mov	r0, r3
  1382ac:	e28bd000 	add	sp, fp, #0
  1382b0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1382b4:	e12fff1e 	bx	lr

001382b8 <ENET_ClearInterruptStatus>:
 * @param base  ENET peripheral base address.
 * @param mask  ENET interrupt source to be cleared.
 * This is the logical OR of members of the enumeration :: enet_interrupt_enable_t.
 */
static inline void ENET_ClearInterruptStatus(ENET_Type *base, uint32_t mask)
{
  1382b8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
  1382bc:	e28db000 	add	fp, sp, #0
  1382c0:	e24dd00c 	sub	sp, sp, #12
  1382c4:	e50b0008 	str	r0, [fp, #-8]
  1382c8:	e50b100c 	str	r1, [fp, #-12]
    base->EIR = mask;
  1382cc:	e51b3008 	ldr	r3, [fp, #-8]
  1382d0:	e51b200c 	ldr	r2, [fp, #-12]
  1382d4:	e5832004 	str	r2, [r3, #4]
}
  1382d8:	e320f000 	nop	{0}
  1382dc:	e28bd000 	add	sp, fp, #0
  1382e0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
  1382e4:	e12fff1e 	bx	lr

001382e8 <phy_reset>:

/*******************************************************************************
 * Code
 ******************************************************************************/
status_t phy_reset(GPIO_Type *base,uint32_t pin)
{
  1382e8:	e92d4800 	push	{fp, lr}
  1382ec:	e28db004 	add	fp, sp, #4
  1382f0:	e24dd018 	sub	sp, sp, #24
  1382f4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1382f8:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    GPIO_Type *gpio_base = NULL;
  1382fc:	e3a03000 	mov	r3, #0
  138300:	e50b3008 	str	r3, [fp, #-8]
    gpio_pin_config_t sw_config =
  138304:	e3a03001 	mov	r3, #1
  138308:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
  13830c:	e3a03000 	mov	r3, #0
  138310:	e54b3010 	strb	r3, [fp, #-16]
  138314:	e3a03000 	mov	r3, #0
  138318:	e50b300c 	str	r3, [fp, #-12]
        0,
        kGPIO_NoIntmode,
    };

    // gpio_base = (GPIO_Type *)rt_ioremap((void *)base,0x1000);
    gpio_base = (GPIO_Type *)ueth_remap((void *)base, UETH_REMAP, 0x1000);
  13831c:	e3a02a01 	mov	r2, #4096	; 0x1000
  138320:	e3a01001 	mov	r1, #1
  138324:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  138328:	ebff3061 	bl	1044b4 <ueth_remap>
  13832c:	e50b0008 	str	r0, [fp, #-8]
    GPIO_PinInit(gpio_base, pin, &sw_config);
  138330:	e24b3014 	sub	r3, fp, #20
  138334:	e1a02003 	mov	r2, r3
  138338:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  13833c:	e51b0008 	ldr	r0, [fp, #-8]
  138340:	ebfffefe 	bl	137f40 <GPIO_PinInit>
    GPIO_WritePinOutput(gpio_base,pin,0);
  138344:	e3a02000 	mov	r2, #0
  138348:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  13834c:	e51b0008 	ldr	r0, [fp, #-8]
  138350:	ebffff2e 	bl	138010 <GPIO_WritePinOutput>
    rt_thread_mdelay(1);
  138354:	e3a00001 	mov	r0, #1
  138358:	ebff26c7 	bl	101e7c <rt_thread_mdelay>
    GPIO_WritePinOutput(gpio_base,pin,1);
  13835c:	e3a02001 	mov	r2, #1
  138360:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  138364:	e51b0008 	ldr	r0, [fp, #-8]
  138368:	ebffff28 	bl	138010 <GPIO_WritePinOutput>

    return kStatus_Success;
  13836c:	e3a03000 	mov	r3, #0

}
  138370:	e1a00003 	mov	r0, r3
  138374:	e24bd004 	sub	sp, fp, #4
  138378:	e8bd8800 	pop	{fp, pc}

0013837c <PHY_StartNegotiation>:

status_t PHY_StartNegotiation(ENET_Type *base, uint32_t phyAddr)
{
  13837c:	e92d4800 	push	{fp, lr}
  138380:	e28db004 	add	fp, sp, #4
  138384:	e24dd018 	sub	sp, sp, #24
  138388:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  13838c:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    uint32_t counter = PHY_TIMEOUT_COUNT;
  138390:	e3e034fb 	mvn	r3, #-83886080	; 0xfb000000
  138394:	e50b3008 	str	r3, [fp, #-8]
    status_t result = kStatus_Success;
  138398:	e3a03000 	mov	r3, #0
  13839c:	e50b3010 	str	r3, [fp, #-16]
    uint32_t bssReg;
    uint32_t timeDelay;

    result = PHY_Write(base, phyAddr, PHY_BASICCONTROL_REG, PHY_BCTL_RESET_MASK);
  1383a0:	e3a03902 	mov	r3, #32768	; 0x8000
  1383a4:	e3a02000 	mov	r2, #0
  1383a8:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  1383ac:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1383b0:	eb000071 	bl	13857c <PHY_Write>
  1383b4:	e50b0010 	str	r0, [fp, #-16]
    if (result == kStatus_Success)
  1383b8:	e51b3010 	ldr	r3, [fp, #-16]
  1383bc:	e3530000 	cmp	r3, #0
  1383c0:	1a000038 	bne	1384a8 <PHY_StartNegotiation+0x12c>
        {
            return result;
        }
#endif  /* FSL_FEATURE_PHYKSZ8081_USE_RMII50M_MODE */
        /* Set the negotiation. */
        result = PHY_Write(base, phyAddr, PHY_AUTONEG_ADVERTISE_REG,
  1383c4:	e30031e1 	movw	r3, #481	; 0x1e1
  1383c8:	e3a02004 	mov	r2, #4
  1383cc:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  1383d0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1383d4:	eb000068 	bl	13857c <PHY_Write>
  1383d8:	e50b0010 	str	r0, [fp, #-16]
                           (PHY_100BASETX_FULLDUPLEX_MASK | PHY_100BASETX_HALFDUPLEX_MASK |
                            PHY_10BASETX_FULLDUPLEX_MASK | PHY_10BASETX_HALFDUPLEX_MASK | 0x1U));
        if (result == kStatus_Success)
  1383dc:	e51b3010 	ldr	r3, [fp, #-16]
  1383e0:	e3530000 	cmp	r3, #0
  1383e4:	1a00002f 	bne	1384a8 <PHY_StartNegotiation+0x12c>
        {
            result = PHY_Write(base, phyAddr, PHY_BASICCONTROL_REG,
  1383e8:	e3a03c12 	mov	r3, #4608	; 0x1200
  1383ec:	e3a02000 	mov	r2, #0
  1383f0:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  1383f4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1383f8:	eb00005f 	bl	13857c <PHY_Write>
  1383fc:	e50b0010 	str	r0, [fp, #-16]
                               (PHY_BCTL_AUTONEG_MASK | PHY_BCTL_RESTART_AUTONEG_MASK));
            if (result == kStatus_Success)
  138400:	e51b3010 	ldr	r3, [fp, #-16]
  138404:	e3530000 	cmp	r3, #0
  138408:	1a000026 	bne	1384a8 <PHY_StartNegotiation+0x12c>
            {
                /* Check auto negotiation complete. */
                while (counter --)
  13840c:	ea000020 	b	138494 <PHY_StartNegotiation+0x118>
                {
                    result = PHY_Read(base, phyAddr, PHY_BASICSTATUS_REG, &bssReg);
  138410:	e24b3014 	sub	r3, fp, #20
  138414:	e3a02001 	mov	r2, #1
  138418:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  13841c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  138420:	eb000083 	bl	138634 <PHY_Read>
  138424:	e50b0010 	str	r0, [fp, #-16]
                    if ( result == kStatus_Success)
  138428:	e51b3010 	ldr	r3, [fp, #-16]
  13842c:	e3530000 	cmp	r3, #0
  138430:	1a000010 	bne	138478 <PHY_StartNegotiation+0xfc>
                    {
                        if ((bssReg & PHY_BSTATUS_AUTONEGCOMP_MASK) != 0)
  138434:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
  138438:	e2033020 	and	r3, r3, #32
  13843c:	e3530000 	cmp	r3, #0
  138440:	0a00000c 	beq	138478 <PHY_StartNegotiation+0xfc>
                        {
                            /* Wait a moment for Phy status stable. */
                            for (timeDelay = 0; timeDelay < PHY_TIMEOUT_COUNT; timeDelay ++)
  138444:	e3a03000 	mov	r3, #0
  138448:	e50b300c 	str	r3, [fp, #-12]
  13844c:	ea000003 	b	138460 <PHY_StartNegotiation+0xe4>
                            {
                                __ASM("nop");
  138450:	e320f000 	nop	{0}
                            for (timeDelay = 0; timeDelay < PHY_TIMEOUT_COUNT; timeDelay ++)
  138454:	e51b300c 	ldr	r3, [fp, #-12]
  138458:	e2833001 	add	r3, r3, #1
  13845c:	e50b300c 	str	r3, [fp, #-12]
  138460:	e51b200c 	ldr	r2, [fp, #-12]
  138464:	e30f3ffe 	movw	r3, #65534	; 0xfffe
  138468:	e34034ff 	movt	r3, #1279	; 0x4ff
  13846c:	e1520003 	cmp	r2, r3
  138470:	9afffff6 	bls	138450 <PHY_StartNegotiation+0xd4>
                            }
                            break;
  138474:	ea00000b 	b	1384a8 <PHY_StartNegotiation+0x12c>
                        }
                    }
                    // rt_thread_delay(PHY_NEGOTIATION_DELAY);
                    rt_thread_mdelay(PHY_NEGOTIATION_DELAY);
  138478:	e3a00064 	mov	r0, #100	; 0x64
  13847c:	ebff267e 	bl	101e7c <rt_thread_mdelay>
                    if (!counter)
  138480:	e51b3008 	ldr	r3, [fp, #-8]
  138484:	e3530000 	cmp	r3, #0
  138488:	1a000001 	bne	138494 <PHY_StartNegotiation+0x118>
                    {
                        return kStatus_PHY_AutoNegotiateFail;
  13848c:	e3013006 	movw	r3, #4102	; 0x1006
  138490:	ea000005 	b	1384ac <PHY_StartNegotiation+0x130>
                while (counter --)
  138494:	e51b3008 	ldr	r3, [fp, #-8]
  138498:	e2432001 	sub	r2, r3, #1
  13849c:	e50b2008 	str	r2, [fp, #-8]
  1384a0:	e3530000 	cmp	r3, #0
  1384a4:	1affffd9 	bne	138410 <PHY_StartNegotiation+0x94>
                    }
                }
            }
        }
    }
    return kStatus_Success;
  1384a8:	e3a03000 	mov	r3, #0
}
  1384ac:	e1a00003 	mov	r0, r3
  1384b0:	e24bd004 	sub	sp, fp, #4
  1384b4:	e8bd8800 	pop	{fp, pc}

001384b8 <PHY_Init>:

status_t PHY_Init(ENET_Type *base, uint32_t phyAddr, uint32_t srcClock_Hz,uint32_t phy_id)
{
  1384b8:	e92d4800 	push	{fp, lr}
  1384bc:	e28db004 	add	fp, sp, #4
  1384c0:	e24dd020 	sub	sp, sp, #32
  1384c4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  1384c8:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  1384cc:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  1384d0:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    uint32_t counter = PHY_TIMEOUT_COUNT;
  1384d4:	e3e034fb 	mvn	r3, #-83886080	; 0xfb000000
  1384d8:	e50b3008 	str	r3, [fp, #-8]
    uint32_t idReg = 0;
  1384dc:	e3a03000 	mov	r3, #0
  1384e0:	e50b3010 	str	r3, [fp, #-16]
    status_t result = kStatus_Success;
  1384e4:	e3a03000 	mov	r3, #0
  1384e8:	e50b300c 	str	r3, [fp, #-12]

    ENET_SetSMI(base, srcClock_Hz, false);
  1384ec:	e3a02000 	mov	r2, #0
  1384f0:	e51b1020 	ldr	r1, [fp, #-32]	; 0xffffffe0
  1384f4:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  1384f8:	ebfffa3c 	bl	136df0 <ENET_SetSMI>
    PHY_Read(base, phyAddr, PHY_ID1_REG, &idReg);
  1384fc:	e24b3010 	sub	r3, fp, #16
  138500:	e3a02002 	mov	r2, #2
  138504:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  138508:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  13850c:	eb000048 	bl	138634 <PHY_Read>
    while ((idReg != phy_id) && (counter != 0))
  138510:	ea000007 	b	138534 <PHY_Init+0x7c>
    {
        PHY_Read(base, phyAddr, PHY_ID1_REG, &idReg);
  138514:	e24b3010 	sub	r3, fp, #16
  138518:	e3a02002 	mov	r2, #2
  13851c:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  138520:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  138524:	eb000042 	bl	138634 <PHY_Read>
        counter --;
  138528:	e51b3008 	ldr	r3, [fp, #-8]
  13852c:	e2433001 	sub	r3, r3, #1
  138530:	e50b3008 	str	r3, [fp, #-8]
    while ((idReg != phy_id) && (counter != 0))
  138534:	e51b3010 	ldr	r3, [fp, #-16]
  138538:	e51b2024 	ldr	r2, [fp, #-36]	; 0xffffffdc
  13853c:	e1520003 	cmp	r2, r3
  138540:	0a000002 	beq	138550 <PHY_Init+0x98>
  138544:	e51b3008 	ldr	r3, [fp, #-8]
  138548:	e3530000 	cmp	r3, #0
  13854c:	1afffff0 	bne	138514 <PHY_Init+0x5c>
    }
    if (!counter)
  138550:	e51b3008 	ldr	r3, [fp, #-8]
  138554:	e3530000 	cmp	r3, #0
  138558:	1a000001 	bne	138564 <PHY_Init+0xac>
    {
        return kStatus_Fail;
  13855c:	e3a03001 	mov	r3, #1
  138560:	ea000002 	b	138570 <PHY_Init+0xb8>
    }
    /* Reset PHY. */
    counter = PHY_TIMEOUT_COUNT;
  138564:	e3e034fb 	mvn	r3, #-83886080	; 0xfb000000
  138568:	e50b3008 	str	r3, [fp, #-8]
    return result;
  13856c:	e51b300c 	ldr	r3, [fp, #-12]
}
  138570:	e1a00003 	mov	r0, r3
  138574:	e24bd004 	sub	sp, fp, #4
  138578:	e8bd8800 	pop	{fp, pc}

0013857c <PHY_Write>:

status_t PHY_Write(ENET_Type *base, uint32_t phyAddr, uint32_t phyReg, uint32_t data)
{
  13857c:	e92d4800 	push	{fp, lr}
  138580:	e28db004 	add	fp, sp, #4
  138584:	e24dd020 	sub	sp, sp, #32
  138588:	e50b0010 	str	r0, [fp, #-16]
  13858c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  138590:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  138594:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    uint32_t counter;

    /* Clear the SMI interrupt event. */
    ENET_ClearInterruptStatus(base, ENET_EIR_MII_MASK);
  138598:	e3a01502 	mov	r1, #8388608	; 0x800000
  13859c:	e51b0010 	ldr	r0, [fp, #-16]
  1385a0:	ebffff44 	bl	1382b8 <ENET_ClearInterruptStatus>

    /* Starts a SMI write command. */
    ENET_StartSMIWrite(base, phyAddr, phyReg, kENET_MiiWriteValidFrame, data);
  1385a4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1385a8:	e58d3000 	str	r3, [sp]
  1385ac:	e3a03001 	mov	r3, #1
  1385b0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  1385b4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1385b8:	e51b0010 	ldr	r0, [fp, #-16]
  1385bc:	ebfffa4a 	bl	136eec <ENET_StartSMIWrite>

    /* Wait for SMI complete. */
    for (counter = PHY_TIMEOUT_COUNT; counter > 0; counter--)
  1385c0:	e3e034fb 	mvn	r3, #-83886080	; 0xfb000000
  1385c4:	e50b3008 	str	r3, [fp, #-8]
  1385c8:	ea000008 	b	1385f0 <PHY_Write+0x74>
    {
        if (ENET_GetInterruptStatus(base) & ENET_EIR_MII_MASK)
  1385cc:	e51b0010 	ldr	r0, [fp, #-16]
  1385d0:	ebffff2e 	bl	138290 <ENET_GetInterruptStatus>
  1385d4:	e1a03000 	mov	r3, r0
  1385d8:	e2033502 	and	r3, r3, #8388608	; 0x800000
  1385dc:	e3530000 	cmp	r3, #0
  1385e0:	1a000006 	bne	138600 <PHY_Write+0x84>
    for (counter = PHY_TIMEOUT_COUNT; counter > 0; counter--)
  1385e4:	e51b3008 	ldr	r3, [fp, #-8]
  1385e8:	e2433001 	sub	r3, r3, #1
  1385ec:	e50b3008 	str	r3, [fp, #-8]
  1385f0:	e51b3008 	ldr	r3, [fp, #-8]
  1385f4:	e3530000 	cmp	r3, #0
  1385f8:	1afffff3 	bne	1385cc <PHY_Write+0x50>
  1385fc:	ea000000 	b	138604 <PHY_Write+0x88>
        {
            break;
  138600:	e320f000 	nop	{0}
        }
    }

    /* Check for timeout. */
    if (!counter)
  138604:	e51b3008 	ldr	r3, [fp, #-8]
  138608:	e3530000 	cmp	r3, #0
  13860c:	1a000001 	bne	138618 <PHY_Write+0x9c>
    {
        return kStatus_PHY_SMIVisitTimeout;
  138610:	e3013005 	movw	r3, #4101	; 0x1005
  138614:	ea000003 	b	138628 <PHY_Write+0xac>
    }

    /* Clear MII interrupt event. */
    ENET_ClearInterruptStatus(base, ENET_EIR_MII_MASK);
  138618:	e3a01502 	mov	r1, #8388608	; 0x800000
  13861c:	e51b0010 	ldr	r0, [fp, #-16]
  138620:	ebffff24 	bl	1382b8 <ENET_ClearInterruptStatus>

    return kStatus_Success;
  138624:	e3a03000 	mov	r3, #0
}
  138628:	e1a00003 	mov	r0, r3
  13862c:	e24bd004 	sub	sp, fp, #4
  138630:	e8bd8800 	pop	{fp, pc}

00138634 <PHY_Read>:

status_t PHY_Read(ENET_Type *base, uint32_t phyAddr, uint32_t phyReg, uint32_t *dataPtr)
{
  138634:	e92d4800 	push	{fp, lr}
  138638:	e28db004 	add	fp, sp, #4
  13863c:	e24dd018 	sub	sp, sp, #24
  138640:	e50b0010 	str	r0, [fp, #-16]
  138644:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  138648:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  13864c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
    RT_ASSERT(dataPtr);
  138650:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  138654:	e3530000 	cmp	r3, #0
  138658:	1a000005 	bne	138674 <PHY_Read+0x40>
  13865c:	e3a020d0 	mov	r2, #208	; 0xd0
  138660:	e30a1608 	movw	r1, #42504	; 0xa608
  138664:	e3401014 	movt	r1, #20
  138668:	e30a05f0 	movw	r0, #42480	; 0xa5f0
  13866c:	e3400014 	movt	r0, #20
  138670:	ebff2bc8 	bl	103598 <rt_assert_handler>

    uint32_t counter;

    /* Clear the MII interrupt event. */
    ENET_ClearInterruptStatus(base, ENET_EIR_MII_MASK);
  138674:	e3a01502 	mov	r1, #8388608	; 0x800000
  138678:	e51b0010 	ldr	r0, [fp, #-16]
  13867c:	ebffff0d 	bl	1382b8 <ENET_ClearInterruptStatus>

    /* Starts a SMI read command operation. */
    ENET_StartSMIRead(base, phyAddr, phyReg, kENET_MiiReadValidFrame);
  138680:	e3a03002 	mov	r3, #2
  138684:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
  138688:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  13868c:	e51b0010 	ldr	r0, [fp, #-16]
  138690:	ebfffa36 	bl	136f70 <ENET_StartSMIRead>

    /* Wait for MII complete. */
    for (counter = PHY_TIMEOUT_COUNT; counter > 0; counter--)
  138694:	e3e034fb 	mvn	r3, #-83886080	; 0xfb000000
  138698:	e50b3008 	str	r3, [fp, #-8]
  13869c:	ea000008 	b	1386c4 <PHY_Read+0x90>
    {
        if (ENET_GetInterruptStatus(base) & ENET_EIR_MII_MASK)
  1386a0:	e51b0010 	ldr	r0, [fp, #-16]
  1386a4:	ebfffef9 	bl	138290 <ENET_GetInterruptStatus>
  1386a8:	e1a03000 	mov	r3, r0
  1386ac:	e2033502 	and	r3, r3, #8388608	; 0x800000
  1386b0:	e3530000 	cmp	r3, #0
  1386b4:	1a000006 	bne	1386d4 <PHY_Read+0xa0>
    for (counter = PHY_TIMEOUT_COUNT; counter > 0; counter--)
  1386b8:	e51b3008 	ldr	r3, [fp, #-8]
  1386bc:	e2433001 	sub	r3, r3, #1
  1386c0:	e50b3008 	str	r3, [fp, #-8]
  1386c4:	e51b3008 	ldr	r3, [fp, #-8]
  1386c8:	e3530000 	cmp	r3, #0
  1386cc:	1afffff3 	bne	1386a0 <PHY_Read+0x6c>
  1386d0:	ea000000 	b	1386d8 <PHY_Read+0xa4>
        {
            break;
  1386d4:	e320f000 	nop	{0}
        }
    }

    /* Check for timeout. */
    if (!counter)
  1386d8:	e51b3008 	ldr	r3, [fp, #-8]
  1386dc:	e3530000 	cmp	r3, #0
  1386e0:	1a000001 	bne	1386ec <PHY_Read+0xb8>
    {
        return kStatus_PHY_SMIVisitTimeout;
  1386e4:	e3013005 	movw	r3, #4101	; 0x1005
  1386e8:	ea000008 	b	138710 <PHY_Read+0xdc>
    }

    /* Get data from MII register. */
    *dataPtr = ENET_ReadSMIData(base);
  1386ec:	e51b0010 	ldr	r0, [fp, #-16]
  1386f0:	ebfffedb 	bl	138264 <ENET_ReadSMIData>
  1386f4:	e1a02000 	mov	r2, r0
  1386f8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
  1386fc:	e5832000 	str	r2, [r3]

    /* Clear MII interrupt event. */
    ENET_ClearInterruptStatus(base, ENET_EIR_MII_MASK);
  138700:	e3a01502 	mov	r1, #8388608	; 0x800000
  138704:	e51b0010 	ldr	r0, [fp, #-16]
  138708:	ebfffeea 	bl	1382b8 <ENET_ClearInterruptStatus>

    return kStatus_Success;
  13870c:	e3a03000 	mov	r3, #0
}
  138710:	e1a00003 	mov	r0, r3
  138714:	e24bd004 	sub	sp, fp, #4
  138718:	e8bd8800 	pop	{fp, pc}

0013871c <PHY_EnableLoopback>:

status_t PHY_EnableLoopback(ENET_Type *base, uint32_t phyAddr, phy_loop_t mode, bool enable)
{
  13871c:	e92d4800 	push	{fp, lr}
  138720:	e28db004 	add	fp, sp, #4
  138724:	e24dd018 	sub	sp, sp, #24
  138728:	e50b0010 	str	r0, [fp, #-16]
  13872c:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  138730:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
  138734:	e54b3019 	strb	r3, [fp, #-25]	; 0xffffffe7
    status_t result;
    uint32_t data = 0;
  138738:	e3a03000 	mov	r3, #0
  13873c:	e50b300c 	str	r3, [fp, #-12]

    /* Set the loop mode. */
    if (enable)
  138740:	e55b3019 	ldrb	r3, [fp, #-25]	; 0xffffffe7
  138744:	e3530000 	cmp	r3, #0
  138748:	0a000024 	beq	1387e0 <PHY_EnableLoopback+0xc4>
    {
        if (mode == kPHY_LocalLoop)
  13874c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  138750:	e3530000 	cmp	r3, #0
  138754:	1a000010 	bne	13879c <PHY_EnableLoopback+0x80>
        {
            /* First read the current status in control register. */
            result = PHY_Read(base, phyAddr, PHY_BASICCONTROL_REG, &data);
  138758:	e24b300c 	sub	r3, fp, #12
  13875c:	e3a02000 	mov	r2, #0
  138760:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  138764:	e51b0010 	ldr	r0, [fp, #-16]
  138768:	ebffffb1 	bl	138634 <PHY_Read>
  13876c:	e50b0008 	str	r0, [fp, #-8]
            if (result == kStatus_Success)
  138770:	e51b3008 	ldr	r3, [fp, #-8]
  138774:	e3530000 	cmp	r3, #0
  138778:	1a00003d 	bne	138874 <PHY_EnableLoopback+0x158>
            {
                return PHY_Write(base, phyAddr, PHY_BASICCONTROL_REG, (data | PHY_BCTL_LOOP_MASK));
  13877c:	e51b300c 	ldr	r3, [fp, #-12]
  138780:	e3833901 	orr	r3, r3, #16384	; 0x4000
  138784:	e3a02000 	mov	r2, #0
  138788:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  13878c:	e51b0010 	ldr	r0, [fp, #-16]
  138790:	ebffff79 	bl	13857c <PHY_Write>
  138794:	e1a03000 	mov	r3, r0
  138798:	ea000036 	b	138878 <PHY_EnableLoopback+0x15c>
            }
        }
        else
        {
            /* First read the current status in control register. */
            result = PHY_Read(base, phyAddr, PHY_CONTROL2_REG, &data);
  13879c:	e24b300c 	sub	r3, fp, #12
  1387a0:	e3a0201f 	mov	r2, #31
  1387a4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1387a8:	e51b0010 	ldr	r0, [fp, #-16]
  1387ac:	ebffffa0 	bl	138634 <PHY_Read>
  1387b0:	e50b0008 	str	r0, [fp, #-8]
            if (result == kStatus_Success)
  1387b4:	e51b3008 	ldr	r3, [fp, #-8]
  1387b8:	e3530000 	cmp	r3, #0
  1387bc:	1a00002c 	bne	138874 <PHY_EnableLoopback+0x158>
            {
                return PHY_Write(base, phyAddr, PHY_CONTROL2_REG, (data | PHY_CTL2_REMOTELOOP_MASK));
  1387c0:	e51b300c 	ldr	r3, [fp, #-12]
  1387c4:	e3833004 	orr	r3, r3, #4
  1387c8:	e3a0201f 	mov	r2, #31
  1387cc:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1387d0:	e51b0010 	ldr	r0, [fp, #-16]
  1387d4:	ebffff68 	bl	13857c <PHY_Write>
  1387d8:	e1a03000 	mov	r3, r0
  1387dc:	ea000025 	b	138878 <PHY_EnableLoopback+0x15c>
        }
    }
    else
    {
        /* Disable the loop mode. */
        if (mode == kPHY_LocalLoop)
  1387e0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1387e4:	e3530000 	cmp	r3, #0
  1387e8:	1a000010 	bne	138830 <PHY_EnableLoopback+0x114>
        {
            /* First read the current status in the basic control register. */
            result = PHY_Read(base, phyAddr, PHY_BASICCONTROL_REG, &data);
  1387ec:	e24b300c 	sub	r3, fp, #12
  1387f0:	e3a02000 	mov	r2, #0
  1387f4:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1387f8:	e51b0010 	ldr	r0, [fp, #-16]
  1387fc:	ebffff8c 	bl	138634 <PHY_Read>
  138800:	e50b0008 	str	r0, [fp, #-8]
            if (result == kStatus_Success)
  138804:	e51b3008 	ldr	r3, [fp, #-8]
  138808:	e3530000 	cmp	r3, #0
  13880c:	1a000018 	bne	138874 <PHY_EnableLoopback+0x158>
            {
                return PHY_Write(base, phyAddr, PHY_BASICCONTROL_REG, (data & ~PHY_BCTL_LOOP_MASK));
  138810:	e51b300c 	ldr	r3, [fp, #-12]
  138814:	e3c33901 	bic	r3, r3, #16384	; 0x4000
  138818:	e3a02000 	mov	r2, #0
  13881c:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  138820:	e51b0010 	ldr	r0, [fp, #-16]
  138824:	ebffff54 	bl	13857c <PHY_Write>
  138828:	e1a03000 	mov	r3, r0
  13882c:	ea000011 	b	138878 <PHY_EnableLoopback+0x15c>
            }
        }
        else
        {
            /* First read the current status in control one register. */
            result = PHY_Read(base, phyAddr, PHY_CONTROL2_REG, &data);
  138830:	e24b300c 	sub	r3, fp, #12
  138834:	e3a0201f 	mov	r2, #31
  138838:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  13883c:	e51b0010 	ldr	r0, [fp, #-16]
  138840:	ebffff7b 	bl	138634 <PHY_Read>
  138844:	e50b0008 	str	r0, [fp, #-8]
            if (result == kStatus_Success)
  138848:	e51b3008 	ldr	r3, [fp, #-8]
  13884c:	e3530000 	cmp	r3, #0
  138850:	1a000007 	bne	138874 <PHY_EnableLoopback+0x158>
            {
                return PHY_Write(base, phyAddr, PHY_CONTROL2_REG, (data & ~PHY_CTL2_REMOTELOOP_MASK));
  138854:	e51b300c 	ldr	r3, [fp, #-12]
  138858:	e3c33004 	bic	r3, r3, #4
  13885c:	e3a0201f 	mov	r2, #31
  138860:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  138864:	e51b0010 	ldr	r0, [fp, #-16]
  138868:	ebffff43 	bl	13857c <PHY_Write>
  13886c:	e1a03000 	mov	r3, r0
  138870:	ea000000 	b	138878 <PHY_EnableLoopback+0x15c>
            }
        }
    }
    return result;
  138874:	e51b3008 	ldr	r3, [fp, #-8]
}
  138878:	e1a00003 	mov	r0, r3
  13887c:	e24bd004 	sub	sp, fp, #4
  138880:	e8bd8800 	pop	{fp, pc}

00138884 <PHY_GetLinkStatus>:

status_t PHY_GetLinkStatus(ENET_Type *base, uint32_t phyAddr, bool *status)
{
  138884:	e92d4800 	push	{fp, lr}
  138888:	e28db004 	add	fp, sp, #4
  13888c:	e24dd018 	sub	sp, sp, #24
  138890:	e50b0010 	str	r0, [fp, #-16]
  138894:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
  138898:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
    RT_ASSERT(status);
  13889c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  1388a0:	e3530000 	cmp	r3, #0
  1388a4:	1a000005 	bne	1388c0 <PHY_GetLinkStatus+0x3c>
  1388a8:	e3a02f4a 	mov	r2, #296	; 0x128
  1388ac:	e30a1614 	movw	r1, #42516	; 0xa614
  1388b0:	e3401014 	movt	r1, #20
  1388b4:	e30a05f8 	movw	r0, #42488	; 0xa5f8
  1388b8:	e3400014 	movt	r0, #20
  1388bc:	ebff2b35 	bl	103598 <rt_assert_handler>

    status_t result = kStatus_Success;
  1388c0:	e3a03000 	mov	r3, #0
  1388c4:	e50b3008 	str	r3, [fp, #-8]
    uint32_t data;

    /* Read the basic status register. */
    result = PHY_Read(base, phyAddr, PHY_BASICSTATUS_REG, &data);
  1388c8:	e24b300c 	sub	r3, fp, #12
  1388cc:	e3a02001 	mov	r2, #1
  1388d0:	e51b1014 	ldr	r1, [fp, #-20]	; 0xffffffec
  1388d4:	e51b0010 	ldr	r0, [fp, #-16]
  1388d8:	ebffff55 	bl	138634 <PHY_Read>
  1388dc:	e50b0008 	str	r0, [fp, #-8]
    if (result == kStatus_Success)
  1388e0:	e51b3008 	ldr	r3, [fp, #-8]
  1388e4:	e3530000 	cmp	r3, #0
  1388e8:	1a00000a 	bne	138918 <PHY_GetLinkStatus+0x94>
    {
        if (!(PHY_BSTATUS_LINKSTATUS_MASK & data))
  1388ec:	e51b300c 	ldr	r3, [fp, #-12]
  1388f0:	e2033004 	and	r3, r3, #4
  1388f4:	e3530000 	cmp	r3, #0
  1388f8:	1a000003 	bne	13890c <PHY_GetLinkStatus+0x88>
        {
            /* link down. */
            *status = false;
  1388fc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  138900:	e3a02000 	mov	r2, #0
  138904:	e5c32000 	strb	r2, [r3]
  138908:	ea000002 	b	138918 <PHY_GetLinkStatus+0x94>
        }
        else
        {
            /* link up. */
            *status = true;
  13890c:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
  138910:	e3a02001 	mov	r2, #1
  138914:	e5c32000 	strb	r2, [r3]
        }
    }
    return result;
  138918:	e51b3008 	ldr	r3, [fp, #-8]
}
  13891c:	e1a00003 	mov	r0, r3
  138920:	e24bd004 	sub	sp, fp, #4
  138924:	e8bd8800 	pop	{fp, pc}

00138928 <PHY_GetLinkSpeedDuplex>:

status_t PHY_GetLinkSpeedDuplex(ENET_Type *base, uint32_t phyAddr, phy_speed_t *speed, phy_duplex_t *duplex)
{
  138928:	e92d4800 	push	{fp, lr}
  13892c:	e28db004 	add	fp, sp, #4
  138930:	e24dd020 	sub	sp, sp, #32
  138934:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  138938:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
  13893c:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
  138940:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
    RT_ASSERT(duplex);
  138944:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  138948:	e3530000 	cmp	r3, #0
  13894c:	1a000005 	bne	138968 <PHY_GetLinkSpeedDuplex+0x40>
  138950:	e3002141 	movw	r2, #321	; 0x141
  138954:	e30a1628 	movw	r1, #42536	; 0xa628
  138958:	e3401014 	movt	r1, #20
  13895c:	e30a0600 	movw	r0, #42496	; 0xa600
  138960:	e3400014 	movt	r0, #20
  138964:	ebff2b0b 	bl	103598 <rt_assert_handler>

    status_t result = kStatus_Success;
  138968:	e3a03000 	mov	r3, #0
  13896c:	e50b3008 	str	r3, [fp, #-8]
    uint32_t data, ctlReg;

    /* Read the control two register. */

    result = PHY_Read(base, phyAddr, 31, &ctlReg);
  138970:	e24b3010 	sub	r3, fp, #16
  138974:	e3a0201f 	mov	r2, #31
  138978:	e51b101c 	ldr	r1, [fp, #-28]	; 0xffffffe4
  13897c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
  138980:	ebffff2b 	bl	138634 <PHY_Read>
  138984:	e50b0008 	str	r0, [fp, #-8]

    data = ((ctlReg>>2) & 0x7);
  138988:	e51b3010 	ldr	r3, [fp, #-16]
  13898c:	e1a03123 	lsr	r3, r3, #2
  138990:	e2033007 	and	r3, r3, #7
  138994:	e50b300c 	str	r3, [fp, #-12]
    switch (data)
  138998:	e51b300c 	ldr	r3, [fp, #-12]
  13899c:	e2433001 	sub	r3, r3, #1
  1389a0:	e3530005 	cmp	r3, #5
  1389a4:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  1389a8:	ea000021 	b	138a34 <PHY_GetLinkSpeedDuplex+0x10c>
  1389ac:	001389c4 	.word	0x001389c4
  1389b0:	001389fc 	.word	0x001389fc
  1389b4:	00138a34 	.word	0x00138a34
  1389b8:	00138a34 	.word	0x00138a34
  1389bc:	001389e0 	.word	0x001389e0
  1389c0:	00138a18 	.word	0x00138a18
    {
        case 1:
            *speed = kPHY_Speed10M;
  1389c4:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1389c8:	e3a02000 	mov	r2, #0
  1389cc:	e5832000 	str	r2, [r3]
            *duplex = kPHY_HalfDuplex;
  1389d0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1389d4:	e3a02000 	mov	r2, #0
  1389d8:	e5832000 	str	r2, [r3]
            break;
  1389dc:	ea00001a 	b	138a4c <PHY_GetLinkSpeedDuplex+0x124>
        case 5:
            *speed = kPHY_Speed10M;
  1389e0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  1389e4:	e3a02000 	mov	r2, #0
  1389e8:	e5832000 	str	r2, [r3]
            *duplex = kPHY_FullDuplex;
  1389ec:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  1389f0:	e3a02001 	mov	r2, #1
  1389f4:	e5832000 	str	r2, [r3]
            break;
  1389f8:	ea000013 	b	138a4c <PHY_GetLinkSpeedDuplex+0x124>
        case 2:
            *speed = kPHY_Speed100M;
  1389fc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  138a00:	e3a02001 	mov	r2, #1
  138a04:	e5832000 	str	r2, [r3]
            *duplex = kPHY_HalfDuplex;
  138a08:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  138a0c:	e3a02000 	mov	r2, #0
  138a10:	e5832000 	str	r2, [r3]
            break;
  138a14:	ea00000c 	b	138a4c <PHY_GetLinkSpeedDuplex+0x124>
        case 6:
            *speed = kPHY_Speed100M;
  138a18:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  138a1c:	e3a02001 	mov	r2, #1
  138a20:	e5832000 	str	r2, [r3]
            *duplex = kPHY_FullDuplex;
  138a24:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  138a28:	e3a02001 	mov	r2, #1
  138a2c:	e5832000 	str	r2, [r3]
            break;
  138a30:	ea000005 	b	138a4c <PHY_GetLinkSpeedDuplex+0x124>
        default:
            *speed = kPHY_Speed100M;
  138a34:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
  138a38:	e3a02001 	mov	r2, #1
  138a3c:	e5832000 	str	r2, [r3]
            *duplex = kPHY_FullDuplex;
  138a40:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
  138a44:	e3a02001 	mov	r2, #1
  138a48:	e5832000 	str	r2, [r3]
    }

    return result;
  138a4c:	e51b3008 	ldr	r3, [fp, #-8]
}
  138a50:	e1a00003 	mov	r0, r3
  138a54:	e24bd004 	sub	sp, fp, #4
  138a58:	e8bd8800 	pop	{fp, pc}

00138a5c <__udivsi3>:
  138a5c:	e2512001 	subs	r2, r1, #1
  138a60:	012fff1e 	bxeq	lr
  138a64:	3a000074 	bcc	138c3c <__udivsi3+0x1e0>
  138a68:	e1500001 	cmp	r0, r1
  138a6c:	9a00006b 	bls	138c20 <__udivsi3+0x1c4>
  138a70:	e1110002 	tst	r1, r2
  138a74:	0a00006c 	beq	138c2c <__udivsi3+0x1d0>
  138a78:	e16f3f10 	clz	r3, r0
  138a7c:	e16f2f11 	clz	r2, r1
  138a80:	e0423003 	sub	r3, r2, r3
  138a84:	e273301f 	rsbs	r3, r3, #31
  138a88:	10833083 	addne	r3, r3, r3, lsl #1
  138a8c:	e3a02000 	mov	r2, #0
  138a90:	108ff103 	addne	pc, pc, r3, lsl #2
  138a94:	e1a00000 	nop			; (mov r0, r0)
  138a98:	e1500f81 	cmp	r0, r1, lsl #31
  138a9c:	e0a22002 	adc	r2, r2, r2
  138aa0:	20400f81 	subcs	r0, r0, r1, lsl #31
  138aa4:	e1500f01 	cmp	r0, r1, lsl #30
  138aa8:	e0a22002 	adc	r2, r2, r2
  138aac:	20400f01 	subcs	r0, r0, r1, lsl #30
  138ab0:	e1500e81 	cmp	r0, r1, lsl #29
  138ab4:	e0a22002 	adc	r2, r2, r2
  138ab8:	20400e81 	subcs	r0, r0, r1, lsl #29
  138abc:	e1500e01 	cmp	r0, r1, lsl #28
  138ac0:	e0a22002 	adc	r2, r2, r2
  138ac4:	20400e01 	subcs	r0, r0, r1, lsl #28
  138ac8:	e1500d81 	cmp	r0, r1, lsl #27
  138acc:	e0a22002 	adc	r2, r2, r2
  138ad0:	20400d81 	subcs	r0, r0, r1, lsl #27
  138ad4:	e1500d01 	cmp	r0, r1, lsl #26
  138ad8:	e0a22002 	adc	r2, r2, r2
  138adc:	20400d01 	subcs	r0, r0, r1, lsl #26
  138ae0:	e1500c81 	cmp	r0, r1, lsl #25
  138ae4:	e0a22002 	adc	r2, r2, r2
  138ae8:	20400c81 	subcs	r0, r0, r1, lsl #25
  138aec:	e1500c01 	cmp	r0, r1, lsl #24
  138af0:	e0a22002 	adc	r2, r2, r2
  138af4:	20400c01 	subcs	r0, r0, r1, lsl #24
  138af8:	e1500b81 	cmp	r0, r1, lsl #23
  138afc:	e0a22002 	adc	r2, r2, r2
  138b00:	20400b81 	subcs	r0, r0, r1, lsl #23
  138b04:	e1500b01 	cmp	r0, r1, lsl #22
  138b08:	e0a22002 	adc	r2, r2, r2
  138b0c:	20400b01 	subcs	r0, r0, r1, lsl #22
  138b10:	e1500a81 	cmp	r0, r1, lsl #21
  138b14:	e0a22002 	adc	r2, r2, r2
  138b18:	20400a81 	subcs	r0, r0, r1, lsl #21
  138b1c:	e1500a01 	cmp	r0, r1, lsl #20
  138b20:	e0a22002 	adc	r2, r2, r2
  138b24:	20400a01 	subcs	r0, r0, r1, lsl #20
  138b28:	e1500981 	cmp	r0, r1, lsl #19
  138b2c:	e0a22002 	adc	r2, r2, r2
  138b30:	20400981 	subcs	r0, r0, r1, lsl #19
  138b34:	e1500901 	cmp	r0, r1, lsl #18
  138b38:	e0a22002 	adc	r2, r2, r2
  138b3c:	20400901 	subcs	r0, r0, r1, lsl #18
  138b40:	e1500881 	cmp	r0, r1, lsl #17
  138b44:	e0a22002 	adc	r2, r2, r2
  138b48:	20400881 	subcs	r0, r0, r1, lsl #17
  138b4c:	e1500801 	cmp	r0, r1, lsl #16
  138b50:	e0a22002 	adc	r2, r2, r2
  138b54:	20400801 	subcs	r0, r0, r1, lsl #16
  138b58:	e1500781 	cmp	r0, r1, lsl #15
  138b5c:	e0a22002 	adc	r2, r2, r2
  138b60:	20400781 	subcs	r0, r0, r1, lsl #15
  138b64:	e1500701 	cmp	r0, r1, lsl #14
  138b68:	e0a22002 	adc	r2, r2, r2
  138b6c:	20400701 	subcs	r0, r0, r1, lsl #14
  138b70:	e1500681 	cmp	r0, r1, lsl #13
  138b74:	e0a22002 	adc	r2, r2, r2
  138b78:	20400681 	subcs	r0, r0, r1, lsl #13
  138b7c:	e1500601 	cmp	r0, r1, lsl #12
  138b80:	e0a22002 	adc	r2, r2, r2
  138b84:	20400601 	subcs	r0, r0, r1, lsl #12
  138b88:	e1500581 	cmp	r0, r1, lsl #11
  138b8c:	e0a22002 	adc	r2, r2, r2
  138b90:	20400581 	subcs	r0, r0, r1, lsl #11
  138b94:	e1500501 	cmp	r0, r1, lsl #10
  138b98:	e0a22002 	adc	r2, r2, r2
  138b9c:	20400501 	subcs	r0, r0, r1, lsl #10
  138ba0:	e1500481 	cmp	r0, r1, lsl #9
  138ba4:	e0a22002 	adc	r2, r2, r2
  138ba8:	20400481 	subcs	r0, r0, r1, lsl #9
  138bac:	e1500401 	cmp	r0, r1, lsl #8
  138bb0:	e0a22002 	adc	r2, r2, r2
  138bb4:	20400401 	subcs	r0, r0, r1, lsl #8
  138bb8:	e1500381 	cmp	r0, r1, lsl #7
  138bbc:	e0a22002 	adc	r2, r2, r2
  138bc0:	20400381 	subcs	r0, r0, r1, lsl #7
  138bc4:	e1500301 	cmp	r0, r1, lsl #6
  138bc8:	e0a22002 	adc	r2, r2, r2
  138bcc:	20400301 	subcs	r0, r0, r1, lsl #6
  138bd0:	e1500281 	cmp	r0, r1, lsl #5
  138bd4:	e0a22002 	adc	r2, r2, r2
  138bd8:	20400281 	subcs	r0, r0, r1, lsl #5
  138bdc:	e1500201 	cmp	r0, r1, lsl #4
  138be0:	e0a22002 	adc	r2, r2, r2
  138be4:	20400201 	subcs	r0, r0, r1, lsl #4
  138be8:	e1500181 	cmp	r0, r1, lsl #3
  138bec:	e0a22002 	adc	r2, r2, r2
  138bf0:	20400181 	subcs	r0, r0, r1, lsl #3
  138bf4:	e1500101 	cmp	r0, r1, lsl #2
  138bf8:	e0a22002 	adc	r2, r2, r2
  138bfc:	20400101 	subcs	r0, r0, r1, lsl #2
  138c00:	e1500081 	cmp	r0, r1, lsl #1
  138c04:	e0a22002 	adc	r2, r2, r2
  138c08:	20400081 	subcs	r0, r0, r1, lsl #1
  138c0c:	e1500001 	cmp	r0, r1
  138c10:	e0a22002 	adc	r2, r2, r2
  138c14:	20400001 	subcs	r0, r0, r1
  138c18:	e1a00002 	mov	r0, r2
  138c1c:	e12fff1e 	bx	lr
  138c20:	03a00001 	moveq	r0, #1
  138c24:	13a00000 	movne	r0, #0
  138c28:	e12fff1e 	bx	lr
  138c2c:	e16f2f11 	clz	r2, r1
  138c30:	e262201f 	rsb	r2, r2, #31
  138c34:	e1a00230 	lsr	r0, r0, r2
  138c38:	e12fff1e 	bx	lr
  138c3c:	e3500000 	cmp	r0, #0
  138c40:	13e00000 	mvnne	r0, #0
  138c44:	ea000097 	b	138ea8 <__aeabi_idiv0>

00138c48 <__aeabi_uidivmod>:
  138c48:	e3510000 	cmp	r1, #0
  138c4c:	0afffffa 	beq	138c3c <__udivsi3+0x1e0>
  138c50:	e92d4003 	push	{r0, r1, lr}
  138c54:	ebffff80 	bl	138a5c <__udivsi3>
  138c58:	e8bd4006 	pop	{r1, r2, lr}
  138c5c:	e0030092 	mul	r3, r2, r0
  138c60:	e0411003 	sub	r1, r1, r3
  138c64:	e12fff1e 	bx	lr

00138c68 <__divsi3>:
  138c68:	e3510000 	cmp	r1, #0
  138c6c:	0a000081 	beq	138e78 <.divsi3_skip_div0_test+0x208>

00138c70 <.divsi3_skip_div0_test>:
  138c70:	e020c001 	eor	ip, r0, r1
  138c74:	42611000 	rsbmi	r1, r1, #0
  138c78:	e2512001 	subs	r2, r1, #1
  138c7c:	0a000070 	beq	138e44 <.divsi3_skip_div0_test+0x1d4>
  138c80:	e1b03000 	movs	r3, r0
  138c84:	42603000 	rsbmi	r3, r0, #0
  138c88:	e1530001 	cmp	r3, r1
  138c8c:	9a00006f 	bls	138e50 <.divsi3_skip_div0_test+0x1e0>
  138c90:	e1110002 	tst	r1, r2
  138c94:	0a000071 	beq	138e60 <.divsi3_skip_div0_test+0x1f0>
  138c98:	e16f2f13 	clz	r2, r3
  138c9c:	e16f0f11 	clz	r0, r1
  138ca0:	e0402002 	sub	r2, r0, r2
  138ca4:	e272201f 	rsbs	r2, r2, #31
  138ca8:	10822082 	addne	r2, r2, r2, lsl #1
  138cac:	e3a00000 	mov	r0, #0
  138cb0:	108ff102 	addne	pc, pc, r2, lsl #2
  138cb4:	e1a00000 	nop			; (mov r0, r0)
  138cb8:	e1530f81 	cmp	r3, r1, lsl #31
  138cbc:	e0a00000 	adc	r0, r0, r0
  138cc0:	20433f81 	subcs	r3, r3, r1, lsl #31
  138cc4:	e1530f01 	cmp	r3, r1, lsl #30
  138cc8:	e0a00000 	adc	r0, r0, r0
  138ccc:	20433f01 	subcs	r3, r3, r1, lsl #30
  138cd0:	e1530e81 	cmp	r3, r1, lsl #29
  138cd4:	e0a00000 	adc	r0, r0, r0
  138cd8:	20433e81 	subcs	r3, r3, r1, lsl #29
  138cdc:	e1530e01 	cmp	r3, r1, lsl #28
  138ce0:	e0a00000 	adc	r0, r0, r0
  138ce4:	20433e01 	subcs	r3, r3, r1, lsl #28
  138ce8:	e1530d81 	cmp	r3, r1, lsl #27
  138cec:	e0a00000 	adc	r0, r0, r0
  138cf0:	20433d81 	subcs	r3, r3, r1, lsl #27
  138cf4:	e1530d01 	cmp	r3, r1, lsl #26
  138cf8:	e0a00000 	adc	r0, r0, r0
  138cfc:	20433d01 	subcs	r3, r3, r1, lsl #26
  138d00:	e1530c81 	cmp	r3, r1, lsl #25
  138d04:	e0a00000 	adc	r0, r0, r0
  138d08:	20433c81 	subcs	r3, r3, r1, lsl #25
  138d0c:	e1530c01 	cmp	r3, r1, lsl #24
  138d10:	e0a00000 	adc	r0, r0, r0
  138d14:	20433c01 	subcs	r3, r3, r1, lsl #24
  138d18:	e1530b81 	cmp	r3, r1, lsl #23
  138d1c:	e0a00000 	adc	r0, r0, r0
  138d20:	20433b81 	subcs	r3, r3, r1, lsl #23
  138d24:	e1530b01 	cmp	r3, r1, lsl #22
  138d28:	e0a00000 	adc	r0, r0, r0
  138d2c:	20433b01 	subcs	r3, r3, r1, lsl #22
  138d30:	e1530a81 	cmp	r3, r1, lsl #21
  138d34:	e0a00000 	adc	r0, r0, r0
  138d38:	20433a81 	subcs	r3, r3, r1, lsl #21
  138d3c:	e1530a01 	cmp	r3, r1, lsl #20
  138d40:	e0a00000 	adc	r0, r0, r0
  138d44:	20433a01 	subcs	r3, r3, r1, lsl #20
  138d48:	e1530981 	cmp	r3, r1, lsl #19
  138d4c:	e0a00000 	adc	r0, r0, r0
  138d50:	20433981 	subcs	r3, r3, r1, lsl #19
  138d54:	e1530901 	cmp	r3, r1, lsl #18
  138d58:	e0a00000 	adc	r0, r0, r0
  138d5c:	20433901 	subcs	r3, r3, r1, lsl #18
  138d60:	e1530881 	cmp	r3, r1, lsl #17
  138d64:	e0a00000 	adc	r0, r0, r0
  138d68:	20433881 	subcs	r3, r3, r1, lsl #17
  138d6c:	e1530801 	cmp	r3, r1, lsl #16
  138d70:	e0a00000 	adc	r0, r0, r0
  138d74:	20433801 	subcs	r3, r3, r1, lsl #16
  138d78:	e1530781 	cmp	r3, r1, lsl #15
  138d7c:	e0a00000 	adc	r0, r0, r0
  138d80:	20433781 	subcs	r3, r3, r1, lsl #15
  138d84:	e1530701 	cmp	r3, r1, lsl #14
  138d88:	e0a00000 	adc	r0, r0, r0
  138d8c:	20433701 	subcs	r3, r3, r1, lsl #14
  138d90:	e1530681 	cmp	r3, r1, lsl #13
  138d94:	e0a00000 	adc	r0, r0, r0
  138d98:	20433681 	subcs	r3, r3, r1, lsl #13
  138d9c:	e1530601 	cmp	r3, r1, lsl #12
  138da0:	e0a00000 	adc	r0, r0, r0
  138da4:	20433601 	subcs	r3, r3, r1, lsl #12
  138da8:	e1530581 	cmp	r3, r1, lsl #11
  138dac:	e0a00000 	adc	r0, r0, r0
  138db0:	20433581 	subcs	r3, r3, r1, lsl #11
  138db4:	e1530501 	cmp	r3, r1, lsl #10
  138db8:	e0a00000 	adc	r0, r0, r0
  138dbc:	20433501 	subcs	r3, r3, r1, lsl #10
  138dc0:	e1530481 	cmp	r3, r1, lsl #9
  138dc4:	e0a00000 	adc	r0, r0, r0
  138dc8:	20433481 	subcs	r3, r3, r1, lsl #9
  138dcc:	e1530401 	cmp	r3, r1, lsl #8
  138dd0:	e0a00000 	adc	r0, r0, r0
  138dd4:	20433401 	subcs	r3, r3, r1, lsl #8
  138dd8:	e1530381 	cmp	r3, r1, lsl #7
  138ddc:	e0a00000 	adc	r0, r0, r0
  138de0:	20433381 	subcs	r3, r3, r1, lsl #7
  138de4:	e1530301 	cmp	r3, r1, lsl #6
  138de8:	e0a00000 	adc	r0, r0, r0
  138dec:	20433301 	subcs	r3, r3, r1, lsl #6
  138df0:	e1530281 	cmp	r3, r1, lsl #5
  138df4:	e0a00000 	adc	r0, r0, r0
  138df8:	20433281 	subcs	r3, r3, r1, lsl #5
  138dfc:	e1530201 	cmp	r3, r1, lsl #4
  138e00:	e0a00000 	adc	r0, r0, r0
  138e04:	20433201 	subcs	r3, r3, r1, lsl #4
  138e08:	e1530181 	cmp	r3, r1, lsl #3
  138e0c:	e0a00000 	adc	r0, r0, r0
  138e10:	20433181 	subcs	r3, r3, r1, lsl #3
  138e14:	e1530101 	cmp	r3, r1, lsl #2
  138e18:	e0a00000 	adc	r0, r0, r0
  138e1c:	20433101 	subcs	r3, r3, r1, lsl #2
  138e20:	e1530081 	cmp	r3, r1, lsl #1
  138e24:	e0a00000 	adc	r0, r0, r0
  138e28:	20433081 	subcs	r3, r3, r1, lsl #1
  138e2c:	e1530001 	cmp	r3, r1
  138e30:	e0a00000 	adc	r0, r0, r0
  138e34:	20433001 	subcs	r3, r3, r1
  138e38:	e35c0000 	cmp	ip, #0
  138e3c:	42600000 	rsbmi	r0, r0, #0
  138e40:	e12fff1e 	bx	lr
  138e44:	e13c0000 	teq	ip, r0
  138e48:	42600000 	rsbmi	r0, r0, #0
  138e4c:	e12fff1e 	bx	lr
  138e50:	33a00000 	movcc	r0, #0
  138e54:	01a00fcc 	asreq	r0, ip, #31
  138e58:	03800001 	orreq	r0, r0, #1
  138e5c:	e12fff1e 	bx	lr
  138e60:	e16f2f11 	clz	r2, r1
  138e64:	e262201f 	rsb	r2, r2, #31
  138e68:	e35c0000 	cmp	ip, #0
  138e6c:	e1a00233 	lsr	r0, r3, r2
  138e70:	42600000 	rsbmi	r0, r0, #0
  138e74:	e12fff1e 	bx	lr
  138e78:	e3500000 	cmp	r0, #0
  138e7c:	c3e00102 	mvngt	r0, #-2147483648	; 0x80000000
  138e80:	b3a00102 	movlt	r0, #-2147483648	; 0x80000000
  138e84:	ea000007 	b	138ea8 <__aeabi_idiv0>

00138e88 <__aeabi_idivmod>:
  138e88:	e3510000 	cmp	r1, #0
  138e8c:	0afffff9 	beq	138e78 <.divsi3_skip_div0_test+0x208>
  138e90:	e92d4003 	push	{r0, r1, lr}
  138e94:	ebffff75 	bl	138c70 <.divsi3_skip_div0_test>
  138e98:	e8bd4006 	pop	{r1, r2, lr}
  138e9c:	e0030092 	mul	r3, r2, r0
  138ea0:	e0411003 	sub	r1, r1, r3
  138ea4:	e12fff1e 	bx	lr

00138ea8 <__aeabi_idiv0>:
  138ea8:	e92d4002 	push	{r1, lr}
  138eac:	e3a00008 	mov	r0, #8
  138eb0:	eb001550 	bl	13e3f8 <raise>
  138eb4:	e8bd8002 	pop	{r1, pc}

00138eb8 <dummy>:
  138eb8:	e12fff1e 	bx	lr

00138ebc <dummy1>:
  138ebc:	e12fff1e 	bx	lr

00138ec0 <__init_libc>:
  138ec0:	e92d4030 	push	{r4, r5, lr}
  138ec4:	e1a04000 	mov	r4, r0
  138ec8:	e24dd09c 	sub	sp, sp, #156	; 0x9c
  138ecc:	e3a02098 	mov	r2, #152	; 0x98
  138ed0:	e1a05001 	mov	r5, r1
  138ed4:	e1a0000d 	mov	r0, sp
  138ed8:	e3a01000 	mov	r1, #0
  138edc:	eb00215e 	bl	14145c <memset>
  138ee0:	e5942000 	ldr	r2, [r4]
  138ee4:	e59f3118 	ldr	r3, [pc, #280]	; 139004 <__init_libc+0x144>
  138ee8:	e3520000 	cmp	r2, #0
  138eec:	e5834000 	str	r4, [r3]
  138ef0:	03a02004 	moveq	r2, #4
  138ef4:	0a000009 	beq	138f20 <__init_libc+0x60>
  138ef8:	e1a03004 	mov	r3, r4
  138efc:	e3a02000 	mov	r2, #0
  138f00:	ea000000 	b	138f08 <__init_libc+0x48>
  138f04:	e1a02000 	mov	r2, r0
  138f08:	e5b31004 	ldr	r1, [r3, #4]!
  138f0c:	e2820001 	add	r0, r2, #1
  138f10:	e3510000 	cmp	r1, #0
  138f14:	1afffffa 	bne	138f04 <__init_libc+0x44>
  138f18:	e2822002 	add	r2, r2, #2
  138f1c:	e1a02102 	lsl	r2, r2, #2
  138f20:	e7943002 	ldr	r3, [r4, r2]
  138f24:	e59f00dc 	ldr	r0, [pc, #220]	; 139008 <__init_libc+0x148>
  138f28:	e0842002 	add	r2, r4, r2
  138f2c:	e3530000 	cmp	r3, #0
  138f30:	e5802010 	str	r2, [r0, #16]
  138f34:	0a00002d 	beq	138ff0 <__init_libc+0x130>
  138f38:	e3530025 	cmp	r3, #37	; 0x25
  138f3c:	95921004 	ldrls	r1, [r2, #4]
  138f40:	928dc098 	addls	ip, sp, #152	; 0x98
  138f44:	908c3103 	addls	r3, ip, r3, lsl #2
  138f48:	95031098 	strls	r1, [r3, #-152]	; 0xffffff68
  138f4c:	e5b23008 	ldr	r3, [r2, #8]!
  138f50:	e3530000 	cmp	r3, #0
  138f54:	1afffff7 	bne	138f38 <__init_libc+0x78>
  138f58:	e59d3040 	ldr	r3, [sp, #64]	; 0x40
  138f5c:	e59dc080 	ldr	ip, [sp, #128]	; 0x80
  138f60:	e59d2018 	ldr	r2, [sp, #24]
  138f64:	e59f10a0 	ldr	r1, [pc, #160]	; 13900c <__init_libc+0x14c>
  138f68:	e5802024 	str	r2, [r0, #36]	; 0x24
  138f6c:	e59f209c 	ldr	r2, [pc, #156]	; 139010 <__init_libc+0x150>
  138f70:	e3550000 	cmp	r5, #0
  138f74:	e5813000 	str	r3, [r1]
  138f78:	e582c000 	str	ip, [r2]
  138f7c:	0a000012 	beq	138fcc <__init_libc+0x10c>
  138f80:	e59f308c 	ldr	r3, [pc, #140]	; 139014 <__init_libc+0x154>
  138f84:	e59f208c 	ldr	r2, [pc, #140]	; 139018 <__init_libc+0x158>
  138f88:	e5835000 	str	r5, [r3]
  138f8c:	e5825000 	str	r5, [r2]
  138f90:	e5d53000 	ldrb	r3, [r5]
  138f94:	e3530000 	cmp	r3, #0
  138f98:	0a000005 	beq	138fb4 <__init_libc+0xf4>
  138f9c:	e2851001 	add	r1, r5, #1
  138fa0:	e353002f 	cmp	r3, #47	; 0x2f
  138fa4:	05821000 	streq	r1, [r2]
  138fa8:	e4d13001 	ldrb	r3, [r1], #1
  138fac:	e3530000 	cmp	r3, #0
  138fb0:	1afffffa 	bne	138fa0 <__init_libc+0xe0>
  138fb4:	e1a0000d 	mov	r0, sp
  138fb8:	eb002849 	bl	1430e4 <__init_tls>
  138fbc:	e59d0064 	ldr	r0, [sp, #100]	; 0x64
  138fc0:	eb0028be 	bl	1432c0 <__init_ssp>
  138fc4:	e28dd09c 	add	sp, sp, #156	; 0x9c
  138fc8:	e8bd8030 	pop	{r4, r5, pc}
  138fcc:	e59d107c 	ldr	r1, [sp, #124]	; 0x7c
  138fd0:	e3510000 	cmp	r1, #0
  138fd4:	1a000008 	bne	138ffc <__init_libc+0x13c>
  138fd8:	e59f303c 	ldr	r3, [pc, #60]	; 13901c <__init_libc+0x15c>
  138fdc:	e59f1030 	ldr	r1, [pc, #48]	; 139014 <__init_libc+0x154>
  138fe0:	e59f2030 	ldr	r2, [pc, #48]	; 139018 <__init_libc+0x158>
  138fe4:	e5813000 	str	r3, [r1]
  138fe8:	e5823000 	str	r3, [r2]
  138fec:	eafffff0 	b	138fb4 <__init_libc+0xf4>
  138ff0:	e1a02003 	mov	r2, r3
  138ff4:	e1a0c003 	mov	ip, r3
  138ff8:	eaffffd9 	b	138f64 <__init_libc+0xa4>
  138ffc:	e1a05001 	mov	r5, r1
  139000:	eaffffde 	b	138f80 <__init_libc+0xc0>
  139004:	00150480 	.word	0x00150480
  139008:	00576e84 	.word	0x00576e84
  13900c:	00576e80 	.word	0x00576e80
  139010:	00576ec4 	.word	0x00576ec4
  139014:	0014fc14 	.word	0x0014fc14
  139018:	0014fc10 	.word	0x0014fc10
  13901c:	0014c8bc 	.word	0x0014c8bc

00139020 <__libc_start_init>:
  139020:	e92d4070 	push	{r4, r5, r6, lr}
  139024:	e59f4020 	ldr	r4, [pc, #32]	; 13904c <__libc_start_init+0x2c>
  139028:	e59f5020 	ldr	r5, [pc, #32]	; 139050 <__libc_start_init+0x30>
  13902c:	eb003148 	bl	145554 <_init>
  139030:	e1540005 	cmp	r4, r5
  139034:	28bd8070 	popcs	{r4, r5, r6, pc}
  139038:	e4943004 	ldr	r3, [r4], #4
  13903c:	e12fff33 	blx	r3
  139040:	e1540005 	cmp	r4, r5
  139044:	3afffffb 	bcc	139038 <__libc_start_init+0x18>
  139048:	e8bd8070 	pop	{r4, r5, r6, pc}
  13904c:	0014e3e8 	.word	0x0014e3e8
  139050:	0014e3ec 	.word	0x0014e3ec

00139054 <libc_start_main_stage2>:
  139054:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  139058:	e1a05001 	mov	r5, r1
  13905c:	e1a06002 	mov	r6, r2
  139060:	e2814001 	add	r4, r1, #1
  139064:	e0824104 	add	r4, r2, r4, lsl #2
  139068:	e1a07000 	mov	r7, r0
  13906c:	ebffffeb 	bl	139020 <__libc_start_init>
  139070:	e1a02004 	mov	r2, r4
  139074:	e1a01006 	mov	r1, r6
  139078:	e1a00005 	mov	r0, r5
  13907c:	e12fff37 	blx	r7
  139080:	eb000056 	bl	1391e0 <exit>

00139084 <__libc_start_main>:
  139084:	e92d4070 	push	{r4, r5, r6, lr}
  139088:	e1a05001 	mov	r5, r1
  13908c:	e1a04002 	mov	r4, r2
  139090:	e1a06000 	mov	r6, r0
  139094:	e2810001 	add	r0, r1, #1
  139098:	e0820100 	add	r0, r2, r0, lsl #2
  13909c:	e5921000 	ldr	r1, [r2]
  1390a0:	ebffff86 	bl	138ec0 <__init_libc>
  1390a4:	e59f3010 	ldr	r3, [pc, #16]	; 1390bc <__libc_start_main+0x38>
  1390a8:	e1a02004 	mov	r2, r4
  1390ac:	e1a01005 	mov	r1, r5
  1390b0:	e1a00006 	mov	r0, r6
  1390b4:	e8bd4070 	pop	{r4, r5, r6, lr}
  1390b8:	e12fff13 	bx	r3
  1390bc:	00139054 	.word	0x00139054

001390c0 <__errno_location>:
  1390c0:	e59f3010 	ldr	r3, [pc, #16]	; 1390d8 <__errno_location+0x18>
  1390c4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  1390c8:	e5930000 	ldr	r0, [r3]
  1390cc:	e12fff30 	blx	r0
  1390d0:	e2400058 	sub	r0, r0, #88	; 0x58
  1390d4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
  1390d8:	0014e3dc 	.word	0x0014e3dc

001390dc <__strerror_l>:
  1390dc:	e3500054 	cmp	r0, #84	; 0x54
  1390e0:	0a000013 	beq	139134 <__strerror_l+0x58>
  1390e4:	e3a0c001 	mov	ip, #1
  1390e8:	e3a03021 	mov	r3, #33	; 0x21
  1390ec:	e59f204c 	ldr	r2, [pc, #76]	; 139140 <__strerror_l+0x64>
  1390f0:	e1530000 	cmp	r3, r0
  1390f4:	0a000003 	beq	139108 <__strerror_l+0x2c>
  1390f8:	e4d23001 	ldrb	r3, [r2], #1
  1390fc:	e28cc001 	add	ip, ip, #1
  139100:	e3530000 	cmp	r3, #0
  139104:	1afffff9 	bne	1390f0 <__strerror_l+0x14>
  139108:	e3a02049 	mov	r2, #73	; 0x49
  13910c:	e59f3030 	ldr	r3, [pc, #48]	; 139144 <__strerror_l+0x68>
  139110:	e3520000 	cmp	r2, #0
  139114:	15f32001 	ldrbne	r2, [r3, #1]!
  139118:	1afffffc 	bne	139110 <__strerror_l+0x34>
  13911c:	e25cc001 	subs	ip, ip, #1
  139120:	e2830001 	add	r0, r3, #1
  139124:	0a000003 	beq	139138 <__strerror_l+0x5c>
  139128:	e5d32001 	ldrb	r2, [r3, #1]
  13912c:	e1a03000 	mov	r3, r0
  139130:	eafffff6 	b	139110 <__strerror_l+0x34>
  139134:	e59f0008 	ldr	r0, [pc, #8]	; 139144 <__strerror_l+0x68>
  139138:	e5911014 	ldr	r1, [r1, #20]
  13913c:	ea000d54 	b	13c694 <__lctrans>
  139140:	0014a642 	.word	0x0014a642
  139144:	0014a69c 	.word	0x0014a69c

00139148 <strerror>:
  139148:	e1a03000 	mov	r3, r0
  13914c:	e59f2018 	ldr	r2, [pc, #24]	; 13916c <strerror+0x24>
  139150:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  139154:	e5920000 	ldr	r0, [r2]
  139158:	e12fff30 	blx	r0
  13915c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  139160:	e5101018 	ldr	r1, [r0, #-24]	; 0xffffffe8
  139164:	e1a00003 	mov	r0, r3
  139168:	eaffffdb 	b	1390dc <__strerror_l>
  13916c:	0014e3dc 	.word	0x0014e3dc

00139170 <__assert_fail>:
  139170:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  139174:	e24dd00c 	sub	sp, sp, #12
  139178:	e58d2004 	str	r2, [sp, #4]
  13917c:	e58d3000 	str	r3, [sp]
  139180:	e1a02000 	mov	r2, r0
  139184:	e1a03001 	mov	r3, r1
  139188:	e59f0010 	ldr	r0, [pc, #16]	; 1391a0 <__assert_fail+0x30>
  13918c:	e59f1010 	ldr	r1, [pc, #16]	; 1391a4 <__assert_fail+0x34>
  139190:	eb001523 	bl	13e624 <fprintf>
  139194:	e3a00000 	mov	r0, #0
  139198:	eb0014b0 	bl	13e460 <fflush>
  13919c:	eb00286b 	bl	143350 <abort>
  1391a0:	0014e2a8 	.word	0x0014e2a8
  1391a4:	0014adbc 	.word	0x0014adbc

001391a8 <__funcs_on_exit>:
  1391a8:	e12fff1e 	bx	lr

001391ac <__libc_exit_fini>:
  1391ac:	e92d4070 	push	{r4, r5, r6, lr}
  1391b0:	e59f4020 	ldr	r4, [pc, #32]	; 1391d8 <__libc_exit_fini+0x2c>
  1391b4:	e59f5020 	ldr	r5, [pc, #32]	; 1391dc <__libc_exit_fini+0x30>
  1391b8:	e1540005 	cmp	r4, r5
  1391bc:	9a000003 	bls	1391d0 <__libc_exit_fini+0x24>
  1391c0:	e5343004 	ldr	r3, [r4, #-4]!
  1391c4:	e12fff33 	blx	r3
  1391c8:	e1540005 	cmp	r4, r5
  1391cc:	8afffffb 	bhi	1391c0 <__libc_exit_fini+0x14>
  1391d0:	e8bd4070 	pop	{r4, r5, r6, lr}
  1391d4:	ea0030e1 	b	145560 <_fini>
  1391d8:	0014e3f0 	.word	0x0014e3f0
  1391dc:	0014e3ec 	.word	0x0014e3ec

001391e0 <exit>:
  1391e0:	e92d4010 	push	{r4, lr}
  1391e4:	e1a04000 	mov	r4, r0
  1391e8:	ebffffee 	bl	1391a8 <__funcs_on_exit>
  1391ec:	ebffffee 	bl	1391ac <__libc_exit_fini>
  1391f0:	eb002da3 	bl	144884 <__stdio_exit>
  1391f4:	e1a00004 	mov	r0, r4
  1391f8:	eb002847 	bl	14331c <_Exit>

001391fc <fcntl>:
  1391fc:	e92d000e 	push	{r1, r2, r3}
  139200:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  139204:	e24dd020 	sub	sp, sp, #32
  139208:	e59d4034 	ldr	r4, [sp, #52]	; 0x34
  13920c:	e59d5038 	ldr	r5, [sp, #56]	; 0x38
  139210:	e28d3038 	add	r3, sp, #56	; 0x38
  139214:	e3540004 	cmp	r4, #4
  139218:	e1a06000 	mov	r6, r0
  13921c:	e58d3014 	str	r3, [sp, #20]
  139220:	03855802 	orreq	r5, r5, #131072	; 0x20000
  139224:	0a00000f 	beq	139268 <fcntl+0x6c>
  139228:	e354000e 	cmp	r4, #14
  13922c:	0a00001a 	beq	13929c <fcntl+0xa0>
  139230:	e3540009 	cmp	r4, #9
  139234:	0a000026 	beq	1392d4 <fcntl+0xd8>
  139238:	e59f3234 	ldr	r3, [pc, #564]	; 139474 <fcntl+0x278>
  13923c:	e1540003 	cmp	r4, r3
  139240:	0a000034 	beq	139318 <fcntl+0x11c>
  139244:	e244300c 	sub	r3, r4, #12
  139248:	e3530004 	cmp	r3, #4
  13924c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  139250:	ea000004 	b	139268 <fcntl+0x6c>
  139254:	00139268 	.word	0x00139268
  139258:	00139268 	.word	0x00139268
  13925c:	00139268 	.word	0x00139268
  139260:	00139268 	.word	0x00139268
  139264:	00139268 	.word	0x00139268
  139268:	e3a000dd 	mov	r0, #221	; 0xdd
  13926c:	eb000cc9 	bl	13c598 <get_rtt_syscall>
  139270:	e2503000 	subs	r3, r0, #0
  139274:	0a000046 	beq	139394 <fcntl+0x198>
  139278:	e1a02005 	mov	r2, r5
  13927c:	e1a01004 	mov	r1, r4
  139280:	e1a00006 	mov	r0, r6
  139284:	e12fff33 	blx	r3
  139288:	eb000cf7 	bl	13c66c <__syscall_ret>
  13928c:	e28dd020 	add	sp, sp, #32
  139290:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
  139294:	e28dd00c 	add	sp, sp, #12
  139298:	e12fff1e 	bx	lr
  13929c:	e3a00000 	mov	r0, #0
  1392a0:	e1a03005 	mov	r3, r5
  1392a4:	e1a02004 	mov	r2, r4
  1392a8:	e1a01006 	mov	r1, r6
  1392ac:	e58d0008 	str	r0, [sp, #8]
  1392b0:	e58d0004 	str	r0, [sp, #4]
  1392b4:	e58d0000 	str	r0, [sp]
  1392b8:	e3a000dd 	mov	r0, #221	; 0xdd
  1392bc:	eb00231d 	bl	141f38 <__syscall_cp>
  1392c0:	eb000ce9 	bl	13c66c <__syscall_ret>
  1392c4:	e28dd020 	add	sp, sp, #32
  1392c8:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
  1392cc:	e28dd00c 	add	sp, sp, #12
  1392d0:	e12fff1e 	bx	lr
  1392d4:	e3a000dd 	mov	r0, #221	; 0xdd
  1392d8:	eb000cae 	bl	13c598 <get_rtt_syscall>
  1392dc:	e2503000 	subs	r3, r0, #0
  1392e0:	0a000007 	beq	139304 <fcntl+0x108>
  1392e4:	e28d2018 	add	r2, sp, #24
  1392e8:	e3a01010 	mov	r1, #16
  1392ec:	e1a00006 	mov	r0, r6
  1392f0:	e12fff33 	blx	r3
  1392f4:	e3700016 	cmn	r0, #22
  1392f8:	0a000027 	beq	13939c <fcntl+0x1a0>
  1392fc:	e3500000 	cmp	r0, #0
  139300:	1affffe0 	bne	139288 <fcntl+0x8c>
  139304:	e59d3018 	ldr	r3, [sp, #24]
  139308:	e59d001c 	ldr	r0, [sp, #28]
  13930c:	e3530002 	cmp	r3, #2
  139310:	02600000 	rsbeq	r0, r0, #0
  139314:	eaffffdc 	b	13928c <fcntl+0x90>
  139318:	e3a000dd 	mov	r0, #221	; 0xdd
  13931c:	eb000c9d 	bl	13c598 <get_rtt_syscall>
  139320:	e2503000 	subs	r3, r0, #0
  139324:	0a00000f 	beq	139368 <fcntl+0x16c>
  139328:	e1a02005 	mov	r2, r5
  13932c:	e1a01004 	mov	r1, r4
  139330:	e1a00006 	mov	r0, r6
  139334:	e12fff33 	blx	r3
  139338:	e3700016 	cmn	r0, #22
  13933c:	e1a07000 	mov	r7, r0
  139340:	0a00001e 	beq	1393c0 <fcntl+0x1c4>
  139344:	e3500000 	cmp	r0, #0
  139348:	e1a04000 	mov	r4, r0
  13934c:	aa000007 	bge	139370 <fcntl+0x174>
  139350:	e1a00004 	mov	r0, r4
  139354:	eb000cc4 	bl	13c66c <__syscall_ret>
  139358:	e28dd020 	add	sp, sp, #32
  13935c:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
  139360:	e28dd00c 	add	sp, sp, #12
  139364:	e12fff1e 	bx	lr
  139368:	e1a04003 	mov	r4, r3
  13936c:	e1a07003 	mov	r7, r3
  139370:	e3a000dd 	mov	r0, #221	; 0xdd
  139374:	eb000c87 	bl	13c598 <get_rtt_syscall>
  139378:	e2503000 	subs	r3, r0, #0
  13937c:	0afffff3 	beq	139350 <fcntl+0x154>
  139380:	e1a00007 	mov	r0, r7
  139384:	e3a02001 	mov	r2, #1
  139388:	e3a01002 	mov	r1, #2
  13938c:	e12fff33 	blx	r3
  139390:	eaffffee 	b	139350 <fcntl+0x154>
  139394:	e1a00003 	mov	r0, r3
  139398:	eaffffba 	b	139288 <fcntl+0x8c>
  13939c:	e3a000dd 	mov	r0, #221	; 0xdd
  1393a0:	eb000c7c 	bl	13c598 <get_rtt_syscall>
  1393a4:	e2503000 	subs	r3, r0, #0
  1393a8:	0a00002f 	beq	13946c <fcntl+0x270>
  1393ac:	e1a02005 	mov	r2, r5
  1393b0:	e1a01004 	mov	r1, r4
  1393b4:	e1a00006 	mov	r0, r6
  1393b8:	e12fff33 	blx	r3
  1393bc:	eaffffb2 	b	13928c <fcntl+0x90>
  1393c0:	e3a000dd 	mov	r0, #221	; 0xdd
  1393c4:	eb000c73 	bl	13c598 <get_rtt_syscall>
  1393c8:	e2503000 	subs	r3, r0, #0
  1393cc:	0a00000b 	beq	139400 <fcntl+0x204>
  1393d0:	e1a01004 	mov	r1, r4
  1393d4:	e3a02000 	mov	r2, #0
  1393d8:	e1a00006 	mov	r0, r6
  1393dc:	e12fff33 	blx	r3
  1393e0:	e3700016 	cmn	r0, #22
  1393e4:	e1a04000 	mov	r4, r0
  1393e8:	0a00000c 	beq	139420 <fcntl+0x224>
  1393ec:	e3500000 	cmp	r0, #0
  1393f0:	aa000003 	bge	139404 <fcntl+0x208>
  1393f4:	e3e00015 	mvn	r0, #21
  1393f8:	eb000c9b 	bl	13c66c <__syscall_ret>
  1393fc:	eaffffa2 	b	13928c <fcntl+0x90>
  139400:	e1a04003 	mov	r4, r3
  139404:	e3a00006 	mov	r0, #6
  139408:	eb000c62 	bl	13c598 <get_rtt_syscall>
  13940c:	e2503000 	subs	r3, r0, #0
  139410:	0afffff7 	beq	1393f4 <fcntl+0x1f8>
  139414:	e1a00004 	mov	r0, r4
  139418:	e12fff33 	blx	r3
  13941c:	eafffff4 	b	1393f4 <fcntl+0x1f8>
  139420:	e3a000dd 	mov	r0, #221	; 0xdd
  139424:	eb000c5b 	bl	13c598 <get_rtt_syscall>
  139428:	e2504000 	subs	r4, r0, #0
  13942c:	0a000005 	beq	139448 <fcntl+0x24c>
  139430:	e1a02005 	mov	r2, r5
  139434:	e1a00006 	mov	r0, r6
  139438:	e3a01000 	mov	r1, #0
  13943c:	e12fff34 	blx	r4
  139440:	e2504000 	subs	r4, r0, #0
  139444:	baffffc1 	blt	139350 <fcntl+0x154>
  139448:	e3a000dd 	mov	r0, #221	; 0xdd
  13944c:	eb000c51 	bl	13c598 <get_rtt_syscall>
  139450:	e2503000 	subs	r3, r0, #0
  139454:	0affffbd 	beq	139350 <fcntl+0x154>
  139458:	e3a02001 	mov	r2, #1
  13945c:	e3a01002 	mov	r1, #2
  139460:	e1a00004 	mov	r0, r4
  139464:	e12fff33 	blx	r3
  139468:	eaffffb8 	b	139350 <fcntl+0x154>
  13946c:	e1a00003 	mov	r0, r3
  139470:	eaffff85 	b	13928c <fcntl+0x90>
  139474:	00000406 	.word	0x00000406

00139478 <syscall_set_thread_area>:
  139478:	e1a01000 	mov	r1, r0
  13947c:	e3a0007b 	mov	r0, #123	; 0x7b
  139480:	ea000c6f 	b	13c644 <syscall>

00139484 <syscall_trace>:
  139484:	e92d4070 	push	{r4, r5, r6, lr}
  139488:	e1a04000 	mov	r4, r0
  13948c:	e1a05001 	mov	r5, r1
  139490:	e3a0201d 	mov	r2, #29
  139494:	e59f1018 	ldr	r1, [pc, #24]	; 1394b4 <syscall_trace+0x30>
  139498:	e3a000ff 	mov	r0, #255	; 0xff
  13949c:	eb000c68 	bl	13c644 <syscall>
  1394a0:	e1a02005 	mov	r2, r5
  1394a4:	e1a01004 	mov	r1, r4
  1394a8:	e8bd4070 	pop	{r4, r5, r6, lr}
  1394ac:	e3a000ff 	mov	r0, #255	; 0xff
  1394b0:	ea000c63 	b	13c644 <syscall>
  1394b4:	0014cf00 	.word	0x0014cf00

001394b8 <syscall_io_pgetevents>:
  1394b8:	e92d4010 	push	{r4, lr}
  1394bc:	e3a01016 	mov	r1, #22
  1394c0:	e59f0008 	ldr	r0, [pc, #8]	; 1394d0 <syscall_io_pgetevents+0x18>
  1394c4:	ebffffee 	bl	139484 <syscall_trace>
  1394c8:	e3a00000 	mov	r0, #0
  1394cc:	e8bd8010 	pop	{r4, pc}
  1394d0:	0014c888 	.word	0x0014c888

001394d4 <syscall_rseq>:
  1394d4:	e92d4010 	push	{r4, lr}
  1394d8:	e3a0100d 	mov	r1, #13
  1394dc:	e59f0008 	ldr	r0, [pc, #8]	; 1394ec <syscall_rseq+0x18>
  1394e0:	ebffffe7 	bl	139484 <syscall_trace>
  1394e4:	e3a00000 	mov	r0, #0
  1394e8:	e8bd8010 	pop	{r4, pc}
  1394ec:	0014c878 	.word	0x0014c878

001394f0 <syscall_statx>:
  1394f0:	e92d4010 	push	{r4, lr}
  1394f4:	e3a0100e 	mov	r1, #14
  1394f8:	e59f0008 	ldr	r0, [pc, #8]	; 139508 <syscall_statx+0x18>
  1394fc:	ebffffe0 	bl	139484 <syscall_trace>
  139500:	e3a00000 	mov	r0, #0
  139504:	e8bd8010 	pop	{r4, pc}
  139508:	0014c868 	.word	0x0014c868

0013950c <syscall_pkey_free>:
  13950c:	e92d4010 	push	{r4, lr}
  139510:	e3a01012 	mov	r1, #18
  139514:	e59f0008 	ldr	r0, [pc, #8]	; 139524 <syscall_pkey_free+0x18>
  139518:	ebffffd9 	bl	139484 <syscall_trace>
  13951c:	e3a00000 	mov	r0, #0
  139520:	e8bd8010 	pop	{r4, pc}
  139524:	0014c854 	.word	0x0014c854

00139528 <syscall_pkey_alloc>:
  139528:	e92d4010 	push	{r4, lr}
  13952c:	e3a01013 	mov	r1, #19
  139530:	e59f0008 	ldr	r0, [pc, #8]	; 139540 <syscall_pkey_alloc+0x18>
  139534:	ebffffd2 	bl	139484 <syscall_trace>
  139538:	e3a00000 	mov	r0, #0
  13953c:	e8bd8010 	pop	{r4, pc}
  139540:	0014c840 	.word	0x0014c840

00139544 <syscall_pkey_mprotect>:
  139544:	e92d4010 	push	{r4, lr}
  139548:	e3a01016 	mov	r1, #22
  13954c:	e59f0008 	ldr	r0, [pc, #8]	; 13955c <syscall_pkey_mprotect+0x18>
  139550:	ebffffcb 	bl	139484 <syscall_trace>
  139554:	e3a00000 	mov	r0, #0
  139558:	e8bd8010 	pop	{r4, pc}
  13955c:	0014c828 	.word	0x0014c828

00139560 <syscall_pwritev2>:
  139560:	e92d4010 	push	{r4, lr}
  139564:	e3a01011 	mov	r1, #17
  139568:	e59f0008 	ldr	r0, [pc, #8]	; 139578 <syscall_pwritev2+0x18>
  13956c:	ebffffc4 	bl	139484 <syscall_trace>
  139570:	e3a00000 	mov	r0, #0
  139574:	e8bd8010 	pop	{r4, pc}
  139578:	0014c814 	.word	0x0014c814

0013957c <syscall_preadv2>:
  13957c:	e92d4010 	push	{r4, lr}
  139580:	e3a01010 	mov	r1, #16
  139584:	e59f0008 	ldr	r0, [pc, #8]	; 139594 <syscall_preadv2+0x18>
  139588:	ebffffbd 	bl	139484 <syscall_trace>
  13958c:	e3a00000 	mov	r0, #0
  139590:	e8bd8010 	pop	{r4, pc}
  139594:	0014c804 	.word	0x0014c804

00139598 <syscall_copy_file_range>:
  139598:	e92d4010 	push	{r4, lr}
  13959c:	e3a01018 	mov	r1, #24
  1395a0:	e59f0008 	ldr	r0, [pc, #8]	; 1395b0 <syscall_copy_file_range+0x18>
  1395a4:	ebffffb6 	bl	139484 <syscall_trace>
  1395a8:	e3a00000 	mov	r0, #0
  1395ac:	e8bd8010 	pop	{r4, pc}
  1395b0:	0014c7ec 	.word	0x0014c7ec

001395b4 <syscall_mlock2>:
  1395b4:	e92d4010 	push	{r4, lr}
  1395b8:	e3a0100f 	mov	r1, #15
  1395bc:	e59f0008 	ldr	r0, [pc, #8]	; 1395cc <syscall_mlock2+0x18>
  1395c0:	ebffffaf 	bl	139484 <syscall_trace>
  1395c4:	e3a00000 	mov	r0, #0
  1395c8:	e8bd8010 	pop	{r4, pc}
  1395cc:	0014c7dc 	.word	0x0014c7dc

001395d0 <syscall_membarrier>:
  1395d0:	e92d4010 	push	{r4, lr}
  1395d4:	e3a01013 	mov	r1, #19
  1395d8:	e59f0008 	ldr	r0, [pc, #8]	; 1395e8 <syscall_membarrier+0x18>
  1395dc:	ebffffa8 	bl	139484 <syscall_trace>
  1395e0:	e3a00000 	mov	r0, #0
  1395e4:	e8bd8010 	pop	{r4, pc}
  1395e8:	0014c7c8 	.word	0x0014c7c8

001395ec <syscall_userfaultfd>:
  1395ec:	e92d4010 	push	{r4, lr}
  1395f0:	e3a01014 	mov	r1, #20
  1395f4:	e59f0008 	ldr	r0, [pc, #8]	; 139604 <syscall_userfaultfd+0x18>
  1395f8:	ebffffa1 	bl	139484 <syscall_trace>
  1395fc:	e3a00000 	mov	r0, #0
  139600:	e8bd8010 	pop	{r4, pc}
  139604:	0014c7b4 	.word	0x0014c7b4

00139608 <syscall_execveat>:
  139608:	e92d4010 	push	{r4, lr}
  13960c:	e3a01011 	mov	r1, #17
  139610:	e59f0008 	ldr	r0, [pc, #8]	; 139620 <syscall_execveat+0x18>
  139614:	ebffff9a 	bl	139484 <syscall_trace>
  139618:	e3a00000 	mov	r0, #0
  13961c:	e8bd8010 	pop	{r4, pc}
  139620:	0014c7a0 	.word	0x0014c7a0

00139624 <syscall_bpf>:
  139624:	e92d4010 	push	{r4, lr}
  139628:	e3a0100c 	mov	r1, #12
  13962c:	e59f0008 	ldr	r0, [pc, #8]	; 13963c <syscall_bpf+0x18>
  139630:	ebffff93 	bl	139484 <syscall_trace>
  139634:	e3a00000 	mov	r0, #0
  139638:	e8bd8010 	pop	{r4, pc}
  13963c:	0014c794 	.word	0x0014c794

00139640 <syscall_memfd_create>:
  139640:	e92d4010 	push	{r4, lr}
  139644:	e3a01015 	mov	r1, #21
  139648:	e59f0008 	ldr	r0, [pc, #8]	; 139658 <syscall_memfd_create+0x18>
  13964c:	ebffff8c 	bl	139484 <syscall_trace>
  139650:	e3a00000 	mov	r0, #0
  139654:	e8bd8010 	pop	{r4, pc}
  139658:	0014c77c 	.word	0x0014c77c

0013965c <syscall_seccomp>:
  13965c:	e92d4010 	push	{r4, lr}
  139660:	e3a01010 	mov	r1, #16
  139664:	e59f0008 	ldr	r0, [pc, #8]	; 139674 <syscall_seccomp+0x18>
  139668:	ebffff85 	bl	139484 <syscall_trace>
  13966c:	e3a00000 	mov	r0, #0
  139670:	e8bd8010 	pop	{r4, pc}
  139674:	0014c758 	.word	0x0014c758

00139678 <syscall_renameat2>:
  139678:	e92d4010 	push	{r4, lr}
  13967c:	e3a01012 	mov	r1, #18
  139680:	e59f0008 	ldr	r0, [pc, #8]	; 139690 <syscall_renameat2+0x18>
  139684:	ebffff7e 	bl	139484 <syscall_trace>
  139688:	e3a00000 	mov	r0, #0
  13968c:	e8bd8010 	pop	{r4, pc}
  139690:	0014c744 	.word	0x0014c744

00139694 <syscall_sched_getattr>:
  139694:	e92d4010 	push	{r4, lr}
  139698:	e3a01016 	mov	r1, #22
  13969c:	e59f0008 	ldr	r0, [pc, #8]	; 1396ac <syscall_sched_getattr+0x18>
  1396a0:	ebffff77 	bl	139484 <syscall_trace>
  1396a4:	e3a00000 	mov	r0, #0
  1396a8:	e8bd8010 	pop	{r4, pc}
  1396ac:	0014c72c 	.word	0x0014c72c

001396b0 <syscall_sched_setattr>:
  1396b0:	e92d4010 	push	{r4, lr}
  1396b4:	e3a01016 	mov	r1, #22
  1396b8:	e59f0008 	ldr	r0, [pc, #8]	; 1396c8 <syscall_sched_setattr+0x18>
  1396bc:	ebffff70 	bl	139484 <syscall_trace>
  1396c0:	e3a00000 	mov	r0, #0
  1396c4:	e8bd8010 	pop	{r4, pc}
  1396c8:	0014c714 	.word	0x0014c714

001396cc <syscall_finit_module>:
  1396cc:	e92d4010 	push	{r4, lr}
  1396d0:	e3a01015 	mov	r1, #21
  1396d4:	e59f0008 	ldr	r0, [pc, #8]	; 1396e4 <syscall_finit_module+0x18>
  1396d8:	ebffff69 	bl	139484 <syscall_trace>
  1396dc:	e3a00000 	mov	r0, #0
  1396e0:	e8bd8010 	pop	{r4, pc}
  1396e4:	0014c6fc 	.word	0x0014c6fc

001396e8 <syscall_kcmp>:
  1396e8:	e92d4010 	push	{r4, lr}
  1396ec:	e3a0100d 	mov	r1, #13
  1396f0:	e59f0008 	ldr	r0, [pc, #8]	; 139700 <syscall_kcmp+0x18>
  1396f4:	ebffff62 	bl	139484 <syscall_trace>
  1396f8:	e3a00000 	mov	r0, #0
  1396fc:	e8bd8010 	pop	{r4, pc}
  139700:	0014c6ec 	.word	0x0014c6ec

00139704 <syscall_process_vm_writev>:
  139704:	e92d4010 	push	{r4, lr}
  139708:	e3a0101a 	mov	r1, #26
  13970c:	e59f0008 	ldr	r0, [pc, #8]	; 13971c <syscall_process_vm_writev+0x18>
  139710:	ebffff5b 	bl	139484 <syscall_trace>
  139714:	e3a00000 	mov	r0, #0
  139718:	e8bd8010 	pop	{r4, pc}
  13971c:	0014c6d0 	.word	0x0014c6d0

00139720 <syscall_process_vm_readv>:
  139720:	e92d4010 	push	{r4, lr}
  139724:	e3a01019 	mov	r1, #25
  139728:	e59f0008 	ldr	r0, [pc, #8]	; 139738 <syscall_process_vm_readv+0x18>
  13972c:	ebffff54 	bl	139484 <syscall_trace>
  139730:	e3a00000 	mov	r0, #0
  139734:	e8bd8010 	pop	{r4, pc}
  139738:	0014c6b4 	.word	0x0014c6b4

0013973c <syscall_setns>:
  13973c:	e92d4010 	push	{r4, lr}
  139740:	e3a0100e 	mov	r1, #14
  139744:	e59f0008 	ldr	r0, [pc, #8]	; 139754 <syscall_setns+0x18>
  139748:	ebffff4d 	bl	139484 <syscall_trace>
  13974c:	e3a00000 	mov	r0, #0
  139750:	e8bd8010 	pop	{r4, pc}
  139754:	0014c6a4 	.word	0x0014c6a4

00139758 <syscall_sendmmsg>:
  139758:	e92d4010 	push	{r4, lr}
  13975c:	e3a01011 	mov	r1, #17
  139760:	e59f0008 	ldr	r0, [pc, #8]	; 139770 <syscall_sendmmsg+0x18>
  139764:	ebffff46 	bl	139484 <syscall_trace>
  139768:	e3a00000 	mov	r0, #0
  13976c:	e8bd8010 	pop	{r4, pc}
  139770:	0014c690 	.word	0x0014c690

00139774 <syscall_syncfs>:
  139774:	e92d4010 	push	{r4, lr}
  139778:	e3a0100f 	mov	r1, #15
  13977c:	e59f0008 	ldr	r0, [pc, #8]	; 13978c <syscall_syncfs+0x18>
  139780:	ebffff3f 	bl	139484 <syscall_trace>
  139784:	e3a00000 	mov	r0, #0
  139788:	e8bd8010 	pop	{r4, pc}
  13978c:	0014c680 	.word	0x0014c680

00139790 <syscall_clock_adjtime>:
  139790:	e92d4010 	push	{r4, lr}
  139794:	e3a01016 	mov	r1, #22
  139798:	e59f0008 	ldr	r0, [pc, #8]	; 1397a8 <syscall_clock_adjtime+0x18>
  13979c:	ebffff38 	bl	139484 <syscall_trace>
  1397a0:	e3a00000 	mov	r0, #0
  1397a4:	e8bd8010 	pop	{r4, pc}
  1397a8:	0014c668 	.word	0x0014c668

001397ac <syscall_open_by_handle_at>:
  1397ac:	e92d4010 	push	{r4, lr}
  1397b0:	e3a0101a 	mov	r1, #26
  1397b4:	e59f0008 	ldr	r0, [pc, #8]	; 1397c4 <syscall_open_by_handle_at+0x18>
  1397b8:	ebffff31 	bl	139484 <syscall_trace>
  1397bc:	e3a00000 	mov	r0, #0
  1397c0:	e8bd8010 	pop	{r4, pc}
  1397c4:	0014c64c 	.word	0x0014c64c

001397c8 <syscall_name_to_handle_at>:
  1397c8:	e92d4010 	push	{r4, lr}
  1397cc:	e3a0101a 	mov	r1, #26
  1397d0:	e59f0008 	ldr	r0, [pc, #8]	; 1397e0 <syscall_name_to_handle_at+0x18>
  1397d4:	ebffff2a 	bl	139484 <syscall_trace>
  1397d8:	e3a00000 	mov	r0, #0
  1397dc:	e8bd8010 	pop	{r4, pc}
  1397e0:	0014c630 	.word	0x0014c630

001397e4 <syscall_fanotify_mark>:
  1397e4:	e92d4010 	push	{r4, lr}
  1397e8:	e3a01016 	mov	r1, #22
  1397ec:	e59f0008 	ldr	r0, [pc, #8]	; 1397fc <syscall_fanotify_mark+0x18>
  1397f0:	ebffff23 	bl	139484 <syscall_trace>
  1397f4:	e3a00000 	mov	r0, #0
  1397f8:	e8bd8010 	pop	{r4, pc}
  1397fc:	0014c604 	.word	0x0014c604

00139800 <syscall_fanotify_init>:
  139800:	e92d4010 	push	{r4, lr}
  139804:	e3a01016 	mov	r1, #22
  139808:	e59f0008 	ldr	r0, [pc, #8]	; 139818 <syscall_fanotify_init+0x18>
  13980c:	ebffff1c 	bl	139484 <syscall_trace>
  139810:	e3a00000 	mov	r0, #0
  139814:	e8bd8010 	pop	{r4, pc}
  139818:	0014c5ec 	.word	0x0014c5ec

0013981c <syscall_accept4>:
  13981c:	e92d4010 	push	{r4, lr}
  139820:	e3a01010 	mov	r1, #16
  139824:	e59f0008 	ldr	r0, [pc, #8]	; 139834 <syscall_accept4+0x18>
  139828:	ebffff15 	bl	139484 <syscall_trace>
  13982c:	e3a00000 	mov	r0, #0
  139830:	e8bd8010 	pop	{r4, pc}
  139834:	0014c5dc 	.word	0x0014c5dc

00139838 <syscall_recvmmsg>:
  139838:	e92d4010 	push	{r4, lr}
  13983c:	e3a01011 	mov	r1, #17
  139840:	e59f0008 	ldr	r0, [pc, #8]	; 139850 <syscall_recvmmsg+0x18>
  139844:	ebffff0e 	bl	139484 <syscall_trace>
  139848:	e3a00000 	mov	r0, #0
  13984c:	e8bd8010 	pop	{r4, pc}
  139850:	0014c5c8 	.word	0x0014c5c8

00139854 <syscall_perf_event_open>:
  139854:	e92d4010 	push	{r4, lr}
  139858:	e3a01018 	mov	r1, #24
  13985c:	e59f0008 	ldr	r0, [pc, #8]	; 13986c <syscall_perf_event_open+0x18>
  139860:	ebffff07 	bl	139484 <syscall_trace>
  139864:	e3a00000 	mov	r0, #0
  139868:	e8bd8010 	pop	{r4, pc}
  13986c:	0014c5b0 	.word	0x0014c5b0

00139870 <syscall_rt_tgsigqueueinfo>:
  139870:	e92d4010 	push	{r4, lr}
  139874:	e3a0101a 	mov	r1, #26
  139878:	e59f0008 	ldr	r0, [pc, #8]	; 139888 <syscall_rt_tgsigqueueinfo+0x18>
  13987c:	ebffff00 	bl	139484 <syscall_trace>
  139880:	e3a00000 	mov	r0, #0
  139884:	e8bd8010 	pop	{r4, pc}
  139888:	0014c594 	.word	0x0014c594

0013988c <syscall_pwritev>:
  13988c:	e92d4010 	push	{r4, lr}
  139890:	e3a01010 	mov	r1, #16
  139894:	e59f0008 	ldr	r0, [pc, #8]	; 1398a4 <syscall_pwritev+0x18>
  139898:	ebfffef9 	bl	139484 <syscall_trace>
  13989c:	e3a00000 	mov	r0, #0
  1398a0:	e8bd8010 	pop	{r4, pc}
  1398a4:	0014c584 	.word	0x0014c584

001398a8 <syscall_preadv>:
  1398a8:	e92d4010 	push	{r4, lr}
  1398ac:	e3a0100f 	mov	r1, #15
  1398b0:	e59f0008 	ldr	r0, [pc, #8]	; 1398c0 <syscall_preadv+0x18>
  1398b4:	ebfffef2 	bl	139484 <syscall_trace>
  1398b8:	e3a00000 	mov	r0, #0
  1398bc:	e8bd8010 	pop	{r4, pc}
  1398c0:	0014c574 	.word	0x0014c574

001398c4 <syscall_inotify_init1>:
  1398c4:	e92d4010 	push	{r4, lr}
  1398c8:	e3a01016 	mov	r1, #22
  1398cc:	e59f0008 	ldr	r0, [pc, #8]	; 1398dc <syscall_inotify_init1+0x18>
  1398d0:	ebfffeeb 	bl	139484 <syscall_trace>
  1398d4:	e3a00000 	mov	r0, #0
  1398d8:	e8bd8010 	pop	{r4, pc}
  1398dc:	0014c55c 	.word	0x0014c55c

001398e0 <syscall_pipe2>:
  1398e0:	e92d4010 	push	{r4, lr}
  1398e4:	e3a0100e 	mov	r1, #14
  1398e8:	e59f0008 	ldr	r0, [pc, #8]	; 1398f8 <syscall_pipe2+0x18>
  1398ec:	ebfffee4 	bl	139484 <syscall_trace>
  1398f0:	e3a00000 	mov	r0, #0
  1398f4:	e8bd8010 	pop	{r4, pc}
  1398f8:	0014c54c 	.word	0x0014c54c

001398fc <syscall_dup3>:
  1398fc:	e92d4010 	push	{r4, lr}
  139900:	e3a0100d 	mov	r1, #13
  139904:	e59f0008 	ldr	r0, [pc, #8]	; 139914 <syscall_dup3+0x18>
  139908:	ebfffedd 	bl	139484 <syscall_trace>
  13990c:	e3a00000 	mov	r0, #0
  139910:	e8bd8010 	pop	{r4, pc}
  139914:	0014c53c 	.word	0x0014c53c

00139918 <syscall_epoll_create1>:
  139918:	e92d4010 	push	{r4, lr}
  13991c:	e3a01016 	mov	r1, #22
  139920:	e59f0008 	ldr	r0, [pc, #8]	; 139930 <syscall_epoll_create1+0x18>
  139924:	ebfffed6 	bl	139484 <syscall_trace>
  139928:	e3e00025 	mvn	r0, #37	; 0x25
  13992c:	e8bd8010 	pop	{r4, pc}
  139930:	0014c524 	.word	0x0014c524

00139934 <syscall_eventfd2>:
  139934:	e92d4010 	push	{r4, lr}
  139938:	e3a01011 	mov	r1, #17
  13993c:	e59f0008 	ldr	r0, [pc, #8]	; 13994c <syscall_eventfd2+0x18>
  139940:	ebfffecf 	bl	139484 <syscall_trace>
  139944:	e3a00000 	mov	r0, #0
  139948:	e8bd8010 	pop	{r4, pc}
  13994c:	0014c510 	.word	0x0014c510

00139950 <syscall_signalfd4>:
  139950:	e92d4010 	push	{r4, lr}
  139954:	e3a01012 	mov	r1, #18
  139958:	e59f0008 	ldr	r0, [pc, #8]	; 139968 <syscall_signalfd4+0x18>
  13995c:	ebfffec8 	bl	139484 <syscall_trace>
  139960:	e3a00000 	mov	r0, #0
  139964:	e8bd8010 	pop	{r4, pc}
  139968:	0014c4fc 	.word	0x0014c4fc

0013996c <syscall_timerfd_gettime>:
  13996c:	e92d4010 	push	{r4, lr}
  139970:	e3a01018 	mov	r1, #24
  139974:	e59f0008 	ldr	r0, [pc, #8]	; 139984 <syscall_timerfd_gettime+0x18>
  139978:	ebfffec1 	bl	139484 <syscall_trace>
  13997c:	e3a00000 	mov	r0, #0
  139980:	e8bd8010 	pop	{r4, pc}
  139984:	0014c4e4 	.word	0x0014c4e4

00139988 <syscall_timerfd_settime>:
  139988:	e92d4010 	push	{r4, lr}
  13998c:	e3a01018 	mov	r1, #24
  139990:	e59f0008 	ldr	r0, [pc, #8]	; 1399a0 <syscall_timerfd_settime+0x18>
  139994:	ebfffeba 	bl	139484 <syscall_trace>
  139998:	e3a00000 	mov	r0, #0
  13999c:	e8bd8010 	pop	{r4, pc}
  1399a0:	0014c4cc 	.word	0x0014c4cc

001399a4 <syscall_fallocate>:
  1399a4:	e92d4010 	push	{r4, lr}
  1399a8:	e3a01012 	mov	r1, #18
  1399ac:	e59f0008 	ldr	r0, [pc, #8]	; 1399bc <syscall_fallocate+0x18>
  1399b0:	ebfffeb3 	bl	139484 <syscall_trace>
  1399b4:	e3a00000 	mov	r0, #0
  1399b8:	e8bd8010 	pop	{r4, pc}
  1399bc:	0014c4b8 	.word	0x0014c4b8

001399c0 <syscall_eventfd>:
  1399c0:	e92d4010 	push	{r4, lr}
  1399c4:	e3a01010 	mov	r1, #16
  1399c8:	e59f0008 	ldr	r0, [pc, #8]	; 1399d8 <syscall_eventfd+0x18>
  1399cc:	ebfffeac 	bl	139484 <syscall_trace>
  1399d0:	e3a00000 	mov	r0, #0
  1399d4:	e8bd8010 	pop	{r4, pc}
  1399d8:	0014c4a8 	.word	0x0014c4a8

001399dc <syscall_timerfd_create>:
  1399dc:	e92d4010 	push	{r4, lr}
  1399e0:	e3a01017 	mov	r1, #23
  1399e4:	e59f0008 	ldr	r0, [pc, #8]	; 1399f4 <syscall_timerfd_create+0x18>
  1399e8:	ebfffea5 	bl	139484 <syscall_trace>
  1399ec:	e3a00000 	mov	r0, #0
  1399f0:	e8bd8010 	pop	{r4, pc}
  1399f4:	0014c490 	.word	0x0014c490

001399f8 <syscall_signalfd>:
  1399f8:	e92d4010 	push	{r4, lr}
  1399fc:	e3a01011 	mov	r1, #17
  139a00:	e59f0008 	ldr	r0, [pc, #8]	; 139a10 <syscall_signalfd+0x18>
  139a04:	ebfffe9e 	bl	139484 <syscall_trace>
  139a08:	e3a00000 	mov	r0, #0
  139a0c:	e8bd8010 	pop	{r4, pc}
  139a10:	0014c47c 	.word	0x0014c47c

00139a14 <syscall_utimensat>:
  139a14:	e92d4010 	push	{r4, lr}
  139a18:	e3a01012 	mov	r1, #18
  139a1c:	e59f0008 	ldr	r0, [pc, #8]	; 139a2c <syscall_utimensat+0x18>
  139a20:	ebfffe97 	bl	139484 <syscall_trace>
  139a24:	e3a00000 	mov	r0, #0
  139a28:	e8bd8010 	pop	{r4, pc}
  139a2c:	0014c468 	.word	0x0014c468

00139a30 <syscall_kexec_load>:
  139a30:	e92d4010 	push	{r4, lr}
  139a34:	e3a01013 	mov	r1, #19
  139a38:	e59f0008 	ldr	r0, [pc, #8]	; 139a48 <syscall_kexec_load+0x18>
  139a3c:	ebfffe90 	bl	139484 <syscall_trace>
  139a40:	e3a00000 	mov	r0, #0
  139a44:	e8bd8010 	pop	{r4, pc}
  139a48:	0014c454 	.word	0x0014c454

00139a4c <syscall_epoll_pwait>:
  139a4c:	e92d4010 	push	{r4, lr}
  139a50:	e3a01014 	mov	r1, #20
  139a54:	e59f0008 	ldr	r0, [pc, #8]	; 139a64 <syscall_epoll_pwait+0x18>
  139a58:	ebfffe89 	bl	139484 <syscall_trace>
  139a5c:	e3e00025 	mvn	r0, #37	; 0x25
  139a60:	e8bd8010 	pop	{r4, pc}
  139a64:	0014c440 	.word	0x0014c440

00139a68 <syscall_getcpu>:
  139a68:	e92d4010 	push	{r4, lr}
  139a6c:	e3a0100f 	mov	r1, #15
  139a70:	e59f0008 	ldr	r0, [pc, #8]	; 139a80 <syscall_getcpu+0x18>
  139a74:	ebfffe82 	bl	139484 <syscall_trace>
  139a78:	e3a00000 	mov	r0, #0
  139a7c:	e8bd8010 	pop	{r4, pc}
  139a80:	0014c430 	.word	0x0014c430

00139a84 <syscall_move_pages>:
  139a84:	e92d4010 	push	{r4, lr}
  139a88:	e3a01013 	mov	r1, #19
  139a8c:	e59f0008 	ldr	r0, [pc, #8]	; 139a9c <syscall_move_pages+0x18>
  139a90:	ebfffe7b 	bl	139484 <syscall_trace>
  139a94:	e3a00000 	mov	r0, #0
  139a98:	e8bd8010 	pop	{r4, pc}
  139a9c:	0014c41c 	.word	0x0014c41c

00139aa0 <syscall_vmsplice>:
  139aa0:	e92d4010 	push	{r4, lr}
  139aa4:	e3a01011 	mov	r1, #17
  139aa8:	e59f0008 	ldr	r0, [pc, #8]	; 139ab8 <syscall_vmsplice+0x18>
  139aac:	ebfffe74 	bl	139484 <syscall_trace>
  139ab0:	e3a00000 	mov	r0, #0
  139ab4:	e8bd8010 	pop	{r4, pc}
  139ab8:	0014c408 	.word	0x0014c408

00139abc <syscall_tee>:
  139abc:	e92d4010 	push	{r4, lr}
  139ac0:	e3a0100c 	mov	r1, #12
  139ac4:	e59f0008 	ldr	r0, [pc, #8]	; 139ad4 <syscall_tee+0x18>
  139ac8:	ebfffe6d 	bl	139484 <syscall_trace>
  139acc:	e3a00000 	mov	r0, #0
  139ad0:	e8bd8010 	pop	{r4, pc}
  139ad4:	0014c3fc 	.word	0x0014c3fc

00139ad8 <syscall_arm_sync_file_range>:
  139ad8:	e92d4010 	push	{r4, lr}
  139adc:	e3a0101c 	mov	r1, #28
  139ae0:	e59f0008 	ldr	r0, [pc, #8]	; 139af0 <syscall_arm_sync_file_range+0x18>
  139ae4:	ebfffe66 	bl	139484 <syscall_trace>
  139ae8:	e3a00000 	mov	r0, #0
  139aec:	e8bd8010 	pop	{r4, pc}
  139af0:	0014c3e0 	.word	0x0014c3e0

00139af4 <syscall_splice>:
  139af4:	e92d4010 	push	{r4, lr}
  139af8:	e3a0100f 	mov	r1, #15
  139afc:	e59f0008 	ldr	r0, [pc, #8]	; 139b0c <syscall_splice+0x18>
  139b00:	ebfffe5f 	bl	139484 <syscall_trace>
  139b04:	e3a00000 	mov	r0, #0
  139b08:	e8bd8010 	pop	{r4, pc}
  139b0c:	0014c3d0 	.word	0x0014c3d0

00139b10 <syscall_get_robust_list>:
  139b10:	e92d4010 	push	{r4, lr}
  139b14:	e3a01018 	mov	r1, #24
  139b18:	e59f0008 	ldr	r0, [pc, #8]	; 139b28 <syscall_get_robust_list+0x18>
  139b1c:	ebfffe58 	bl	139484 <syscall_trace>
  139b20:	e3a00000 	mov	r0, #0
  139b24:	e8bd8010 	pop	{r4, pc}
  139b28:	0014c3b8 	.word	0x0014c3b8

00139b2c <syscall_set_robust_list>:
  139b2c:	e92d4010 	push	{r4, lr}
  139b30:	e3a01018 	mov	r1, #24
  139b34:	e59f0008 	ldr	r0, [pc, #8]	; 139b44 <syscall_set_robust_list+0x18>
  139b38:	ebfffe51 	bl	139484 <syscall_trace>
  139b3c:	e3a00000 	mov	r0, #0
  139b40:	e8bd8010 	pop	{r4, pc}
  139b44:	0014c3a0 	.word	0x0014c3a0

00139b48 <syscall_unshare>:
  139b48:	e92d4010 	push	{r4, lr}
  139b4c:	e3a01010 	mov	r1, #16
  139b50:	e59f0008 	ldr	r0, [pc, #8]	; 139b60 <syscall_unshare+0x18>
  139b54:	ebfffe4a 	bl	139484 <syscall_trace>
  139b58:	e3a00000 	mov	r0, #0
  139b5c:	e8bd8010 	pop	{r4, pc}
  139b60:	0014c390 	.word	0x0014c390

00139b64 <syscall_ppoll>:
  139b64:	e92d4010 	push	{r4, lr}
  139b68:	e3a0100e 	mov	r1, #14
  139b6c:	e59f0008 	ldr	r0, [pc, #8]	; 139b7c <syscall_ppoll+0x18>
  139b70:	ebfffe43 	bl	139484 <syscall_trace>
  139b74:	e3a00000 	mov	r0, #0
  139b78:	e8bd8010 	pop	{r4, pc}
  139b7c:	0014c380 	.word	0x0014c380

00139b80 <syscall_pselect6>:
  139b80:	e92d4010 	push	{r4, lr}
  139b84:	e3a01011 	mov	r1, #17
  139b88:	e59f0008 	ldr	r0, [pc, #8]	; 139b98 <syscall_pselect6+0x18>
  139b8c:	ebfffe3c 	bl	139484 <syscall_trace>
  139b90:	e3a00000 	mov	r0, #0
  139b94:	e8bd8010 	pop	{r4, pc}
  139b98:	0014c36c 	.word	0x0014c36c

00139b9c <syscall_faccessat>:
  139b9c:	e92d4010 	push	{r4, lr}
  139ba0:	e3a01012 	mov	r1, #18
  139ba4:	e59f0008 	ldr	r0, [pc, #8]	; 139bb4 <syscall_faccessat+0x18>
  139ba8:	ebfffe35 	bl	139484 <syscall_trace>
  139bac:	e3a00000 	mov	r0, #0
  139bb0:	e8bd8010 	pop	{r4, pc}
  139bb4:	0014c358 	.word	0x0014c358

00139bb8 <syscall_fchmodat>:
  139bb8:	e92d4010 	push	{r4, lr}
  139bbc:	e3a01011 	mov	r1, #17
  139bc0:	e59f0008 	ldr	r0, [pc, #8]	; 139bd0 <syscall_fchmodat+0x18>
  139bc4:	ebfffe2e 	bl	139484 <syscall_trace>
  139bc8:	e3a00000 	mov	r0, #0
  139bcc:	e8bd8010 	pop	{r4, pc}
  139bd0:	0014c344 	.word	0x0014c344

00139bd4 <syscall_readlinkat>:
  139bd4:	e92d4010 	push	{r4, lr}
  139bd8:	e3a01013 	mov	r1, #19
  139bdc:	e59f0008 	ldr	r0, [pc, #8]	; 139bec <syscall_readlinkat+0x18>
  139be0:	ebfffe27 	bl	139484 <syscall_trace>
  139be4:	e3a00000 	mov	r0, #0
  139be8:	e8bd8010 	pop	{r4, pc}
  139bec:	0014c330 	.word	0x0014c330

00139bf0 <syscall_symlinkat>:
  139bf0:	e92d4010 	push	{r4, lr}
  139bf4:	e3a01012 	mov	r1, #18
  139bf8:	e59f0008 	ldr	r0, [pc, #8]	; 139c08 <syscall_symlinkat+0x18>
  139bfc:	ebfffe20 	bl	139484 <syscall_trace>
  139c00:	e3a00000 	mov	r0, #0
  139c04:	e8bd8010 	pop	{r4, pc}
  139c08:	0014c31c 	.word	0x0014c31c

00139c0c <syscall_linkat>:
  139c0c:	e92d4010 	push	{r4, lr}
  139c10:	e3a0100f 	mov	r1, #15
  139c14:	e59f0008 	ldr	r0, [pc, #8]	; 139c24 <syscall_linkat+0x18>
  139c18:	ebfffe19 	bl	139484 <syscall_trace>
  139c1c:	e3a00000 	mov	r0, #0
  139c20:	e8bd8010 	pop	{r4, pc}
  139c24:	0014c30c 	.word	0x0014c30c

00139c28 <syscall_renameat>:
  139c28:	e92d4010 	push	{r4, lr}
  139c2c:	e3a01011 	mov	r1, #17
  139c30:	e59f0008 	ldr	r0, [pc, #8]	; 139c40 <syscall_renameat+0x18>
  139c34:	ebfffe12 	bl	139484 <syscall_trace>
  139c38:	e3a00000 	mov	r0, #0
  139c3c:	e8bd8010 	pop	{r4, pc}
  139c40:	0014c2f8 	.word	0x0014c2f8

00139c44 <syscall_unlinkat>:
  139c44:	e92d4010 	push	{r4, lr}
  139c48:	e3a01011 	mov	r1, #17
  139c4c:	e59f0008 	ldr	r0, [pc, #8]	; 139c5c <syscall_unlinkat+0x18>
  139c50:	ebfffe0b 	bl	139484 <syscall_trace>
  139c54:	e3a00000 	mov	r0, #0
  139c58:	e8bd8010 	pop	{r4, pc}
  139c5c:	0014c2e4 	.word	0x0014c2e4

00139c60 <syscall_fstatat64>:
  139c60:	e92d4010 	push	{r4, lr}
  139c64:	e3a01012 	mov	r1, #18
  139c68:	e59f0008 	ldr	r0, [pc, #8]	; 139c78 <syscall_fstatat64+0x18>
  139c6c:	ebfffe04 	bl	139484 <syscall_trace>
  139c70:	e3a00000 	mov	r0, #0
  139c74:	e8bd8010 	pop	{r4, pc}
  139c78:	0014c2d0 	.word	0x0014c2d0

00139c7c <syscall_futimesat>:
  139c7c:	e92d4010 	push	{r4, lr}
  139c80:	e3a01012 	mov	r1, #18
  139c84:	e59f0008 	ldr	r0, [pc, #8]	; 139c94 <syscall_futimesat+0x18>
  139c88:	ebfffdfd 	bl	139484 <syscall_trace>
  139c8c:	e3a00000 	mov	r0, #0
  139c90:	e8bd8010 	pop	{r4, pc}
  139c94:	0014c2bc 	.word	0x0014c2bc

00139c98 <syscall_fchownat>:
  139c98:	e92d4010 	push	{r4, lr}
  139c9c:	e3a01011 	mov	r1, #17
  139ca0:	e59f0008 	ldr	r0, [pc, #8]	; 139cb0 <syscall_fchownat+0x18>
  139ca4:	ebfffdf6 	bl	139484 <syscall_trace>
  139ca8:	e3a00000 	mov	r0, #0
  139cac:	e8bd8010 	pop	{r4, pc}
  139cb0:	0014c2a8 	.word	0x0014c2a8

00139cb4 <syscall_mknodat>:
  139cb4:	e92d4010 	push	{r4, lr}
  139cb8:	e3a01010 	mov	r1, #16
  139cbc:	e59f0008 	ldr	r0, [pc, #8]	; 139ccc <syscall_mknodat+0x18>
  139cc0:	ebfffdef 	bl	139484 <syscall_trace>
  139cc4:	e3a00000 	mov	r0, #0
  139cc8:	e8bd8010 	pop	{r4, pc}
  139ccc:	0014c298 	.word	0x0014c298

00139cd0 <syscall_mkdirat>:
  139cd0:	e92d4010 	push	{r4, lr}
  139cd4:	e3a01010 	mov	r1, #16
  139cd8:	e59f0008 	ldr	r0, [pc, #8]	; 139ce8 <syscall_mkdirat+0x18>
  139cdc:	ebfffde8 	bl	139484 <syscall_trace>
  139ce0:	e3a00000 	mov	r0, #0
  139ce4:	e8bd8010 	pop	{r4, pc}
  139ce8:	0014c288 	.word	0x0014c288

00139cec <syscall_openat>:
  139cec:	e92d4010 	push	{r4, lr}
  139cf0:	e3a0100f 	mov	r1, #15
  139cf4:	e59f0008 	ldr	r0, [pc, #8]	; 139d04 <syscall_openat+0x18>
  139cf8:	ebfffde1 	bl	139484 <syscall_trace>
  139cfc:	e3a00000 	mov	r0, #0
  139d00:	e8bd8010 	pop	{r4, pc}
  139d04:	0014c278 	.word	0x0014c278

00139d08 <syscall_set_mempolicy>:
  139d08:	e92d4010 	push	{r4, lr}
  139d0c:	e3a01016 	mov	r1, #22
  139d10:	e59f0008 	ldr	r0, [pc, #8]	; 139d20 <syscall_set_mempolicy+0x18>
  139d14:	ebfffdda 	bl	139484 <syscall_trace>
  139d18:	e3a00000 	mov	r0, #0
  139d1c:	e8bd8010 	pop	{r4, pc}
  139d20:	0014c260 	.word	0x0014c260

00139d24 <syscall_get_mempolicy>:
  139d24:	e92d4010 	push	{r4, lr}
  139d28:	e3a01016 	mov	r1, #22
  139d2c:	e59f0008 	ldr	r0, [pc, #8]	; 139d3c <syscall_get_mempolicy+0x18>
  139d30:	ebfffdd3 	bl	139484 <syscall_trace>
  139d34:	e3a00000 	mov	r0, #0
  139d38:	e8bd8010 	pop	{r4, pc}
  139d3c:	0014c248 	.word	0x0014c248

00139d40 <syscall_mbind>:
  139d40:	e92d4010 	push	{r4, lr}
  139d44:	e3a0100e 	mov	r1, #14
  139d48:	e59f0008 	ldr	r0, [pc, #8]	; 139d58 <syscall_mbind+0x18>
  139d4c:	ebfffdcc 	bl	139484 <syscall_trace>
  139d50:	e3a00000 	mov	r0, #0
  139d54:	e8bd8010 	pop	{r4, pc}
  139d58:	0014c238 	.word	0x0014c238

00139d5c <syscall_inotify_rm_watch>:
  139d5c:	e92d4010 	push	{r4, lr}
  139d60:	e3a01019 	mov	r1, #25
  139d64:	e59f0008 	ldr	r0, [pc, #8]	; 139d74 <syscall_inotify_rm_watch+0x18>
  139d68:	ebfffdc5 	bl	139484 <syscall_trace>
  139d6c:	e3a00000 	mov	r0, #0
  139d70:	e8bd8010 	pop	{r4, pc}
  139d74:	0014c21c 	.word	0x0014c21c

00139d78 <syscall_inotify_add_watch>:
  139d78:	e92d4010 	push	{r4, lr}
  139d7c:	e3a0101a 	mov	r1, #26
  139d80:	e59f0008 	ldr	r0, [pc, #8]	; 139d90 <syscall_inotify_add_watch+0x18>
  139d84:	ebfffdbe 	bl	139484 <syscall_trace>
  139d88:	e3a00000 	mov	r0, #0
  139d8c:	e8bd8010 	pop	{r4, pc}
  139d90:	0014c200 	.word	0x0014c200

00139d94 <syscall_inotify_init>:
  139d94:	e92d4010 	push	{r4, lr}
  139d98:	e3a01015 	mov	r1, #21
  139d9c:	e59f0008 	ldr	r0, [pc, #8]	; 139dac <syscall_inotify_init+0x18>
  139da0:	ebfffdb7 	bl	139484 <syscall_trace>
  139da4:	e3a00000 	mov	r0, #0
  139da8:	e8bd8010 	pop	{r4, pc}
  139dac:	0014c1e8 	.word	0x0014c1e8

00139db0 <syscall_ioprio_get>:
  139db0:	e92d4010 	push	{r4, lr}
  139db4:	e3a01013 	mov	r1, #19
  139db8:	e59f0008 	ldr	r0, [pc, #8]	; 139dc8 <syscall_ioprio_get+0x18>
  139dbc:	ebfffdb0 	bl	139484 <syscall_trace>
  139dc0:	e3a00000 	mov	r0, #0
  139dc4:	e8bd8010 	pop	{r4, pc}
  139dc8:	0014c1d4 	.word	0x0014c1d4

00139dcc <syscall_ioprio_set>:
  139dcc:	e92d4010 	push	{r4, lr}
  139dd0:	e3a01013 	mov	r1, #19
  139dd4:	e59f0008 	ldr	r0, [pc, #8]	; 139de4 <syscall_ioprio_set+0x18>
  139dd8:	ebfffda9 	bl	139484 <syscall_trace>
  139ddc:	e3a00000 	mov	r0, #0
  139de0:	e8bd8010 	pop	{r4, pc}
  139de4:	0014c1c0 	.word	0x0014c1c0

00139de8 <syscall_vserver>:
  139de8:	e92d4010 	push	{r4, lr}
  139dec:	e3a01010 	mov	r1, #16
  139df0:	e59f0008 	ldr	r0, [pc, #8]	; 139e00 <syscall_vserver+0x18>
  139df4:	ebfffda2 	bl	139484 <syscall_trace>
  139df8:	e3a00000 	mov	r0, #0
  139dfc:	e8bd8010 	pop	{r4, pc}
  139e00:	0014c1b0 	.word	0x0014c1b0

00139e04 <syscall_semtimedop>:
  139e04:	e92d4010 	push	{r4, lr}
  139e08:	e3a01013 	mov	r1, #19
  139e0c:	e59f0008 	ldr	r0, [pc, #8]	; 139e1c <syscall_semtimedop+0x18>
  139e10:	ebfffd9b 	bl	139484 <syscall_trace>
  139e14:	e3a00000 	mov	r0, #0
  139e18:	e8bd8010 	pop	{r4, pc}
  139e1c:	0014c19c 	.word	0x0014c19c

00139e20 <syscall_keyctl>:
  139e20:	e92d4010 	push	{r4, lr}
  139e24:	e3a0100f 	mov	r1, #15
  139e28:	e59f0008 	ldr	r0, [pc, #8]	; 139e38 <syscall_keyctl+0x18>
  139e2c:	ebfffd94 	bl	139484 <syscall_trace>
  139e30:	e3a00000 	mov	r0, #0
  139e34:	e8bd8010 	pop	{r4, pc}
  139e38:	0014c18c 	.word	0x0014c18c

00139e3c <syscall_request_key>:
  139e3c:	e92d4010 	push	{r4, lr}
  139e40:	e3a01014 	mov	r1, #20
  139e44:	e59f0008 	ldr	r0, [pc, #8]	; 139e54 <syscall_request_key+0x18>
  139e48:	ebfffd8d 	bl	139484 <syscall_trace>
  139e4c:	e3a00000 	mov	r0, #0
  139e50:	e8bd8010 	pop	{r4, pc}
  139e54:	0014c178 	.word	0x0014c178

00139e58 <syscall_add_key>:
  139e58:	e92d4010 	push	{r4, lr}
  139e5c:	e3a01010 	mov	r1, #16
  139e60:	e59f0008 	ldr	r0, [pc, #8]	; 139e70 <syscall_add_key+0x18>
  139e64:	ebfffd86 	bl	139484 <syscall_trace>
  139e68:	e3a00000 	mov	r0, #0
  139e6c:	e8bd8010 	pop	{r4, pc}
  139e70:	0014c168 	.word	0x0014c168

00139e74 <syscall_msgctl>:
  139e74:	e92d4010 	push	{r4, lr}
  139e78:	e3a0100f 	mov	r1, #15
  139e7c:	e59f0008 	ldr	r0, [pc, #8]	; 139e8c <syscall_msgctl+0x18>
  139e80:	ebfffd7f 	bl	139484 <syscall_trace>
  139e84:	e3a00000 	mov	r0, #0
  139e88:	e8bd8010 	pop	{r4, pc}
  139e8c:	0014c118 	.word	0x0014c118

00139e90 <syscall_msgget>:
  139e90:	e92d4010 	push	{r4, lr}
  139e94:	e3a0100f 	mov	r1, #15
  139e98:	e59f0008 	ldr	r0, [pc, #8]	; 139ea8 <syscall_msgget+0x18>
  139e9c:	ebfffd78 	bl	139484 <syscall_trace>
  139ea0:	e3a00000 	mov	r0, #0
  139ea4:	e8bd8010 	pop	{r4, pc}
  139ea8:	0014c108 	.word	0x0014c108

00139eac <syscall_msgrcv>:
  139eac:	e92d4010 	push	{r4, lr}
  139eb0:	e3a0100f 	mov	r1, #15
  139eb4:	e59f0008 	ldr	r0, [pc, #8]	; 139ec4 <syscall_msgrcv+0x18>
  139eb8:	ebfffd71 	bl	139484 <syscall_trace>
  139ebc:	e3a00000 	mov	r0, #0
  139ec0:	e8bd8010 	pop	{r4, pc}
  139ec4:	0014c0f8 	.word	0x0014c0f8

00139ec8 <syscall_msgsnd>:
  139ec8:	e92d4010 	push	{r4, lr}
  139ecc:	e3a0100f 	mov	r1, #15
  139ed0:	e59f0008 	ldr	r0, [pc, #8]	; 139ee0 <syscall_msgsnd+0x18>
  139ed4:	ebfffd6a 	bl	139484 <syscall_trace>
  139ed8:	e3a00000 	mov	r0, #0
  139edc:	e8bd8010 	pop	{r4, pc}
  139ee0:	0014c0e8 	.word	0x0014c0e8

00139ee4 <syscall_semctl>:
  139ee4:	e92d4010 	push	{r4, lr}
  139ee8:	e3a0100f 	mov	r1, #15
  139eec:	e59f0008 	ldr	r0, [pc, #8]	; 139efc <syscall_semctl+0x18>
  139ef0:	ebfffd63 	bl	139484 <syscall_trace>
  139ef4:	e3a00000 	mov	r0, #0
  139ef8:	e8bd8010 	pop	{r4, pc}
  139efc:	0014c0d8 	.word	0x0014c0d8

00139f00 <syscall_semget>:
  139f00:	e92d4010 	push	{r4, lr}
  139f04:	e3a0100f 	mov	r1, #15
  139f08:	e59f0008 	ldr	r0, [pc, #8]	; 139f18 <syscall_semget+0x18>
  139f0c:	ebfffd5c 	bl	139484 <syscall_trace>
  139f10:	e3a00000 	mov	r0, #0
  139f14:	e8bd8010 	pop	{r4, pc}
  139f18:	0014c0c8 	.word	0x0014c0c8

00139f1c <syscall_semop>:
  139f1c:	e92d4010 	push	{r4, lr}
  139f20:	e3a0100e 	mov	r1, #14
  139f24:	e59f0008 	ldr	r0, [pc, #8]	; 139f34 <syscall_semop+0x18>
  139f28:	ebfffd55 	bl	139484 <syscall_trace>
  139f2c:	e3a00000 	mov	r0, #0
  139f30:	e8bd8010 	pop	{r4, pc}
  139f34:	0014c0b8 	.word	0x0014c0b8

00139f38 <syscall_recvmsg>:
  139f38:	e92d4010 	push	{r4, lr}
  139f3c:	e3a01010 	mov	r1, #16
  139f40:	e59f0008 	ldr	r0, [pc, #8]	; 139f50 <syscall_recvmsg+0x18>
  139f44:	ebfffd4e 	bl	139484 <syscall_trace>
  139f48:	e3a00000 	mov	r0, #0
  139f4c:	e8bd8010 	pop	{r4, pc}
  139f50:	0014c0a8 	.word	0x0014c0a8

00139f54 <syscall_sendmsg>:
  139f54:	e92d4010 	push	{r4, lr}
  139f58:	e3a01010 	mov	r1, #16
  139f5c:	e59f0008 	ldr	r0, [pc, #8]	; 139f6c <syscall_sendmsg+0x18>
  139f60:	ebfffd47 	bl	139484 <syscall_trace>
  139f64:	e3a00000 	mov	r0, #0
  139f68:	e8bd8010 	pop	{r4, pc}
  139f6c:	0014c098 	.word	0x0014c098

00139f70 <syscall_shutdown>:
  139f70:	e92d4010 	push	{r4, lr}
  139f74:	e3a01011 	mov	r1, #17
  139f78:	e59f0008 	ldr	r0, [pc, #8]	; 139f88 <syscall_shutdown+0x18>
  139f7c:	ebfffd40 	bl	139484 <syscall_trace>
  139f80:	e3a00000 	mov	r0, #0
  139f84:	e8bd8010 	pop	{r4, pc}
  139f88:	0014c05c 	.word	0x0014c05c

00139f8c <syscall_socketpair>:
  139f8c:	e92d4010 	push	{r4, lr}
  139f90:	e3a01013 	mov	r1, #19
  139f94:	e59f0008 	ldr	r0, [pc, #8]	; 139fa4 <syscall_socketpair+0x18>
  139f98:	ebfffd39 	bl	139484 <syscall_trace>
  139f9c:	e3a00000 	mov	r0, #0
  139fa0:	e8bd8010 	pop	{r4, pc}
  139fa4:	0014c004 	.word	0x0014c004

00139fa8 <syscall_waitid>:
  139fa8:	e92d4010 	push	{r4, lr}
  139fac:	e3a0100f 	mov	r1, #15
  139fb0:	e59f0008 	ldr	r0, [pc, #8]	; 139fc0 <syscall_waitid+0x18>
  139fb4:	ebfffd32 	bl	139484 <syscall_trace>
  139fb8:	e3a00000 	mov	r0, #0
  139fbc:	e8bd8010 	pop	{r4, pc}
  139fc0:	0014bf7c 	.word	0x0014bf7c

00139fc4 <syscall_mq_getsetattr>:
  139fc4:	e92d4010 	push	{r4, lr}
  139fc8:	e3a01016 	mov	r1, #22
  139fcc:	e59f0008 	ldr	r0, [pc, #8]	; 139fdc <syscall_mq_getsetattr+0x18>
  139fd0:	ebfffd2b 	bl	139484 <syscall_trace>
  139fd4:	e3a00000 	mov	r0, #0
  139fd8:	e8bd8010 	pop	{r4, pc}
  139fdc:	0014bf64 	.word	0x0014bf64

00139fe0 <syscall_mq_notify>:
  139fe0:	e92d4010 	push	{r4, lr}
  139fe4:	e3a01012 	mov	r1, #18
  139fe8:	e59f0008 	ldr	r0, [pc, #8]	; 139ff8 <syscall_mq_notify+0x18>
  139fec:	ebfffd24 	bl	139484 <syscall_trace>
  139ff0:	e3a00000 	mov	r0, #0
  139ff4:	e8bd8010 	pop	{r4, pc}
  139ff8:	0014bf50 	.word	0x0014bf50

00139ffc <syscall_mq_timedreceive>:
  139ffc:	e92d4010 	push	{r4, lr}
  13a000:	e3a01018 	mov	r1, #24
  13a004:	e59f0008 	ldr	r0, [pc, #8]	; 13a014 <syscall_mq_timedreceive+0x18>
  13a008:	ebfffd1d 	bl	139484 <syscall_trace>
  13a00c:	e3a00000 	mov	r0, #0
  13a010:	e8bd8010 	pop	{r4, pc}
  13a014:	0014bf38 	.word	0x0014bf38

0013a018 <syscall_mq_timedsend>:
  13a018:	e92d4010 	push	{r4, lr}
  13a01c:	e3a01015 	mov	r1, #21
  13a020:	e59f0008 	ldr	r0, [pc, #8]	; 13a030 <syscall_mq_timedsend+0x18>
  13a024:	ebfffd16 	bl	139484 <syscall_trace>
  13a028:	e3a00000 	mov	r0, #0
  13a02c:	e8bd8010 	pop	{r4, pc}
  13a030:	0014bf20 	.word	0x0014bf20

0013a034 <syscall_mq_unlink>:
  13a034:	e92d4010 	push	{r4, lr}
  13a038:	e3a01012 	mov	r1, #18
  13a03c:	e59f0008 	ldr	r0, [pc, #8]	; 13a04c <syscall_mq_unlink+0x18>
  13a040:	ebfffd0f 	bl	139484 <syscall_trace>
  13a044:	e3a00000 	mov	r0, #0
  13a048:	e8bd8010 	pop	{r4, pc}
  13a04c:	0014bf0c 	.word	0x0014bf0c

0013a050 <syscall_mq_open>:
  13a050:	e92d4010 	push	{r4, lr}
  13a054:	e3a01010 	mov	r1, #16
  13a058:	e59f0008 	ldr	r0, [pc, #8]	; 13a068 <syscall_mq_open+0x18>
  13a05c:	ebfffd08 	bl	139484 <syscall_trace>
  13a060:	e3a00000 	mov	r0, #0
  13a064:	e8bd8010 	pop	{r4, pc}
  13a068:	0014befc 	.word	0x0014befc

0013a06c <syscall_pciconfig_write>:
  13a06c:	e92d4010 	push	{r4, lr}
  13a070:	e3a01018 	mov	r1, #24
  13a074:	e59f0008 	ldr	r0, [pc, #8]	; 13a084 <syscall_pciconfig_write+0x18>
  13a078:	ebfffd01 	bl	139484 <syscall_trace>
  13a07c:	e3a00000 	mov	r0, #0
  13a080:	e8bd8010 	pop	{r4, pc}
  13a084:	0014bee4 	.word	0x0014bee4

0013a088 <syscall_pciconfig_read>:
  13a088:	e92d4010 	push	{r4, lr}
  13a08c:	e3a01017 	mov	r1, #23
  13a090:	e59f0008 	ldr	r0, [pc, #8]	; 13a0a0 <syscall_pciconfig_read+0x18>
  13a094:	ebfffcfa 	bl	139484 <syscall_trace>
  13a098:	e3a00000 	mov	r0, #0
  13a09c:	e8bd8010 	pop	{r4, pc}
  13a0a0:	0014becc 	.word	0x0014becc

0013a0a4 <syscall_pciconfig_iobase>:
  13a0a4:	e92d4010 	push	{r4, lr}
  13a0a8:	e3a01019 	mov	r1, #25
  13a0ac:	e59f0008 	ldr	r0, [pc, #8]	; 13a0bc <syscall_pciconfig_iobase+0x18>
  13a0b0:	ebfffcf3 	bl	139484 <syscall_trace>
  13a0b4:	e3a00000 	mov	r0, #0
  13a0b8:	e8bd8010 	pop	{r4, pc}
  13a0bc:	0014beb0 	.word	0x0014beb0

0013a0c0 <syscall_arm_fadvise64_64>:
  13a0c0:	e92d4010 	push	{r4, lr}
  13a0c4:	e3a01019 	mov	r1, #25
  13a0c8:	e59f0008 	ldr	r0, [pc, #8]	; 13a0d8 <syscall_arm_fadvise64_64+0x18>
  13a0cc:	ebfffcec 	bl	139484 <syscall_trace>
  13a0d0:	e3a00000 	mov	r0, #0
  13a0d4:	e8bd8010 	pop	{r4, pc}
  13a0d8:	0014be94 	.word	0x0014be94

0013a0dc <syscall_utimes>:
  13a0dc:	e92d4010 	push	{r4, lr}
  13a0e0:	e3a0100f 	mov	r1, #15
  13a0e4:	e59f0008 	ldr	r0, [pc, #8]	; 13a0f4 <syscall_utimes+0x18>
  13a0e8:	ebfffce5 	bl	139484 <syscall_trace>
  13a0ec:	e3a00000 	mov	r0, #0
  13a0f0:	e8bd8010 	pop	{r4, pc}
  13a0f4:	0014be84 	.word	0x0014be84

0013a0f8 <syscall_tgkill>:
  13a0f8:	e92d4010 	push	{r4, lr}
  13a0fc:	e3a0100f 	mov	r1, #15
  13a100:	e59f0008 	ldr	r0, [pc, #8]	; 13a110 <syscall_tgkill+0x18>
  13a104:	ebfffcde 	bl	139484 <syscall_trace>
  13a108:	e3a00000 	mov	r0, #0
  13a10c:	e8bd8010 	pop	{r4, pc}
  13a110:	0014be74 	.word	0x0014be74

0013a114 <syscall_fstatfs64>:
  13a114:	e92d4010 	push	{r4, lr}
  13a118:	e3a01012 	mov	r1, #18
  13a11c:	e59f0008 	ldr	r0, [pc, #8]	; 13a12c <syscall_fstatfs64+0x18>
  13a120:	ebfffcd7 	bl	139484 <syscall_trace>
  13a124:	e3a00000 	mov	r0, #0
  13a128:	e8bd8010 	pop	{r4, pc}
  13a12c:	0014be60 	.word	0x0014be60

0013a130 <syscall_statfs64>:
  13a130:	e92d4010 	push	{r4, lr}
  13a134:	e3a01011 	mov	r1, #17
  13a138:	e59f0008 	ldr	r0, [pc, #8]	; 13a148 <syscall_statfs64+0x18>
  13a13c:	ebfffcd0 	bl	139484 <syscall_trace>
  13a140:	e3a00000 	mov	r0, #0
  13a144:	e8bd8010 	pop	{r4, pc}
  13a148:	0014be4c 	.word	0x0014be4c

0013a14c <syscall_clock_nanosleep>:
  13a14c:	e92d4010 	push	{r4, lr}
  13a150:	e3a01018 	mov	r1, #24
  13a154:	e59f0008 	ldr	r0, [pc, #8]	; 13a164 <syscall_clock_nanosleep+0x18>
  13a158:	ebfffcc9 	bl	139484 <syscall_trace>
  13a15c:	e3a00000 	mov	r0, #0
  13a160:	e8bd8010 	pop	{r4, pc}
  13a164:	0014be34 	.word	0x0014be34

0013a168 <syscall_timer_delete>:
  13a168:	e92d4010 	push	{r4, lr}
  13a16c:	e3a01015 	mov	r1, #21
  13a170:	e59f0008 	ldr	r0, [pc, #8]	; 13a180 <syscall_timer_delete+0x18>
  13a174:	ebfffcc2 	bl	139484 <syscall_trace>
  13a178:	e3a00000 	mov	r0, #0
  13a17c:	e8bd8010 	pop	{r4, pc}
  13a180:	0014bdd4 	.word	0x0014bdd4

0013a184 <syscall_timer_getoverrun>:
  13a184:	e92d4010 	push	{r4, lr}
  13a188:	e3a01019 	mov	r1, #25
  13a18c:	e59f0008 	ldr	r0, [pc, #8]	; 13a19c <syscall_timer_getoverrun+0x18>
  13a190:	ebfffcbb 	bl	139484 <syscall_trace>
  13a194:	e3a00000 	mov	r0, #0
  13a198:	e8bd8010 	pop	{r4, pc}
  13a19c:	0014bdb8 	.word	0x0014bdb8

0013a1a0 <syscall_timer_gettime>:
  13a1a0:	e92d4010 	push	{r4, lr}
  13a1a4:	e3a01016 	mov	r1, #22
  13a1a8:	e59f0008 	ldr	r0, [pc, #8]	; 13a1b8 <syscall_timer_gettime+0x18>
  13a1ac:	ebfffcb4 	bl	139484 <syscall_trace>
  13a1b0:	e3a00000 	mov	r0, #0
  13a1b4:	e8bd8010 	pop	{r4, pc}
  13a1b8:	0014bda0 	.word	0x0014bda0

0013a1bc <syscall_timer_settime>:
  13a1bc:	e92d4010 	push	{r4, lr}
  13a1c0:	e3a01016 	mov	r1, #22
  13a1c4:	e59f0008 	ldr	r0, [pc, #8]	; 13a1d4 <syscall_timer_settime+0x18>
  13a1c8:	ebfffcad 	bl	139484 <syscall_trace>
  13a1cc:	e3a00000 	mov	r0, #0
  13a1d0:	e8bd8010 	pop	{r4, pc}
  13a1d4:	0014bd88 	.word	0x0014bd88

0013a1d8 <syscall_timer_create>:
  13a1d8:	e92d4010 	push	{r4, lr}
  13a1dc:	e3a01015 	mov	r1, #21
  13a1e0:	e59f0008 	ldr	r0, [pc, #8]	; 13a1f0 <syscall_timer_create+0x18>
  13a1e4:	ebfffca6 	bl	139484 <syscall_trace>
  13a1e8:	e3a00000 	mov	r0, #0
  13a1ec:	e8bd8010 	pop	{r4, pc}
  13a1f0:	0014bd70 	.word	0x0014bd70

0013a1f4 <syscall_remap_file_pages>:
  13a1f4:	e92d4010 	push	{r4, lr}
  13a1f8:	e3a01019 	mov	r1, #25
  13a1fc:	e59f0008 	ldr	r0, [pc, #8]	; 13a20c <syscall_remap_file_pages+0x18>
  13a200:	ebfffc9f 	bl	139484 <syscall_trace>
  13a204:	e3a00000 	mov	r0, #0
  13a208:	e8bd8010 	pop	{r4, pc}
  13a20c:	0014bd3c 	.word	0x0014bd3c

0013a210 <syscall_epoll_wait>:
  13a210:	e92d4010 	push	{r4, lr}
  13a214:	e3a01013 	mov	r1, #19
  13a218:	e59f0008 	ldr	r0, [pc, #8]	; 13a228 <syscall_epoll_wait+0x18>
  13a21c:	ebfffc98 	bl	139484 <syscall_trace>
  13a220:	e3e00025 	mvn	r0, #37	; 0x25
  13a224:	e8bd8010 	pop	{r4, pc}
  13a228:	0014bd28 	.word	0x0014bd28

0013a22c <syscall_epoll_ctl>:
  13a22c:	e92d4010 	push	{r4, lr}
  13a230:	e3a01012 	mov	r1, #18
  13a234:	e59f0008 	ldr	r0, [pc, #8]	; 13a244 <syscall_epoll_ctl+0x18>
  13a238:	ebfffc91 	bl	139484 <syscall_trace>
  13a23c:	e3e00025 	mvn	r0, #37	; 0x25
  13a240:	e8bd8010 	pop	{r4, pc}
  13a244:	0014bd14 	.word	0x0014bd14

0013a248 <syscall_epoll_create>:
  13a248:	e92d4010 	push	{r4, lr}
  13a24c:	e3a01015 	mov	r1, #21
  13a250:	e59f0008 	ldr	r0, [pc, #8]	; 13a260 <syscall_epoll_create+0x18>
  13a254:	ebfffc8a 	bl	139484 <syscall_trace>
  13a258:	e3e00025 	mvn	r0, #37	; 0x25
  13a25c:	e8bd8010 	pop	{r4, pc}
  13a260:	0014bcfc 	.word	0x0014bcfc

0013a264 <syscall_lookup_dcookie>:
  13a264:	e92d4010 	push	{r4, lr}
  13a268:	e3a01017 	mov	r1, #23
  13a26c:	e59f0008 	ldr	r0, [pc, #8]	; 13a27c <syscall_lookup_dcookie+0x18>
  13a270:	ebfffc83 	bl	139484 <syscall_trace>
  13a274:	e3a00000 	mov	r0, #0
  13a278:	e8bd8010 	pop	{r4, pc}
  13a27c:	0014bce4 	.word	0x0014bce4

0013a280 <syscall_io_cancel>:
  13a280:	e92d4010 	push	{r4, lr}
  13a284:	e3a01012 	mov	r1, #18
  13a288:	e59f0008 	ldr	r0, [pc, #8]	; 13a298 <syscall_io_cancel+0x18>
  13a28c:	ebfffc7c 	bl	139484 <syscall_trace>
  13a290:	e3a00000 	mov	r0, #0
  13a294:	e8bd8010 	pop	{r4, pc}
  13a298:	0014bcbc 	.word	0x0014bcbc

0013a29c <syscall_io_submit>:
  13a29c:	e92d4010 	push	{r4, lr}
  13a2a0:	e3a01012 	mov	r1, #18
  13a2a4:	e59f0008 	ldr	r0, [pc, #8]	; 13a2b4 <syscall_io_submit+0x18>
  13a2a8:	ebfffc75 	bl	139484 <syscall_trace>
  13a2ac:	e3a00000 	mov	r0, #0
  13a2b0:	e8bd8010 	pop	{r4, pc}
  13a2b4:	0014bca8 	.word	0x0014bca8

0013a2b8 <syscall_io_getevents>:
  13a2b8:	e92d4010 	push	{r4, lr}
  13a2bc:	e3a01015 	mov	r1, #21
  13a2c0:	e59f0008 	ldr	r0, [pc, #8]	; 13a2d0 <syscall_io_getevents+0x18>
  13a2c4:	ebfffc6e 	bl	139484 <syscall_trace>
  13a2c8:	e3a00000 	mov	r0, #0
  13a2cc:	e8bd8010 	pop	{r4, pc}
  13a2d0:	0014bc90 	.word	0x0014bc90

0013a2d4 <syscall_io_destroy>:
  13a2d4:	e92d4010 	push	{r4, lr}
  13a2d8:	e3a01013 	mov	r1, #19
  13a2dc:	e59f0008 	ldr	r0, [pc, #8]	; 13a2ec <syscall_io_destroy+0x18>
  13a2e0:	ebfffc67 	bl	139484 <syscall_trace>
  13a2e4:	e3a00000 	mov	r0, #0
  13a2e8:	e8bd8010 	pop	{r4, pc}
  13a2ec:	0014bc7c 	.word	0x0014bc7c

0013a2f0 <syscall_io_setup>:
  13a2f0:	e92d4010 	push	{r4, lr}
  13a2f4:	e3a01011 	mov	r1, #17
  13a2f8:	e59f0008 	ldr	r0, [pc, #8]	; 13a308 <syscall_io_setup+0x18>
  13a2fc:	ebfffc60 	bl	139484 <syscall_trace>
  13a300:	e3a00000 	mov	r0, #0
  13a304:	e8bd8010 	pop	{r4, pc}
  13a308:	0014bc68 	.word	0x0014bc68

0013a30c <syscall_sched_getaffinity>:
  13a30c:	e92d4010 	push	{r4, lr}
  13a310:	e3a0101a 	mov	r1, #26
  13a314:	e59f0008 	ldr	r0, [pc, #8]	; 13a324 <syscall_sched_getaffinity+0x18>
  13a318:	ebfffc59 	bl	139484 <syscall_trace>
  13a31c:	e3a00000 	mov	r0, #0
  13a320:	e8bd8010 	pop	{r4, pc}
  13a324:	0014bc4c 	.word	0x0014bc4c

0013a328 <syscall_sendfile64>:
  13a328:	e92d4010 	push	{r4, lr}
  13a32c:	e3a01013 	mov	r1, #19
  13a330:	e59f0008 	ldr	r0, [pc, #8]	; 13a340 <syscall_sendfile64+0x18>
  13a334:	ebfffc52 	bl	139484 <syscall_trace>
  13a338:	e3a00000 	mov	r0, #0
  13a33c:	e8bd8010 	pop	{r4, pc}
  13a340:	0014bc0c 	.word	0x0014bc0c

0013a344 <syscall_fremovexattr>:
  13a344:	e92d4010 	push	{r4, lr}
  13a348:	e3a01015 	mov	r1, #21
  13a34c:	e59f0008 	ldr	r0, [pc, #8]	; 13a35c <syscall_fremovexattr+0x18>
  13a350:	ebfffc4b 	bl	139484 <syscall_trace>
  13a354:	e3a00000 	mov	r0, #0
  13a358:	e8bd8010 	pop	{r4, pc}
  13a35c:	0014bbe4 	.word	0x0014bbe4

0013a360 <syscall_lremovexattr>:
  13a360:	e92d4010 	push	{r4, lr}
  13a364:	e3a01015 	mov	r1, #21
  13a368:	e59f0008 	ldr	r0, [pc, #8]	; 13a378 <syscall_lremovexattr+0x18>
  13a36c:	ebfffc44 	bl	139484 <syscall_trace>
  13a370:	e3a00000 	mov	r0, #0
  13a374:	e8bd8010 	pop	{r4, pc}
  13a378:	0014bbcc 	.word	0x0014bbcc

0013a37c <syscall_removexattr>:
  13a37c:	e92d4010 	push	{r4, lr}
  13a380:	e3a01014 	mov	r1, #20
  13a384:	e59f0008 	ldr	r0, [pc, #8]	; 13a394 <syscall_removexattr+0x18>
  13a388:	ebfffc3d 	bl	139484 <syscall_trace>
  13a38c:	e3a00000 	mov	r0, #0
  13a390:	e8bd8010 	pop	{r4, pc}
  13a394:	0014bbb8 	.word	0x0014bbb8

0013a398 <syscall_flistxattr>:
  13a398:	e92d4010 	push	{r4, lr}
  13a39c:	e3a01013 	mov	r1, #19
  13a3a0:	e59f0008 	ldr	r0, [pc, #8]	; 13a3b0 <syscall_flistxattr+0x18>
  13a3a4:	ebfffc36 	bl	139484 <syscall_trace>
  13a3a8:	e3a00000 	mov	r0, #0
  13a3ac:	e8bd8010 	pop	{r4, pc}
  13a3b0:	0014bba4 	.word	0x0014bba4

0013a3b4 <syscall_llistxattr>:
  13a3b4:	e92d4010 	push	{r4, lr}
  13a3b8:	e3a01013 	mov	r1, #19
  13a3bc:	e59f0008 	ldr	r0, [pc, #8]	; 13a3cc <syscall_llistxattr+0x18>
  13a3c0:	ebfffc2f 	bl	139484 <syscall_trace>
  13a3c4:	e3a00000 	mov	r0, #0
  13a3c8:	e8bd8010 	pop	{r4, pc}
  13a3cc:	0014bb90 	.word	0x0014bb90

0013a3d0 <syscall_listxattr>:
  13a3d0:	e92d4010 	push	{r4, lr}
  13a3d4:	e3a01012 	mov	r1, #18
  13a3d8:	e59f0008 	ldr	r0, [pc, #8]	; 13a3e8 <syscall_listxattr+0x18>
  13a3dc:	ebfffc28 	bl	139484 <syscall_trace>
  13a3e0:	e3a00000 	mov	r0, #0
  13a3e4:	e8bd8010 	pop	{r4, pc}
  13a3e8:	0014bb7c 	.word	0x0014bb7c

0013a3ec <syscall_fgetxattr>:
  13a3ec:	e92d4010 	push	{r4, lr}
  13a3f0:	e3a01012 	mov	r1, #18
  13a3f4:	e59f0008 	ldr	r0, [pc, #8]	; 13a404 <syscall_fgetxattr+0x18>
  13a3f8:	ebfffc21 	bl	139484 <syscall_trace>
  13a3fc:	e3a00000 	mov	r0, #0
  13a400:	e8bd8010 	pop	{r4, pc}
  13a404:	0014bb68 	.word	0x0014bb68

0013a408 <syscall_lgetxattr>:
  13a408:	e92d4010 	push	{r4, lr}
  13a40c:	e3a01012 	mov	r1, #18
  13a410:	e59f0008 	ldr	r0, [pc, #8]	; 13a420 <syscall_lgetxattr+0x18>
  13a414:	ebfffc1a 	bl	139484 <syscall_trace>
  13a418:	e3a00000 	mov	r0, #0
  13a41c:	e8bd8010 	pop	{r4, pc}
  13a420:	0014bb54 	.word	0x0014bb54

0013a424 <syscall_getxattr>:
  13a424:	e92d4010 	push	{r4, lr}
  13a428:	e3a01011 	mov	r1, #17
  13a42c:	e59f0008 	ldr	r0, [pc, #8]	; 13a43c <syscall_getxattr+0x18>
  13a430:	ebfffc13 	bl	139484 <syscall_trace>
  13a434:	e3a00000 	mov	r0, #0
  13a438:	e8bd8010 	pop	{r4, pc}
  13a43c:	0014bb40 	.word	0x0014bb40

0013a440 <syscall_fsetxattr>:
  13a440:	e92d4010 	push	{r4, lr}
  13a444:	e3a01012 	mov	r1, #18
  13a448:	e59f0008 	ldr	r0, [pc, #8]	; 13a458 <syscall_fsetxattr+0x18>
  13a44c:	ebfffc0c 	bl	139484 <syscall_trace>
  13a450:	e3a00000 	mov	r0, #0
  13a454:	e8bd8010 	pop	{r4, pc}
  13a458:	0014bb2c 	.word	0x0014bb2c

0013a45c <syscall_lsetxattr>:
  13a45c:	e92d4010 	push	{r4, lr}
  13a460:	e3a01012 	mov	r1, #18
  13a464:	e59f0008 	ldr	r0, [pc, #8]	; 13a474 <syscall_lsetxattr+0x18>
  13a468:	ebfffc05 	bl	139484 <syscall_trace>
  13a46c:	e3a00000 	mov	r0, #0
  13a470:	e8bd8010 	pop	{r4, pc}
  13a474:	0014bb18 	.word	0x0014bb18

0013a478 <syscall_setxattr>:
  13a478:	e92d4010 	push	{r4, lr}
  13a47c:	e3a01011 	mov	r1, #17
  13a480:	e59f0008 	ldr	r0, [pc, #8]	; 13a490 <syscall_setxattr+0x18>
  13a484:	ebfffbfe 	bl	139484 <syscall_trace>
  13a488:	e3a00000 	mov	r0, #0
  13a48c:	e8bd8010 	pop	{r4, pc}
  13a490:	0014bb04 	.word	0x0014bb04

0013a494 <syscall_readahead>:
  13a494:	e92d4010 	push	{r4, lr}
  13a498:	e3a01012 	mov	r1, #18
  13a49c:	e59f0008 	ldr	r0, [pc, #8]	; 13a4ac <syscall_readahead+0x18>
  13a4a0:	ebfffbf7 	bl	139484 <syscall_trace>
  13a4a4:	e3a00000 	mov	r0, #0
  13a4a8:	e8bd8010 	pop	{r4, pc}
  13a4ac:	0014baf0 	.word	0x0014baf0

0013a4b0 <syscall_mincore>:
  13a4b0:	e92d4010 	push	{r4, lr}
  13a4b4:	e3a01010 	mov	r1, #16
  13a4b8:	e59f0008 	ldr	r0, [pc, #8]	; 13a4c8 <syscall_mincore+0x18>
  13a4bc:	ebfffbf0 	bl	139484 <syscall_trace>
  13a4c0:	e3a00000 	mov	r0, #0
  13a4c4:	e8bd8010 	pop	{r4, pc}
  13a4c8:	0014bab0 	.word	0x0014bab0

0013a4cc <syscall_pivot_root>:
  13a4cc:	e92d4010 	push	{r4, lr}
  13a4d0:	e3a01013 	mov	r1, #19
  13a4d4:	e59f0008 	ldr	r0, [pc, #8]	; 13a4e4 <syscall_pivot_root+0x18>
  13a4d8:	ebfffbe9 	bl	139484 <syscall_trace>
  13a4dc:	e3a00000 	mov	r0, #0
  13a4e0:	e8bd8010 	pop	{r4, pc}
  13a4e4:	0014ba9c 	.word	0x0014ba9c

0013a4e8 <syscall_setfsgid32>:
  13a4e8:	e92d4010 	push	{r4, lr}
  13a4ec:	e3a01013 	mov	r1, #19
  13a4f0:	e59f0008 	ldr	r0, [pc, #8]	; 13a500 <syscall_setfsgid32+0x18>
  13a4f4:	ebfffbe2 	bl	139484 <syscall_trace>
  13a4f8:	e3a00000 	mov	r0, #0
  13a4fc:	e8bd8010 	pop	{r4, pc}
  13a500:	0014ba74 	.word	0x0014ba74

0013a504 <syscall_setfsuid32>:
  13a504:	e92d4010 	push	{r4, lr}
  13a508:	e3a01013 	mov	r1, #19
  13a50c:	e59f0008 	ldr	r0, [pc, #8]	; 13a51c <syscall_setfsuid32+0x18>
  13a510:	ebfffbdb 	bl	139484 <syscall_trace>
  13a514:	e3a00000 	mov	r0, #0
  13a518:	e8bd8010 	pop	{r4, pc}
  13a51c:	0014ba60 	.word	0x0014ba60

0013a520 <syscall_setgid32>:
  13a520:	e92d4010 	push	{r4, lr}
  13a524:	e3a01011 	mov	r1, #17
  13a528:	e59f0008 	ldr	r0, [pc, #8]	; 13a538 <syscall_setgid32+0x18>
  13a52c:	ebfffbd4 	bl	139484 <syscall_trace>
  13a530:	e3a00000 	mov	r0, #0
  13a534:	e8bd8010 	pop	{r4, pc}
  13a538:	0014ba4c 	.word	0x0014ba4c

0013a53c <syscall_setuid32>:
  13a53c:	e92d4010 	push	{r4, lr}
  13a540:	e3a01011 	mov	r1, #17
  13a544:	e59f0008 	ldr	r0, [pc, #8]	; 13a554 <syscall_setuid32+0x18>
  13a548:	ebfffbcd 	bl	139484 <syscall_trace>
  13a54c:	e3a00000 	mov	r0, #0
  13a550:	e8bd8010 	pop	{r4, pc}
  13a554:	0014ba38 	.word	0x0014ba38

0013a558 <syscall_chown32>:
  13a558:	e92d4010 	push	{r4, lr}
  13a55c:	e3a01010 	mov	r1, #16
  13a560:	e59f0008 	ldr	r0, [pc, #8]	; 13a570 <syscall_chown32+0x18>
  13a564:	ebfffbc6 	bl	139484 <syscall_trace>
  13a568:	e3a00000 	mov	r0, #0
  13a56c:	e8bd8010 	pop	{r4, pc}
  13a570:	0014ba28 	.word	0x0014ba28

0013a574 <syscall_getresgid32>:
  13a574:	e92d4010 	push	{r4, lr}
  13a578:	e3a01014 	mov	r1, #20
  13a57c:	e59f0008 	ldr	r0, [pc, #8]	; 13a58c <syscall_getresgid32+0x18>
  13a580:	ebfffbbf 	bl	139484 <syscall_trace>
  13a584:	e3a00000 	mov	r0, #0
  13a588:	e8bd8010 	pop	{r4, pc}
  13a58c:	0014ba14 	.word	0x0014ba14

0013a590 <syscall_setresgid32>:
  13a590:	e92d4010 	push	{r4, lr}
  13a594:	e3a01014 	mov	r1, #20
  13a598:	e59f0008 	ldr	r0, [pc, #8]	; 13a5a8 <syscall_setresgid32+0x18>
  13a59c:	ebfffbb8 	bl	139484 <syscall_trace>
  13a5a0:	e3a00000 	mov	r0, #0
  13a5a4:	e8bd8010 	pop	{r4, pc}
  13a5a8:	0014ba00 	.word	0x0014ba00

0013a5ac <syscall_getresuid32>:
  13a5ac:	e92d4010 	push	{r4, lr}
  13a5b0:	e3a01014 	mov	r1, #20
  13a5b4:	e59f0008 	ldr	r0, [pc, #8]	; 13a5c4 <syscall_getresuid32+0x18>
  13a5b8:	ebfffbb1 	bl	139484 <syscall_trace>
  13a5bc:	e3a00000 	mov	r0, #0
  13a5c0:	e8bd8010 	pop	{r4, pc}
  13a5c4:	0014b9ec 	.word	0x0014b9ec

0013a5c8 <syscall_setresuid32>:
  13a5c8:	e92d4010 	push	{r4, lr}
  13a5cc:	e3a01014 	mov	r1, #20
  13a5d0:	e59f0008 	ldr	r0, [pc, #8]	; 13a5e0 <syscall_setresuid32+0x18>
  13a5d4:	ebfffbaa 	bl	139484 <syscall_trace>
  13a5d8:	e3a00000 	mov	r0, #0
  13a5dc:	e8bd8010 	pop	{r4, pc}
  13a5e0:	0014b9d8 	.word	0x0014b9d8

0013a5e4 <syscall_fchown32>:
  13a5e4:	e92d4010 	push	{r4, lr}
  13a5e8:	e3a01011 	mov	r1, #17
  13a5ec:	e59f0008 	ldr	r0, [pc, #8]	; 13a5fc <syscall_fchown32+0x18>
  13a5f0:	ebfffba3 	bl	139484 <syscall_trace>
  13a5f4:	e3a00000 	mov	r0, #0
  13a5f8:	e8bd8010 	pop	{r4, pc}
  13a5fc:	0014b9c4 	.word	0x0014b9c4

0013a600 <syscall_setgroups32>:
  13a600:	e92d4010 	push	{r4, lr}
  13a604:	e3a01014 	mov	r1, #20
  13a608:	e59f0008 	ldr	r0, [pc, #8]	; 13a618 <syscall_setgroups32+0x18>
  13a60c:	ebfffb9c 	bl	139484 <syscall_trace>
  13a610:	e3a00000 	mov	r0, #0
  13a614:	e8bd8010 	pop	{r4, pc}
  13a618:	0014b9b0 	.word	0x0014b9b0

0013a61c <syscall_getgroups32>:
  13a61c:	e92d4010 	push	{r4, lr}
  13a620:	e3a01014 	mov	r1, #20
  13a624:	e59f0008 	ldr	r0, [pc, #8]	; 13a634 <syscall_getgroups32+0x18>
  13a628:	ebfffb95 	bl	139484 <syscall_trace>
  13a62c:	e3a00000 	mov	r0, #0
  13a630:	e8bd8010 	pop	{r4, pc}
  13a634:	0014b99c 	.word	0x0014b99c

0013a638 <syscall_setregid32>:
  13a638:	e92d4010 	push	{r4, lr}
  13a63c:	e3a01013 	mov	r1, #19
  13a640:	e59f0008 	ldr	r0, [pc, #8]	; 13a650 <syscall_setregid32+0x18>
  13a644:	ebfffb8e 	bl	139484 <syscall_trace>
  13a648:	e3a00000 	mov	r0, #0
  13a64c:	e8bd8010 	pop	{r4, pc}
  13a650:	0014b988 	.word	0x0014b988

0013a654 <syscall_setreuid32>:
  13a654:	e92d4010 	push	{r4, lr}
  13a658:	e3a01013 	mov	r1, #19
  13a65c:	e59f0008 	ldr	r0, [pc, #8]	; 13a66c <syscall_setreuid32+0x18>
  13a660:	ebfffb87 	bl	139484 <syscall_trace>
  13a664:	e3a00000 	mov	r0, #0
  13a668:	e8bd8010 	pop	{r4, pc}
  13a66c:	0014b974 	.word	0x0014b974

0013a670 <syscall_getegid32>:
  13a670:	e92d4010 	push	{r4, lr}
  13a674:	e3a01012 	mov	r1, #18
  13a678:	e59f0008 	ldr	r0, [pc, #8]	; 13a688 <syscall_getegid32+0x18>
  13a67c:	ebfffb80 	bl	139484 <syscall_trace>
  13a680:	e3a00000 	mov	r0, #0
  13a684:	e8bd8010 	pop	{r4, pc}
  13a688:	0014b960 	.word	0x0014b960

0013a68c <syscall_geteuid32>:
  13a68c:	e92d4010 	push	{r4, lr}
  13a690:	e3a01012 	mov	r1, #18
  13a694:	e59f0008 	ldr	r0, [pc, #8]	; 13a6a4 <syscall_geteuid32+0x18>
  13a698:	ebfffb79 	bl	139484 <syscall_trace>
  13a69c:	e3a00000 	mov	r0, #0
  13a6a0:	e8bd8010 	pop	{r4, pc}
  13a6a4:	0014b94c 	.word	0x0014b94c

0013a6a8 <syscall_getgid32>:
  13a6a8:	e92d4010 	push	{r4, lr}
  13a6ac:	e3a01011 	mov	r1, #17
  13a6b0:	e59f0008 	ldr	r0, [pc, #8]	; 13a6c0 <syscall_getgid32+0x18>
  13a6b4:	ebfffb72 	bl	139484 <syscall_trace>
  13a6b8:	e3a00000 	mov	r0, #0
  13a6bc:	e8bd8010 	pop	{r4, pc}
  13a6c0:	0014b938 	.word	0x0014b938

0013a6c4 <syscall_getuid32>:
  13a6c4:	e92d4010 	push	{r4, lr}
  13a6c8:	e3a01011 	mov	r1, #17
  13a6cc:	e59f0008 	ldr	r0, [pc, #8]	; 13a6dc <syscall_getuid32+0x18>
  13a6d0:	ebfffb6b 	bl	139484 <syscall_trace>
  13a6d4:	e3a00000 	mov	r0, #0
  13a6d8:	e8bd8010 	pop	{r4, pc}
  13a6dc:	0014b924 	.word	0x0014b924

0013a6e0 <syscall_lchown32>:
  13a6e0:	e92d4010 	push	{r4, lr}
  13a6e4:	e3a01011 	mov	r1, #17
  13a6e8:	e59f0008 	ldr	r0, [pc, #8]	; 13a6f8 <syscall_lchown32+0x18>
  13a6ec:	ebfffb64 	bl	139484 <syscall_trace>
  13a6f0:	e3a00000 	mov	r0, #0
  13a6f4:	e8bd8010 	pop	{r4, pc}
  13a6f8:	0014b910 	.word	0x0014b910

0013a6fc <syscall_ftruncate64>:
  13a6fc:	e92d4010 	push	{r4, lr}
  13a700:	e3a01014 	mov	r1, #20
  13a704:	e59f0008 	ldr	r0, [pc, #8]	; 13a714 <syscall_ftruncate64+0x18>
  13a708:	ebfffb5d 	bl	139484 <syscall_trace>
  13a70c:	e3a00000 	mov	r0, #0
  13a710:	e8bd8010 	pop	{r4, pc}
  13a714:	0014b8cc 	.word	0x0014b8cc

0013a718 <syscall_truncate64>:
  13a718:	e92d4010 	push	{r4, lr}
  13a71c:	e3a01013 	mov	r1, #19
  13a720:	e59f0008 	ldr	r0, [pc, #8]	; 13a730 <syscall_truncate64+0x18>
  13a724:	ebfffb56 	bl	139484 <syscall_trace>
  13a728:	e3a00000 	mov	r0, #0
  13a72c:	e8bd8010 	pop	{r4, pc}
  13a730:	0014b8b8 	.word	0x0014b8b8

0013a734 <syscall_sendfile>:
  13a734:	e92d4010 	push	{r4, lr}
  13a738:	e3a01011 	mov	r1, #17
  13a73c:	e59f0008 	ldr	r0, [pc, #8]	; 13a74c <syscall_sendfile+0x18>
  13a740:	ebfffb4f 	bl	139484 <syscall_trace>
  13a744:	e3a00000 	mov	r0, #0
  13a748:	e8bd8010 	pop	{r4, pc}
  13a74c:	0014b870 	.word	0x0014b870

0013a750 <syscall_sigaltstack>:
  13a750:	e92d4010 	push	{r4, lr}
  13a754:	e3a01014 	mov	r1, #20
  13a758:	e59f0008 	ldr	r0, [pc, #8]	; 13a768 <syscall_sigaltstack+0x18>
  13a75c:	ebfffb48 	bl	139484 <syscall_trace>
  13a760:	e3a00000 	mov	r0, #0
  13a764:	e8bd8010 	pop	{r4, pc}
  13a768:	0014b85c 	.word	0x0014b85c

0013a76c <syscall_capset>:
  13a76c:	e92d4010 	push	{r4, lr}
  13a770:	e3a0100f 	mov	r1, #15
  13a774:	e59f0008 	ldr	r0, [pc, #8]	; 13a784 <syscall_capset+0x18>
  13a778:	ebfffb41 	bl	139484 <syscall_trace>
  13a77c:	e3a00000 	mov	r0, #0
  13a780:	e8bd8010 	pop	{r4, pc}
  13a784:	0014b84c 	.word	0x0014b84c

0013a788 <syscall_capget>:
  13a788:	e92d4010 	push	{r4, lr}
  13a78c:	e3a0100f 	mov	r1, #15
  13a790:	e59f0008 	ldr	r0, [pc, #8]	; 13a7a0 <syscall_capget+0x18>
  13a794:	ebfffb3a 	bl	139484 <syscall_trace>
  13a798:	e3a00000 	mov	r0, #0
  13a79c:	e8bd8010 	pop	{r4, pc}
  13a7a0:	0014b83c 	.word	0x0014b83c

0013a7a4 <syscall_chown>:
  13a7a4:	e92d4010 	push	{r4, lr}
  13a7a8:	e3a0100e 	mov	r1, #14
  13a7ac:	e59f0008 	ldr	r0, [pc, #8]	; 13a7bc <syscall_chown+0x18>
  13a7b0:	ebfffb33 	bl	139484 <syscall_trace>
  13a7b4:	e3a00000 	mov	r0, #0
  13a7b8:	e8bd8010 	pop	{r4, pc}
  13a7bc:	0014b81c 	.word	0x0014b81c

0013a7c0 <syscall_pwrite64>:
  13a7c0:	e92d4010 	push	{r4, lr}
  13a7c4:	e3a01011 	mov	r1, #17
  13a7c8:	e59f0008 	ldr	r0, [pc, #8]	; 13a7d8 <syscall_pwrite64+0x18>
  13a7cc:	ebfffb2c 	bl	139484 <syscall_trace>
  13a7d0:	e3a00000 	mov	r0, #0
  13a7d4:	e8bd8010 	pop	{r4, pc}
  13a7d8:	0014b808 	.word	0x0014b808

0013a7dc <syscall_pread64>:
  13a7dc:	e92d4010 	push	{r4, lr}
  13a7e0:	e3a01010 	mov	r1, #16
  13a7e4:	e59f0008 	ldr	r0, [pc, #8]	; 13a7f4 <syscall_pread64+0x18>
  13a7e8:	ebfffb25 	bl	139484 <syscall_trace>
  13a7ec:	e3a00000 	mov	r0, #0
  13a7f0:	e8bd8010 	pop	{r4, pc}
  13a7f4:	0014b7f8 	.word	0x0014b7f8

0013a7f8 <syscall_rt_sigsuspend>:
  13a7f8:	e92d4010 	push	{r4, lr}
  13a7fc:	e3a01016 	mov	r1, #22
  13a800:	e59f0008 	ldr	r0, [pc, #8]	; 13a810 <syscall_rt_sigsuspend+0x18>
  13a804:	ebfffb1e 	bl	139484 <syscall_trace>
  13a808:	e3a00000 	mov	r0, #0
  13a80c:	e8bd8010 	pop	{r4, pc}
  13a810:	0014b7e0 	.word	0x0014b7e0

0013a814 <syscall_rt_sigqueueinfo>:
  13a814:	e92d4010 	push	{r4, lr}
  13a818:	e3a01018 	mov	r1, #24
  13a81c:	e59f0008 	ldr	r0, [pc, #8]	; 13a82c <syscall_rt_sigqueueinfo+0x18>
  13a820:	ebfffb17 	bl	139484 <syscall_trace>
  13a824:	e3a00000 	mov	r0, #0
  13a828:	e8bd8010 	pop	{r4, pc}
  13a82c:	0014b7c8 	.word	0x0014b7c8

0013a830 <syscall_rt_sigtimedwait>:
  13a830:	e92d4010 	push	{r4, lr}
  13a834:	e3a01018 	mov	r1, #24
  13a838:	e59f0008 	ldr	r0, [pc, #8]	; 13a848 <syscall_rt_sigtimedwait+0x18>
  13a83c:	ebfffb10 	bl	139484 <syscall_trace>
  13a840:	e3a00000 	mov	r0, #0
  13a844:	e8bd8010 	pop	{r4, pc}
  13a848:	0014b7b0 	.word	0x0014b7b0

0013a84c <syscall_rt_sigpending>:
  13a84c:	e92d4010 	push	{r4, lr}
  13a850:	e3a01016 	mov	r1, #22
  13a854:	e59f0008 	ldr	r0, [pc, #8]	; 13a864 <syscall_rt_sigpending+0x18>
  13a858:	ebfffb09 	bl	139484 <syscall_trace>
  13a85c:	e3a00000 	mov	r0, #0
  13a860:	e8bd8010 	pop	{r4, pc}
  13a864:	0014b798 	.word	0x0014b798

0013a868 <syscall_rt_sigreturn>:
  13a868:	e92d4010 	push	{r4, lr}
  13a86c:	e3a01015 	mov	r1, #21
  13a870:	e59f0008 	ldr	r0, [pc, #8]	; 13a880 <syscall_rt_sigreturn+0x18>
  13a874:	ebfffb02 	bl	139484 <syscall_trace>
  13a878:	e3a00000 	mov	r0, #0
  13a87c:	e8bd8010 	pop	{r4, pc}
  13a880:	0014b750 	.word	0x0014b750

0013a884 <syscall_prctl>:
  13a884:	e92d4010 	push	{r4, lr}
  13a888:	e3a0100e 	mov	r1, #14
  13a88c:	e59f0008 	ldr	r0, [pc, #8]	; 13a89c <syscall_prctl+0x18>
  13a890:	ebfffafb 	bl	139484 <syscall_trace>
  13a894:	e3a00000 	mov	r0, #0
  13a898:	e8bd8010 	pop	{r4, pc}
  13a89c:	0014b740 	.word	0x0014b740

0013a8a0 <syscall_getresgid>:
  13a8a0:	e92d4010 	push	{r4, lr}
  13a8a4:	e3a01012 	mov	r1, #18
  13a8a8:	e59f0008 	ldr	r0, [pc, #8]	; 13a8b8 <syscall_getresgid+0x18>
  13a8ac:	ebfffaf4 	bl	139484 <syscall_trace>
  13a8b0:	e3a00000 	mov	r0, #0
  13a8b4:	e8bd8010 	pop	{r4, pc}
  13a8b8:	0014b72c 	.word	0x0014b72c

0013a8bc <syscall_setresgid>:
  13a8bc:	e92d4010 	push	{r4, lr}
  13a8c0:	e3a01012 	mov	r1, #18
  13a8c4:	e59f0008 	ldr	r0, [pc, #8]	; 13a8d4 <syscall_setresgid+0x18>
  13a8c8:	ebfffaed 	bl	139484 <syscall_trace>
  13a8cc:	e3a00000 	mov	r0, #0
  13a8d0:	e8bd8010 	pop	{r4, pc}
  13a8d4:	0014b718 	.word	0x0014b718

0013a8d8 <syscall_nfsservctl>:
  13a8d8:	e92d4010 	push	{r4, lr}
  13a8dc:	e3a01013 	mov	r1, #19
  13a8e0:	e59f0008 	ldr	r0, [pc, #8]	; 13a8f0 <syscall_nfsservctl+0x18>
  13a8e4:	ebfffae6 	bl	139484 <syscall_trace>
  13a8e8:	e3a00000 	mov	r0, #0
  13a8ec:	e8bd8010 	pop	{r4, pc}
  13a8f0:	0014b704 	.word	0x0014b704

0013a8f4 <syscall_getresuid>:
  13a8f4:	e92d4010 	push	{r4, lr}
  13a8f8:	e3a01012 	mov	r1, #18
  13a8fc:	e59f0008 	ldr	r0, [pc, #8]	; 13a90c <syscall_getresuid+0x18>
  13a900:	ebfffadf 	bl	139484 <syscall_trace>
  13a904:	e3a00000 	mov	r0, #0
  13a908:	e8bd8010 	pop	{r4, pc}
  13a90c:	0014b6e0 	.word	0x0014b6e0

0013a910 <syscall_setresuid>:
  13a910:	e92d4010 	push	{r4, lr}
  13a914:	e3a01012 	mov	r1, #18
  13a918:	e59f0008 	ldr	r0, [pc, #8]	; 13a928 <syscall_setresuid+0x18>
  13a91c:	ebfffad8 	bl	139484 <syscall_trace>
  13a920:	e3a00000 	mov	r0, #0
  13a924:	e8bd8010 	pop	{r4, pc}
  13a928:	0014b6cc 	.word	0x0014b6cc

0013a92c <syscall_sched_rr_get_interval>:
  13a92c:	e92d4010 	push	{r4, lr}
  13a930:	e3a0101e 	mov	r1, #30
  13a934:	e59f0008 	ldr	r0, [pc, #8]	; 13a944 <syscall_sched_rr_get_interval+0x18>
  13a938:	ebfffad1 	bl	139484 <syscall_trace>
  13a93c:	e3a00000 	mov	r0, #0
  13a940:	e8bd8010 	pop	{r4, pc}
  13a944:	0014b688 	.word	0x0014b688

0013a948 <syscall_sched_yield>:
  13a948:	e92d4010 	push	{r4, lr}
  13a94c:	e3a01014 	mov	r1, #20
  13a950:	e59f0008 	ldr	r0, [pc, #8]	; 13a960 <syscall_sched_yield+0x18>
  13a954:	ebfffaca 	bl	139484 <syscall_trace>
  13a958:	e3a00000 	mov	r0, #0
  13a95c:	e8bd8010 	pop	{r4, pc}
  13a960:	0014b634 	.word	0x0014b634

0013a964 <syscall_munlockall>:
  13a964:	e92d4010 	push	{r4, lr}
  13a968:	e3a01013 	mov	r1, #19
  13a96c:	e59f0008 	ldr	r0, [pc, #8]	; 13a97c <syscall_munlockall+0x18>
  13a970:	ebfffac3 	bl	139484 <syscall_trace>
  13a974:	e3a00000 	mov	r0, #0
  13a978:	e8bd8010 	pop	{r4, pc}
  13a97c:	0014b5b8 	.word	0x0014b5b8

0013a980 <syscall_mlockall>:
  13a980:	e92d4010 	push	{r4, lr}
  13a984:	e3a01011 	mov	r1, #17
  13a988:	e59f0008 	ldr	r0, [pc, #8]	; 13a998 <syscall_mlockall+0x18>
  13a98c:	ebfffabc 	bl	139484 <syscall_trace>
  13a990:	e3a00000 	mov	r0, #0
  13a994:	e8bd8010 	pop	{r4, pc}
  13a998:	0014b5a4 	.word	0x0014b5a4

0013a99c <syscall_munlock>:
  13a99c:	e92d4010 	push	{r4, lr}
  13a9a0:	e3a01010 	mov	r1, #16
  13a9a4:	e59f0008 	ldr	r0, [pc, #8]	; 13a9b4 <syscall_munlock+0x18>
  13a9a8:	ebfffab5 	bl	139484 <syscall_trace>
  13a9ac:	e3a00000 	mov	r0, #0
  13a9b0:	e8bd8010 	pop	{r4, pc}
  13a9b4:	0014b594 	.word	0x0014b594

0013a9b8 <syscall_mlock>:
  13a9b8:	e92d4010 	push	{r4, lr}
  13a9bc:	e3a0100e 	mov	r1, #14
  13a9c0:	e59f0008 	ldr	r0, [pc, #8]	; 13a9d0 <syscall_mlock+0x18>
  13a9c4:	ebfffaae 	bl	139484 <syscall_trace>
  13a9c8:	e3a00000 	mov	r0, #0
  13a9cc:	e8bd8010 	pop	{r4, pc}
  13a9d0:	0014b584 	.word	0x0014b584

0013a9d4 <syscall__sysctl>:
  13a9d4:	e92d4010 	push	{r4, lr}
  13a9d8:	e3a01010 	mov	r1, #16
  13a9dc:	e59f0008 	ldr	r0, [pc, #8]	; 13a9ec <syscall__sysctl+0x18>
  13a9e0:	ebfffaa7 	bl	139484 <syscall_trace>
  13a9e4:	e3a00000 	mov	r0, #0
  13a9e8:	e8bd8010 	pop	{r4, pc}
  13a9ec:	0014b574 	.word	0x0014b574

0013a9f0 <syscall_fdatasync>:
  13a9f0:	e92d4010 	push	{r4, lr}
  13a9f4:	e3a01012 	mov	r1, #18
  13a9f8:	e59f0008 	ldr	r0, [pc, #8]	; 13aa08 <syscall_fdatasync+0x18>
  13a9fc:	ebfffaa0 	bl	139484 <syscall_trace>
  13aa00:	e3a00000 	mov	r0, #0
  13aa04:	e8bd8010 	pop	{r4, pc}
  13aa08:	0014b560 	.word	0x0014b560

0013aa0c <syscall_getsid>:
  13aa0c:	e92d4010 	push	{r4, lr}
  13aa10:	e3a0100f 	mov	r1, #15
  13aa14:	e59f0008 	ldr	r0, [pc, #8]	; 13aa24 <syscall_getsid+0x18>
  13aa18:	ebfffa99 	bl	139484 <syscall_trace>
  13aa1c:	e3a00000 	mov	r0, #0
  13aa20:	e8bd8010 	pop	{r4, pc}
  13aa24:	0014b550 	.word	0x0014b550

0013aa28 <syscall_msync>:
  13aa28:	e92d4010 	push	{r4, lr}
  13aa2c:	e3a0100e 	mov	r1, #14
  13aa30:	e59f0008 	ldr	r0, [pc, #8]	; 13aa40 <syscall_msync+0x18>
  13aa34:	ebfffa92 	bl	139484 <syscall_trace>
  13aa38:	e3a00000 	mov	r0, #0
  13aa3c:	e8bd8010 	pop	{r4, pc}
  13aa40:	0014b520 	.word	0x0014b520

0013aa44 <syscall_flock>:
  13aa44:	e92d4010 	push	{r4, lr}
  13aa48:	e3a0100e 	mov	r1, #14
  13aa4c:	e59f0008 	ldr	r0, [pc, #8]	; 13aa5c <syscall_flock+0x18>
  13aa50:	ebfffa8b 	bl	139484 <syscall_trace>
  13aa54:	e3a00000 	mov	r0, #0
  13aa58:	e8bd8010 	pop	{r4, pc}
  13aa5c:	0014b510 	.word	0x0014b510

0013aa60 <syscall_setfsgid>:
  13aa60:	e92d4010 	push	{r4, lr}
  13aa64:	e3a01011 	mov	r1, #17
  13aa68:	e59f0008 	ldr	r0, [pc, #8]	; 13aa78 <syscall_setfsgid+0x18>
  13aa6c:	ebfffa84 	bl	139484 <syscall_trace>
  13aa70:	e3a00000 	mov	r0, #0
  13aa74:	e8bd8010 	pop	{r4, pc}
  13aa78:	0014b4c4 	.word	0x0014b4c4

0013aa7c <syscall_setfsuid>:
  13aa7c:	e92d4010 	push	{r4, lr}
  13aa80:	e3a01011 	mov	r1, #17
  13aa84:	e59f0008 	ldr	r0, [pc, #8]	; 13aa94 <syscall_setfsuid+0x18>
  13aa88:	ebfffa7d 	bl	139484 <syscall_trace>
  13aa8c:	e3a00000 	mov	r0, #0
  13aa90:	e8bd8010 	pop	{r4, pc}
  13aa94:	0014b4b0 	.word	0x0014b4b0

0013aa98 <syscall_personality>:
  13aa98:	e92d4010 	push	{r4, lr}
  13aa9c:	e3a01014 	mov	r1, #20
  13aaa0:	e59f0008 	ldr	r0, [pc, #8]	; 13aab0 <syscall_personality+0x18>
  13aaa4:	ebfffa76 	bl	139484 <syscall_trace>
  13aaa8:	e3a00000 	mov	r0, #0
  13aaac:	e8bd8010 	pop	{r4, pc}
  13aab0:	0014b49c 	.word	0x0014b49c

0013aab4 <syscall_sysfs>:
  13aab4:	e92d4010 	push	{r4, lr}
  13aab8:	e3a0100e 	mov	r1, #14
  13aabc:	e59f0008 	ldr	r0, [pc, #8]	; 13aacc <syscall_sysfs+0x18>
  13aac0:	ebfffa6f 	bl	139484 <syscall_trace>
  13aac4:	e3a00000 	mov	r0, #0
  13aac8:	e8bd8010 	pop	{r4, pc}
  13aacc:	0014b48c 	.word	0x0014b48c

0013aad0 <syscall_bdflush>:
  13aad0:	e92d4010 	push	{r4, lr}
  13aad4:	e3a01010 	mov	r1, #16
  13aad8:	e59f0008 	ldr	r0, [pc, #8]	; 13aae8 <syscall_bdflush+0x18>
  13aadc:	ebfffa68 	bl	139484 <syscall_trace>
  13aae0:	e3a00000 	mov	r0, #0
  13aae4:	e8bd8010 	pop	{r4, pc}
  13aae8:	0014b47c 	.word	0x0014b47c

0013aaec <syscall_fchdir>:
  13aaec:	e92d4010 	push	{r4, lr}
  13aaf0:	e3a0100f 	mov	r1, #15
  13aaf4:	e59f0008 	ldr	r0, [pc, #8]	; 13ab04 <syscall_fchdir+0x18>
  13aaf8:	ebfffa61 	bl	139484 <syscall_trace>
  13aafc:	e3a00000 	mov	r0, #0
  13ab00:	e8bd8010 	pop	{r4, pc}
  13ab04:	0014b46c 	.word	0x0014b46c

0013ab08 <syscall_getpgid>:
  13ab08:	e92d4010 	push	{r4, lr}
  13ab0c:	e3a01010 	mov	r1, #16
  13ab10:	e59f0008 	ldr	r0, [pc, #8]	; 13ab20 <syscall_getpgid+0x18>
  13ab14:	ebfffa5a 	bl	139484 <syscall_trace>
  13ab18:	e3a00000 	mov	r0, #0
  13ab1c:	e8bd8010 	pop	{r4, pc}
  13ab20:	0014b45c 	.word	0x0014b45c

0013ab24 <syscall_quotactl>:
  13ab24:	e92d4010 	push	{r4, lr}
  13ab28:	e3a01011 	mov	r1, #17
  13ab2c:	e59f0008 	ldr	r0, [pc, #8]	; 13ab3c <syscall_quotactl+0x18>
  13ab30:	ebfffa53 	bl	139484 <syscall_trace>
  13ab34:	e3a00000 	mov	r0, #0
  13ab38:	e8bd8010 	pop	{r4, pc}
  13ab3c:	0014b448 	.word	0x0014b448

0013ab40 <syscall_delete_module>:
  13ab40:	e92d4010 	push	{r4, lr}
  13ab44:	e3a01016 	mov	r1, #22
  13ab48:	e59f0008 	ldr	r0, [pc, #8]	; 13ab58 <syscall_delete_module+0x18>
  13ab4c:	ebfffa4c 	bl	139484 <syscall_trace>
  13ab50:	e3a00000 	mov	r0, #0
  13ab54:	e8bd8010 	pop	{r4, pc}
  13ab58:	0014b430 	.word	0x0014b430

0013ab5c <syscall_init_module>:
  13ab5c:	e92d4010 	push	{r4, lr}
  13ab60:	e3a01014 	mov	r1, #20
  13ab64:	e59f0008 	ldr	r0, [pc, #8]	; 13ab74 <syscall_init_module+0x18>
  13ab68:	ebfffa45 	bl	139484 <syscall_trace>
  13ab6c:	e3a00000 	mov	r0, #0
  13ab70:	e8bd8010 	pop	{r4, pc}
  13ab74:	0014b41c 	.word	0x0014b41c

0013ab78 <syscall_mprotect>:
  13ab78:	e92d4010 	push	{r4, lr}
  13ab7c:	e3a01011 	mov	r1, #17
  13ab80:	e59f0008 	ldr	r0, [pc, #8]	; 13ab90 <syscall_mprotect+0x18>
  13ab84:	ebfffa3e 	bl	139484 <syscall_trace>
  13ab88:	e3a00000 	mov	r0, #0
  13ab8c:	e8bd8010 	pop	{r4, pc}
  13ab90:	0014b3f4 	.word	0x0014b3f4

0013ab94 <syscall_adjtimex>:
  13ab94:	e92d4010 	push	{r4, lr}
  13ab98:	e3a01011 	mov	r1, #17
  13ab9c:	e59f0008 	ldr	r0, [pc, #8]	; 13abac <syscall_adjtimex+0x18>
  13aba0:	ebfffa37 	bl	139484 <syscall_trace>
  13aba4:	e3a00000 	mov	r0, #0
  13aba8:	e8bd8010 	pop	{r4, pc}
  13abac:	0014b3e0 	.word	0x0014b3e0

0013abb0 <syscall_uname>:
  13abb0:	e92d4010 	push	{r4, lr}
  13abb4:	e3a0100e 	mov	r1, #14
  13abb8:	e59f0008 	ldr	r0, [pc, #8]	; 13abc8 <syscall_uname+0x18>
  13abbc:	ebfffa30 	bl	139484 <syscall_trace>
  13abc0:	e3a00000 	mov	r0, #0
  13abc4:	e8bd8010 	pop	{r4, pc}
  13abc8:	0014b3d0 	.word	0x0014b3d0

0013abcc <syscall_setdomainname>:
  13abcc:	e92d4010 	push	{r4, lr}
  13abd0:	e3a01016 	mov	r1, #22
  13abd4:	e59f0008 	ldr	r0, [pc, #8]	; 13abe4 <syscall_setdomainname+0x18>
  13abd8:	ebfffa29 	bl	139484 <syscall_trace>
  13abdc:	e3a00000 	mov	r0, #0
  13abe0:	e8bd8010 	pop	{r4, pc}
  13abe4:	0014b3b8 	.word	0x0014b3b8

0013abe8 <syscall_clone>:
  13abe8:	e92d4010 	push	{r4, lr}
  13abec:	e3a0100e 	mov	r1, #14
  13abf0:	e59f0008 	ldr	r0, [pc, #8]	; 13ac00 <syscall_clone+0x18>
  13abf4:	ebfffa22 	bl	139484 <syscall_trace>
  13abf8:	e3a00000 	mov	r0, #0
  13abfc:	e8bd8010 	pop	{r4, pc}
  13ac00:	0014b3a8 	.word	0x0014b3a8

0013ac04 <syscall_sigreturn>:
  13ac04:	e92d4010 	push	{r4, lr}
  13ac08:	e3a01012 	mov	r1, #18
  13ac0c:	e59f0008 	ldr	r0, [pc, #8]	; 13ac1c <syscall_sigreturn+0x18>
  13ac10:	ebfffa1b 	bl	139484 <syscall_trace>
  13ac14:	e3a00000 	mov	r0, #0
  13ac18:	e8bd8010 	pop	{r4, pc}
  13ac1c:	0014b394 	.word	0x0014b394

0013ac20 <syscall_sysinfo>:
  13ac20:	e92d4010 	push	{r4, lr}
  13ac24:	e3a01010 	mov	r1, #16
  13ac28:	e59f0008 	ldr	r0, [pc, #8]	; 13ac38 <syscall_sysinfo+0x18>
  13ac2c:	ebfffa14 	bl	139484 <syscall_trace>
  13ac30:	e3a00000 	mov	r0, #0
  13ac34:	e8bd8010 	pop	{r4, pc}
  13ac38:	0014b374 	.word	0x0014b374

0013ac3c <syscall_swapoff>:
  13ac3c:	e92d4010 	push	{r4, lr}
  13ac40:	e3a01010 	mov	r1, #16
  13ac44:	e59f0008 	ldr	r0, [pc, #8]	; 13ac54 <syscall_swapoff+0x18>
  13ac48:	ebfffa0d 	bl	139484 <syscall_trace>
  13ac4c:	e3a00000 	mov	r0, #0
  13ac50:	e8bd8010 	pop	{r4, pc}
  13ac54:	0014b364 	.word	0x0014b364

0013ac58 <syscall_wait4>:
  13ac58:	e92d4010 	push	{r4, lr}
  13ac5c:	e3a0100e 	mov	r1, #14
  13ac60:	e59f0008 	ldr	r0, [pc, #8]	; 13ac70 <syscall_wait4+0x18>
  13ac64:	ebfffa06 	bl	139484 <syscall_trace>
  13ac68:	e3a00000 	mov	r0, #0
  13ac6c:	e8bd8010 	pop	{r4, pc}
  13ac70:	0014b354 	.word	0x0014b354

0013ac74 <syscall_vhangup>:
  13ac74:	e92d4010 	push	{r4, lr}
  13ac78:	e3a01010 	mov	r1, #16
  13ac7c:	e59f0008 	ldr	r0, [pc, #8]	; 13ac8c <syscall_vhangup+0x18>
  13ac80:	ebfff9ff 	bl	139484 <syscall_trace>
  13ac84:	e3a00000 	mov	r0, #0
  13ac88:	e8bd8010 	pop	{r4, pc}
  13ac8c:	0014b344 	.word	0x0014b344

0013ac90 <syscall_fstat>:
  13ac90:	e92d4010 	push	{r4, lr}
  13ac94:	e3a0100e 	mov	r1, #14
  13ac98:	e59f0008 	ldr	r0, [pc, #8]	; 13aca8 <syscall_fstat+0x18>
  13ac9c:	ebfff9f8 	bl	139484 <syscall_trace>
  13aca0:	e3a00000 	mov	r0, #0
  13aca4:	e8bd8010 	pop	{r4, pc}
  13aca8:	0014b334 	.word	0x0014b334

0013acac <syscall_getitimer>:
  13acac:	e92d4010 	push	{r4, lr}
  13acb0:	e3a01012 	mov	r1, #18
  13acb4:	e59f0008 	ldr	r0, [pc, #8]	; 13acc4 <syscall_getitimer+0x18>
  13acb8:	ebfff9f1 	bl	139484 <syscall_trace>
  13acbc:	e3a00000 	mov	r0, #0
  13acc0:	e8bd8010 	pop	{r4, pc}
  13acc4:	0014b300 	.word	0x0014b300

0013acc8 <syscall_setitimer>:
  13acc8:	e92d4010 	push	{r4, lr}
  13accc:	e3a01012 	mov	r1, #18
  13acd0:	e59f0008 	ldr	r0, [pc, #8]	; 13ace0 <syscall_setitimer+0x18>
  13acd4:	ebfff9ea 	bl	139484 <syscall_trace>
  13acd8:	e3a00000 	mov	r0, #0
  13acdc:	e8bd8010 	pop	{r4, pc}
  13ace0:	0014b2ec 	.word	0x0014b2ec

0013ace4 <syscall_syslog>:
  13ace4:	e92d4010 	push	{r4, lr}
  13ace8:	e3a0100f 	mov	r1, #15
  13acec:	e59f0008 	ldr	r0, [pc, #8]	; 13acfc <syscall_syslog+0x18>
  13acf0:	ebfff9e3 	bl	139484 <syscall_trace>
  13acf4:	e3a00000 	mov	r0, #0
  13acf8:	e8bd8010 	pop	{r4, pc}
  13acfc:	0014b2dc 	.word	0x0014b2dc

0013ad00 <syscall_fstatfs>:
  13ad00:	e92d4010 	push	{r4, lr}
  13ad04:	e3a01010 	mov	r1, #16
  13ad08:	e59f0008 	ldr	r0, [pc, #8]	; 13ad18 <syscall_fstatfs+0x18>
  13ad0c:	ebfff9dc 	bl	139484 <syscall_trace>
  13ad10:	e3a00000 	mov	r0, #0
  13ad14:	e8bd8010 	pop	{r4, pc}
  13ad18:	0014b2cc 	.word	0x0014b2cc

0013ad1c <syscall_statfs>:
  13ad1c:	e92d4010 	push	{r4, lr}
  13ad20:	e3a0100f 	mov	r1, #15
  13ad24:	e59f0008 	ldr	r0, [pc, #8]	; 13ad34 <syscall_statfs+0x18>
  13ad28:	ebfff9d5 	bl	139484 <syscall_trace>
  13ad2c:	e3a00000 	mov	r0, #0
  13ad30:	e8bd8010 	pop	{r4, pc}
  13ad34:	0014b2bc 	.word	0x0014b2bc

0013ad38 <syscall_setpriority>:
  13ad38:	e92d4010 	push	{r4, lr}
  13ad3c:	e3a01014 	mov	r1, #20
  13ad40:	e59f0008 	ldr	r0, [pc, #8]	; 13ad50 <syscall_setpriority+0x18>
  13ad44:	ebfff9ce 	bl	139484 <syscall_trace>
  13ad48:	e3a00000 	mov	r0, #0
  13ad4c:	e8bd8010 	pop	{r4, pc}
  13ad50:	0014b2a8 	.word	0x0014b2a8

0013ad54 <syscall_getpriority>:
  13ad54:	e92d4010 	push	{r4, lr}
  13ad58:	e3a01014 	mov	r1, #20
  13ad5c:	e59f0008 	ldr	r0, [pc, #8]	; 13ad6c <syscall_getpriority+0x18>
  13ad60:	ebfff9c7 	bl	139484 <syscall_trace>
  13ad64:	e3a00000 	mov	r0, #0
  13ad68:	e8bd8010 	pop	{r4, pc}
  13ad6c:	0014b294 	.word	0x0014b294

0013ad70 <syscall_fchown>:
  13ad70:	e92d4010 	push	{r4, lr}
  13ad74:	e3a0100f 	mov	r1, #15
  13ad78:	e59f0008 	ldr	r0, [pc, #8]	; 13ad88 <syscall_fchown+0x18>
  13ad7c:	ebfff9c0 	bl	139484 <syscall_trace>
  13ad80:	e3a00000 	mov	r0, #0
  13ad84:	e8bd8010 	pop	{r4, pc}
  13ad88:	0014b284 	.word	0x0014b284

0013ad8c <syscall_fchmod>:
  13ad8c:	e92d4010 	push	{r4, lr}
  13ad90:	e3a0100f 	mov	r1, #15
  13ad94:	e59f0008 	ldr	r0, [pc, #8]	; 13ada4 <syscall_fchmod+0x18>
  13ad98:	ebfff9b9 	bl	139484 <syscall_trace>
  13ad9c:	e3a00000 	mov	r0, #0
  13ada0:	e8bd8010 	pop	{r4, pc}
  13ada4:	0014b274 	.word	0x0014b274

0013ada8 <syscall_ftruncate>:
  13ada8:	e92d4010 	push	{r4, lr}
  13adac:	e3a01012 	mov	r1, #18
  13adb0:	e59f0008 	ldr	r0, [pc, #8]	; 13adc0 <syscall_ftruncate+0x18>
  13adb4:	ebfff9b2 	bl	139484 <syscall_trace>
  13adb8:	e3a00000 	mov	r0, #0
  13adbc:	e8bd8010 	pop	{r4, pc}
  13adc0:	0014b260 	.word	0x0014b260

0013adc4 <syscall_truncate>:
  13adc4:	e92d4010 	push	{r4, lr}
  13adc8:	e3a01011 	mov	r1, #17
  13adcc:	e59f0008 	ldr	r0, [pc, #8]	; 13addc <syscall_truncate+0x18>
  13add0:	ebfff9ab 	bl	139484 <syscall_trace>
  13add4:	e3a00000 	mov	r0, #0
  13add8:	e8bd8010 	pop	{r4, pc}
  13addc:	0014b24c 	.word	0x0014b24c

0013ade0 <syscall_reboot>:
  13ade0:	e92d4010 	push	{r4, lr}
  13ade4:	e3a0100f 	mov	r1, #15
  13ade8:	e59f0008 	ldr	r0, [pc, #8]	; 13adf8 <syscall_reboot+0x18>
  13adec:	ebfff9a4 	bl	139484 <syscall_trace>
  13adf0:	e3a00000 	mov	r0, #0
  13adf4:	e8bd8010 	pop	{r4, pc}
  13adf8:	0014b22c 	.word	0x0014b22c

0013adfc <syscall_swapon>:
  13adfc:	e92d4010 	push	{r4, lr}
  13ae00:	e3a0100f 	mov	r1, #15
  13ae04:	e59f0008 	ldr	r0, [pc, #8]	; 13ae14 <syscall_swapon+0x18>
  13ae08:	ebfff99d 	bl	139484 <syscall_trace>
  13ae0c:	e3a00000 	mov	r0, #0
  13ae10:	e8bd8010 	pop	{r4, pc}
  13ae14:	0014b21c 	.word	0x0014b21c

0013ae18 <syscall_uselib>:
  13ae18:	e92d4010 	push	{r4, lr}
  13ae1c:	e3a0100f 	mov	r1, #15
  13ae20:	e59f0008 	ldr	r0, [pc, #8]	; 13ae30 <syscall_uselib+0x18>
  13ae24:	ebfff996 	bl	139484 <syscall_trace>
  13ae28:	e3a00000 	mov	r0, #0
  13ae2c:	e8bd8010 	pop	{r4, pc}
  13ae30:	0014b20c 	.word	0x0014b20c

0013ae34 <syscall_symlink>:
  13ae34:	e92d4010 	push	{r4, lr}
  13ae38:	e3a01010 	mov	r1, #16
  13ae3c:	e59f0008 	ldr	r0, [pc, #8]	; 13ae4c <syscall_symlink+0x18>
  13ae40:	ebfff98f 	bl	139484 <syscall_trace>
  13ae44:	e3a00000 	mov	r0, #0
  13ae48:	e8bd8010 	pop	{r4, pc}
  13ae4c:	0014b1e8 	.word	0x0014b1e8

0013ae50 <syscall_setgroups>:
  13ae50:	e92d4010 	push	{r4, lr}
  13ae54:	e3a01012 	mov	r1, #18
  13ae58:	e59f0008 	ldr	r0, [pc, #8]	; 13ae68 <syscall_setgroups+0x18>
  13ae5c:	ebfff988 	bl	139484 <syscall_trace>
  13ae60:	e3a00000 	mov	r0, #0
  13ae64:	e8bd8010 	pop	{r4, pc}
  13ae68:	0014b1d4 	.word	0x0014b1d4

0013ae6c <syscall_getgroups>:
  13ae6c:	e92d4010 	push	{r4, lr}
  13ae70:	e3a01012 	mov	r1, #18
  13ae74:	e59f0008 	ldr	r0, [pc, #8]	; 13ae84 <syscall_getgroups+0x18>
  13ae78:	ebfff981 	bl	139484 <syscall_trace>
  13ae7c:	e3a00000 	mov	r0, #0
  13ae80:	e8bd8010 	pop	{r4, pc}
  13ae84:	0014b1c0 	.word	0x0014b1c0

0013ae88 <syscall_settimeofday>:
  13ae88:	e92d4010 	push	{r4, lr}
  13ae8c:	e3a01015 	mov	r1, #21
  13ae90:	e59f0008 	ldr	r0, [pc, #8]	; 13aea0 <syscall_settimeofday+0x18>
  13ae94:	ebfff97a 	bl	139484 <syscall_trace>
  13ae98:	e3a00000 	mov	r0, #0
  13ae9c:	e8bd8010 	pop	{r4, pc}
  13aea0:	0014b1a8 	.word	0x0014b1a8

0013aea4 <syscall_gettimeofday>:
  13aea4:	e92d4010 	push	{r4, lr}
  13aea8:	e3a01015 	mov	r1, #21
  13aeac:	e59f0008 	ldr	r0, [pc, #8]	; 13aebc <syscall_gettimeofday+0x18>
  13aeb0:	ebfff973 	bl	139484 <syscall_trace>
  13aeb4:	e3a00000 	mov	r0, #0
  13aeb8:	e8bd8010 	pop	{r4, pc}
  13aebc:	0014b190 	.word	0x0014b190

0013aec0 <syscall_getrusage>:
  13aec0:	e92d4010 	push	{r4, lr}
  13aec4:	e3a01012 	mov	r1, #18
  13aec8:	e59f0008 	ldr	r0, [pc, #8]	; 13aed8 <syscall_getrusage+0x18>
  13aecc:	ebfff96c 	bl	139484 <syscall_trace>
  13aed0:	e3a00000 	mov	r0, #0
  13aed4:	e8bd8010 	pop	{r4, pc}
  13aed8:	0014b17c 	.word	0x0014b17c

0013aedc <syscall_sethostname>:
  13aedc:	e92d4010 	push	{r4, lr}
  13aee0:	e3a01014 	mov	r1, #20
  13aee4:	e59f0008 	ldr	r0, [pc, #8]	; 13aef4 <syscall_sethostname+0x18>
  13aee8:	ebfff965 	bl	139484 <syscall_trace>
  13aeec:	e3a00000 	mov	r0, #0
  13aef0:	e8bd8010 	pop	{r4, pc}
  13aef4:	0014b154 	.word	0x0014b154

0013aef8 <syscall_sigpending>:
  13aef8:	e92d4010 	push	{r4, lr}
  13aefc:	e3a01013 	mov	r1, #19
  13af00:	e59f0008 	ldr	r0, [pc, #8]	; 13af10 <syscall_sigpending+0x18>
  13af04:	ebfff95e 	bl	139484 <syscall_trace>
  13af08:	e3a00000 	mov	r0, #0
  13af0c:	e8bd8010 	pop	{r4, pc}
  13af10:	0014b140 	.word	0x0014b140

0013af14 <syscall_sigsuspend>:
  13af14:	e92d4010 	push	{r4, lr}
  13af18:	e3a01013 	mov	r1, #19
  13af1c:	e59f0008 	ldr	r0, [pc, #8]	; 13af2c <syscall_sigsuspend+0x18>
  13af20:	ebfff957 	bl	139484 <syscall_trace>
  13af24:	e3a00000 	mov	r0, #0
  13af28:	e8bd8010 	pop	{r4, pc}
  13af2c:	0014b12c 	.word	0x0014b12c

0013af30 <syscall_setregid>:
  13af30:	e92d4010 	push	{r4, lr}
  13af34:	e3a01011 	mov	r1, #17
  13af38:	e59f0008 	ldr	r0, [pc, #8]	; 13af48 <syscall_setregid+0x18>
  13af3c:	ebfff950 	bl	139484 <syscall_trace>
  13af40:	e3a00000 	mov	r0, #0
  13af44:	e8bd8010 	pop	{r4, pc}
  13af48:	0014b118 	.word	0x0014b118

0013af4c <syscall_setreuid>:
  13af4c:	e92d4010 	push	{r4, lr}
  13af50:	e3a01011 	mov	r1, #17
  13af54:	e59f0008 	ldr	r0, [pc, #8]	; 13af64 <syscall_setreuid+0x18>
  13af58:	ebfff949 	bl	139484 <syscall_trace>
  13af5c:	e3a00000 	mov	r0, #0
  13af60:	e8bd8010 	pop	{r4, pc}
  13af64:	0014b104 	.word	0x0014b104

0013af68 <syscall_getpgrp>:
  13af68:	e92d4010 	push	{r4, lr}
  13af6c:	e3a01010 	mov	r1, #16
  13af70:	e59f0008 	ldr	r0, [pc, #8]	; 13af80 <syscall_getpgrp+0x18>
  13af74:	ebfff942 	bl	139484 <syscall_trace>
  13af78:	e3a00000 	mov	r0, #0
  13af7c:	e8bd8010 	pop	{r4, pc}
  13af80:	0014b0d0 	.word	0x0014b0d0

0013af84 <syscall_getppid>:
  13af84:	e92d4010 	push	{r4, lr}
  13af88:	e3a01010 	mov	r1, #16
  13af8c:	e59f0008 	ldr	r0, [pc, #8]	; 13af9c <syscall_getppid+0x18>
  13af90:	ebfff93b 	bl	139484 <syscall_trace>
  13af94:	e3a00000 	mov	r0, #0
  13af98:	e8bd8010 	pop	{r4, pc}
  13af9c:	0014b0c0 	.word	0x0014b0c0

0013afa0 <syscall_ustat>:
  13afa0:	e92d4010 	push	{r4, lr}
  13afa4:	e3a0100e 	mov	r1, #14
  13afa8:	e59f0008 	ldr	r0, [pc, #8]	; 13afb8 <syscall_ustat+0x18>
  13afac:	ebfff934 	bl	139484 <syscall_trace>
  13afb0:	e3a00000 	mov	r0, #0
  13afb4:	e8bd8010 	pop	{r4, pc}
  13afb8:	0014b0a0 	.word	0x0014b0a0

0013afbc <syscall_chroot>:
  13afbc:	e92d4010 	push	{r4, lr}
  13afc0:	e3a0100f 	mov	r1, #15
  13afc4:	e59f0008 	ldr	r0, [pc, #8]	; 13afd4 <syscall_chroot+0x18>
  13afc8:	ebfff92d 	bl	139484 <syscall_trace>
  13afcc:	e3a00000 	mov	r0, #0
  13afd0:	e8bd8010 	pop	{r4, pc}
  13afd4:	0014b090 	.word	0x0014b090

0013afd8 <syscall_umask>:
  13afd8:	e92d4010 	push	{r4, lr}
  13afdc:	e3a0100e 	mov	r1, #14
  13afe0:	e59f0008 	ldr	r0, [pc, #8]	; 13aff0 <syscall_umask+0x18>
  13afe4:	ebfff926 	bl	139484 <syscall_trace>
  13afe8:	e3a00000 	mov	r0, #0
  13afec:	e8bd8010 	pop	{r4, pc}
  13aff0:	0014b080 	.word	0x0014b080

0013aff4 <syscall_setpgid>:
  13aff4:	e92d4010 	push	{r4, lr}
  13aff8:	e3a01010 	mov	r1, #16
  13affc:	e59f0008 	ldr	r0, [pc, #8]	; 13b00c <syscall_setpgid+0x18>
  13b000:	ebfff91f 	bl	139484 <syscall_trace>
  13b004:	e3a00000 	mov	r0, #0
  13b008:	e8bd8010 	pop	{r4, pc}
  13b00c:	0014b070 	.word	0x0014b070

0013b010 <syscall_umount2>:
  13b010:	e92d4010 	push	{r4, lr}
  13b014:	e3a01010 	mov	r1, #16
  13b018:	e59f0008 	ldr	r0, [pc, #8]	; 13b028 <syscall_umount2+0x18>
  13b01c:	ebfff918 	bl	139484 <syscall_trace>
  13b020:	e3a00000 	mov	r0, #0
  13b024:	e8bd8010 	pop	{r4, pc}
  13b028:	0014b040 	.word	0x0014b040

0013b02c <syscall_acct>:
  13b02c:	e92d4010 	push	{r4, lr}
  13b030:	e3a0100d 	mov	r1, #13
  13b034:	e59f0008 	ldr	r0, [pc, #8]	; 13b044 <syscall_acct+0x18>
  13b038:	ebfff911 	bl	139484 <syscall_trace>
  13b03c:	e3a00000 	mov	r0, #0
  13b040:	e8bd8010 	pop	{r4, pc}
  13b044:	0014b030 	.word	0x0014b030

0013b048 <syscall_getegid>:
  13b048:	e92d4010 	push	{r4, lr}
  13b04c:	e3a01010 	mov	r1, #16
  13b050:	e59f0008 	ldr	r0, [pc, #8]	; 13b060 <syscall_getegid+0x18>
  13b054:	ebfff90a 	bl	139484 <syscall_trace>
  13b058:	e3a00000 	mov	r0, #0
  13b05c:	e8bd8010 	pop	{r4, pc}
  13b060:	0014b020 	.word	0x0014b020

0013b064 <syscall_geteuid>:
  13b064:	e92d4010 	push	{r4, lr}
  13b068:	e3a01010 	mov	r1, #16
  13b06c:	e59f0008 	ldr	r0, [pc, #8]	; 13b07c <syscall_geteuid+0x18>
  13b070:	ebfff903 	bl	139484 <syscall_trace>
  13b074:	e3a00000 	mov	r0, #0
  13b078:	e8bd8010 	pop	{r4, pc}
  13b07c:	0014b010 	.word	0x0014b010

0013b080 <syscall_getgid>:
  13b080:	e92d4010 	push	{r4, lr}
  13b084:	e3a0100f 	mov	r1, #15
  13b088:	e59f0008 	ldr	r0, [pc, #8]	; 13b098 <syscall_getgid+0x18>
  13b08c:	ebfff8fc 	bl	139484 <syscall_trace>
  13b090:	e3a00000 	mov	r0, #0
  13b094:	e8bd8010 	pop	{r4, pc}
  13b098:	0014b000 	.word	0x0014b000

0013b09c <syscall_setgid>:
  13b09c:	e92d4010 	push	{r4, lr}
  13b0a0:	e3a0100f 	mov	r1, #15
  13b0a4:	e59f0008 	ldr	r0, [pc, #8]	; 13b0b4 <syscall_setgid+0x18>
  13b0a8:	ebfff8f5 	bl	139484 <syscall_trace>
  13b0ac:	e3a00000 	mov	r0, #0
  13b0b0:	e8bd8010 	pop	{r4, pc}
  13b0b4:	0014aff0 	.word	0x0014aff0

0013b0b8 <syscall_times>:
  13b0b8:	e92d4010 	push	{r4, lr}
  13b0bc:	e3a0100e 	mov	r1, #14
  13b0c0:	e59f0008 	ldr	r0, [pc, #8]	; 13b0d0 <syscall_times+0x18>
  13b0c4:	ebfff8ee 	bl	139484 <syscall_trace>
  13b0c8:	e3a00000 	mov	r0, #0
  13b0cc:	e8bd8010 	pop	{r4, pc}
  13b0d0:	0014afd4 	.word	0x0014afd4

0013b0d4 <syscall_sync>:
  13b0d4:	e92d4010 	push	{r4, lr}
  13b0d8:	e3a0100d 	mov	r1, #13
  13b0dc:	e59f0008 	ldr	r0, [pc, #8]	; 13b0ec <syscall_sync+0x18>
  13b0e0:	ebfff8e7 	bl	139484 <syscall_trace>
  13b0e4:	e3a00000 	mov	r0, #0
  13b0e8:	e8bd8010 	pop	{r4, pc}
  13b0ec:	0014af68 	.word	0x0014af68

0013b0f0 <syscall_nice>:
  13b0f0:	e92d4010 	push	{r4, lr}
  13b0f4:	e3a0100d 	mov	r1, #13
  13b0f8:	e59f0008 	ldr	r0, [pc, #8]	; 13b108 <syscall_nice+0x18>
  13b0fc:	ebfff8e0 	bl	139484 <syscall_trace>
  13b100:	e3a00000 	mov	r0, #0
  13b104:	e8bd8010 	pop	{r4, pc}
  13b108:	0014af58 	.word	0x0014af58

0013b10c <syscall_pause>:
  13b10c:	e92d4010 	push	{r4, lr}
  13b110:	e3a0100e 	mov	r1, #14
  13b114:	e59f0008 	ldr	r0, [pc, #8]	; 13b124 <syscall_pause+0x18>
  13b118:	ebfff8d9 	bl	139484 <syscall_trace>
  13b11c:	e3a00000 	mov	r0, #0
  13b120:	e8bd8010 	pop	{r4, pc}
  13b124:	0014af38 	.word	0x0014af38

0013b128 <syscall_ptrace>:
  13b128:	e92d4010 	push	{r4, lr}
  13b12c:	e3a0100f 	mov	r1, #15
  13b130:	e59f0008 	ldr	r0, [pc, #8]	; 13b140 <syscall_ptrace+0x18>
  13b134:	ebfff8d2 	bl	139484 <syscall_trace>
  13b138:	e3a00000 	mov	r0, #0
  13b13c:	e8bd8010 	pop	{r4, pc}
  13b140:	0014af28 	.word	0x0014af28

0013b144 <syscall_getuid>:
  13b144:	e92d4010 	push	{r4, lr}
  13b148:	e3a0100f 	mov	r1, #15
  13b14c:	e59f0008 	ldr	r0, [pc, #8]	; 13b15c <syscall_getuid+0x18>
  13b150:	ebfff8cb 	bl	139484 <syscall_trace>
  13b154:	e3a00000 	mov	r0, #0
  13b158:	e8bd8010 	pop	{r4, pc}
  13b15c:	0014af18 	.word	0x0014af18

0013b160 <syscall_setuid>:
  13b160:	e92d4010 	push	{r4, lr}
  13b164:	e3a0100f 	mov	r1, #15
  13b168:	e59f0008 	ldr	r0, [pc, #8]	; 13b178 <syscall_setuid+0x18>
  13b16c:	ebfff8c4 	bl	139484 <syscall_trace>
  13b170:	e3a00000 	mov	r0, #0
  13b174:	e8bd8010 	pop	{r4, pc}
  13b178:	0014af08 	.word	0x0014af08

0013b17c <syscall_mount>:
  13b17c:	e92d4010 	push	{r4, lr}
  13b180:	e3a0100e 	mov	r1, #14
  13b184:	e59f0008 	ldr	r0, [pc, #8]	; 13b194 <syscall_mount+0x18>
  13b188:	ebfff8bd 	bl	139484 <syscall_trace>
  13b18c:	e3a00000 	mov	r0, #0
  13b190:	e8bd8010 	pop	{r4, pc}
  13b194:	0014aef8 	.word	0x0014aef8

0013b198 <syscall_lchown>:
  13b198:	e92d4010 	push	{r4, lr}
  13b19c:	e3a0100f 	mov	r1, #15
  13b1a0:	e59f0008 	ldr	r0, [pc, #8]	; 13b1b0 <syscall_lchown+0x18>
  13b1a4:	ebfff8b6 	bl	139484 <syscall_trace>
  13b1a8:	e3a00000 	mov	r0, #0
  13b1ac:	e8bd8010 	pop	{r4, pc}
  13b1b0:	0014aec8 	.word	0x0014aec8

0013b1b4 <syscall_chmod>:
  13b1b4:	e92d4010 	push	{r4, lr}
  13b1b8:	e3a0100e 	mov	r1, #14
  13b1bc:	e59f0008 	ldr	r0, [pc, #8]	; 13b1cc <syscall_chmod+0x18>
  13b1c0:	ebfff8af 	bl	139484 <syscall_trace>
  13b1c4:	e3a00000 	mov	r0, #0
  13b1c8:	e8bd8010 	pop	{r4, pc}
  13b1cc:	0014aeb8 	.word	0x0014aeb8

0013b1d0 <syscall_mknod>:
  13b1d0:	e92d4010 	push	{r4, lr}
  13b1d4:	e3a0100e 	mov	r1, #14
  13b1d8:	e59f0008 	ldr	r0, [pc, #8]	; 13b1e8 <syscall_mknod+0x18>
  13b1dc:	ebfff8a8 	bl	139484 <syscall_trace>
  13b1e0:	e3a00000 	mov	r0, #0
  13b1e4:	e8bd8010 	pop	{r4, pc}
  13b1e8:	0014aea8 	.word	0x0014aea8

0013b1ec <syscall_link>:
  13b1ec:	e92d4010 	push	{r4, lr}
  13b1f0:	e3a0100d 	mov	r1, #13
  13b1f4:	e59f0008 	ldr	r0, [pc, #8]	; 13b204 <syscall_link+0x18>
  13b1f8:	ebfff8a1 	bl	139484 <syscall_trace>
  13b1fc:	e3a00000 	mov	r0, #0
  13b200:	e8bd8010 	pop	{r4, pc}
  13b204:	0014ae68 	.word	0x0014ae68

0013b208 <syscall_creat>:
  13b208:	e92d4010 	push	{r4, lr}
  13b20c:	e3a0100e 	mov	r1, #14
  13b210:	e59f0008 	ldr	r0, [pc, #8]	; 13b220 <syscall_creat+0x18>
  13b214:	ebfff89a 	bl	139484 <syscall_trace>
  13b218:	e3a00000 	mov	r0, #0
  13b21c:	e8bd8010 	pop	{r4, pc}
  13b220:	0014ae58 	.word	0x0014ae58

0013b224 <syscall_restart_syscall>:
  13b224:	e92d4010 	push	{r4, lr}
  13b228:	e3a01018 	mov	r1, #24
  13b22c:	e59f0008 	ldr	r0, [pc, #8]	; 13b23c <syscall_restart_syscall+0x18>
  13b230:	ebfff893 	bl	139484 <syscall_trace>
  13b234:	e3a00000 	mov	r0, #0
  13b238:	e8bd8010 	pop	{r4, pc}
  13b23c:	0014ade0 	.word	0x0014ade0

0013b240 <syscall_debug>:
  13b240:	e92d4070 	push	{r4, r5, r6, lr}
  13b244:	e1a04000 	mov	r4, r0
  13b248:	e1a05001 	mov	r5, r1
  13b24c:	e3a0201d 	mov	r2, #29
  13b250:	e59f1018 	ldr	r1, [pc, #24]	; 13b270 <syscall_debug+0x30>
  13b254:	e3a000ff 	mov	r0, #255	; 0xff
  13b258:	eb0004f9 	bl	13c644 <syscall>
  13b25c:	e1a02005 	mov	r2, r5
  13b260:	e1a01004 	mov	r1, r4
  13b264:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b268:	e3a000ff 	mov	r0, #255	; 0xff
  13b26c:	ea0004f4 	b	13c644 <syscall>
  13b270:	0014c8a0 	.word	0x0014c8a0

0013b274 <syscall_shmdt>:
  13b274:	e92d4010 	push	{r4, lr}
  13b278:	e1a04000 	mov	r4, r0
  13b27c:	e3a0100e 	mov	r1, #14
  13b280:	e59f0010 	ldr	r0, [pc, #16]	; 13b298 <syscall_shmdt+0x24>
  13b284:	ebffffed 	bl	13b240 <syscall_debug>
  13b288:	e1a01004 	mov	r1, r4
  13b28c:	e8bd4010 	pop	{r4, lr}
  13b290:	e59f0004 	ldr	r0, [pc, #4]	; 13b29c <syscall_shmdt+0x28>
  13b294:	ea0004ea 	b	13c644 <syscall>
  13b298:	0014c138 	.word	0x0014c138
  13b29c:	00000132 	.word	0x00000132

0013b2a0 <syscall_set_tid_address>:
  13b2a0:	e92d4010 	push	{r4, lr}
  13b2a4:	e1a04000 	mov	r4, r0
  13b2a8:	e3a01018 	mov	r1, #24
  13b2ac:	e59f0010 	ldr	r0, [pc, #16]	; 13b2c4 <syscall_set_tid_address+0x24>
  13b2b0:	ebffffe2 	bl	13b240 <syscall_debug>
  13b2b4:	e1a01004 	mov	r1, r4
  13b2b8:	e8bd4010 	pop	{r4, lr}
  13b2bc:	e3a0007c 	mov	r0, #124	; 0x7c
  13b2c0:	ea0004df 	b	13c644 <syscall>
  13b2c4:	0014bd58 	.word	0x0014bd58

0013b2c8 <syscall_exit_group>:
  13b2c8:	e92d4010 	push	{r4, lr}
  13b2cc:	e1a04000 	mov	r4, r0
  13b2d0:	e3a01013 	mov	r1, #19
  13b2d4:	e59f0010 	ldr	r0, [pc, #16]	; 13b2ec <syscall_exit_group+0x24>
  13b2d8:	ebffffd8 	bl	13b240 <syscall_debug>
  13b2dc:	e1a01004 	mov	r1, r4
  13b2e0:	e8bd4010 	pop	{r4, lr}
  13b2e4:	e3a00062 	mov	r0, #98	; 0x62
  13b2e8:	ea0004d5 	b	13c644 <syscall>
  13b2ec:	0014bcd0 	.word	0x0014bcd0

0013b2f0 <syscall_sched_get_priority_min>:
  13b2f0:	e92d4010 	push	{r4, lr}
  13b2f4:	e1a04000 	mov	r4, r0
  13b2f8:	e3a0101f 	mov	r1, #31
  13b2fc:	e59f0010 	ldr	r0, [pc, #16]	; 13b314 <syscall_sched_get_priority_min+0x24>
  13b300:	ebffffce 	bl	13b240 <syscall_debug>
  13b304:	e1a01004 	mov	r1, r4
  13b308:	e8bd4010 	pop	{r4, lr}
  13b30c:	e3a00097 	mov	r0, #151	; 0x97
  13b310:	ea0004cb 	b	13c644 <syscall>
  13b314:	0014b668 	.word	0x0014b668

0013b318 <syscall_sched_get_priority_max>:
  13b318:	e92d4010 	push	{r4, lr}
  13b31c:	e1a04000 	mov	r4, r0
  13b320:	e3a0101f 	mov	r1, #31
  13b324:	e59f0010 	ldr	r0, [pc, #16]	; 13b33c <syscall_sched_get_priority_max+0x24>
  13b328:	ebffffc4 	bl	13b240 <syscall_debug>
  13b32c:	e1a01004 	mov	r1, r4
  13b330:	e8bd4010 	pop	{r4, lr}
  13b334:	e3a00096 	mov	r0, #150	; 0x96
  13b338:	ea0004c1 	b	13c644 <syscall>
  13b33c:	0014b648 	.word	0x0014b648

0013b340 <syscall_fsync>:
  13b340:	e92d4010 	push	{r4, lr}
  13b344:	e1a04000 	mov	r4, r0
  13b348:	e3a0100e 	mov	r1, #14
  13b34c:	e59f0010 	ldr	r0, [pc, #16]	; 13b364 <syscall_fsync+0x24>
  13b350:	ebffffba 	bl	13b240 <syscall_debug>
  13b354:	e1a01004 	mov	r1, r4
  13b358:	e8bd4010 	pop	{r4, lr}
  13b35c:	e3a0009b 	mov	r0, #155	; 0x9b
  13b360:	ea0004b7 	b	13c644 <syscall>
  13b364:	0014b384 	.word	0x0014b384

0013b368 <syscall_brk>:
  13b368:	e92d4010 	push	{r4, lr}
  13b36c:	e1a04000 	mov	r4, r0
  13b370:	e3a0100c 	mov	r1, #12
  13b374:	e59f0010 	ldr	r0, [pc, #16]	; 13b38c <syscall_brk+0x24>
  13b378:	ebffffb0 	bl	13b240 <syscall_debug>
  13b37c:	e1a01004 	mov	r1, r4
  13b380:	e8bd4010 	pop	{r4, lr}
  13b384:	e3a00034 	mov	r0, #52	; 0x34
  13b388:	ea0004ad 	b	13c644 <syscall>
  13b38c:	0014afe4 	.word	0x0014afe4

0013b390 <syscall_pipe>:
  13b390:	e92d4010 	push	{r4, lr}
  13b394:	e1a04000 	mov	r4, r0
  13b398:	e3a0100d 	mov	r1, #13
  13b39c:	e59f0010 	ldr	r0, [pc, #16]	; 13b3b4 <syscall_pipe+0x24>
  13b3a0:	ebffffa6 	bl	13b240 <syscall_debug>
  13b3a4:	e1a01004 	mov	r1, r4
  13b3a8:	e8bd4010 	pop	{r4, lr}
  13b3ac:	e3a0007e 	mov	r0, #126	; 0x7e
  13b3b0:	ea0004a3 	b	13c644 <syscall>
  13b3b4:	0014afc4 	.word	0x0014afc4

0013b3b8 <syscall_dup>:
  13b3b8:	e92d4010 	push	{r4, lr}
  13b3bc:	e1a04000 	mov	r4, r0
  13b3c0:	e3a0100c 	mov	r1, #12
  13b3c4:	e59f0010 	ldr	r0, [pc, #16]	; 13b3dc <syscall_dup+0x24>
  13b3c8:	ebffff9c 	bl	13b240 <syscall_debug>
  13b3cc:	e1a01004 	mov	r1, r4
  13b3d0:	e8bd4010 	pop	{r4, lr}
  13b3d4:	e3a00085 	mov	r0, #133	; 0x85
  13b3d8:	ea000499 	b	13c644 <syscall>
  13b3dc:	0014afb8 	.word	0x0014afb8

0013b3e0 <syscall_rmdir>:
  13b3e0:	e92d4010 	push	{r4, lr}
  13b3e4:	e1a04000 	mov	r4, r0
  13b3e8:	e3a0100e 	mov	r1, #14
  13b3ec:	e59f0010 	ldr	r0, [pc, #16]	; 13b404 <syscall_rmdir+0x24>
  13b3f0:	ebffff92 	bl	13b240 <syscall_debug>
  13b3f4:	e1a01004 	mov	r1, r4
  13b3f8:	e8bd4010 	pop	{r4, lr}
  13b3fc:	e3a00078 	mov	r0, #120	; 0x78
  13b400:	ea00048f 	b	13c644 <syscall>
  13b404:	0014afa8 	.word	0x0014afa8

0013b408 <syscall_chdir>:
  13b408:	e92d4010 	push	{r4, lr}
  13b40c:	e1a04000 	mov	r4, r0
  13b410:	e3a0100e 	mov	r1, #14
  13b414:	e59f0010 	ldr	r0, [pc, #16]	; 13b42c <syscall_chdir+0x24>
  13b418:	ebffff88 	bl	13b240 <syscall_debug>
  13b41c:	e1a01004 	mov	r1, r4
  13b420:	e8bd4010 	pop	{r4, lr}
  13b424:	e3a00075 	mov	r0, #117	; 0x75
  13b428:	ea000485 	b	13c644 <syscall>
  13b42c:	0014ae98 	.word	0x0014ae98

0013b430 <syscall_unlink>:
  13b430:	e92d4010 	push	{r4, lr}
  13b434:	e1a04000 	mov	r4, r0
  13b438:	e3a0100f 	mov	r1, #15
  13b43c:	e59f0010 	ldr	r0, [pc, #16]	; 13b454 <syscall_unlink+0x24>
  13b440:	ebffff7e 	bl	13b240 <syscall_debug>
  13b444:	e1a01004 	mov	r1, r4
  13b448:	e8bd4010 	pop	{r4, lr}
  13b44c:	e3a00076 	mov	r0, #118	; 0x76
  13b450:	ea00047b 	b	13c644 <syscall>
  13b454:	0014ae78 	.word	0x0014ae78

0013b458 <syscall_close>:
  13b458:	e92d4010 	push	{r4, lr}
  13b45c:	e1a04000 	mov	r4, r0
  13b460:	e3a0100e 	mov	r1, #14
  13b464:	e59f0010 	ldr	r0, [pc, #16]	; 13b47c <syscall_close+0x24>
  13b468:	ebffff74 	bl	13b240 <syscall_debug>
  13b46c:	e1a01004 	mov	r1, r4
  13b470:	e8bd4010 	pop	{r4, lr}
  13b474:	e3a00006 	mov	r0, #6
  13b478:	ea000471 	b	13c644 <syscall>
  13b47c:	0014ae48 	.word	0x0014ae48

0013b480 <syscall_exit>:
  13b480:	e92d4010 	push	{r4, lr}
  13b484:	e1a04000 	mov	r4, r0
  13b488:	e3a0100d 	mov	r1, #13
  13b48c:	e59f0010 	ldr	r0, [pc, #16]	; 13b4a4 <syscall_exit+0x24>
  13b490:	ebffff6a 	bl	13b240 <syscall_debug>
  13b494:	e1a01004 	mov	r1, r4
  13b498:	e8bd4010 	pop	{r4, lr}
  13b49c:	e3a00001 	mov	r0, #1
  13b4a0:	ea000467 	b	13c644 <syscall>
  13b4a4:	0014adf8 	.word	0x0014adf8

0013b4a8 <syscall_listen>:
  13b4a8:	e92d4070 	push	{r4, r5, r6, lr}
  13b4ac:	e1a04000 	mov	r4, r0
  13b4b0:	e1a05001 	mov	r5, r1
  13b4b4:	e59f0018 	ldr	r0, [pc, #24]	; 13b4d4 <syscall_listen+0x2c>
  13b4b8:	e3a0100f 	mov	r1, #15
  13b4bc:	ebffff5f 	bl	13b240 <syscall_debug>
  13b4c0:	e1a02005 	mov	r2, r5
  13b4c4:	e1a01004 	mov	r1, r4
  13b4c8:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b4cc:	e3a0004d 	mov	r0, #77	; 0x4d
  13b4d0:	ea00045b 	b	13c644 <syscall>
  13b4d4:	0014bfbc 	.word	0x0014bfbc

0013b4d8 <syscall_clock_getres>:
  13b4d8:	e92d4070 	push	{r4, r5, r6, lr}
  13b4dc:	e1a04000 	mov	r4, r0
  13b4e0:	e1a05001 	mov	r5, r1
  13b4e4:	e59f0018 	ldr	r0, [pc, #24]	; 13b504 <syscall_clock_getres+0x2c>
  13b4e8:	e3a01015 	mov	r1, #21
  13b4ec:	ebffff53 	bl	13b240 <syscall_debug>
  13b4f0:	e1a02005 	mov	r2, r5
  13b4f4:	e1a01004 	mov	r1, r4
  13b4f8:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b4fc:	e3a00081 	mov	r0, #129	; 0x81
  13b500:	ea00044f 	b	13c644 <syscall>
  13b504:	0014be1c 	.word	0x0014be1c

0013b508 <syscall_clock_gettime>:
  13b508:	e92d4070 	push	{r4, r5, r6, lr}
  13b50c:	e1a04000 	mov	r4, r0
  13b510:	e1a05001 	mov	r5, r1
  13b514:	e59f0018 	ldr	r0, [pc, #24]	; 13b534 <syscall_clock_gettime+0x2c>
  13b518:	e3a01016 	mov	r1, #22
  13b51c:	ebffff47 	bl	13b240 <syscall_debug>
  13b520:	e1a02005 	mov	r2, r5
  13b524:	e1a01004 	mov	r1, r4
  13b528:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b52c:	e3a00080 	mov	r0, #128	; 0x80
  13b530:	ea000443 	b	13c644 <syscall>
  13b534:	0014be04 	.word	0x0014be04

0013b538 <syscall_clock_settime>:
  13b538:	e92d4070 	push	{r4, r5, r6, lr}
  13b53c:	e1a04000 	mov	r4, r0
  13b540:	e1a05001 	mov	r5, r1
  13b544:	e59f0018 	ldr	r0, [pc, #24]	; 13b564 <syscall_clock_settime+0x2c>
  13b548:	e3a01016 	mov	r1, #22
  13b54c:	ebffff3b 	bl	13b240 <syscall_debug>
  13b550:	e1a02005 	mov	r2, r5
  13b554:	e1a01004 	mov	r1, r4
  13b558:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b55c:	e3a0007f 	mov	r0, #127	; 0x7f
  13b560:	ea000437 	b	13c644 <syscall>
  13b564:	0014bdec 	.word	0x0014bdec

0013b568 <syscall_tkill>:
  13b568:	e92d4070 	push	{r4, r5, r6, lr}
  13b56c:	e1a04000 	mov	r4, r0
  13b570:	e1a05001 	mov	r5, r1
  13b574:	e59f0018 	ldr	r0, [pc, #24]	; 13b594 <syscall_tkill+0x2c>
  13b578:	e3a0100e 	mov	r1, #14
  13b57c:	ebffff2f 	bl	13b240 <syscall_debug>
  13b580:	e1a02005 	mov	r2, r5
  13b584:	e1a01004 	mov	r1, r4
  13b588:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b58c:	e3a00069 	mov	r0, #105	; 0x69
  13b590:	ea00042b 	b	13c644 <syscall>
  13b594:	0014bbfc 	.word	0x0014bbfc

0013b598 <syscall_fstat64>:
  13b598:	e92d4070 	push	{r4, r5, r6, lr}
  13b59c:	e1a04000 	mov	r4, r0
  13b5a0:	e1a05001 	mov	r5, r1
  13b5a4:	e59f0018 	ldr	r0, [pc, #24]	; 13b5c4 <syscall_fstat64+0x2c>
  13b5a8:	e3a01010 	mov	r1, #16
  13b5ac:	ebffff23 	bl	13b240 <syscall_debug>
  13b5b0:	e1a02005 	mov	r2, r5
  13b5b4:	e1a01004 	mov	r1, r4
  13b5b8:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b5bc:	e3a00008 	mov	r0, #8
  13b5c0:	ea00041f 	b	13c644 <syscall>
  13b5c4:	0014b900 	.word	0x0014b900

0013b5c8 <syscall_lstat64>:
  13b5c8:	e92d4070 	push	{r4, r5, r6, lr}
  13b5cc:	e1a04000 	mov	r4, r0
  13b5d0:	e1a05001 	mov	r5, r1
  13b5d4:	e59f0018 	ldr	r0, [pc, #24]	; 13b5f4 <syscall_lstat64+0x2c>
  13b5d8:	e3a01010 	mov	r1, #16
  13b5dc:	ebffff17 	bl	13b240 <syscall_debug>
  13b5e0:	e1a02005 	mov	r2, r5
  13b5e4:	e1a01004 	mov	r1, r4
  13b5e8:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b5ec:	e3a00043 	mov	r0, #67	; 0x43
  13b5f0:	ea000413 	b	13c644 <syscall>
  13b5f4:	0014b8f0 	.word	0x0014b8f0

0013b5f8 <syscall_stat64>:
  13b5f8:	e92d4070 	push	{r4, r5, r6, lr}
  13b5fc:	e1a04000 	mov	r4, r0
  13b600:	e1a05001 	mov	r5, r1
  13b604:	e59f0018 	ldr	r0, [pc, #24]	; 13b624 <syscall_stat64+0x2c>
  13b608:	e3a0100f 	mov	r1, #15
  13b60c:	ebffff0b 	bl	13b240 <syscall_debug>
  13b610:	e1a02005 	mov	r2, r5
  13b614:	e1a01004 	mov	r1, r4
  13b618:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b61c:	e3a00043 	mov	r0, #67	; 0x43
  13b620:	ea000407 	b	13c644 <syscall>
  13b624:	0014b8e0 	.word	0x0014b8e0

0013b628 <syscall_ugetrlimit>:
  13b628:	e92d4070 	push	{r4, r5, r6, lr}
  13b62c:	e1a04000 	mov	r4, r0
  13b630:	e1a05001 	mov	r5, r1
  13b634:	e59f0018 	ldr	r0, [pc, #24]	; 13b654 <syscall_ugetrlimit+0x2c>
  13b638:	e3a01013 	mov	r1, #19
  13b63c:	ebfffeff 	bl	13b240 <syscall_debug>
  13b640:	e1a02005 	mov	r2, r5
  13b644:	e1a01004 	mov	r1, r4
  13b648:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b64c:	e3a0008d 	mov	r0, #141	; 0x8d
  13b650:	ea0003fb 	b	13c644 <syscall>
  13b654:	0014b894 	.word	0x0014b894

0013b658 <syscall_getcwd>:
  13b658:	e92d4070 	push	{r4, r5, r6, lr}
  13b65c:	e1a04000 	mov	r4, r0
  13b660:	e1a05001 	mov	r5, r1
  13b664:	e59f0018 	ldr	r0, [pc, #24]	; 13b684 <syscall_getcwd+0x2c>
  13b668:	e3a0100f 	mov	r1, #15
  13b66c:	ebfffef3 	bl	13b240 <syscall_debug>
  13b670:	e1a02005 	mov	r2, r5
  13b674:	e1a01004 	mov	r1, r4
  13b678:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b67c:	e3a00074 	mov	r0, #116	; 0x74
  13b680:	ea0003ef 	b	13c644 <syscall>
  13b684:	0014b82c 	.word	0x0014b82c

0013b688 <syscall_nanosleep>:
  13b688:	e92d4070 	push	{r4, r5, r6, lr}
  13b68c:	e1a04000 	mov	r4, r0
  13b690:	e1a05001 	mov	r5, r1
  13b694:	e59f0018 	ldr	r0, [pc, #24]	; 13b6b4 <syscall_nanosleep+0x2c>
  13b698:	e3a01012 	mov	r1, #18
  13b69c:	ebfffee7 	bl	13b240 <syscall_debug>
  13b6a0:	e1a02005 	mov	r2, r5
  13b6a4:	e1a01004 	mov	r1, r4
  13b6a8:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b6ac:	e3a0000a 	mov	r0, #10
  13b6b0:	ea0003e3 	b	13c644 <syscall>
  13b6b4:	0014b6a8 	.word	0x0014b6a8

0013b6b8 <syscall_sched_getparam>:
  13b6b8:	e92d4070 	push	{r4, r5, r6, lr}
  13b6bc:	e1a04000 	mov	r4, r0
  13b6c0:	e1a05001 	mov	r5, r1
  13b6c4:	e59f0018 	ldr	r0, [pc, #24]	; 13b6e4 <syscall_sched_getparam+0x2c>
  13b6c8:	e3a01017 	mov	r1, #23
  13b6cc:	ebfffedb 	bl	13b240 <syscall_debug>
  13b6d0:	e1a02005 	mov	r2, r5
  13b6d4:	e1a01004 	mov	r1, r4
  13b6d8:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b6dc:	e3a00095 	mov	r0, #149	; 0x95
  13b6e0:	ea0003d7 	b	13c644 <syscall>
  13b6e4:	0014b5e4 	.word	0x0014b5e4

0013b6e8 <syscall_sched_setparam>:
  13b6e8:	e92d4070 	push	{r4, r5, r6, lr}
  13b6ec:	e1a04000 	mov	r4, r0
  13b6f0:	e1a05001 	mov	r5, r1
  13b6f4:	e59f0018 	ldr	r0, [pc, #24]	; 13b714 <syscall_sched_setparam+0x2c>
  13b6f8:	e3a01017 	mov	r1, #23
  13b6fc:	ebfffecf 	bl	13b240 <syscall_debug>
  13b700:	e1a02005 	mov	r2, r5
  13b704:	e1a01004 	mov	r1, r4
  13b708:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b70c:	e3a00094 	mov	r0, #148	; 0x94
  13b710:	ea0003cb 	b	13c644 <syscall>
  13b714:	0014b5cc 	.word	0x0014b5cc

0013b718 <syscall_lstat>:
  13b718:	e92d4070 	push	{r4, r5, r6, lr}
  13b71c:	e1a04000 	mov	r4, r0
  13b720:	e1a05001 	mov	r5, r1
  13b724:	e59f0018 	ldr	r0, [pc, #24]	; 13b744 <syscall_lstat+0x2c>
  13b728:	e3a0100e 	mov	r1, #14
  13b72c:	ebfffec3 	bl	13b240 <syscall_debug>
  13b730:	e1a02005 	mov	r2, r5
  13b734:	e1a01004 	mov	r1, r4
  13b738:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b73c:	e3a00043 	mov	r0, #67	; 0x43
  13b740:	ea0003bf 	b	13c644 <syscall>
  13b744:	0014b324 	.word	0x0014b324

0013b748 <syscall_stat>:
  13b748:	e92d4070 	push	{r4, r5, r6, lr}
  13b74c:	e1a04000 	mov	r4, r0
  13b750:	e1a05001 	mov	r5, r1
  13b754:	e59f0018 	ldr	r0, [pc, #24]	; 13b774 <syscall_stat+0x2c>
  13b758:	e3a0100d 	mov	r1, #13
  13b75c:	ebfffeb7 	bl	13b240 <syscall_debug>
  13b760:	e1a02005 	mov	r2, r5
  13b764:	e1a01004 	mov	r1, r4
  13b768:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b76c:	e3a00043 	mov	r0, #67	; 0x43
  13b770:	ea0003b3 	b	13c644 <syscall>
  13b774:	0014b314 	.word	0x0014b314

0013b778 <syscall_munmap>:
  13b778:	e92d4070 	push	{r4, r5, r6, lr}
  13b77c:	e1a04000 	mov	r4, r0
  13b780:	e1a05001 	mov	r5, r1
  13b784:	e59f0018 	ldr	r0, [pc, #24]	; 13b7a4 <syscall_munmap+0x2c>
  13b788:	e3a0100f 	mov	r1, #15
  13b78c:	ebfffeab 	bl	13b240 <syscall_debug>
  13b790:	e1a02005 	mov	r2, r5
  13b794:	e1a01004 	mov	r1, r4
  13b798:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b79c:	e3a00036 	mov	r0, #54	; 0x36
  13b7a0:	ea0003a7 	b	13c644 <syscall>
  13b7a4:	0014b23c 	.word	0x0014b23c

0013b7a8 <syscall_setrlimit>:
  13b7a8:	e92d4070 	push	{r4, r5, r6, lr}
  13b7ac:	e1a04000 	mov	r4, r0
  13b7b0:	e1a05001 	mov	r5, r1
  13b7b4:	e59f0018 	ldr	r0, [pc, #24]	; 13b7d4 <syscall_setrlimit+0x2c>
  13b7b8:	e3a01012 	mov	r1, #18
  13b7bc:	ebfffe9f 	bl	13b240 <syscall_debug>
  13b7c0:	e1a02005 	mov	r2, r5
  13b7c4:	e1a01004 	mov	r1, r4
  13b7c8:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b7cc:	e3a0008e 	mov	r0, #142	; 0x8e
  13b7d0:	ea00039b 	b	13c644 <syscall>
  13b7d4:	0014b168 	.word	0x0014b168

0013b7d8 <syscall_dup2>:
  13b7d8:	e92d4070 	push	{r4, r5, r6, lr}
  13b7dc:	e1a04000 	mov	r4, r0
  13b7e0:	e1a05001 	mov	r5, r1
  13b7e4:	e59f0018 	ldr	r0, [pc, #24]	; 13b804 <syscall_dup2+0x2c>
  13b7e8:	e3a0100d 	mov	r1, #13
  13b7ec:	ebfffe93 	bl	13b240 <syscall_debug>
  13b7f0:	e1a02005 	mov	r2, r5
  13b7f4:	e1a01004 	mov	r1, r4
  13b7f8:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b7fc:	e3a00086 	mov	r0, #134	; 0x86
  13b800:	ea00038f 	b	13c644 <syscall>
  13b804:	0014b0b0 	.word	0x0014b0b0

0013b808 <syscall_mkdir>:
  13b808:	e92d4070 	push	{r4, r5, r6, lr}
  13b80c:	e1a04000 	mov	r4, r0
  13b810:	e1a05001 	mov	r5, r1
  13b814:	e59f0018 	ldr	r0, [pc, #24]	; 13b834 <syscall_mkdir+0x2c>
  13b818:	e3a0100e 	mov	r1, #14
  13b81c:	ebfffe87 	bl	13b240 <syscall_debug>
  13b820:	e1a02005 	mov	r2, r5
  13b824:	e1a01004 	mov	r1, r4
  13b828:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b82c:	e3a00077 	mov	r0, #119	; 0x77
  13b830:	ea000383 	b	13c644 <syscall>
  13b834:	0014af98 	.word	0x0014af98

0013b838 <syscall_rename>:
  13b838:	e92d4070 	push	{r4, r5, r6, lr}
  13b83c:	e1a04000 	mov	r4, r0
  13b840:	e1a05001 	mov	r5, r1
  13b844:	e59f0018 	ldr	r0, [pc, #24]	; 13b864 <syscall_rename+0x2c>
  13b848:	e3a0100f 	mov	r1, #15
  13b84c:	ebfffe7b 	bl	13b240 <syscall_debug>
  13b850:	e1a02005 	mov	r2, r5
  13b854:	e1a01004 	mov	r1, r4
  13b858:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b85c:	e3a00087 	mov	r0, #135	; 0x87
  13b860:	ea000377 	b	13c644 <syscall>
  13b864:	0014af88 	.word	0x0014af88

0013b868 <syscall_kill>:
  13b868:	e92d4070 	push	{r4, r5, r6, lr}
  13b86c:	e1a04000 	mov	r4, r0
  13b870:	e1a05001 	mov	r5, r1
  13b874:	e59f0018 	ldr	r0, [pc, #24]	; 13b894 <syscall_kill+0x2c>
  13b878:	e3a0100d 	mov	r1, #13
  13b87c:	ebfffe6f 	bl	13b240 <syscall_debug>
  13b880:	e1a02005 	mov	r2, r5
  13b884:	e1a01004 	mov	r1, r4
  13b888:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b88c:	e3a0000e 	mov	r0, #14
  13b890:	ea00036b 	b	13c644 <syscall>
  13b894:	0014af78 	.word	0x0014af78

0013b898 <syscall_access>:
  13b898:	e92d4070 	push	{r4, r5, r6, lr}
  13b89c:	e1a04000 	mov	r4, r0
  13b8a0:	e1a05001 	mov	r5, r1
  13b8a4:	e59f0018 	ldr	r0, [pc, #24]	; 13b8c4 <syscall_access+0x2c>
  13b8a8:	e3a0100f 	mov	r1, #15
  13b8ac:	ebfffe63 	bl	13b240 <syscall_debug>
  13b8b0:	e1a02005 	mov	r2, r5
  13b8b4:	e1a01004 	mov	r1, r4
  13b8b8:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b8bc:	e3a0007d 	mov	r0, #125	; 0x7d
  13b8c0:	ea00035f 	b	13c644 <syscall>
  13b8c4:	0014af48 	.word	0x0014af48

0013b8c8 <syscall_getrandom>:
  13b8c8:	e92d4070 	push	{r4, r5, r6, lr}
  13b8cc:	e1a06002 	mov	r6, r2
  13b8d0:	e1a04000 	mov	r4, r0
  13b8d4:	e1a05001 	mov	r5, r1
  13b8d8:	e59f001c 	ldr	r0, [pc, #28]	; 13b8fc <syscall_getrandom+0x34>
  13b8dc:	e3a01012 	mov	r1, #18
  13b8e0:	ebfffe56 	bl	13b240 <syscall_debug>
  13b8e4:	e1a03006 	mov	r3, r6
  13b8e8:	e1a02005 	mov	r2, r5
  13b8ec:	e1a01004 	mov	r1, r4
  13b8f0:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b8f4:	e3a00090 	mov	r0, #144	; 0x90
  13b8f8:	ea000351 	b	13c644 <syscall>
  13b8fc:	0014c768 	.word	0x0014c768

0013b900 <syscall_shmctl>:
  13b900:	e92d4070 	push	{r4, r5, r6, lr}
  13b904:	e1a06002 	mov	r6, r2
  13b908:	e1a04000 	mov	r4, r0
  13b90c:	e1a05001 	mov	r5, r1
  13b910:	e59f001c 	ldr	r0, [pc, #28]	; 13b934 <syscall_shmctl+0x34>
  13b914:	e3a0100f 	mov	r1, #15
  13b918:	ebfffe48 	bl	13b240 <syscall_debug>
  13b91c:	e1a03006 	mov	r3, r6
  13b920:	e1a02005 	mov	r2, r5
  13b924:	e1a01004 	mov	r1, r4
  13b928:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b92c:	e3a00f4d 	mov	r0, #308	; 0x134
  13b930:	ea000343 	b	13c644 <syscall>
  13b934:	0014c158 	.word	0x0014c158

0013b938 <syscall_shmget>:
  13b938:	e92d4070 	push	{r4, r5, r6, lr}
  13b93c:	e1a06002 	mov	r6, r2
  13b940:	e1a04000 	mov	r4, r0
  13b944:	e1a05001 	mov	r5, r1
  13b948:	e59f001c 	ldr	r0, [pc, #28]	; 13b96c <syscall_shmget+0x34>
  13b94c:	e3a0100f 	mov	r1, #15
  13b950:	ebfffe3a 	bl	13b240 <syscall_debug>
  13b954:	e1a03006 	mov	r3, r6
  13b958:	e1a02005 	mov	r2, r5
  13b95c:	e1a01004 	mov	r1, r4
  13b960:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b964:	e59f0004 	ldr	r0, [pc, #4]	; 13b970 <syscall_shmget+0x38>
  13b968:	ea000335 	b	13c644 <syscall>
  13b96c:	0014c148 	.word	0x0014c148
  13b970:	00000133 	.word	0x00000133

0013b974 <syscall_shmat>:
  13b974:	e92d4070 	push	{r4, r5, r6, lr}
  13b978:	e1a06002 	mov	r6, r2
  13b97c:	e1a04000 	mov	r4, r0
  13b980:	e1a05001 	mov	r5, r1
  13b984:	e59f001c 	ldr	r0, [pc, #28]	; 13b9a8 <syscall_shmat+0x34>
  13b988:	e3a0100e 	mov	r1, #14
  13b98c:	ebfffe2b 	bl	13b240 <syscall_debug>
  13b990:	e1a03006 	mov	r3, r6
  13b994:	e1a02005 	mov	r2, r5
  13b998:	e1a01004 	mov	r1, r4
  13b99c:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b9a0:	e59f0004 	ldr	r0, [pc, #4]	; 13b9ac <syscall_shmat+0x38>
  13b9a4:	ea000326 	b	13c644 <syscall>
  13b9a8:	0014c128 	.word	0x0014c128
  13b9ac:	00000131 	.word	0x00000131

0013b9b0 <syscall_getpeername>:
  13b9b0:	e92d4070 	push	{r4, r5, r6, lr}
  13b9b4:	e1a06002 	mov	r6, r2
  13b9b8:	e1a04000 	mov	r4, r0
  13b9bc:	e1a05001 	mov	r5, r1
  13b9c0:	e59f001c 	ldr	r0, [pc, #28]	; 13b9e4 <syscall_getpeername+0x34>
  13b9c4:	e3a01014 	mov	r1, #20
  13b9c8:	ebfffe1c 	bl	13b240 <syscall_debug>
  13b9cc:	e1a03006 	mov	r3, r6
  13b9d0:	e1a02005 	mov	r2, r5
  13b9d4:	e1a01004 	mov	r1, r4
  13b9d8:	e8bd4070 	pop	{r4, r5, r6, lr}
  13b9dc:	e3a00048 	mov	r0, #72	; 0x48
  13b9e0:	ea000317 	b	13c644 <syscall>
  13b9e4:	0014bff0 	.word	0x0014bff0

0013b9e8 <syscall_getsockname>:
  13b9e8:	e92d4070 	push	{r4, r5, r6, lr}
  13b9ec:	e1a06002 	mov	r6, r2
  13b9f0:	e1a04000 	mov	r4, r0
  13b9f4:	e1a05001 	mov	r5, r1
  13b9f8:	e59f001c 	ldr	r0, [pc, #28]	; 13ba1c <syscall_getsockname+0x34>
  13b9fc:	e3a01014 	mov	r1, #20
  13ba00:	ebfffe0e 	bl	13b240 <syscall_debug>
  13ba04:	e1a03006 	mov	r3, r6
  13ba08:	e1a02005 	mov	r2, r5
  13ba0c:	e1a01004 	mov	r1, r4
  13ba10:	e8bd4070 	pop	{r4, r5, r6, lr}
  13ba14:	e3a00049 	mov	r0, #73	; 0x49
  13ba18:	ea000309 	b	13c644 <syscall>
  13ba1c:	0014bfdc 	.word	0x0014bfdc

0013ba20 <syscall_accept>:
  13ba20:	e92d4070 	push	{r4, r5, r6, lr}
  13ba24:	e1a06002 	mov	r6, r2
  13ba28:	e1a04000 	mov	r4, r0
  13ba2c:	e1a05001 	mov	r5, r1
  13ba30:	e59f001c 	ldr	r0, [pc, #28]	; 13ba54 <syscall_accept+0x34>
  13ba34:	e3a0100f 	mov	r1, #15
  13ba38:	ebfffe00 	bl	13b240 <syscall_debug>
  13ba3c:	e1a03006 	mov	r3, r6
  13ba40:	e1a02005 	mov	r2, r5
  13ba44:	e1a01004 	mov	r1, r4
  13ba48:	e8bd4070 	pop	{r4, r5, r6, lr}
  13ba4c:	e3a00045 	mov	r0, #69	; 0x45
  13ba50:	ea0002fb 	b	13c644 <syscall>
  13ba54:	0014bfcc 	.word	0x0014bfcc

0013ba58 <syscall_connect>:
  13ba58:	e92d4070 	push	{r4, r5, r6, lr}
  13ba5c:	e1a06002 	mov	r6, r2
  13ba60:	e1a04000 	mov	r4, r0
  13ba64:	e1a05001 	mov	r5, r1
  13ba68:	e59f001c 	ldr	r0, [pc, #28]	; 13ba8c <syscall_connect+0x34>
  13ba6c:	e3a01010 	mov	r1, #16
  13ba70:	ebfffdf2 	bl	13b240 <syscall_debug>
  13ba74:	e1a03006 	mov	r3, r6
  13ba78:	e1a02005 	mov	r2, r5
  13ba7c:	e1a01004 	mov	r1, r4
  13ba80:	e8bd4070 	pop	{r4, r5, r6, lr}
  13ba84:	e3a0004c 	mov	r0, #76	; 0x4c
  13ba88:	ea0002ed 	b	13c644 <syscall>
  13ba8c:	0014bfac 	.word	0x0014bfac

0013ba90 <syscall_bind>:
  13ba90:	e92d4070 	push	{r4, r5, r6, lr}
  13ba94:	e1a06002 	mov	r6, r2
  13ba98:	e1a04000 	mov	r4, r0
  13ba9c:	e1a05001 	mov	r5, r1
  13baa0:	e59f001c 	ldr	r0, [pc, #28]	; 13bac4 <syscall_bind+0x34>
  13baa4:	e3a0100d 	mov	r1, #13
  13baa8:	ebfffde4 	bl	13b240 <syscall_debug>
  13baac:	e1a03006 	mov	r3, r6
  13bab0:	e1a02005 	mov	r2, r5
  13bab4:	e1a01004 	mov	r1, r4
  13bab8:	e8bd4070 	pop	{r4, r5, r6, lr}
  13babc:	e3a00046 	mov	r0, #70	; 0x46
  13bac0:	ea0002df 	b	13c644 <syscall>
  13bac4:	0014bf9c 	.word	0x0014bf9c

0013bac8 <syscall_socket>:
  13bac8:	e92d4070 	push	{r4, r5, r6, lr}
  13bacc:	e1a06002 	mov	r6, r2
  13bad0:	e1a04000 	mov	r4, r0
  13bad4:	e1a05001 	mov	r5, r1
  13bad8:	e59f001c 	ldr	r0, [pc, #28]	; 13bafc <syscall_socket+0x34>
  13badc:	e3a0100f 	mov	r1, #15
  13bae0:	ebfffdd6 	bl	13b240 <syscall_debug>
  13bae4:	e1a03006 	mov	r3, r6
  13bae8:	e1a02005 	mov	r2, r5
  13baec:	e1a01004 	mov	r1, r4
  13baf0:	e8bd4070 	pop	{r4, r5, r6, lr}
  13baf4:	e3a00052 	mov	r0, #82	; 0x52
  13baf8:	ea0002d1 	b	13c644 <syscall>
  13bafc:	0014bf8c 	.word	0x0014bf8c

0013bb00 <syscall_sched_setaffinity>:
  13bb00:	e92d4070 	push	{r4, r5, r6, lr}
  13bb04:	e1a06002 	mov	r6, r2
  13bb08:	e1a04000 	mov	r4, r0
  13bb0c:	e1a05001 	mov	r5, r1
  13bb10:	e59f001c 	ldr	r0, [pc, #28]	; 13bb34 <syscall_sched_setaffinity+0x34>
  13bb14:	e3a0101a 	mov	r1, #26
  13bb18:	ebfffdc8 	bl	13b240 <syscall_debug>
  13bb1c:	e1a03006 	mov	r3, r6
  13bb20:	e1a02005 	mov	r2, r5
  13bb24:	e1a01004 	mov	r1, r4
  13bb28:	e8bd4070 	pop	{r4, r5, r6, lr}
  13bb2c:	e3a0009a 	mov	r0, #154	; 0x9a
  13bb30:	ea0002c3 	b	13c644 <syscall>
  13bb34:	0014bc30 	.word	0x0014bc30

0013bb38 <syscall_fcntl64>:
  13bb38:	e92d4070 	push	{r4, r5, r6, lr}
  13bb3c:	e1a06002 	mov	r6, r2
  13bb40:	e1a04000 	mov	r4, r0
  13bb44:	e1a05001 	mov	r5, r1
  13bb48:	e59f001c 	ldr	r0, [pc, #28]	; 13bb6c <syscall_fcntl64+0x34>
  13bb4c:	e3a01010 	mov	r1, #16
  13bb50:	ebfffdba 	bl	13b240 <syscall_debug>
  13bb54:	e1a03006 	mov	r3, r6
  13bb58:	e1a02005 	mov	r2, r5
  13bb5c:	e1a01004 	mov	r1, r4
  13bb60:	e8bd4070 	pop	{r4, r5, r6, lr}
  13bb64:	e3a00007 	mov	r0, #7
  13bb68:	ea0002b5 	b	13c644 <syscall>
  13bb6c:	0014bad0 	.word	0x0014bad0

0013bb70 <syscall_madvise>:
  13bb70:	e92d4070 	push	{r4, r5, r6, lr}
  13bb74:	e1a06002 	mov	r6, r2
  13bb78:	e1a04000 	mov	r4, r0
  13bb7c:	e1a05001 	mov	r5, r1
  13bb80:	e59f001c 	ldr	r0, [pc, #28]	; 13bba4 <syscall_madvise+0x34>
  13bb84:	e3a01010 	mov	r1, #16
  13bb88:	ebfffdac 	bl	13b240 <syscall_debug>
  13bb8c:	e1a03006 	mov	r3, r6
  13bb90:	e1a02005 	mov	r2, r5
  13bb94:	e1a01004 	mov	r1, r4
  13bb98:	e8bd4070 	pop	{r4, r5, r6, lr}
  13bb9c:	e3a00093 	mov	r0, #147	; 0x93
  13bba0:	ea0002a7 	b	13c644 <syscall>
  13bba4:	0014bac0 	.word	0x0014bac0

0013bba8 <syscall_getdents64>:
  13bba8:	e92d4070 	push	{r4, r5, r6, lr}
  13bbac:	e1a06002 	mov	r6, r2
  13bbb0:	e1a04000 	mov	r4, r0
  13bbb4:	e1a05001 	mov	r5, r1
  13bbb8:	e59f001c 	ldr	r0, [pc, #28]	; 13bbdc <syscall_getdents64+0x34>
  13bbbc:	e3a01013 	mov	r1, #19
  13bbc0:	ebfffd9e 	bl	13b240 <syscall_debug>
  13bbc4:	e1a03006 	mov	r3, r6
  13bbc8:	e1a02005 	mov	r2, r5
  13bbcc:	e1a01004 	mov	r1, r4
  13bbd0:	e8bd4070 	pop	{r4, r5, r6, lr}
  13bbd4:	e3a00079 	mov	r0, #121	; 0x79
  13bbd8:	ea000299 	b	13c644 <syscall>
  13bbdc:	0014ba88 	.word	0x0014ba88

0013bbe0 <syscall_poll>:
  13bbe0:	e92d4070 	push	{r4, r5, r6, lr}
  13bbe4:	e1a06002 	mov	r6, r2
  13bbe8:	e1a04000 	mov	r4, r0
  13bbec:	e1a05001 	mov	r5, r1
  13bbf0:	e59f001c 	ldr	r0, [pc, #28]	; 13bc14 <syscall_poll+0x34>
  13bbf4:	e3a0100d 	mov	r1, #13
  13bbf8:	ebfffd90 	bl	13b240 <syscall_debug>
  13bbfc:	e1a03006 	mov	r3, r6
  13bc00:	e1a02005 	mov	r2, r5
  13bc04:	e1a01004 	mov	r1, r4
  13bc08:	e8bd4070 	pop	{r4, r5, r6, lr}
  13bc0c:	e3a00009 	mov	r0, #9
  13bc10:	ea00028b 	b	13c644 <syscall>
  13bc14:	0014b6f4 	.word	0x0014b6f4

0013bc18 <syscall_sched_getscheduler>:
  13bc18:	e92d4070 	push	{r4, r5, r6, lr}
  13bc1c:	e1a06002 	mov	r6, r2
  13bc20:	e1a04000 	mov	r4, r0
  13bc24:	e1a05001 	mov	r5, r1
  13bc28:	e59f001c 	ldr	r0, [pc, #28]	; 13bc4c <syscall_sched_getscheduler+0x34>
  13bc2c:	e3a0101b 	mov	r1, #27
  13bc30:	ebfffd82 	bl	13b240 <syscall_debug>
  13bc34:	e1a03006 	mov	r3, r6
  13bc38:	e1a02005 	mov	r2, r5
  13bc3c:	e1a01004 	mov	r1, r4
  13bc40:	e8bd4070 	pop	{r4, r5, r6, lr}
  13bc44:	e3a00099 	mov	r0, #153	; 0x99
  13bc48:	ea00027d 	b	13c644 <syscall>
  13bc4c:	0014b618 	.word	0x0014b618

0013bc50 <syscall_sched_setscheduler>:
  13bc50:	e92d4070 	push	{r4, r5, r6, lr}
  13bc54:	e1a06002 	mov	r6, r2
  13bc58:	e1a04000 	mov	r4, r0
  13bc5c:	e1a05001 	mov	r5, r1
  13bc60:	e59f001c 	ldr	r0, [pc, #28]	; 13bc84 <syscall_sched_setscheduler+0x34>
  13bc64:	e3a0101b 	mov	r1, #27
  13bc68:	ebfffd74 	bl	13b240 <syscall_debug>
  13bc6c:	e1a03006 	mov	r3, r6
  13bc70:	e1a02005 	mov	r2, r5
  13bc74:	e1a01004 	mov	r1, r4
  13bc78:	e8bd4070 	pop	{r4, r5, r6, lr}
  13bc7c:	e3a00098 	mov	r0, #152	; 0x98
  13bc80:	ea00026f 	b	13c644 <syscall>
  13bc84:	0014b5fc 	.word	0x0014b5fc

0013bc88 <syscall_writev>:
  13bc88:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  13bc8c:	e1a06002 	mov	r6, r2
  13bc90:	e1a08000 	mov	r8, r0
  13bc94:	e1a04001 	mov	r4, r1
  13bc98:	e59f0088 	ldr	r0, [pc, #136]	; 13bd28 <syscall_writev+0xa0>
  13bc9c:	e3a0100f 	mov	r1, #15
  13bca0:	ebfffd66 	bl	13b240 <syscall_debug>
  13bca4:	e3560000 	cmp	r6, #0
  13bca8:	e3a07000 	mov	r7, #0
  13bcac:	da000013 	ble	13bd00 <syscall_writev+0x78>
  13bcb0:	e1a05007 	mov	r5, r7
  13bcb4:	ea000003 	b	13bcc8 <syscall_writev+0x40>
  13bcb8:	e2855001 	add	r5, r5, #1
  13bcbc:	e1560005 	cmp	r6, r5
  13bcc0:	e2844008 	add	r4, r4, #8
  13bcc4:	0a00000d 	beq	13bd00 <syscall_writev+0x78>
  13bcc8:	e5943004 	ldr	r3, [r4, #4]
  13bccc:	e3530000 	cmp	r3, #0
  13bcd0:	0afffff8 	beq	13bcb8 <syscall_writev+0x30>
  13bcd4:	e5942000 	ldr	r2, [r4]
  13bcd8:	e1a01008 	mov	r1, r8
  13bcdc:	e3a00003 	mov	r0, #3
  13bce0:	eb000257 	bl	13c644 <syscall>
  13bce4:	e3500000 	cmp	r0, #0
  13bce8:	da000006 	ble	13bd08 <syscall_writev+0x80>
  13bcec:	e2855001 	add	r5, r5, #1
  13bcf0:	e1560005 	cmp	r6, r5
  13bcf4:	e0877000 	add	r7, r7, r0
  13bcf8:	e2844008 	add	r4, r4, #8
  13bcfc:	1afffff1 	bne	13bcc8 <syscall_writev+0x40>
  13bd00:	e1a00007 	mov	r0, r7
  13bd04:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13bd08:	13a03000 	movne	r3, #0
  13bd0c:	03a03001 	moveq	r3, #1
  13bd10:	e3570000 	cmp	r7, #0
  13bd14:	13a03001 	movne	r3, #1
  13bd18:	e3530000 	cmp	r3, #0
  13bd1c:	01a07000 	moveq	r7, r0
  13bd20:	e1a00007 	mov	r0, r7
  13bd24:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13bd28:	0014b540 	.word	0x0014b540

0013bd2c <syscall_readv>:
  13bd2c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  13bd30:	e1a06002 	mov	r6, r2
  13bd34:	e1a08000 	mov	r8, r0
  13bd38:	e1a04001 	mov	r4, r1
  13bd3c:	e59f0088 	ldr	r0, [pc, #136]	; 13bdcc <syscall_readv+0xa0>
  13bd40:	e3a0100e 	mov	r1, #14
  13bd44:	ebfffd3d 	bl	13b240 <syscall_debug>
  13bd48:	e3560000 	cmp	r6, #0
  13bd4c:	e3a07000 	mov	r7, #0
  13bd50:	da000013 	ble	13bda4 <syscall_readv+0x78>
  13bd54:	e1a05007 	mov	r5, r7
  13bd58:	ea000003 	b	13bd6c <syscall_readv+0x40>
  13bd5c:	e2855001 	add	r5, r5, #1
  13bd60:	e1560005 	cmp	r6, r5
  13bd64:	e2844008 	add	r4, r4, #8
  13bd68:	0a00000d 	beq	13bda4 <syscall_readv+0x78>
  13bd6c:	e5943004 	ldr	r3, [r4, #4]
  13bd70:	e3530000 	cmp	r3, #0
  13bd74:	0afffff8 	beq	13bd5c <syscall_readv+0x30>
  13bd78:	e5942000 	ldr	r2, [r4]
  13bd7c:	e1a01008 	mov	r1, r8
  13bd80:	e3a00002 	mov	r0, #2
  13bd84:	eb00022e 	bl	13c644 <syscall>
  13bd88:	e3500000 	cmp	r0, #0
  13bd8c:	da000006 	ble	13bdac <syscall_readv+0x80>
  13bd90:	e2855001 	add	r5, r5, #1
  13bd94:	e1560005 	cmp	r6, r5
  13bd98:	e0877000 	add	r7, r7, r0
  13bd9c:	e2844008 	add	r4, r4, #8
  13bda0:	1afffff1 	bne	13bd6c <syscall_readv+0x40>
  13bda4:	e1a00007 	mov	r0, r7
  13bda8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13bdac:	13a03000 	movne	r3, #0
  13bdb0:	03a03001 	moveq	r3, #1
  13bdb4:	e3570000 	cmp	r7, #0
  13bdb8:	13a03001 	movne	r3, #1
  13bdbc:	e3530000 	cmp	r3, #0
  13bdc0:	01a07000 	moveq	r7, r0
  13bdc4:	e1a00007 	mov	r0, r7
  13bdc8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13bdcc:	0014b530 	.word	0x0014b530

0013bdd0 <syscall_getdents>:
  13bdd0:	e92d4070 	push	{r4, r5, r6, lr}
  13bdd4:	e1a06002 	mov	r6, r2
  13bdd8:	e1a04000 	mov	r4, r0
  13bddc:	e1a05001 	mov	r5, r1
  13bde0:	e59f001c 	ldr	r0, [pc, #28]	; 13be04 <syscall_getdents+0x34>
  13bde4:	e3a01011 	mov	r1, #17
  13bde8:	ebfffd14 	bl	13b240 <syscall_debug>
  13bdec:	e1a03006 	mov	r3, r6
  13bdf0:	e1a02005 	mov	r2, r5
  13bdf4:	e1a01004 	mov	r1, r4
  13bdf8:	e8bd4070 	pop	{r4, r5, r6, lr}
  13bdfc:	e3a00079 	mov	r0, #121	; 0x79
  13be00:	ea00020f 	b	13c644 <syscall>
  13be04:	0014b4e8 	.word	0x0014b4e8

0013be08 <syscall_readlink>:
  13be08:	e92d4070 	push	{r4, r5, r6, lr}
  13be0c:	e1a06002 	mov	r6, r2
  13be10:	e1a04000 	mov	r4, r0
  13be14:	e1a05001 	mov	r5, r1
  13be18:	e59f001c 	ldr	r0, [pc, #28]	; 13be3c <syscall_readlink+0x34>
  13be1c:	e3a01011 	mov	r1, #17
  13be20:	ebfffd06 	bl	13b240 <syscall_debug>
  13be24:	e1a03006 	mov	r3, r6
  13be28:	e1a02005 	mov	r2, r5
  13be2c:	e1a01004 	mov	r1, r4
  13be30:	e8bd4070 	pop	{r4, r5, r6, lr}
  13be34:	e3a00091 	mov	r0, #145	; 0x91
  13be38:	ea000201 	b	13c644 <syscall>
  13be3c:	0014b1f8 	.word	0x0014b1f8

0013be40 <syscall_fcntl>:
  13be40:	e92d4070 	push	{r4, r5, r6, lr}
  13be44:	e1a06002 	mov	r6, r2
  13be48:	e1a04000 	mov	r4, r0
  13be4c:	e1a05001 	mov	r5, r1
  13be50:	e59f001c 	ldr	r0, [pc, #28]	; 13be74 <syscall_fcntl+0x34>
  13be54:	e3a0100e 	mov	r1, #14
  13be58:	ebfffcf8 	bl	13b240 <syscall_debug>
  13be5c:	e1a03006 	mov	r3, r6
  13be60:	e1a02005 	mov	r2, r5
  13be64:	e1a01004 	mov	r1, r4
  13be68:	e8bd4070 	pop	{r4, r5, r6, lr}
  13be6c:	e3a00007 	mov	r0, #7
  13be70:	ea0001f3 	b	13c644 <syscall>
  13be74:	0014b060 	.word	0x0014b060

0013be78 <syscall_execve>:
  13be78:	e92d4070 	push	{r4, r5, r6, lr}
  13be7c:	e1a06002 	mov	r6, r2
  13be80:	e1a04000 	mov	r4, r0
  13be84:	e1a05001 	mov	r5, r1
  13be88:	e59f001c 	ldr	r0, [pc, #28]	; 13beac <syscall_execve+0x34>
  13be8c:	e3a0100f 	mov	r1, #15
  13be90:	ebfffcea 	bl	13b240 <syscall_debug>
  13be94:	e1a03006 	mov	r3, r6
  13be98:	e1a02005 	mov	r2, r5
  13be9c:	e1a01004 	mov	r1, r4
  13bea0:	e8bd4070 	pop	{r4, r5, r6, lr}
  13bea4:	e3a00089 	mov	r0, #137	; 0x89
  13bea8:	ea0001e5 	b	13c644 <syscall>
  13beac:	0014ae88 	.word	0x0014ae88

0013beb0 <syscall_open>:
  13beb0:	e92d4070 	push	{r4, r5, r6, lr}
  13beb4:	e1a06002 	mov	r6, r2
  13beb8:	e1a04000 	mov	r4, r0
  13bebc:	e1a05001 	mov	r5, r1
  13bec0:	e59f001c 	ldr	r0, [pc, #28]	; 13bee4 <syscall_open+0x34>
  13bec4:	e3a0100d 	mov	r1, #13
  13bec8:	ebfffcdc 	bl	13b240 <syscall_debug>
  13becc:	e1a03006 	mov	r3, r6
  13bed0:	e1a02005 	mov	r2, r5
  13bed4:	e1a01004 	mov	r1, r4
  13bed8:	e8bd4070 	pop	{r4, r5, r6, lr}
  13bedc:	e3a00005 	mov	r0, #5
  13bee0:	ea0001d7 	b	13c644 <syscall>
  13bee4:	0014ae38 	.word	0x0014ae38

0013bee8 <syscall_write>:
  13bee8:	e92d4070 	push	{r4, r5, r6, lr}
  13beec:	e1a06002 	mov	r6, r2
  13bef0:	e1a04000 	mov	r4, r0
  13bef4:	e1a05001 	mov	r5, r1
  13bef8:	e59f001c 	ldr	r0, [pc, #28]	; 13bf1c <syscall_write+0x34>
  13befc:	e3a0100e 	mov	r1, #14
  13bf00:	ebfffcce 	bl	13b240 <syscall_debug>
  13bf04:	e1a03006 	mov	r3, r6
  13bf08:	e1a02005 	mov	r2, r5
  13bf0c:	e1a01004 	mov	r1, r4
  13bf10:	e8bd4070 	pop	{r4, r5, r6, lr}
  13bf14:	e3a00003 	mov	r0, #3
  13bf18:	ea0001c9 	b	13c644 <syscall>
  13bf1c:	0014ae28 	.word	0x0014ae28

0013bf20 <syscall_read>:
  13bf20:	e92d4070 	push	{r4, r5, r6, lr}
  13bf24:	e1a06002 	mov	r6, r2
  13bf28:	e1a04000 	mov	r4, r0
  13bf2c:	e1a05001 	mov	r5, r1
  13bf30:	e59f001c 	ldr	r0, [pc, #28]	; 13bf54 <syscall_read+0x34>
  13bf34:	e3a0100d 	mov	r1, #13
  13bf38:	ebfffcc0 	bl	13b240 <syscall_debug>
  13bf3c:	e1a03006 	mov	r3, r6
  13bf40:	e1a02005 	mov	r2, r5
  13bf44:	e1a01004 	mov	r1, r4
  13bf48:	e8bd4070 	pop	{r4, r5, r6, lr}
  13bf4c:	e3a00002 	mov	r0, #2
  13bf50:	ea0001bb 	b	13c644 <syscall>
  13bf54:	0014ae18 	.word	0x0014ae18

0013bf58 <syscall_prlimit64>:
  13bf58:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  13bf5c:	e1a06002 	mov	r6, r2
  13bf60:	e1a07003 	mov	r7, r3
  13bf64:	e1a04000 	mov	r4, r0
  13bf68:	e1a05001 	mov	r5, r1
  13bf6c:	e24dd00c 	sub	sp, sp, #12
  13bf70:	e3a01012 	mov	r1, #18
  13bf74:	e59f0020 	ldr	r0, [pc, #32]	; 13bf9c <syscall_prlimit64+0x44>
  13bf78:	ebfffcb0 	bl	13b240 <syscall_debug>
  13bf7c:	e58d7000 	str	r7, [sp]
  13bf80:	e1a03006 	mov	r3, r6
  13bf84:	e1a02005 	mov	r2, r5
  13bf88:	e1a01004 	mov	r1, r4
  13bf8c:	e3a0008c 	mov	r0, #140	; 0x8c
  13bf90:	eb0001ab 	bl	13c644 <syscall>
  13bf94:	e28dd00c 	add	sp, sp, #12
  13bf98:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  13bf9c:	0014c61c 	.word	0x0014c61c

0013bfa0 <syscall_recv>:
  13bfa0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  13bfa4:	e1a06002 	mov	r6, r2
  13bfa8:	e1a07003 	mov	r7, r3
  13bfac:	e1a04000 	mov	r4, r0
  13bfb0:	e1a05001 	mov	r5, r1
  13bfb4:	e24dd00c 	sub	sp, sp, #12
  13bfb8:	e3a0100d 	mov	r1, #13
  13bfbc:	e59f0020 	ldr	r0, [pc, #32]	; 13bfe4 <syscall_recv+0x44>
  13bfc0:	ebfffc9e 	bl	13b240 <syscall_debug>
  13bfc4:	e58d7000 	str	r7, [sp]
  13bfc8:	e1a03006 	mov	r3, r6
  13bfcc:	e1a02005 	mov	r2, r5
  13bfd0:	e1a01004 	mov	r1, r4
  13bfd4:	e3a0004e 	mov	r0, #78	; 0x4e
  13bfd8:	eb000199 	bl	13c644 <syscall>
  13bfdc:	e28dd00c 	add	sp, sp, #12
  13bfe0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  13bfe4:	0014c038 	.word	0x0014c038

0013bfe8 <syscall_send>:
  13bfe8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  13bfec:	e1a06002 	mov	r6, r2
  13bff0:	e1a07003 	mov	r7, r3
  13bff4:	e1a04000 	mov	r4, r0
  13bff8:	e1a05001 	mov	r5, r1
  13bffc:	e24dd00c 	sub	sp, sp, #12
  13c000:	e3a0100d 	mov	r1, #13
  13c004:	e59f0020 	ldr	r0, [pc, #32]	; 13c02c <syscall_send+0x44>
  13c008:	ebfffc8c 	bl	13b240 <syscall_debug>
  13c00c:	e58d7000 	str	r7, [sp]
  13c010:	e1a03006 	mov	r3, r6
  13c014:	e1a02005 	mov	r2, r5
  13c018:	e1a01004 	mov	r1, r4
  13c01c:	e3a00050 	mov	r0, #80	; 0x50
  13c020:	eb000187 	bl	13c644 <syscall>
  13c024:	e28dd00c 	add	sp, sp, #12
  13c028:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  13c02c:	0014c018 	.word	0x0014c018

0013c030 <syscall_rt_sigprocmask>:
  13c030:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  13c034:	e1a06002 	mov	r6, r2
  13c038:	e1a07003 	mov	r7, r3
  13c03c:	e1a04000 	mov	r4, r0
  13c040:	e1a05001 	mov	r5, r1
  13c044:	e24dd00c 	sub	sp, sp, #12
  13c048:	e3a01017 	mov	r1, #23
  13c04c:	e59f0020 	ldr	r0, [pc, #32]	; 13c074 <syscall_rt_sigprocmask+0x44>
  13c050:	ebfffc7a 	bl	13b240 <syscall_debug>
  13c054:	e58d7000 	str	r7, [sp]
  13c058:	e1a03006 	mov	r3, r6
  13c05c:	e1a02005 	mov	r2, r5
  13c060:	e1a01004 	mov	r1, r4
  13c064:	e3a00068 	mov	r0, #104	; 0x68
  13c068:	eb000175 	bl	13c644 <syscall>
  13c06c:	e28dd00c 	add	sp, sp, #12
  13c070:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  13c074:	0014b780 	.word	0x0014b780

0013c078 <syscall_rt_sigaction>:
  13c078:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  13c07c:	e1a06002 	mov	r6, r2
  13c080:	e1a07003 	mov	r7, r3
  13c084:	e1a04000 	mov	r4, r0
  13c088:	e1a05001 	mov	r5, r1
  13c08c:	e24dd00c 	sub	sp, sp, #12
  13c090:	e3a01015 	mov	r1, #21
  13c094:	e59f0020 	ldr	r0, [pc, #32]	; 13c0bc <syscall_rt_sigaction+0x44>
  13c098:	ebfffc68 	bl	13b240 <syscall_debug>
  13c09c:	e58d7000 	str	r7, [sp]
  13c0a0:	e1a03006 	mov	r3, r6
  13c0a4:	e1a02005 	mov	r2, r5
  13c0a8:	e1a01004 	mov	r1, r4
  13c0ac:	e3a00067 	mov	r0, #103	; 0x67
  13c0b0:	eb000163 	bl	13c644 <syscall>
  13c0b4:	e28dd00c 	add	sp, sp, #12
  13c0b8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  13c0bc:	0014b768 	.word	0x0014b768

0013c0c0 <syscall_sigprocmask>:
  13c0c0:	e92d4070 	push	{r4, r5, r6, lr}
  13c0c4:	e1a04000 	mov	r4, r0
  13c0c8:	e24dd008 	sub	sp, sp, #8
  13c0cc:	e1a05001 	mov	r5, r1
  13c0d0:	e59f002c 	ldr	r0, [pc, #44]	; 13c104 <syscall_sigprocmask+0x44>
  13c0d4:	e3a01014 	mov	r1, #20
  13c0d8:	e1a06002 	mov	r6, r2
  13c0dc:	ebfffc57 	bl	13b240 <syscall_debug>
  13c0e0:	e3a00080 	mov	r0, #128	; 0x80
  13c0e4:	e1a03006 	mov	r3, r6
  13c0e8:	e58d0000 	str	r0, [sp]
  13c0ec:	e1a02005 	mov	r2, r5
  13c0f0:	e1a01004 	mov	r1, r4
  13c0f4:	e3a00068 	mov	r0, #104	; 0x68
  13c0f8:	eb000151 	bl	13c644 <syscall>
  13c0fc:	e28dd008 	add	sp, sp, #8
  13c100:	e8bd8070 	pop	{r4, r5, r6, pc}
  13c104:	0014b408 	.word	0x0014b408

0013c108 <syscall_sigaction>:
  13c108:	e92d4070 	push	{r4, r5, r6, lr}
  13c10c:	e1a04000 	mov	r4, r0
  13c110:	e24dd008 	sub	sp, sp, #8
  13c114:	e1a05001 	mov	r5, r1
  13c118:	e59f002c 	ldr	r0, [pc, #44]	; 13c14c <syscall_sigaction+0x44>
  13c11c:	e3a01012 	mov	r1, #18
  13c120:	e1a06002 	mov	r6, r2
  13c124:	ebfffc45 	bl	13b240 <syscall_debug>
  13c128:	e3a00080 	mov	r0, #128	; 0x80
  13c12c:	e1a03006 	mov	r3, r6
  13c130:	e58d0000 	str	r0, [sp]
  13c134:	e1a02005 	mov	r2, r5
  13c138:	e1a01004 	mov	r1, r4
  13c13c:	e3a00067 	mov	r0, #103	; 0x67
  13c140:	eb00013f 	bl	13c644 <syscall>
  13c144:	e28dd008 	add	sp, sp, #8
  13c148:	e8bd8070 	pop	{r4, r5, r6, pc}
  13c14c:	0014b0f0 	.word	0x0014b0f0

0013c150 <syscall_getsockopt>:
  13c150:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  13c154:	e1a06002 	mov	r6, r2
  13c158:	e1a08003 	mov	r8, r3
  13c15c:	e1a04000 	mov	r4, r0
  13c160:	e1a05001 	mov	r5, r1
  13c164:	e24dd008 	sub	sp, sp, #8
  13c168:	e59d7020 	ldr	r7, [sp, #32]
  13c16c:	e3a01013 	mov	r1, #19
  13c170:	e59f0024 	ldr	r0, [pc, #36]	; 13c19c <syscall_getsockopt+0x4c>
  13c174:	ebfffc31 	bl	13b240 <syscall_debug>
  13c178:	e58d8000 	str	r8, [sp]
  13c17c:	e58d7004 	str	r7, [sp, #4]
  13c180:	e1a03006 	mov	r3, r6
  13c184:	e1a02005 	mov	r2, r5
  13c188:	e1a01004 	mov	r1, r4
  13c18c:	e3a0004a 	mov	r0, #74	; 0x4a
  13c190:	eb00012b 	bl	13c644 <syscall>
  13c194:	e28dd008 	add	sp, sp, #8
  13c198:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13c19c:	0014c084 	.word	0x0014c084

0013c1a0 <syscall_setsockopt>:
  13c1a0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  13c1a4:	e1a06002 	mov	r6, r2
  13c1a8:	e1a08003 	mov	r8, r3
  13c1ac:	e1a04000 	mov	r4, r0
  13c1b0:	e1a05001 	mov	r5, r1
  13c1b4:	e24dd008 	sub	sp, sp, #8
  13c1b8:	e59d7020 	ldr	r7, [sp, #32]
  13c1bc:	e3a01013 	mov	r1, #19
  13c1c0:	e59f0024 	ldr	r0, [pc, #36]	; 13c1ec <syscall_setsockopt+0x4c>
  13c1c4:	ebfffc1d 	bl	13b240 <syscall_debug>
  13c1c8:	e58d8000 	str	r8, [sp]
  13c1cc:	e58d7004 	str	r7, [sp, #4]
  13c1d0:	e1a03006 	mov	r3, r6
  13c1d4:	e1a02005 	mov	r2, r5
  13c1d8:	e1a01004 	mov	r1, r4
  13c1dc:	e3a0004b 	mov	r0, #75	; 0x4b
  13c1e0:	eb000117 	bl	13c644 <syscall>
  13c1e4:	e28dd008 	add	sp, sp, #8
  13c1e8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13c1ec:	0014c070 	.word	0x0014c070

0013c1f0 <syscall_mremap>:
  13c1f0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  13c1f4:	e1a06002 	mov	r6, r2
  13c1f8:	e1a08003 	mov	r8, r3
  13c1fc:	e1a04000 	mov	r4, r0
  13c200:	e1a05001 	mov	r5, r1
  13c204:	e24dd008 	sub	sp, sp, #8
  13c208:	e59d7020 	ldr	r7, [sp, #32]
  13c20c:	e3a0100f 	mov	r1, #15
  13c210:	e59f0024 	ldr	r0, [pc, #36]	; 13c23c <syscall_mremap+0x4c>
  13c214:	ebfffc09 	bl	13b240 <syscall_debug>
  13c218:	e58d8000 	str	r8, [sp]
  13c21c:	e58d7004 	str	r7, [sp, #4]
  13c220:	e1a03006 	mov	r3, r6
  13c224:	e1a02005 	mov	r2, r5
  13c228:	e1a01004 	mov	r1, r4
  13c22c:	e3a00092 	mov	r0, #146	; 0x92
  13c230:	eb000103 	bl	13c644 <syscall>
  13c234:	e28dd008 	add	sp, sp, #8
  13c238:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13c23c:	0014b6bc 	.word	0x0014b6bc

0013c240 <syscall__newselect>:
  13c240:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  13c244:	e1a06002 	mov	r6, r2
  13c248:	e1a08003 	mov	r8, r3
  13c24c:	e1a04000 	mov	r4, r0
  13c250:	e1a05001 	mov	r5, r1
  13c254:	e24dd008 	sub	sp, sp, #8
  13c258:	e59d7020 	ldr	r7, [sp, #32]
  13c25c:	e3a01013 	mov	r1, #19
  13c260:	e59f0024 	ldr	r0, [pc, #36]	; 13c28c <syscall__newselect+0x4c>
  13c264:	ebfffbf5 	bl	13b240 <syscall_debug>
  13c268:	e58d8000 	str	r8, [sp]
  13c26c:	e58d7004 	str	r7, [sp, #4]
  13c270:	e1a03006 	mov	r3, r6
  13c274:	e1a02005 	mov	r2, r5
  13c278:	e1a01004 	mov	r1, r4
  13c27c:	e3a0005e 	mov	r0, #94	; 0x5e
  13c280:	eb0000ef 	bl	13c644 <syscall>
  13c284:	e28dd008 	add	sp, sp, #8
  13c288:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13c28c:	0014b4fc 	.word	0x0014b4fc

0013c290 <syscall__llseek>:
  13c290:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  13c294:	e1a06002 	mov	r6, r2
  13c298:	e1a05000 	mov	r5, r0
  13c29c:	e1a08001 	mov	r8, r1
  13c2a0:	e24dd008 	sub	sp, sp, #8
  13c2a4:	e59d7020 	ldr	r7, [sp, #32]
  13c2a8:	e3a01010 	mov	r1, #16
  13c2ac:	e59f0034 	ldr	r0, [pc, #52]	; 13c2e8 <syscall__llseek+0x58>
  13c2b0:	e1a04003 	mov	r4, r3
  13c2b4:	ebfffbe1 	bl	13b240 <syscall_debug>
  13c2b8:	e1a01005 	mov	r1, r5
  13c2bc:	e58d8000 	str	r8, [sp]
  13c2c0:	e58d7004 	str	r7, [sp, #4]
  13c2c4:	e1a03006 	mov	r3, r6
  13c2c8:	e3a02000 	mov	r2, #0
  13c2cc:	e3a00004 	mov	r0, #4
  13c2d0:	eb0000db 	bl	13c644 <syscall>
  13c2d4:	e1a01fc0 	asr	r1, r0, #31
  13c2d8:	e8840003 	stm	r4, {r0, r1}
  13c2dc:	e1a00fc1 	asr	r0, r1, #31
  13c2e0:	e28dd008 	add	sp, sp, #8
  13c2e4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13c2e8:	0014b4d8 	.word	0x0014b4d8

0013c2ec <syscall_recvfrom>:
  13c2ec:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
  13c2f0:	e1a06002 	mov	r6, r2
  13c2f4:	e1a09003 	mov	r9, r3
  13c2f8:	e1a04000 	mov	r4, r0
  13c2fc:	e1a05001 	mov	r5, r1
  13c300:	e24dd014 	sub	sp, sp, #20
  13c304:	e59d7030 	ldr	r7, [sp, #48]	; 0x30
  13c308:	e59d8034 	ldr	r8, [sp, #52]	; 0x34
  13c30c:	e3a01011 	mov	r1, #17
  13c310:	e59f0024 	ldr	r0, [pc, #36]	; 13c33c <syscall_recvfrom+0x50>
  13c314:	ebfffbc9 	bl	13b240 <syscall_debug>
  13c318:	e58d9000 	str	r9, [sp]
  13c31c:	e98d0180 	stmib	sp, {r7, r8}
  13c320:	e1a03006 	mov	r3, r6
  13c324:	e1a02005 	mov	r2, r5
  13c328:	e1a01004 	mov	r1, r4
  13c32c:	e3a0004f 	mov	r0, #79	; 0x4f
  13c330:	eb0000c3 	bl	13c644 <syscall>
  13c334:	e28dd014 	add	sp, sp, #20
  13c338:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  13c33c:	0014c048 	.word	0x0014c048

0013c340 <syscall_sendto>:
  13c340:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
  13c344:	e1a06002 	mov	r6, r2
  13c348:	e1a09003 	mov	r9, r3
  13c34c:	e1a04000 	mov	r4, r0
  13c350:	e1a05001 	mov	r5, r1
  13c354:	e24dd014 	sub	sp, sp, #20
  13c358:	e59d7030 	ldr	r7, [sp, #48]	; 0x30
  13c35c:	e59d8034 	ldr	r8, [sp, #52]	; 0x34
  13c360:	e3a0100f 	mov	r1, #15
  13c364:	e59f0024 	ldr	r0, [pc, #36]	; 13c390 <syscall_sendto+0x50>
  13c368:	ebfffbb4 	bl	13b240 <syscall_debug>
  13c36c:	e58d9000 	str	r9, [sp]
  13c370:	e98d0180 	stmib	sp, {r7, r8}
  13c374:	e1a03006 	mov	r3, r6
  13c378:	e1a02005 	mov	r2, r5
  13c37c:	e1a01004 	mov	r1, r4
  13c380:	e3a00051 	mov	r0, #81	; 0x51
  13c384:	eb0000ae 	bl	13c644 <syscall>
  13c388:	e28dd014 	add	sp, sp, #20
  13c38c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  13c390:	0014c028 	.word	0x0014c028

0013c394 <syscall_futex>:
  13c394:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
  13c398:	e1a06002 	mov	r6, r2
  13c39c:	e1a09003 	mov	r9, r3
  13c3a0:	e1a04000 	mov	r4, r0
  13c3a4:	e1a05001 	mov	r5, r1
  13c3a8:	e24dd014 	sub	sp, sp, #20
  13c3ac:	e59d7030 	ldr	r7, [sp, #48]	; 0x30
  13c3b0:	e59d8034 	ldr	r8, [sp, #52]	; 0x34
  13c3b4:	e3a0100e 	mov	r1, #14
  13c3b8:	e59f0024 	ldr	r0, [pc, #36]	; 13c3e4 <syscall_futex+0x50>
  13c3bc:	ebfffb9f 	bl	13b240 <syscall_debug>
  13c3c0:	e58d9000 	str	r9, [sp]
  13c3c4:	e98d0180 	stmib	sp, {r7, r8}
  13c3c8:	e1a03006 	mov	r3, r6
  13c3cc:	e1a02005 	mov	r2, r5
  13c3d0:	e1a01004 	mov	r1, r4
  13c3d4:	e3a00083 	mov	r0, #131	; 0x83
  13c3d8:	eb000099 	bl	13c644 <syscall>
  13c3dc:	e28dd014 	add	sp, sp, #20
  13c3e0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  13c3e4:	0014bc20 	.word	0x0014bc20

0013c3e8 <syscall_mmap2>:
  13c3e8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  13c3ec:	e1a06002 	mov	r6, r2
  13c3f0:	e1a09003 	mov	r9, r3
  13c3f4:	e1a04000 	mov	r4, r0
  13c3f8:	e1a05001 	mov	r5, r1
  13c3fc:	e59d7020 	ldr	r7, [sp, #32]
  13c400:	e59d8028 	ldr	r8, [sp, #40]	; 0x28
  13c404:	e3a0100e 	mov	r1, #14
  13c408:	e59f0024 	ldr	r0, [pc, #36]	; 13c434 <syscall_mmap2+0x4c>
  13c40c:	ebfffb8b 	bl	13b240 <syscall_debug>
  13c410:	e58d9020 	str	r9, [sp, #32]
  13c414:	e58d8028 	str	r8, [sp, #40]	; 0x28
  13c418:	e58d7024 	str	r7, [sp, #36]	; 0x24
  13c41c:	e1a03006 	mov	r3, r6
  13c420:	e1a02005 	mov	r2, r5
  13c424:	e1a01004 	mov	r1, r4
  13c428:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
  13c42c:	e3a00035 	mov	r0, #53	; 0x35
  13c430:	ea000083 	b	13c644 <syscall>
  13c434:	0014b8a8 	.word	0x0014b8a8

0013c438 <syscall_gettid>:
  13c438:	e92d4010 	push	{r4, lr}
  13c43c:	e59f0010 	ldr	r0, [pc, #16]	; 13c454 <syscall_gettid+0x1c>
  13c440:	e3a0100f 	mov	r1, #15
  13c444:	ebfffb7d 	bl	13b240 <syscall_debug>
  13c448:	e8bd4010 	pop	{r4, lr}
  13c44c:	e3a0008b 	mov	r0, #139	; 0x8b
  13c450:	ea00007b 	b	13c644 <syscall>
  13c454:	0014bae0 	.word	0x0014bae0

0013c458 <syscall_vfork>:
  13c458:	e92d4010 	push	{r4, lr}
  13c45c:	e59f0010 	ldr	r0, [pc, #16]	; 13c474 <syscall_vfork+0x1c>
  13c460:	e3a0100e 	mov	r1, #14
  13c464:	ebfffb75 	bl	13b240 <syscall_debug>
  13c468:	e8bd4010 	pop	{r4, lr}
  13c46c:	e3a0008a 	mov	r0, #138	; 0x8a
  13c470:	ea000073 	b	13c644 <syscall>
  13c474:	0014b884 	.word	0x0014b884

0013c478 <syscall_setsid>:
  13c478:	e92d4010 	push	{r4, lr}
  13c47c:	e59f0010 	ldr	r0, [pc, #16]	; 13c494 <syscall_setsid+0x1c>
  13c480:	e3a0100f 	mov	r1, #15
  13c484:	ebfffb6d 	bl	13b240 <syscall_debug>
  13c488:	e8bd4010 	pop	{r4, lr}
  13c48c:	e3a0008f 	mov	r0, #143	; 0x8f
  13c490:	ea00006b 	b	13c644 <syscall>
  13c494:	0014b0e0 	.word	0x0014b0e0

0013c498 <syscall_getpid>:
  13c498:	e92d4010 	push	{r4, lr}
  13c49c:	e59f0010 	ldr	r0, [pc, #16]	; 13c4b4 <syscall_getpid+0x1c>
  13c4a0:	e3a0100f 	mov	r1, #15
  13c4a4:	ebfffb65 	bl	13b240 <syscall_debug>
  13c4a8:	e8bd4010 	pop	{r4, lr}
  13c4ac:	e3a0000f 	mov	r0, #15
  13c4b0:	ea000063 	b	13c644 <syscall>
  13c4b4:	0014aee8 	.word	0x0014aee8

0013c4b8 <syscall_fork>:
  13c4b8:	e92d4010 	push	{r4, lr}
  13c4bc:	e59f0010 	ldr	r0, [pc, #16]	; 13c4d4 <syscall_fork+0x1c>
  13c4c0:	e3a0100d 	mov	r1, #13
  13c4c4:	ebfffb5d 	bl	13b240 <syscall_debug>
  13c4c8:	e8bd4010 	pop	{r4, lr}
  13c4cc:	e3a00088 	mov	r0, #136	; 0x88
  13c4d0:	ea00005b 	b	13c644 <syscall>
  13c4d4:	0014ae08 	.word	0x0014ae08

0013c4d8 <syscall_ioctl>:
  13c4d8:	e92d4070 	push	{r4, r5, r6, lr}
  13c4dc:	e1a04000 	mov	r4, r0
  13c4e0:	e1a05001 	mov	r5, r1
  13c4e4:	e59f0030 	ldr	r0, [pc, #48]	; 13c51c <syscall_ioctl+0x44>
  13c4e8:	e3a0100e 	mov	r1, #14
  13c4ec:	e1a06002 	mov	r6, r2
  13c4f0:	ebfffb52 	bl	13b240 <syscall_debug>
  13c4f4:	e3540001 	cmp	r4, #1
  13c4f8:	0a000005 	beq	13c514 <syscall_ioctl+0x3c>
  13c4fc:	e1a03006 	mov	r3, r6
  13c500:	e1a02005 	mov	r2, r5
  13c504:	e1a01004 	mov	r1, r4
  13c508:	e8bd4070 	pop	{r4, r5, r6, lr}
  13c50c:	e3a00007 	mov	r0, #7
  13c510:	ea00004b 	b	13c644 <syscall>
  13c514:	e3a00000 	mov	r0, #0
  13c518:	e8bd8070 	pop	{r4, r5, r6, pc}
  13c51c:	0014b050 	.word	0x0014b050

0013c520 <syscall_lseek>:
  13c520:	e92d4070 	push	{r4, r5, r6, lr}
  13c524:	e1a04001 	mov	r4, r1
  13c528:	e24dd008 	sub	sp, sp, #8
  13c52c:	e1a05000 	mov	r5, r0
  13c530:	e3a0100e 	mov	r1, #14
  13c534:	e59f0058 	ldr	r0, [pc, #88]	; 13c594 <syscall_lseek+0x74>
  13c538:	e1a06002 	mov	r6, r2
  13c53c:	ebfffb3f 	bl	13b240 <syscall_debug>
  13c540:	e3540000 	cmp	r4, #0
  13c544:	ba000008 	blt	13c56c <syscall_lseek+0x4c>
  13c548:	e3a02000 	mov	r2, #0
  13c54c:	e58d6004 	str	r6, [sp, #4]
  13c550:	e1a03004 	mov	r3, r4
  13c554:	e1a01005 	mov	r1, r5
  13c558:	e58d2000 	str	r2, [sp]
  13c55c:	e3a00004 	mov	r0, #4
  13c560:	eb000037 	bl	13c644 <syscall>
  13c564:	e28dd008 	add	sp, sp, #8
  13c568:	e8bd8070 	pop	{r4, r5, r6, pc}
  13c56c:	e3e02000 	mvn	r2, #0
  13c570:	e58d6004 	str	r6, [sp, #4]
  13c574:	e58d2000 	str	r2, [sp]
  13c578:	e1a03004 	mov	r3, r4
  13c57c:	e1a01005 	mov	r1, r5
  13c580:	e3a02000 	mov	r2, #0
  13c584:	e3a00004 	mov	r0, #4
  13c588:	eb00002d 	bl	13c644 <syscall>
  13c58c:	e28dd008 	add	sp, sp, #8
  13c590:	e8bd8070 	pop	{r4, r5, r6, pc}
  13c594:	0014aed8 	.word	0x0014aed8

0013c598 <get_rtt_syscall>:
  13c598:	e3500e19 	cmp	r0, #400	; 0x190
  13c59c:	3a000005 	bcc	13c5b8 <get_rtt_syscall+0x20>
  13c5a0:	e59f201c 	ldr	r2, [pc, #28]	; 13c5c4 <get_rtt_syscall+0x2c>
  13c5a4:	e59f301c 	ldr	r3, [pc, #28]	; 13c5c8 <get_rtt_syscall+0x30>
  13c5a8:	e1500002 	cmp	r0, r2
  13c5ac:	01a00003 	moveq	r0, r3
  13c5b0:	13a00000 	movne	r0, #0
  13c5b4:	e12fff1e 	bx	lr
  13c5b8:	e59f300c 	ldr	r3, [pc, #12]	; 13c5cc <get_rtt_syscall+0x34>
  13c5bc:	e7930100 	ldr	r0, [r3, r0, lsl #2]
  13c5c0:	e12fff1e 	bx	lr
  13c5c4:	000f0005 	.word	0x000f0005
  13c5c8:	00139478 	.word	0x00139478
  13c5cc:	0014c8c0 	.word	0x0014c8c0

0013c5d0 <___syscall>:
  13c5d0:	e92d4070 	push	{r4, r5, r6, lr}
  13c5d4:	e1a0c001 	mov	ip, r1
  13c5d8:	e3500e19 	cmp	r0, #400	; 0x190
  13c5dc:	e1a01002 	mov	r1, r2
  13c5e0:	e1a02003 	mov	r2, r3
  13c5e4:	e28d3010 	add	r3, sp, #16
  13c5e8:	e8930078 	ldm	r3, {r3, r4, r5, r6}
  13c5ec:	2a00000a 	bcs	13c61c <___syscall+0x4c>
  13c5f0:	e59fe03c 	ldr	lr, [pc, #60]	; 13c634 <___syscall+0x64>
  13c5f4:	e79ee100 	ldr	lr, [lr, r0, lsl #2]
  13c5f8:	e35e0000 	cmp	lr, #0
  13c5fc:	0a00000a 	beq	13c62c <___syscall+0x5c>
  13c600:	e58d6018 	str	r6, [sp, #24]
  13c604:	e58d5014 	str	r5, [sp, #20]
  13c608:	e58d4010 	str	r4, [sp, #16]
  13c60c:	e1a0000c 	mov	r0, ip
  13c610:	e1a0c00e 	mov	ip, lr
  13c614:	e8bd4070 	pop	{r4, r5, r6, lr}
  13c618:	e12fff1c 	bx	ip
  13c61c:	e59fe014 	ldr	lr, [pc, #20]	; 13c638 <___syscall+0x68>
  13c620:	e150000e 	cmp	r0, lr
  13c624:	059fe010 	ldreq	lr, [pc, #16]	; 13c63c <___syscall+0x6c>
  13c628:	0afffff4 	beq	13c600 <___syscall+0x30>
  13c62c:	e3a00000 	mov	r0, #0
  13c630:	e8bd8070 	pop	{r4, r5, r6, pc}
  13c634:	0014c8c0 	.word	0x0014c8c0
  13c638:	000f0005 	.word	0x000f0005
  13c63c:	00139478 	.word	0x00139478

0013c640 <__syscall>:
  13c640:	eaffffe2 	b	13c5d0 <___syscall>

0013c644 <syscall>:
  13c644:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  13c648:	e1a07000 	mov	r7, r0
  13c64c:	e1a00001 	mov	r0, r1
  13c650:	e1a01002 	mov	r1, r2
  13c654:	e1a02003 	mov	r2, r3
  13c658:	e28d6014 	add	r6, sp, #20
  13c65c:	e8960038 	ldm	r6, {r3, r4, r5}
  13c660:	ef000000 	svc	0x00000000
  13c664:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
  13c668:	e12fff1e 	bx	lr

0013c66c <__syscall_ret>:
  13c66c:	e3700a01 	cmn	r0, #4096	; 0x1000
  13c670:	912fff1e 	bxls	lr
  13c674:	e92d4010 	push	{r4, lr}
  13c678:	e1a04000 	mov	r4, r0
  13c67c:	ebfff28f 	bl	1390c0 <__errno_location>
  13c680:	e2644000 	rsb	r4, r4, #0
  13c684:	e5804000 	str	r4, [r0]
  13c688:	e3e00000 	mvn	r0, #0
  13c68c:	e8bd8010 	pop	{r4, pc}

0013c690 <__lctrans_impl>:
  13c690:	e12fff1e 	bx	lr

0013c694 <__lctrans>:
  13c694:	eafffffd 	b	13c690 <__lctrans_impl>

0013c698 <__lctrans_cur>:
  13c698:	e1a02000 	mov	r2, r0
  13c69c:	e59f301c 	ldr	r3, [pc, #28]	; 13c6c0 <__lctrans_cur+0x28>
  13c6a0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  13c6a4:	e5930000 	ldr	r0, [r3]
  13c6a8:	e12fff30 	blx	r0
  13c6ac:	e5103018 	ldr	r3, [r0, #-24]	; 0xffffffe8
  13c6b0:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  13c6b4:	e1a00002 	mov	r0, r2
  13c6b8:	e5931014 	ldr	r1, [r3, #20]
  13c6bc:	eafffff3 	b	13c690 <__lctrans_impl>
  13c6c0:	0014e3dc 	.word	0x0014e3dc

0013c6c4 <__simple_malloc>:
  13c6c4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  13c6c8:	e2505000 	subs	r5, r0, #0
  13c6cc:	e24dd008 	sub	sp, sp, #8
  13c6d0:	0a000016 	beq	13c730 <__simple_malloc+0x6c>
  13c6d4:	e3550001 	cmp	r5, #1
  13c6d8:	9a000037 	bls	13c7bc <__simple_malloc+0xf8>
  13c6dc:	e3a03001 	mov	r3, #1
  13c6e0:	e1a03083 	lsl	r3, r3, #1
  13c6e4:	e1550003 	cmp	r5, r3
  13c6e8:	83a02001 	movhi	r2, #1
  13c6ec:	93a02000 	movls	r2, #0
  13c6f0:	e353000f 	cmp	r3, #15
  13c6f4:	83a02000 	movhi	r2, #0
  13c6f8:	e3520000 	cmp	r2, #0
  13c6fc:	1afffff7 	bne	13c6e0 <__simple_malloc+0x1c>
  13c700:	e2434001 	sub	r4, r3, #1
  13c704:	e59f60c8 	ldr	r6, [pc, #200]	; 13c7d4 <__simple_malloc+0x110>
  13c708:	e59f00c8 	ldr	r0, [pc, #200]	; 13c7d8 <__simple_malloc+0x114>
  13c70c:	eb001587 	bl	141d30 <__lock>
  13c710:	e5962000 	ldr	r2, [r6]
  13c714:	e355013e 	cmp	r5, #-2147483633	; 0x8000000f
  13c718:	e2623000 	rsb	r3, r2, #0
  13c71c:	e0044003 	and	r4, r4, r3
  13c720:	8a000009 	bhi	13c74c <__simple_malloc+0x88>
  13c724:	e0853004 	add	r3, r5, r4
  13c728:	e1a05004 	mov	r5, r4
  13c72c:	ea000004 	b	13c744 <__simple_malloc+0x80>
  13c730:	e59f00a0 	ldr	r0, [pc, #160]	; 13c7d8 <__simple_malloc+0x114>
  13c734:	eb00157d 	bl	141d30 <__lock>
  13c738:	e3a03001 	mov	r3, #1
  13c73c:	e59f6090 	ldr	r6, [pc, #144]	; 13c7d4 <__simple_malloc+0x110>
  13c740:	e5962000 	ldr	r2, [r6]
  13c744:	e1a04005 	mov	r4, r5
  13c748:	e1a05003 	mov	r5, r3
  13c74c:	e59f8088 	ldr	r8, [pc, #136]	; 13c7dc <__simple_malloc+0x118>
  13c750:	e5981000 	ldr	r1, [r8]
  13c754:	e0411002 	sub	r1, r1, r2
  13c758:	e1510005 	cmp	r1, r5
  13c75c:	20827004 	addcs	r7, r2, r4
  13c760:	2a00000e 	bcs	13c7a0 <__simple_malloc+0xdc>
  13c764:	e28d0008 	add	r0, sp, #8
  13c768:	e5205004 	str	r5, [r0, #-4]!
  13c76c:	eb001b2e 	bl	14342c <__expand_heap>
  13c770:	e2503000 	subs	r3, r0, #0
  13c774:	0a000012 	beq	13c7c4 <__simple_malloc+0x100>
  13c778:	e5982000 	ldr	r2, [r8]
  13c77c:	e59d1004 	ldr	r1, [sp, #4]
  13c780:	e1520003 	cmp	r2, r3
  13c784:	05962000 	ldreq	r2, [r6]
  13c788:	11a07003 	movne	r7, r3
  13c78c:	11a02003 	movne	r2, r3
  13c790:	e0833001 	add	r3, r3, r1
  13c794:	00827004 	addeq	r7, r2, r4
  13c798:	10455004 	subne	r5, r5, r4
  13c79c:	e5883000 	str	r3, [r8]
  13c7a0:	e0825005 	add	r5, r2, r5
  13c7a4:	e59f002c 	ldr	r0, [pc, #44]	; 13c7d8 <__simple_malloc+0x114>
  13c7a8:	e5865000 	str	r5, [r6]
  13c7ac:	eb0015b7 	bl	141e90 <__unlock>
  13c7b0:	e1a00007 	mov	r0, r7
  13c7b4:	e28dd008 	add	sp, sp, #8
  13c7b8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  13c7bc:	e3a04000 	mov	r4, #0
  13c7c0:	eaffffcf 	b	13c704 <__simple_malloc+0x40>
  13c7c4:	e59f000c 	ldr	r0, [pc, #12]	; 13c7d8 <__simple_malloc+0x114>
  13c7c8:	e1a07003 	mov	r7, r3
  13c7cc:	eb0015af 	bl	141e90 <__unlock>
  13c7d0:	eafffff6 	b	13c7b0 <__simple_malloc+0xec>
  13c7d4:	0014fc18 	.word	0x0014fc18
  13c7d8:	0014fc20 	.word	0x0014fc20
  13c7dc:	0014fc1c 	.word	0x0014fc1c

0013c7e0 <__simple_calloc>:
  13c7e0:	e3510000 	cmp	r1, #0
  13c7e4:	e1a0c000 	mov	ip, r0
  13c7e8:	0a000002 	beq	13c7f8 <__simple_calloc+0x18>
  13c7ec:	e0832190 	umull	r2, r3, r0, r1
  13c7f0:	e3530000 	cmp	r3, #0
  13c7f4:	1a000001 	bne	13c800 <__simple_calloc+0x20>
  13c7f8:	e0000c91 	mul	r0, r1, ip
  13c7fc:	eaffffb0 	b	13c6c4 <__simple_malloc>
  13c800:	e92d4010 	push	{r4, lr}
  13c804:	ebfff22d 	bl	1390c0 <__errno_location>
  13c808:	e3a0300c 	mov	r3, #12
  13c80c:	e5803000 	str	r3, [r0]
  13c810:	e3a00000 	mov	r0, #0
  13c814:	e8bd8010 	pop	{r4, pc}

0013c818 <adjust_size>:
  13c818:	e5903000 	ldr	r3, [r0]
  13c81c:	e59f2058 	ldr	r2, [pc, #88]	; 13c87c <adjust_size+0x64>
  13c820:	e2431001 	sub	r1, r3, #1
  13c824:	e1510002 	cmp	r1, r2
  13c828:	9a000006 	bls	13c848 <adjust_size+0x30>
  13c82c:	e3530000 	cmp	r3, #0
  13c830:	03a01010 	moveq	r1, #16
  13c834:	01a02003 	moveq	r2, r3
  13c838:	05801000 	streq	r1, [r0]
  13c83c:	1a000007 	bne	13c860 <adjust_size+0x48>
  13c840:	e1a00002 	mov	r0, r2
  13c844:	e12fff1e 	bx	lr
  13c848:	e3a02000 	mov	r2, #0
  13c84c:	e2833017 	add	r3, r3, #23
  13c850:	e3c3300f 	bic	r3, r3, #15
  13c854:	e5803000 	str	r3, [r0]
  13c858:	e1a00002 	mov	r0, r2
  13c85c:	e12fff1e 	bx	lr
  13c860:	e92d4010 	push	{r4, lr}
  13c864:	ebfff215 	bl	1390c0 <__errno_location>
  13c868:	e3a0300c 	mov	r3, #12
  13c86c:	e3e02000 	mvn	r2, #0
  13c870:	e5803000 	str	r3, [r0]
  13c874:	e1a00002 	mov	r0, r2
  13c878:	e8bd8010 	pop	{r4, pc}
  13c87c:	7fffefef 	.word	0x7fffefef

0013c880 <unbin>:
  13c880:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  13c884:	e590200c 	ldr	r2, [r0, #12]
  13c888:	e1a07000 	mov	r7, r0
  13c88c:	e5900008 	ldr	r0, [r0, #8]
  13c890:	e24dd00c 	sub	sp, sp, #12
  13c894:	e1520000 	cmp	r2, r0
  13c898:	0a00000b 	beq	13c8cc <unbin+0x4c>
  13c89c:	e5973004 	ldr	r3, [r7, #4]
  13c8a0:	e5820008 	str	r0, [r2, #8]
  13c8a4:	e3c30001 	bic	r0, r3, #1
  13c8a8:	e7971000 	ldr	r1, [r7, r0]
  13c8ac:	e597c008 	ldr	ip, [r7, #8]
  13c8b0:	e3833001 	orr	r3, r3, #1
  13c8b4:	e3811001 	orr	r1, r1, #1
  13c8b8:	e58c200c 	str	r2, [ip, #12]
  13c8bc:	e5873004 	str	r3, [r7, #4]
  13c8c0:	e7871000 	str	r1, [r7, r0]
  13c8c4:	e28dd00c 	add	sp, sp, #12
  13c8c8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13c8cc:	e3a00001 	mov	r0, #1
  13c8d0:	e241c020 	sub	ip, r1, #32
  13c8d4:	e1a0a110 	lsl	sl, r0, r1
  13c8d8:	e1a0bc10 	lsl	fp, r0, ip
  13c8dc:	e261c020 	rsb	ip, r1, #32
  13c8e0:	e1e0100a 	mvn	r1, sl
  13c8e4:	e18bbc30 	orr	fp, fp, r0, lsr ip
  13c8e8:	e3710001 	cmn	r1, #1
  13c8ec:	e1e0200b 	mvn	r2, fp
  13c8f0:	0a000014 	beq	13c948 <unbin+0xc8>
  13c8f4:	e59f40a4 	ldr	r4, [pc, #164]	; 13c9a0 <unbin+0x120>
  13c8f8:	e1a0b007 	mov	fp, r7
  13c8fc:	e1a09004 	mov	r9, r4
  13c900:	e1a07001 	mov	r7, r1
  13c904:	e88d0006 	stm	sp, {r1, r2}
  13c908:	e59f6094 	ldr	r6, [pc, #148]	; 13c9a4 <unbin+0x124>
  13c90c:	e5945000 	ldr	r5, [r4]
  13c910:	e0078005 	and	r8, r7, r5
  13c914:	ea000002 	b	13c924 <unbin+0xa4>
  13c918:	e5943000 	ldr	r3, [r4]
  13c91c:	e1550003 	cmp	r5, r3
  13c920:	1afffff9 	bne	13c90c <unbin+0x8c>
  13c924:	e1a00005 	mov	r0, r5
  13c928:	e1a01008 	mov	r1, r8
  13c92c:	e1a02009 	mov	r2, r9
  13c930:	e5963000 	ldr	r3, [r6]
  13c934:	e12fff33 	blx	r3
  13c938:	e3500000 	cmp	r0, #0
  13c93c:	1afffff5 	bne	13c918 <unbin+0x98>
  13c940:	e1a0700b 	mov	r7, fp
  13c944:	e89d0006 	ldm	sp, {r1, r2}
  13c948:	e3720001 	cmn	r2, #1
  13c94c:	0a000010 	beq	13c994 <unbin+0x114>
  13c950:	e1a0a002 	mov	sl, r2
  13c954:	e59f4044 	ldr	r4, [pc, #68]	; 13c9a0 <unbin+0x120>
  13c958:	e59f6044 	ldr	r6, [pc, #68]	; 13c9a4 <unbin+0x124>
  13c95c:	e2849004 	add	r9, r4, #4
  13c960:	e5945004 	ldr	r5, [r4, #4]
  13c964:	e00a8005 	and	r8, sl, r5
  13c968:	ea000002 	b	13c978 <unbin+0xf8>
  13c96c:	e5943004 	ldr	r3, [r4, #4]
  13c970:	e1550003 	cmp	r5, r3
  13c974:	1afffff9 	bne	13c960 <unbin+0xe0>
  13c978:	e1a00005 	mov	r0, r5
  13c97c:	e1a01008 	mov	r1, r8
  13c980:	e1a02009 	mov	r2, r9
  13c984:	e5963000 	ldr	r3, [r6]
  13c988:	e12fff33 	blx	r3
  13c98c:	e3500000 	cmp	r0, #0
  13c990:	1afffff5 	bne	13c96c <unbin+0xec>
  13c994:	e597200c 	ldr	r2, [r7, #12]
  13c998:	e5970008 	ldr	r0, [r7, #8]
  13c99c:	eaffffbe 	b	13c89c <unbin+0x1c>
  13c9a0:	0014fc30 	.word	0x0014fc30
  13c9a4:	0014e3d8 	.word	0x0014e3d8

0013c9a8 <alloc_fwd>:
  13c9a8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  13c9ac:	e59f925c 	ldr	r9, [pc, #604]	; 13cc10 <alloc_fwd+0x268>
  13c9b0:	e24dd00c 	sub	sp, sp, #12
  13c9b4:	e58d0004 	str	r0, [sp, #4]
  13c9b8:	e59f6254 	ldr	r6, [pc, #596]	; 13cc14 <alloc_fwd+0x26c>
  13c9bc:	e59d3004 	ldr	r3, [sp, #4]
  13c9c0:	e5938004 	ldr	r8, [r3, #4]
  13c9c4:	e3180001 	tst	r8, #1
  13c9c8:	1a000055 	bne	13cb24 <alloc_fwd+0x17c>
  13c9cc:	e1a07228 	lsr	r7, r8, #4
  13c9d0:	e2477001 	sub	r7, r7, #1
  13c9d4:	e3570020 	cmp	r7, #32
  13c9d8:	9a000005 	bls	13c9f4 <alloc_fwd+0x4c>
  13c9dc:	e59f3234 	ldr	r3, [pc, #564]	; 13cc18 <alloc_fwd+0x270>
  13c9e0:	e1570003 	cmp	r7, r3
  13c9e4:	8a000058 	bhi	13cb4c <alloc_fwd+0x1a4>
  13c9e8:	e59f322c 	ldr	r3, [pc, #556]	; 13cc1c <alloc_fwd+0x274>
  13c9ec:	e08371a7 	add	r7, r3, r7, lsr #3
  13c9f0:	e5577004 	ldrb	r7, [r7, #-4]
  13c9f4:	e1a0b007 	mov	fp, r7
  13c9f8:	e1a04207 	lsl	r4, r7, #4
  13c9fc:	e2844008 	add	r4, r4, #8
  13ca00:	e59f3218 	ldr	r3, [pc, #536]	; 13cc20 <alloc_fwd+0x278>
  13ca04:	e0894004 	add	r4, r9, r4
  13ca08:	e593300c 	ldr	r3, [r3, #12]
  13ca0c:	e3530000 	cmp	r3, #0
  13ca10:	1284a004 	addne	sl, r4, #4
  13ca14:	1a000032 	bne	13cae4 <alloc_fwd+0x13c>
  13ca18:	e28b3001 	add	r3, fp, #1
  13ca1c:	e7992203 	ldr	r2, [r9, r3, lsl #4]
  13ca20:	e3520000 	cmp	r2, #0
  13ca24:	1a000053 	bne	13cb78 <alloc_fwd+0x1d0>
  13ca28:	e1a02008 	mov	r2, r8
  13ca2c:	e0891207 	add	r1, r9, r7, lsl #4
  13ca30:	e2811008 	add	r1, r1, #8
  13ca34:	e0890203 	add	r0, r9, r3, lsl #4
  13ca38:	e7891203 	str	r1, [r9, r3, lsl #4]
  13ca3c:	e5801004 	str	r1, [r0, #4]
  13ca40:	e1580002 	cmp	r8, r2
  13ca44:	0a00004b 	beq	13cb78 <alloc_fwd+0x1d0>
  13ca48:	e5943000 	ldr	r3, [r4]
  13ca4c:	e3530000 	cmp	r3, #0
  13ca50:	0a000030 	beq	13cb18 <alloc_fwd+0x170>
  13ca54:	e59f31c8 	ldr	r3, [pc, #456]	; 13cc24 <alloc_fwd+0x27c>
  13ca58:	e593c000 	ldr	ip, [r3]
  13ca5c:	e12fff3c 	blx	ip
  13ca60:	e3a02000 	mov	r2, #0
  13ca64:	e593c000 	ldr	ip, [r3]
  13ca68:	e5842000 	str	r2, [r4]
  13ca6c:	e12fff3c 	blx	ip
  13ca70:	e5943004 	ldr	r3, [r4, #4]
  13ca74:	e1530002 	cmp	r3, r2
  13ca78:	0affffcf 	beq	13c9bc <alloc_fwd+0x14>
  13ca7c:	e3a000f0 	mov	r0, #240	; 0xf0
  13ca80:	ebfffec4 	bl	13c598 <get_rtt_syscall>
  13ca84:	e2503000 	subs	r3, r0, #0
  13ca88:	0affffca 	beq	13c9b8 <alloc_fwd+0x10>
  13ca8c:	e3a02001 	mov	r2, #1
  13ca90:	e3a01081 	mov	r1, #129	; 0x81
  13ca94:	e1a00004 	mov	r0, r4
  13ca98:	e12fff33 	blx	r3
  13ca9c:	e3700026 	cmn	r0, #38	; 0x26
  13caa0:	1affffc4 	bne	13c9b8 <alloc_fwd+0x10>
  13caa4:	e3a000f0 	mov	r0, #240	; 0xf0
  13caa8:	ebfffeba 	bl	13c598 <get_rtt_syscall>
  13caac:	e2503000 	subs	r3, r0, #0
  13cab0:	0affffc0 	beq	13c9b8 <alloc_fwd+0x10>
  13cab4:	e3a02001 	mov	r2, #1
  13cab8:	e1a00004 	mov	r0, r4
  13cabc:	e1a01002 	mov	r1, r2
  13cac0:	e12fff33 	blx	r3
  13cac4:	eaffffbb 	b	13c9b8 <alloc_fwd+0x10>
  13cac8:	e3550000 	cmp	r5, #0
  13cacc:	0a000017 	beq	13cb30 <alloc_fwd+0x188>
  13cad0:	e1a03001 	mov	r3, r1
  13cad4:	e1a02001 	mov	r2, r1
  13cad8:	e1a00004 	mov	r0, r4
  13cadc:	e1a0100a 	mov	r1, sl
  13cae0:	eb001515 	bl	141f3c <__wait>
  13cae4:	e5945000 	ldr	r5, [r4]
  13cae8:	ea000002 	b	13caf8 <alloc_fwd+0x150>
  13caec:	e5943000 	ldr	r3, [r4]
  13caf0:	e1550003 	cmp	r5, r3
  13caf4:	1afffffa 	bne	13cae4 <alloc_fwd+0x13c>
  13caf8:	e1a00005 	mov	r0, r5
  13cafc:	e3a01001 	mov	r1, #1
  13cb00:	e1a02004 	mov	r2, r4
  13cb04:	e5963000 	ldr	r3, [r6]
  13cb08:	e12fff33 	blx	r3
  13cb0c:	e3500000 	cmp	r0, #0
  13cb10:	1afffff5 	bne	13caec <alloc_fwd+0x144>
  13cb14:	eaffffeb 	b	13cac8 <alloc_fwd+0x120>
  13cb18:	e1a08002 	mov	r8, r2
  13cb1c:	e3180001 	tst	r8, #1
  13cb20:	0affffa9 	beq	13c9cc <alloc_fwd+0x24>
  13cb24:	e3a00000 	mov	r0, #0
  13cb28:	e28dd00c 	add	sp, sp, #12
  13cb2c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13cb30:	e28b3001 	add	r3, fp, #1
  13cb34:	e7991203 	ldr	r1, [r9, r3, lsl #4]
  13cb38:	e59d2004 	ldr	r2, [sp, #4]
  13cb3c:	e3510000 	cmp	r1, #0
  13cb40:	e5922004 	ldr	r2, [r2, #4]
  13cb44:	1affffbd 	bne	13ca40 <alloc_fwd+0x98>
  13cb48:	eaffffb7 	b	13ca2c <alloc_fwd+0x84>
  13cb4c:	e3570b07 	cmp	r7, #7168	; 0x1c00
  13cb50:	83a0703f 	movhi	r7, #63	; 0x3f
  13cb54:	959f30c0 	ldrls	r3, [pc, #192]	; 13cc1c <alloc_fwd+0x274>
  13cb58:	83a04ffe 	movhi	r4, #1016	; 0x3f8
  13cb5c:	908373a7 	addls	r7, r3, r7, lsr #7
  13cb60:	95577004 	ldrbls	r7, [r7, #-4]
  13cb64:	92877010 	addls	r7, r7, #16
  13cb68:	91a04207 	lslls	r4, r7, #4
  13cb6c:	92844008 	addls	r4, r4, #8
  13cb70:	e1a0b007 	mov	fp, r7
  13cb74:	eaffffa1 	b	13ca00 <alloc_fwd+0x58>
  13cb78:	e1a0100b 	mov	r1, fp
  13cb7c:	e59d0004 	ldr	r0, [sp, #4]
  13cb80:	ebffff3e 	bl	13c880 <unbin>
  13cb84:	e5943000 	ldr	r3, [r4]
  13cb88:	e3530000 	cmp	r3, #0
  13cb8c:	0a000009 	beq	13cbb8 <alloc_fwd+0x210>
  13cb90:	e59f308c 	ldr	r3, [pc, #140]	; 13cc24 <alloc_fwd+0x27c>
  13cb94:	e593c000 	ldr	ip, [r3]
  13cb98:	e12fff3c 	blx	ip
  13cb9c:	e3a02000 	mov	r2, #0
  13cba0:	e593c000 	ldr	ip, [r3]
  13cba4:	e5842000 	str	r2, [r4]
  13cba8:	e12fff3c 	blx	ip
  13cbac:	e5943004 	ldr	r3, [r4, #4]
  13cbb0:	e1530002 	cmp	r3, r2
  13cbb4:	1a000002 	bne	13cbc4 <alloc_fwd+0x21c>
  13cbb8:	e3a00001 	mov	r0, #1
  13cbbc:	e28dd00c 	add	sp, sp, #12
  13cbc0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13cbc4:	e3a000f0 	mov	r0, #240	; 0xf0
  13cbc8:	ebfffe72 	bl	13c598 <get_rtt_syscall>
  13cbcc:	e2503000 	subs	r3, r0, #0
  13cbd0:	0afffff8 	beq	13cbb8 <alloc_fwd+0x210>
  13cbd4:	e3a02001 	mov	r2, #1
  13cbd8:	e3a01081 	mov	r1, #129	; 0x81
  13cbdc:	e1a00004 	mov	r0, r4
  13cbe0:	e12fff33 	blx	r3
  13cbe4:	e3700026 	cmn	r0, #38	; 0x26
  13cbe8:	1afffff2 	bne	13cbb8 <alloc_fwd+0x210>
  13cbec:	e3a000f0 	mov	r0, #240	; 0xf0
  13cbf0:	ebfffe68 	bl	13c598 <get_rtt_syscall>
  13cbf4:	e2503000 	subs	r3, r0, #0
  13cbf8:	0affffee 	beq	13cbb8 <alloc_fwd+0x210>
  13cbfc:	e3a02001 	mov	r2, #1
  13cc00:	e1a00004 	mov	r0, r4
  13cc04:	e1a01002 	mov	r1, r2
  13cc08:	e12fff33 	blx	r3
  13cc0c:	eaffffe9 	b	13cbb8 <alloc_fwd+0x210>
  13cc10:	0014fc30 	.word	0x0014fc30
  13cc14:	0014e3d8 	.word	0x0014e3d8
  13cc18:	000001ff 	.word	0x000001ff
  13cc1c:	0014cf20 	.word	0x0014cf20
  13cc20:	00576e84 	.word	0x00576e84
  13cc24:	0014e3d4 	.word	0x0014e3d4

0013cc28 <alloc_rev>:
  13cc28:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  13cc2c:	e59f9264 	ldr	r9, [pc, #612]	; 13ce98 <alloc_rev+0x270>
  13cc30:	e24dd00c 	sub	sp, sp, #12
  13cc34:	e58d0004 	str	r0, [sp, #4]
  13cc38:	e59f625c 	ldr	r6, [pc, #604]	; 13ce9c <alloc_rev+0x274>
  13cc3c:	e59d3004 	ldr	r3, [sp, #4]
  13cc40:	e5938000 	ldr	r8, [r3]
  13cc44:	e3180001 	tst	r8, #1
  13cc48:	1a000055 	bne	13cda4 <alloc_rev+0x17c>
  13cc4c:	e1a07228 	lsr	r7, r8, #4
  13cc50:	e2477001 	sub	r7, r7, #1
  13cc54:	e3570020 	cmp	r7, #32
  13cc58:	9a000005 	bls	13cc74 <alloc_rev+0x4c>
  13cc5c:	e59f323c 	ldr	r3, [pc, #572]	; 13cea0 <alloc_rev+0x278>
  13cc60:	e1570003 	cmp	r7, r3
  13cc64:	8a000058 	bhi	13cdcc <alloc_rev+0x1a4>
  13cc68:	e59f3234 	ldr	r3, [pc, #564]	; 13cea4 <alloc_rev+0x27c>
  13cc6c:	e08371a7 	add	r7, r3, r7, lsr #3
  13cc70:	e5577004 	ldrb	r7, [r7, #-4]
  13cc74:	e1a0b007 	mov	fp, r7
  13cc78:	e1a04207 	lsl	r4, r7, #4
  13cc7c:	e2844008 	add	r4, r4, #8
  13cc80:	e59f3220 	ldr	r3, [pc, #544]	; 13cea8 <alloc_rev+0x280>
  13cc84:	e0894004 	add	r4, r9, r4
  13cc88:	e593300c 	ldr	r3, [r3, #12]
  13cc8c:	e3530000 	cmp	r3, #0
  13cc90:	1284a004 	addne	sl, r4, #4
  13cc94:	1a000032 	bne	13cd64 <alloc_rev+0x13c>
  13cc98:	e28b3001 	add	r3, fp, #1
  13cc9c:	e7992203 	ldr	r2, [r9, r3, lsl #4]
  13cca0:	e3520000 	cmp	r2, #0
  13cca4:	1a000053 	bne	13cdf8 <alloc_rev+0x1d0>
  13cca8:	e1a02008 	mov	r2, r8
  13ccac:	e0891207 	add	r1, r9, r7, lsl #4
  13ccb0:	e2811008 	add	r1, r1, #8
  13ccb4:	e0890203 	add	r0, r9, r3, lsl #4
  13ccb8:	e7891203 	str	r1, [r9, r3, lsl #4]
  13ccbc:	e5801004 	str	r1, [r0, #4]
  13ccc0:	e1580002 	cmp	r8, r2
  13ccc4:	0a00004b 	beq	13cdf8 <alloc_rev+0x1d0>
  13ccc8:	e5943000 	ldr	r3, [r4]
  13cccc:	e3530000 	cmp	r3, #0
  13ccd0:	0a000030 	beq	13cd98 <alloc_rev+0x170>
  13ccd4:	e59f31d0 	ldr	r3, [pc, #464]	; 13ceac <alloc_rev+0x284>
  13ccd8:	e593c000 	ldr	ip, [r3]
  13ccdc:	e12fff3c 	blx	ip
  13cce0:	e3a02000 	mov	r2, #0
  13cce4:	e593c000 	ldr	ip, [r3]
  13cce8:	e5842000 	str	r2, [r4]
  13ccec:	e12fff3c 	blx	ip
  13ccf0:	e5943004 	ldr	r3, [r4, #4]
  13ccf4:	e1530002 	cmp	r3, r2
  13ccf8:	0affffcf 	beq	13cc3c <alloc_rev+0x14>
  13ccfc:	e3a000f0 	mov	r0, #240	; 0xf0
  13cd00:	ebfffe24 	bl	13c598 <get_rtt_syscall>
  13cd04:	e2503000 	subs	r3, r0, #0
  13cd08:	0affffca 	beq	13cc38 <alloc_rev+0x10>
  13cd0c:	e3a02001 	mov	r2, #1
  13cd10:	e3a01081 	mov	r1, #129	; 0x81
  13cd14:	e1a00004 	mov	r0, r4
  13cd18:	e12fff33 	blx	r3
  13cd1c:	e3700026 	cmn	r0, #38	; 0x26
  13cd20:	1affffc4 	bne	13cc38 <alloc_rev+0x10>
  13cd24:	e3a000f0 	mov	r0, #240	; 0xf0
  13cd28:	ebfffe1a 	bl	13c598 <get_rtt_syscall>
  13cd2c:	e2503000 	subs	r3, r0, #0
  13cd30:	0affffc0 	beq	13cc38 <alloc_rev+0x10>
  13cd34:	e3a02001 	mov	r2, #1
  13cd38:	e1a00004 	mov	r0, r4
  13cd3c:	e1a01002 	mov	r1, r2
  13cd40:	e12fff33 	blx	r3
  13cd44:	eaffffbb 	b	13cc38 <alloc_rev+0x10>
  13cd48:	e3550000 	cmp	r5, #0
  13cd4c:	0a000017 	beq	13cdb0 <alloc_rev+0x188>
  13cd50:	e1a03001 	mov	r3, r1
  13cd54:	e1a02001 	mov	r2, r1
  13cd58:	e1a00004 	mov	r0, r4
  13cd5c:	e1a0100a 	mov	r1, sl
  13cd60:	eb001475 	bl	141f3c <__wait>
  13cd64:	e5945000 	ldr	r5, [r4]
  13cd68:	ea000002 	b	13cd78 <alloc_rev+0x150>
  13cd6c:	e5943000 	ldr	r3, [r4]
  13cd70:	e1550003 	cmp	r5, r3
  13cd74:	1afffffa 	bne	13cd64 <alloc_rev+0x13c>
  13cd78:	e1a00005 	mov	r0, r5
  13cd7c:	e3a01001 	mov	r1, #1
  13cd80:	e1a02004 	mov	r2, r4
  13cd84:	e5963000 	ldr	r3, [r6]
  13cd88:	e12fff33 	blx	r3
  13cd8c:	e3500000 	cmp	r0, #0
  13cd90:	1afffff5 	bne	13cd6c <alloc_rev+0x144>
  13cd94:	eaffffeb 	b	13cd48 <alloc_rev+0x120>
  13cd98:	e1a08002 	mov	r8, r2
  13cd9c:	e3180001 	tst	r8, #1
  13cda0:	0affffa9 	beq	13cc4c <alloc_rev+0x24>
  13cda4:	e3a00000 	mov	r0, #0
  13cda8:	e28dd00c 	add	sp, sp, #12
  13cdac:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13cdb0:	e28b3001 	add	r3, fp, #1
  13cdb4:	e7991203 	ldr	r1, [r9, r3, lsl #4]
  13cdb8:	e59d2004 	ldr	r2, [sp, #4]
  13cdbc:	e3510000 	cmp	r1, #0
  13cdc0:	e5922000 	ldr	r2, [r2]
  13cdc4:	1affffbd 	bne	13ccc0 <alloc_rev+0x98>
  13cdc8:	eaffffb7 	b	13ccac <alloc_rev+0x84>
  13cdcc:	e3570b07 	cmp	r7, #7168	; 0x1c00
  13cdd0:	83a0703f 	movhi	r7, #63	; 0x3f
  13cdd4:	959f30c8 	ldrls	r3, [pc, #200]	; 13cea4 <alloc_rev+0x27c>
  13cdd8:	83a04ffe 	movhi	r4, #1016	; 0x3f8
  13cddc:	908373a7 	addls	r7, r3, r7, lsr #7
  13cde0:	95577004 	ldrbls	r7, [r7, #-4]
  13cde4:	92877010 	addls	r7, r7, #16
  13cde8:	91a04207 	lslls	r4, r7, #4
  13cdec:	92844008 	addls	r4, r4, #8
  13cdf0:	e1a0b007 	mov	fp, r7
  13cdf4:	eaffffa1 	b	13cc80 <alloc_rev+0x58>
  13cdf8:	e59d3004 	ldr	r3, [sp, #4]
  13cdfc:	e3c80001 	bic	r0, r8, #1
  13ce00:	e0430000 	sub	r0, r3, r0
  13ce04:	e1a0100b 	mov	r1, fp
  13ce08:	ebfffe9c 	bl	13c880 <unbin>
  13ce0c:	e5943000 	ldr	r3, [r4]
  13ce10:	e3530000 	cmp	r3, #0
  13ce14:	0a000009 	beq	13ce40 <alloc_rev+0x218>
  13ce18:	e59f308c 	ldr	r3, [pc, #140]	; 13ceac <alloc_rev+0x284>
  13ce1c:	e593c000 	ldr	ip, [r3]
  13ce20:	e12fff3c 	blx	ip
  13ce24:	e3a02000 	mov	r2, #0
  13ce28:	e593c000 	ldr	ip, [r3]
  13ce2c:	e5842000 	str	r2, [r4]
  13ce30:	e12fff3c 	blx	ip
  13ce34:	e5943004 	ldr	r3, [r4, #4]
  13ce38:	e1530002 	cmp	r3, r2
  13ce3c:	1a000002 	bne	13ce4c <alloc_rev+0x224>
  13ce40:	e3a00001 	mov	r0, #1
  13ce44:	e28dd00c 	add	sp, sp, #12
  13ce48:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13ce4c:	e3a000f0 	mov	r0, #240	; 0xf0
  13ce50:	ebfffdd0 	bl	13c598 <get_rtt_syscall>
  13ce54:	e2503000 	subs	r3, r0, #0
  13ce58:	0afffff8 	beq	13ce40 <alloc_rev+0x218>
  13ce5c:	e3a02001 	mov	r2, #1
  13ce60:	e3a01081 	mov	r1, #129	; 0x81
  13ce64:	e1a00004 	mov	r0, r4
  13ce68:	e12fff33 	blx	r3
  13ce6c:	e3700026 	cmn	r0, #38	; 0x26
  13ce70:	1afffff2 	bne	13ce40 <alloc_rev+0x218>
  13ce74:	e3a000f0 	mov	r0, #240	; 0xf0
  13ce78:	ebfffdc6 	bl	13c598 <get_rtt_syscall>
  13ce7c:	e2503000 	subs	r3, r0, #0
  13ce80:	0affffee 	beq	13ce40 <alloc_rev+0x218>
  13ce84:	e3a02001 	mov	r2, #1
  13ce88:	e1a00004 	mov	r0, r4
  13ce8c:	e1a01002 	mov	r1, r2
  13ce90:	e12fff33 	blx	r3
  13ce94:	eaffffe9 	b	13ce40 <alloc_rev+0x218>
  13ce98:	0014fc30 	.word	0x0014fc30
  13ce9c:	0014e3d8 	.word	0x0014e3d8
  13cea0:	000001ff 	.word	0x000001ff
  13cea4:	0014cf20 	.word	0x0014cf20
  13cea8:	00576e84 	.word	0x00576e84
  13ceac:	0014e3d4 	.word	0x0014e3d4

0013ceb0 <__bin_chunk>:
  13ceb0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  13ceb4:	e5903004 	ldr	r3, [r0, #4]
  13ceb8:	e24dd01c 	sub	sp, sp, #28
  13cebc:	e3c31001 	bic	r1, r3, #1
  13cec0:	e7902001 	ldr	r2, [r0, r1]
  13cec4:	e1a06000 	mov	r6, r0
  13cec8:	e1530002 	cmp	r3, r2
  13cecc:	e58d1010 	str	r1, [sp, #16]
  13ced0:	e080b001 	add	fp, r0, r1
  13ced4:	0a000000 	beq	13cedc <__bin_chunk+0x2c>
  13ced8:	e7f000f0 	.word	0xe7f000f0
  13cedc:	e59d3010 	ldr	r3, [sp, #16]
  13cee0:	e59f55e8 	ldr	r5, [pc, #1512]	; 13d4d0 <__bin_chunk+0x620>
  13cee4:	e58d3000 	str	r3, [sp]
  13cee8:	e3a03000 	mov	r3, #0
  13ceec:	e58d3014 	str	r3, [sp, #20]
  13cef0:	e2853b01 	add	r3, r5, #1024	; 0x400
  13cef4:	e283300c 	add	r3, r3, #12
  13cef8:	e59f95d4 	ldr	r9, [pc, #1492]	; 13d4d4 <__bin_chunk+0x624>
  13cefc:	e58d300c 	str	r3, [sp, #12]
  13cf00:	e5963000 	ldr	r3, [r6]
  13cf04:	e59b2004 	ldr	r2, [fp, #4]
  13cf08:	e0033002 	and	r3, r3, r2
  13cf0c:	e3130001 	tst	r3, #1
  13cf10:	0a000038 	beq	13cff8 <__bin_chunk+0x148>
  13cf14:	e59d1000 	ldr	r1, [sp]
  13cf18:	e1a03221 	lsr	r3, r1, #4
  13cf1c:	e2432001 	sub	r2, r3, #1
  13cf20:	e3520020 	cmp	r2, #32
  13cf24:	e3813001 	orr	r3, r1, #1
  13cf28:	e5863004 	str	r3, [r6, #4]
  13cf2c:	e58d2008 	str	r2, [sp, #8]
  13cf30:	e58b3000 	str	r3, [fp]
  13cf34:	8a00006c 	bhi	13d0ec <__bin_chunk+0x23c>
  13cf38:	e1a04202 	lsl	r4, r2, #4
  13cf3c:	e2844008 	add	r4, r4, #8
  13cf40:	e58d2004 	str	r2, [sp, #4]
  13cf44:	e59f358c 	ldr	r3, [pc, #1420]	; 13d4d8 <__bin_chunk+0x628>
  13cf48:	e0854004 	add	r4, r5, r4
  13cf4c:	e593300c 	ldr	r3, [r3, #12]
  13cf50:	e3530000 	cmp	r3, #0
  13cf54:	12848004 	addne	r8, r4, #4
  13cf58:	1a000056 	bne	13d0b8 <__bin_chunk+0x208>
  13cf5c:	e59d3004 	ldr	r3, [sp, #4]
  13cf60:	e2837001 	add	r7, r3, #1
  13cf64:	e7953207 	ldr	r3, [r5, r7, lsl #4]
  13cf68:	e3530000 	cmp	r3, #0
  13cf6c:	0a000069 	beq	13d118 <__bin_chunk+0x268>
  13cf70:	e59f3560 	ldr	r3, [pc, #1376]	; 13d4d8 <__bin_chunk+0x628>
  13cf74:	e593300c 	ldr	r3, [r3, #12]
  13cf78:	e3530000 	cmp	r3, #0
  13cf7c:	1a00006f 	bne	13d140 <__bin_chunk+0x290>
  13cf80:	e5963000 	ldr	r3, [r6]
  13cf84:	e59b2004 	ldr	r2, [fp, #4]
  13cf88:	e0033002 	and	r3, r3, r2
  13cf8c:	e2133001 	ands	r3, r3, #1
  13cf90:	1a0000b5 	bne	13d26c <__bin_chunk+0x3bc>
  13cf94:	e5952408 	ldr	r2, [r5, #1032]	; 0x408
  13cf98:	e3520000 	cmp	r2, #0
  13cf9c:	0a000008 	beq	13cfc4 <__bin_chunk+0x114>
  13cfa0:	e59f2534 	ldr	r2, [pc, #1332]	; 13d4dc <__bin_chunk+0x62c>
  13cfa4:	e592c000 	ldr	ip, [r2]
  13cfa8:	e12fff3c 	blx	ip
  13cfac:	e5853408 	str	r3, [r5, #1032]	; 0x408
  13cfb0:	e592c000 	ldr	ip, [r2]
  13cfb4:	e12fff3c 	blx	ip
  13cfb8:	e595340c 	ldr	r3, [r5, #1036]	; 0x40c
  13cfbc:	e3530000 	cmp	r3, #0
  13cfc0:	1a000095 	bne	13d21c <__bin_chunk+0x36c>
  13cfc4:	e5943000 	ldr	r3, [r4]
  13cfc8:	e3530000 	cmp	r3, #0
  13cfcc:	0a000009 	beq	13cff8 <__bin_chunk+0x148>
  13cfd0:	e59f2504 	ldr	r2, [pc, #1284]	; 13d4dc <__bin_chunk+0x62c>
  13cfd4:	e592c000 	ldr	ip, [r2]
  13cfd8:	e12fff3c 	blx	ip
  13cfdc:	e3a03000 	mov	r3, #0
  13cfe0:	e592c000 	ldr	ip, [r2]
  13cfe4:	e5843000 	str	r3, [r4]
  13cfe8:	e12fff3c 	blx	ip
  13cfec:	e5943004 	ldr	r3, [r4, #4]
  13cff0:	e3530000 	cmp	r3, #0
  13cff4:	1a000075 	bne	13d1d0 <__bin_chunk+0x320>
  13cff8:	e1a00006 	mov	r0, r6
  13cffc:	ebffff09 	bl	13cc28 <alloc_rev>
  13d000:	e3500000 	cmp	r0, #0
  13d004:	0a000010 	beq	13d04c <__bin_chunk+0x19c>
  13d008:	e5963000 	ldr	r3, [r6]
  13d00c:	e59d2010 	ldr	r2, [sp, #16]
  13d010:	e3c33001 	bic	r3, r3, #1
  13d014:	e0466003 	sub	r6, r6, r3
  13d018:	e5963004 	ldr	r3, [r6, #4]
  13d01c:	e59d1000 	ldr	r1, [sp]
  13d020:	e3c33001 	bic	r3, r3, #1
  13d024:	e0822003 	add	r2, r2, r3
  13d028:	e0811003 	add	r1, r1, r3
  13d02c:	e352090a 	cmp	r2, #163840	; 0x28000
  13d030:	e58d1000 	str	r1, [sp]
  13d034:	9a000004 	bls	13d04c <__bin_chunk+0x19c>
  13d038:	e0222003 	eor	r2, r2, r3
  13d03c:	e1520003 	cmp	r2, r3
  13d040:	e59d1014 	ldr	r1, [sp, #20]
  13d044:	83a01001 	movhi	r1, #1
  13d048:	e58d1014 	str	r1, [sp, #20]
  13d04c:	e1a0000b 	mov	r0, fp
  13d050:	ebfffe54 	bl	13c9a8 <alloc_fwd>
  13d054:	e3500000 	cmp	r0, #0
  13d058:	0affffa8 	beq	13cf00 <__bin_chunk+0x50>
  13d05c:	e59b3004 	ldr	r3, [fp, #4]
  13d060:	e59d2010 	ldr	r2, [sp, #16]
  13d064:	e3c33001 	bic	r3, r3, #1
  13d068:	e59d1000 	ldr	r1, [sp]
  13d06c:	e0822003 	add	r2, r2, r3
  13d070:	e0811003 	add	r1, r1, r3
  13d074:	e352090a 	cmp	r2, #163840	; 0x28000
  13d078:	e58d1000 	str	r1, [sp]
  13d07c:	9a000004 	bls	13d094 <__bin_chunk+0x1e4>
  13d080:	e0222003 	eor	r2, r2, r3
  13d084:	e1520003 	cmp	r2, r3
  13d088:	e59d1014 	ldr	r1, [sp, #20]
  13d08c:	83a01001 	movhi	r1, #1
  13d090:	e58d1014 	str	r1, [sp, #20]
  13d094:	e08bb003 	add	fp, fp, r3
  13d098:	eaffff98 	b	13cf00 <__bin_chunk+0x50>
  13d09c:	e3570000 	cmp	r7, #0
  13d0a0:	0affffad 	beq	13cf5c <__bin_chunk+0xac>
  13d0a4:	e1a03001 	mov	r3, r1
  13d0a8:	e1a02001 	mov	r2, r1
  13d0ac:	e1a00004 	mov	r0, r4
  13d0b0:	e1a01008 	mov	r1, r8
  13d0b4:	eb0013a0 	bl	141f3c <__wait>
  13d0b8:	e5947000 	ldr	r7, [r4]
  13d0bc:	ea000002 	b	13d0cc <__bin_chunk+0x21c>
  13d0c0:	e5943000 	ldr	r3, [r4]
  13d0c4:	e1570003 	cmp	r7, r3
  13d0c8:	1afffffa 	bne	13d0b8 <__bin_chunk+0x208>
  13d0cc:	e1a00007 	mov	r0, r7
  13d0d0:	e3a01001 	mov	r1, #1
  13d0d4:	e1a02004 	mov	r2, r4
  13d0d8:	e5993000 	ldr	r3, [r9]
  13d0dc:	e12fff33 	blx	r3
  13d0e0:	e3500000 	cmp	r0, #0
  13d0e4:	1afffff5 	bne	13d0c0 <__bin_chunk+0x210>
  13d0e8:	eaffffeb 	b	13d09c <__bin_chunk+0x1ec>
  13d0ec:	e59d3008 	ldr	r3, [sp, #8]
  13d0f0:	e3530c02 	cmp	r3, #512	; 0x200
  13d0f4:	2a000027 	bcs	13d198 <__bin_chunk+0x2e8>
  13d0f8:	e59f23e0 	ldr	r2, [pc, #992]	; 13d4e0 <__bin_chunk+0x630>
  13d0fc:	e08231a3 	add	r3, r2, r3, lsr #3
  13d100:	e5533004 	ldrb	r3, [r3, #-4]
  13d104:	e1a04203 	lsl	r4, r3, #4
  13d108:	e58d3008 	str	r3, [sp, #8]
  13d10c:	e2844008 	add	r4, r4, #8
  13d110:	e58d3004 	str	r3, [sp, #4]
  13d114:	eaffff8a 	b	13cf44 <__bin_chunk+0x94>
  13d118:	e59d3008 	ldr	r3, [sp, #8]
  13d11c:	e0852207 	add	r2, r5, r7, lsl #4
  13d120:	e0853203 	add	r3, r5, r3, lsl #4
  13d124:	e2833008 	add	r3, r3, #8
  13d128:	e7853207 	str	r3, [r5, r7, lsl #4]
  13d12c:	e5823004 	str	r3, [r2, #4]
  13d130:	e59f33a0 	ldr	r3, [pc, #928]	; 13d4d8 <__bin_chunk+0x628>
  13d134:	e593300c 	ldr	r3, [r3, #12]
  13d138:	e3530000 	cmp	r3, #0
  13d13c:	0affff8f 	beq	13cf80 <__bin_chunk+0xd0>
  13d140:	e59f339c 	ldr	r3, [pc, #924]	; 13d4e4 <__bin_chunk+0x634>
  13d144:	e283a008 	add	sl, r3, #8
  13d148:	e5958408 	ldr	r8, [r5, #1032]	; 0x408
  13d14c:	ea000002 	b	13d15c <__bin_chunk+0x2ac>
  13d150:	e5953408 	ldr	r3, [r5, #1032]	; 0x408
  13d154:	e1580003 	cmp	r8, r3
  13d158:	1afffffa 	bne	13d148 <__bin_chunk+0x298>
  13d15c:	e1a00008 	mov	r0, r8
  13d160:	e3a01001 	mov	r1, #1
  13d164:	e1a0200a 	mov	r2, sl
  13d168:	e5993000 	ldr	r3, [r9]
  13d16c:	e12fff33 	blx	r3
  13d170:	e3500000 	cmp	r0, #0
  13d174:	1afffff5 	bne	13d150 <__bin_chunk+0x2a0>
  13d178:	e3580000 	cmp	r8, #0
  13d17c:	0affff7f 	beq	13cf80 <__bin_chunk+0xd0>
  13d180:	e1a03001 	mov	r3, r1
  13d184:	e1a02001 	mov	r2, r1
  13d188:	e1a0000a 	mov	r0, sl
  13d18c:	e59d100c 	ldr	r1, [sp, #12]
  13d190:	eb001369 	bl	141f3c <__wait>
  13d194:	eaffffeb 	b	13d148 <__bin_chunk+0x298>
  13d198:	e59d3008 	ldr	r3, [sp, #8]
  13d19c:	e3530b07 	cmp	r3, #7168	; 0x1c00
  13d1a0:	83a0303f 	movhi	r3, #63	; 0x3f
  13d1a4:	959f2334 	ldrls	r2, [pc, #820]	; 13d4e0 <__bin_chunk+0x630>
  13d1a8:	858d3008 	strhi	r3, [sp, #8]
  13d1ac:	908233a3 	addls	r3, r2, r3, lsr #7
  13d1b0:	95533004 	ldrbls	r3, [r3, #-4]
  13d1b4:	83a04ffe 	movhi	r4, #1016	; 0x3f8
  13d1b8:	92833010 	addls	r3, r3, #16
  13d1bc:	91a04203 	lslls	r4, r3, #4
  13d1c0:	958d3008 	strls	r3, [sp, #8]
  13d1c4:	92844008 	addls	r4, r4, #8
  13d1c8:	e58d3004 	str	r3, [sp, #4]
  13d1cc:	eaffff5c 	b	13cf44 <__bin_chunk+0x94>
  13d1d0:	e3a000f0 	mov	r0, #240	; 0xf0
  13d1d4:	ebfffcef 	bl	13c598 <get_rtt_syscall>
  13d1d8:	e2503000 	subs	r3, r0, #0
  13d1dc:	0affff85 	beq	13cff8 <__bin_chunk+0x148>
  13d1e0:	e3a02001 	mov	r2, #1
  13d1e4:	e3a01081 	mov	r1, #129	; 0x81
  13d1e8:	e1a00004 	mov	r0, r4
  13d1ec:	e12fff33 	blx	r3
  13d1f0:	e3700026 	cmn	r0, #38	; 0x26
  13d1f4:	1affff7f 	bne	13cff8 <__bin_chunk+0x148>
  13d1f8:	e3a000f0 	mov	r0, #240	; 0xf0
  13d1fc:	ebfffce5 	bl	13c598 <get_rtt_syscall>
  13d200:	e2503000 	subs	r3, r0, #0
  13d204:	0affff7b 	beq	13cff8 <__bin_chunk+0x148>
  13d208:	e3a02001 	mov	r2, #1
  13d20c:	e1a00004 	mov	r0, r4
  13d210:	e1a01002 	mov	r1, r2
  13d214:	e12fff33 	blx	r3
  13d218:	eaffff76 	b	13cff8 <__bin_chunk+0x148>
  13d21c:	e3a000f0 	mov	r0, #240	; 0xf0
  13d220:	ebfffcdc 	bl	13c598 <get_rtt_syscall>
  13d224:	e2503000 	subs	r3, r0, #0
  13d228:	e59f72b8 	ldr	r7, [pc, #696]	; 13d4e8 <__bin_chunk+0x638>
  13d22c:	0affff64 	beq	13cfc4 <__bin_chunk+0x114>
  13d230:	e3a02001 	mov	r2, #1
  13d234:	e3a01081 	mov	r1, #129	; 0x81
  13d238:	e1a00007 	mov	r0, r7
  13d23c:	e12fff33 	blx	r3
  13d240:	e3700026 	cmn	r0, #38	; 0x26
  13d244:	1affff5e 	bne	13cfc4 <__bin_chunk+0x114>
  13d248:	e3a000f0 	mov	r0, #240	; 0xf0
  13d24c:	ebfffcd1 	bl	13c598 <get_rtt_syscall>
  13d250:	e2503000 	subs	r3, r0, #0
  13d254:	0affff5a 	beq	13cfc4 <__bin_chunk+0x114>
  13d258:	e3a02001 	mov	r2, #1
  13d25c:	e1a00007 	mov	r0, r7
  13d260:	e1a01002 	mov	r1, r2
  13d264:	e12fff33 	blx	r3
  13d268:	eaffff55 	b	13cfc4 <__bin_chunk+0x114>
  13d26c:	e59d3004 	ldr	r3, [sp, #4]
  13d270:	e8950006 	ldm	r5, {r1, r2}
  13d274:	e263c020 	rsb	ip, r3, #32
  13d278:	e1a08331 	lsr	r8, r1, r3
  13d27c:	e2430020 	sub	r0, r3, #32
  13d280:	e3a03000 	mov	r3, #0
  13d284:	e1888c12 	orr	r8, r8, r2, lsl ip
  13d288:	e1888032 	orr	r8, r8, r2, lsr r0
  13d28c:	e2082001 	and	r2, r8, #1
  13d290:	e1923003 	orrs	r3, r2, r3
  13d294:	0a00005d 	beq	13d410 <__bin_chunk+0x560>
  13d298:	e59d3000 	ldr	r3, [sp]
  13d29c:	e5863004 	str	r3, [r6, #4]
  13d2a0:	e58b3000 	str	r3, [fp]
  13d2a4:	e5953408 	ldr	r3, [r5, #1032]	; 0x408
  13d2a8:	e3530000 	cmp	r3, #0
  13d2ac:	0a000009 	beq	13d2d8 <__bin_chunk+0x428>
  13d2b0:	e59f3224 	ldr	r3, [pc, #548]	; 13d4dc <__bin_chunk+0x62c>
  13d2b4:	e593c000 	ldr	ip, [r3]
  13d2b8:	e12fff3c 	blx	ip
  13d2bc:	e3a02000 	mov	r2, #0
  13d2c0:	e593c000 	ldr	ip, [r3]
  13d2c4:	e5852408 	str	r2, [r5, #1032]	; 0x408
  13d2c8:	e12fff3c 	blx	ip
  13d2cc:	e595340c 	ldr	r3, [r5, #1036]	; 0x40c
  13d2d0:	e1530002 	cmp	r3, r2
  13d2d4:	1a000039 	bne	13d3c0 <__bin_chunk+0x510>
  13d2d8:	e59d3008 	ldr	r3, [sp, #8]
  13d2dc:	e0857207 	add	r7, r5, r7, lsl #4
  13d2e0:	e2833001 	add	r3, r3, #1
  13d2e4:	e5972004 	ldr	r2, [r7, #4]
  13d2e8:	e0855203 	add	r5, r5, r3, lsl #4
  13d2ec:	e2453008 	sub	r3, r5, #8
  13d2f0:	e586200c 	str	r2, [r6, #12]
  13d2f4:	e5863008 	str	r3, [r6, #8]
  13d2f8:	e59d2014 	ldr	r2, [sp, #20]
  13d2fc:	e5856004 	str	r6, [r5, #4]
  13d300:	e596300c 	ldr	r3, [r6, #12]
  13d304:	e3520000 	cmp	r2, #0
  13d308:	e5836008 	str	r6, [r3, #8]
  13d30c:	0a000008 	beq	13d334 <__bin_chunk+0x484>
  13d310:	e59f31d4 	ldr	r3, [pc, #468]	; 13d4ec <__bin_chunk+0x63c>
  13d314:	e2866a01 	add	r6, r6, #4096	; 0x1000
  13d318:	e286600f 	add	r6, r6, #15
  13d31c:	e24b1010 	sub	r1, fp, #16
  13d320:	e0060003 	and	r0, r6, r3
  13d324:	e0011003 	and	r1, r1, r3
  13d328:	e0411000 	sub	r1, r1, r0
  13d32c:	e3a02004 	mov	r2, #4
  13d330:	eb0002ca 	bl	13de60 <__madvise>
  13d334:	e5943000 	ldr	r3, [r4]
  13d338:	e3530000 	cmp	r3, #0
  13d33c:	0a000009 	beq	13d368 <__bin_chunk+0x4b8>
  13d340:	e59f3194 	ldr	r3, [pc, #404]	; 13d4dc <__bin_chunk+0x62c>
  13d344:	e593c000 	ldr	ip, [r3]
  13d348:	e12fff3c 	blx	ip
  13d34c:	e3a02000 	mov	r2, #0
  13d350:	e593c000 	ldr	ip, [r3]
  13d354:	e5842000 	str	r2, [r4]
  13d358:	e12fff3c 	blx	ip
  13d35c:	e5943004 	ldr	r3, [r4, #4]
  13d360:	e1530002 	cmp	r3, r2
  13d364:	1a000001 	bne	13d370 <__bin_chunk+0x4c0>
  13d368:	e28dd01c 	add	sp, sp, #28
  13d36c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13d370:	e3a000f0 	mov	r0, #240	; 0xf0
  13d374:	ebfffc87 	bl	13c598 <get_rtt_syscall>
  13d378:	e2503000 	subs	r3, r0, #0
  13d37c:	0afffff9 	beq	13d368 <__bin_chunk+0x4b8>
  13d380:	e3a02001 	mov	r2, #1
  13d384:	e3a01081 	mov	r1, #129	; 0x81
  13d388:	e1a00004 	mov	r0, r4
  13d38c:	e12fff33 	blx	r3
  13d390:	e3700026 	cmn	r0, #38	; 0x26
  13d394:	1afffff3 	bne	13d368 <__bin_chunk+0x4b8>
  13d398:	e3a000f0 	mov	r0, #240	; 0xf0
  13d39c:	ebfffc7d 	bl	13c598 <get_rtt_syscall>
  13d3a0:	e2503000 	subs	r3, r0, #0
  13d3a4:	0affffef 	beq	13d368 <__bin_chunk+0x4b8>
  13d3a8:	e3a02001 	mov	r2, #1
  13d3ac:	e1a00004 	mov	r0, r4
  13d3b0:	e1a01002 	mov	r1, r2
  13d3b4:	e28dd01c 	add	sp, sp, #28
  13d3b8:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  13d3bc:	e12fff13 	bx	r3
  13d3c0:	e3a000f0 	mov	r0, #240	; 0xf0
  13d3c4:	ebfffc73 	bl	13c598 <get_rtt_syscall>
  13d3c8:	e2503000 	subs	r3, r0, #0
  13d3cc:	e59f8114 	ldr	r8, [pc, #276]	; 13d4e8 <__bin_chunk+0x638>
  13d3d0:	0affffc0 	beq	13d2d8 <__bin_chunk+0x428>
  13d3d4:	e3a02001 	mov	r2, #1
  13d3d8:	e3a01081 	mov	r1, #129	; 0x81
  13d3dc:	e1a00008 	mov	r0, r8
  13d3e0:	e12fff33 	blx	r3
  13d3e4:	e3700026 	cmn	r0, #38	; 0x26
  13d3e8:	1affffba 	bne	13d2d8 <__bin_chunk+0x428>
  13d3ec:	e3a000f0 	mov	r0, #240	; 0xf0
  13d3f0:	ebfffc68 	bl	13c598 <get_rtt_syscall>
  13d3f4:	e2503000 	subs	r3, r0, #0
  13d3f8:	0affffb6 	beq	13d2d8 <__bin_chunk+0x428>
  13d3fc:	e3a02001 	mov	r2, #1
  13d400:	e1a00008 	mov	r0, r8
  13d404:	e1a01002 	mov	r1, r2
  13d408:	e12fff33 	blx	r3
  13d40c:	eaffffb1 	b	13d2d8 <__bin_chunk+0x428>
  13d410:	e3a03001 	mov	r3, #1
  13d414:	e59d1004 	ldr	r1, [sp, #4]
  13d418:	e1a02013 	lsl	r2, r3, r0
  13d41c:	e1b01113 	lsls	r1, r3, r1
  13d420:	e1823c33 	orr	r3, r2, r3, lsr ip
  13d424:	e58d100c 	str	r1, [sp, #12]
  13d428:	e58d3004 	str	r3, [sp, #4]
  13d42c:	0a000011 	beq	13d478 <__bin_chunk+0x5c8>
  13d430:	e59f809c 	ldr	r8, [pc, #156]	; 13d4d4 <__bin_chunk+0x624>
  13d434:	e59fa094 	ldr	sl, [pc, #148]	; 13d4d0 <__bin_chunk+0x620>
  13d438:	e58db010 	str	fp, [sp, #16]
  13d43c:	e5959000 	ldr	r9, [r5]
  13d440:	e59d300c 	ldr	r3, [sp, #12]
  13d444:	e183b009 	orr	fp, r3, r9
  13d448:	ea000002 	b	13d458 <__bin_chunk+0x5a8>
  13d44c:	e5953000 	ldr	r3, [r5]
  13d450:	e1590003 	cmp	r9, r3
  13d454:	1afffff8 	bne	13d43c <__bin_chunk+0x58c>
  13d458:	e1a00009 	mov	r0, r9
  13d45c:	e1a0100b 	mov	r1, fp
  13d460:	e1a0200a 	mov	r2, sl
  13d464:	e5983000 	ldr	r3, [r8]
  13d468:	e12fff33 	blx	r3
  13d46c:	e3500000 	cmp	r0, #0
  13d470:	1afffff5 	bne	13d44c <__bin_chunk+0x59c>
  13d474:	e59db010 	ldr	fp, [sp, #16]
  13d478:	e59d3004 	ldr	r3, [sp, #4]
  13d47c:	e3530000 	cmp	r3, #0
  13d480:	0affff84 	beq	13d298 <__bin_chunk+0x3e8>
  13d484:	e59f8048 	ldr	r8, [pc, #72]	; 13d4d4 <__bin_chunk+0x624>
  13d488:	e59fa060 	ldr	sl, [pc, #96]	; 13d4f0 <__bin_chunk+0x640>
  13d48c:	e58db00c 	str	fp, [sp, #12]
  13d490:	e5959004 	ldr	r9, [r5, #4]
  13d494:	e59d3004 	ldr	r3, [sp, #4]
  13d498:	e183b009 	orr	fp, r3, r9
  13d49c:	ea000002 	b	13d4ac <__bin_chunk+0x5fc>
  13d4a0:	e5953004 	ldr	r3, [r5, #4]
  13d4a4:	e1590003 	cmp	r9, r3
  13d4a8:	1afffff8 	bne	13d490 <__bin_chunk+0x5e0>
  13d4ac:	e1a00009 	mov	r0, r9
  13d4b0:	e1a0100b 	mov	r1, fp
  13d4b4:	e1a0200a 	mov	r2, sl
  13d4b8:	e5983000 	ldr	r3, [r8]
  13d4bc:	e12fff33 	blx	r3
  13d4c0:	e3500000 	cmp	r0, #0
  13d4c4:	1afffff5 	bne	13d4a0 <__bin_chunk+0x5f0>
  13d4c8:	e59db00c 	ldr	fp, [sp, #12]
  13d4cc:	eaffff71 	b	13d298 <__bin_chunk+0x3e8>
  13d4d0:	0014fc30 	.word	0x0014fc30
  13d4d4:	0014e3d8 	.word	0x0014e3d8
  13d4d8:	00576e84 	.word	0x00576e84
  13d4dc:	0014e3d4 	.word	0x0014e3d4
  13d4e0:	0014cf20 	.word	0x0014cf20
  13d4e4:	00150030 	.word	0x00150030
  13d4e8:	00150038 	.word	0x00150038
  13d4ec:	fffff000 	.word	0xfffff000
  13d4f0:	0014fc34 	.word	0x0014fc34

0013d4f4 <trim>:
  13d4f4:	e5903004 	ldr	r3, [r0, #4]
  13d4f8:	e1a02000 	mov	r2, r0
  13d4fc:	e3c33001 	bic	r3, r3, #1
  13d500:	e2430010 	sub	r0, r3, #16
  13d504:	e1500001 	cmp	r0, r1
  13d508:	912fff1e 	bxls	lr
  13d50c:	e043c001 	sub	ip, r3, r1
  13d510:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  13d514:	e38cc001 	orr	ip, ip, #1
  13d518:	e381e001 	orr	lr, r1, #1
  13d51c:	e0820001 	add	r0, r2, r1
  13d520:	e782e001 	str	lr, [r2, r1]
  13d524:	e580c004 	str	ip, [r0, #4]
  13d528:	e782c003 	str	ip, [r2, r3]
  13d52c:	e582e004 	str	lr, [r2, #4]
  13d530:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  13d534:	eafffe5d 	b	13ceb0 <__bin_chunk>

0013d538 <malloc>:
  13d538:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  13d53c:	e24dd02c 	sub	sp, sp, #44	; 0x2c
  13d540:	e28d3028 	add	r3, sp, #40	; 0x28
  13d544:	e523000c 	str	r0, [r3, #-12]!
  13d548:	e1a00003 	mov	r0, r3
  13d54c:	ebfffcb1 	bl	13c818 <adjust_size>
  13d550:	e3500000 	cmp	r0, #0
  13d554:	ba000145 	blt	13da70 <malloc+0x538>
  13d558:	e59d301c 	ldr	r3, [sp, #28]
  13d55c:	e3530907 	cmp	r3, #114688	; 0x1c000
  13d560:	8a000076 	bhi	13d740 <malloc+0x208>
  13d564:	e1a03223 	lsr	r3, r3, #4
  13d568:	e2432001 	sub	r2, r3, #1
  13d56c:	e3520020 	cmp	r2, #32
  13d570:	958d2018 	strls	r2, [sp, #24]
  13d574:	8a000066 	bhi	13d714 <malloc+0x1dc>
  13d578:	e3a01001 	mov	r1, #1
  13d57c:	e59dc018 	ldr	ip, [sp, #24]
  13d580:	e59f85a8 	ldr	r8, [pc, #1448]	; 13db30 <malloc+0x5f8>
  13d584:	e24c0020 	sub	r0, ip, #32
  13d588:	e1a03011 	lsl	r3, r1, r0
  13d58c:	e1a02c11 	lsl	r2, r1, ip
  13d590:	e26c0020 	rsb	r0, ip, #32
  13d594:	e2722000 	rsbs	r2, r2, #0
  13d598:	e1833031 	orr	r3, r3, r1, lsr r0
  13d59c:	e2e33000 	rsc	r3, r3, #0
  13d5a0:	e58d2010 	str	r2, [sp, #16]
  13d5a4:	e58d3014 	str	r3, [sp, #20]
  13d5a8:	e59fb584 	ldr	fp, [pc, #1412]	; 13db34 <malloc+0x5fc>
  13d5ac:	e59f6584 	ldr	r6, [pc, #1412]	; 13db38 <malloc+0x600>
  13d5b0:	e898000c 	ldm	r8, {r2, r3}
  13d5b4:	e28d1010 	add	r1, sp, #16
  13d5b8:	e8910003 	ldm	r1, {r0, r1}
  13d5bc:	e0011003 	and	r1, r1, r3
  13d5c0:	e0000002 	and	r0, r0, r2
  13d5c4:	e1a02000 	mov	r2, r0
  13d5c8:	e1a03001 	mov	r3, r1
  13d5cc:	e1921003 	orrs	r1, r2, r3
  13d5d0:	0a000073 	beq	13d7a4 <malloc+0x26c>
  13d5d4:	e3500000 	cmp	r0, #0
  13d5d8:	1a000048 	bne	13d700 <malloc+0x1c8>
  13d5dc:	e2637000 	rsb	r7, r3, #0
  13d5e0:	e0077003 	and	r7, r7, r3
  13d5e4:	e16f7f17 	clz	r7, r7
  13d5e8:	e267703f 	rsb	r7, r7, #63	; 0x3f
  13d5ec:	e59b300c 	ldr	r3, [fp, #12]
  13d5f0:	e1a09207 	lsl	r9, r7, #4
  13d5f4:	e2899008 	add	r9, r9, #8
  13d5f8:	e3530000 	cmp	r3, #0
  13d5fc:	e0885009 	add	r5, r8, r9
  13d600:	1285a004 	addne	sl, r5, #4
  13d604:	1a000030 	bne	13d6cc <malloc+0x194>
  13d608:	e2873001 	add	r3, r7, #1
  13d60c:	e7984203 	ldr	r4, [r8, r3, lsl #4]
  13d610:	e0882009 	add	r2, r8, r9
  13d614:	e3540000 	cmp	r4, #0
  13d618:	00881203 	addeq	r1, r8, r3, lsl #4
  13d61c:	07882203 	streq	r2, [r8, r3, lsl #4]
  13d620:	05812004 	streq	r2, [r1, #4]
  13d624:	0a000001 	beq	13d630 <malloc+0xf8>
  13d628:	e1540002 	cmp	r4, r2
  13d62c:	1a00009d 	bne	13d8a8 <malloc+0x370>
  13d630:	e7983009 	ldr	r3, [r8, r9]
  13d634:	e3530000 	cmp	r3, #0
  13d638:	0affffdc 	beq	13d5b0 <malloc+0x78>
  13d63c:	e59f24f8 	ldr	r2, [pc, #1272]	; 13db3c <malloc+0x604>
  13d640:	e592c000 	ldr	ip, [r2]
  13d644:	e12fff3c 	blx	ip
  13d648:	e3a03000 	mov	r3, #0
  13d64c:	e592c000 	ldr	ip, [r2]
  13d650:	e5853000 	str	r3, [r5]
  13d654:	e12fff3c 	blx	ip
  13d658:	e5953004 	ldr	r3, [r5, #4]
  13d65c:	e3530000 	cmp	r3, #0
  13d660:	0affffd2 	beq	13d5b0 <malloc+0x78>
  13d664:	e3a000f0 	mov	r0, #240	; 0xf0
  13d668:	ebfffbca 	bl	13c598 <get_rtt_syscall>
  13d66c:	e2503000 	subs	r3, r0, #0
  13d670:	0affffce 	beq	13d5b0 <malloc+0x78>
  13d674:	e3a02001 	mov	r2, #1
  13d678:	e3a01081 	mov	r1, #129	; 0x81
  13d67c:	e1a00005 	mov	r0, r5
  13d680:	e12fff33 	blx	r3
  13d684:	e3700026 	cmn	r0, #38	; 0x26
  13d688:	1affffc8 	bne	13d5b0 <malloc+0x78>
  13d68c:	e3a000f0 	mov	r0, #240	; 0xf0
  13d690:	ebfffbc0 	bl	13c598 <get_rtt_syscall>
  13d694:	e2503000 	subs	r3, r0, #0
  13d698:	0affffc4 	beq	13d5b0 <malloc+0x78>
  13d69c:	e3a02001 	mov	r2, #1
  13d6a0:	e1a00005 	mov	r0, r5
  13d6a4:	e1a01002 	mov	r1, r2
  13d6a8:	e12fff33 	blx	r3
  13d6ac:	eaffffbf 	b	13d5b0 <malloc+0x78>
  13d6b0:	e3540000 	cmp	r4, #0
  13d6b4:	0affffd3 	beq	13d608 <malloc+0xd0>
  13d6b8:	e1a03001 	mov	r3, r1
  13d6bc:	e1a02001 	mov	r2, r1
  13d6c0:	e1a00005 	mov	r0, r5
  13d6c4:	e1a0100a 	mov	r1, sl
  13d6c8:	eb00121b 	bl	141f3c <__wait>
  13d6cc:	e5954000 	ldr	r4, [r5]
  13d6d0:	ea000002 	b	13d6e0 <malloc+0x1a8>
  13d6d4:	e5953000 	ldr	r3, [r5]
  13d6d8:	e1540003 	cmp	r4, r3
  13d6dc:	1afffffa 	bne	13d6cc <malloc+0x194>
  13d6e0:	e1a00004 	mov	r0, r4
  13d6e4:	e3a01001 	mov	r1, #1
  13d6e8:	e1a02005 	mov	r2, r5
  13d6ec:	e5963000 	ldr	r3, [r6]
  13d6f0:	e12fff33 	blx	r3
  13d6f4:	e3500000 	cmp	r0, #0
  13d6f8:	1afffff5 	bne	13d6d4 <malloc+0x19c>
  13d6fc:	eaffffeb 	b	13d6b0 <malloc+0x178>
  13d700:	e2607000 	rsb	r7, r0, #0
  13d704:	e0077000 	and	r7, r7, r0
  13d708:	e16f7f17 	clz	r7, r7
  13d70c:	e267701f 	rsb	r7, r7, #31
  13d710:	eaffffb5 	b	13d5ec <malloc+0xb4>
  13d714:	e2433002 	sub	r3, r3, #2
  13d718:	e59f2420 	ldr	r2, [pc, #1056]	; 13db40 <malloc+0x608>
  13d71c:	e3530c02 	cmp	r3, #512	; 0x200
  13d720:	308231a3 	addcc	r3, r2, r3, lsr #3
  13d724:	208233a3 	addcs	r3, r2, r3, lsr #7
  13d728:	35533004 	ldrbcc	r3, [r3, #-4]
  13d72c:	25533004 	ldrbcs	r3, [r3, #-4]
  13d730:	32833001 	addcc	r3, r3, #1
  13d734:	22833011 	addcs	r3, r3, #17
  13d738:	e58d3018 	str	r3, [sp, #24]
  13d73c:	eaffff8d 	b	13d578 <malloc+0x40>
  13d740:	e3e02000 	mvn	r2, #0
  13d744:	e3a06000 	mov	r6, #0
  13d748:	e3a07000 	mov	r7, #0
  13d74c:	e2833a01 	add	r3, r3, #4096	; 0x1000
  13d750:	e2833007 	add	r3, r3, #7
  13d754:	e3c34eff 	bic	r4, r3, #4080	; 0xff0
  13d758:	e3c4400f 	bic	r4, r4, #15
  13d75c:	e58d2000 	str	r2, [sp]
  13d760:	e1a01004 	mov	r1, r4
  13d764:	e58d6008 	str	r6, [sp, #8]
  13d768:	e58d700c 	str	r7, [sp, #12]
  13d76c:	e3a03022 	mov	r3, #34	; 0x22
  13d770:	e3a02003 	mov	r2, #3
  13d774:	e3a00000 	mov	r0, #0
  13d778:	eb0001ca 	bl	13dea8 <__mmap>
  13d77c:	e3700001 	cmn	r0, #1
  13d780:	0a0000ba 	beq	13da70 <malloc+0x538>
  13d784:	e3a03008 	mov	r3, #8
  13d788:	e2444008 	sub	r4, r4, #8
  13d78c:	e580400c 	str	r4, [r0, #12]
  13d790:	e5803008 	str	r3, [r0, #8]
  13d794:	e2804010 	add	r4, r0, #16
  13d798:	e1a00004 	mov	r0, r4
  13d79c:	e28dd02c 	add	sp, sp, #44	; 0x2c
  13d7a0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13d7a4:	e59b200c 	ldr	r2, [fp, #12]
  13d7a8:	e59d301c 	ldr	r3, [sp, #28]
  13d7ac:	e3520000 	cmp	r2, #0
  13d7b0:	e2833010 	add	r3, r3, #16
  13d7b4:	e59f5388 	ldr	r5, [pc, #904]	; 13db44 <malloc+0x60c>
  13d7b8:	e58d3024 	str	r3, [sp, #36]	; 0x24
  13d7bc:	1a000094 	bne	13da14 <malloc+0x4dc>
  13d7c0:	e28d0024 	add	r0, sp, #36	; 0x24
  13d7c4:	eb001718 	bl	14342c <__expand_heap>
  13d7c8:	e2504000 	subs	r4, r0, #0
  13d7cc:	0a0000b8 	beq	13dab4 <malloc+0x57c>
  13d7d0:	e59f1370 	ldr	r1, [pc, #880]	; 13db48 <malloc+0x610>
  13d7d4:	e3a07001 	mov	r7, #1
  13d7d8:	e5916000 	ldr	r6, [r1]
  13d7dc:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
  13d7e0:	e1540006 	cmp	r4, r6
  13d7e4:	13a02001 	movne	r2, #1
  13d7e8:	e5950000 	ldr	r0, [r5]
  13d7ec:	12433010 	subne	r3, r3, #16
  13d7f0:	12846010 	addne	r6, r4, #16
  13d7f4:	15842008 	strne	r2, [r4, #8]
  13d7f8:	158d3024 	strne	r3, [sp, #36]	; 0x24
  13d7fc:	e0862003 	add	r2, r6, r3
  13d800:	e3500000 	cmp	r0, #0
  13d804:	e1833007 	orr	r3, r3, r7
  13d808:	e9020088 	stmdb	r2, {r3, r7}
  13d80c:	e5812000 	str	r2, [r1]
  13d810:	e5063004 	str	r3, [r6, #-4]
  13d814:	e2464008 	sub	r4, r6, #8
  13d818:	0a000009 	beq	13d844 <malloc+0x30c>
  13d81c:	e59f3318 	ldr	r3, [pc, #792]	; 13db3c <malloc+0x604>
  13d820:	e593c000 	ldr	ip, [r3]
  13d824:	e12fff3c 	blx	ip
  13d828:	e3a02000 	mov	r2, #0
  13d82c:	e593c000 	ldr	ip, [r3]
  13d830:	e5852000 	str	r2, [r5]
  13d834:	e12fff3c 	blx	ip
  13d838:	e5953004 	ldr	r3, [r5, #4]
  13d83c:	e1530002 	cmp	r3, r2
  13d840:	1a000060 	bne	13d9c8 <malloc+0x490>
  13d844:	e3540000 	cmp	r4, #0
  13d848:	0a000088 	beq	13da70 <malloc+0x538>
  13d84c:	e1a00004 	mov	r0, r4
  13d850:	ebfffcf4 	bl	13cc28 <alloc_rev>
  13d854:	e3500000 	cmp	r0, #0
  13d858:	0a00000b 	beq	13d88c <malloc+0x354>
  13d85c:	e5163008 	ldr	r3, [r6, #-8]
  13d860:	e5161004 	ldr	r1, [r6, #-4]
  13d864:	e3c33001 	bic	r3, r3, #1
  13d868:	e0443003 	sub	r3, r4, r3
  13d86c:	e5932004 	ldr	r2, [r3, #4]
  13d870:	e3c22001 	bic	r2, r2, #1
  13d874:	e0822001 	add	r2, r2, r1
  13d878:	e5832004 	str	r2, [r3, #4]
  13d87c:	e5161004 	ldr	r1, [r6, #-4]
  13d880:	e3c11001 	bic	r1, r1, #1
  13d884:	e7842001 	str	r2, [r4, r1]
  13d888:	e1a04003 	mov	r4, r3
  13d88c:	e1a00004 	mov	r0, r4
  13d890:	e59d101c 	ldr	r1, [sp, #28]
  13d894:	e2844008 	add	r4, r4, #8
  13d898:	ebffff15 	bl	13d4f4 <trim>
  13d89c:	e1a00004 	mov	r0, r4
  13d8a0:	e28dd02c 	add	sp, sp, #44	; 0x2c
  13d8a4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13d8a8:	e3570027 	cmp	r7, #39	; 0x27
  13d8ac:	da000041 	ble	13d9b8 <malloc+0x480>
  13d8b0:	e59d3018 	ldr	r3, [sp, #24]
  13d8b4:	e59d001c 	ldr	r0, [sp, #28]
  13d8b8:	e2833002 	add	r3, r3, #2
  13d8bc:	e1570003 	cmp	r7, r3
  13d8c0:	da00003a 	ble	13d9b0 <malloc+0x478>
  13d8c4:	e5942004 	ldr	r2, [r4, #4]
  13d8c8:	e3c22001 	bic	r2, r2, #1
  13d8cc:	e0421000 	sub	r1, r2, r0
  13d8d0:	e1a03221 	lsr	r3, r1, #4
  13d8d4:	e2433001 	sub	r3, r3, #1
  13d8d8:	e3530020 	cmp	r3, #32
  13d8dc:	9a000035 	bls	13d9b8 <malloc+0x480>
  13d8e0:	e3530c02 	cmp	r3, #512	; 0x200
  13d8e4:	2a000065 	bcs	13da80 <malloc+0x548>
  13d8e8:	e59fc250 	ldr	ip, [pc, #592]	; 13db40 <malloc+0x608>
  13d8ec:	e08c31a3 	add	r3, ip, r3, lsr #3
  13d8f0:	e5533004 	ldrb	r3, [r3, #-4]
  13d8f4:	e1570003 	cmp	r7, r3
  13d8f8:	1a00002e 	bne	13d9b8 <malloc+0x480>
  13d8fc:	e594c00c 	ldr	ip, [r4, #12]
  13d900:	e594e008 	ldr	lr, [r4, #8]
  13d904:	e0843000 	add	r3, r4, r0
  13d908:	e583c00c 	str	ip, [r3, #12]
  13d90c:	e583e008 	str	lr, [r3, #8]
  13d910:	e58c3008 	str	r3, [ip, #8]
  13d914:	e593e008 	ldr	lr, [r3, #8]
  13d918:	e380c001 	orr	ip, r0, #1
  13d91c:	e58e300c 	str	r3, [lr, #12]
  13d920:	e784c000 	str	ip, [r4, r0]
  13d924:	e5831004 	str	r1, [r3, #4]
  13d928:	e7841002 	str	r1, [r4, r2]
  13d92c:	e584c004 	str	ip, [r4, #4]
  13d930:	e5953000 	ldr	r3, [r5]
  13d934:	e3530000 	cmp	r3, #0
  13d938:	0affffd3 	beq	13d88c <malloc+0x354>
  13d93c:	e59f31f8 	ldr	r3, [pc, #504]	; 13db3c <malloc+0x604>
  13d940:	e593c000 	ldr	ip, [r3]
  13d944:	e12fff3c 	blx	ip
  13d948:	e3a02000 	mov	r2, #0
  13d94c:	e593c000 	ldr	ip, [r3]
  13d950:	e5852000 	str	r2, [r5]
  13d954:	e12fff3c 	blx	ip
  13d958:	e5953004 	ldr	r3, [r5, #4]
  13d95c:	e1530002 	cmp	r3, r2
  13d960:	0affffc9 	beq	13d88c <malloc+0x354>
  13d964:	e3a000f0 	mov	r0, #240	; 0xf0
  13d968:	ebfffb0a 	bl	13c598 <get_rtt_syscall>
  13d96c:	e2503000 	subs	r3, r0, #0
  13d970:	0affffc5 	beq	13d88c <malloc+0x354>
  13d974:	e3a02001 	mov	r2, #1
  13d978:	e3a01081 	mov	r1, #129	; 0x81
  13d97c:	e1a00005 	mov	r0, r5
  13d980:	e12fff33 	blx	r3
  13d984:	e3700026 	cmn	r0, #38	; 0x26
  13d988:	1affffbf 	bne	13d88c <malloc+0x354>
  13d98c:	e3a000f0 	mov	r0, #240	; 0xf0
  13d990:	ebfffb00 	bl	13c598 <get_rtt_syscall>
  13d994:	e2503000 	subs	r3, r0, #0
  13d998:	0affffbb 	beq	13d88c <malloc+0x354>
  13d99c:	e3a02001 	mov	r2, #1
  13d9a0:	e1a00005 	mov	r0, r5
  13d9a4:	e1a01002 	mov	r1, r2
  13d9a8:	e12fff33 	blx	r3
  13d9ac:	eaffffb6 	b	13d88c <malloc+0x354>
  13d9b0:	e357003f 	cmp	r7, #63	; 0x3f
  13d9b4:	0a000038 	beq	13da9c <malloc+0x564>
  13d9b8:	e1a01007 	mov	r1, r7
  13d9bc:	e1a00004 	mov	r0, r4
  13d9c0:	ebfffbae 	bl	13c880 <unbin>
  13d9c4:	eaffffd9 	b	13d930 <malloc+0x3f8>
  13d9c8:	e3a000f0 	mov	r0, #240	; 0xf0
  13d9cc:	ebfffaf1 	bl	13c598 <get_rtt_syscall>
  13d9d0:	e2503000 	subs	r3, r0, #0
  13d9d4:	0affff9a 	beq	13d844 <malloc+0x30c>
  13d9d8:	e1a02007 	mov	r2, r7
  13d9dc:	e3a01081 	mov	r1, #129	; 0x81
  13d9e0:	e59f015c 	ldr	r0, [pc, #348]	; 13db44 <malloc+0x60c>
  13d9e4:	e12fff33 	blx	r3
  13d9e8:	e3700026 	cmn	r0, #38	; 0x26
  13d9ec:	1affff94 	bne	13d844 <malloc+0x30c>
  13d9f0:	e3a000f0 	mov	r0, #240	; 0xf0
  13d9f4:	ebfffae7 	bl	13c598 <get_rtt_syscall>
  13d9f8:	e2503000 	subs	r3, r0, #0
  13d9fc:	0affff90 	beq	13d844 <malloc+0x30c>
  13da00:	e1a02007 	mov	r2, r7
  13da04:	e1a01007 	mov	r1, r7
  13da08:	e59f0134 	ldr	r0, [pc, #308]	; 13db44 <malloc+0x60c>
  13da0c:	e12fff33 	blx	r3
  13da10:	eaffff8b 	b	13d844 <malloc+0x30c>
  13da14:	e1a06005 	mov	r6, r5
  13da18:	e59f7118 	ldr	r7, [pc, #280]	; 13db38 <malloc+0x600>
  13da1c:	e2858004 	add	r8, r5, #4
  13da20:	e5954000 	ldr	r4, [r5]
  13da24:	ea000002 	b	13da34 <malloc+0x4fc>
  13da28:	e5953000 	ldr	r3, [r5]
  13da2c:	e1540003 	cmp	r4, r3
  13da30:	1afffffa 	bne	13da20 <malloc+0x4e8>
  13da34:	e1a00004 	mov	r0, r4
  13da38:	e3a01001 	mov	r1, #1
  13da3c:	e1a02006 	mov	r2, r6
  13da40:	e5973000 	ldr	r3, [r7]
  13da44:	e12fff33 	blx	r3
  13da48:	e3500000 	cmp	r0, #0
  13da4c:	1afffff5 	bne	13da28 <malloc+0x4f0>
  13da50:	e3540000 	cmp	r4, #0
  13da54:	0affff59 	beq	13d7c0 <malloc+0x288>
  13da58:	e1a03001 	mov	r3, r1
  13da5c:	e1a02001 	mov	r2, r1
  13da60:	e59f00dc 	ldr	r0, [pc, #220]	; 13db44 <malloc+0x60c>
  13da64:	e1a01008 	mov	r1, r8
  13da68:	eb001133 	bl	141f3c <__wait>
  13da6c:	eaffffeb 	b	13da20 <malloc+0x4e8>
  13da70:	e3a04000 	mov	r4, #0
  13da74:	e1a00004 	mov	r0, r4
  13da78:	e28dd02c 	add	sp, sp, #44	; 0x2c
  13da7c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13da80:	e3530b07 	cmp	r3, #7168	; 0x1c00
  13da84:	959fc0b4 	ldrls	ip, [pc, #180]	; 13db40 <malloc+0x608>
  13da88:	83a0303f 	movhi	r3, #63	; 0x3f
  13da8c:	908c33a3 	addls	r3, ip, r3, lsr #7
  13da90:	95533004 	ldrbls	r3, [r3, #-4]
  13da94:	92833010 	addls	r3, r3, #16
  13da98:	eaffff95 	b	13d8f4 <malloc+0x3bc>
  13da9c:	e5942004 	ldr	r2, [r4, #4]
  13daa0:	e3c22001 	bic	r2, r2, #1
  13daa4:	e0421000 	sub	r1, r2, r0
  13daa8:	e3510907 	cmp	r1, #114688	; 0x1c000
  13daac:	8affff87 	bhi	13d8d0 <malloc+0x398>
  13dab0:	eaffffc0 	b	13d9b8 <malloc+0x480>
  13dab4:	e5953000 	ldr	r3, [r5]
  13dab8:	e3530000 	cmp	r3, #0
  13dabc:	0affffeb 	beq	13da70 <malloc+0x538>
  13dac0:	e59f3074 	ldr	r3, [pc, #116]	; 13db3c <malloc+0x604>
  13dac4:	e593c000 	ldr	ip, [r3]
  13dac8:	e12fff3c 	blx	ip
  13dacc:	e5854000 	str	r4, [r5]
  13dad0:	e593c000 	ldr	ip, [r3]
  13dad4:	e12fff3c 	blx	ip
  13dad8:	e5953004 	ldr	r3, [r5, #4]
  13dadc:	e3530000 	cmp	r3, #0
  13dae0:	0affffe2 	beq	13da70 <malloc+0x538>
  13dae4:	e3a000f0 	mov	r0, #240	; 0xf0
  13dae8:	ebfffaaa 	bl	13c598 <get_rtt_syscall>
  13daec:	e2503000 	subs	r3, r0, #0
  13daf0:	0affffde 	beq	13da70 <malloc+0x538>
  13daf4:	e3a02001 	mov	r2, #1
  13daf8:	e3a01081 	mov	r1, #129	; 0x81
  13dafc:	e59f0040 	ldr	r0, [pc, #64]	; 13db44 <malloc+0x60c>
  13db00:	e12fff33 	blx	r3
  13db04:	e3700026 	cmn	r0, #38	; 0x26
  13db08:	1affffd8 	bne	13da70 <malloc+0x538>
  13db0c:	e3a000f0 	mov	r0, #240	; 0xf0
  13db10:	ebfffaa0 	bl	13c598 <get_rtt_syscall>
  13db14:	e2503000 	subs	r3, r0, #0
  13db18:	0affffd4 	beq	13da70 <malloc+0x538>
  13db1c:	e3a02001 	mov	r2, #1
  13db20:	e59f001c 	ldr	r0, [pc, #28]	; 13db44 <malloc+0x60c>
  13db24:	e1a01002 	mov	r1, r2
  13db28:	e12fff33 	blx	r3
  13db2c:	eaffff19 	b	13d798 <malloc+0x260>
  13db30:	0014fc30 	.word	0x0014fc30
  13db34:	00576e84 	.word	0x00576e84
  13db38:	0014e3d8 	.word	0x0014e3d8
  13db3c:	0014e3d4 	.word	0x0014e3d4
  13db40:	0014cf20 	.word	0x0014cf20
  13db44:	0014fc28 	.word	0x0014fc28
  13db48:	0014fc24 	.word	0x0014fc24

0013db4c <calloc>:
  13db4c:	e3510000 	cmp	r1, #0
  13db50:	e92d4bf0 	push	{r4, r5, r6, r7, r8, r9, fp, lr}
  13db54:	0a000002 	beq	13db64 <calloc+0x18>
  13db58:	e0832190 	umull	r2, r3, r0, r1
  13db5c:	e3530000 	cmp	r3, #0
  13db60:	1a000013 	bne	13dbb4 <calloc+0x68>
  13db64:	e0040190 	mul	r4, r0, r1
  13db68:	e1a00004 	mov	r0, r4
  13db6c:	ebfffe71 	bl	13d538 <malloc>
  13db70:	e2509000 	subs	r9, r0, #0
  13db74:	0a000012 	beq	13dbc4 <calloc+0x78>
  13db78:	e59f30a0 	ldr	r3, [pc, #160]	; 13dc20 <calloc+0xd4>
  13db7c:	e5933000 	ldr	r3, [r3]
  13db80:	e3530000 	cmp	r3, #0
  13db84:	1a000005 	bne	13dba0 <calloc+0x54>
  13db88:	e5193004 	ldr	r3, [r9, #-4]
  13db8c:	e3130001 	tst	r3, #1
  13db90:	0a00000b 	beq	13dbc4 <calloc+0x78>
  13db94:	e59f3088 	ldr	r3, [pc, #136]	; 13dc24 <calloc+0xd8>
  13db98:	e1540003 	cmp	r4, r3
  13db9c:	8a00000a 	bhi	13dbcc <calloc+0x80>
  13dba0:	e1a02004 	mov	r2, r4
  13dba4:	e1a00009 	mov	r0, r9
  13dba8:	e8bd4bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
  13dbac:	e3a01000 	mov	r1, #0
  13dbb0:	ea000e29 	b	14145c <memset>
  13dbb4:	ebffed41 	bl	1390c0 <__errno_location>
  13dbb8:	e3a0300c 	mov	r3, #12
  13dbbc:	e3a09000 	mov	r9, #0
  13dbc0:	e5803000 	str	r3, [r0]
  13dbc4:	e1a00009 	mov	r0, r9
  13dbc8:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
  13dbcc:	e1a08003 	mov	r8, r3
  13dbd0:	e0890004 	add	r0, r9, r4
  13dbd4:	e0002003 	and	r2, r0, r3
  13dbd8:	e0400002 	sub	r0, r0, r2
  13dbdc:	e3a01000 	mov	r1, #0
  13dbe0:	eb000e1d 	bl	14145c <memset>
  13dbe4:	e0404009 	sub	r4, r0, r9
  13dbe8:	e1540008 	cmp	r4, r8
  13dbec:	9affffeb 	bls	13dba0 <calloc+0x54>
  13dbf0:	e3a02a01 	mov	r2, #4096	; 0x1000
  13dbf4:	e9100030 	ldmdb	r0, {r4, r5}
  13dbf8:	e2407010 	sub	r7, r0, #16
  13dbfc:	e89700c0 	ldm	r7, {r6, r7}
  13dc00:	e184b006 	orr	fp, r4, r6
  13dc04:	e185c007 	orr	ip, r5, r7
  13dc08:	e19b300c 	orrs	r3, fp, ip
  13dc0c:	1afffff1 	bne	13dbd8 <calloc+0x8c>
  13dc10:	e2522010 	subs	r2, r2, #16
  13dc14:	e2400010 	sub	r0, r0, #16
  13dc18:	1afffff5 	bne	13dbf4 <calloc+0xa8>
  13dc1c:	eaffffed 	b	13dbd8 <calloc+0x8c>
  13dc20:	00576ec8 	.word	0x00576ec8
  13dc24:	00000fff 	.word	0x00000fff

0013dc28 <free>:
  13dc28:	e2502000 	subs	r2, r0, #0
  13dc2c:	012fff1e 	bxeq	lr
  13dc30:	e5123004 	ldr	r3, [r2, #-4]
  13dc34:	e2420008 	sub	r0, r2, #8
  13dc38:	e3130001 	tst	r3, #1
  13dc3c:	0a000000 	beq	13dc44 <free+0x1c>
  13dc40:	eafffc9a 	b	13ceb0 <__bin_chunk>
  13dc44:	e5121008 	ldr	r1, [r2, #-8]
  13dc48:	e3c33001 	bic	r3, r3, #1
  13dc4c:	e3110001 	tst	r1, #1
  13dc50:	e0400001 	sub	r0, r0, r1
  13dc54:	e0831001 	add	r1, r3, r1
  13dc58:	0a000000 	beq	13dc60 <free+0x38>
  13dc5c:	e7f000f0 	.word	0xe7f000f0
  13dc60:	ea0000f6 	b	13e040 <__munmap>

0013dc64 <realloc>:
  13dc64:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  13dc68:	e2505000 	subs	r5, r0, #0
  13dc6c:	e24dd008 	sub	sp, sp, #8
  13dc70:	e58d1004 	str	r1, [sp, #4]
  13dc74:	0a000034 	beq	13dd4c <realloc+0xe8>
  13dc78:	e28d0004 	add	r0, sp, #4
  13dc7c:	ebfffae5 	bl	13c818 <adjust_size>
  13dc80:	e3500000 	cmp	r0, #0
  13dc84:	ba00005b 	blt	13ddf8 <realloc+0x194>
  13dc88:	e5153004 	ldr	r3, [r5, #-4]
  13dc8c:	e2459008 	sub	r9, r5, #8
  13dc90:	e3130001 	tst	r3, #1
  13dc94:	e3c36001 	bic	r6, r3, #1
  13dc98:	0a000010 	beq	13dce0 <realloc+0x7c>
  13dc9c:	e7992006 	ldr	r2, [r9, r6]
  13dca0:	e0894006 	add	r4, r9, r6
  13dca4:	e1530002 	cmp	r3, r2
  13dca8:	0a000000 	beq	13dcb0 <realloc+0x4c>
  13dcac:	e7f000f0 	.word	0xe7f000f0
  13dcb0:	e59d1004 	ldr	r1, [sp, #4]
  13dcb4:	e1510006 	cmp	r1, r6
  13dcb8:	93866001 	orrls	r6, r6, #1
  13dcbc:	95056004 	strls	r6, [r5, #-4]
  13dcc0:	95846000 	strls	r6, [r4]
  13dcc4:	8a000038 	bhi	13ddac <realloc+0x148>
  13dcc8:	e1a00009 	mov	r0, r9
  13dccc:	ebfffe08 	bl	13d4f4 <trim>
  13dcd0:	e1a07005 	mov	r7, r5
  13dcd4:	e1a00007 	mov	r0, r7
  13dcd8:	e28dd008 	add	sp, sp, #8
  13dcdc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
  13dce0:	e5158008 	ldr	r8, [r5, #-8]
  13dce4:	e59d4004 	ldr	r4, [sp, #4]
  13dce8:	e3180001 	tst	r8, #1
  13dcec:	e086a008 	add	sl, r6, r8
  13dcf0:	e0884004 	add	r4, r8, r4
  13dcf4:	1a00001a 	bne	13dd64 <realloc+0x100>
  13dcf8:	e3540a01 	cmp	r4, #4096	; 0x1000
  13dcfc:	3a00001b 	bcc	13dd70 <realloc+0x10c>
  13dd00:	e2844eff 	add	r4, r4, #4080	; 0xff0
  13dd04:	e284400f 	add	r4, r4, #15
  13dd08:	e3c44eff 	bic	r4, r4, #4080	; 0xff0
  13dd0c:	e3c4400f 	bic	r4, r4, #15
  13dd10:	e15a0004 	cmp	sl, r4
  13dd14:	01a07005 	moveq	r7, r5
  13dd18:	0affffed 	beq	13dcd4 <realloc+0x70>
  13dd1c:	e1a0100a 	mov	r1, sl
  13dd20:	e0490008 	sub	r0, r9, r8
  13dd24:	e3a03001 	mov	r3, #1
  13dd28:	e1a02004 	mov	r2, r4
  13dd2c:	eb00009a 	bl	13df9c <__mremap>
  13dd30:	e3700001 	cmn	r0, #1
  13dd34:	0a000031 	beq	13de00 <realloc+0x19c>
  13dd38:	e0800008 	add	r0, r0, r8
  13dd3c:	e0444008 	sub	r4, r4, r8
  13dd40:	e5804004 	str	r4, [r0, #4]
  13dd44:	e2807008 	add	r7, r0, #8
  13dd48:	eaffffe1 	b	13dcd4 <realloc+0x70>
  13dd4c:	e1a00001 	mov	r0, r1
  13dd50:	ebfffdf8 	bl	13d538 <malloc>
  13dd54:	e1a07000 	mov	r7, r0
  13dd58:	e1a00007 	mov	r0, r7
  13dd5c:	e28dd008 	add	sp, sp, #8
  13dd60:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
  13dd64:	e7f000f0 	.word	0xe7f000f0
  13dd68:	e3540a01 	cmp	r4, #4096	; 0x1000
  13dd6c:	2affffe3 	bcs	13dd00 <realloc+0x9c>
  13dd70:	e59d0004 	ldr	r0, [sp, #4]
  13dd74:	e2400008 	sub	r0, r0, #8
  13dd78:	ebfffdee 	bl	13d538 <malloc>
  13dd7c:	e2507000 	subs	r7, r0, #0
  13dd80:	0affffde 	beq	13dd00 <realloc+0x9c>
  13dd84:	e59d6004 	ldr	r6, [sp, #4]
  13dd88:	e2462008 	sub	r2, r6, #8
  13dd8c:	e1a01005 	mov	r1, r5
  13dd90:	e1a00007 	mov	r0, r7
  13dd94:	eb000c78 	bl	140f7c <memcpy>
  13dd98:	e1a00005 	mov	r0, r5
  13dd9c:	ebffffa1 	bl	13dc28 <free>
  13dda0:	e1a00007 	mov	r0, r7
  13dda4:	e28dd008 	add	sp, sp, #8
  13dda8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
  13ddac:	e1a00004 	mov	r0, r4
  13ddb0:	ebfffafc 	bl	13c9a8 <alloc_fwd>
  13ddb4:	e3500000 	cmp	r0, #0
  13ddb8:	01a03006 	moveq	r3, r6
  13ddbc:	15943004 	ldrne	r3, [r4, #4]
  13ddc0:	059d1004 	ldreq	r1, [sp, #4]
  13ddc4:	13c33001 	bicne	r3, r3, #1
  13ddc8:	159d1004 	ldrne	r1, [sp, #4]
  13ddcc:	10844003 	addne	r4, r4, r3
  13ddd0:	10833006 	addne	r3, r3, r6
  13ddd4:	e1530001 	cmp	r3, r1
  13ddd8:	e3833001 	orr	r3, r3, #1
  13dddc:	e5053004 	str	r3, [r5, #-4]
  13dde0:	e5843000 	str	r3, [r4]
  13dde4:	2affffb7 	bcs	13dcc8 <realloc+0x64>
  13dde8:	e2410008 	sub	r0, r1, #8
  13ddec:	ebfffdd1 	bl	13d538 <malloc>
  13ddf0:	e2507000 	subs	r7, r0, #0
  13ddf4:	1affffe3 	bne	13dd88 <realloc+0x124>
  13ddf8:	e3a07000 	mov	r7, #0
  13ddfc:	eaffffb4 	b	13dcd4 <realloc+0x70>
  13de00:	e59d1004 	ldr	r1, [sp, #4]
  13de04:	eafffff7 	b	13dde8 <realloc+0x184>

0013de08 <__malloc_donate>:
  13de08:	e2602008 	rsb	r2, r0, #8
  13de0c:	e201300f 	and	r3, r1, #15
  13de10:	e202200f 	and	r2, r2, #15
  13de14:	e2833008 	add	r3, r3, #8
  13de18:	e0833002 	add	r3, r3, r2
  13de1c:	e041c000 	sub	ip, r1, r0
  13de20:	e15c0003 	cmp	ip, r3
  13de24:	912fff1e 	bxls	lr
  13de28:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  13de2c:	e3a0e001 	mov	lr, #1
  13de30:	e2823008 	add	r3, r2, #8
  13de34:	e0803003 	add	r3, r0, r3
  13de38:	e3c1100f 	bic	r1, r1, #15
  13de3c:	e041c003 	sub	ip, r1, r3
  13de40:	e18cc00e 	orr	ip, ip, lr
  13de44:	e501e004 	str	lr, [r1, #-4]
  13de48:	e0800002 	add	r0, r0, r2
  13de4c:	e503e008 	str	lr, [r3, #-8]
  13de50:	e501c008 	str	ip, [r1, #-8]
  13de54:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  13de58:	e503c004 	str	ip, [r3, #-4]
  13de5c:	eafffc13 	b	13ceb0 <__bin_chunk>

0013de60 <__madvise>:
  13de60:	e92d4070 	push	{r4, r5, r6, lr}
  13de64:	e1a04000 	mov	r4, r0
  13de68:	e3a000dc 	mov	r0, #220	; 0xdc
  13de6c:	e1a05001 	mov	r5, r1
  13de70:	e1a06002 	mov	r6, r2
  13de74:	ebfff9c7 	bl	13c598 <get_rtt_syscall>
  13de78:	e2503000 	subs	r3, r0, #0
  13de7c:	0a000005 	beq	13de98 <__madvise+0x38>
  13de80:	e1a02006 	mov	r2, r6
  13de84:	e1a01005 	mov	r1, r5
  13de88:	e1a00004 	mov	r0, r4
  13de8c:	e12fff33 	blx	r3
  13de90:	e8bd4070 	pop	{r4, r5, r6, lr}
  13de94:	eafff9f4 	b	13c66c <__syscall_ret>
  13de98:	e1a00003 	mov	r0, r3
  13de9c:	eafffffb 	b	13de90 <__madvise+0x30>

0013dea0 <dummy>:
  13dea0:	e12fff1e 	bx	lr
  13dea4:	00000000 	andeq	r0, r0, r0

0013dea8 <__mmap>:
  13dea8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  13deac:	e28f50dc 	add	r5, pc, #220	; 0xdc
  13deb0:	e8950030 	ldm	r5, {r4, r5}
  13deb4:	e24dd00c 	sub	sp, sp, #12
  13deb8:	e28d7038 	add	r7, sp, #56	; 0x38
  13debc:	e89700c0 	ldm	r7, {r6, r7}
  13dec0:	e0048006 	and	r8, r4, r6
  13dec4:	e0059007 	and	r9, r5, r7
  13dec8:	e198c009 	orrs	ip, r8, r9
  13decc:	e59db030 	ldr	fp, [sp, #48]	; 0x30
  13ded0:	1a000024 	bne	13df68 <__mmap+0xc0>
  13ded4:	e371010a 	cmn	r1, #-2147483646	; 0x80000002
  13ded8:	e1a08001 	mov	r8, r1
  13dedc:	8a00001b 	bhi	13df50 <__mmap+0xa8>
  13dee0:	e3130010 	tst	r3, #16
  13dee4:	e1a09000 	mov	r9, r0
  13dee8:	e1a0a002 	mov	sl, r2
  13deec:	e1a05003 	mov	r5, r3
  13def0:	1a000022 	bne	13df80 <__mmap+0xd8>
  13def4:	e3a000c0 	mov	r0, #192	; 0xc0
  13def8:	ebfff9a6 	bl	13c598 <get_rtt_syscall>
  13defc:	e1a03626 	lsr	r3, r6, #12
  13df00:	e2504000 	subs	r4, r0, #0
  13df04:	e1833a07 	orr	r3, r3, r7, lsl #20
  13df08:	0a00001e 	beq	13df88 <__mmap+0xe0>
  13df0c:	e58d3004 	str	r3, [sp, #4]
  13df10:	e58db000 	str	fp, [sp]
  13df14:	e1a0200a 	mov	r2, sl
  13df18:	e1a01008 	mov	r1, r8
  13df1c:	e1a03005 	mov	r3, r5
  13df20:	e1a00009 	mov	r0, r9
  13df24:	e12fff34 	blx	r4
  13df28:	e3590000 	cmp	r9, #0
  13df2c:	03700001 	cmneq	r0, #1
  13df30:	1a000003 	bne	13df44 <__mmap+0x9c>
  13df34:	e2055030 	and	r5, r5, #48	; 0x30
  13df38:	e3550020 	cmp	r5, #32
  13df3c:	03e0000b 	mvneq	r0, #11
  13df40:	13e00000 	mvnne	r0, #0
  13df44:	e28dd00c 	add	sp, sp, #12
  13df48:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  13df4c:	eafff9c6 	b	13c66c <__syscall_ret>
  13df50:	ebffec5a 	bl	1390c0 <__errno_location>
  13df54:	e3a0300c 	mov	r3, #12
  13df58:	e5803000 	str	r3, [r0]
  13df5c:	e3e00000 	mvn	r0, #0
  13df60:	e28dd00c 	add	sp, sp, #12
  13df64:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13df68:	ebffec54 	bl	1390c0 <__errno_location>
  13df6c:	e3a03016 	mov	r3, #22
  13df70:	e5803000 	str	r3, [r0]
  13df74:	e3e00000 	mvn	r0, #0
  13df78:	e28dd00c 	add	sp, sp, #12
  13df7c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13df80:	eb00139d 	bl	142dfc <__vm_wait>
  13df84:	eaffffda 	b	13def4 <__mmap+0x4c>
  13df88:	e1a00004 	mov	r0, r4
  13df8c:	eaffffec 	b	13df44 <__mmap+0x9c>
  13df90:	00000fff 	.word	0x00000fff
  13df94:	fffff000 	.word	0xfffff000

0013df98 <dummy>:
  13df98:	e12fff1e 	bx	lr

0013df9c <__mremap>:
  13df9c:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)
  13dfa0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  13dfa4:	e372010a 	cmn	r2, #-2147483646	; 0x80000002
  13dfa8:	e24dd014 	sub	sp, sp, #20
  13dfac:	8a00001b 	bhi	13e020 <__mremap+0x84>
  13dfb0:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  13dfb4:	e1a05002 	mov	r5, r2
  13dfb8:	e2136002 	ands	r6, r3, #2
  13dfbc:	e1a07000 	mov	r7, r0
  13dfc0:	e1a08001 	mov	r8, r1
  13dfc4:	1a000010 	bne	13e00c <__mremap+0x70>
  13dfc8:	e3a000a3 	mov	r0, #163	; 0xa3
  13dfcc:	ebfff971 	bl	13c598 <get_rtt_syscall>
  13dfd0:	e2504000 	subs	r4, r0, #0
  13dfd4:	0a000016 	beq	13e034 <__mremap+0x98>
  13dfd8:	e58d6000 	str	r6, [sp]
  13dfdc:	e1a02005 	mov	r2, r5
  13dfe0:	e1a01008 	mov	r1, r8
  13dfe4:	e1a00007 	mov	r0, r7
  13dfe8:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  13dfec:	e12fff34 	blx	r4
  13dff0:	ebfff99d 	bl	13c66c <__syscall_ret>
  13dff4:	e1a03000 	mov	r3, r0
  13dff8:	e1a00003 	mov	r0, r3
  13dffc:	e28dd014 	add	sp, sp, #20
  13e000:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
  13e004:	e28dd004 	add	sp, sp, #4
  13e008:	e12fff1e 	bx	lr
  13e00c:	eb00137a 	bl	142dfc <__vm_wait>
  13e010:	e28d3030 	add	r3, sp, #48	; 0x30
  13e014:	e58d300c 	str	r3, [sp, #12]
  13e018:	e59d6030 	ldr	r6, [sp, #48]	; 0x30
  13e01c:	eaffffe9 	b	13dfc8 <__mremap+0x2c>
  13e020:	ebffec26 	bl	1390c0 <__errno_location>
  13e024:	e3a0200c 	mov	r2, #12
  13e028:	e3e03000 	mvn	r3, #0
  13e02c:	e5802000 	str	r2, [r0]
  13e030:	eafffff0 	b	13dff8 <__mremap+0x5c>
  13e034:	e1a00004 	mov	r0, r4
  13e038:	eaffffec 	b	13dff0 <__mremap+0x54>

0013e03c <dummy>:
  13e03c:	e12fff1e 	bx	lr

0013e040 <__munmap>:
  13e040:	e92d4070 	push	{r4, r5, r6, lr}
  13e044:	e1a04000 	mov	r4, r0
  13e048:	e1a05001 	mov	r5, r1
  13e04c:	eb00136a 	bl	142dfc <__vm_wait>
  13e050:	e3a0005b 	mov	r0, #91	; 0x5b
  13e054:	ebfff94f 	bl	13c598 <get_rtt_syscall>
  13e058:	e2503000 	subs	r3, r0, #0
  13e05c:	0a000004 	beq	13e074 <__munmap+0x34>
  13e060:	e1a01005 	mov	r1, r5
  13e064:	e1a00004 	mov	r0, r4
  13e068:	e12fff33 	blx	r3
  13e06c:	e8bd4070 	pop	{r4, r5, r6, lr}
  13e070:	eafff97d 	b	13c66c <__syscall_ret>
  13e074:	e1a00003 	mov	r0, r3
  13e078:	eafffffb 	b	13e06c <__munmap+0x2c>

0013e07c <accept>:
  13e07c:	e3a0c000 	mov	ip, #0
  13e080:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  13e084:	e24dd014 	sub	sp, sp, #20
  13e088:	e1a03002 	mov	r3, r2
  13e08c:	e58dc008 	str	ip, [sp, #8]
  13e090:	e1a02001 	mov	r2, r1
  13e094:	e58dc004 	str	ip, [sp, #4]
  13e098:	e1a01000 	mov	r1, r0
  13e09c:	e58dc000 	str	ip, [sp]
  13e0a0:	e59f000c 	ldr	r0, [pc, #12]	; 13e0b4 <accept+0x38>
  13e0a4:	eb000fa3 	bl	141f38 <__syscall_cp>
  13e0a8:	e28dd014 	add	sp, sp, #20
  13e0ac:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  13e0b0:	eafff96d 	b	13c66c <__syscall_ret>
  13e0b4:	0000011d 	.word	0x0000011d

0013e0b8 <bind>:
  13e0b8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  13e0bc:	e1a05000 	mov	r5, r0
  13e0c0:	e24dd00c 	sub	sp, sp, #12
  13e0c4:	e59f0040 	ldr	r0, [pc, #64]	; 13e10c <bind+0x54>
  13e0c8:	e1a06001 	mov	r6, r1
  13e0cc:	e1a07002 	mov	r7, r2
  13e0d0:	ebfff930 	bl	13c598 <get_rtt_syscall>
  13e0d4:	e2504000 	subs	r4, r0, #0
  13e0d8:	0a000009 	beq	13e104 <bind+0x4c>
  13e0dc:	e3a03000 	mov	r3, #0
  13e0e0:	e1a02007 	mov	r2, r7
  13e0e4:	e1a01006 	mov	r1, r6
  13e0e8:	e1a00005 	mov	r0, r5
  13e0ec:	e58d3004 	str	r3, [sp, #4]
  13e0f0:	e58d3000 	str	r3, [sp]
  13e0f4:	e12fff34 	blx	r4
  13e0f8:	e28dd00c 	add	sp, sp, #12
  13e0fc:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
  13e100:	eafff959 	b	13c66c <__syscall_ret>
  13e104:	e1a00004 	mov	r0, r4
  13e108:	eafffffa 	b	13e0f8 <bind+0x40>
  13e10c:	0000011a 	.word	0x0000011a

0013e110 <connect>:
  13e110:	e3a0c000 	mov	ip, #0
  13e114:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  13e118:	e24dd014 	sub	sp, sp, #20
  13e11c:	e1a03002 	mov	r3, r2
  13e120:	e58dc008 	str	ip, [sp, #8]
  13e124:	e1a02001 	mov	r2, r1
  13e128:	e58dc004 	str	ip, [sp, #4]
  13e12c:	e1a01000 	mov	r1, r0
  13e130:	e58dc000 	str	ip, [sp]
  13e134:	e59f000c 	ldr	r0, [pc, #12]	; 13e148 <connect+0x38>
  13e138:	eb000f7e 	bl	141f38 <__syscall_cp>
  13e13c:	e28dd014 	add	sp, sp, #20
  13e140:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  13e144:	eafff948 	b	13c66c <__syscall_ret>
  13e148:	0000011b 	.word	0x0000011b

0013e14c <htonl>:
  13e14c:	e0203860 	eor	r3, r0, r0, ror #16
  13e150:	e1a03423 	lsr	r3, r3, #8
  13e154:	e3c33cff 	bic	r3, r3, #65280	; 0xff00
  13e158:	e0230460 	eor	r0, r3, r0, ror #8
  13e15c:	e12fff1e 	bx	lr

0013e160 <htons>:
  13e160:	e1a03420 	lsr	r3, r0, #8
  13e164:	e1830400 	orr	r0, r3, r0, lsl #8
  13e168:	e1a00800 	lsl	r0, r0, #16
  13e16c:	e1a00820 	lsr	r0, r0, #16
  13e170:	e12fff1e 	bx	lr

0013e174 <listen>:
  13e174:	e92d4070 	push	{r4, r5, r6, lr}
  13e178:	e1a05000 	mov	r5, r0
  13e17c:	e24dd008 	sub	sp, sp, #8
  13e180:	e3a00f47 	mov	r0, #284	; 0x11c
  13e184:	e1a06001 	mov	r6, r1
  13e188:	ebfff902 	bl	13c598 <get_rtt_syscall>
  13e18c:	e2504000 	subs	r4, r0, #0
  13e190:	0a000009 	beq	13e1bc <listen+0x48>
  13e194:	e3a03000 	mov	r3, #0
  13e198:	e1a01006 	mov	r1, r6
  13e19c:	e1a00005 	mov	r0, r5
  13e1a0:	e58d3004 	str	r3, [sp, #4]
  13e1a4:	e58d3000 	str	r3, [sp]
  13e1a8:	e1a02003 	mov	r2, r3
  13e1ac:	e12fff34 	blx	r4
  13e1b0:	e28dd008 	add	sp, sp, #8
  13e1b4:	e8bd4070 	pop	{r4, r5, r6, lr}
  13e1b8:	eafff92b 	b	13c66c <__syscall_ret>
  13e1bc:	e1a00004 	mov	r0, r4
  13e1c0:	eafffffa 	b	13e1b0 <listen+0x3c>

0013e1c4 <setsockopt>:
  13e1c4:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
  13e1c8:	e1a05000 	mov	r5, r0
  13e1cc:	e24dd00c 	sub	sp, sp, #12
  13e1d0:	e59f004c 	ldr	r0, [pc, #76]	; 13e224 <setsockopt+0x60>
  13e1d4:	e1a06001 	mov	r6, r1
  13e1d8:	e1a07002 	mov	r7, r2
  13e1dc:	e1a08003 	mov	r8, r3
  13e1e0:	e59d9028 	ldr	r9, [sp, #40]	; 0x28
  13e1e4:	ebfff8eb 	bl	13c598 <get_rtt_syscall>
  13e1e8:	e2504000 	subs	r4, r0, #0
  13e1ec:	0a00000a 	beq	13e21c <setsockopt+0x58>
  13e1f0:	e3a0c000 	mov	ip, #0
  13e1f4:	e58d9000 	str	r9, [sp]
  13e1f8:	e1a03008 	mov	r3, r8
  13e1fc:	e1a02007 	mov	r2, r7
  13e200:	e1a01006 	mov	r1, r6
  13e204:	e1a00005 	mov	r0, r5
  13e208:	e58dc004 	str	ip, [sp, #4]
  13e20c:	e12fff34 	blx	r4
  13e210:	e28dd00c 	add	sp, sp, #12
  13e214:	e8bd43f0 	pop	{r4, r5, r6, r7, r8, r9, lr}
  13e218:	eafff913 	b	13c66c <__syscall_ret>
  13e21c:	e1a00004 	mov	r0, r4
  13e220:	eafffffa 	b	13e210 <setsockopt+0x4c>
  13e224:	00000126 	.word	0x00000126

0013e228 <socket>:
  13e228:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  13e22c:	e1a06000 	mov	r6, r0
  13e230:	e24dd00c 	sub	sp, sp, #12
  13e234:	e59f0118 	ldr	r0, [pc, #280]	; 13e354 <socket+0x12c>
  13e238:	e1a05001 	mov	r5, r1
  13e23c:	e1a07002 	mov	r7, r2
  13e240:	ebfff8d4 	bl	13c598 <get_rtt_syscall>
  13e244:	e2504000 	subs	r4, r0, #0
  13e248:	0a000034 	beq	13e320 <socket+0xf8>
  13e24c:	e3a03000 	mov	r3, #0
  13e250:	e1a02007 	mov	r2, r7
  13e254:	e58d3004 	str	r3, [sp, #4]
  13e258:	e58d3000 	str	r3, [sp]
  13e25c:	e1a01005 	mov	r1, r5
  13e260:	e1a00006 	mov	r0, r6
  13e264:	e12fff34 	blx	r4
  13e268:	ebfff8ff 	bl	13c66c <__syscall_ret>
  13e26c:	e2504000 	subs	r4, r0, #0
  13e270:	ba000002 	blt	13e280 <socket+0x58>
  13e274:	e1a00004 	mov	r0, r4
  13e278:	e28dd00c 	add	sp, sp, #12
  13e27c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  13e280:	ebffeb8e 	bl	1390c0 <__errno_location>
  13e284:	e5903000 	ldr	r3, [r0]
  13e288:	e3530016 	cmp	r3, #22
  13e28c:	1a00001e 	bne	13e30c <socket+0xe4>
  13e290:	e59f30c0 	ldr	r3, [pc, #192]	; 13e358 <socket+0x130>
  13e294:	e1150003 	tst	r5, r3
  13e298:	0afffff5 	beq	13e274 <socket+0x4c>
  13e29c:	e59f00b0 	ldr	r0, [pc, #176]	; 13e354 <socket+0x12c>
  13e2a0:	ebfff8bc 	bl	13c598 <get_rtt_syscall>
  13e2a4:	e3c51702 	bic	r1, r5, #524288	; 0x80000
  13e2a8:	e2504000 	subs	r4, r0, #0
  13e2ac:	e3c11b02 	bic	r1, r1, #2048	; 0x800
  13e2b0:	0a000025 	beq	13e34c <socket+0x124>
  13e2b4:	e3a03000 	mov	r3, #0
  13e2b8:	e1a02007 	mov	r2, r7
  13e2bc:	e1a00006 	mov	r0, r6
  13e2c0:	e58d3004 	str	r3, [sp, #4]
  13e2c4:	e58d3000 	str	r3, [sp]
  13e2c8:	e12fff34 	blx	r4
  13e2cc:	ebfff8e6 	bl	13c66c <__syscall_ret>
  13e2d0:	e2504000 	subs	r4, r0, #0
  13e2d4:	baffffe6 	blt	13e274 <socket+0x4c>
  13e2d8:	e3150702 	tst	r5, #524288	; 0x80000
  13e2dc:	1a000011 	bne	13e328 <socket+0x100>
  13e2e0:	e3150b02 	tst	r5, #2048	; 0x800
  13e2e4:	0affffe2 	beq	13e274 <socket+0x4c>
  13e2e8:	e3a000dd 	mov	r0, #221	; 0xdd
  13e2ec:	ebfff8a9 	bl	13c598 <get_rtt_syscall>
  13e2f0:	e2503000 	subs	r3, r0, #0
  13e2f4:	0affffde 	beq	13e274 <socket+0x4c>
  13e2f8:	e3a02b02 	mov	r2, #2048	; 0x800
  13e2fc:	e3a01004 	mov	r1, #4
  13e300:	e1a00004 	mov	r0, r4
  13e304:	e12fff33 	blx	r3
  13e308:	eaffffd9 	b	13e274 <socket+0x4c>
  13e30c:	ebffeb6b 	bl	1390c0 <__errno_location>
  13e310:	e5903000 	ldr	r3, [r0]
  13e314:	e353005d 	cmp	r3, #93	; 0x5d
  13e318:	1affffd5 	bne	13e274 <socket+0x4c>
  13e31c:	eaffffdb 	b	13e290 <socket+0x68>
  13e320:	e1a00004 	mov	r0, r4
  13e324:	eaffffcf 	b	13e268 <socket+0x40>
  13e328:	e3a000dd 	mov	r0, #221	; 0xdd
  13e32c:	ebfff899 	bl	13c598 <get_rtt_syscall>
  13e330:	e2503000 	subs	r3, r0, #0
  13e334:	0affffe9 	beq	13e2e0 <socket+0xb8>
  13e338:	e3a02001 	mov	r2, #1
  13e33c:	e3a01002 	mov	r1, #2
  13e340:	e1a00004 	mov	r0, r4
  13e344:	e12fff33 	blx	r3
  13e348:	eaffffe4 	b	13e2e0 <socket+0xb8>
  13e34c:	e1a00004 	mov	r0, r4
  13e350:	eaffffdd 	b	13e2cc <socket+0xa4>
  13e354:	00000119 	.word	0x00000119
  13e358:	00080800 	.word	0x00080800

0013e35c <srand>:
  13e35c:	e3a02000 	mov	r2, #0
  13e360:	e59f3008 	ldr	r3, [pc, #8]	; 13e370 <srand+0x14>
  13e364:	e2400001 	sub	r0, r0, #1
  13e368:	e8830005 	stm	r3, {r0, r2}
  13e36c:	e12fff1e 	bx	lr
  13e370:	00150040 	.word	0x00150040

0013e374 <rand>:
  13e374:	e59f1034 	ldr	r1, [pc, #52]	; 13e3b0 <rand+0x3c>
  13e378:	e92d4800 	push	{fp, lr}
  13e37c:	e59f3030 	ldr	r3, [pc, #48]	; 13e3b4 <rand+0x40>
  13e380:	e591e000 	ldr	lr, [r1]
  13e384:	e5912004 	ldr	r2, [r1, #4]
  13e388:	e00b039e 	mul	fp, lr, r3
  13e38c:	e59fc024 	ldr	ip, [pc, #36]	; 13e3b8 <rand+0x44>
  13e390:	e020b29c 	mla	r0, ip, r2, fp
  13e394:	e0832c9e 	umull	r2, r3, lr, ip
  13e398:	e0803003 	add	r3, r0, r3
  13e39c:	e292b001 	adds	fp, r2, #1
  13e3a0:	e2a3c000 	adc	ip, r3, #0
  13e3a4:	e8811800 	stm	r1, {fp, ip}
  13e3a8:	e1a000ac 	lsr	r0, ip, #1
  13e3ac:	e8bd8800 	pop	{fp, pc}
  13e3b0:	00150040 	.word	0x00150040
  13e3b4:	5851f42d 	.word	0x5851f42d
  13e3b8:	4c957f2d 	.word	0x4c957f2d

0013e3bc <select>:
  13e3bc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  13e3c0:	e3a0e000 	mov	lr, #0
  13e3c4:	e24dd014 	sub	sp, sp, #20
  13e3c8:	e59dc018 	ldr	ip, [sp, #24]
  13e3cc:	e58d3000 	str	r3, [sp]
  13e3d0:	e58de008 	str	lr, [sp, #8]
  13e3d4:	e1a03002 	mov	r3, r2
  13e3d8:	e58dc004 	str	ip, [sp, #4]
  13e3dc:	e1a02001 	mov	r2, r1
  13e3e0:	e1a01000 	mov	r1, r0
  13e3e4:	e3a0008e 	mov	r0, #142	; 0x8e
  13e3e8:	eb000ed2 	bl	141f38 <__syscall_cp>
  13e3ec:	e28dd014 	add	sp, sp, #20
  13e3f0:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  13e3f4:	eafff89c 	b	13c66c <__syscall_ret>

0013e3f8 <raise>:
  13e3f8:	e92d4030 	push	{r4, r5, lr}
  13e3fc:	e24dd084 	sub	sp, sp, #132	; 0x84
  13e400:	e1a05000 	mov	r5, r0
  13e404:	e1a0000d 	mov	r0, sp
  13e408:	eb001496 	bl	143668 <__block_app_sigs>
  13e40c:	e59f3048 	ldr	r3, [pc, #72]	; 13e45c <raise+0x64>
  13e410:	e5930000 	ldr	r0, [r3]
  13e414:	e12fff30 	blx	r0
  13e418:	e510405c 	ldr	r4, [r0, #-92]	; 0xffffffa4
  13e41c:	e3a000ee 	mov	r0, #238	; 0xee
  13e420:	ebfff85c 	bl	13c598 <get_rtt_syscall>
  13e424:	e2503000 	subs	r3, r0, #0
  13e428:	0a000009 	beq	13e454 <raise+0x5c>
  13e42c:	e1a01005 	mov	r1, r5
  13e430:	e1a00004 	mov	r0, r4
  13e434:	e12fff33 	blx	r3
  13e438:	ebfff88b 	bl	13c66c <__syscall_ret>
  13e43c:	e1a04000 	mov	r4, r0
  13e440:	e1a0000d 	mov	r0, sp
  13e444:	eb001495 	bl	1436a0 <__restore_sigs>
  13e448:	e1a00004 	mov	r0, r4
  13e44c:	e28dd084 	add	sp, sp, #132	; 0x84
  13e450:	e8bd8030 	pop	{r4, r5, pc}
  13e454:	e1a00003 	mov	r0, r3
  13e458:	eafffff6 	b	13e438 <raise+0x40>
  13e45c:	0014e3dc 	.word	0x0014e3dc

0013e460 <fflush>:
  13e460:	e92d4070 	push	{r4, r5, r6, lr}
  13e464:	e2504000 	subs	r4, r0, #0
  13e468:	e24dd008 	sub	sp, sp, #8
  13e46c:	0a000027 	beq	13e510 <fflush+0xb0>
  13e470:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
  13e474:	e3530000 	cmp	r3, #0
  13e478:	b3a05000 	movlt	r5, #0
  13e47c:	aa000020 	bge	13e504 <fflush+0xa4>
  13e480:	e5942014 	ldr	r2, [r4, #20]
  13e484:	e594301c 	ldr	r3, [r4, #28]
  13e488:	e1520003 	cmp	r2, r3
  13e48c:	0a000007 	beq	13e4b0 <fflush+0x50>
  13e490:	e3a02000 	mov	r2, #0
  13e494:	e5943024 	ldr	r3, [r4, #36]	; 0x24
  13e498:	e1a01002 	mov	r1, r2
  13e49c:	e1a00004 	mov	r0, r4
  13e4a0:	e12fff33 	blx	r3
  13e4a4:	e5943014 	ldr	r3, [r4, #20]
  13e4a8:	e3530000 	cmp	r3, #0
  13e4ac:	0a00003d 	beq	13e5a8 <fflush+0x148>
  13e4b0:	e994000c 	ldmib	r4, {r2, r3}
  13e4b4:	e1520003 	cmp	r2, r3
  13e4b8:	0a000006 	beq	13e4d8 <fflush+0x78>
  13e4bc:	e3a01001 	mov	r1, #1
  13e4c0:	e0422003 	sub	r2, r2, r3
  13e4c4:	e58d1000 	str	r1, [sp]
  13e4c8:	e5941028 	ldr	r1, [r4, #40]	; 0x28
  13e4cc:	e1a03fc2 	asr	r3, r2, #31
  13e4d0:	e1a00004 	mov	r0, r4
  13e4d4:	e12fff31 	blx	r1
  13e4d8:	e3a06000 	mov	r6, #0
  13e4dc:	e1550006 	cmp	r5, r6
  13e4e0:	e5846010 	str	r6, [r4, #16]
  13e4e4:	e584601c 	str	r6, [r4, #28]
  13e4e8:	e5846014 	str	r6, [r4, #20]
  13e4ec:	e5846008 	str	r6, [r4, #8]
  13e4f0:	e5846004 	str	r6, [r4, #4]
  13e4f4:	1a000032 	bne	13e5c4 <fflush+0x164>
  13e4f8:	e1a00005 	mov	r0, r5
  13e4fc:	e28dd008 	add	sp, sp, #8
  13e500:	e8bd8070 	pop	{r4, r5, r6, pc}
  13e504:	eb001472 	bl	1436d4 <__lockfile>
  13e508:	e1a05000 	mov	r5, r0
  13e50c:	eaffffdb 	b	13e480 <fflush+0x20>
  13e510:	e59f3104 	ldr	r3, [pc, #260]	; 13e61c <fflush+0x1bc>
  13e514:	e5935000 	ldr	r5, [r3]
  13e518:	e3550000 	cmp	r5, #0
  13e51c:	1a00003a 	bne	13e60c <fflush+0x1ac>
  13e520:	e59f30f8 	ldr	r3, [pc, #248]	; 13e620 <fflush+0x1c0>
  13e524:	e5932000 	ldr	r2, [r3]
  13e528:	e3520000 	cmp	r2, #0
  13e52c:	1a000032 	bne	13e5fc <fflush+0x19c>
  13e530:	eb000047 	bl	13e654 <__ofl_lock>
  13e534:	e5904000 	ldr	r4, [r0]
  13e538:	e3540000 	cmp	r4, #0
  13e53c:	0a000009 	beq	13e568 <fflush+0x108>
  13e540:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
  13e544:	e3530000 	cmp	r3, #0
  13e548:	aa00000a 	bge	13e578 <fflush+0x118>
  13e54c:	e5942014 	ldr	r2, [r4, #20]
  13e550:	e594301c 	ldr	r3, [r4, #28]
  13e554:	e1520003 	cmp	r2, r3
  13e558:	1a00001f 	bne	13e5dc <fflush+0x17c>
  13e55c:	e5944038 	ldr	r4, [r4, #56]	; 0x38
  13e560:	e3540000 	cmp	r4, #0
  13e564:	1afffff5 	bne	13e540 <fflush+0xe0>
  13e568:	eb000040 	bl	13e670 <__ofl_unlock>
  13e56c:	e1a00005 	mov	r0, r5
  13e570:	e28dd008 	add	sp, sp, #8
  13e574:	e8bd8070 	pop	{r4, r5, r6, pc}
  13e578:	e1a00004 	mov	r0, r4
  13e57c:	eb001454 	bl	1436d4 <__lockfile>
  13e580:	e5942014 	ldr	r2, [r4, #20]
  13e584:	e594301c 	ldr	r3, [r4, #28]
  13e588:	e1a06000 	mov	r6, r0
  13e58c:	e1520003 	cmp	r2, r3
  13e590:	1a000015 	bne	13e5ec <fflush+0x18c>
  13e594:	e3560000 	cmp	r6, #0
  13e598:	0affffef 	beq	13e55c <fflush+0xfc>
  13e59c:	e1a00004 	mov	r0, r4
  13e5a0:	eb001498 	bl	143808 <__unlockfile>
  13e5a4:	eaffffec 	b	13e55c <fflush+0xfc>
  13e5a8:	e3550000 	cmp	r5, #0
  13e5ac:	03e05000 	mvneq	r5, #0
  13e5b0:	0affffd0 	beq	13e4f8 <fflush+0x98>
  13e5b4:	e1a00004 	mov	r0, r4
  13e5b8:	eb001492 	bl	143808 <__unlockfile>
  13e5bc:	e3e05000 	mvn	r5, #0
  13e5c0:	eaffffcc 	b	13e4f8 <fflush+0x98>
  13e5c4:	e1a05006 	mov	r5, r6
  13e5c8:	e1a00004 	mov	r0, r4
  13e5cc:	eb00148d 	bl	143808 <__unlockfile>
  13e5d0:	e1a00005 	mov	r0, r5
  13e5d4:	e28dd008 	add	sp, sp, #8
  13e5d8:	e8bd8070 	pop	{r4, r5, r6, pc}
  13e5dc:	e1a00004 	mov	r0, r4
  13e5e0:	ebffff9e 	bl	13e460 <fflush>
  13e5e4:	e1855000 	orr	r5, r5, r0
  13e5e8:	eaffffdb 	b	13e55c <fflush+0xfc>
  13e5ec:	e1a00004 	mov	r0, r4
  13e5f0:	ebffff9a 	bl	13e460 <fflush>
  13e5f4:	e1855000 	orr	r5, r5, r0
  13e5f8:	eaffffe5 	b	13e594 <fflush+0x134>
  13e5fc:	e5930000 	ldr	r0, [r3]
  13e600:	ebffff96 	bl	13e460 <fflush>
  13e604:	e1855000 	orr	r5, r5, r0
  13e608:	eaffffc8 	b	13e530 <fflush+0xd0>
  13e60c:	e5930000 	ldr	r0, [r3]
  13e610:	ebffff92 	bl	13e460 <fflush>
  13e614:	e1a05000 	mov	r5, r0
  13e618:	eaffffc0 	b	13e520 <fflush+0xc0>
  13e61c:	0014e3d0 	.word	0x0014e3d0
  13e620:	0014e338 	.word	0x0014e338

0013e624 <fprintf>:
  13e624:	e92d000e 	push	{r1, r2, r3}
  13e628:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  13e62c:	e24dd008 	sub	sp, sp, #8
  13e630:	e28d3010 	add	r3, sp, #16
  13e634:	e1a02003 	mov	r2, r3
  13e638:	e59d100c 	ldr	r1, [sp, #12]
  13e63c:	e58d3004 	str	r3, [sp, #4]
  13e640:	eb000959 	bl	140bac <vfprintf>
  13e644:	e28dd008 	add	sp, sp, #8
  13e648:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  13e64c:	e28dd00c 	add	sp, sp, #12
  13e650:	e12fff1e 	bx	lr

0013e654 <__ofl_lock>:
  13e654:	e92d4010 	push	{r4, lr}
  13e658:	e59f0008 	ldr	r0, [pc, #8]	; 13e668 <__ofl_lock+0x14>
  13e65c:	eb000db3 	bl	141d30 <__lock>
  13e660:	e59f0004 	ldr	r0, [pc, #4]	; 13e66c <__ofl_lock+0x18>
  13e664:	e8bd8010 	pop	{r4, pc}
  13e668:	00150050 	.word	0x00150050
  13e66c:	0015004c 	.word	0x0015004c

0013e670 <__ofl_unlock>:
  13e670:	e59f0000 	ldr	r0, [pc]	; 13e678 <__ofl_unlock+0x8>
  13e674:	ea000e05 	b	141e90 <__unlock>
  13e678:	00150050 	.word	0x00150050

0013e67c <perror>:
  13e67c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  13e680:	e1a05000 	mov	r5, r0
  13e684:	ebffea8d 	bl	1390c0 <__errno_location>
  13e688:	e5900000 	ldr	r0, [r0]
  13e68c:	ebffeaad 	bl	139148 <strerror>
  13e690:	e59f4104 	ldr	r4, [pc, #260]	; 13e79c <perror+0x120>
  13e694:	e1a06000 	mov	r6, r0
  13e698:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
  13e69c:	e3530000 	cmp	r3, #0
  13e6a0:	aa000026 	bge	13e740 <perror+0xc4>
  13e6a4:	e3550000 	cmp	r5, #0
  13e6a8:	e5947088 	ldr	r7, [r4, #136]	; 0x88
  13e6ac:	e5948048 	ldr	r8, [r4, #72]	; 0x48
  13e6b0:	13a09000 	movne	r9, #0
  13e6b4:	0a00002c 	beq	13e76c <perror+0xf0>
  13e6b8:	e5d53000 	ldrb	r3, [r5]
  13e6bc:	e3530000 	cmp	r3, #0
  13e6c0:	1a000010 	bne	13e708 <perror+0x8c>
  13e6c4:	e1a00006 	mov	r0, r6
  13e6c8:	eb000bf4 	bl	1416a0 <strlen>
  13e6cc:	e59f30c8 	ldr	r3, [pc, #200]	; 13e79c <perror+0x120>
  13e6d0:	e1a01000 	mov	r1, r0
  13e6d4:	e3a02001 	mov	r2, #1
  13e6d8:	e1a00006 	mov	r0, r6
  13e6dc:	eb0015fa 	bl	143ecc <fwrite>
  13e6e0:	e59f10b4 	ldr	r1, [pc, #180]	; 13e79c <perror+0x120>
  13e6e4:	e3a0000a 	mov	r0, #10
  13e6e8:	eb001578 	bl	143cd0 <fputc>
  13e6ec:	e3590000 	cmp	r9, #0
  13e6f0:	e5848048 	str	r8, [r4, #72]	; 0x48
  13e6f4:	e5847088 	str	r7, [r4, #136]	; 0x88
  13e6f8:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
  13e6fc:	e59f0098 	ldr	r0, [pc, #152]	; 13e79c <perror+0x120>
  13e700:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
  13e704:	ea00143f 	b	143808 <__unlockfile>
  13e708:	e1a00005 	mov	r0, r5
  13e70c:	eb000be3 	bl	1416a0 <strlen>
  13e710:	e59f3084 	ldr	r3, [pc, #132]	; 13e79c <perror+0x120>
  13e714:	e1a01000 	mov	r1, r0
  13e718:	e3a02001 	mov	r2, #1
  13e71c:	e1a00005 	mov	r0, r5
  13e720:	eb0015e9 	bl	143ecc <fwrite>
  13e724:	e59f1070 	ldr	r1, [pc, #112]	; 13e79c <perror+0x120>
  13e728:	e3a0003a 	mov	r0, #58	; 0x3a
  13e72c:	eb001567 	bl	143cd0 <fputc>
  13e730:	e59f1064 	ldr	r1, [pc, #100]	; 13e79c <perror+0x120>
  13e734:	e3a00020 	mov	r0, #32
  13e738:	eb001564 	bl	143cd0 <fputc>
  13e73c:	eaffffe0 	b	13e6c4 <perror+0x48>
  13e740:	e1a00004 	mov	r0, r4
  13e744:	eb0013e2 	bl	1436d4 <__lockfile>
  13e748:	e3550000 	cmp	r5, #0
  13e74c:	e1a09000 	mov	r9, r0
  13e750:	e5947088 	ldr	r7, [r4, #136]	; 0x88
  13e754:	e5948048 	ldr	r8, [r4, #72]	; 0x48
  13e758:	0affffd9 	beq	13e6c4 <perror+0x48>
  13e75c:	e5d53000 	ldrb	r3, [r5]
  13e760:	e3530000 	cmp	r3, #0
  13e764:	0affffd6 	beq	13e6c4 <perror+0x48>
  13e768:	eaffffe6 	b	13e708 <perror+0x8c>
  13e76c:	eb000bcb 	bl	1416a0 <strlen>
  13e770:	e1a03004 	mov	r3, r4
  13e774:	e1a01000 	mov	r1, r0
  13e778:	e3a02001 	mov	r2, #1
  13e77c:	e1a00006 	mov	r0, r6
  13e780:	eb0015d1 	bl	143ecc <fwrite>
  13e784:	e1a01004 	mov	r1, r4
  13e788:	e3a0000a 	mov	r0, #10
  13e78c:	eb00154f 	bl	143cd0 <fputc>
  13e790:	e5848048 	str	r8, [r4, #72]	; 0x48
  13e794:	e5847088 	str	r7, [r4, #136]	; 0x88
  13e798:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
  13e79c:	0014e2a8 	.word	0x0014e2a8

0013e7a0 <printf>:
  13e7a0:	e92d000f 	push	{r0, r1, r2, r3}
  13e7a4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  13e7a8:	e24dd00c 	sub	sp, sp, #12
  13e7ac:	e28d3014 	add	r3, sp, #20
  13e7b0:	e1a02003 	mov	r2, r3
  13e7b4:	e59d1010 	ldr	r1, [sp, #16]
  13e7b8:	e59f0014 	ldr	r0, [pc, #20]	; 13e7d4 <printf+0x34>
  13e7bc:	e58d3004 	str	r3, [sp, #4]
  13e7c0:	eb0008f9 	bl	140bac <vfprintf>
  13e7c4:	e28dd00c 	add	sp, sp, #12
  13e7c8:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  13e7cc:	e28dd010 	add	sp, sp, #16
  13e7d0:	e12fff1e 	bx	lr
  13e7d4:	0014e340 	.word	0x0014e340

0013e7d8 <puts>:
  13e7d8:	e92d4070 	push	{r4, r5, r6, lr}
  13e7dc:	e59f40b0 	ldr	r4, [pc, #176]	; 13e894 <puts+0xbc>
  13e7e0:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
  13e7e4:	e3530000 	cmp	r3, #0
  13e7e8:	aa00001b 	bge	13e85c <puts+0x84>
  13e7ec:	e1a01004 	mov	r1, r4
  13e7f0:	eb001569 	bl	143d9c <fputs>
  13e7f4:	e3500000 	cmp	r0, #0
  13e7f8:	a3a05000 	movge	r5, #0
  13e7fc:	ba000021 	blt	13e888 <puts+0xb0>
  13e800:	e5943050 	ldr	r3, [r4, #80]	; 0x50
  13e804:	e353000a 	cmp	r3, #10
  13e808:	0a00000e 	beq	13e848 <puts+0x70>
  13e80c:	e5943014 	ldr	r3, [r4, #20]
  13e810:	e5942010 	ldr	r2, [r4, #16]
  13e814:	e1530002 	cmp	r3, r2
  13e818:	0a00000a 	beq	13e848 <puts+0x70>
  13e81c:	e3a0200a 	mov	r2, #10
  13e820:	e2831001 	add	r1, r3, #1
  13e824:	e5841014 	str	r1, [r4, #20]
  13e828:	e3a04000 	mov	r4, #0
  13e82c:	e5c32000 	strb	r2, [r3]
  13e830:	e3550000 	cmp	r5, #0
  13e834:	0a000001 	beq	13e840 <puts+0x68>
  13e838:	e59f0054 	ldr	r0, [pc, #84]	; 13e894 <puts+0xbc>
  13e83c:	eb0013f1 	bl	143808 <__unlockfile>
  13e840:	e1a00004 	mov	r0, r4
  13e844:	e8bd8070 	pop	{r4, r5, r6, pc}
  13e848:	e3a0100a 	mov	r1, #10
  13e84c:	e59f0040 	ldr	r0, [pc, #64]	; 13e894 <puts+0xbc>
  13e850:	eb001412 	bl	1438a0 <__overflow>
  13e854:	e1a04fc0 	asr	r4, r0, #31
  13e858:	eafffff4 	b	13e830 <puts+0x58>
  13e85c:	e1a06000 	mov	r6, r0
  13e860:	e1a00004 	mov	r0, r4
  13e864:	eb00139a 	bl	1436d4 <__lockfile>
  13e868:	e1a01004 	mov	r1, r4
  13e86c:	e1a05000 	mov	r5, r0
  13e870:	e1a00006 	mov	r0, r6
  13e874:	eb001548 	bl	143d9c <fputs>
  13e878:	e3500000 	cmp	r0, #0
  13e87c:	b3e04000 	mvnlt	r4, #0
  13e880:	aaffffde 	bge	13e800 <puts+0x28>
  13e884:	eaffffe9 	b	13e830 <puts+0x58>
  13e888:	e3e04000 	mvn	r4, #0
  13e88c:	e1a00004 	mov	r0, r4
  13e890:	e8bd8070 	pop	{r4, r5, r6, pc}
  13e894:	0014e340 	.word	0x0014e340

0013e898 <pop_arg>:
  13e898:	e2411009 	sub	r1, r1, #9
  13e89c:	e92d0030 	push	{r4, r5}
  13e8a0:	e3510011 	cmp	r1, #17
  13e8a4:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
  13e8a8:	ea000018 	b	13e910 <pop_arg+0x78>
  13e8ac:	0013e9d8 	.word	0x0013e9d8
  13e8b0:	0013e93c 	.word	0x0013e93c
  13e8b4:	0013e95c 	.word	0x0013e95c
  13e8b8:	0013e918 	.word	0x0013e918
  13e8bc:	0013e93c 	.word	0x0013e93c
  13e8c0:	0013e95c 	.word	0x0013e95c
  13e8c4:	0013ea10 	.word	0x0013ea10
  13e8c8:	0013e980 	.word	0x0013e980
  13e8cc:	0013e9a0 	.word	0x0013e9a0
  13e8d0:	0013e9bc 	.word	0x0013e9bc
  13e8d4:	0013e918 	.word	0x0013e918
  13e8d8:	0013e95c 	.word	0x0013e95c
  13e8dc:	0013e918 	.word	0x0013e918
  13e8e0:	0013e918 	.word	0x0013e918
  13e8e4:	0013e93c 	.word	0x0013e93c
  13e8e8:	0013e9f0 	.word	0x0013e9f0
  13e8ec:	0013e8f4 	.word	0x0013e8f4
  13e8f0:	0013e8f4 	.word	0x0013e8f4
  13e8f4:	e5923000 	ldr	r3, [r2]
  13e8f8:	e2833007 	add	r3, r3, #7
  13e8fc:	e3c33007 	bic	r3, r3, #7
  13e900:	e2831008 	add	r1, r3, #8
  13e904:	e5821000 	str	r1, [r2]
  13e908:	e893000c 	ldm	r3, {r2, r3}
  13e90c:	e880000c 	stm	r0, {r2, r3}
  13e910:	e8bd0030 	pop	{r4, r5}
  13e914:	e12fff1e 	bx	lr
  13e918:	e5923000 	ldr	r3, [r2]
  13e91c:	e8bd0030 	pop	{r4, r5}
  13e920:	e2833007 	add	r3, r3, #7
  13e924:	e3c33007 	bic	r3, r3, #7
  13e928:	e2831008 	add	r1, r3, #8
  13e92c:	e5821000 	str	r1, [r2]
  13e930:	e893000c 	ldm	r3, {r2, r3}
  13e934:	e880000c 	stm	r0, {r2, r3}
  13e938:	e12fff1e 	bx	lr
  13e93c:	e5923000 	ldr	r3, [r2]
  13e940:	e5934000 	ldr	r4, [r3]
  13e944:	e2833004 	add	r3, r3, #4
  13e948:	e1a05fc4 	asr	r5, r4, #31
  13e94c:	e5823000 	str	r3, [r2]
  13e950:	e8800030 	stm	r0, {r4, r5}
  13e954:	e8bd0030 	pop	{r4, r5}
  13e958:	e12fff1e 	bx	lr
  13e95c:	e3a01000 	mov	r1, #0
  13e960:	e8bd0030 	pop	{r4, r5}
  13e964:	e5923000 	ldr	r3, [r2]
  13e968:	e593c000 	ldr	ip, [r3]
  13e96c:	e2833004 	add	r3, r3, #4
  13e970:	e5823000 	str	r3, [r2]
  13e974:	e580c000 	str	ip, [r0]
  13e978:	e5801004 	str	r1, [r0, #4]
  13e97c:	e12fff1e 	bx	lr
  13e980:	e3a01000 	mov	r1, #0
  13e984:	e5923000 	ldr	r3, [r2]
  13e988:	e1d3c0b0 	ldrh	ip, [r3]
  13e98c:	e2833004 	add	r3, r3, #4
  13e990:	e5823000 	str	r3, [r2]
  13e994:	e580c000 	str	ip, [r0]
  13e998:	e5801004 	str	r1, [r0, #4]
  13e99c:	eaffffdb 	b	13e910 <pop_arg+0x78>
  13e9a0:	e5923000 	ldr	r3, [r2]
  13e9a4:	e1d340d0 	ldrsb	r4, [r3]
  13e9a8:	e2833004 	add	r3, r3, #4
  13e9ac:	e1a05fc4 	asr	r5, r4, #31
  13e9b0:	e5823000 	str	r3, [r2]
  13e9b4:	e8800030 	stm	r0, {r4, r5}
  13e9b8:	eaffffd4 	b	13e910 <pop_arg+0x78>
  13e9bc:	e3a05000 	mov	r5, #0
  13e9c0:	e5923000 	ldr	r3, [r2]
  13e9c4:	e5d34000 	ldrb	r4, [r3]
  13e9c8:	e2833004 	add	r3, r3, #4
  13e9cc:	e5823000 	str	r3, [r2]
  13e9d0:	e8800030 	stm	r0, {r4, r5}
  13e9d4:	eaffffcd 	b	13e910 <pop_arg+0x78>
  13e9d8:	e5923000 	ldr	r3, [r2]
  13e9dc:	e2831004 	add	r1, r3, #4
  13e9e0:	e5821000 	str	r1, [r2]
  13e9e4:	e5933000 	ldr	r3, [r3]
  13e9e8:	e5803000 	str	r3, [r0]
  13e9ec:	eaffffc7 	b	13e910 <pop_arg+0x78>
  13e9f0:	e3a01000 	mov	r1, #0
  13e9f4:	e5923000 	ldr	r3, [r2]
  13e9f8:	e283c004 	add	ip, r3, #4
  13e9fc:	e582c000 	str	ip, [r2]
  13ea00:	e5933000 	ldr	r3, [r3]
  13ea04:	e5801004 	str	r1, [r0, #4]
  13ea08:	e5803000 	str	r3, [r0]
  13ea0c:	eaffffbf 	b	13e910 <pop_arg+0x78>
  13ea10:	e5923000 	ldr	r3, [r2]
  13ea14:	e1d340f0 	ldrsh	r4, [r3]
  13ea18:	e2833004 	add	r3, r3, #4
  13ea1c:	e1a05fc4 	asr	r5, r4, #31
  13ea20:	e5823000 	str	r3, [r2]
  13ea24:	e8800030 	stm	r0, {r4, r5}
  13ea28:	eaffffb8 	b	13e910 <pop_arg+0x78>

0013ea2c <pad.part.0>:
  13ea2c:	e92d4070 	push	{r4, r5, r6, lr}
  13ea30:	e0425003 	sub	r5, r2, r3
  13ea34:	e3550c01 	cmp	r5, #256	; 0x100
  13ea38:	e24ddc01 	sub	sp, sp, #256	; 0x100
  13ea3c:	31a02005 	movcc	r2, r5
  13ea40:	23a02c01 	movcs	r2, #256	; 0x100
  13ea44:	e1a06000 	mov	r6, r0
  13ea48:	e1a0000d 	mov	r0, sp
  13ea4c:	eb000a82 	bl	14145c <memset>
  13ea50:	e35500ff 	cmp	r5, #255	; 0xff
  13ea54:	9a00001b 	bls	13eac8 <pad.part.0+0x9c>
  13ea58:	e5962000 	ldr	r2, [r6]
  13ea5c:	e1a04005 	mov	r4, r5
  13ea60:	e2022020 	and	r2, r2, #32
  13ea64:	ea000001 	b	13ea70 <pad.part.0+0x44>
  13ea68:	e35400ff 	cmp	r4, #255	; 0xff
  13ea6c:	9a00000c 	bls	13eaa4 <pad.part.0+0x78>
  13ea70:	e3520000 	cmp	r2, #0
  13ea74:	e2444c01 	sub	r4, r4, #256	; 0x100
  13ea78:	e1a01002 	mov	r1, r2
  13ea7c:	1afffff9 	bne	13ea68 <pad.part.0+0x3c>
  13ea80:	e1a02006 	mov	r2, r6
  13ea84:	e3a01c01 	mov	r1, #256	; 0x100
  13ea88:	e1a0000d 	mov	r0, sp
  13ea8c:	eb0014cf 	bl	143dd0 <__fwritex>
  13ea90:	e5962000 	ldr	r2, [r6]
  13ea94:	e35400ff 	cmp	r4, #255	; 0xff
  13ea98:	e2022020 	and	r2, r2, #32
  13ea9c:	e1a01002 	mov	r1, r2
  13eaa0:	8afffff2 	bhi	13ea70 <pad.part.0+0x44>
  13eaa4:	e20550ff 	and	r5, r5, #255	; 0xff
  13eaa8:	e3510000 	cmp	r1, #0
  13eaac:	1a000003 	bne	13eac0 <pad.part.0+0x94>
  13eab0:	e1a02006 	mov	r2, r6
  13eab4:	e1a01005 	mov	r1, r5
  13eab8:	e1a0000d 	mov	r0, sp
  13eabc:	eb0014c3 	bl	143dd0 <__fwritex>
  13eac0:	e28ddc01 	add	sp, sp, #256	; 0x100
  13eac4:	e8bd8070 	pop	{r4, r5, r6, pc}
  13eac8:	e5961000 	ldr	r1, [r6]
  13eacc:	e2011020 	and	r1, r1, #32
  13ead0:	eafffff4 	b	13eaa8 <pad.part.0+0x7c>
  13ead4:	00000000 	andeq	r0, r0, r0

0013ead8 <printf_core>:
  13ead8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  13eadc:	e3a0a000 	mov	sl, #0
  13eae0:	e1a0b001 	mov	fp, r1
  13eae4:	e24ddfb3 	sub	sp, sp, #716	; 0x2cc
  13eae8:	e58d0004 	str	r0, [sp, #4]
  13eaec:	e58d2018 	str	r2, [sp, #24]
  13eaf0:	e58d3028 	str	r3, [sp, #40]	; 0x28
  13eaf4:	e58da000 	str	sl, [sp]
  13eaf8:	e58da00c 	str	sl, [sp, #12]
  13eafc:	e59d2000 	ldr	r2, [sp]
  13eb00:	e5db3000 	ldrb	r3, [fp]
  13eb04:	e082200a 	add	r2, r2, sl
  13eb08:	e3530000 	cmp	r3, #0
  13eb0c:	e58d2000 	str	r2, [sp]
  13eb10:	0a0001c8 	beq	13f238 <printf_core+0x760>
  13eb14:	e3530025 	cmp	r3, #37	; 0x25
  13eb18:	e1a0300b 	mov	r3, fp
  13eb1c:	0a000005 	beq	13eb38 <printf_core+0x60>
  13eb20:	e5f32001 	ldrb	r2, [r3, #1]!
  13eb24:	e3520000 	cmp	r2, #0
  13eb28:	13520025 	cmpne	r2, #37	; 0x25
  13eb2c:	1afffffb 	bne	13eb20 <printf_core+0x48>
  13eb30:	e3520025 	cmp	r2, #37	; 0x25
  13eb34:	1a00019c 	bne	13f1ac <printf_core+0x6d4>
  13eb38:	e5d32001 	ldrb	r2, [r3, #1]
  13eb3c:	e1a04003 	mov	r4, r3
  13eb40:	e3520025 	cmp	r2, #37	; 0x25
  13eb44:	0a000003 	beq	13eb58 <printf_core+0x80>
  13eb48:	ea000006 	b	13eb68 <printf_core+0x90>
  13eb4c:	e5d42001 	ldrb	r2, [r4, #1]
  13eb50:	e3520025 	cmp	r2, #37	; 0x25
  13eb54:	1a000003 	bne	13eb68 <printf_core+0x90>
  13eb58:	e5f42002 	ldrb	r2, [r4, #2]!
  13eb5c:	e2833001 	add	r3, r3, #1
  13eb60:	e3520025 	cmp	r2, #37	; 0x25
  13eb64:	0afffff8 	beq	13eb4c <printf_core+0x74>
  13eb68:	e3e02102 	mvn	r2, #-2147483648	; 0x80000000
  13eb6c:	e043a00b 	sub	sl, r3, fp
  13eb70:	e59d3000 	ldr	r3, [sp]
  13eb74:	e0423003 	sub	r3, r2, r3
  13eb78:	e15a0003 	cmp	sl, r3
  13eb7c:	e58d3008 	str	r3, [sp, #8]
  13eb80:	ca000181 	bgt	13f18c <printf_core+0x6b4>
  13eb84:	e59d3004 	ldr	r3, [sp, #4]
  13eb88:	e3530000 	cmp	r3, #0
  13eb8c:	0a000002 	beq	13eb9c <printf_core+0xc4>
  13eb90:	e5933000 	ldr	r3, [r3]
  13eb94:	e3130020 	tst	r3, #32
  13eb98:	0a000146 	beq	13f0b8 <printf_core+0x5e0>
  13eb9c:	e35a0000 	cmp	sl, #0
  13eba0:	1a0000b7 	bne	13ee84 <printf_core+0x3ac>
  13eba4:	e5d42001 	ldrb	r2, [r4, #1]
  13eba8:	e242c030 	sub	ip, r2, #48	; 0x30
  13ebac:	e35c0009 	cmp	ip, #9
  13ebb0:	8a000002 	bhi	13ebc0 <printf_core+0xe8>
  13ebb4:	e5d43002 	ldrb	r3, [r4, #2]
  13ebb8:	e3530024 	cmp	r3, #36	; 0x24
  13ebbc:	0a000194 	beq	13f214 <printf_core+0x73c>
  13ebc0:	e2423020 	sub	r3, r2, #32
  13ebc4:	e353001f 	cmp	r3, #31
  13ebc8:	e3e0c000 	mvn	ip, #0
  13ebcc:	e2846001 	add	r6, r4, #1
  13ebd0:	8a000196 	bhi	13f230 <printf_core+0x758>
  13ebd4:	e59f0f44 	ldr	r0, [pc, #3908]	; 13fb20 <printf_core+0x1048>
  13ebd8:	e1a01330 	lsr	r1, r0, r3
  13ebdc:	e2118001 	ands	r8, r1, #1
  13ebe0:	0a00000a 	beq	13ec10 <printf_core+0x138>
  13ebe4:	e3a08000 	mov	r8, #0
  13ebe8:	e3a0e001 	mov	lr, #1
  13ebec:	ea000002 	b	13ebfc <printf_core+0x124>
  13ebf0:	e1a01330 	lsr	r1, r0, r3
  13ebf4:	e3110001 	tst	r1, #1
  13ebf8:	0a000004 	beq	13ec10 <printf_core+0x138>
  13ebfc:	e5f62001 	ldrb	r2, [r6, #1]!
  13ec00:	e188831e 	orr	r8, r8, lr, lsl r3
  13ec04:	e2423020 	sub	r3, r2, #32
  13ec08:	e353001f 	cmp	r3, #31
  13ec0c:	9afffff7 	bls	13ebf0 <printf_core+0x118>
  13ec10:	e352002a 	cmp	r2, #42	; 0x2a
  13ec14:	0a00009c 	beq	13ee8c <printf_core+0x3b4>
  13ec18:	e5d61000 	ldrb	r1, [r6]
  13ec1c:	e2413030 	sub	r3, r1, #48	; 0x30
  13ec20:	e3530009 	cmp	r3, #9
  13ec24:	81a02001 	movhi	r2, r1
  13ec28:	83a09000 	movhi	r9, #0
  13ec2c:	8a000012 	bhi	13ec7c <printf_core+0x1a4>
  13ec30:	e3a09000 	mov	r9, #0
  13ec34:	e59f0ee8 	ldr	r0, [pc, #3816]	; 13fb24 <printf_core+0x104c>
  13ec38:	e0693e89 	rsb	r3, r9, r9, lsl #29
  13ec3c:	e0693103 	rsb	r3, r9, r3, lsl #2
  13ec40:	e5f62001 	ldrb	r2, [r6, #1]!
  13ec44:	e1a03083 	lsl	r3, r3, #1
  13ec48:	e1590000 	cmp	r9, r0
  13ec4c:	e2411030 	sub	r1, r1, #48	; 0x30
  13ec50:	e2433106 	sub	r3, r3, #-2147483647	; 0x80000001
  13ec54:	e242e030 	sub	lr, r2, #48	; 0x30
  13ec58:	8a000025 	bhi	13ecf4 <printf_core+0x21c>
  13ec5c:	e1510003 	cmp	r1, r3
  13ec60:	e0899109 	add	r9, r9, r9, lsl #2
  13ec64:	ca000022 	bgt	13ecf4 <printf_core+0x21c>
  13ec68:	e35e0009 	cmp	lr, #9
  13ec6c:	e0819089 	add	r9, r1, r9, lsl #1
  13ec70:	9a000022 	bls	13ed00 <printf_core+0x228>
  13ec74:	e3590000 	cmp	r9, #0
  13ec78:	ba000143 	blt	13f18c <printf_core+0x6b4>
  13ec7c:	e352002e 	cmp	r2, #46	; 0x2e
  13ec80:	1a000097 	bne	13eee4 <printf_core+0x40c>
  13ec84:	e5d62001 	ldrb	r2, [r6, #1]
  13ec88:	e352002a 	cmp	r2, #42	; 0x2a
  13ec8c:	1a00011e 	bne	13f10c <printf_core+0x634>
  13ec90:	e5d62002 	ldrb	r2, [r6, #2]
  13ec94:	e2423030 	sub	r3, r2, #48	; 0x30
  13ec98:	e3530009 	cmp	r3, #9
  13ec9c:	8a000002 	bhi	13ecac <printf_core+0x1d4>
  13eca0:	e5d63003 	ldrb	r3, [r6, #3]
  13eca4:	e3530024 	cmp	r3, #36	; 0x24
  13eca8:	0a000143 	beq	13f1bc <printf_core+0x6e4>
  13ecac:	e59d300c 	ldr	r3, [sp, #12]
  13ecb0:	e3530000 	cmp	r3, #0
  13ecb4:	1a00009f 	bne	13ef38 <printf_core+0x460>
  13ecb8:	e59d3004 	ldr	r3, [sp, #4]
  13ecbc:	e2866002 	add	r6, r6, #2
  13ecc0:	e3530000 	cmp	r3, #0
  13ecc4:	159d1018 	ldrne	r1, [sp, #24]
  13ecc8:	03a03001 	moveq	r3, #1
  13eccc:	15913000 	ldrne	r3, [r1]
  13ecd0:	059d5004 	ldreq	r5, [sp, #4]
  13ecd4:	15935000 	ldrne	r5, [r3]
  13ecd8:	12832004 	addne	r2, r3, #4
  13ecdc:	11e03005 	mvnne	r3, r5
  13ece0:	15812000 	strne	r2, [r1]
  13ece4:	11a03fa3 	lsrne	r3, r3, #31
  13ece8:	15d62000 	ldrbne	r2, [r6]
  13ecec:	e58d301c 	str	r3, [sp, #28]
  13ecf0:	ea00007e 	b	13eef0 <printf_core+0x418>
  13ecf4:	e35e0009 	cmp	lr, #9
  13ecf8:	8a000123 	bhi	13f18c <printf_core+0x6b4>
  13ecfc:	e3e09000 	mvn	r9, #0
  13ed00:	e1a01002 	mov	r1, r2
  13ed04:	eaffffcb 	b	13ec38 <printf_core+0x160>
  13ed08:	e28d3070 	add	r3, sp, #112	; 0x70
  13ed0c:	e893000c 	ldm	r3, {r2, r3}
  13ed10:	e28da0d0 	add	sl, sp, #208	; 0xd0
  13ed14:	e1921003 	orrs	r1, r2, r3
  13ed18:	e1a0b00a 	mov	fp, sl
  13ed1c:	0a000009 	beq	13ed48 <printf_core+0x270>
  13ed20:	e1a001a2 	lsr	r0, r2, #3
  13ed24:	e1800e83 	orr	r0, r0, r3, lsl #29
  13ed28:	e1a0c1a3 	lsr	ip, r3, #3
  13ed2c:	e2021007 	and	r1, r2, #7
  13ed30:	e1a0300c 	mov	r3, ip
  13ed34:	e1a02000 	mov	r2, r0
  13ed38:	e2811030 	add	r1, r1, #48	; 0x30
  13ed3c:	e1920003 	orrs	r0, r2, r3
  13ed40:	e56b1001 	strb	r1, [fp, #-1]!
  13ed44:	1afffff5 	bne	13ed20 <printf_core+0x248>
  13ed48:	e2183008 	ands	r3, r8, #8
  13ed4c:	0a00026f 	beq	13f710 <printf_core+0xc38>
  13ed50:	e04a300b 	sub	r3, sl, fp
  13ed54:	e1530005 	cmp	r3, r5
  13ed58:	ba00026b 	blt	13f70c <printf_core+0xc34>
  13ed5c:	e2835001 	add	r5, r3, #1
  13ed60:	e3a03000 	mov	r3, #0
  13ed64:	e58d3020 	str	r3, [sp, #32]
  13ed68:	e59f3db8 	ldr	r3, [pc, #3512]	; 13fb28 <printf_core+0x1050>
  13ed6c:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13ed70:	e59d301c 	ldr	r3, [sp, #28]
  13ed74:	e0132fa5 	ands	r2, r3, r5, lsr #31
  13ed78:	1a000103 	bne	13f18c <printf_core+0x6b4>
  13ed7c:	e59d2070 	ldr	r2, [sp, #112]	; 0x70
  13ed80:	e3530000 	cmp	r3, #0
  13ed84:	e59d3074 	ldr	r3, [sp, #116]	; 0x74
  13ed88:	13c88801 	bicne	r8, r8, #65536	; 0x10000
  13ed8c:	e1923003 	orrs	r3, r2, r3
  13ed90:	03a03001 	moveq	r3, #1
  13ed94:	13a03000 	movne	r3, #0
  13ed98:	e3550000 	cmp	r5, #0
  13ed9c:	01a02003 	moveq	r2, r3
  13eda0:	13a02000 	movne	r2, #0
  13eda4:	e3520000 	cmp	r2, #0
  13eda8:	1a0002a8 	bne	13f850 <printf_core+0xd78>
  13edac:	e04a600b 	sub	r6, sl, fp
  13edb0:	e1560005 	cmp	r6, r5
  13edb4:	a1a05006 	movge	r5, r6
  13edb8:	e0833006 	add	r3, r3, r6
  13edbc:	e1530005 	cmp	r3, r5
  13edc0:	e3e02102 	mvn	r2, #-2147483648	; 0x80000000
  13edc4:	a1a05003 	movge	r5, r3
  13edc8:	e59d3020 	ldr	r3, [sp, #32]
  13edcc:	e0423003 	sub	r3, r2, r3
  13edd0:	e1530005 	cmp	r3, r5
  13edd4:	ba0000ec 	blt	13f18c <printf_core+0x6b4>
  13edd8:	e59d3020 	ldr	r3, [sp, #32]
  13eddc:	e0857003 	add	r7, r5, r3
  13ede0:	e1570009 	cmp	r7, r9
  13ede4:	a1a0a007 	movge	sl, r7
  13ede8:	b1a0a009 	movlt	sl, r9
  13edec:	e59d3008 	ldr	r3, [sp, #8]
  13edf0:	e153000a 	cmp	r3, sl
  13edf4:	ba0000e4 	blt	13f18c <printf_core+0x6b4>
  13edf8:	e157000a 	cmp	r7, sl
  13edfc:	b3a09000 	movlt	r9, #0
  13ee00:	a3a09001 	movge	r9, #1
  13ee04:	e3180a12 	tst	r8, #73728	; 0x12000
  13ee08:	01a03009 	moveq	r3, r9
  13ee0c:	13a03001 	movne	r3, #1
  13ee10:	e3530000 	cmp	r3, #0
  13ee14:	0a000281 	beq	13f820 <printf_core+0xd48>
  13ee18:	e59d3004 	ldr	r3, [sp, #4]
  13ee1c:	e5933000 	ldr	r3, [r3]
  13ee20:	e3130020 	tst	r3, #32
  13ee24:	0a000233 	beq	13f6f8 <printf_core+0xc20>
  13ee28:	e2283801 	eor	r3, r8, #65536	; 0x10000
  13ee2c:	e3130a12 	tst	r3, #73728	; 0x12000
  13ee30:	01a03009 	moveq	r3, r9
  13ee34:	13a03001 	movne	r3, #1
  13ee38:	e3530000 	cmp	r3, #0
  13ee3c:	0a00027d 	beq	13f838 <printf_core+0xd60>
  13ee40:	e1550006 	cmp	r5, r6
  13ee44:	ca000225 	bgt	13f6e0 <printf_core+0xc08>
  13ee48:	e59d3004 	ldr	r3, [sp, #4]
  13ee4c:	e5933000 	ldr	r3, [r3]
  13ee50:	e3130020 	tst	r3, #32
  13ee54:	0a00021c 	beq	13f6cc <printf_core+0xbf4>
  13ee58:	e2283a02 	eor	r3, r8, #8192	; 0x2000
  13ee5c:	e3130a12 	tst	r3, #73728	; 0x12000
  13ee60:	01a03009 	moveq	r3, r9
  13ee64:	13a03001 	movne	r3, #1
  13ee68:	e3530000 	cmp	r3, #0
  13ee6c:	1a000004 	bne	13ee84 <printf_core+0x3ac>
  13ee70:	e1a03007 	mov	r3, r7
  13ee74:	e1a0200a 	mov	r2, sl
  13ee78:	e3a01020 	mov	r1, #32
  13ee7c:	e59d0004 	ldr	r0, [sp, #4]
  13ee80:	ebfffee9 	bl	13ea2c <pad.part.0>
  13ee84:	e1a0b004 	mov	fp, r4
  13ee88:	eaffff1b 	b	13eafc <printf_core+0x24>
  13ee8c:	e5d62001 	ldrb	r2, [r6, #1]
  13ee90:	e2423030 	sub	r3, r2, #48	; 0x30
  13ee94:	e3530009 	cmp	r3, #9
  13ee98:	9a00008b 	bls	13f0cc <printf_core+0x5f4>
  13ee9c:	e59d300c 	ldr	r3, [sp, #12]
  13eea0:	e3530000 	cmp	r3, #0
  13eea4:	1a000023 	bne	13ef38 <printf_core+0x460>
  13eea8:	e59d3004 	ldr	r3, [sp, #4]
  13eeac:	e2866001 	add	r6, r6, #1
  13eeb0:	e3530000 	cmp	r3, #0
  13eeb4:	0a0000be 	beq	13f1b4 <printf_core+0x6dc>
  13eeb8:	e59d1018 	ldr	r1, [sp, #24]
  13eebc:	e5913000 	ldr	r3, [r1]
  13eec0:	e2832004 	add	r2, r3, #4
  13eec4:	e5939000 	ldr	r9, [r3]
  13eec8:	e5812000 	str	r2, [r1]
  13eecc:	e5d62000 	ldrb	r2, [r6]
  13eed0:	e3590000 	cmp	r9, #0
  13eed4:	b3888a02 	orrlt	r8, r8, #8192	; 0x2000
  13eed8:	b2699000 	rsblt	r9, r9, #0
  13eedc:	e352002e 	cmp	r2, #46	; 0x2e
  13eee0:	0affff67 	beq	13ec84 <printf_core+0x1ac>
  13eee4:	e3a03000 	mov	r3, #0
  13eee8:	e3e05000 	mvn	r5, #0
  13eeec:	e58d301c 	str	r3, [sp, #28]
  13eef0:	e3a07000 	mov	r7, #0
  13eef4:	e59f0c30 	ldr	r0, [pc, #3120]	; 13fb2c <printf_core+0x1054>
  13eef8:	ea000007 	b	13ef1c <printf_core+0x444>
  13eefc:	e5531041 	ldrb	r1, [r3, #-65]	; 0xffffffbf
  13ef00:	e2864001 	add	r4, r6, #1
  13ef04:	e2413001 	sub	r3, r1, #1
  13ef08:	e3530007 	cmp	r3, #7
  13ef0c:	8a000011 	bhi	13ef58 <printf_core+0x480>
  13ef10:	e5d62001 	ldrb	r2, [r6, #1]
  13ef14:	e1a07001 	mov	r7, r1
  13ef18:	e1a06004 	mov	r6, r4
  13ef1c:	e0673187 	rsb	r3, r7, r7, lsl #3
  13ef20:	e0873103 	add	r3, r7, r3, lsl #2
  13ef24:	e0803083 	add	r3, r0, r3, lsl #1
  13ef28:	e0833002 	add	r3, r3, r2
  13ef2c:	e2422041 	sub	r2, r2, #65	; 0x41
  13ef30:	e3520039 	cmp	r2, #57	; 0x39
  13ef34:	9afffff0 	bls	13eefc <printf_core+0x424>
  13ef38:	ebffe860 	bl	1390c0 <__errno_location>
  13ef3c:	e3a03016 	mov	r3, #22
  13ef40:	e3e02000 	mvn	r2, #0
  13ef44:	e58d2000 	str	r2, [sp]
  13ef48:	e5803000 	str	r3, [r0]
  13ef4c:	e59d0000 	ldr	r0, [sp]
  13ef50:	e28ddfb3 	add	sp, sp, #716	; 0x2cc
  13ef54:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13ef58:	e3510000 	cmp	r1, #0
  13ef5c:	0afffff5 	beq	13ef38 <printf_core+0x460>
  13ef60:	e351001b 	cmp	r1, #27
  13ef64:	0a000080 	beq	13f16c <printf_core+0x694>
  13ef68:	e35c0000 	cmp	ip, #0
  13ef6c:	ba0000a1 	blt	13f1f8 <printf_core+0x720>
  13ef70:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
  13ef74:	e59d22f0 	ldr	r2, [sp, #752]	; 0x2f0
  13ef78:	e083318c 	add	r3, r3, ip, lsl #3
  13ef7c:	e782110c 	str	r1, [r2, ip, lsl #2]
  13ef80:	e893000c 	ldm	r3, {r2, r3}
  13ef84:	e58d2070 	str	r2, [sp, #112]	; 0x70
  13ef88:	e58d3074 	str	r3, [sp, #116]	; 0x74
  13ef8c:	e59d3004 	ldr	r3, [sp, #4]
  13ef90:	e3530000 	cmp	r3, #0
  13ef94:	0a000079 	beq	13f180 <printf_core+0x6a8>
  13ef98:	e5d63000 	ldrb	r3, [r6]
  13ef9c:	e3570000 	cmp	r7, #0
  13efa0:	e58d3010 	str	r3, [sp, #16]
  13efa4:	0a000004 	beq	13efbc <printf_core+0x4e4>
  13efa8:	e203300f 	and	r3, r3, #15
  13efac:	e3530003 	cmp	r3, #3
  13efb0:	059d3010 	ldreq	r3, [sp, #16]
  13efb4:	03c33020 	biceq	r3, r3, #32
  13efb8:	058d3010 	streq	r3, [sp, #16]
  13efbc:	e59d3010 	ldr	r3, [sp, #16]
  13efc0:	e3180a02 	tst	r8, #8192	; 0x2000
  13efc4:	e2433041 	sub	r3, r3, #65	; 0x41
  13efc8:	13c88801 	bicne	r8, r8, #65536	; 0x10000
  13efcc:	e3530037 	cmp	r3, #55	; 0x37
  13efd0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
  13efd4:	ea0001a2 	b	13f664 <printf_core+0xb8c>
  13efd8:	0013f4b8 	.word	0x0013f4b8
  13efdc:	0013f664 	.word	0x0013f664
  13efe0:	0013f354 	.word	0x0013f354
  13efe4:	0013f664 	.word	0x0013f664
  13efe8:	0013f4b8 	.word	0x0013f4b8
  13efec:	0013f4b8 	.word	0x0013f4b8
  13eff0:	0013f4b8 	.word	0x0013f4b8
  13eff4:	0013f664 	.word	0x0013f664
  13eff8:	0013f664 	.word	0x0013f664
  13effc:	0013f664 	.word	0x0013f664
  13f000:	0013f664 	.word	0x0013f664
  13f004:	0013f664 	.word	0x0013f664
  13f008:	0013f664 	.word	0x0013f664
  13f00c:	0013f664 	.word	0x0013f664
  13f010:	0013f664 	.word	0x0013f664
  13f014:	0013f664 	.word	0x0013f664
  13f018:	0013f664 	.word	0x0013f664
  13f01c:	0013f664 	.word	0x0013f664
  13f020:	0013f3c4 	.word	0x0013f3c4
  13f024:	0013f664 	.word	0x0013f664
  13f028:	0013f664 	.word	0x0013f664
  13f02c:	0013f664 	.word	0x0013f664
  13f030:	0013f664 	.word	0x0013f664
  13f034:	0013f658 	.word	0x0013f658
  13f038:	0013f664 	.word	0x0013f664
  13f03c:	0013f664 	.word	0x0013f664
  13f040:	0013f664 	.word	0x0013f664
  13f044:	0013f664 	.word	0x0013f664
  13f048:	0013f664 	.word	0x0013f664
  13f04c:	0013f664 	.word	0x0013f664
  13f050:	0013f664 	.word	0x0013f664
  13f054:	0013f664 	.word	0x0013f664
  13f058:	0013f4b8 	.word	0x0013f4b8
  13f05c:	0013f664 	.word	0x0013f664
  13f060:	0013f3d8 	.word	0x0013f3d8
  13f064:	0013f414 	.word	0x0013f414
  13f068:	0013f4b8 	.word	0x0013f4b8
  13f06c:	0013f4b8 	.word	0x0013f4b8
  13f070:	0013f4b8 	.word	0x0013f4b8
  13f074:	0013f664 	.word	0x0013f664
  13f078:	0013f414 	.word	0x0013f414
  13f07c:	0013f664 	.word	0x0013f664
  13f080:	0013f664 	.word	0x0013f664
  13f084:	0013f664 	.word	0x0013f664
  13f088:	0013f45c 	.word	0x0013f45c
  13f08c:	0013f48c 	.word	0x0013f48c
  13f090:	0013ed08 	.word	0x0013ed08
  13f094:	0013f5ac 	.word	0x0013f5ac
  13f098:	0013f664 	.word	0x0013f664
  13f09c:	0013f664 	.word	0x0013f664
  13f0a0:	0013f644 	.word	0x0013f644
  13f0a4:	0013f664 	.word	0x0013f664
  13f0a8:	0013f298 	.word	0x0013f298
  13f0ac:	0013f664 	.word	0x0013f664
  13f0b0:	0013f664 	.word	0x0013f664
  13f0b4:	0013f658 	.word	0x0013f658
  13f0b8:	e59d2004 	ldr	r2, [sp, #4]
  13f0bc:	e1a0100a 	mov	r1, sl
  13f0c0:	e1a0000b 	mov	r0, fp
  13f0c4:	eb001341 	bl	143dd0 <__fwritex>
  13f0c8:	eafffeb3 	b	13eb9c <printf_core+0xc4>
  13f0cc:	e5d63002 	ldrb	r3, [r6, #2]
  13f0d0:	e3530024 	cmp	r3, #36	; 0x24
  13f0d4:	1affff70 	bne	13ee9c <printf_core+0x3c4>
  13f0d8:	e3a0300a 	mov	r3, #10
  13f0dc:	e59d12f0 	ldr	r1, [sp, #752]	; 0x2f0
  13f0e0:	e24221c3 	sub	r2, r2, #-1073741776	; 0xc0000030
  13f0e4:	e7813102 	str	r3, [r1, r2, lsl #2]
  13f0e8:	e3a02001 	mov	r2, #1
  13f0ec:	e5d63001 	ldrb	r3, [r6, #1]
  13f0f0:	e58d200c 	str	r2, [sp, #12]
  13f0f4:	e2833202 	add	r3, r3, #536870912	; 0x20000000
  13f0f8:	e59d2028 	ldr	r2, [sp, #40]	; 0x28
  13f0fc:	e2433030 	sub	r3, r3, #48	; 0x30
  13f100:	e7929183 	ldr	r9, [r2, r3, lsl #3]
  13f104:	e2866003 	add	r6, r6, #3
  13f108:	eaffff6f 	b	13eecc <printf_core+0x3f4>
  13f10c:	e2421030 	sub	r1, r2, #48	; 0x30
  13f110:	e3510009 	cmp	r1, #9
  13f114:	e3a05000 	mov	r5, #0
  13f118:	e2866001 	add	r6, r6, #1
  13f11c:	8a00000f 	bhi	13f160 <printf_core+0x688>
  13f120:	e59f09fc 	ldr	r0, [pc, #2556]	; 13fb24 <printf_core+0x104c>
  13f124:	e0653e85 	rsb	r3, r5, r5, lsl #29
  13f128:	e0653103 	rsb	r3, r5, r3, lsl #2
  13f12c:	e1a03083 	lsl	r3, r3, #1
  13f130:	e1550000 	cmp	r5, r0
  13f134:	e2433106 	sub	r3, r3, #-2147483647	; 0x80000001
  13f138:	8a000003 	bhi	13f14c <printf_core+0x674>
  13f13c:	e1510003 	cmp	r1, r3
  13f140:	e0855105 	add	r5, r5, r5, lsl #2
  13f144:	d0815085 	addle	r5, r1, r5, lsl #1
  13f148:	da000000 	ble	13f150 <printf_core+0x678>
  13f14c:	e3e05000 	mvn	r5, #0
  13f150:	e5f62001 	ldrb	r2, [r6, #1]!
  13f154:	e2421030 	sub	r1, r2, #48	; 0x30
  13f158:	e3510009 	cmp	r1, #9
  13f15c:	9afffff0 	bls	13f124 <printf_core+0x64c>
  13f160:	e3a03001 	mov	r3, #1
  13f164:	e58d301c 	str	r3, [sp, #28]
  13f168:	eaffff60 	b	13eef0 <printf_core+0x418>
  13f16c:	e35c0000 	cmp	ip, #0
  13f170:	aaffff70 	bge	13ef38 <printf_core+0x460>
  13f174:	e59d3004 	ldr	r3, [sp, #4]
  13f178:	e3530000 	cmp	r3, #0
  13f17c:	1affff85 	bne	13ef98 <printf_core+0x4c0>
  13f180:	e59d3008 	ldr	r3, [sp, #8]
  13f184:	e153000a 	cmp	r3, sl
  13f188:	aaffff3d 	bge	13ee84 <printf_core+0x3ac>
  13f18c:	ebffe7cb 	bl	1390c0 <__errno_location>
  13f190:	e3e02000 	mvn	r2, #0
  13f194:	e3a0304b 	mov	r3, #75	; 0x4b
  13f198:	e58d2000 	str	r2, [sp]
  13f19c:	e5803000 	str	r3, [r0]
  13f1a0:	e59d0000 	ldr	r0, [sp]
  13f1a4:	e28ddfb3 	add	sp, sp, #716	; 0x2cc
  13f1a8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  13f1ac:	e1a04003 	mov	r4, r3
  13f1b0:	eafffe6c 	b	13eb68 <printf_core+0x90>
  13f1b4:	e59d9004 	ldr	r9, [sp, #4]
  13f1b8:	eafffeaf 	b	13ec7c <printf_core+0x1a4>
  13f1bc:	e3a0300a 	mov	r3, #10
  13f1c0:	e59d12f0 	ldr	r1, [sp, #752]	; 0x2f0
  13f1c4:	e24221c3 	sub	r2, r2, #-1073741776	; 0xc0000030
  13f1c8:	e7813102 	str	r3, [r1, r2, lsl #2]
  13f1cc:	e5d63002 	ldrb	r3, [r6, #2]
  13f1d0:	e59d1028 	ldr	r1, [sp, #40]	; 0x28
  13f1d4:	e2833202 	add	r3, r3, #536870912	; 0x20000000
  13f1d8:	e2433030 	sub	r3, r3, #48	; 0x30
  13f1dc:	e7915183 	ldr	r5, [r1, r3, lsl #3]
  13f1e0:	e5d62004 	ldrb	r2, [r6, #4]
  13f1e4:	e1e03005 	mvn	r3, r5
  13f1e8:	e1a03fa3 	lsr	r3, r3, #31
  13f1ec:	e2866004 	add	r6, r6, #4
  13f1f0:	e58d301c 	str	r3, [sp, #28]
  13f1f4:	eaffff3d 	b	13eef0 <printf_core+0x418>
  13f1f8:	e59d3004 	ldr	r3, [sp, #4]
  13f1fc:	e3530000 	cmp	r3, #0
  13f200:	0a000409 	beq	14022c <printf_core+0x1754>
  13f204:	e59d2018 	ldr	r2, [sp, #24]
  13f208:	e28d0070 	add	r0, sp, #112	; 0x70
  13f20c:	ebfffda1 	bl	13e898 <pop_arg>
  13f210:	eaffff60 	b	13ef98 <printf_core+0x4c0>
  13f214:	e3a03001 	mov	r3, #1
  13f218:	e5d42003 	ldrb	r2, [r4, #3]
  13f21c:	e58d300c 	str	r3, [sp, #12]
  13f220:	e2423020 	sub	r3, r2, #32
  13f224:	e353001f 	cmp	r3, #31
  13f228:	e2846003 	add	r6, r4, #3
  13f22c:	9afffe68 	bls	13ebd4 <printf_core+0xfc>
  13f230:	e3a08000 	mov	r8, #0
  13f234:	eafffe75 	b	13ec10 <printf_core+0x138>
  13f238:	e59d3004 	ldr	r3, [sp, #4]
  13f23c:	e3530000 	cmp	r3, #0
  13f240:	1affff41 	bne	13ef4c <printf_core+0x474>
  13f244:	e59d300c 	ldr	r3, [sp, #12]
  13f248:	e3530000 	cmp	r3, #0
  13f24c:	0a0003f6 	beq	14022c <printf_core+0x1754>
  13f250:	e3a05001 	mov	r5, #1
  13f254:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
  13f258:	e59d62f0 	ldr	r6, [sp, #752]	; 0x2f0
  13f25c:	e59d7018 	ldr	r7, [sp, #24]
  13f260:	e2834008 	add	r4, r3, #8
  13f264:	e5b61004 	ldr	r1, [r6, #4]!
  13f268:	e3510000 	cmp	r1, #0
  13f26c:	0a0004f8 	beq	140654 <printf_core+0x1b7c>
  13f270:	e1a00004 	mov	r0, r4
  13f274:	e2855001 	add	r5, r5, #1
  13f278:	e1a02007 	mov	r2, r7
  13f27c:	ebfffd85 	bl	13e898 <pop_arg>
  13f280:	e355000a 	cmp	r5, #10
  13f284:	e2844008 	add	r4, r4, #8
  13f288:	1afffff5 	bne	13f264 <printf_core+0x78c>
  13f28c:	e3a03001 	mov	r3, #1
  13f290:	e58d3000 	str	r3, [sp]
  13f294:	eaffff2c 	b	13ef4c <printf_core+0x474>
  13f298:	e3a03000 	mov	r3, #0
  13f29c:	e28d7070 	add	r7, sp, #112	; 0x70
  13f2a0:	e89700c0 	ldm	r7, {r6, r7}
  13f2a4:	e58d3020 	str	r3, [sp, #32]
  13f2a8:	e59f3878 	ldr	r3, [pc, #2168]	; 13fb28 <printf_core+0x1050>
  13f2ac:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13f2b0:	e3a03000 	mov	r3, #0
  13f2b4:	e3e02000 	mvn	r2, #0
  13f2b8:	e1570003 	cmp	r7, r3
  13f2bc:	01560002 	cmpeq	r6, r2
  13f2c0:	e28da0d0 	add	sl, sp, #208	; 0xd0
  13f2c4:	91a0b00a 	movls	fp, sl
  13f2c8:	9a000015 	bls	13f324 <printf_core+0x84c>
  13f2cc:	e1a0b00a 	mov	fp, sl
  13f2d0:	e58d2010 	str	r2, [sp, #16]
  13f2d4:	e58d3014 	str	r3, [sp, #20]
  13f2d8:	e1a00006 	mov	r0, r6
  13f2dc:	e1a01007 	mov	r1, r7
  13f2e0:	e3a0200a 	mov	r2, #10
  13f2e4:	e3a03000 	mov	r3, #0
  13f2e8:	eb001834 	bl	1453c0 <__aeabi_uldivmod>
  13f2ec:	e2822030 	add	r2, r2, #48	; 0x30
  13f2f0:	e56b2001 	strb	r2, [fp, #-1]!
  13f2f4:	e1a00006 	mov	r0, r6
  13f2f8:	e1a01007 	mov	r1, r7
  13f2fc:	e3a0200a 	mov	r2, #10
  13f300:	e3a03000 	mov	r3, #0
  13f304:	eb00182d 	bl	1453c0 <__aeabi_uldivmod>
  13f308:	e28d3010 	add	r3, sp, #16
  13f30c:	e893000c 	ldm	r3, {r2, r3}
  13f310:	e1510003 	cmp	r1, r3
  13f314:	01500002 	cmpeq	r0, r2
  13f318:	e1a06000 	mov	r6, r0
  13f31c:	e1a07001 	mov	r7, r1
  13f320:	8affffec 	bhi	13f2d8 <printf_core+0x800>
  13f324:	e3560000 	cmp	r6, #0
  13f328:	0afffe90 	beq	13ed70 <printf_core+0x298>
  13f32c:	e59f1838 	ldr	r1, [pc, #2104]	; 13fb6c <printf_core+0x1094>
  13f330:	e0832196 	umull	r2, r3, r6, r1
  13f334:	e1a031a3 	lsr	r3, r3, #3
  13f338:	e0832103 	add	r2, r3, r3, lsl #2
  13f33c:	e0466082 	sub	r6, r6, r2, lsl #1
  13f340:	e2862030 	add	r2, r6, #48	; 0x30
  13f344:	e2536000 	subs	r6, r3, #0
  13f348:	e56b2001 	strb	r2, [fp, #-1]!
  13f34c:	1afffff6 	bne	13f32c <printf_core+0x854>
  13f350:	eafffe86 	b	13ed70 <printf_core+0x298>
  13f354:	e3a03000 	mov	r3, #0
  13f358:	e3e0a000 	mvn	sl, #0
  13f35c:	e59d1070 	ldr	r1, [sp, #112]	; 0x70
  13f360:	e28d707c 	add	r7, sp, #124	; 0x7c
  13f364:	e58d3080 	str	r3, [sp, #128]	; 0x80
  13f368:	e58d107c 	str	r1, [sp, #124]	; 0x7c
  13f36c:	e58d7070 	str	r7, [sp, #112]	; 0x70
  13f370:	e3510000 	cmp	r1, #0
  13f374:	0a000112 	beq	13f7c4 <printf_core+0xcec>
  13f378:	e3a05000 	mov	r5, #0
  13f37c:	e28d6068 	add	r6, sp, #104	; 0x68
  13f380:	ea000007 	b	13f3a4 <printf_core+0x8cc>
  13f384:	e1530000 	cmp	r3, r0
  13f388:	3a0000e4 	bcc	13f720 <printf_core+0xc48>
  13f38c:	e0855000 	add	r5, r5, r0
  13f390:	e155000a 	cmp	r5, sl
  13f394:	2a0000e1 	bcs	13f720 <printf_core+0xc48>
  13f398:	e5b71004 	ldr	r1, [r7, #4]!
  13f39c:	e3510000 	cmp	r1, #0
  13f3a0:	0a0000de 	beq	13f720 <printf_core+0xc48>
  13f3a4:	e1a00006 	mov	r0, r6
  13f3a8:	eb00109c 	bl	143620 <wctomb>
  13f3ac:	e3500000 	cmp	r0, #0
  13f3b0:	e04a3005 	sub	r3, sl, r5
  13f3b4:	aafffff2 	bge	13f384 <printf_core+0x8ac>
  13f3b8:	e3e03000 	mvn	r3, #0
  13f3bc:	e58d3000 	str	r3, [sp]
  13f3c0:	eafffee1 	b	13ef4c <printf_core+0x474>
  13f3c4:	e255a000 	subs	sl, r5, #0
  13f3c8:	e59d7070 	ldr	r7, [sp, #112]	; 0x70
  13f3cc:	0a0000fc 	beq	13f7c4 <printf_core+0xcec>
  13f3d0:	e5971000 	ldr	r1, [r7]
  13f3d4:	eaffffe5 	b	13f370 <printf_core+0x898>
  13f3d8:	e3a00001 	mov	r0, #1
  13f3dc:	e59d3070 	ldr	r3, [sp, #112]	; 0x70
  13f3e0:	e3c88801 	bic	r8, r8, #65536	; 0x10000
  13f3e4:	e5cd30cf 	strb	r3, [sp, #207]	; 0xcf
  13f3e8:	e28d60d0 	add	r6, sp, #208	; 0xd0
  13f3ec:	e28db0cf 	add	fp, sp, #207	; 0xcf
  13f3f0:	e3a03000 	mov	r3, #0
  13f3f4:	e046600b 	sub	r6, r6, fp
  13f3f8:	e58d3020 	str	r3, [sp, #32]
  13f3fc:	e59f3724 	ldr	r3, [pc, #1828]	; 13fb28 <printf_core+0x1050>
  13f400:	e1560000 	cmp	r6, r0
  13f404:	a1a05006 	movge	r5, r6
  13f408:	b1a05000 	movlt	r5, r0
  13f40c:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13f410:	eafffe70 	b	13edd8 <printf_core+0x300>
  13f414:	e28d7070 	add	r7, sp, #112	; 0x70
  13f418:	e89700c0 	ldm	r7, {r6, r7}
  13f41c:	e3560000 	cmp	r6, #0
  13f420:	e2d73000 	sbcs	r3, r7, #0
  13f424:	ba000122 	blt	13f8b4 <printf_core+0xddc>
  13f428:	e3180b02 	tst	r8, #2048	; 0x800
  13f42c:	1a000379 	bne	140218 <printf_core+0x1740>
  13f430:	e59fa6f0 	ldr	sl, [pc, #1776]	; 13fb28 <printf_core+0x1050>
  13f434:	e2083001 	and	r3, r8, #1
  13f438:	e3530000 	cmp	r3, #0
  13f43c:	e28a2002 	add	r2, sl, #2
  13f440:	01a0300a 	moveq	r3, sl
  13f444:	11a03002 	movne	r3, r2
  13f448:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13f44c:	13a03001 	movne	r3, #1
  13f450:	03a03000 	moveq	r3, #0
  13f454:	e58d3020 	str	r3, [sp, #32]
  13f458:	eaffff94 	b	13f2b0 <printf_core+0x7d8>
  13f45c:	ebffe717 	bl	1390c0 <__errno_location>
  13f460:	e5900000 	ldr	r0, [r0]
  13f464:	ebffe737 	bl	139148 <strerror>
  13f468:	e1a0b000 	mov	fp, r0
  13f46c:	e3550000 	cmp	r5, #0
  13f470:	ba0000fa 	blt	13f860 <printf_core+0xd88>
  13f474:	e1a01005 	mov	r1, r5
  13f478:	e1a0000b 	mov	r0, fp
  13f47c:	eb0008dd 	bl	1417f8 <strnlen>
  13f480:	e08b6000 	add	r6, fp, r0
  13f484:	e3c88801 	bic	r8, r8, #65536	; 0x10000
  13f488:	eaffffd8 	b	13f3f0 <printf_core+0x918>
  13f48c:	e3570007 	cmp	r7, #7
  13f490:	979ff107 	ldrls	pc, [pc, r7, lsl #2]
  13f494:	eaffff39 	b	13f180 <printf_core+0x6a8>
  13f498:	0013f688 	.word	0x0013f688
  13f49c:	0013f688 	.word	0x0013f688
  13f4a0:	0013f698 	.word	0x0013f698
  13f4a4:	0013f6ac 	.word	0x0013f6ac
  13f4a8:	0013f6bc 	.word	0x0013f6bc
  13f4ac:	0013f180 	.word	0x0013f180
  13f4b0:	0013f688 	.word	0x0013f688
  13f4b4:	0013f698 	.word	0x0013f698
  13f4b8:	e59d301c 	ldr	r3, [sp, #28]
  13f4bc:	e0133fa5 	ands	r3, r3, r5, lsr #31
  13f4c0:	1affff31 	bne	13f18c <printf_core+0x6b4>
  13f4c4:	e28d7070 	add	r7, sp, #112	; 0x70
  13f4c8:	e89700c0 	ldm	r7, {r6, r7}
  13f4cc:	e1b02fa7 	lsrs	r2, r7, #31
  13f4d0:	e58d2030 	str	r2, [sp, #48]	; 0x30
  13f4d4:	e58d306c 	str	r3, [sp, #108]	; 0x6c
  13f4d8:	0a0000e8 	beq	13f880 <printf_core+0xda8>
  13f4dc:	e2873102 	add	r3, r7, #-2147483648	; 0x80000000
  13f4e0:	e1a07003 	mov	r7, r3
  13f4e4:	e59f3644 	ldr	r3, [pc, #1604]	; 13fb30 <printf_core+0x1058>
  13f4e8:	e58d3034 	str	r3, [sp, #52]	; 0x34
  13f4ec:	e3e02000 	mvn	r2, #0
  13f4f0:	e59f363c 	ldr	r3, [pc, #1596]	; 13fb34 <printf_core+0x105c>
  13f4f4:	e3c71102 	bic	r1, r7, #-2147483648	; 0x80000000
  13f4f8:	e1510003 	cmp	r1, r3
  13f4fc:	01560002 	cmpeq	r6, r2
  13f500:	e1a00006 	mov	r0, r6
  13f504:	9a0000fb 	bls	13f8f8 <printf_core+0xe20>
  13f508:	e59d3010 	ldr	r3, [sp, #16]
  13f50c:	e59fe624 	ldr	lr, [pc, #1572]	; 13fb38 <printf_core+0x1060>
  13f510:	e59fc624 	ldr	ip, [pc, #1572]	; 13fb3c <printf_core+0x1064>
  13f514:	e213a020 	ands	sl, r3, #32
  13f518:	e1a02006 	mov	r2, r6
  13f51c:	e1a03007 	mov	r3, r7
  13f520:	e1a01007 	mov	r1, r7
  13f524:	01a0600e 	moveq	r6, lr
  13f528:	11a0600c 	movne	r6, ip
  13f52c:	eb001729 	bl	1451d8 <__aeabi_dcmpeq>
  13f530:	e3500000 	cmp	r0, #0
  13f534:	1a000004 	bne	13f54c <printf_core+0xa74>
  13f538:	e59fe600 	ldr	lr, [pc, #1536]	; 13fb40 <printf_core+0x1068>
  13f53c:	e59fc600 	ldr	ip, [pc, #1536]	; 13fb44 <printf_core+0x106c>
  13f540:	e35a0000 	cmp	sl, #0
  13f544:	01a0600e 	moveq	r6, lr
  13f548:	11a0600c 	movne	r6, ip
  13f54c:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
  13f550:	e283a003 	add	sl, r3, #3
  13f554:	e159000a 	cmp	r9, sl
  13f558:	c3a07000 	movgt	r7, #0
  13f55c:	d3a07001 	movle	r7, #1
  13f560:	e3180a02 	tst	r8, #8192	; 0x2000
  13f564:	01a03007 	moveq	r3, r7
  13f568:	13a03001 	movne	r3, #1
  13f56c:	e3530000 	cmp	r3, #0
  13f570:	0a00042e 	beq	140630 <printf_core+0x1b58>
  13f574:	e59d3004 	ldr	r3, [sp, #4]
  13f578:	e5933000 	ldr	r3, [r3]
  13f57c:	e3130020 	tst	r3, #32
  13f580:	0a00032c 	beq	140238 <printf_core+0x1760>
  13f584:	e2283a02 	eor	r3, r8, #8192	; 0x2000
  13f588:	e3130a12 	tst	r3, #73728	; 0x12000
  13f58c:	13a07001 	movne	r7, #1
  13f590:	e3570000 	cmp	r7, #0
  13f594:	0a00034f 	beq	1402d8 <printf_core+0x1800>
  13f598:	e159000a 	cmp	r9, sl
  13f59c:	a1a0a009 	movge	sl, r9
  13f5a0:	e35a0000 	cmp	sl, #0
  13f5a4:	aafffef5 	bge	13f180 <printf_core+0x6a8>
  13f5a8:	eafffef7 	b	13f18c <printf_core+0x6b4>
  13f5ac:	e3550008 	cmp	r5, #8
  13f5b0:	e3a03078 	mov	r3, #120	; 0x78
  13f5b4:	33a05008 	movcc	r5, #8
  13f5b8:	e3a0c020 	mov	ip, #32
  13f5bc:	e58d3010 	str	r3, [sp, #16]
  13f5c0:	e3888008 	orr	r8, r8, #8
  13f5c4:	e28d3070 	add	r3, sp, #112	; 0x70
  13f5c8:	e893000c 	ldm	r3, {r2, r3}
  13f5cc:	e28da0d0 	add	sl, sp, #208	; 0xd0
  13f5d0:	e1921003 	orrs	r1, r2, r3
  13f5d4:	e1a0b00a 	mov	fp, sl
  13f5d8:	0a00004b 	beq	13f70c <printf_core+0xc34>
  13f5dc:	e59f6584 	ldr	r6, [pc, #1412]	; 13fb68 <printf_core+0x1090>
  13f5e0:	e3a01000 	mov	r1, #0
  13f5e4:	e202000f 	and	r0, r2, #15
  13f5e8:	e1a0e222 	lsr	lr, r2, #4
  13f5ec:	e58d0020 	str	r0, [sp, #32]
  13f5f0:	e58d1024 	str	r1, [sp, #36]	; 0x24
  13f5f4:	e18eee03 	orr	lr, lr, r3, lsl #28
  13f5f8:	e1a01223 	lsr	r1, r3, #4
  13f5fc:	e1a03001 	mov	r3, r1
  13f600:	e1a0200e 	mov	r2, lr
  13f604:	e59d1020 	ldr	r1, [sp, #32]
  13f608:	e0860001 	add	r0, r6, r1
  13f60c:	e5d01000 	ldrb	r1, [r0]
  13f610:	e1920003 	orrs	r0, r2, r3
  13f614:	e18c1001 	orr	r1, ip, r1
  13f618:	e56b1001 	strb	r1, [fp, #-1]!
  13f61c:	1affffef 	bne	13f5e0 <printf_core+0xb08>
  13f620:	e2183008 	ands	r3, r8, #8
  13f624:	0a000039 	beq	13f710 <printf_core+0xc38>
  13f628:	e3a02002 	mov	r2, #2
  13f62c:	e59f34f4 	ldr	r3, [pc, #1268]	; 13fb28 <printf_core+0x1050>
  13f630:	e58d2020 	str	r2, [sp, #32]
  13f634:	e59d2010 	ldr	r2, [sp, #16]
  13f638:	e0833242 	add	r3, r3, r2, asr #4
  13f63c:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13f640:	eafffdca 	b	13ed70 <printf_core+0x298>
  13f644:	e59db070 	ldr	fp, [sp, #112]	; 0x70
  13f648:	e59f34f8 	ldr	r3, [pc, #1272]	; 13fb48 <printf_core+0x1070>
  13f64c:	e35b0000 	cmp	fp, #0
  13f650:	01a0b003 	moveq	fp, r3
  13f654:	eaffff84 	b	13f46c <printf_core+0x994>
  13f658:	e59d3010 	ldr	r3, [sp, #16]
  13f65c:	e203c020 	and	ip, r3, #32
  13f660:	eaffffd7 	b	13f5c4 <printf_core+0xaec>
  13f664:	e3a03000 	mov	r3, #0
  13f668:	e28d60d0 	add	r6, sp, #208	; 0xd0
  13f66c:	e046600b 	sub	r6, r6, fp
  13f670:	e58d3020 	str	r3, [sp, #32]
  13f674:	e59f34ac 	ldr	r3, [pc, #1196]	; 13fb28 <printf_core+0x1050>
  13f678:	e1560005 	cmp	r6, r5
  13f67c:	a1a05006 	movge	r5, r6
  13f680:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13f684:	eafffdd3 	b	13edd8 <printf_core+0x300>
  13f688:	e59d3070 	ldr	r3, [sp, #112]	; 0x70
  13f68c:	e59d2000 	ldr	r2, [sp]
  13f690:	e5832000 	str	r2, [r3]
  13f694:	eafffeb9 	b	13f180 <printf_core+0x6a8>
  13f698:	e59d2000 	ldr	r2, [sp]
  13f69c:	e59d1070 	ldr	r1, [sp, #112]	; 0x70
  13f6a0:	e1a03fc2 	asr	r3, r2, #31
  13f6a4:	e881000c 	stm	r1, {r2, r3}
  13f6a8:	eafffeb4 	b	13f180 <printf_core+0x6a8>
  13f6ac:	e59d3070 	ldr	r3, [sp, #112]	; 0x70
  13f6b0:	e59d2000 	ldr	r2, [sp]
  13f6b4:	e1c320b0 	strh	r2, [r3]
  13f6b8:	eafffeb0 	b	13f180 <printf_core+0x6a8>
  13f6bc:	e59d3070 	ldr	r3, [sp, #112]	; 0x70
  13f6c0:	e59d2000 	ldr	r2, [sp]
  13f6c4:	e5c32000 	strb	r2, [r3]
  13f6c8:	eafffeac 	b	13f180 <printf_core+0x6a8>
  13f6cc:	e1a01006 	mov	r1, r6
  13f6d0:	e1a0000b 	mov	r0, fp
  13f6d4:	e59d2004 	ldr	r2, [sp, #4]
  13f6d8:	eb0011bc 	bl	143dd0 <__fwritex>
  13f6dc:	eafffddd 	b	13ee58 <printf_core+0x380>
  13f6e0:	e1a02005 	mov	r2, r5
  13f6e4:	e1a03006 	mov	r3, r6
  13f6e8:	e3a01030 	mov	r1, #48	; 0x30
  13f6ec:	e59d0004 	ldr	r0, [sp, #4]
  13f6f0:	ebfffccd 	bl	13ea2c <pad.part.0>
  13f6f4:	eafffdd3 	b	13ee48 <printf_core+0x370>
  13f6f8:	e59d1020 	ldr	r1, [sp, #32]
  13f6fc:	e59d002c 	ldr	r0, [sp, #44]	; 0x2c
  13f700:	e59d2004 	ldr	r2, [sp, #4]
  13f704:	eb0011b1 	bl	143dd0 <__fwritex>
  13f708:	eafffdc6 	b	13ee28 <printf_core+0x350>
  13f70c:	e3a03000 	mov	r3, #0
  13f710:	e58d3020 	str	r3, [sp, #32]
  13f714:	e59f340c 	ldr	r3, [pc, #1036]	; 13fb28 <printf_core+0x1050>
  13f718:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13f71c:	eafffd93 	b	13ed70 <printf_core+0x298>
  13f720:	e3550000 	cmp	r5, #0
  13f724:	e1a0b005 	mov	fp, r5
  13f728:	bafffe97 	blt	13f18c <printf_core+0x6b4>
  13f72c:	e1550009 	cmp	r5, r9
  13f730:	b3a03000 	movlt	r3, #0
  13f734:	a3a03001 	movge	r3, #1
  13f738:	e3180a12 	tst	r8, #73728	; 0x12000
  13f73c:	e58d3010 	str	r3, [sp, #16]
  13f740:	13a03001 	movne	r3, #1
  13f744:	e3530000 	cmp	r3, #0
  13f748:	0a000062 	beq	13f8d8 <printf_core+0xe00>
  13f74c:	e3550000 	cmp	r5, #0
  13f750:	e59d7070 	ldr	r7, [sp, #112]	; 0x70
  13f754:	0a000025 	beq	13f7f0 <printf_core+0xd18>
  13f758:	e5971000 	ldr	r1, [r7]
  13f75c:	e3510000 	cmp	r1, #0
  13f760:	0a000022 	beq	13f7f0 <printf_core+0xd18>
  13f764:	e3a0a000 	mov	sl, #0
  13f768:	e58d401c 	str	r4, [sp, #28]
  13f76c:	e28d6068 	add	r6, sp, #104	; 0x68
  13f770:	e1a0400a 	mov	r4, sl
  13f774:	e59da004 	ldr	sl, [sp, #4]
  13f778:	ea000004 	b	13f790 <printf_core+0xcb8>
  13f77c:	e1540005 	cmp	r4, r5
  13f780:	2a000024 	bcs	13f818 <printf_core+0xd40>
  13f784:	e5b71004 	ldr	r1, [r7, #4]!
  13f788:	e3510000 	cmp	r1, #0
  13f78c:	0a000021 	beq	13f818 <printf_core+0xd40>
  13f790:	e1a00006 	mov	r0, r6
  13f794:	eb000fa1 	bl	143620 <wctomb>
  13f798:	e0844000 	add	r4, r4, r0
  13f79c:	e1540005 	cmp	r4, r5
  13f7a0:	8a00001c 	bhi	13f818 <printf_core+0xd40>
  13f7a4:	e59a2000 	ldr	r2, [sl]
  13f7a8:	e3120020 	tst	r2, #32
  13f7ac:	1afffff2 	bne	13f77c <printf_core+0xca4>
  13f7b0:	e1a01000 	mov	r1, r0
  13f7b4:	e1a0200a 	mov	r2, sl
  13f7b8:	e1a00006 	mov	r0, r6
  13f7bc:	eb001183 	bl	143dd0 <__fwritex>
  13f7c0:	eaffffed 	b	13f77c <printf_core+0xca4>
  13f7c4:	e3590000 	cmp	r9, #0
  13f7c8:	c3a03000 	movgt	r3, #0
  13f7cc:	d3a03001 	movle	r3, #1
  13f7d0:	e3180a12 	tst	r8, #73728	; 0x12000
  13f7d4:	e58d3010 	str	r3, [sp, #16]
  13f7d8:	13a03001 	movne	r3, #1
  13f7dc:	e3530000 	cmp	r3, #0
  13f7e0:	01a0b003 	moveq	fp, r3
  13f7e4:	01a0500b 	moveq	r5, fp
  13f7e8:	0a00003a 	beq	13f8d8 <printf_core+0xe00>
  13f7ec:	e3a0b000 	mov	fp, #0
  13f7f0:	e2283a02 	eor	r3, r8, #8192	; 0x2000
  13f7f4:	e3130a12 	tst	r3, #73728	; 0x12000
  13f7f8:	e59d3010 	ldr	r3, [sp, #16]
  13f7fc:	13a03001 	movne	r3, #1
  13f800:	e3530000 	cmp	r3, #0
  13f804:	0a00027d 	beq	140200 <printf_core+0x1728>
  13f808:	e159000b 	cmp	r9, fp
  13f80c:	a1a0a009 	movge	sl, r9
  13f810:	b1a0a00b 	movlt	sl, fp
  13f814:	eafffe59 	b	13f180 <printf_core+0x6a8>
  13f818:	e59d401c 	ldr	r4, [sp, #28]
  13f81c:	eafffff3 	b	13f7f0 <printf_core+0xd18>
  13f820:	e1a03007 	mov	r3, r7
  13f824:	e1a0200a 	mov	r2, sl
  13f828:	e3a01020 	mov	r1, #32
  13f82c:	e59d0004 	ldr	r0, [sp, #4]
  13f830:	ebfffc7d 	bl	13ea2c <pad.part.0>
  13f834:	eafffd77 	b	13ee18 <printf_core+0x340>
  13f838:	e1a03007 	mov	r3, r7
  13f83c:	e1a0200a 	mov	r2, sl
  13f840:	e3a01030 	mov	r1, #48	; 0x30
  13f844:	e59d0004 	ldr	r0, [sp, #4]
  13f848:	ebfffc77 	bl	13ea2c <pad.part.0>
  13f84c:	eafffd7b 	b	13ee40 <printf_core+0x368>
  13f850:	e3a05000 	mov	r5, #0
  13f854:	e1a0b00a 	mov	fp, sl
  13f858:	e1a06005 	mov	r6, r5
  13f85c:	eafffd5d 	b	13edd8 <printf_core+0x300>
  13f860:	e3e01102 	mvn	r1, #-2147483648	; 0x80000000
  13f864:	e1a0000b 	mov	r0, fp
  13f868:	eb0007e2 	bl	1417f8 <strnlen>
  13f86c:	e7db3000 	ldrb	r3, [fp, r0]
  13f870:	e08b6000 	add	r6, fp, r0
  13f874:	e3530000 	cmp	r3, #0
  13f878:	0affff01 	beq	13f484 <printf_core+0x9ac>
  13f87c:	eafffe42 	b	13f18c <printf_core+0x6b4>
  13f880:	e3180b02 	tst	r8, #2048	; 0x800
  13f884:	1a000278 	bne	14026c <printf_core+0x1794>
  13f888:	e59f22bc 	ldr	r2, [pc, #700]	; 13fb4c <printf_core+0x1074>
  13f88c:	e2083001 	and	r3, r8, #1
  13f890:	e3530000 	cmp	r3, #0
  13f894:	e2821005 	add	r1, r2, #5
  13f898:	01a03002 	moveq	r3, r2
  13f89c:	11a03001 	movne	r3, r1
  13f8a0:	e58d3034 	str	r3, [sp, #52]	; 0x34
  13f8a4:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
  13f8a8:	13a03001 	movne	r3, #1
  13f8ac:	e58d3030 	str	r3, [sp, #48]	; 0x30
  13f8b0:	eaffff0d 	b	13f4ec <printf_core+0xa14>
  13f8b4:	e3a03001 	mov	r3, #1
  13f8b8:	e2766000 	rsbs	r6, r6, #0
  13f8bc:	e58d3020 	str	r3, [sp, #32]
  13f8c0:	e59f3260 	ldr	r3, [pc, #608]	; 13fb28 <printf_core+0x1050>
  13f8c4:	e2e77000 	rsc	r7, r7, #0
  13f8c8:	e58d6070 	str	r6, [sp, #112]	; 0x70
  13f8cc:	e58d7074 	str	r7, [sp, #116]	; 0x74
  13f8d0:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13f8d4:	eafffe75 	b	13f2b0 <printf_core+0x7d8>
  13f8d8:	e1a0300b 	mov	r3, fp
  13f8dc:	e1a02009 	mov	r2, r9
  13f8e0:	e3a01020 	mov	r1, #32
  13f8e4:	e59d0004 	ldr	r0, [sp, #4]
  13f8e8:	ebfffc4f 	bl	13ea2c <pad.part.0>
  13f8ec:	e3a03000 	mov	r3, #0
  13f8f0:	e58d3010 	str	r3, [sp, #16]
  13f8f4:	eaffff94 	b	13f74c <printf_core+0xc74>
  13f8f8:	e28d206c 	add	r2, sp, #108	; 0x6c
  13f8fc:	e1a01007 	mov	r1, r7
  13f900:	eb000f2f 	bl	1435c4 <frexpl>
  13f904:	e1a02000 	mov	r2, r0
  13f908:	e1a03001 	mov	r3, r1
  13f90c:	eb0013f6 	bl	1448ec <__adddf3>
  13f910:	e3a03000 	mov	r3, #0
  13f914:	e3a02000 	mov	r2, #0
  13f918:	e58d001c 	str	r0, [sp, #28]
  13f91c:	e58d1038 	str	r1, [sp, #56]	; 0x38
  13f920:	eb00162c 	bl	1451d8 <__aeabi_dcmpeq>
  13f924:	e59d306c 	ldr	r3, [sp, #108]	; 0x6c
  13f928:	e3500000 	cmp	r0, #0
  13f92c:	02433001 	subeq	r3, r3, #1
  13f930:	158d3020 	strne	r3, [sp, #32]
  13f934:	058d3020 	streq	r3, [sp, #32]
  13f938:	058d306c 	streq	r3, [sp, #108]	; 0x6c
  13f93c:	e59d3010 	ldr	r3, [sp, #16]
  13f940:	e3833020 	orr	r3, r3, #32
  13f944:	e3530061 	cmp	r3, #97	; 0x61
  13f948:	e58d303c 	str	r3, [sp, #60]	; 0x3c
  13f94c:	0a000267 	beq	1402f0 <printf_core+0x1818>
  13f950:	e3550000 	cmp	r5, #0
  13f954:	ba000460 	blt	140adc <printf_core+0x2004>
  13f958:	13a03001 	movne	r3, #1
  13f95c:	03a03000 	moveq	r3, #0
  13f960:	e58d3044 	str	r3, [sp, #68]	; 0x44
  13f964:	e59d701c 	ldr	r7, [sp, #28]
  13f968:	e59d6038 	ldr	r6, [sp, #56]	; 0x38
  13f96c:	e1a00007 	mov	r0, r7
  13f970:	e1a01006 	mov	r1, r6
  13f974:	e3a02000 	mov	r2, #0
  13f978:	e3a03000 	mov	r3, #0
  13f97c:	eb001615 	bl	1451d8 <__aeabi_dcmpeq>
  13f980:	e3500000 	cmp	r0, #0
  13f984:	1a00000a 	bne	13f9b4 <printf_core+0xedc>
  13f988:	e59f31c0 	ldr	r3, [pc, #448]	; 13fb50 <printf_core+0x1078>
  13f98c:	e1a00007 	mov	r0, r7
  13f990:	e1a01006 	mov	r1, r6
  13f994:	e3a02000 	mov	r2, #0
  13f998:	eb0014c0 	bl	144ca0 <__aeabi_dmul>
  13f99c:	e59d3020 	ldr	r3, [sp, #32]
  13f9a0:	e58d001c 	str	r0, [sp, #28]
  13f9a4:	e243301c 	sub	r3, r3, #28
  13f9a8:	e58d1038 	str	r1, [sp, #56]	; 0x38
  13f9ac:	e58d3020 	str	r3, [sp, #32]
  13f9b0:	e58d306c 	str	r3, [sp, #108]	; 0x6c
  13f9b4:	e59d3020 	ldr	r3, [sp, #32]
  13f9b8:	e59d601c 	ldr	r6, [sp, #28]
  13f9bc:	e3530000 	cmp	r3, #0
  13f9c0:	a28d3e1f 	addge	r3, sp, #496	; 0x1f0
  13f9c4:	b28d30d0 	addlt	r3, sp, #208	; 0xd0
  13f9c8:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  13f9cc:	e59db02c 	ldr	fp, [sp, #44]	; 0x2c
  13f9d0:	e59d7038 	ldr	r7, [sp, #56]	; 0x38
  13f9d4:	e1a01007 	mov	r1, r7
  13f9d8:	e1a00006 	mov	r0, r6
  13f9dc:	eb00162d 	bl	145298 <__aeabi_d2uiz>
  13f9e0:	e48b0004 	str	r0, [fp], #4
  13f9e4:	eb00146b 	bl	144b98 <__aeabi_ui2d>
  13f9e8:	e1a02000 	mov	r2, r0
  13f9ec:	e1a03001 	mov	r3, r1
  13f9f0:	e1a00006 	mov	r0, r6
  13f9f4:	e1a01007 	mov	r1, r7
  13f9f8:	eb0013ba 	bl	1448e8 <__aeabi_dsub>
  13f9fc:	e3a02000 	mov	r2, #0
  13fa00:	e59f314c 	ldr	r3, [pc, #332]	; 13fb54 <printf_core+0x107c>
  13fa04:	eb0014a5 	bl	144ca0 <__aeabi_dmul>
  13fa08:	e3a02000 	mov	r2, #0
  13fa0c:	e3a03000 	mov	r3, #0
  13fa10:	e1a07001 	mov	r7, r1
  13fa14:	e1a06000 	mov	r6, r0
  13fa18:	eb0015ee 	bl	1451d8 <__aeabi_dcmpeq>
  13fa1c:	e3500000 	cmp	r0, #0
  13fa20:	0affffeb 	beq	13f9d4 <printf_core+0xefc>
  13fa24:	e59d2020 	ldr	r2, [sp, #32]
  13fa28:	e1a0300b 	mov	r3, fp
  13fa2c:	e3520000 	cmp	r2, #0
  13fa30:	e58db01c 	str	fp, [sp, #28]
  13fa34:	e59db02c 	ldr	fp, [sp, #44]	; 0x2c
  13fa38:	da000067 	ble	13fbdc <printf_core+0x1104>
  13fa3c:	e58da048 	str	sl, [sp, #72]	; 0x48
  13fa40:	e1a0a003 	mov	sl, r3
  13fa44:	e58d5060 	str	r5, [sp, #96]	; 0x60
  13fa48:	e58d4064 	str	r4, [sp, #100]	; 0x64
  13fa4c:	e58d9058 	str	r9, [sp, #88]	; 0x58
  13fa50:	e58d805c 	str	r8, [sp, #92]	; 0x5c
  13fa54:	e28d9050 	add	r9, sp, #80	; 0x50
  13fa58:	e8990300 	ldm	r9, {r8, r9}
  13fa5c:	e59d2020 	ldr	r2, [sp, #32]
  13fa60:	e24a3004 	sub	r3, sl, #4
  13fa64:	e352001d 	cmp	r2, #29
  13fa68:	b1a05002 	movlt	r5, r2
  13fa6c:	a3a0501d 	movge	r5, #29
  13fa70:	e153000b 	cmp	r3, fp
  13fa74:	e58d3038 	str	r3, [sp, #56]	; 0x38
  13fa78:	3a00001e 	bcc	13faf8 <printf_core+0x1020>
  13fa7c:	e1a04003 	mov	r4, r3
  13fa80:	e2453020 	sub	r3, r5, #32
  13fa84:	e58da040 	str	sl, [sp, #64]	; 0x40
  13fa88:	e3a00000 	mov	r0, #0
  13fa8c:	e1a0a003 	mov	sl, r3
  13fa90:	e2652020 	rsb	r2, r5, #32
  13fa94:	e58d201c 	str	r2, [sp, #28]
  13fa98:	e5941000 	ldr	r1, [r4]
  13fa9c:	e59dc01c 	ldr	ip, [sp, #28]
  13faa0:	e1a09a11 	lsl	r9, r1, sl
  13faa4:	e1a08511 	lsl	r8, r1, r5
  13faa8:	e0986000 	adds	r6, r8, r0
  13faac:	e1899c31 	orr	r9, r9, r1, lsr ip
  13fab0:	e2a97000 	adc	r7, r9, #0
  13fab4:	e28f305c 	add	r3, pc, #92	; 0x5c
  13fab8:	e893000c 	ldm	r3, {r2, r3}
  13fabc:	e1a00006 	mov	r0, r6
  13fac0:	e1a01007 	mov	r1, r7
  13fac4:	eb00163d 	bl	1453c0 <__aeabi_uldivmod>
  13fac8:	e1a00006 	mov	r0, r6
  13facc:	e4042004 	str	r2, [r4], #-4
  13fad0:	e1a01007 	mov	r1, r7
  13fad4:	e28f303c 	add	r3, pc, #60	; 0x3c
  13fad8:	e893000c 	ldm	r3, {r2, r3}
  13fadc:	eb001637 	bl	1453c0 <__aeabi_uldivmod>
  13fae0:	e154000b 	cmp	r4, fp
  13fae4:	2affffeb 	bcs	13fa98 <printf_core+0xfc0>
  13fae8:	e3500000 	cmp	r0, #0
  13faec:	e59da040 	ldr	sl, [sp, #64]	; 0x40
  13faf0:	150b0004 	strne	r0, [fp, #-4]
  13faf4:	124bb004 	subne	fp, fp, #4
  13faf8:	e15b000a 	cmp	fp, sl
  13fafc:	2a000028 	bcs	13fba4 <printf_core+0x10cc>
  13fb00:	e51a3004 	ldr	r3, [sl, #-4]
  13fb04:	e3530000 	cmp	r3, #0
  13fb08:	059d3038 	ldreq	r3, [sp, #56]	; 0x38
  13fb0c:	0a000021 	beq	13fb98 <printf_core+0x10c0>
  13fb10:	ea000023 	b	13fba4 <printf_core+0x10cc>
  13fb14:	e1a00000 	nop			; (mov r0, r0)
  13fb18:	3b9aca00 	.word	0x3b9aca00
  13fb1c:	00000000 	.word	0x00000000
  13fb20:	00012889 	.word	0x00012889
  13fb24:	0ccccccc 	.word	0x0ccccccc
  13fb28:	0014cf64 	.word	0x0014cf64
  13fb2c:	0014cfa0 	.word	0x0014cfa0
  13fb30:	0014cf78 	.word	0x0014cf78
  13fb34:	7fefffff 	.word	0x7fefffff
  13fb38:	0014cf90 	.word	0x0014cf90
  13fb3c:	0014cf8c 	.word	0x0014cf8c
  13fb40:	0014cf98 	.word	0x0014cf98
  13fb44:	0014cf94 	.word	0x0014cf94
  13fb48:	0014cf70 	.word	0x0014cf70
  13fb4c:	0014cf79 	.word	0x0014cf79
  13fb50:	41b00000 	.word	0x41b00000
  13fb54:	41cdcd65 	.word	0x41cdcd65
  13fb58:	38e38e39 	.word	0x38e38e39
  13fb5c:	3b9aca00 	.word	0x3b9aca00
  13fb60:	0014cf65 	.word	0x0014cf65
  13fb64:	0014cf7b 	.word	0x0014cf7b
  13fb68:	0014d170 	.word	0x0014d170
  13fb6c:	cccccccd 	.word	0xcccccccd
  13fb70:	0014cf9c 	.word	0x0014cf9c
  13fb74:	3b9ac9ff 	.word	0x3b9ac9ff
  13fb78:	40300000 	.word	0x40300000
  13fb7c:	3fe00000 	.word	0x3fe00000
  13fb80:	43400000 	.word	0x43400000
  13fb84:	3ff00000 	.word	0x3ff00000
  13fb88:	3ff80000 	.word	0x3ff80000
  13fb8c:	e5332004 	ldr	r2, [r3, #-4]!
  13fb90:	e3520000 	cmp	r2, #0
  13fb94:	1a000002 	bne	13fba4 <printf_core+0x10cc>
  13fb98:	e153000b 	cmp	r3, fp
  13fb9c:	e1a0a003 	mov	sl, r3
  13fba0:	8afffff9 	bhi	13fb8c <printf_core+0x10b4>
  13fba4:	e59d3020 	ldr	r3, [sp, #32]
  13fba8:	e0433005 	sub	r3, r3, r5
  13fbac:	e3530000 	cmp	r3, #0
  13fbb0:	e58d3020 	str	r3, [sp, #32]
  13fbb4:	caffffa8 	bgt	13fa5c <printf_core+0xf84>
  13fbb8:	e58d8050 	str	r8, [sp, #80]	; 0x50
  13fbbc:	e58d9054 	str	r9, [sp, #84]	; 0x54
  13fbc0:	e58da01c 	str	sl, [sp, #28]
  13fbc4:	e59d5060 	ldr	r5, [sp, #96]	; 0x60
  13fbc8:	e59da048 	ldr	sl, [sp, #72]	; 0x48
  13fbcc:	e59d4064 	ldr	r4, [sp, #100]	; 0x64
  13fbd0:	e59d805c 	ldr	r8, [sp, #92]	; 0x5c
  13fbd4:	e59d9058 	ldr	r9, [sp, #88]	; 0x58
  13fbd8:	e58d306c 	str	r3, [sp, #108]	; 0x6c
  13fbdc:	e59dc020 	ldr	ip, [sp, #32]
  13fbe0:	e35c0000 	cmp	ip, #0
  13fbe4:	0a000037 	beq	13fcc8 <printf_core+0x11f0>
  13fbe8:	e58da038 	str	sl, [sp, #56]	; 0x38
  13fbec:	e1a0a00c 	mov	sl, ip
  13fbf0:	e51f10a0 	ldr	r1, [pc, #-160]	; 13fb58 <printf_core+0x1080>
  13fbf4:	e2850019 	add	r0, r5, #25
  13fbf8:	e0832190 	umull	r2, r3, r0, r1
  13fbfc:	e1a030a3 	lsr	r3, r3, #1
  13fc00:	e2836001 	add	r6, r3, #1
  13fc04:	e1a03106 	lsl	r3, r6, #2
  13fc08:	e51f70b4 	ldr	r7, [pc, #-180]	; 13fb5c <printf_core+0x1084>
  13fc0c:	e59d001c 	ldr	r0, [sp, #28]
  13fc10:	e58d3020 	str	r3, [sp, #32]
  13fc14:	e58d9040 	str	r9, [sp, #64]	; 0x40
  13fc18:	e37a0009 	cmn	sl, #9
  13fc1c:	a26ac000 	rsbge	ip, sl, #0
  13fc20:	b28aa009 	addlt	sl, sl, #9
  13fc24:	b3a0c009 	movlt	ip, #9
  13fc28:	a3a0a000 	movge	sl, #0
  13fc2c:	e150000b 	cmp	r0, fp
  13fc30:	e59b1000 	ldr	r1, [fp]
  13fc34:	9a000191 	bls	140280 <printf_core+0x17a8>
  13fc38:	e3a0e001 	mov	lr, #1
  13fc3c:	e1a0ec1e 	lsl	lr, lr, ip
  13fc40:	e1a0200b 	mov	r2, fp
  13fc44:	e3a03000 	mov	r3, #0
  13fc48:	e24ee001 	sub	lr, lr, #1
  13fc4c:	e1a09c57 	asr	r9, r7, ip
  13fc50:	ea000000 	b	13fc58 <printf_core+0x1180>
  13fc54:	e5921000 	ldr	r1, [r2]
  13fc58:	e0833c31 	add	r3, r3, r1, lsr ip
  13fc5c:	e4823004 	str	r3, [r2], #4
  13fc60:	e00e3001 	and	r3, lr, r1
  13fc64:	e0010399 	mul	r1, r9, r3
  13fc68:	e1520000 	cmp	r2, r0
  13fc6c:	e1a03001 	mov	r3, r1
  13fc70:	3afffff7 	bcc	13fc54 <printf_core+0x117c>
  13fc74:	e59b2000 	ldr	r2, [fp]
  13fc78:	e3520000 	cmp	r2, #0
  13fc7c:	028bb004 	addeq	fp, fp, #4
  13fc80:	e3510000 	cmp	r1, #0
  13fc84:	15801000 	strne	r1, [r0]
  13fc88:	12800004 	addne	r0, r0, #4
  13fc8c:	e59d203c 	ldr	r2, [sp, #60]	; 0x3c
  13fc90:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  13fc94:	e3520066 	cmp	r2, #102	; 0x66
  13fc98:	11a0300b 	movne	r3, fp
  13fc9c:	e0402003 	sub	r2, r0, r3
  13fca0:	e1560142 	cmp	r6, r2, asr #2
  13fca4:	b59d2020 	ldrlt	r2, [sp, #32]
  13fca8:	b0830002 	addlt	r0, r3, r2
  13fcac:	e35a0000 	cmp	sl, #0
  13fcb0:	1affffd8 	bne	13fc18 <printf_core+0x1140>
  13fcb4:	e1a0300a 	mov	r3, sl
  13fcb8:	e59d9040 	ldr	r9, [sp, #64]	; 0x40
  13fcbc:	e59da038 	ldr	sl, [sp, #56]	; 0x38
  13fcc0:	e58d001c 	str	r0, [sp, #28]
  13fcc4:	e58d306c 	str	r3, [sp, #108]	; 0x6c
  13fcc8:	e59d301c 	ldr	r3, [sp, #28]
  13fccc:	e153000b 	cmp	r3, fp
  13fcd0:	91a03005 	movls	r3, r5
  13fcd4:	93a06000 	movls	r6, #0
  13fcd8:	9a000013 	bls	13fd2c <printf_core+0x1254>
  13fcdc:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  13fce0:	e59b1000 	ldr	r1, [fp]
  13fce4:	e043600b 	sub	r6, r3, fp
  13fce8:	e59d303c 	ldr	r3, [sp, #60]	; 0x3c
  13fcec:	e1a06146 	asr	r6, r6, #2
  13fcf0:	e2530066 	subs	r0, r3, #102	; 0x66
  13fcf4:	13a00001 	movne	r0, #1
  13fcf8:	e3510009 	cmp	r1, #9
  13fcfc:	e0866186 	add	r6, r6, r6, lsl #3
  13fd00:	83a0200a 	movhi	r2, #10
  13fd04:	81a03000 	movhi	r3, r0
  13fd08:	9a000005 	bls	13fd24 <printf_core+0x124c>
  13fd0c:	e0822102 	add	r2, r2, r2, lsl #2
  13fd10:	e1a02082 	lsl	r2, r2, #1
  13fd14:	e1510002 	cmp	r1, r2
  13fd18:	e2866001 	add	r6, r6, #1
  13fd1c:	2afffffa 	bcs	13fd0c <printf_core+0x1234>
  13fd20:	e1a00003 	mov	r0, r3
  13fd24:	e0030096 	mul	r3, r6, r0
  13fd28:	e0453003 	sub	r3, r5, r3
  13fd2c:	e59d203c 	ldr	r2, [sp, #60]	; 0x3c
  13fd30:	e59d1044 	ldr	r1, [sp, #68]	; 0x44
  13fd34:	e59dc02c 	ldr	ip, [sp, #44]	; 0x2c
  13fd38:	e3520067 	cmp	r2, #103	; 0x67
  13fd3c:	13a01000 	movne	r1, #0
  13fd40:	02011001 	andeq	r1, r1, #1
  13fd44:	e59d201c 	ldr	r2, [sp, #28]
  13fd48:	e0433001 	sub	r3, r3, r1
  13fd4c:	e042200c 	sub	r2, r2, ip
  13fd50:	e1a02142 	asr	r2, r2, #2
  13fd54:	e2422001 	sub	r2, r2, #1
  13fd58:	e0822182 	add	r2, r2, r2, lsl #3
  13fd5c:	e1530002 	cmp	r3, r2
  13fd60:	aa000057 	bge	13fec4 <printf_core+0x13ec>
  13fd64:	e51f2214 	ldr	r2, [pc, #-532]	; 13fb58 <printf_core+0x1080>
  13fd68:	e2833b09 	add	r3, r3, #9216	; 0x2400
  13fd6c:	e0c10293 	smull	r0, r1, r3, r2
  13fd70:	e1a07fc3 	asr	r7, r3, #31
  13fd74:	e06770c1 	rsb	r7, r7, r1, asr #1
  13fd78:	e0872187 	add	r2, r7, r7, lsl #3
  13fd7c:	e0433002 	sub	r3, r3, r2
  13fd80:	e2833001 	add	r3, r3, #1
  13fd84:	e2477fff 	sub	r7, r7, #1020	; 0x3fc
  13fd88:	e247710f 	sub	r7, r7, #-1073741821	; 0xc0000003
  13fd8c:	e3530009 	cmp	r3, #9
  13fd90:	e08c7107 	add	r7, ip, r7, lsl #2
  13fd94:	0a00036b 	beq	140b48 <printf_core+0x2070>
  13fd98:	e3a0200a 	mov	r2, #10
  13fd9c:	e2833001 	add	r3, r3, #1
  13fda0:	e0822102 	add	r2, r2, r2, lsl #2
  13fda4:	e3530009 	cmp	r3, #9
  13fda8:	e1a02082 	lsl	r2, r2, #1
  13fdac:	1afffffa 	bne	13fd9c <printf_core+0x12c4>
  13fdb0:	e58d2038 	str	r2, [sp, #56]	; 0x38
  13fdb4:	e5973000 	ldr	r3, [r7]
  13fdb8:	e59d1038 	ldr	r1, [sp, #56]	; 0x38
  13fdbc:	e1a00003 	mov	r0, r3
  13fdc0:	e58d3048 	str	r3, [sp, #72]	; 0x48
  13fdc4:	ebffe39f 	bl	138c48 <__aeabi_uidivmod>
  13fdc8:	e2513000 	subs	r3, r1, #0
  13fdcc:	e58d3044 	str	r3, [sp, #68]	; 0x44
  13fdd0:	1a000003 	bne	13fde4 <printf_core+0x130c>
  13fdd4:	e59d301c 	ldr	r3, [sp, #28]
  13fdd8:	e287c004 	add	ip, r7, #4
  13fddc:	e153000c 	cmp	r3, ip
  13fde0:	0a000033 	beq	13feb4 <printf_core+0x13dc>
  13fde4:	e3100001 	tst	r0, #1
  13fde8:	1a000336 	bne	140ac8 <printf_core+0x1ff0>
  13fdec:	e51f3298 	ldr	r3, [pc, #-664]	; 13fb5c <printf_core+0x1084>
  13fdf0:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
  13fdf4:	e157000b 	cmp	r7, fp
  13fdf8:	e0422003 	sub	r2, r2, r3
  13fdfc:	e16f2f12 	clz	r2, r2
  13fe00:	e1a022a2 	lsr	r2, r2, #5
  13fe04:	93a02000 	movls	r2, #0
  13fe08:	e3520000 	cmp	r2, #0
  13fe0c:	0a000329 	beq	140ab8 <printf_core+0x1fe0>
  13fe10:	e5173004 	ldr	r3, [r7, #-4]
  13fe14:	e51f229c 	ldr	r2, [pc, #-668]	; 13fb80 <printf_core+0x10a8>
  13fe18:	e2033001 	and	r3, r3, #1
  13fe1c:	e58d2020 	str	r2, [sp, #32]
  13fe20:	e58d3040 	str	r3, [sp, #64]	; 0x40
  13fe24:	e59d3044 	ldr	r3, [sp, #68]	; 0x44
  13fe28:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
  13fe2c:	e15300c2 	cmp	r3, r2, asr #1
  13fe30:	3a00031d 	bcc	140aac <printf_core+0x1fd4>
  13fe34:	13a0e000 	movne	lr, #0
  13fe38:	151fc2b8 	ldrne	ip, [pc, #-696]	; 13fb88 <printf_core+0x10b0>
  13fe3c:	0a00032a 	beq	140aec <printf_core+0x2014>
  13fe40:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
  13fe44:	e3530000 	cmp	r3, #0
  13fe48:	0a000006 	beq	13fe68 <printf_core+0x1390>
  13fe4c:	e59d3034 	ldr	r3, [sp, #52]	; 0x34
  13fe50:	e5d33000 	ldrb	r3, [r3]
  13fe54:	e353002d 	cmp	r3, #45	; 0x2d
  13fe58:	059d3020 	ldreq	r3, [sp, #32]
  13fe5c:	028cc102 	addeq	ip, ip, #-2147483648	; 0x80000000
  13fe60:	02833102 	addeq	r3, r3, #-2147483648	; 0x80000000
  13fe64:	058d3020 	streq	r3, [sp, #32]
  13fe68:	e1a0200e 	mov	r2, lr
  13fe6c:	e1a0300c 	mov	r3, ip
  13fe70:	e59de044 	ldr	lr, [sp, #68]	; 0x44
  13fe74:	e59dc048 	ldr	ip, [sp, #72]	; 0x48
  13fe78:	e59d0040 	ldr	r0, [sp, #64]	; 0x40
  13fe7c:	e04cc00e 	sub	ip, ip, lr
  13fe80:	e59d1020 	ldr	r1, [sp, #32]
  13fe84:	e58dc044 	str	ip, [sp, #68]	; 0x44
  13fe88:	eb001297 	bl	1448ec <__adddf3>
  13fe8c:	e1a02000 	mov	r2, r0
  13fe90:	e1a03001 	mov	r3, r1
  13fe94:	e59d0040 	ldr	r0, [sp, #64]	; 0x40
  13fe98:	e59d1020 	ldr	r1, [sp, #32]
  13fe9c:	eb0014cd 	bl	1451d8 <__aeabi_dcmpeq>
  13fea0:	e2502000 	subs	r2, r0, #0
  13fea4:	0a0002ab 	beq	140958 <printf_core+0x1e80>
  13fea8:	e1a0c007 	mov	ip, r7
  13feac:	e59d3044 	ldr	r3, [sp, #68]	; 0x44
  13feb0:	e48c3004 	str	r3, [ip], #4
  13feb4:	e59d301c 	ldr	r3, [sp, #28]
  13feb8:	e153000c 	cmp	r3, ip
  13febc:	21a0300c 	movcs	r3, ip
  13fec0:	e58d301c 	str	r3, [sp, #28]
  13fec4:	e59d301c 	ldr	r3, [sp, #28]
  13fec8:	e15b0003 	cmp	fp, r3
  13fecc:	2a00000c 	bcs	13ff04 <printf_core+0x142c>
  13fed0:	e5133004 	ldr	r3, [r3, #-4]
  13fed4:	e3530000 	cmp	r3, #0
  13fed8:	059d301c 	ldreq	r3, [sp, #28]
  13fedc:	02433004 	subeq	r3, r3, #4
  13fee0:	0a000003 	beq	13fef4 <printf_core+0x141c>
  13fee4:	ea000006 	b	13ff04 <printf_core+0x142c>
  13fee8:	e5332004 	ldr	r2, [r3, #-4]!
  13feec:	e3520000 	cmp	r2, #0
  13fef0:	1a000002 	bne	13ff00 <printf_core+0x1428>
  13fef4:	e153000b 	cmp	r3, fp
  13fef8:	e1a01003 	mov	r1, r3
  13fefc:	8afffff9 	bhi	13fee8 <printf_core+0x1410>
  13ff00:	e58d101c 	str	r1, [sp, #28]
  13ff04:	e59d303c 	ldr	r3, [sp, #60]	; 0x3c
  13ff08:	e3530067 	cmp	r3, #103	; 0x67
  13ff0c:	0a000192 	beq	14055c <printf_core+0x1a84>
  13ff10:	e3550000 	cmp	r5, #0
  13ff14:	1a00018b 	bne	140548 <printf_core+0x1a70>
  13ff18:	e3a02001 	mov	r2, #1
  13ff1c:	e1a031a8 	lsr	r3, r8, #3
  13ff20:	e0033002 	and	r3, r3, r2
  13ff24:	e3e0e102 	mvn	lr, #-2147483648	; 0x80000000
  13ff28:	e59d1010 	ldr	r1, [sp, #16]
  13ff2c:	e0833002 	add	r3, r3, r2
  13ff30:	e381a020 	orr	sl, r1, #32
  13ff34:	e35a0066 	cmp	sl, #102	; 0x66
  13ff38:	e04ee003 	sub	lr, lr, r3
  13ff3c:	0a000280 	beq	140944 <printf_core+0x1e6c>
  13ff40:	e026cfc6 	eor	ip, r6, r6, asr #31
  13ff44:	e28d7090 	add	r7, sp, #144	; 0x90
  13ff48:	e3560000 	cmp	r6, #0
  13ff4c:	e04ccfc6 	sub	ip, ip, r6, asr #31
  13ff50:	e1a02007 	mov	r2, r7
  13ff54:	0a00000a 	beq	13ff84 <printf_core+0x14ac>
  13ff58:	e58d3020 	str	r3, [sp, #32]
  13ff5c:	e51f33f8 	ldr	r3, [pc, #-1016]	; 13fb6c <printf_core+0x1094>
  13ff60:	e081039c 	umull	r0, r1, ip, r3
  13ff64:	e1a001a1 	lsr	r0, r1, #3
  13ff68:	e0801100 	add	r1, r0, r0, lsl #2
  13ff6c:	e04c1081 	sub	r1, ip, r1, lsl #1
  13ff70:	e2811030 	add	r1, r1, #48	; 0x30
  13ff74:	e250c000 	subs	ip, r0, #0
  13ff78:	e5621001 	strb	r1, [r2, #-1]!
  13ff7c:	1afffff6 	bne	13ff5c <printf_core+0x1484>
  13ff80:	e59d3020 	ldr	r3, [sp, #32]
  13ff84:	e0471002 	sub	r1, r7, r2
  13ff88:	e3510001 	cmp	r1, #1
  13ff8c:	ca000004 	bgt	13ffa4 <printf_core+0x14cc>
  13ff90:	e3a01030 	mov	r1, #48	; 0x30
  13ff94:	e5621001 	strb	r1, [r2, #-1]!
  13ff98:	e0470002 	sub	r0, r7, r2
  13ff9c:	e3500001 	cmp	r0, #1
  13ffa0:	dafffffb 	ble	13ff94 <printf_core+0x14bc>
  13ffa4:	e3560000 	cmp	r6, #0
  13ffa8:	a3a0102b 	movge	r1, #43	; 0x2b
  13ffac:	b3a0102d 	movlt	r1, #45	; 0x2d
  13ffb0:	e2420002 	sub	r0, r2, #2
  13ffb4:	e0477000 	sub	r7, r7, r0
  13ffb8:	e58d004c 	str	r0, [sp, #76]	; 0x4c
  13ffbc:	e59d0010 	ldr	r0, [sp, #16]
  13ffc0:	e157000e 	cmp	r7, lr
  13ffc4:	e5420002 	strb	r0, [r2, #-2]
  13ffc8:	e5421001 	strb	r1, [r2, #-1]
  13ffcc:	cafffc6e 	bgt	13f18c <printf_core+0x6b4>
  13ffd0:	e0833007 	add	r3, r3, r7
  13ffd4:	e3e02102 	mvn	r2, #-2147483648	; 0x80000000
  13ffd8:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
  13ffdc:	e0422001 	sub	r2, r2, r1
  13ffe0:	e1520003 	cmp	r2, r3
  13ffe4:	bafffc68 	blt	13f18c <printf_core+0x6b4>
  13ffe8:	e0813003 	add	r3, r1, r3
  13ffec:	e1590003 	cmp	r9, r3
  13fff0:	e58d3010 	str	r3, [sp, #16]
  13fff4:	c3a03000 	movgt	r3, #0
  13fff8:	d3a03001 	movle	r3, #1
  13fffc:	e3180a12 	tst	r8, #73728	; 0x12000
  140000:	e58d3020 	str	r3, [sp, #32]
  140004:	13a03001 	movne	r3, #1
  140008:	e3530000 	cmp	r3, #0
  14000c:	0a000246 	beq	14092c <printf_core+0x1e54>
  140010:	e59d3004 	ldr	r3, [sp, #4]
  140014:	e5933000 	ldr	r3, [r3]
  140018:	e3130020 	tst	r3, #32
  14001c:	0a00023d 	beq	140918 <printf_core+0x1e40>
  140020:	e2283801 	eor	r3, r8, #65536	; 0x10000
  140024:	e3130a12 	tst	r3, #73728	; 0x12000
  140028:	e59d3020 	ldr	r3, [sp, #32]
  14002c:	13a03001 	movne	r3, #1
  140030:	e3530000 	cmp	r3, #0
  140034:	0a000231 	beq	140900 <printf_core+0x1e28>
  140038:	e35a0066 	cmp	sl, #102	; 0x66
  14003c:	0a00018f 	beq	140680 <printf_core+0x1ba8>
  140040:	e59d301c 	ldr	r3, [sp, #28]
  140044:	e15b0003 	cmp	fp, r3
  140048:	228b3004 	addcs	r3, fp, #4
  14004c:	258d301c 	strcs	r3, [sp, #28]
  140050:	e59d301c 	ldr	r3, [sp, #28]
  140054:	e15b0003 	cmp	fp, r3
  140058:	23a03000 	movcs	r3, #0
  14005c:	33a03001 	movcc	r3, #1
  140060:	e3550000 	cmp	r5, #0
  140064:	b3a03000 	movlt	r3, #0
  140068:	e3530000 	cmp	r3, #0
  14006c:	0a000036 	beq	14014c <printf_core+0x1674>
  140070:	e1a0600b 	mov	r6, fp
  140074:	e28d7090 	add	r7, sp, #144	; 0x90
  140078:	e58d9030 	str	r9, [sp, #48]	; 0x30
  14007c:	e59d9004 	ldr	r9, [sp, #4]
  140080:	e287a009 	add	sl, r7, #9
  140084:	e58d802c 	str	r8, [sp, #44]	; 0x2c
  140088:	e58d4034 	str	r4, [sp, #52]	; 0x34
  14008c:	e5962000 	ldr	r2, [r6]
  140090:	e599e000 	ldr	lr, [r9]
  140094:	e3520000 	cmp	r2, #0
  140098:	1287c009 	addne	ip, r7, #9
  14009c:	0a000046 	beq	1401bc <printf_core+0x16e4>
  1400a0:	e51f353c 	ldr	r3, [pc, #-1340]	; 13fb6c <printf_core+0x1094>
  1400a4:	e0810392 	umull	r0, r1, r2, r3
  1400a8:	e1a031a1 	lsr	r3, r1, #3
  1400ac:	e0831103 	add	r1, r3, r3, lsl #2
  1400b0:	e0422081 	sub	r2, r2, r1, lsl #1
  1400b4:	e2821030 	add	r1, r2, #48	; 0x30
  1400b8:	e2532000 	subs	r2, r3, #0
  1400bc:	e56c1001 	strb	r1, [ip, #-1]!
  1400c0:	1afffff6 	bne	1400a0 <printf_core+0x15c8>
  1400c4:	e2872009 	add	r2, r7, #9
  1400c8:	e15c0002 	cmp	ip, r2
  1400cc:	0a00003a 	beq	1401bc <printf_core+0x16e4>
  1400d0:	e15b0006 	cmp	fp, r6
  1400d4:	e20ee020 	and	lr, lr, #32
  1400d8:	0a00003d 	beq	1401d4 <printf_core+0x16fc>
  1400dc:	e15c0007 	cmp	ip, r7
  1400e0:	9a000003 	bls	1400f4 <printf_core+0x161c>
  1400e4:	e3a02030 	mov	r2, #48	; 0x30
  1400e8:	e56c2001 	strb	r2, [ip, #-1]!
  1400ec:	e15c0007 	cmp	ip, r7
  1400f0:	8afffffc 	bhi	1400e8 <printf_core+0x1610>
  1400f4:	e04a400c 	sub	r4, sl, ip
  1400f8:	e35e0000 	cmp	lr, #0
  1400fc:	1a000005 	bne	140118 <printf_core+0x1640>
  140100:	e1550004 	cmp	r5, r4
  140104:	e1a0000c 	mov	r0, ip
  140108:	b1a01005 	movlt	r1, r5
  14010c:	a1a01004 	movge	r1, r4
  140110:	e1a02009 	mov	r2, r9
  140114:	eb000f2d 	bl	143dd0 <__fwritex>
  140118:	e59d201c 	ldr	r2, [sp, #28]
  14011c:	e2866004 	add	r6, r6, #4
  140120:	e1560002 	cmp	r6, r2
  140124:	e0455004 	sub	r5, r5, r4
  140128:	23a02000 	movcs	r2, #0
  14012c:	33a02001 	movcc	r2, #1
  140130:	e3550000 	cmp	r5, #0
  140134:	b3a02000 	movlt	r2, #0
  140138:	e3520000 	cmp	r2, #0
  14013c:	1affffd2 	bne	14008c <printf_core+0x15b4>
  140140:	e59d9030 	ldr	r9, [sp, #48]	; 0x30
  140144:	e59d802c 	ldr	r8, [sp, #44]	; 0x2c
  140148:	e59d4034 	ldr	r4, [sp, #52]	; 0x34
  14014c:	e2852012 	add	r2, r5, #18
  140150:	e3520012 	cmp	r2, #18
  140154:	da000003 	ble	140168 <printf_core+0x1690>
  140158:	e3a03012 	mov	r3, #18
  14015c:	e3a01030 	mov	r1, #48	; 0x30
  140160:	e59d0004 	ldr	r0, [sp, #4]
  140164:	ebfffa30 	bl	13ea2c <pad.part.0>
  140168:	e59d3004 	ldr	r3, [sp, #4]
  14016c:	e5933000 	ldr	r3, [r3]
  140170:	e3130020 	tst	r3, #32
  140174:	1a000005 	bne	140190 <printf_core+0x16b8>
  140178:	e59d304c 	ldr	r3, [sp, #76]	; 0x4c
  14017c:	e28d7090 	add	r7, sp, #144	; 0x90
  140180:	e0471003 	sub	r1, r7, r3
  140184:	e59d2004 	ldr	r2, [sp, #4]
  140188:	e1a00003 	mov	r0, r3
  14018c:	eb000f0f 	bl	143dd0 <__fwritex>
  140190:	e2283a02 	eor	r3, r8, #8192	; 0x2000
  140194:	e3130a12 	tst	r3, #73728	; 0x12000
  140198:	e59d3020 	ldr	r3, [sp, #32]
  14019c:	13a03001 	movne	r3, #1
  1401a0:	e3530000 	cmp	r3, #0
  1401a4:	0a00023a 	beq	140a94 <printf_core+0x1fbc>
  1401a8:	e59d3010 	ldr	r3, [sp, #16]
  1401ac:	e1590003 	cmp	r9, r3
  1401b0:	a1a0a009 	movge	sl, r9
  1401b4:	b1a0a003 	movlt	sl, r3
  1401b8:	eafffbf0 	b	13f180 <printf_core+0x6a8>
  1401bc:	e3a02030 	mov	r2, #48	; 0x30
  1401c0:	e15b0006 	cmp	fp, r6
  1401c4:	e28dc098 	add	ip, sp, #152	; 0x98
  1401c8:	e20ee020 	and	lr, lr, #32
  1401cc:	e5cd2098 	strb	r2, [sp, #152]	; 0x98
  1401d0:	1affffc3 	bne	1400e4 <printf_core+0x160c>
  1401d4:	e35e0000 	cmp	lr, #0
  1401d8:	e28c8001 	add	r8, ip, #1
  1401dc:	0a00002a 	beq	14028c <printf_core+0x17b4>
  1401e0:	e3550000 	cmp	r5, #0
  1401e4:	e04a4008 	sub	r4, sl, r8
  1401e8:	1affffca 	bne	140118 <printf_core+0x1640>
  1401ec:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  1401f0:	e3130008 	tst	r3, #8
  1401f4:	1a00002d 	bne	1402b0 <printf_core+0x17d8>
  1401f8:	e1a0c008 	mov	ip, r8
  1401fc:	eaffffbd 	b	1400f8 <printf_core+0x1620>
  140200:	e1a0300b 	mov	r3, fp
  140204:	e1a02009 	mov	r2, r9
  140208:	e3a01020 	mov	r1, #32
  14020c:	e59d0004 	ldr	r0, [sp, #4]
  140210:	ebfffa05 	bl	13ea2c <pad.part.0>
  140214:	eafffd7b 	b	13f808 <printf_core+0xd30>
  140218:	e3a03001 	mov	r3, #1
  14021c:	e58d3020 	str	r3, [sp, #32]
  140220:	e51f36c8 	ldr	r3, [pc, #-1736]	; 13fb60 <printf_core+0x1088>
  140224:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  140228:	eafffc20 	b	13f2b0 <printf_core+0x7d8>
  14022c:	e3a03000 	mov	r3, #0
  140230:	e58d3000 	str	r3, [sp]
  140234:	eafffb44 	b	13ef4c <printf_core+0x474>
  140238:	e59d5004 	ldr	r5, [sp, #4]
  14023c:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
  140240:	e1a02005 	mov	r2, r5
  140244:	e59d0034 	ldr	r0, [sp, #52]	; 0x34
  140248:	eb000ee0 	bl	143dd0 <__fwritex>
  14024c:	e5953000 	ldr	r3, [r5]
  140250:	e1a02005 	mov	r2, r5
  140254:	e3130020 	tst	r3, #32
  140258:	1afffcc9 	bne	13f584 <printf_core+0xaac>
  14025c:	e1a00006 	mov	r0, r6
  140260:	e3a01003 	mov	r1, #3
  140264:	eb000ed9 	bl	143dd0 <__fwritex>
  140268:	eafffcc5 	b	13f584 <printf_core+0xaac>
  14026c:	e3a03001 	mov	r3, #1
  140270:	e58d3030 	str	r3, [sp, #48]	; 0x30
  140274:	e51f3718 	ldr	r3, [pc, #-1816]	; 13fb64 <printf_core+0x108c>
  140278:	e58d3034 	str	r3, [sp, #52]	; 0x34
  14027c:	eafffc9a 	b	13f4ec <printf_core+0xa14>
  140280:	e3510000 	cmp	r1, #0
  140284:	028bb004 	addeq	fp, fp, #4
  140288:	eafffe7f 	b	13fc8c <printf_core+0x11b4>
  14028c:	e1a0000c 	mov	r0, ip
  140290:	e1a02009 	mov	r2, r9
  140294:	e3a01001 	mov	r1, #1
  140298:	eb000ecc 	bl	143dd0 <__fwritex>
  14029c:	e599e000 	ldr	lr, [r9]
  1402a0:	e3550000 	cmp	r5, #0
  1402a4:	e20ee020 	and	lr, lr, #32
  1402a8:	e04a4008 	sub	r4, sl, r8
  1402ac:	0affffce 	beq	1401ec <printf_core+0x1714>
  1402b0:	e35e0000 	cmp	lr, #0
  1402b4:	1affff97 	bne	140118 <printf_core+0x1640>
  1402b8:	e1a02009 	mov	r2, r9
  1402bc:	e3a01001 	mov	r1, #1
  1402c0:	e51f0758 	ldr	r0, [pc, #-1880]	; 13fb70 <printf_core+0x1098>
  1402c4:	eb000ec1 	bl	143dd0 <__fwritex>
  1402c8:	e599e000 	ldr	lr, [r9]
  1402cc:	e1a0c008 	mov	ip, r8
  1402d0:	e20ee020 	and	lr, lr, #32
  1402d4:	eaffff87 	b	1400f8 <printf_core+0x1620>
  1402d8:	e1a0300a 	mov	r3, sl
  1402dc:	e1a02009 	mov	r2, r9
  1402e0:	e3a01020 	mov	r1, #32
  1402e4:	e59d0004 	ldr	r0, [sp, #4]
  1402e8:	ebfff9cf 	bl	13ea2c <pad.part.0>
  1402ec:	eafffca9 	b	13f598 <printf_core+0xac0>
  1402f0:	e59d3010 	ldr	r3, [sp, #16]
  1402f4:	e213b020 	ands	fp, r3, #32
  1402f8:	159d3034 	ldrne	r3, [sp, #52]	; 0x34
  1402fc:	12833009 	addne	r3, r3, #9
  140300:	158d3034 	strne	r3, [sp, #52]	; 0x34
  140304:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
  140308:	e355000b 	cmp	r5, #11
  14030c:	e2833002 	add	r3, r3, #2
  140310:	e58d3030 	str	r3, [sp, #48]	; 0x30
  140314:	9a0001b8 	bls	1409fc <printf_core+0x1f24>
  140318:	e59d2020 	ldr	r2, [sp, #32]
  14031c:	e28d7090 	add	r7, sp, #144	; 0x90
  140320:	e3520000 	cmp	r2, #0
  140324:	e1a03002 	mov	r3, r2
  140328:	b2623000 	rsblt	r3, r2, #0
  14032c:	e3520000 	cmp	r2, #0
  140330:	11a0c007 	movne	ip, r7
  140334:	0a0001ac 	beq	1409ec <printf_core+0x1f14>
  140338:	e51f27d4 	ldr	r2, [pc, #-2004]	; 13fb6c <printf_core+0x1094>
  14033c:	e0810293 	umull	r0, r1, r3, r2
  140340:	e1a021a1 	lsr	r2, r1, #3
  140344:	e0821102 	add	r1, r2, r2, lsl #2
  140348:	e0433081 	sub	r3, r3, r1, lsl #1
  14034c:	e2831030 	add	r1, r3, #48	; 0x30
  140350:	e2523000 	subs	r3, r2, #0
  140354:	e56c1001 	strb	r1, [ip, #-1]!
  140358:	1afffff6 	bne	140338 <printf_core+0x1860>
  14035c:	e15c0007 	cmp	ip, r7
  140360:	0a0001a1 	beq	1409ec <printf_core+0x1f14>
  140364:	e59d3020 	ldr	r3, [sp, #32]
  140368:	e59d2010 	ldr	r2, [sp, #16]
  14036c:	e3530000 	cmp	r3, #0
  140370:	a3a0302b 	movge	r3, #43	; 0x2b
  140374:	b3a0302d 	movlt	r3, #45	; 0x2d
  140378:	e54c3001 	strb	r3, [ip, #-1]
  14037c:	e24c3002 	sub	r3, ip, #2
  140380:	e282200f 	add	r2, r2, #15
  140384:	e58d3010 	str	r3, [sp, #16]
  140388:	e2083008 	and	r3, r8, #8
  14038c:	e58db020 	str	fp, [sp, #32]
  140390:	e58d8040 	str	r8, [sp, #64]	; 0x40
  140394:	e58d4044 	str	r4, [sp, #68]	; 0x44
  140398:	e1a0b007 	mov	fp, r7
  14039c:	e51f683c 	ldr	r6, [pc, #-2108]	; 13fb68 <printf_core+0x1090>
  1403a0:	e54c2002 	strb	r2, [ip, #-2]
  1403a4:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  1403a8:	e58da03c 	str	sl, [sp, #60]	; 0x3c
  1403ac:	e59d401c 	ldr	r4, [sp, #28]
  1403b0:	e59d8038 	ldr	r8, [sp, #56]	; 0x38
  1403b4:	ea000007 	b	1403d8 <printf_core+0x1900>
  1403b8:	e1a0b00a 	mov	fp, sl
  1403bc:	e1a00004 	mov	r0, r4
  1403c0:	e1a01008 	mov	r1, r8
  1403c4:	e3a02000 	mov	r2, #0
  1403c8:	e3a03000 	mov	r3, #0
  1403cc:	eb001381 	bl	1451d8 <__aeabi_dcmpeq>
  1403d0:	e3500000 	cmp	r0, #0
  1403d4:	1a000026 	bne	140474 <printf_core+0x199c>
  1403d8:	e1a01008 	mov	r1, r8
  1403dc:	e1a00004 	mov	r0, r4
  1403e0:	eb001395 	bl	14523c <__aeabi_d2iz>
  1403e4:	e59d2020 	ldr	r2, [sp, #32]
  1403e8:	e7d63000 	ldrb	r3, [r6, r0]
  1403ec:	e28ba001 	add	sl, fp, #1
  1403f0:	e1823003 	orr	r3, r2, r3
  1403f4:	e5cb3000 	strb	r3, [fp]
  1403f8:	eb0011ef 	bl	144bbc <__aeabi_i2d>
  1403fc:	e1a02000 	mov	r2, r0
  140400:	e1a03001 	mov	r3, r1
  140404:	e1a00004 	mov	r0, r4
  140408:	e1a01008 	mov	r1, r8
  14040c:	eb001135 	bl	1448e8 <__aeabi_dsub>
  140410:	e51f38a0 	ldr	r3, [pc, #-2208]	; 13fb78 <printf_core+0x10a0>
  140414:	e3a02000 	mov	r2, #0
  140418:	eb001220 	bl	144ca0 <__aeabi_dmul>
  14041c:	e04a3007 	sub	r3, sl, r7
  140420:	e3530001 	cmp	r3, #1
  140424:	e1a04000 	mov	r4, r0
  140428:	e1a08001 	mov	r8, r1
  14042c:	1affffe1 	bne	1403b8 <printf_core+0x18e0>
  140430:	e3a03000 	mov	r3, #0
  140434:	e3a02000 	mov	r2, #0
  140438:	eb001366 	bl	1451d8 <__aeabi_dcmpeq>
  14043c:	e3500000 	cmp	r0, #0
  140440:	e3a03001 	mov	r3, #1
  140444:	13a03000 	movne	r3, #0
  140448:	e3550000 	cmp	r5, #0
  14044c:	c3833001 	orrgt	r3, r3, #1
  140450:	e3130001 	tst	r3, #1
  140454:	1a000002 	bne	140464 <printf_core+0x198c>
  140458:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  14045c:	e3530000 	cmp	r3, #0
  140460:	0affffd4 	beq	1403b8 <printf_core+0x18e0>
  140464:	e3a0302e 	mov	r3, #46	; 0x2e
  140468:	e28bb002 	add	fp, fp, #2
  14046c:	e54b3001 	strb	r3, [fp, #-1]
  140470:	eaffffd1 	b	1403bc <printf_core+0x18e4>
  140474:	e3e0310a 	mvn	r3, #-2147483646	; 0x80000002
  140478:	e59d2010 	ldr	r2, [sp, #16]
  14047c:	e59da03c 	ldr	sl, [sp, #60]	; 0x3c
  140480:	e0476002 	sub	r6, r7, r2
  140484:	e59d2030 	ldr	r2, [sp, #48]	; 0x30
  140488:	e0433006 	sub	r3, r3, r6
  14048c:	e0433002 	sub	r3, r3, r2
  140490:	e1550003 	cmp	r5, r3
  140494:	e59d8040 	ldr	r8, [sp, #64]	; 0x40
  140498:	e59d4044 	ldr	r4, [sp, #68]	; 0x44
  14049c:	cafffb3a 	bgt	13f18c <printf_core+0x6b4>
  1404a0:	e04b2007 	sub	r2, fp, r7
  1404a4:	e3550000 	cmp	r5, #0
  1404a8:	e58d201c 	str	r2, [sp, #28]
  1404ac:	0a000065 	beq	140648 <printf_core+0x1b70>
  1404b0:	e2423001 	sub	r3, r2, #1
  1404b4:	e1550003 	cmp	r5, r3
  1404b8:	ba000062 	blt	140648 <printf_core+0x1b70>
  1404bc:	e2853002 	add	r3, r5, #2
  1404c0:	e0865003 	add	r5, r6, r3
  1404c4:	e043a002 	sub	sl, r3, r2
  1404c8:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
  1404cc:	e0835005 	add	r5, r3, r5
  1404d0:	e1590005 	cmp	r9, r5
  1404d4:	c3a0b000 	movgt	fp, #0
  1404d8:	d3a0b001 	movle	fp, #1
  1404dc:	e3180a12 	tst	r8, #73728	; 0x12000
  1404e0:	01a0300b 	moveq	r3, fp
  1404e4:	13a03001 	movne	r3, #1
  1404e8:	e3530000 	cmp	r3, #0
  1404ec:	0a0001a8 	beq	140b94 <printf_core+0x20bc>
  1404f0:	e59d3004 	ldr	r3, [sp, #4]
  1404f4:	e5933000 	ldr	r3, [r3]
  1404f8:	e3130020 	tst	r3, #32
  1404fc:	0a0000e4 	beq	140894 <printf_core+0x1dbc>
  140500:	e2283801 	eor	r3, r8, #65536	; 0x10000
  140504:	e3130a12 	tst	r3, #73728	; 0x12000
  140508:	01a0300b 	moveq	r3, fp
  14050c:	13a03001 	movne	r3, #1
  140510:	e3530000 	cmp	r3, #0
  140514:	0a000198 	beq	140b7c <printf_core+0x20a4>
  140518:	e35a0000 	cmp	sl, #0
  14051c:	ca00012c 	bgt	1409d4 <printf_core+0x1efc>
  140520:	e2283a02 	eor	r3, r8, #8192	; 0x2000
  140524:	e3130a12 	tst	r3, #73728	; 0x12000
  140528:	01a0300b 	moveq	r3, fp
  14052c:	13a03001 	movne	r3, #1
  140530:	e3530000 	cmp	r3, #0
  140534:	0a000186 	beq	140b54 <printf_core+0x207c>
  140538:	e1590005 	cmp	r9, r5
  14053c:	a1a0a009 	movge	sl, r9
  140540:	b1a0a005 	movlt	sl, r5
  140544:	eafffb0d 	b	13f180 <printf_core+0x6a8>
  140548:	e375010e 	cmn	r5, #-2147483645	; 0x80000003
  14054c:	cafffb0e 	bgt	13f18c <printf_core+0x6b4>
  140550:	e2852001 	add	r2, r5, #1
  140554:	e3a03001 	mov	r3, #1
  140558:	eafffe71 	b	13ff24 <printf_core+0x144c>
  14055c:	e3550000 	cmp	r5, #0
  140560:	03a05001 	moveq	r5, #1
  140564:	e3760004 	cmn	r6, #4
  140568:	a1550006 	cmpge	r5, r6
  14056c:	c59d2010 	ldrgt	r2, [sp, #16]
  140570:	d59d3010 	ldrle	r3, [sp, #16]
  140574:	c2863001 	addgt	r3, r6, #1
  140578:	c2422001 	subgt	r2, r2, #1
  14057c:	d2433002 	suble	r3, r3, #2
  140580:	c58d2010 	strgt	r2, [sp, #16]
  140584:	c0455003 	subgt	r5, r5, r3
  140588:	d58d3010 	strle	r3, [sp, #16]
  14058c:	d2455001 	suble	r5, r5, #1
  140590:	e3180008 	tst	r8, #8
  140594:	1afffe5d 	bne	13ff10 <printf_core+0x1438>
  140598:	e59d301c 	ldr	r3, [sp, #28]
  14059c:	e15b0003 	cmp	fp, r3
  1405a0:	2a000034 	bcs	140678 <printf_core+0x1ba0>
  1405a4:	e5137004 	ldr	r7, [r3, #-4]
  1405a8:	e3570000 	cmp	r7, #0
  1405ac:	0a000031 	beq	140678 <printf_core+0x1ba0>
  1405b0:	e3a0100a 	mov	r1, #10
  1405b4:	e1a00007 	mov	r0, r7
  1405b8:	ebffe1a2 	bl	138c48 <__aeabi_uidivmod>
  1405bc:	e3510000 	cmp	r1, #0
  1405c0:	1a00000b 	bne	1405f4 <printf_core+0x1b1c>
  1405c4:	e3a0300a 	mov	r3, #10
  1405c8:	e58d4020 	str	r4, [sp, #32]
  1405cc:	e1a04003 	mov	r4, r3
  1405d0:	e0844104 	add	r4, r4, r4, lsl #2
  1405d4:	e1a04084 	lsl	r4, r4, #1
  1405d8:	e1a01004 	mov	r1, r4
  1405dc:	e1a00007 	mov	r0, r7
  1405e0:	ebffe198 	bl	138c48 <__aeabi_uidivmod>
  1405e4:	e3510000 	cmp	r1, #0
  1405e8:	e28aa001 	add	sl, sl, #1
  1405ec:	0afffff7 	beq	1405d0 <printf_core+0x1af8>
  1405f0:	e59d4020 	ldr	r4, [sp, #32]
  1405f4:	e59d202c 	ldr	r2, [sp, #44]	; 0x2c
  1405f8:	e59d301c 	ldr	r3, [sp, #28]
  1405fc:	e0433002 	sub	r3, r3, r2
  140600:	e59d2010 	ldr	r2, [sp, #16]
  140604:	e1a03143 	asr	r3, r3, #2
  140608:	e3822020 	orr	r2, r2, #32
  14060c:	e2433001 	sub	r3, r3, #1
  140610:	e3520066 	cmp	r2, #102	; 0x66
  140614:	e0833183 	add	r3, r3, r3, lsl #3
  140618:	10863003 	addne	r3, r6, r3
  14061c:	e043300a 	sub	r3, r3, sl
  140620:	e1c33fc3 	bic	r3, r3, r3, asr #31
  140624:	e1550003 	cmp	r5, r3
  140628:	a1a05003 	movge	r5, r3
  14062c:	eafffe37 	b	13ff10 <printf_core+0x1438>
  140630:	e1a0300a 	mov	r3, sl
  140634:	e1a02009 	mov	r2, r9
  140638:	e3a01020 	mov	r1, #32
  14063c:	e59d0004 	ldr	r0, [sp, #4]
  140640:	ebfff8f9 	bl	13ea2c <pad.part.0>
  140644:	eafffbca 	b	13f574 <printf_core+0xa9c>
  140648:	e59d301c 	ldr	r3, [sp, #28]
  14064c:	e0865003 	add	r5, r6, r3
  140650:	eaffff9c 	b	1404c8 <printf_core+0x19f0>
  140654:	e59d32f0 	ldr	r3, [sp, #752]	; 0x2f0
  140658:	e0832105 	add	r2, r3, r5, lsl #2
  14065c:	e2833024 	add	r3, r3, #36	; 0x24
  140660:	e1530002 	cmp	r3, r2
  140664:	0afffb08 	beq	13f28c <printf_core+0x7b4>
  140668:	e5b21004 	ldr	r1, [r2, #4]!
  14066c:	e3510000 	cmp	r1, #0
  140670:	0afffffa 	beq	140660 <printf_core+0x1b88>
  140674:	eafffa2f 	b	13ef38 <printf_core+0x460>
  140678:	e3a0a009 	mov	sl, #9
  14067c:	eaffffdc 	b	1405f4 <printf_core+0x1b1c>
  140680:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  140684:	e15b0003 	cmp	fp, r3
  140688:	31a0a00b 	movcc	sl, fp
  14068c:	21a0a003 	movcs	sl, r3
  140690:	e15a0003 	cmp	sl, r3
  140694:	8a00002f 	bhi	140758 <printf_core+0x1c80>
  140698:	e28d7090 	add	r7, sp, #144	; 0x90
  14069c:	e043b00a 	sub	fp, r3, sl
  1406a0:	e2872009 	add	r2, r7, #9
  1406a4:	e58d2030 	str	r2, [sp, #48]	; 0x30
  1406a8:	e58d2034 	str	r2, [sp, #52]	; 0x34
  1406ac:	e3cb2003 	bic	r2, fp, #3
  1406b0:	e08a3002 	add	r3, sl, r2
  1406b4:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  1406b8:	e24a3004 	sub	r3, sl, #4
  1406bc:	e58db038 	str	fp, [sp, #56]	; 0x38
  1406c0:	e3a06030 	mov	r6, #48	; 0x30
  1406c4:	e1a0b004 	mov	fp, r4
  1406c8:	e1a04003 	mov	r4, r3
  1406cc:	e5b4c004 	ldr	ip, [r4, #4]!
  1406d0:	e35c0000 	cmp	ip, #0
  1406d4:	0a000068 	beq	14087c <printf_core+0x1da4>
  1406d8:	e2870009 	add	r0, r7, #9
  1406dc:	e51f1b78 	ldr	r1, [pc, #-2936]	; 13fb6c <printf_core+0x1094>
  1406e0:	e083219c 	umull	r2, r3, ip, r1
  1406e4:	e1a021a3 	lsr	r2, r3, #3
  1406e8:	e0823102 	add	r3, r2, r2, lsl #2
  1406ec:	e04c3083 	sub	r3, ip, r3, lsl #1
  1406f0:	e2833030 	add	r3, r3, #48	; 0x30
  1406f4:	e252c000 	subs	ip, r2, #0
  1406f8:	e5603001 	strb	r3, [r0, #-1]!
  1406fc:	1afffff6 	bne	1406dc <printf_core+0x1c04>
  140700:	e15a0004 	cmp	sl, r4
  140704:	1a000001 	bne	140710 <printf_core+0x1c38>
  140708:	ea000117 	b	140b6c <printf_core+0x2094>
  14070c:	e5606001 	strb	r6, [r0, #-1]!
  140710:	e1500007 	cmp	r0, r7
  140714:	8afffffc 	bhi	14070c <printf_core+0x1c34>
  140718:	e59d3004 	ldr	r3, [sp, #4]
  14071c:	e5932000 	ldr	r2, [r3]
  140720:	e3120020 	tst	r2, #32
  140724:	1a000003 	bne	140738 <printf_core+0x1c60>
  140728:	e1a02003 	mov	r2, r3
  14072c:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
  140730:	e0431000 	sub	r1, r3, r0
  140734:	eb000da5 	bl	143dd0 <__fwritex>
  140738:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  14073c:	e1530004 	cmp	r3, r4
  140740:	1affffe1 	bne	1406cc <printf_core+0x1bf4>
  140744:	e1a0400b 	mov	r4, fp
  140748:	e59db038 	ldr	fp, [sp, #56]	; 0x38
  14074c:	e3cb3003 	bic	r3, fp, #3
  140750:	e2833004 	add	r3, r3, #4
  140754:	e08aa003 	add	sl, sl, r3
  140758:	e3550000 	cmp	r5, #0
  14075c:	0a00003b 	beq	140850 <printf_core+0x1d78>
  140760:	e59d3004 	ldr	r3, [sp, #4]
  140764:	e5933000 	ldr	r3, [r3]
  140768:	e3130020 	tst	r3, #32
  14076c:	0a00003d 	beq	140868 <printf_core+0x1d90>
  140770:	e59d201c 	ldr	r2, [sp, #28]
  140774:	e3550000 	cmp	r5, #0
  140778:	d3a03000 	movle	r3, #0
  14077c:	c3a03001 	movgt	r3, #1
  140780:	e15a0002 	cmp	sl, r2
  140784:	23a03000 	movcs	r3, #0
  140788:	e3530000 	cmp	r3, #0
  14078c:	0a000027 	beq	140830 <printf_core+0x1d58>
  140790:	e1a0600a 	mov	r6, sl
  140794:	e3a0a030 	mov	sl, #48	; 0x30
  140798:	e59db004 	ldr	fp, [sp, #4]
  14079c:	e28d7090 	add	r7, sp, #144	; 0x90
  1407a0:	e4963004 	ldr	r3, [r6], #4
  1407a4:	e287c009 	add	ip, r7, #9
  1407a8:	e3530000 	cmp	r3, #0
  1407ac:	0a00000a 	beq	1407dc <printf_core+0x1d04>
  1407b0:	e1a01003 	mov	r1, r3
  1407b4:	e51f0c50 	ldr	r0, [pc, #-3152]	; 13fb6c <printf_core+0x1094>
  1407b8:	e0832091 	umull	r2, r3, r1, r0
  1407bc:	e1a031a3 	lsr	r3, r3, #3
  1407c0:	e0832103 	add	r2, r3, r3, lsl #2
  1407c4:	e0412082 	sub	r2, r1, r2, lsl #1
  1407c8:	e2822030 	add	r2, r2, #48	; 0x30
  1407cc:	e2531000 	subs	r1, r3, #0
  1407d0:	e56c2001 	strb	r2, [ip, #-1]!
  1407d4:	1afffff6 	bne	1407b4 <printf_core+0x1cdc>
  1407d8:	ea000000 	b	1407e0 <printf_core+0x1d08>
  1407dc:	e56ca001 	strb	sl, [ip, #-1]!
  1407e0:	e15c0007 	cmp	ip, r7
  1407e4:	8afffffc 	bhi	1407dc <printf_core+0x1d04>
  1407e8:	e59b3000 	ldr	r3, [fp]
  1407ec:	e3130020 	tst	r3, #32
  1407f0:	1a000005 	bne	14080c <printf_core+0x1d34>
  1407f4:	e3550009 	cmp	r5, #9
  1407f8:	e1a0000c 	mov	r0, ip
  1407fc:	b1a01005 	movlt	r1, r5
  140800:	a3a01009 	movge	r1, #9
  140804:	e1a0200b 	mov	r2, fp
  140808:	eb000d70 	bl	143dd0 <__fwritex>
  14080c:	e59d301c 	ldr	r3, [sp, #28]
  140810:	e2455009 	sub	r5, r5, #9
  140814:	e1530006 	cmp	r3, r6
  140818:	93a03000 	movls	r3, #0
  14081c:	83a03001 	movhi	r3, #1
  140820:	e3550000 	cmp	r5, #0
  140824:	d3a03000 	movle	r3, #0
  140828:	e3530000 	cmp	r3, #0
  14082c:	1affffdb 	bne	1407a0 <printf_core+0x1cc8>
  140830:	e2852009 	add	r2, r5, #9
  140834:	e3520009 	cmp	r2, #9
  140838:	dafffe54 	ble	140190 <printf_core+0x16b8>
  14083c:	e3a03009 	mov	r3, #9
  140840:	e3a01030 	mov	r1, #48	; 0x30
  140844:	e59d0004 	ldr	r0, [sp, #4]
  140848:	ebfff877 	bl	13ea2c <pad.part.0>
  14084c:	eafffe4f 	b	140190 <printf_core+0x16b8>
  140850:	e3180008 	tst	r8, #8
  140854:	0afffe4d 	beq	140190 <printf_core+0x16b8>
  140858:	e59d3004 	ldr	r3, [sp, #4]
  14085c:	e5933000 	ldr	r3, [r3]
  140860:	e3130020 	tst	r3, #32
  140864:	1afffe49 	bne	140190 <printf_core+0x16b8>
  140868:	e59d2004 	ldr	r2, [sp, #4]
  14086c:	e3a01001 	mov	r1, #1
  140870:	e51f0d08 	ldr	r0, [pc, #-3336]	; 13fb70 <printf_core+0x1098>
  140874:	eb000d55 	bl	143dd0 <__fwritex>
  140878:	eaffffbc 	b	140770 <printf_core+0x1c98>
  14087c:	e15a0004 	cmp	sl, r4
  140880:	12870009 	addne	r0, r7, #9
  140884:	1affffa0 	bne	14070c <printf_core+0x1c34>
  140888:	e28d0fb2 	add	r0, sp, #712	; 0x2c8
  14088c:	e5606230 	strb	r6, [r0, #-560]!	; 0xfffffdd0
  140890:	eaffffa0 	b	140718 <printf_core+0x1c40>
  140894:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
  140898:	e59d0034 	ldr	r0, [sp, #52]	; 0x34
  14089c:	e59d2004 	ldr	r2, [sp, #4]
  1408a0:	eb000d4a 	bl	143dd0 <__fwritex>
  1408a4:	e2283801 	eor	r3, r8, #65536	; 0x10000
  1408a8:	e3130a12 	tst	r3, #73728	; 0x12000
  1408ac:	01a0300b 	moveq	r3, fp
  1408b0:	13a03001 	movne	r3, #1
  1408b4:	e3530000 	cmp	r3, #0
  1408b8:	0a0000af 	beq	140b7c <printf_core+0x20a4>
  1408bc:	e59d2004 	ldr	r2, [sp, #4]
  1408c0:	e5923000 	ldr	r3, [r2]
  1408c4:	e3130020 	tst	r3, #32
  1408c8:	1affff12 	bne	140518 <printf_core+0x1a40>
  1408cc:	e59d101c 	ldr	r1, [sp, #28]
  1408d0:	e1a00007 	mov	r0, r7
  1408d4:	eb000d3d 	bl	143dd0 <__fwritex>
  1408d8:	e35a0000 	cmp	sl, #0
  1408dc:	ca00003c 	bgt	1409d4 <printf_core+0x1efc>
  1408e0:	e59d2004 	ldr	r2, [sp, #4]
  1408e4:	e5923000 	ldr	r3, [r2]
  1408e8:	e3130020 	tst	r3, #32
  1408ec:	1affff0b 	bne	140520 <printf_core+0x1a48>
  1408f0:	e1a01006 	mov	r1, r6
  1408f4:	e59d0010 	ldr	r0, [sp, #16]
  1408f8:	eb000d34 	bl	143dd0 <__fwritex>
  1408fc:	eaffff07 	b	140520 <printf_core+0x1a48>
  140900:	e59d3010 	ldr	r3, [sp, #16]
  140904:	e1a02009 	mov	r2, r9
  140908:	e3a01030 	mov	r1, #48	; 0x30
  14090c:	e59d0004 	ldr	r0, [sp, #4]
  140910:	ebfff845 	bl	13ea2c <pad.part.0>
  140914:	eafffdc7 	b	140038 <printf_core+0x1560>
  140918:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
  14091c:	e59d0034 	ldr	r0, [sp, #52]	; 0x34
  140920:	e59d2004 	ldr	r2, [sp, #4]
  140924:	eb000d29 	bl	143dd0 <__fwritex>
  140928:	eafffdbc 	b	140020 <printf_core+0x1548>
  14092c:	e59d3010 	ldr	r3, [sp, #16]
  140930:	e1a02009 	mov	r2, r9
  140934:	e3a01020 	mov	r1, #32
  140938:	e59d0004 	ldr	r0, [sp, #4]
  14093c:	ebfff83a 	bl	13ea2c <pad.part.0>
  140940:	eafffdb2 	b	140010 <printf_core+0x1538>
  140944:	e156000e 	cmp	r6, lr
  140948:	cafffa0f 	bgt	13f18c <printf_core+0x6b4>
  14094c:	e3560000 	cmp	r6, #0
  140950:	c0833006 	addgt	r3, r3, r6
  140954:	eafffd9e 	b	13ffd4 <printf_core+0x14fc>
  140958:	e59d1038 	ldr	r1, [sp, #56]	; 0x38
  14095c:	e59d0044 	ldr	r0, [sp, #68]	; 0x44
  140960:	e51f3df4 	ldr	r3, [pc, #-3572]	; 13fb74 <printf_core+0x109c>
  140964:	e0811000 	add	r1, r1, r0
  140968:	e1510003 	cmp	r1, r3
  14096c:	e5871000 	str	r1, [r7]
  140970:	9a000008 	bls	140998 <printf_core+0x1ec0>
  140974:	e4072004 	str	r2, [r7], #-4
  140978:	e157000b 	cmp	r7, fp
  14097c:	350b2004 	strcc	r2, [fp, #-4]
  140980:	e5971000 	ldr	r1, [r7]
  140984:	324bb004 	subcc	fp, fp, #4
  140988:	e2811001 	add	r1, r1, #1
  14098c:	e1510003 	cmp	r1, r3
  140990:	e5871000 	str	r1, [r7]
  140994:	8afffff6 	bhi	140974 <printf_core+0x1e9c>
  140998:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  14099c:	e59b2000 	ldr	r2, [fp]
  1409a0:	e043600b 	sub	r6, r3, fp
  1409a4:	e1a06146 	asr	r6, r6, #2
  1409a8:	e3520009 	cmp	r2, #9
  1409ac:	e0866186 	add	r6, r6, r6, lsl #3
  1409b0:	83a0300a 	movhi	r3, #10
  1409b4:	9a000004 	bls	1409cc <printf_core+0x1ef4>
  1409b8:	e0833103 	add	r3, r3, r3, lsl #2
  1409bc:	e1a03083 	lsl	r3, r3, #1
  1409c0:	e1520003 	cmp	r2, r3
  1409c4:	e2866001 	add	r6, r6, #1
  1409c8:	2afffffa 	bcs	1409b8 <printf_core+0x1ee0>
  1409cc:	e287c004 	add	ip, r7, #4
  1409d0:	eafffd37 	b	13feb4 <printf_core+0x13dc>
  1409d4:	e1a0200a 	mov	r2, sl
  1409d8:	e3a03000 	mov	r3, #0
  1409dc:	e3a01030 	mov	r1, #48	; 0x30
  1409e0:	e59d0004 	ldr	r0, [sp, #4]
  1409e4:	ebfff810 	bl	13ea2c <pad.part.0>
  1409e8:	eaffffbc 	b	1408e0 <printf_core+0x1e08>
  1409ec:	e3a03030 	mov	r3, #48	; 0x30
  1409f0:	e28dc08f 	add	ip, sp, #143	; 0x8f
  1409f4:	e5cd308f 	strb	r3, [sp, #143]	; 0x8f
  1409f8:	eafffe59 	b	140364 <printf_core+0x188c>
  1409fc:	e265300b 	rsb	r3, r5, #11
  140a00:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  140a04:	e1a0300b 	mov	r3, fp
  140a08:	e3a06000 	mov	r6, #0
  140a0c:	e1a0b004 	mov	fp, r4
  140a10:	e1a04003 	mov	r4, r3
  140a14:	e51f7ea4 	ldr	r7, [pc, #-3748]	; 13fb78 <printf_core+0x10a0>
  140a18:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  140a1c:	e1a00006 	mov	r0, r6
  140a20:	e2433001 	sub	r3, r3, #1
  140a24:	e1a01007 	mov	r1, r7
  140a28:	e58d302c 	str	r3, [sp, #44]	; 0x2c
  140a2c:	e3a02000 	mov	r2, #0
  140a30:	e51f3ec0 	ldr	r3, [pc, #-3776]	; 13fb78 <printf_core+0x10a0>
  140a34:	eb001099 	bl	144ca0 <__aeabi_dmul>
  140a38:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
  140a3c:	e1a06000 	mov	r6, r0
  140a40:	e3730001 	cmn	r3, #1
  140a44:	e1a07001 	mov	r7, r1
  140a48:	1afffff2 	bne	140a18 <printf_core+0x1f40>
  140a4c:	e1a03004 	mov	r3, r4
  140a50:	e1a0400b 	mov	r4, fp
  140a54:	e1a0b003 	mov	fp, r3
  140a58:	e59d3034 	ldr	r3, [sp, #52]	; 0x34
  140a5c:	e59d001c 	ldr	r0, [sp, #28]
  140a60:	e5d33000 	ldrb	r3, [r3]
  140a64:	e353002d 	cmp	r3, #45	; 0x2d
  140a68:	0a000028 	beq	140b10 <printf_core+0x2038>
  140a6c:	e59d1038 	ldr	r1, [sp, #56]	; 0x38
  140a70:	e1a02006 	mov	r2, r6
  140a74:	e1a03007 	mov	r3, r7
  140a78:	eb000f9b 	bl	1448ec <__adddf3>
  140a7c:	e1a02006 	mov	r2, r6
  140a80:	e1a03007 	mov	r3, r7
  140a84:	eb000f97 	bl	1448e8 <__aeabi_dsub>
  140a88:	e58d001c 	str	r0, [sp, #28]
  140a8c:	e58d1038 	str	r1, [sp, #56]	; 0x38
  140a90:	eafffe20 	b	140318 <printf_core+0x1840>
  140a94:	e59d3010 	ldr	r3, [sp, #16]
  140a98:	e1a02009 	mov	r2, r9
  140a9c:	e3a01020 	mov	r1, #32
  140aa0:	e59d0004 	ldr	r0, [sp, #4]
  140aa4:	ebfff7e0 	bl	13ea2c <pad.part.0>
  140aa8:	eafffdbe 	b	1401a8 <printf_core+0x16d0>
  140aac:	e3a0e000 	mov	lr, #0
  140ab0:	e51fcf3c 	ldr	ip, [pc, #-3900]	; 13fb7c <printf_core+0x10a4>
  140ab4:	eafffce1 	b	13fe40 <printf_core+0x1368>
  140ab8:	e51f3f40 	ldr	r3, [pc, #-3904]	; 13fb80 <printf_core+0x10a8>
  140abc:	e58d2040 	str	r2, [sp, #64]	; 0x40
  140ac0:	e58d3020 	str	r3, [sp, #32]
  140ac4:	eafffcd6 	b	13fe24 <printf_core+0x134c>
  140ac8:	e3a03001 	mov	r3, #1
  140acc:	e58d3040 	str	r3, [sp, #64]	; 0x40
  140ad0:	e51f3f58 	ldr	r3, [pc, #-3928]	; 13fb80 <printf_core+0x10a8>
  140ad4:	e58d3020 	str	r3, [sp, #32]
  140ad8:	eafffcd1 	b	13fe24 <printf_core+0x134c>
  140adc:	e3a03001 	mov	r3, #1
  140ae0:	e3a05006 	mov	r5, #6
  140ae4:	e58d3044 	str	r3, [sp, #68]	; 0x44
  140ae8:	eafffb9d 	b	13f964 <printf_core+0xe8c>
  140aec:	e59d101c 	ldr	r1, [sp, #28]
  140af0:	e287c004 	add	ip, r7, #4
  140af4:	e51f2f78 	ldr	r2, [pc, #-3960]	; 13fb84 <printf_core+0x10ac>
  140af8:	e51f3f78 	ldr	r3, [pc, #-3960]	; 13fb88 <printf_core+0x10b0>
  140afc:	e151000c 	cmp	r1, ip
  140b00:	01a0c002 	moveq	ip, r2
  140b04:	11a0c003 	movne	ip, r3
  140b08:	e3a0e000 	mov	lr, #0
  140b0c:	eafffccb 	b	13fe40 <printf_core+0x1368>
  140b10:	e59d3038 	ldr	r3, [sp, #56]	; 0x38
  140b14:	e1a02006 	mov	r2, r6
  140b18:	e2831102 	add	r1, r3, #-2147483648	; 0x80000000
  140b1c:	e1a03007 	mov	r3, r7
  140b20:	eb000f70 	bl	1448e8 <__aeabi_dsub>
  140b24:	e1a03001 	mov	r3, r1
  140b28:	e1a02000 	mov	r2, r0
  140b2c:	e1a01007 	mov	r1, r7
  140b30:	e1a00006 	mov	r0, r6
  140b34:	eb000f6c 	bl	1448ec <__adddf3>
  140b38:	e2813102 	add	r3, r1, #-2147483648	; 0x80000000
  140b3c:	e58d001c 	str	r0, [sp, #28]
  140b40:	e58d3038 	str	r3, [sp, #56]	; 0x38
  140b44:	eafffdf3 	b	140318 <printf_core+0x1840>
  140b48:	e3a0300a 	mov	r3, #10
  140b4c:	e58d3038 	str	r3, [sp, #56]	; 0x38
  140b50:	eafffc97 	b	13fdb4 <printf_core+0x12dc>
  140b54:	e1a03005 	mov	r3, r5
  140b58:	e1a02009 	mov	r2, r9
  140b5c:	e3a01020 	mov	r1, #32
  140b60:	e59d0004 	ldr	r0, [sp, #4]
  140b64:	ebfff7b0 	bl	13ea2c <pad.part.0>
  140b68:	eafffe72 	b	140538 <printf_core+0x1a60>
  140b6c:	e59d3034 	ldr	r3, [sp, #52]	; 0x34
  140b70:	e1500003 	cmp	r0, r3
  140b74:	1afffee7 	bne	140718 <printf_core+0x1c40>
  140b78:	eaffff42 	b	140888 <printf_core+0x1db0>
  140b7c:	e1a03005 	mov	r3, r5
  140b80:	e1a02009 	mov	r2, r9
  140b84:	e3a01030 	mov	r1, #48	; 0x30
  140b88:	e59d0004 	ldr	r0, [sp, #4]
  140b8c:	ebfff7a6 	bl	13ea2c <pad.part.0>
  140b90:	eaffff49 	b	1408bc <printf_core+0x1de4>
  140b94:	e1a03005 	mov	r3, r5
  140b98:	e1a02009 	mov	r2, r9
  140b9c:	e3a01020 	mov	r1, #32
  140ba0:	e59d0004 	ldr	r0, [sp, #4]
  140ba4:	ebfff7a0 	bl	13ea2c <pad.part.0>
  140ba8:	eafffe50 	b	1404f0 <printf_core+0x1a18>

00140bac <vfprintf>:
  140bac:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
  140bb0:	e1a09001 	mov	r9, r1
  140bb4:	e1a06002 	mov	r6, r2
  140bb8:	e24dd0dc 	sub	sp, sp, #220	; 0xdc
  140bbc:	e28d5010 	add	r5, sp, #16
  140bc0:	e3a02028 	mov	r2, #40	; 0x28
  140bc4:	e3a01000 	mov	r1, #0
  140bc8:	e1a04000 	mov	r4, r0
  140bcc:	e1a00005 	mov	r0, r5
  140bd0:	eb000221 	bl	14145c <memset>
  140bd4:	e58d5000 	str	r5, [sp]
  140bd8:	e1a01009 	mov	r1, r9
  140bdc:	e28d3038 	add	r3, sp, #56	; 0x38
  140be0:	e28d200c 	add	r2, sp, #12
  140be4:	e3a00000 	mov	r0, #0
  140be8:	e58d600c 	str	r6, [sp, #12]
  140bec:	ebfff7b9 	bl	13ead8 <printf_core>
  140bf0:	e3500000 	cmp	r0, #0
  140bf4:	ba000047 	blt	140d18 <vfprintf+0x16c>
  140bf8:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
  140bfc:	e3530000 	cmp	r3, #0
  140c00:	b3a08000 	movlt	r8, #0
  140c04:	ba000002 	blt	140c14 <vfprintf+0x68>
  140c08:	e1a00004 	mov	r0, r4
  140c0c:	eb000ab0 	bl	1436d4 <__lockfile>
  140c10:	e1a08000 	mov	r8, r0
  140c14:	e5942048 	ldr	r2, [r4, #72]	; 0x48
  140c18:	e5943000 	ldr	r3, [r4]
  140c1c:	e3520000 	cmp	r2, #0
  140c20:	e2036020 	and	r6, r3, #32
  140c24:	d3c33020 	bicle	r3, r3, #32
  140c28:	d5843000 	strle	r3, [r4]
  140c2c:	e5943030 	ldr	r3, [r4, #48]	; 0x30
  140c30:	e3530000 	cmp	r3, #0
  140c34:	0a000024 	beq	140ccc <vfprintf+0x120>
  140c38:	e5947010 	ldr	r7, [r4, #16]
  140c3c:	e3570000 	cmp	r7, #0
  140c40:	13a07000 	movne	r7, #0
  140c44:	0a000035 	beq	140d20 <vfprintf+0x174>
  140c48:	e58d5000 	str	r5, [sp]
  140c4c:	e28d3038 	add	r3, sp, #56	; 0x38
  140c50:	e28d200c 	add	r2, sp, #12
  140c54:	e1a01009 	mov	r1, r9
  140c58:	e1a00004 	mov	r0, r4
  140c5c:	ebfff79d 	bl	13ead8 <printf_core>
  140c60:	e1a05000 	mov	r5, r0
  140c64:	e3570000 	cmp	r7, #0
  140c68:	0a00000d 	beq	140ca4 <vfprintf+0xf8>
  140c6c:	e3a02000 	mov	r2, #0
  140c70:	e5943024 	ldr	r3, [r4, #36]	; 0x24
  140c74:	e1a01002 	mov	r1, r2
  140c78:	e1a00004 	mov	r0, r4
  140c7c:	e12fff33 	blx	r3
  140c80:	e3a03000 	mov	r3, #0
  140c84:	e5942014 	ldr	r2, [r4, #20]
  140c88:	e584702c 	str	r7, [r4, #44]	; 0x2c
  140c8c:	e1520003 	cmp	r2, r3
  140c90:	03e05000 	mvneq	r5, #0
  140c94:	e5843030 	str	r3, [r4, #48]	; 0x30
  140c98:	e5843010 	str	r3, [r4, #16]
  140c9c:	e584301c 	str	r3, [r4, #28]
  140ca0:	e5843014 	str	r3, [r4, #20]
  140ca4:	e5943000 	ldr	r3, [r4]
  140ca8:	e3130020 	tst	r3, #32
  140cac:	13e05000 	mvnne	r5, #0
  140cb0:	e1866003 	orr	r6, r6, r3
  140cb4:	e3580000 	cmp	r8, #0
  140cb8:	e5846000 	str	r6, [r4]
  140cbc:	1a000010 	bne	140d04 <vfprintf+0x158>
  140cc0:	e1a00005 	mov	r0, r5
  140cc4:	e28dd0dc 	add	sp, sp, #220	; 0xdc
  140cc8:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  140ccc:	e3a01050 	mov	r1, #80	; 0x50
  140cd0:	e28d2088 	add	r2, sp, #136	; 0x88
  140cd4:	e594702c 	ldr	r7, [r4, #44]	; 0x2c
  140cd8:	e5843010 	str	r3, [r4, #16]
  140cdc:	e584301c 	str	r3, [r4, #28]
  140ce0:	e5843014 	str	r3, [r4, #20]
  140ce4:	e5841030 	str	r1, [r4, #48]	; 0x30
  140ce8:	e584202c 	str	r2, [r4, #44]	; 0x2c
  140cec:	e1a00004 	mov	r0, r4
  140cf0:	eb000b95 	bl	143b4c <__towrite>
  140cf4:	e3500000 	cmp	r0, #0
  140cf8:	13e05000 	mvnne	r5, #0
  140cfc:	1affffd8 	bne	140c64 <vfprintf+0xb8>
  140d00:	eaffffd0 	b	140c48 <vfprintf+0x9c>
  140d04:	e1a00004 	mov	r0, r4
  140d08:	eb000abe 	bl	143808 <__unlockfile>
  140d0c:	e1a00005 	mov	r0, r5
  140d10:	e28dd0dc 	add	sp, sp, #220	; 0xdc
  140d14:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  140d18:	e3e05000 	mvn	r5, #0
  140d1c:	eaffffe7 	b	140cc0 <vfprintf+0x114>
  140d20:	e1a00004 	mov	r0, r4
  140d24:	eb000b88 	bl	143b4c <__towrite>
  140d28:	e3500000 	cmp	r0, #0
  140d2c:	13e05000 	mvnne	r5, #0
  140d30:	1affffdb 	bne	140ca4 <vfprintf+0xf8>
  140d34:	eaffffc3 	b	140c48 <vfprintf+0x9c>

00140d38 <sn_write>:
  140d38:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  140d3c:	e5906054 	ldr	r6, [r0, #84]	; 0x54
  140d40:	e590c01c 	ldr	ip, [r0, #28]
  140d44:	e1a05000 	mov	r5, r0
  140d48:	e5900014 	ldr	r0, [r0, #20]
  140d4c:	e5963004 	ldr	r3, [r6, #4]
  140d50:	e040000c 	sub	r0, r0, ip
  140d54:	e1500003 	cmp	r0, r3
  140d58:	31a04000 	movcc	r4, r0
  140d5c:	21a04003 	movcs	r4, r3
  140d60:	e3540000 	cmp	r4, #0
  140d64:	e1a08001 	mov	r8, r1
  140d68:	e1a07002 	mov	r7, r2
  140d6c:	e5960000 	ldr	r0, [r6]
  140d70:	1a000012 	bne	140dc0 <sn_write+0x88>
  140d74:	e1570003 	cmp	r7, r3
  140d78:	31a04007 	movcc	r4, r7
  140d7c:	21a04003 	movcs	r4, r3
  140d80:	e3540000 	cmp	r4, #0
  140d84:	0a000006 	beq	140da4 <sn_write+0x6c>
  140d88:	e1a01008 	mov	r1, r8
  140d8c:	e1a02004 	mov	r2, r4
  140d90:	eb000079 	bl	140f7c <memcpy>
  140d94:	e8960009 	ldm	r6, {r0, r3}
  140d98:	e0800004 	add	r0, r0, r4
  140d9c:	e0433004 	sub	r3, r3, r4
  140da0:	e8860009 	stm	r6, {r0, r3}
  140da4:	e3a03000 	mov	r3, #0
  140da8:	e5c03000 	strb	r3, [r0]
  140dac:	e595302c 	ldr	r3, [r5, #44]	; 0x2c
  140db0:	e1a00007 	mov	r0, r7
  140db4:	e585301c 	str	r3, [r5, #28]
  140db8:	e5853014 	str	r3, [r5, #20]
  140dbc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  140dc0:	e1a0100c 	mov	r1, ip
  140dc4:	e1a02004 	mov	r2, r4
  140dc8:	eb00006b 	bl	140f7c <memcpy>
  140dcc:	e8960009 	ldm	r6, {r0, r3}
  140dd0:	e0800004 	add	r0, r0, r4
  140dd4:	e0433004 	sub	r3, r3, r4
  140dd8:	e8860009 	stm	r6, {r0, r3}
  140ddc:	eaffffe4 	b	140d74 <sn_write+0x3c>

00140de0 <vsnprintf>:
  140de0:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
  140de4:	e2516000 	subs	r6, r1, #0
  140de8:	e24dd0a4 	sub	sp, sp, #164	; 0xa4
  140dec:	e1a08002 	mov	r8, r2
  140df0:	e1a09003 	mov	r9, r3
  140df4:	1a000018 	bne	140e5c <vsnprintf+0x7c>
  140df8:	e28d7010 	add	r7, sp, #16
  140dfc:	e3a02090 	mov	r2, #144	; 0x90
  140e00:	e1a00007 	mov	r0, r7
  140e04:	e28d4004 	add	r4, sp, #4
  140e08:	e58d600c 	str	r6, [sp, #12]
  140e0c:	e58d4008 	str	r4, [sp, #8]
  140e10:	eb000191 	bl	14145c <memset>
  140e14:	e3e02000 	mvn	r2, #0
  140e18:	e59f1098 	ldr	r1, [pc, #152]	; 140eb8 <vsnprintf+0xd8>
  140e1c:	e28d3008 	add	r3, sp, #8
  140e20:	e58d205c 	str	r2, [sp, #92]	; 0x5c
  140e24:	e58d2060 	str	r2, [sp, #96]	; 0x60
  140e28:	e58d1034 	str	r1, [sp, #52]	; 0x34
  140e2c:	e58dd03c 	str	sp, [sp, #60]	; 0x3c
  140e30:	e58d3064 	str	r3, [sp, #100]	; 0x64
  140e34:	e3a0c000 	mov	ip, #0
  140e38:	e1a02009 	mov	r2, r9
  140e3c:	e1a01008 	mov	r1, r8
  140e40:	e1a00007 	mov	r0, r7
  140e44:	e5c4c000 	strb	ip, [r4]
  140e48:	ebffff57 	bl	140bac <vfprintf>
  140e4c:	e1a05000 	mov	r5, r0
  140e50:	e1a00005 	mov	r0, r5
  140e54:	e28dd0a4 	add	sp, sp, #164	; 0xa4
  140e58:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  140e5c:	e3e05000 	mvn	r5, #0
  140e60:	e1a04000 	mov	r4, r0
  140e64:	e28d7010 	add	r7, sp, #16
  140e68:	e0863005 	add	r3, r6, r5
  140e6c:	e3a02090 	mov	r2, #144	; 0x90
  140e70:	e1a00007 	mov	r0, r7
  140e74:	e3a01000 	mov	r1, #0
  140e78:	e58d300c 	str	r3, [sp, #12]
  140e7c:	e58d4008 	str	r4, [sp, #8]
  140e80:	eb000175 	bl	14145c <memset>
  140e84:	e59f202c 	ldr	r2, [pc, #44]	; 140eb8 <vsnprintf+0xd8>
  140e88:	e28d3008 	add	r3, sp, #8
  140e8c:	e3560000 	cmp	r6, #0
  140e90:	e58d505c 	str	r5, [sp, #92]	; 0x5c
  140e94:	e58d5060 	str	r5, [sp, #96]	; 0x60
  140e98:	e58d2034 	str	r2, [sp, #52]	; 0x34
  140e9c:	e58dd03c 	str	sp, [sp, #60]	; 0x3c
  140ea0:	e58d3064 	str	r3, [sp, #100]	; 0x64
  140ea4:	aaffffe2 	bge	140e34 <vsnprintf+0x54>
  140ea8:	ebffe084 	bl	1390c0 <__errno_location>
  140eac:	e3a0204b 	mov	r2, #75	; 0x4b
  140eb0:	e5802000 	str	r2, [r0]
  140eb4:	eaffffe5 	b	140e50 <vsnprintf+0x70>
  140eb8:	00140d38 	.word	0x00140d38

00140ebc <vsprintf>:
  140ebc:	e1a03002 	mov	r3, r2
  140ec0:	e1a02001 	mov	r2, r1
  140ec4:	e3e01102 	mvn	r1, #-2147483648	; 0x80000000
  140ec8:	eaffffc4 	b	140de0 <vsnprintf>

00140ecc <atoi>:
  140ecc:	e5d03000 	ldrb	r3, [r0]
  140ed0:	e2432009 	sub	r2, r3, #9
  140ed4:	e3530020 	cmp	r3, #32
  140ed8:	13520004 	cmpne	r2, #4
  140edc:	8a000004 	bhi	140ef4 <atoi+0x28>
  140ee0:	e5f03001 	ldrb	r3, [r0, #1]!
  140ee4:	e2432009 	sub	r2, r3, #9
  140ee8:	e3530020 	cmp	r3, #32
  140eec:	13520004 	cmpne	r2, #4
  140ef0:	9afffffa 	bls	140ee0 <atoi+0x14>
  140ef4:	e353002b 	cmp	r3, #43	; 0x2b
  140ef8:	0a000019 	beq	140f64 <atoi+0x98>
  140efc:	e353002d 	cmp	r3, #45	; 0x2d
  140f00:	0a00000f 	beq	140f44 <atoi+0x78>
  140f04:	e5d01000 	ldrb	r1, [r0]
  140f08:	e2412030 	sub	r2, r1, #48	; 0x30
  140f0c:	e3520009 	cmp	r2, #9
  140f10:	91a03000 	movls	r3, r0
  140f14:	8a000010 	bhi	140f5c <atoi+0x90>
  140f18:	e3a0c000 	mov	ip, #0
  140f1c:	e3a00000 	mov	r0, #0
  140f20:	e5f31001 	ldrb	r1, [r3, #1]!
  140f24:	e0800100 	add	r0, r0, r0, lsl #2
  140f28:	e0620080 	rsb	r0, r2, r0, lsl #1
  140f2c:	e2412030 	sub	r2, r1, #48	; 0x30
  140f30:	e3520009 	cmp	r2, #9
  140f34:	9afffff9 	bls	140f20 <atoi+0x54>
  140f38:	e35c0000 	cmp	ip, #0
  140f3c:	02600000 	rsbeq	r0, r0, #0
  140f40:	e12fff1e 	bx	lr
  140f44:	e5d01001 	ldrb	r1, [r0, #1]
  140f48:	e2803001 	add	r3, r0, #1
  140f4c:	e2412030 	sub	r2, r1, #48	; 0x30
  140f50:	e3520009 	cmp	r2, #9
  140f54:	93a0c001 	movls	ip, #1
  140f58:	9affffef 	bls	140f1c <atoi+0x50>
  140f5c:	e3a00000 	mov	r0, #0
  140f60:	e12fff1e 	bx	lr
  140f64:	e5d01001 	ldrb	r1, [r0, #1]
  140f68:	e2803001 	add	r3, r0, #1
  140f6c:	e2412030 	sub	r2, r1, #48	; 0x30
  140f70:	e3520009 	cmp	r2, #9
  140f74:	9affffe7 	bls	140f18 <atoi+0x4c>
  140f78:	eafffff7 	b	140f5c <atoi+0x90>

00140f7c <memcpy>:
  140f7c:	e92d4011 	push	{r0, r4, lr}
  140f80:	e24dd01c 	sub	sp, sp, #28
  140f84:	e3520004 	cmp	r2, #4
  140f88:	3a0000b0 	bcc	141250 <copy_last_3_and_return>
  140f8c:	e2613000 	rsb	r3, r1, #0
  140f90:	e2133003 	ands	r3, r3, #3
  140f94:	0a000007 	beq	140fb8 <src_aligned>
  140f98:	e1b0cf83 	lsls	ip, r3, #31
  140f9c:	e0422003 	sub	r2, r2, r3
  140fa0:	44d13001 	ldrbmi	r3, [r1], #1
  140fa4:	24d14001 	ldrbcs	r4, [r1], #1
  140fa8:	24d1c001 	ldrbcs	ip, [r1], #1
  140fac:	44c03001 	strbmi	r3, [r0], #1
  140fb0:	24c04001 	strbcs	r4, [r0], #1
  140fb4:	24c0c001 	strbcs	ip, [r0], #1

00140fb8 <src_aligned>:
  140fb8:	e020c001 	eor	ip, r0, r1
  140fbc:	e31c0003 	tst	ip, #3
  140fc0:	1a000027 	bne	141064 <non_congruent>
  140fc4:	e88d0fe0 	stm	sp, {r5, r6, r7, r8, r9, sl, fp}
  140fc8:	e2603000 	rsb	r3, r0, #0
  140fcc:	e213301c 	ands	r3, r3, #28
  140fd0:	0a00000a 	beq	141000 <cached_aligned32>
  140fd4:	e1530002 	cmp	r3, r2
  140fd8:	8202301c 	andhi	r3, r2, #28
  140fdc:	e1b0ce03 	lsls	ip, r3, #28
  140fe0:	28b100f0 	ldmcs	r1!, {r4, r5, r6, r7}
  140fe4:	48b10300 	ldmmi	r1!, {r8, r9}
  140fe8:	28a000f0 	stmiacs	r0!, {r4, r5, r6, r7}
  140fec:	48a00300 	stmiami	r0!, {r8, r9}
  140ff0:	e3130004 	tst	r3, #4
  140ff4:	1491a004 	ldrne	sl, [r1], #4
  140ff8:	1480a004 	strne	sl, [r0], #4
  140ffc:	e0422003 	sub	r2, r2, r3

00141000 <cached_aligned32>:
  141000:	e2522020 	subs	r2, r2, #32
  141004:	3a000004 	bcc	14101c <less_than_32_left>
  141008:	e8b10ff0 	ldm	r1!, {r4, r5, r6, r7, r8, r9, sl, fp}
  14100c:	e2522020 	subs	r2, r2, #32
  141010:	e8a00ff0 	stmia	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
  141014:	2afffffb 	bcs	141008 <cached_aligned32+0x8>
  141018:	e2822020 	add	r2, r2, #32

0014101c <less_than_32_left>:
  14101c:	e312001f 	tst	r2, #31
  141020:	0a00000c 	beq	141058 <less_than_32_left+0x3c>
  141024:	e1b0ce02 	lsls	ip, r2, #28
  141028:	28b100f0 	ldmcs	r1!, {r4, r5, r6, r7}
  14102c:	48b10300 	ldmmi	r1!, {r8, r9}
  141030:	28a000f0 	stmiacs	r0!, {r4, r5, r6, r7}
  141034:	48a00300 	stmiami	r0!, {r8, r9}
  141038:	e1b0cf02 	lsls	ip, r2, #30
  14103c:	24913004 	ldrcs	r3, [r1], #4
  141040:	40d140b2 	ldrhmi	r4, [r1], #2
  141044:	24803004 	strcs	r3, [r0], #4
  141048:	40c040b2 	strhmi	r4, [r0], #2
  14104c:	e3120001 	tst	r2, #1
  141050:	15d13000 	ldrbne	r3, [r1]
  141054:	15c03000 	strbne	r3, [r0]
  141058:	e8bd0fe0 	pop	{r5, r6, r7, r8, r9, sl, fp}
  14105c:	e8bd4011 	pop	{r0, r4, lr}
  141060:	e12fff1e 	bx	lr

00141064 <non_congruent>:
  141064:	e3520004 	cmp	r2, #4
  141068:	3a000078 	bcc	141250 <copy_last_3_and_return>
  14106c:	e88d0fe0 	stm	sp, {r5, r6, r7, r8, r9, sl, fp}
  141070:	e2605000 	rsb	r5, r0, #0
  141074:	e2055003 	and	r5, r5, #3
  141078:	e1a0c185 	lsl	ip, r5, #3
  14107c:	e26ce020 	rsb	lr, ip, #32
  141080:	e4913004 	ldr	r3, [r1], #4
  141084:	e2422004 	sub	r2, r2, #4
  141088:	e1b05f85 	lsls	r5, r5, #31
  14108c:	44c03001 	strbmi	r3, [r0], #1
  141090:	41a03423 	lsrmi	r3, r3, #8
  141094:	24c03001 	strbcs	r3, [r0], #1
  141098:	21a03423 	lsrcs	r3, r3, #8
  14109c:	24c03001 	strbcs	r3, [r0], #1
  1410a0:	21a03423 	lsrcs	r3, r3, #8
  1410a4:	e3520004 	cmp	r2, #4
  1410a8:	3a000061 	bcc	141234 <partial_word_tail>
  1410ac:	e310001c 	tst	r0, #28
  1410b0:	0a000007 	beq	1410d4 <non_congruent+0x70>
  1410b4:	e4915004 	ldr	r5, [r1], #4
  1410b8:	e2422004 	sub	r2, r2, #4
  1410bc:	e1834e15 	orr	r4, r3, r5, lsl lr
  1410c0:	e1a03c35 	lsr	r3, r5, ip
  1410c4:	e4804004 	str	r4, [r0], #4
  1410c8:	e3520004 	cmp	r2, #4
  1410cc:	2afffff6 	bcs	1410ac <non_congruent+0x48>
  1410d0:	3a000057 	bcc	141234 <partial_word_tail>
  1410d4:	e2522020 	subs	r2, r2, #32
  1410d8:	3a00004a 	bcc	141208 <less_than_thirtytwo>
  1410dc:	e35c0018 	cmp	ip, #24
  1410e0:	0a000031 	beq	1411ac <loop24>
  1410e4:	e35c0008 	cmp	ip, #8
  1410e8:	0a000017 	beq	14114c <loop8>

001410ec <loop16>:
  1410ec:	e491c004 	ldr	ip, [r1], #4
  1410f0:	e1a0400c 	mov	r4, ip
  1410f4:	e8b10fe0 	ldm	r1!, {r5, r6, r7, r8, r9, sl, fp}
  1410f8:	e2522020 	subs	r2, r2, #32
  1410fc:	2491c004 	ldrcs	ip, [r1], #4
  141100:	e1833804 	orr	r3, r3, r4, lsl #16
  141104:	e1a04824 	lsr	r4, r4, #16
  141108:	e1844805 	orr	r4, r4, r5, lsl #16
  14110c:	e1a05825 	lsr	r5, r5, #16
  141110:	e1855806 	orr	r5, r5, r6, lsl #16
  141114:	e1a06826 	lsr	r6, r6, #16
  141118:	e1866807 	orr	r6, r6, r7, lsl #16
  14111c:	e1a07827 	lsr	r7, r7, #16
  141120:	e1877808 	orr	r7, r7, r8, lsl #16
  141124:	e1a08828 	lsr	r8, r8, #16
  141128:	e1888809 	orr	r8, r8, r9, lsl #16
  14112c:	e1a09829 	lsr	r9, r9, #16
  141130:	e189980a 	orr	r9, r9, sl, lsl #16
  141134:	e1a0a82a 	lsr	sl, sl, #16
  141138:	e18aa80b 	orr	sl, sl, fp, lsl #16
  14113c:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
  141140:	e1a0382b 	lsr	r3, fp, #16
  141144:	2affffe9 	bcs	1410f0 <loop16+0x4>
  141148:	ea00002e 	b	141208 <less_than_thirtytwo>

0014114c <loop8>:
  14114c:	e491c004 	ldr	ip, [r1], #4
  141150:	e1a0400c 	mov	r4, ip
  141154:	e8b10fe0 	ldm	r1!, {r5, r6, r7, r8, r9, sl, fp}
  141158:	e2522020 	subs	r2, r2, #32
  14115c:	2491c004 	ldrcs	ip, [r1], #4
  141160:	e1833c04 	orr	r3, r3, r4, lsl #24
  141164:	e1a04424 	lsr	r4, r4, #8
  141168:	e1844c05 	orr	r4, r4, r5, lsl #24
  14116c:	e1a05425 	lsr	r5, r5, #8
  141170:	e1855c06 	orr	r5, r5, r6, lsl #24
  141174:	e1a06426 	lsr	r6, r6, #8
  141178:	e1866c07 	orr	r6, r6, r7, lsl #24
  14117c:	e1a07427 	lsr	r7, r7, #8
  141180:	e1877c08 	orr	r7, r7, r8, lsl #24
  141184:	e1a08428 	lsr	r8, r8, #8
  141188:	e1888c09 	orr	r8, r8, r9, lsl #24
  14118c:	e1a09429 	lsr	r9, r9, #8
  141190:	e1899c0a 	orr	r9, r9, sl, lsl #24
  141194:	e1a0a42a 	lsr	sl, sl, #8
  141198:	e18aac0b 	orr	sl, sl, fp, lsl #24
  14119c:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
  1411a0:	e1a0342b 	lsr	r3, fp, #8
  1411a4:	2affffe9 	bcs	141150 <loop8+0x4>
  1411a8:	ea000016 	b	141208 <less_than_thirtytwo>

001411ac <loop24>:
  1411ac:	e491c004 	ldr	ip, [r1], #4
  1411b0:	e1a0400c 	mov	r4, ip
  1411b4:	e8b10fe0 	ldm	r1!, {r5, r6, r7, r8, r9, sl, fp}
  1411b8:	e2522020 	subs	r2, r2, #32
  1411bc:	2491c004 	ldrcs	ip, [r1], #4
  1411c0:	e1833404 	orr	r3, r3, r4, lsl #8
  1411c4:	e1a04c24 	lsr	r4, r4, #24
  1411c8:	e1844405 	orr	r4, r4, r5, lsl #8
  1411cc:	e1a05c25 	lsr	r5, r5, #24
  1411d0:	e1855406 	orr	r5, r5, r6, lsl #8
  1411d4:	e1a06c26 	lsr	r6, r6, #24
  1411d8:	e1866407 	orr	r6, r6, r7, lsl #8
  1411dc:	e1a07c27 	lsr	r7, r7, #24
  1411e0:	e1877408 	orr	r7, r7, r8, lsl #8
  1411e4:	e1a08c28 	lsr	r8, r8, #24
  1411e8:	e1888409 	orr	r8, r8, r9, lsl #8
  1411ec:	e1a09c29 	lsr	r9, r9, #24
  1411f0:	e189940a 	orr	r9, r9, sl, lsl #8
  1411f4:	e1a0ac2a 	lsr	sl, sl, #24
  1411f8:	e18aa40b 	orr	sl, sl, fp, lsl #8
  1411fc:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
  141200:	e1a03c2b 	lsr	r3, fp, #24
  141204:	2affffe9 	bcs	1411b0 <loop24+0x4>

00141208 <less_than_thirtytwo>:
  141208:	e26ec020 	rsb	ip, lr, #32
  14120c:	e2822020 	add	r2, r2, #32
  141210:	e3520004 	cmp	r2, #4
  141214:	3a000006 	bcc	141234 <partial_word_tail>
  141218:	e4915004 	ldr	r5, [r1], #4
  14121c:	e2422004 	sub	r2, r2, #4
  141220:	e1834e15 	orr	r4, r3, r5, lsl lr
  141224:	e1a03c35 	lsr	r3, r5, ip
  141228:	e4804004 	str	r4, [r0], #4
  14122c:	e3520004 	cmp	r2, #4
  141230:	2afffff8 	bcs	141218 <less_than_thirtytwo+0x10>

00141234 <partial_word_tail>:
  141234:	e1b05e0e 	lsls	r5, lr, #28
  141238:	44c03001 	strbmi	r3, [r0], #1
  14123c:	41a03423 	lsrmi	r3, r3, #8
  141240:	24c03001 	strbcs	r3, [r0], #1
  141244:	21a03423 	lsrcs	r3, r3, #8
  141248:	24c03001 	strbcs	r3, [r0], #1
  14124c:	e89d0fe0 	ldm	sp, {r5, r6, r7, r8, r9, sl, fp}

00141250 <copy_last_3_and_return>:
  141250:	e1b02f82 	lsls	r2, r2, #31
  141254:	44d12001 	ldrbmi	r2, [r1], #1
  141258:	24d13001 	ldrbcs	r3, [r1], #1
  14125c:	25d1c000 	ldrbcs	ip, [r1]
  141260:	44c02001 	strbmi	r2, [r0], #1
  141264:	24c03001 	strbcs	r3, [r0], #1
  141268:	25c0c000 	strbcs	ip, [r0]
  14126c:	e28dd01c 	add	sp, sp, #28
  141270:	e8bd4011 	pop	{r0, r4, lr}
  141274:	e12fff1e 	bx	lr

00141278 <memcmp>:
  141278:	e3520000 	cmp	r2, #0
  14127c:	0a00000c 	beq	1412b4 <memcmp+0x3c>
  141280:	e5d0c000 	ldrb	ip, [r0]
  141284:	e5d13000 	ldrb	r3, [r1]
  141288:	e153000c 	cmp	r3, ip
  14128c:	1a00000a 	bne	1412bc <memcmp+0x44>
  141290:	e2422001 	sub	r2, r2, #1
  141294:	e0812002 	add	r2, r1, r2
  141298:	ea000003 	b	1412ac <memcmp+0x34>
  14129c:	e5f0c001 	ldrb	ip, [r0, #1]!
  1412a0:	e5f13001 	ldrb	r3, [r1, #1]!
  1412a4:	e15c0003 	cmp	ip, r3
  1412a8:	1a000003 	bne	1412bc <memcmp+0x44>
  1412ac:	e1510002 	cmp	r1, r2
  1412b0:	1afffff9 	bne	14129c <memcmp+0x24>
  1412b4:	e3a00000 	mov	r0, #0
  1412b8:	e12fff1e 	bx	lr
  1412bc:	e04c0003 	sub	r0, ip, r3
  1412c0:	e12fff1e 	bx	lr

001412c4 <memmove>:
  1412c4:	e1500001 	cmp	r0, r1
  1412c8:	e92d4030 	push	{r4, r5, lr}
  1412cc:	e1a0e000 	mov	lr, r0
  1412d0:	0a000030 	beq	141398 <memmove+0xd4>
  1412d4:	e0414000 	sub	r4, r1, r0
  1412d8:	e0444002 	sub	r4, r4, r2
  1412dc:	e0625f82 	rsb	r5, r2, r2, lsl #31
  1412e0:	e1540085 	cmp	r4, r5, lsl #1
  1412e4:	e1a0c001 	mov	ip, r1
  1412e8:	e1a03002 	mov	r3, r2
  1412ec:	9a000054 	bls	141444 <memmove+0x180>
  1412f0:	e0212000 	eor	r2, r1, r0
  1412f4:	e1500001 	cmp	r0, r1
  1412f8:	e2022003 	and	r2, r2, #3
  1412fc:	2a000027 	bcs	1413a0 <memmove+0xdc>
  141300:	e3520000 	cmp	r2, #0
  141304:	1a00001a 	bne	141374 <memmove+0xb0>
  141308:	e3100003 	tst	r0, #3
  14130c:	0a000050 	beq	141454 <memmove+0x190>
  141310:	e3530000 	cmp	r3, #0
  141314:	11a02000 	movne	r2, r0
  141318:	e2433001 	sub	r3, r3, #1
  14131c:	1a000002 	bne	14132c <memmove+0x68>
  141320:	ea00001c 	b	141398 <memmove+0xd4>
  141324:	e2533001 	subs	r3, r3, #1
  141328:	3a00001a 	bcc	141398 <memmove+0xd4>
  14132c:	e4dc1001 	ldrb	r1, [ip], #1
  141330:	e4c21001 	strb	r1, [r2], #1
  141334:	e3120003 	tst	r2, #3
  141338:	1afffff9 	bne	141324 <memmove+0x60>
  14133c:	e3530003 	cmp	r3, #3
  141340:	9a00000c 	bls	141378 <memmove+0xb4>
  141344:	e2435004 	sub	r5, r3, #4
  141348:	e3c55003 	bic	r5, r5, #3
  14134c:	e2855004 	add	r5, r5, #4
  141350:	e0824005 	add	r4, r2, r5
  141354:	e24c1004 	sub	r1, ip, #4
  141358:	e5b10004 	ldr	r0, [r1, #4]!
  14135c:	e4820004 	str	r0, [r2], #4
  141360:	e1540002 	cmp	r4, r2
  141364:	1afffffb 	bne	141358 <memmove+0x94>
  141368:	e2033003 	and	r3, r3, #3
  14136c:	e08cc005 	add	ip, ip, r5
  141370:	ea000000 	b	141378 <memmove+0xb4>
  141374:	e1a02000 	mov	r2, r0
  141378:	e3530000 	cmp	r3, #0
  14137c:	12422001 	subne	r2, r2, #1
  141380:	108c3003 	addne	r3, ip, r3
  141384:	0a000003 	beq	141398 <memmove+0xd4>
  141388:	e4dc1001 	ldrb	r1, [ip], #1
  14138c:	e153000c 	cmp	r3, ip
  141390:	e5e21001 	strb	r1, [r2, #1]!
  141394:	1afffffb 	bne	141388 <memmove+0xc4>
  141398:	e1a0000e 	mov	r0, lr
  14139c:	e8bd8030 	pop	{r4, r5, pc}
  1413a0:	e3520000 	cmp	r2, #0
  1413a4:	1a00001c 	bne	14141c <memmove+0x158>
  1413a8:	e0801003 	add	r1, r0, r3
  1413ac:	e3110003 	tst	r1, #3
  1413b0:	0a000025 	beq	14144c <memmove+0x188>
  1413b4:	e3530000 	cmp	r3, #0
  1413b8:	e2432001 	sub	r2, r3, #1
  1413bc:	0afffff5 	beq	141398 <memmove+0xd4>
  1413c0:	e08c3003 	add	r3, ip, r3
  1413c4:	ea000001 	b	1413d0 <memmove+0x10c>
  1413c8:	e2522001 	subs	r2, r2, #1
  1413cc:	3afffff1 	bcc	141398 <memmove+0xd4>
  1413d0:	e5730001 	ldrb	r0, [r3, #-1]!
  1413d4:	e5610001 	strb	r0, [r1, #-1]!
  1413d8:	e3110003 	tst	r1, #3
  1413dc:	1afffff9 	bne	1413c8 <memmove+0x104>
  1413e0:	e3520003 	cmp	r2, #3
  1413e4:	91a03002 	movls	r3, r2
  1413e8:	9a00000b 	bls	14141c <memmove+0x158>
  1413ec:	e24c0004 	sub	r0, ip, #4
  1413f0:	e2423004 	sub	r3, r2, #4
  1413f4:	e3c33003 	bic	r3, r3, #3
  1413f8:	e0800002 	add	r0, r0, r2
  1413fc:	e0400003 	sub	r0, r0, r3
  141400:	e08e1002 	add	r1, lr, r2
  141404:	e08c3002 	add	r3, ip, r2
  141408:	e5334004 	ldr	r4, [r3, #-4]!
  14140c:	e1530000 	cmp	r3, r0
  141410:	e5214004 	str	r4, [r1, #-4]!
  141414:	1afffffb 	bne	141408 <memmove+0x144>
  141418:	e2023003 	and	r3, r2, #3
  14141c:	e3530000 	cmp	r3, #0
  141420:	108c2003 	addne	r2, ip, r3
  141424:	108e3003 	addne	r3, lr, r3
  141428:	0affffda 	beq	141398 <memmove+0xd4>
  14142c:	e5721001 	ldrb	r1, [r2, #-1]!
  141430:	e15c0002 	cmp	ip, r2
  141434:	e5631001 	strb	r1, [r3, #-1]!
  141438:	1afffffb 	bne	14142c <memmove+0x168>
  14143c:	e1a0000e 	mov	r0, lr
  141440:	e8bd8030 	pop	{r4, r5, pc}
  141444:	e8bd4030 	pop	{r4, r5, lr}
  141448:	eafffecb 	b	140f7c <memcpy>
  14144c:	e1a02003 	mov	r2, r3
  141450:	eaffffe2 	b	1413e0 <memmove+0x11c>
  141454:	e1a02000 	mov	r2, r0
  141458:	eaffffb7 	b	14133c <memmove+0x78>

0014145c <memset>:
  14145c:	e3520000 	cmp	r2, #0
  141460:	012fff1e 	bxeq	lr
  141464:	e1a03000 	mov	r3, r0
  141468:	e20110ff 	and	r1, r1, #255	; 0xff
  14146c:	e6c31002 	strb	r1, [r3], r2
  141470:	e3520002 	cmp	r2, #2
  141474:	e5431001 	strb	r1, [r3, #-1]
  141478:	912fff1e 	bxls	lr
  14147c:	e3520006 	cmp	r2, #6
  141480:	e5c01001 	strb	r1, [r0, #1]
  141484:	e5c01002 	strb	r1, [r0, #2]
  141488:	e5431002 	strb	r1, [r3, #-2]
  14148c:	e5431003 	strb	r1, [r3, #-3]
  141490:	912fff1e 	bxls	lr
  141494:	e3520008 	cmp	r2, #8
  141498:	e5c01003 	strb	r1, [r0, #3]
  14149c:	e5431004 	strb	r1, [r3, #-4]
  1414a0:	912fff1e 	bxls	lr
  1414a4:	e260c000 	rsb	ip, r0, #0
  1414a8:	e20cc003 	and	ip, ip, #3
  1414ac:	e042200c 	sub	r2, r2, ip
  1414b0:	e3c22003 	bic	r2, r2, #3
  1414b4:	e0811401 	add	r1, r1, r1, lsl #8
  1414b8:	e080300c 	add	r3, r0, ip
  1414bc:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  1414c0:	e0811801 	add	r1, r1, r1, lsl #16
  1414c4:	e3520008 	cmp	r2, #8
  1414c8:	e083e002 	add	lr, r3, r2
  1414cc:	e780100c 	str	r1, [r0, ip]
  1414d0:	e50e1004 	str	r1, [lr, #-4]
  1414d4:	98bd80f0 	popls	{r4, r5, r6, r7, pc}
  1414d8:	e3520018 	cmp	r2, #24
  1414dc:	e5831004 	str	r1, [r3, #4]
  1414e0:	e5831008 	str	r1, [r3, #8]
  1414e4:	e50e100c 	str	r1, [lr, #-12]
  1414e8:	e50e1008 	str	r1, [lr, #-8]
  1414ec:	98bd80f0 	popls	{r4, r5, r6, r7, pc}
  1414f0:	e3a04000 	mov	r4, #0
  1414f4:	e203c004 	and	ip, r3, #4
  1414f8:	e28cc018 	add	ip, ip, #24
  1414fc:	e042200c 	sub	r2, r2, ip
  141500:	e352001f 	cmp	r2, #31
  141504:	e583100c 	str	r1, [r3, #12]
  141508:	e5831010 	str	r1, [r3, #16]
  14150c:	e5831014 	str	r1, [r3, #20]
  141510:	e5831018 	str	r1, [r3, #24]
  141514:	e1a05001 	mov	r5, r1
  141518:	e50e101c 	str	r1, [lr, #-28]	; 0xffffffe4
  14151c:	e50e1018 	str	r1, [lr, #-24]	; 0xffffffe8
  141520:	e50e1014 	str	r1, [lr, #-20]	; 0xffffffec
  141524:	e50e1010 	str	r1, [lr, #-16]
  141528:	e1846001 	orr	r6, r4, r1
  14152c:	e1a07001 	mov	r7, r1
  141530:	e083100c 	add	r1, r3, ip
  141534:	98bd80f0 	popls	{r4, r5, r6, r7, pc}
  141538:	e2422020 	sub	r2, r2, #32
  14153c:	e3c2301f 	bic	r3, r2, #31
  141540:	e2812040 	add	r2, r1, #64	; 0x40
  141544:	e0833002 	add	r3, r3, r2
  141548:	e2812020 	add	r2, r1, #32
  14154c:	e5026020 	str	r6, [r2, #-32]	; 0xffffffe0
  141550:	e502701c 	str	r7, [r2, #-28]	; 0xffffffe4
  141554:	e5026018 	str	r6, [r2, #-24]	; 0xffffffe8
  141558:	e5027014 	str	r7, [r2, #-20]	; 0xffffffec
  14155c:	e5026010 	str	r6, [r2, #-16]
  141560:	e502700c 	str	r7, [r2, #-12]
  141564:	e90200c0 	stmdb	r2, {r6, r7}
  141568:	e2822020 	add	r2, r2, #32
  14156c:	e1520003 	cmp	r2, r3
  141570:	1afffff5 	bne	14154c <memset+0xf0>
  141574:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00141578 <strcasecmp>:
  141578:	e92d4070 	push	{r4, r5, r6, lr}
  14157c:	e1a05000 	mov	r5, r0
  141580:	e5d00000 	ldrb	r0, [r0]
  141584:	e1a04001 	mov	r4, r1
  141588:	e3500000 	cmp	r0, #0
  14158c:	1a00000c 	bne	1415c4 <strcasecmp+0x4c>
  141590:	ea00000e 	b	1415d0 <strcasecmp+0x58>
  141594:	e1500003 	cmp	r0, r3
  141598:	0a000005 	beq	1415b4 <strcasecmp+0x3c>
  14159c:	eb00067f 	bl	142fa0 <tolower>
  1415a0:	e1a06000 	mov	r6, r0
  1415a4:	e5d40000 	ldrb	r0, [r4]
  1415a8:	eb00067c 	bl	142fa0 <tolower>
  1415ac:	e1560000 	cmp	r6, r0
  1415b0:	1a00000c 	bne	1415e8 <strcasecmp+0x70>
  1415b4:	e5f50001 	ldrb	r0, [r5, #1]!
  1415b8:	e2844001 	add	r4, r4, #1
  1415bc:	e3500000 	cmp	r0, #0
  1415c0:	0a000002 	beq	1415d0 <strcasecmp+0x58>
  1415c4:	e5d43000 	ldrb	r3, [r4]
  1415c8:	e3530000 	cmp	r3, #0
  1415cc:	1afffff0 	bne	141594 <strcasecmp+0x1c>
  1415d0:	eb000672 	bl	142fa0 <tolower>
  1415d4:	e1a05000 	mov	r5, r0
  1415d8:	e5d40000 	ldrb	r0, [r4]
  1415dc:	eb00066f 	bl	142fa0 <tolower>
  1415e0:	e0450000 	sub	r0, r5, r0
  1415e4:	e8bd8070 	pop	{r4, r5, r6, pc}
  1415e8:	e5d50000 	ldrb	r0, [r5]
  1415ec:	eafffff7 	b	1415d0 <strcasecmp+0x58>

001415f0 <__strcasecmp_l>:
  1415f0:	eaffffe0 	b	141578 <strcasecmp>

001415f4 <strcat>:
  1415f4:	e92d4070 	push	{r4, r5, r6, lr}
  1415f8:	e1a04000 	mov	r4, r0
  1415fc:	e1a05001 	mov	r5, r1
  141600:	eb000026 	bl	1416a0 <strlen>
  141604:	e1a01005 	mov	r1, r5
  141608:	e0840000 	add	r0, r4, r0
  14160c:	eb000012 	bl	14165c <strcpy>
  141610:	e1a00004 	mov	r0, r4
  141614:	e8bd8070 	pop	{r4, r5, r6, pc}

00141618 <strcmp>:
  141618:	e5d02000 	ldrb	r2, [r0]
  14161c:	e5d13000 	ldrb	r3, [r1]
  141620:	e1530002 	cmp	r3, r2
  141624:	0a000004 	beq	14163c <strcmp+0x24>
  141628:	ea000009 	b	141654 <strcmp+0x3c>
  14162c:	e5f03001 	ldrb	r3, [r0, #1]!
  141630:	e5f12001 	ldrb	r2, [r1, #1]!
  141634:	e1530002 	cmp	r3, r2
  141638:	1a000003 	bne	14164c <strcmp+0x34>
  14163c:	e3530000 	cmp	r3, #0
  141640:	1afffff9 	bne	14162c <strcmp+0x14>
  141644:	e1a00003 	mov	r0, r3
  141648:	e12fff1e 	bx	lr
  14164c:	e0430002 	sub	r0, r3, r2
  141650:	e12fff1e 	bx	lr
  141654:	e0420003 	sub	r0, r2, r3
  141658:	e12fff1e 	bx	lr

0014165c <strcpy>:
  14165c:	e92d4010 	push	{r4, lr}
  141660:	e1a04000 	mov	r4, r0
  141664:	eb000a94 	bl	1440bc <__stpcpy>
  141668:	e1a00004 	mov	r0, r4
  14166c:	e8bd8010 	pop	{r4, pc}

00141670 <strdup>:
  141670:	e92d4070 	push	{r4, r5, r6, lr}
  141674:	e1a05000 	mov	r5, r0
  141678:	eb000008 	bl	1416a0 <strlen>
  14167c:	e2804001 	add	r4, r0, #1
  141680:	e1a00004 	mov	r0, r4
  141684:	ebffefab 	bl	13d538 <malloc>
  141688:	e3500000 	cmp	r0, #0
  14168c:	08bd8070 	popeq	{r4, r5, r6, pc}
  141690:	e1a02004 	mov	r2, r4
  141694:	e1a01005 	mov	r1, r5
  141698:	e8bd4070 	pop	{r4, r5, r6, lr}
  14169c:	eafffe36 	b	140f7c <memcpy>

001416a0 <strlen>:
  1416a0:	e3100003 	tst	r0, #3
  1416a4:	0a000023 	beq	141738 <strlen+0x98>
  1416a8:	e5d03000 	ldrb	r3, [r0]
  1416ac:	e3530000 	cmp	r3, #0
  1416b0:	12803001 	addne	r3, r0, #1
  1416b4:	1a000005 	bne	1416d0 <strlen+0x30>
  1416b8:	ea000020 	b	141740 <strlen+0xa0>
  1416bc:	e5d31000 	ldrb	r1, [r3]
  1416c0:	e283c001 	add	ip, r3, #1
  1416c4:	e3510000 	cmp	r1, #0
  1416c8:	0a000018 	beq	141730 <strlen+0x90>
  1416cc:	e1a0300c 	mov	r3, ip
  1416d0:	e3130003 	tst	r3, #3
  1416d4:	e1a02003 	mov	r2, r3
  1416d8:	1afffff7 	bne	1416bc <strlen+0x1c>
  1416dc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  1416e0:	e59fe060 	ldr	lr, [pc, #96]	; 141748 <strlen+0xa8>
  1416e4:	e592c000 	ldr	ip, [r2]
  1416e8:	e59f305c 	ldr	r3, [pc, #92]	; 14174c <strlen+0xac>
  1416ec:	e08c100e 	add	r1, ip, lr
  1416f0:	e1c1100c 	bic	r1, r1, ip
  1416f4:	e1110003 	tst	r1, r3
  1416f8:	1a000004 	bne	141710 <strlen+0x70>
  1416fc:	e5b2c004 	ldr	ip, [r2, #4]!
  141700:	e08c100e 	add	r1, ip, lr
  141704:	e1c1100c 	bic	r1, r1, ip
  141708:	e1110003 	tst	r1, r3
  14170c:	0afffffa 	beq	1416fc <strlen+0x5c>
  141710:	e5d23000 	ldrb	r3, [r2]
  141714:	e3530000 	cmp	r3, #0
  141718:	0a000002 	beq	141728 <strlen+0x88>
  14171c:	e5f23001 	ldrb	r3, [r2, #1]!
  141720:	e3530000 	cmp	r3, #0
  141724:	1afffffc 	bne	14171c <strlen+0x7c>
  141728:	e0420000 	sub	r0, r2, r0
  14172c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
  141730:	e0430000 	sub	r0, r3, r0
  141734:	e12fff1e 	bx	lr
  141738:	e1a02000 	mov	r2, r0
  14173c:	eaffffe6 	b	1416dc <strlen+0x3c>
  141740:	e1a00003 	mov	r0, r3
  141744:	e12fff1e 	bx	lr
  141748:	fefefeff 	.word	0xfefefeff
  14174c:	80808080 	.word	0x80808080

00141750 <strncmp>:
  141750:	e3520000 	cmp	r2, #0
  141754:	0a00001e 	beq	1417d4 <strncmp+0x84>
  141758:	e92d4010 	push	{r4, lr}
  14175c:	e5d04000 	ldrb	r4, [r0]
  141760:	e5d1c000 	ldrb	ip, [r1]
  141764:	e3540000 	cmp	r4, #0
  141768:	0a00001b 	beq	1417dc <strncmp+0x8c>
  14176c:	e3520001 	cmp	r2, #1
  141770:	135c0000 	cmpne	ip, #0
  141774:	13a03001 	movne	r3, #1
  141778:	03a03000 	moveq	r3, #0
  14177c:	e154000c 	cmp	r4, ip
  141780:	13a03000 	movne	r3, #0
  141784:	02033001 	andeq	r3, r3, #1
  141788:	e3530000 	cmp	r3, #0
  14178c:	e242e001 	sub	lr, r2, #1
  141790:	0a000011 	beq	1417dc <strncmp+0x8c>
  141794:	e5f02001 	ldrb	r2, [r0, #1]!
  141798:	e24ee001 	sub	lr, lr, #1
  14179c:	e3520000 	cmp	r2, #0
  1417a0:	e5f1c001 	ldrb	ip, [r1, #1]!
  1417a4:	0a000008 	beq	1417cc <strncmp+0x7c>
  1417a8:	e042300c 	sub	r3, r2, ip
  1417ac:	e16f3f13 	clz	r3, r3
  1417b0:	e35c0000 	cmp	ip, #0
  1417b4:	e1a032a3 	lsr	r3, r3, #5
  1417b8:	03a03000 	moveq	r3, #0
  1417bc:	e35e0000 	cmp	lr, #0
  1417c0:	03a03000 	moveq	r3, #0
  1417c4:	e3530000 	cmp	r3, #0
  1417c8:	1afffff1 	bne	141794 <strncmp+0x44>
  1417cc:	e042000c 	sub	r0, r2, ip
  1417d0:	e8bd8010 	pop	{r4, pc}
  1417d4:	e1a00002 	mov	r0, r2
  1417d8:	e12fff1e 	bx	lr
  1417dc:	e1a02004 	mov	r2, r4
  1417e0:	eafffff9 	b	1417cc <strncmp+0x7c>

001417e4 <strncpy>:
  1417e4:	e92d4010 	push	{r4, lr}
  1417e8:	e1a04000 	mov	r4, r0
  1417ec:	eb000a63 	bl	144180 <__stpncpy>
  1417f0:	e1a00004 	mov	r0, r4
  1417f4:	e8bd8010 	pop	{r4, pc}

001417f8 <strnlen>:
  1417f8:	e92d4070 	push	{r4, r5, r6, lr}
  1417fc:	e1a04001 	mov	r4, r1
  141800:	e3a01000 	mov	r1, #0
  141804:	e1a02004 	mov	r2, r4
  141808:	e1a05000 	mov	r5, r0
  14180c:	eb0009d4 	bl	143f64 <memchr>
  141810:	e3500000 	cmp	r0, #0
  141814:	10400005 	subne	r0, r0, r5
  141818:	01a00004 	moveq	r0, r4
  14181c:	e8bd8070 	pop	{r4, r5, r6, pc}

00141820 <twoway_strstr>:
  141820:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  141824:	e1a08001 	mov	r8, r1
  141828:	e24dde43 	sub	sp, sp, #1072	; 0x430
  14182c:	e24dd004 	sub	sp, sp, #4
  141830:	e1a09000 	mov	r9, r0
  141834:	e3a02020 	mov	r2, #32
  141838:	e3a01000 	mov	r1, #0
  14183c:	e28d0010 	add	r0, sp, #16
  141840:	ebffff05 	bl	14145c <memset>
  141844:	e5d83000 	ldrb	r3, [r8]
  141848:	e3530000 	cmp	r3, #0
  14184c:	0a0000c8 	beq	141b74 <twoway_strstr+0x354>
  141850:	e5d92000 	ldrb	r2, [r9]
  141854:	e3520000 	cmp	r2, #0
  141858:	11a0c008 	movne	ip, r8
  14185c:	11a0e009 	movne	lr, r9
  141860:	13a05000 	movne	r5, #0
  141864:	13a06001 	movne	r6, #1
  141868:	1a000003 	bne	14187c <twoway_strstr+0x5c>
  14186c:	ea000075 	b	141a48 <twoway_strstr+0x228>
  141870:	e5fe2001 	ldrb	r2, [lr, #1]!
  141874:	e3520000 	cmp	r2, #0
  141878:	0a000072 	beq	141a48 <twoway_strstr+0x228>
  14187c:	e28d1e43 	add	r1, sp, #1072	; 0x430
  141880:	e1a022a3 	lsr	r2, r3, #5
  141884:	e0812102 	add	r2, r1, r2, lsl #2
  141888:	e0810103 	add	r0, r1, r3, lsl #2
  14188c:	e203401f 	and	r4, r3, #31
  141890:	e5121420 	ldr	r1, [r2, #-1056]	; 0xfffffbe0
  141894:	e5fc3001 	ldrb	r3, [ip, #1]!
  141898:	e2855001 	add	r5, r5, #1
  14189c:	e1811416 	orr	r1, r1, r6, lsl r4
  1418a0:	e3530000 	cmp	r3, #0
  1418a4:	e5005400 	str	r5, [r0, #-1024]	; 0xfffffc00
  1418a8:	e5021420 	str	r1, [r2, #-1056]	; 0xfffffbe0
  1418ac:	1affffef 	bne	141870 <twoway_strstr+0x50>
  1418b0:	e3a00001 	mov	r0, #1
  1418b4:	e3e0c000 	mvn	ip, #0
  1418b8:	e1a01000 	mov	r1, r0
  1418bc:	e0832001 	add	r2, r3, r1
  1418c0:	e1550002 	cmp	r5, r2
  1418c4:	e088e00c 	add	lr, r8, ip
  1418c8:	9a00000b 	bls	1418fc <twoway_strstr+0xdc>
  1418cc:	e7de4001 	ldrb	r4, [lr, r1]
  1418d0:	e7d8e002 	ldrb	lr, [r8, r2]
  1418d4:	e154000e 	cmp	r4, lr
  1418d8:	0a00008f 	beq	141b1c <twoway_strstr+0x2fc>
  1418dc:	9a000096 	bls	141b3c <twoway_strstr+0x31c>
  1418e0:	e042000c 	sub	r0, r2, ip
  1418e4:	e1a03002 	mov	r3, r2
  1418e8:	e3a01001 	mov	r1, #1
  1418ec:	e0832001 	add	r2, r3, r1
  1418f0:	e1550002 	cmp	r5, r2
  1418f4:	e088e00c 	add	lr, r8, ip
  1418f8:	8afffff3 	bhi	1418cc <twoway_strstr+0xac>
  1418fc:	e3a06001 	mov	r6, #1
  141900:	e3a01000 	mov	r1, #0
  141904:	e1a02006 	mov	r2, r6
  141908:	e3e0a000 	mvn	sl, #0
  14190c:	e0813002 	add	r3, r1, r2
  141910:	e1550003 	cmp	r5, r3
  141914:	e088e002 	add	lr, r8, r2
  141918:	9a00000b 	bls	14194c <twoway_strstr+0x12c>
  14191c:	e7de400a 	ldrb	r4, [lr, sl]
  141920:	e7d8e003 	ldrb	lr, [r8, r3]
  141924:	e154000e 	cmp	r4, lr
  141928:	0a00007f 	beq	141b2c <twoway_strstr+0x30c>
  14192c:	2a000087 	bcs	141b50 <twoway_strstr+0x330>
  141930:	e043600a 	sub	r6, r3, sl
  141934:	e3a02001 	mov	r2, #1
  141938:	e1a01003 	mov	r1, r3
  14193c:	e0813002 	add	r3, r1, r2
  141940:	e1550003 	cmp	r5, r3
  141944:	e088e002 	add	lr, r8, r2
  141948:	8afffff3 	bhi	14191c <twoway_strstr+0xfc>
  14194c:	e58d6008 	str	r6, [sp, #8]
  141950:	e28a2001 	add	r2, sl, #1
  141954:	e28c3001 	add	r3, ip, #1
  141958:	e1520003 	cmp	r2, r3
  14195c:	91a0b003 	movls	fp, r3
  141960:	81a0b002 	movhi	fp, r2
  141964:	e59d3008 	ldr	r3, [sp, #8]
  141968:	91a03000 	movls	r3, r0
  14196c:	e1a0200b 	mov	r2, fp
  141970:	e0881003 	add	r1, r8, r3
  141974:	e1a00008 	mov	r0, r8
  141978:	91a0a00c 	movls	sl, ip
  14197c:	e58d3008 	str	r3, [sp, #8]
  141980:	ebfffe3c 	bl	141278 <memcmp>
  141984:	e3500000 	cmp	r0, #0
  141988:	0a000075 	beq	141b64 <twoway_strstr+0x344>
  14198c:	e2452001 	sub	r2, r5, #1
  141990:	e042200a 	sub	r2, r2, sl
  141994:	e152000a 	cmp	r2, sl
  141998:	e3a03000 	mov	r3, #0
  14199c:	31a0200a 	movcc	r2, sl
  1419a0:	e58d300c 	str	r3, [sp, #12]
  1419a4:	e2823001 	add	r3, r2, #1
  1419a8:	e58d3008 	str	r3, [sp, #8]
  1419ac:	e1a04009 	mov	r4, r9
  1419b0:	e3a06000 	mov	r6, #0
  1419b4:	e3a07001 	mov	r7, #1
  1419b8:	e385303f 	orr	r3, r5, #63	; 0x3f
  1419bc:	e58d3004 	str	r3, [sp, #4]
  1419c0:	e0493004 	sub	r3, r9, r4
  1419c4:	e1530005 	cmp	r3, r5
  1419c8:	3a000014 	bcc	141a20 <twoway_strstr+0x200>
  1419cc:	e0841005 	add	r1, r4, r5
  1419d0:	e5513001 	ldrb	r3, [r1, #-1]
  1419d4:	e28d0e43 	add	r0, sp, #1072	; 0x430
  1419d8:	e1a022a3 	lsr	r2, r3, #5
  1419dc:	e0802102 	add	r2, r0, r2, lsl #2
  1419e0:	e5122420 	ldr	r2, [r2, #-1056]	; 0xfffffbe0
  1419e4:	e203001f 	and	r0, r3, #31
  1419e8:	e0122017 	ands	r2, r2, r7, lsl r0
  1419ec:	0a000040 	beq	141af4 <twoway_strstr+0x2d4>
  1419f0:	e28d2e43 	add	r2, sp, #1072	; 0x430
  1419f4:	e0823103 	add	r3, r2, r3, lsl #2
  1419f8:	e5133400 	ldr	r3, [r3, #-1024]	; 0xfffffc00
  1419fc:	e0553003 	subs	r3, r5, r3
  141a00:	0a000015 	beq	141a5c <twoway_strstr+0x23c>
  141a04:	e1560003 	cmp	r6, r3
  141a08:	20844006 	addcs	r4, r4, r6
  141a0c:	30844003 	addcc	r4, r4, r3
  141a10:	e0493004 	sub	r3, r9, r4
  141a14:	e1530005 	cmp	r3, r5
  141a18:	e3a06000 	mov	r6, #0
  141a1c:	2affffea 	bcs	1419cc <twoway_strstr+0x1ac>
  141a20:	e59d2004 	ldr	r2, [sp, #4]
  141a24:	e3a01000 	mov	r1, #0
  141a28:	e1a00009 	mov	r0, r9
  141a2c:	eb00094c 	bl	143f64 <memchr>
  141a30:	e3500000 	cmp	r0, #0
  141a34:	0a000035 	beq	141b10 <twoway_strstr+0x2f0>
  141a38:	e0403004 	sub	r3, r0, r4
  141a3c:	e1530005 	cmp	r3, r5
  141a40:	21a09000 	movcs	r9, r0
  141a44:	2affffe0 	bcs	1419cc <twoway_strstr+0x1ac>
  141a48:	e3a04000 	mov	r4, #0
  141a4c:	e1a00004 	mov	r0, r4
  141a50:	e28dde43 	add	sp, sp, #1072	; 0x430
  141a54:	e28dd004 	add	sp, sp, #4
  141a58:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  141a5c:	e156000b 	cmp	r6, fp
  141a60:	21a03006 	movcs	r3, r6
  141a64:	31a0300b 	movcc	r3, fp
  141a68:	e7d82003 	ldrb	r2, [r8, r3]
  141a6c:	e0881003 	add	r1, r8, r3
  141a70:	e3520000 	cmp	r2, #0
  141a74:	0a00000b 	beq	141aa8 <twoway_strstr+0x288>
  141a78:	e7d4c003 	ldrb	ip, [r4, r3]
  141a7c:	e0840003 	add	r0, r4, r3
  141a80:	e15c0002 	cmp	ip, r2
  141a84:	0a000003 	beq	141a98 <twoway_strstr+0x278>
  141a88:	ea00001c 	b	141b00 <twoway_strstr+0x2e0>
  141a8c:	e5f0c001 	ldrb	ip, [r0, #1]!
  141a90:	e15c0002 	cmp	ip, r2
  141a94:	1a000019 	bne	141b00 <twoway_strstr+0x2e0>
  141a98:	e5f12001 	ldrb	r2, [r1, #1]!
  141a9c:	e2833001 	add	r3, r3, #1
  141aa0:	e3520000 	cmp	r2, #0
  141aa4:	1afffff8 	bne	141a8c <twoway_strstr+0x26c>
  141aa8:	e156000b 	cmp	r6, fp
  141aac:	2affffe6 	bcs	141a4c <twoway_strstr+0x22c>
  141ab0:	e7d8300a 	ldrb	r3, [r8, sl]
  141ab4:	e7d4100a 	ldrb	r1, [r4, sl]
  141ab8:	e088200a 	add	r2, r8, sl
  141abc:	e1510003 	cmp	r1, r3
  141ac0:	e084300a 	add	r3, r4, sl
  141ac4:	1a000006 	bne	141ae4 <twoway_strstr+0x2c4>
  141ac8:	e0431004 	sub	r1, r3, r4
  141acc:	e1560001 	cmp	r6, r1
  141ad0:	2affffdd 	bcs	141a4c <twoway_strstr+0x22c>
  141ad4:	e5720001 	ldrb	r0, [r2, #-1]!
  141ad8:	e5731001 	ldrb	r1, [r3, #-1]!
  141adc:	e1500001 	cmp	r0, r1
  141ae0:	0afffff8 	beq	141ac8 <twoway_strstr+0x2a8>
  141ae4:	e59d3008 	ldr	r3, [sp, #8]
  141ae8:	e59d600c 	ldr	r6, [sp, #12]
  141aec:	e0844003 	add	r4, r4, r3
  141af0:	eaffffb2 	b	1419c0 <twoway_strstr+0x1a0>
  141af4:	e1a04001 	mov	r4, r1
  141af8:	e1a06002 	mov	r6, r2
  141afc:	eaffffaf 	b	1419c0 <twoway_strstr+0x1a0>
  141b00:	e043300a 	sub	r3, r3, sl
  141b04:	e0844003 	add	r4, r4, r3
  141b08:	e3a06000 	mov	r6, #0
  141b0c:	eaffffab 	b	1419c0 <twoway_strstr+0x1a0>
  141b10:	e59d3004 	ldr	r3, [sp, #4]
  141b14:	e0899003 	add	r9, r9, r3
  141b18:	eaffffab 	b	1419cc <twoway_strstr+0x1ac>
  141b1c:	e1510000 	cmp	r1, r0
  141b20:	12811001 	addne	r1, r1, #1
  141b24:	1affff64 	bne	1418bc <twoway_strstr+0x9c>
  141b28:	eaffff6d 	b	1418e4 <twoway_strstr+0xc4>
  141b2c:	e1520006 	cmp	r2, r6
  141b30:	12822001 	addne	r2, r2, #1
  141b34:	1affff74 	bne	14190c <twoway_strstr+0xec>
  141b38:	eaffff7d 	b	141934 <twoway_strstr+0x114>
  141b3c:	e3a00001 	mov	r0, #1
  141b40:	e1a0c003 	mov	ip, r3
  141b44:	e1a01000 	mov	r1, r0
  141b48:	e0833000 	add	r3, r3, r0
  141b4c:	eaffff5a 	b	1418bc <twoway_strstr+0x9c>
  141b50:	e3a06001 	mov	r6, #1
  141b54:	e1a0a001 	mov	sl, r1
  141b58:	e1a02006 	mov	r2, r6
  141b5c:	e0811006 	add	r1, r1, r6
  141b60:	eaffff69 	b	14190c <twoway_strstr+0xec>
  141b64:	e59d3008 	ldr	r3, [sp, #8]
  141b68:	e0453003 	sub	r3, r5, r3
  141b6c:	e58d300c 	str	r3, [sp, #12]
  141b70:	eaffff8d 	b	1419ac <twoway_strstr+0x18c>
  141b74:	e3e0c000 	mvn	ip, #0
  141b78:	e3a00001 	mov	r0, #1
  141b7c:	e1a05003 	mov	r5, r3
  141b80:	e1a0a00c 	mov	sl, ip
  141b84:	e58d0008 	str	r0, [sp, #8]
  141b88:	eaffff70 	b	141950 <twoway_strstr+0x130>

00141b8c <strstr>:
  141b8c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  141b90:	e1a04001 	mov	r4, r1
  141b94:	e5d11000 	ldrb	r1, [r1]
  141b98:	e1a03000 	mov	r3, r0
  141b9c:	e3510000 	cmp	r1, #0
  141ba0:	1a000001 	bne	141bac <strstr+0x20>
  141ba4:	e1a00003 	mov	r0, r3
  141ba8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  141bac:	eb0009c5 	bl	1442c8 <strchr>
  141bb0:	e2503000 	subs	r3, r0, #0
  141bb4:	0afffffa 	beq	141ba4 <strstr+0x18>
  141bb8:	e5d41001 	ldrb	r1, [r4, #1]
  141bbc:	e3510000 	cmp	r1, #0
  141bc0:	0afffff7 	beq	141ba4 <strstr+0x18>
  141bc4:	e5d3c001 	ldrb	ip, [r3, #1]
  141bc8:	e35c0000 	cmp	ip, #0
  141bcc:	0a000051 	beq	141d18 <strstr+0x18c>
  141bd0:	e5d4e002 	ldrb	lr, [r4, #2]
  141bd4:	e35e0000 	cmp	lr, #0
  141bd8:	0a000029 	beq	141c84 <strstr+0xf8>
  141bdc:	e5d35002 	ldrb	r5, [r3, #2]
  141be0:	e3550000 	cmp	r5, #0
  141be4:	0a00004d 	beq	141d20 <strstr+0x194>
  141be8:	e5d47003 	ldrb	r7, [r4, #3]
  141bec:	e3570000 	cmp	r7, #0
  141bf0:	0a000032 	beq	141cc0 <strstr+0x134>
  141bf4:	e5d36003 	ldrb	r6, [r3, #3]
  141bf8:	e3560000 	cmp	r6, #0
  141bfc:	0a000049 	beq	141d28 <strstr+0x19c>
  141c00:	e5d42004 	ldrb	r2, [r4, #4]
  141c04:	e3520000 	cmp	r2, #0
  141c08:	0a000002 	beq	141c18 <strstr+0x8c>
  141c0c:	e1a01004 	mov	r1, r4
  141c10:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
  141c14:	eaffff01 	b	141820 <twoway_strstr>
  141c18:	e5d40000 	ldrb	r0, [r4]
  141c1c:	e4d32003 	ldrb	r2, [r3], #3
  141c20:	e1800401 	orr	r0, r0, r1, lsl #8
  141c24:	e182240c 	orr	r2, r2, ip, lsl #8
  141c28:	e180080e 	orr	r0, r0, lr, lsl #16
  141c2c:	e1822805 	orr	r2, r2, r5, lsl #16
  141c30:	e180ec07 	orr	lr, r0, r7, lsl #24
  141c34:	e1825c06 	orr	r5, r2, r6, lsl #24
  141c38:	e0252865 	eor	r2, r5, r5, ror #16
  141c3c:	e02e086e 	eor	r0, lr, lr, ror #16
  141c40:	e1a02422 	lsr	r2, r2, #8
  141c44:	e1a00420 	lsr	r0, r0, #8
  141c48:	e3c22cff 	bic	r2, r2, #65280	; 0xff00
  141c4c:	e3c00cff 	bic	r0, r0, #65280	; 0xff00
  141c50:	e0222465 	eor	r2, r2, r5, ror #8
  141c54:	e020046e 	eor	r0, r0, lr, ror #8
  141c58:	e1520000 	cmp	r2, r0
  141c5c:	1a000002 	bne	141c6c <strstr+0xe0>
  141c60:	ea000028 	b	141d08 <strstr+0x17c>
  141c64:	e1500002 	cmp	r0, r2
  141c68:	0a000026 	beq	141d08 <strstr+0x17c>
  141c6c:	e5f31001 	ldrb	r1, [r3, #1]!
  141c70:	e3510000 	cmp	r1, #0
  141c74:	e1812402 	orr	r2, r1, r2, lsl #8
  141c78:	1afffff9 	bne	141c64 <strstr+0xd8>
  141c7c:	e1a03001 	mov	r3, r1
  141c80:	eaffffc7 	b	141ba4 <strstr+0x18>
  141c84:	e5d40000 	ldrb	r0, [r4]
  141c88:	e4d32001 	ldrb	r2, [r3], #1
  141c8c:	e1811400 	orr	r1, r1, r0, lsl #8
  141c90:	e18c2402 	orr	r2, ip, r2, lsl #8
  141c94:	ea000005 	b	141cb0 <strstr+0x124>
  141c98:	e5f30001 	ldrb	r0, [r3, #1]!
  141c9c:	e1802402 	orr	r2, r0, r2, lsl #8
  141ca0:	e1a02802 	lsl	r2, r2, #16
  141ca4:	e3500000 	cmp	r0, #0
  141ca8:	e1a02822 	lsr	r2, r2, #16
  141cac:	0a000017 	beq	141d10 <strstr+0x184>
  141cb0:	e1510002 	cmp	r1, r2
  141cb4:	1afffff7 	bne	141c98 <strstr+0x10c>
  141cb8:	e2433001 	sub	r3, r3, #1
  141cbc:	eaffffb8 	b	141ba4 <strstr+0x18>
  141cc0:	e5d46000 	ldrb	r6, [r4]
  141cc4:	e4d34002 	ldrb	r4, [r3], #2
  141cc8:	e1a00801 	lsl	r0, r1, #16
  141ccc:	e1a0280c 	lsl	r2, ip, #16
  141cd0:	e1800c06 	orr	r0, r0, r6, lsl #24
  141cd4:	e1822c04 	orr	r2, r2, r4, lsl #24
  141cd8:	e180040e 	orr	r0, r0, lr, lsl #8
  141cdc:	e1822405 	orr	r2, r2, r5, lsl #8
  141ce0:	ea000004 	b	141cf8 <strstr+0x16c>
  141ce4:	e5f31001 	ldrb	r1, [r3, #1]!
  141ce8:	e1812002 	orr	r2, r1, r2
  141cec:	e3510000 	cmp	r1, #0
  141cf0:	e1a02402 	lsl	r2, r2, #8
  141cf4:	0affffe0 	beq	141c7c <strstr+0xf0>
  141cf8:	e1500002 	cmp	r0, r2
  141cfc:	1afffff8 	bne	141ce4 <strstr+0x158>
  141d00:	e2433002 	sub	r3, r3, #2
  141d04:	eaffffa6 	b	141ba4 <strstr+0x18>
  141d08:	e2433003 	sub	r3, r3, #3
  141d0c:	eaffffa4 	b	141ba4 <strstr+0x18>
  141d10:	e1a03000 	mov	r3, r0
  141d14:	eaffffa2 	b	141ba4 <strstr+0x18>
  141d18:	e1a0300c 	mov	r3, ip
  141d1c:	eaffffa0 	b	141ba4 <strstr+0x18>
  141d20:	e1a03005 	mov	r3, r5
  141d24:	eaffff9e 	b	141ba4 <strstr+0x18>
  141d28:	e1a03006 	mov	r3, r6
  141d2c:	eaffff9c 	b	141ba4 <strstr+0x18>

00141d30 <__lock>:
  141d30:	e59f3150 	ldr	r3, [pc, #336]	; 141e88 <__lock+0x158>
  141d34:	e593300c 	ldr	r3, [r3, #12]
  141d38:	e3530000 	cmp	r3, #0
  141d3c:	012fff1e 	bxeq	lr
  141d40:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  141d44:	e1a04000 	mov	r4, r0
  141d48:	e59f613c 	ldr	r6, [pc, #316]	; 141e8c <__lock+0x15c>
  141d4c:	e3a00000 	mov	r0, #0
  141d50:	e3a01106 	mov	r1, #-2147483647	; 0x80000001
  141d54:	e1a02004 	mov	r2, r4
  141d58:	e5963000 	ldr	r3, [r6]
  141d5c:	e12fff33 	blx	r3
  141d60:	e3500000 	cmp	r0, #0
  141d64:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  141d68:	e5945000 	ldr	r5, [r4]
  141d6c:	e3550000 	cmp	r5, #0
  141d70:	0afffff5 	beq	141d4c <__lock+0x1c>
  141d74:	e3a0800a 	mov	r8, #10
  141d78:	e3550000 	cmp	r5, #0
  141d7c:	b2455106 	sublt	r5, r5, #-2147483647	; 0x80000001
  141d80:	e2857106 	add	r7, r5, #-2147483647	; 0x80000001
  141d84:	e1a00005 	mov	r0, r5
  141d88:	e1a01007 	mov	r1, r7
  141d8c:	e1a02004 	mov	r2, r4
  141d90:	e5963000 	ldr	r3, [r6]
  141d94:	e12fff33 	blx	r3
  141d98:	e3500000 	cmp	r0, #0
  141d9c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  141da0:	e5943000 	ldr	r3, [r4]
  141da4:	e1550003 	cmp	r5, r3
  141da8:	0afffff5 	beq	141d84 <__lock+0x54>
  141dac:	e2588001 	subs	r8, r8, #1
  141db0:	e1a05003 	mov	r5, r3
  141db4:	1affffef 	bne	141d78 <__lock+0x48>
  141db8:	e5947000 	ldr	r7, [r4]
  141dbc:	e2875001 	add	r5, r7, #1
  141dc0:	ea000002 	b	141dd0 <__lock+0xa0>
  141dc4:	e5943000 	ldr	r3, [r4]
  141dc8:	e1570003 	cmp	r7, r3
  141dcc:	1afffff9 	bne	141db8 <__lock+0x88>
  141dd0:	e1a00007 	mov	r0, r7
  141dd4:	e1a01005 	mov	r1, r5
  141dd8:	e1a02004 	mov	r2, r4
  141ddc:	e5963000 	ldr	r3, [r6]
  141de0:	e12fff33 	blx	r3
  141de4:	e3500000 	cmp	r0, #0
  141de8:	1afffff5 	bne	141dc4 <__lock+0x94>
  141dec:	e3550000 	cmp	r5, #0
  141df0:	ba00000d 	blt	141e2c <__lock+0xfc>
  141df4:	e2857102 	add	r7, r5, #-2147483648	; 0x80000000
  141df8:	e1a00005 	mov	r0, r5
  141dfc:	e1a01007 	mov	r1, r7
  141e00:	e1a02004 	mov	r2, r4
  141e04:	e5963000 	ldr	r3, [r6]
  141e08:	e12fff33 	blx	r3
  141e0c:	e3500000 	cmp	r0, #0
  141e10:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  141e14:	e5943000 	ldr	r3, [r4]
  141e18:	e1550003 	cmp	r5, r3
  141e1c:	0afffff5 	beq	141df8 <__lock+0xc8>
  141e20:	e1a05003 	mov	r5, r3
  141e24:	e3550000 	cmp	r5, #0
  141e28:	aafffff1 	bge	141df4 <__lock+0xc4>
  141e2c:	e3a000f0 	mov	r0, #240	; 0xf0
  141e30:	ebffe9d8 	bl	13c598 <get_rtt_syscall>
  141e34:	e2507000 	subs	r7, r0, #0
  141e38:	0a000006 	beq	141e58 <__lock+0x128>
  141e3c:	e3a03000 	mov	r3, #0
  141e40:	e1a02005 	mov	r2, r5
  141e44:	e3a01080 	mov	r1, #128	; 0x80
  141e48:	e1a00004 	mov	r0, r4
  141e4c:	e12fff37 	blx	r7
  141e50:	e3700026 	cmn	r0, #38	; 0x26
  141e54:	0a000001 	beq	141e60 <__lock+0x130>
  141e58:	e2455106 	sub	r5, r5, #-2147483647	; 0x80000001
  141e5c:	eaffffe4 	b	141df4 <__lock+0xc4>
  141e60:	e3a000f0 	mov	r0, #240	; 0xf0
  141e64:	ebffe9cb 	bl	13c598 <get_rtt_syscall>
  141e68:	e2507000 	subs	r7, r0, #0
  141e6c:	0afffff9 	beq	141e58 <__lock+0x128>
  141e70:	e3a03000 	mov	r3, #0
  141e74:	e1a02005 	mov	r2, r5
  141e78:	e1a01003 	mov	r1, r3
  141e7c:	e1a00004 	mov	r0, r4
  141e80:	e12fff37 	blx	r7
  141e84:	eafffff3 	b	141e58 <__lock+0x128>
  141e88:	00576e84 	.word	0x00576e84
  141e8c:	0014e3d8 	.word	0x0014e3d8

00141e90 <__unlock>:
  141e90:	e5903000 	ldr	r3, [r0]
  141e94:	e3530000 	cmp	r3, #0
  141e98:	a12fff1e 	bxge	lr
  141e9c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  141ea0:	e1a05000 	mov	r5, r0
  141ea4:	e59f7084 	ldr	r7, [pc, #132]	; 141f30 <__unlock+0xa0>
  141ea8:	e5954000 	ldr	r4, [r5]
  141eac:	e2446106 	sub	r6, r4, #-2147483647	; 0x80000001
  141eb0:	ea000002 	b	141ec0 <__unlock+0x30>
  141eb4:	e5953000 	ldr	r3, [r5]
  141eb8:	e1540003 	cmp	r4, r3
  141ebc:	1afffff9 	bne	141ea8 <__unlock+0x18>
  141ec0:	e1a00004 	mov	r0, r4
  141ec4:	e1a01006 	mov	r1, r6
  141ec8:	e1a02005 	mov	r2, r5
  141ecc:	e5973000 	ldr	r3, [r7]
  141ed0:	e12fff33 	blx	r3
  141ed4:	e3500000 	cmp	r0, #0
  141ed8:	1afffff5 	bne	141eb4 <__unlock+0x24>
  141edc:	e3540106 	cmp	r4, #-2147483647	; 0x80000001
  141ee0:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  141ee4:	e3a000f0 	mov	r0, #240	; 0xf0
  141ee8:	ebffe9aa 	bl	13c598 <get_rtt_syscall>
  141eec:	e2503000 	subs	r3, r0, #0
  141ef0:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  141ef4:	e3a02001 	mov	r2, #1
  141ef8:	e3a01081 	mov	r1, #129	; 0x81
  141efc:	e1a00005 	mov	r0, r5
  141f00:	e12fff33 	blx	r3
  141f04:	e3700026 	cmn	r0, #38	; 0x26
  141f08:	18bd81f0 	popne	{r4, r5, r6, r7, r8, pc}
  141f0c:	e3a000f0 	mov	r0, #240	; 0xf0
  141f10:	ebffe9a0 	bl	13c598 <get_rtt_syscall>
  141f14:	e2503000 	subs	r3, r0, #0
  141f18:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  141f1c:	e3a02001 	mov	r2, #1
  141f20:	e1a00005 	mov	r0, r5
  141f24:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
  141f28:	e1a01002 	mov	r1, r2
  141f2c:	e12fff13 	bx	r3
  141f30:	0014e3d8 	.word	0x0014e3d8

00141f34 <__syscall_cp_c>:
  141f34:	eaffe9c1 	b	13c640 <__syscall>

00141f38 <__syscall_cp>:
  141f38:	eaffe9c0 	b	13c640 <__syscall>

00141f3c <__wait>:
  141f3c:	e3530000 	cmp	r3, #0
  141f40:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  141f44:	e3a03064 	mov	r3, #100	; 0x64
  141f48:	e1a04001 	mov	r4, r1
  141f4c:	e1a07000 	mov	r7, r0
  141f50:	e1a08002 	mov	r8, r2
  141f54:	13a09080 	movne	r9, #128	; 0x80
  141f58:	03a09000 	moveq	r9, #0
  141f5c:	e59f1120 	ldr	r1, [pc, #288]	; 142084 <__wait+0x148>
  141f60:	ea000006 	b	141f80 <__wait+0x44>
  141f64:	e5972000 	ldr	r2, [r7]
  141f68:	e1520008 	cmp	r2, r8
  141f6c:	18bd87f0 	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
  141f70:	e591c000 	ldr	ip, [r1]
  141f74:	e12fff3c 	blx	ip
  141f78:	e2533001 	subs	r3, r3, #1
  141f7c:	0a00003d 	beq	142078 <__wait+0x13c>
  141f80:	e3540000 	cmp	r4, #0
  141f84:	0afffff6 	beq	141f64 <__wait+0x28>
  141f88:	e5942000 	ldr	r2, [r4]
  141f8c:	e3520000 	cmp	r2, #0
  141f90:	0afffff3 	beq	141f64 <__wait+0x28>
  141f94:	e59f60ec 	ldr	r6, [pc, #236]	; 142088 <__wait+0x14c>
  141f98:	e5945000 	ldr	r5, [r4]
  141f9c:	e285a001 	add	sl, r5, #1
  141fa0:	ea000002 	b	141fb0 <__wait+0x74>
  141fa4:	e5943000 	ldr	r3, [r4]
  141fa8:	e1550003 	cmp	r5, r3
  141fac:	1afffff9 	bne	141f98 <__wait+0x5c>
  141fb0:	e1a00005 	mov	r0, r5
  141fb4:	e1a0100a 	mov	r1, sl
  141fb8:	e1a02004 	mov	r2, r4
  141fbc:	e5963000 	ldr	r3, [r6]
  141fc0:	e12fff33 	blx	r3
  141fc4:	e3500000 	cmp	r0, #0
  141fc8:	1afffff5 	bne	141fa4 <__wait+0x68>
  141fcc:	e5973000 	ldr	r3, [r7]
  141fd0:	e1530008 	cmp	r3, r8
  141fd4:	1a000006 	bne	141ff4 <__wait+0xb8>
  141fd8:	e3a000f0 	mov	r0, #240	; 0xf0
  141fdc:	ebffe96d 	bl	13c598 <get_rtt_syscall>
  141fe0:	e2505000 	subs	r5, r0, #0
  141fe4:	1a000012 	bne	142034 <__wait+0xf8>
  141fe8:	e5973000 	ldr	r3, [r7]
  141fec:	e1530008 	cmp	r3, r8
  141ff0:	0afffff8 	beq	141fd8 <__wait+0x9c>
  141ff4:	e3540000 	cmp	r4, #0
  141ff8:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
  141ffc:	e59f6084 	ldr	r6, [pc, #132]	; 142088 <__wait+0x14c>
  142000:	e5945000 	ldr	r5, [r4]
  142004:	e2457001 	sub	r7, r5, #1
  142008:	e1a00005 	mov	r0, r5
  14200c:	e1a01007 	mov	r1, r7
  142010:	e1a02004 	mov	r2, r4
  142014:	e5963000 	ldr	r3, [r6]
  142018:	e12fff33 	blx	r3
  14201c:	e3500000 	cmp	r0, #0
  142020:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
  142024:	e5943000 	ldr	r3, [r4]
  142028:	e1550003 	cmp	r5, r3
  14202c:	0afffff5 	beq	142008 <__wait+0xcc>
  142030:	eafffff2 	b	142000 <__wait+0xc4>
  142034:	e3a03000 	mov	r3, #0
  142038:	e1a02008 	mov	r2, r8
  14203c:	e1a01009 	mov	r1, r9
  142040:	e1a00007 	mov	r0, r7
  142044:	e12fff35 	blx	r5
  142048:	e3700026 	cmn	r0, #38	; 0x26
  14204c:	1affffe5 	bne	141fe8 <__wait+0xac>
  142050:	e3a000f0 	mov	r0, #240	; 0xf0
  142054:	ebffe94f 	bl	13c598 <get_rtt_syscall>
  142058:	e2505000 	subs	r5, r0, #0
  14205c:	0affffe1 	beq	141fe8 <__wait+0xac>
  142060:	e3a03000 	mov	r3, #0
  142064:	e1a02008 	mov	r2, r8
  142068:	e1a01003 	mov	r1, r3
  14206c:	e1a00007 	mov	r0, r7
  142070:	e12fff35 	blx	r5
  142074:	eaffffdb 	b	141fe8 <__wait+0xac>
  142078:	e3540000 	cmp	r4, #0
  14207c:	0affffd9 	beq	141fe8 <__wait+0xac>
  142080:	eaffffc3 	b	141f94 <__wait+0x58>
  142084:	0014e3d4 	.word	0x0014e3d4
  142088:	0014e3d8 	.word	0x0014e3d8

0014208c <__a_barrier_dummy>:
  14208c:	e12fff1e 	bx	lr

00142090 <__a_barrier_oldkuser>:
  142090:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
  142094:	e1a01000 	mov	r1, r0
  142098:	e1a0200d 	mov	r2, sp
  14209c:	e59fc080 	ldr	ip, [pc, #128]	; 142124 <__a_gettp_cp15+0x8>
  1420a0:	e1a0e00f 	mov	lr, pc
  1420a4:	e1a0f00c 	mov	pc, ip
  1420a8:	e8bd500f 	pop	{r0, r1, r2, r3, ip, lr}
  1420ac:	e12fff1e 	bx	lr

001420b0 <__a_barrier_v6>:
  1420b0:	ee070fba 	mcr	15, 0, r0, cr7, cr10, {5}
  1420b4:	e12fff1e 	bx	lr

001420b8 <__a_barrier_v7>:
  1420b8:	f57ff05b 	dmb	ish
  1420bc:	e12fff1e 	bx	lr

001420c0 <__a_cas_dummy>:
  1420c0:	e1a03000 	mov	r3, r0
  1420c4:	e5920000 	ldr	r0, [r2]
  1420c8:	e0530000 	subs	r0, r3, r0
  1420cc:	05821000 	streq	r1, [r2]
  1420d0:	e12fff1e 	bx	lr

001420d4 <__a_cas_v6>:
  1420d4:	e1a03000 	mov	r3, r0
  1420d8:	ee070fba 	mcr	15, 0, r0, cr7, cr10, {5}
  1420dc:	e1920f9f 	ldrex	r0, [r2]
  1420e0:	e0530000 	subs	r0, r3, r0
  1420e4:	01820f91 	strexeq	r0, r1, [r2]
  1420e8:	03300001 	teqeq	r0, #1
  1420ec:	0afffffa 	beq	1420dc <__a_cas_v6+0x8>
  1420f0:	ee070fba 	mcr	15, 0, r0, cr7, cr10, {5}
  1420f4:	e12fff1e 	bx	lr

001420f8 <__a_cas_v7>:
  1420f8:	e1a03000 	mov	r3, r0
  1420fc:	f57ff05b 	dmb	ish
  142100:	e1920f9f 	ldrex	r0, [r2]
  142104:	e0530000 	subs	r0, r3, r0
  142108:	01820f91 	strexeq	r0, r1, [r2]
  14210c:	03300001 	teqeq	r0, #1
  142110:	0afffffa 	beq	142100 <__a_cas_v7+0x8>
  142114:	f57ff05b 	dmb	ish
  142118:	e12fff1e 	bx	lr

0014211c <__a_gettp_cp15>:
  14211c:	ee1d0f70 	mrc	15, 0, r0, cr13, cr0, {3}
  142120:	e12fff1e 	bx	lr
  142124:	ffff0fc0 	.word	0xffff0fc0

00142128 <__wake.constprop.2>:
  142128:	e92d4070 	push	{r4, r5, r6, lr}
  14212c:	e3510000 	cmp	r1, #0
  142130:	e1a04000 	mov	r4, r0
  142134:	e3a000f0 	mov	r0, #240	; 0xf0
  142138:	03a05001 	moveq	r5, #1
  14213c:	13a05081 	movne	r5, #129	; 0x81
  142140:	ebffe914 	bl	13c598 <get_rtt_syscall>
  142144:	e2503000 	subs	r3, r0, #0
  142148:	08bd8070 	popeq	{r4, r5, r6, pc}
  14214c:	e1a01005 	mov	r1, r5
  142150:	e3a02001 	mov	r2, #1
  142154:	e1a00004 	mov	r0, r4
  142158:	e12fff33 	blx	r3
  14215c:	e3700026 	cmn	r0, #38	; 0x26
  142160:	18bd8070 	popne	{r4, r5, r6, pc}
  142164:	e3a000f0 	mov	r0, #240	; 0xf0
  142168:	ebffe90a 	bl	13c598 <get_rtt_syscall>
  14216c:	e2503000 	subs	r3, r0, #0
  142170:	08bd8070 	popeq	{r4, r5, r6, pc}
  142174:	e3a02001 	mov	r2, #1
  142178:	e1a00004 	mov	r0, r4
  14217c:	e8bd4070 	pop	{r4, r5, r6, lr}
  142180:	e1a01002 	mov	r1, r2
  142184:	e12fff13 	bx	r3

00142188 <__acquire_ptc>:
  142188:	e12fff1e 	bx	lr

0014218c <__tl_lock>:
  14218c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  142190:	e59f3070 	ldr	r3, [pc, #112]	; 142208 <__tl_lock+0x7c>
  142194:	e59f4070 	ldr	r4, [pc, #112]	; 14220c <__tl_lock+0x80>
  142198:	e5930000 	ldr	r0, [r3]
  14219c:	e5943000 	ldr	r3, [r4]
  1421a0:	e12fff30 	blx	r0
  1421a4:	e510505c 	ldr	r5, [r0, #-92]	; 0xffffffa4
  1421a8:	e1550003 	cmp	r5, r3
  1421ac:	0a000010 	beq	1421f4 <__tl_lock+0x68>
  1421b0:	e59f6058 	ldr	r6, [pc, #88]	; 142210 <__tl_lock+0x84>
  1421b4:	e59f7058 	ldr	r7, [pc, #88]	; 142214 <__tl_lock+0x88>
  1421b8:	e3a00000 	mov	r0, #0
  1421bc:	e1a01005 	mov	r1, r5
  1421c0:	e1a02004 	mov	r2, r4
  1421c4:	e5963000 	ldr	r3, [r6]
  1421c8:	e12fff33 	blx	r3
  1421cc:	e3500000 	cmp	r0, #0
  1421d0:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  1421d4:	e5942000 	ldr	r2, [r4]
  1421d8:	e3520000 	cmp	r2, #0
  1421dc:	0afffff5 	beq	1421b8 <__tl_lock+0x2c>
  1421e0:	e3a03000 	mov	r3, #0
  1421e4:	e1a01007 	mov	r1, r7
  1421e8:	e1a00004 	mov	r0, r4
  1421ec:	ebffff52 	bl	141f3c <__wait>
  1421f0:	eafffff0 	b	1421b8 <__tl_lock+0x2c>
  1421f4:	e59f201c 	ldr	r2, [pc, #28]	; 142218 <__tl_lock+0x8c>
  1421f8:	e5923000 	ldr	r3, [r2]
  1421fc:	e2833001 	add	r3, r3, #1
  142200:	e5823000 	str	r3, [r2]
  142204:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  142208:	0014e3dc 	.word	0x0014e3dc
  14220c:	00576ecc 	.word	0x00576ecc
  142210:	0014e3d8 	.word	0x0014e3d8
  142214:	00150474 	.word	0x00150474
  142218:	00150470 	.word	0x00150470

0014221c <__tl_unlock>:
  14221c:	e59f2090 	ldr	r2, [pc, #144]	; 1422b4 <__tl_unlock+0x98>
  142220:	e5923000 	ldr	r3, [r2]
  142224:	e3530000 	cmp	r3, #0
  142228:	1a00001e 	bne	1422a8 <__tl_unlock+0x8c>
  14222c:	e59f2084 	ldr	r2, [pc, #132]	; 1422b8 <__tl_unlock+0x9c>
  142230:	e92d4010 	push	{r4, lr}
  142234:	e592c000 	ldr	ip, [r2]
  142238:	e12fff3c 	blx	ip
  14223c:	e59f4078 	ldr	r4, [pc, #120]	; 1422bc <__tl_unlock+0xa0>
  142240:	e592c000 	ldr	ip, [r2]
  142244:	e5843000 	str	r3, [r4]
  142248:	e12fff3c 	blx	ip
  14224c:	e59f306c 	ldr	r3, [pc, #108]	; 1422c0 <__tl_unlock+0xa4>
  142250:	e5933000 	ldr	r3, [r3]
  142254:	e3530000 	cmp	r3, #0
  142258:	08bd8010 	popeq	{r4, pc}
  14225c:	e3a000f0 	mov	r0, #240	; 0xf0
  142260:	ebffe8cc 	bl	13c598 <get_rtt_syscall>
  142264:	e2503000 	subs	r3, r0, #0
  142268:	08bd8010 	popeq	{r4, pc}
  14226c:	e3a02001 	mov	r2, #1
  142270:	e1a00004 	mov	r0, r4
  142274:	e1a01002 	mov	r1, r2
  142278:	e12fff33 	blx	r3
  14227c:	e3700026 	cmn	r0, #38	; 0x26
  142280:	18bd8010 	popne	{r4, pc}
  142284:	e3a000f0 	mov	r0, #240	; 0xf0
  142288:	ebffe8c2 	bl	13c598 <get_rtt_syscall>
  14228c:	e2503000 	subs	r3, r0, #0
  142290:	08bd8010 	popeq	{r4, pc}
  142294:	e3a02001 	mov	r2, #1
  142298:	e1a00004 	mov	r0, r4
  14229c:	e8bd4010 	pop	{r4, lr}
  1422a0:	e1a01002 	mov	r1, r2
  1422a4:	e12fff13 	bx	r3
  1422a8:	e2433001 	sub	r3, r3, #1
  1422ac:	e5823000 	str	r3, [r2]
  1422b0:	e12fff1e 	bx	lr
  1422b4:	00150470 	.word	0x00150470
  1422b8:	0014e3d4 	.word	0x0014e3d4
  1422bc:	00576ecc 	.word	0x00576ecc
  1422c0:	00150474 	.word	0x00150474

001422c4 <__tl_sync>:
  1422c4:	e59f3084 	ldr	r3, [pc, #132]	; 142350 <__tl_sync+0x8c>
  1422c8:	e92d4070 	push	{r4, r5, r6, lr}
  1422cc:	e593c000 	ldr	ip, [r3]
  1422d0:	e12fff3c 	blx	ip
  1422d4:	e59f4078 	ldr	r4, [pc, #120]	; 142354 <__tl_sync+0x90>
  1422d8:	e5942000 	ldr	r2, [r4]
  1422dc:	e3520000 	cmp	r2, #0
  1422e0:	08bd8070 	popeq	{r4, r5, r6, pc}
  1422e4:	e59f506c 	ldr	r5, [pc, #108]	; 142358 <__tl_sync+0x94>
  1422e8:	e3a03000 	mov	r3, #0
  1422ec:	e1a01005 	mov	r1, r5
  1422f0:	e1a00004 	mov	r0, r4
  1422f4:	ebffff10 	bl	141f3c <__wait>
  1422f8:	e5953000 	ldr	r3, [r5]
  1422fc:	e3530000 	cmp	r3, #0
  142300:	08bd8070 	popeq	{r4, r5, r6, pc}
  142304:	e3a000f0 	mov	r0, #240	; 0xf0
  142308:	ebffe8a2 	bl	13c598 <get_rtt_syscall>
  14230c:	e2503000 	subs	r3, r0, #0
  142310:	08bd8070 	popeq	{r4, r5, r6, pc}
  142314:	e3a02001 	mov	r2, #1
  142318:	e1a00004 	mov	r0, r4
  14231c:	e1a01002 	mov	r1, r2
  142320:	e12fff33 	blx	r3
  142324:	e3700026 	cmn	r0, #38	; 0x26
  142328:	18bd8070 	popne	{r4, r5, r6, pc}
  14232c:	e3a000f0 	mov	r0, #240	; 0xf0
  142330:	ebffe898 	bl	13c598 <get_rtt_syscall>
  142334:	e2503000 	subs	r3, r0, #0
  142338:	08bd8070 	popeq	{r4, r5, r6, pc}
  14233c:	e3a02001 	mov	r2, #1
  142340:	e1a00004 	mov	r0, r4
  142344:	e8bd4070 	pop	{r4, r5, r6, lr}
  142348:	e1a01002 	mov	r1, r2
  14234c:	e12fff13 	bx	r3
  142350:	0014e3d4 	.word	0x0014e3d4
  142354:	00576ecc 	.word	0x00576ecc
  142358:	00150474 	.word	0x00150474

0014235c <__pthread_exit>:
  14235c:	e3a02000 	mov	r2, #0
  142360:	e1a0c000 	mov	ip, r0
  142364:	e3a01001 	mov	r1, #1
  142368:	e59f3224 	ldr	r3, [pc, #548]	; 142594 <__pthread_exit+0x238>
  14236c:	e92d4880 	push	{r7, fp, lr}
  142370:	e5930000 	ldr	r0, [r3]
  142374:	e12fff30 	blx	r0
  142378:	e2404078 	sub	r4, r0, #120	; 0x78
  14237c:	e5943048 	ldr	r3, [r4, #72]	; 0x48
  142380:	e5c4102c 	strb	r1, [r4, #44]	; 0x2c
  142384:	e1530002 	cmp	r3, r2
  142388:	e24dd08c 	sub	sp, sp, #140	; 0x8c
  14238c:	e584c044 	str	ip, [r4, #68]	; 0x44
  142390:	e5c4202d 	strb	r2, [r4, #45]	; 0x2d
  142394:	0a000006 	beq	1423b4 <__pthread_exit+0x58>
  142398:	e9930005 	ldmib	r3, {r0, r2}
  14239c:	e5933000 	ldr	r3, [r3]
  1423a0:	e5842048 	str	r2, [r4, #72]	; 0x48
  1423a4:	e12fff33 	blx	r3
  1423a8:	e5943048 	ldr	r3, [r4, #72]	; 0x48
  1423ac:	e3530000 	cmp	r3, #0
  1423b0:	1afffff8 	bne	142398 <__pthread_exit+0x3c>
  1423b4:	e2849064 	add	r9, r4, #100	; 0x64
  1423b8:	ebffff72 	bl	142188 <__acquire_ptc>
  1423bc:	e1a00009 	mov	r0, r9
  1423c0:	ebfffe5a 	bl	141d30 <__lock>
  1423c4:	e28d0008 	add	r0, sp, #8
  1423c8:	eb0004a6 	bl	143668 <__block_app_sigs>
  1423cc:	ebffff6e 	bl	14218c <__tl_lock>
  1423d0:	e594300c 	ldr	r3, [r4, #12]
  1423d4:	e1530004 	cmp	r3, r4
  1423d8:	0a000041 	beq	1424e4 <__pthread_exit+0x188>
  1423dc:	e59f11b4 	ldr	r1, [pc, #436]	; 142598 <__pthread_exit+0x23c>
  1423e0:	e5940008 	ldr	r0, [r4, #8]
  1423e4:	e591200c 	ldr	r2, [r1, #12]
  1423e8:	e59f81ac 	ldr	r8, [pc, #428]	; 14259c <__pthread_exit+0x240>
  1423ec:	e2422001 	sub	r2, r2, #1
  1423f0:	e581200c 	str	r2, [r1, #12]
  1423f4:	e5830008 	str	r0, [r3, #8]
  1423f8:	e5942008 	ldr	r2, [r4, #8]
  1423fc:	e582300c 	str	r3, [r2, #12]
  142400:	e584400c 	str	r4, [r4, #12]
  142404:	e5844008 	str	r4, [r4, #8]
  142408:	eb00028a 	bl	142e38 <__vm_lock>
  14240c:	e2843050 	add	r3, r4, #80	; 0x50
  142410:	e58d3004 	str	r3, [sp, #4]
  142414:	e5946050 	ldr	r6, [r4, #80]	; 0x50
  142418:	e3560000 	cmp	r6, #0
  14241c:	0a000020 	beq	1424a4 <__pthread_exit+0x148>
  142420:	e59d3004 	ldr	r3, [sp, #4]
  142424:	e1560003 	cmp	r6, r3
  142428:	0a00001d 	beq	1424a4 <__pthread_exit+0x148>
  14242c:	e1a07006 	mov	r7, r6
  142430:	e516b008 	ldr	fp, [r6, #-8]
  142434:	e516a010 	ldr	sl, [r6, #-16]
  142438:	e5846058 	str	r6, [r4, #88]	; 0x58
  14243c:	e417300c 	ldr	r3, [r7], #-12
  142440:	e5843050 	str	r3, [r4, #80]	; 0x50
  142444:	e516500c 	ldr	r5, [r6, #-12]
  142448:	ea000002 	b	142458 <__pthread_exit+0xfc>
  14244c:	e516300c 	ldr	r3, [r6, #-12]
  142450:	e1550003 	cmp	r5, r3
  142454:	1afffffa 	bne	142444 <__pthread_exit+0xe8>
  142458:	e1a00005 	mov	r0, r5
  14245c:	e3a01101 	mov	r1, #1073741824	; 0x40000000
  142460:	e1a02007 	mov	r2, r7
  142464:	e5983000 	ldr	r3, [r8]
  142468:	e12fff33 	blx	r3
  14246c:	e3500000 	cmp	r0, #0
  142470:	1afffff5 	bne	14244c <__pthread_exit+0xf0>
  142474:	e29bb000 	adds	fp, fp, #0
  142478:	13a0b001 	movne	fp, #1
  14247c:	e19b3fa5 	orrs	r3, fp, r5, lsr #31
  142480:	e5840058 	str	r0, [r4, #88]	; 0x58
  142484:	0affffe2 	beq	142414 <__pthread_exit+0xb8>
  142488:	e1e0100a 	mvn	r1, sl
  14248c:	e1a00007 	mov	r0, r7
  142490:	e2011080 	and	r1, r1, #128	; 0x80
  142494:	ebffff23 	bl	142128 <__wake.constprop.2>
  142498:	e5946050 	ldr	r6, [r4, #80]	; 0x50
  14249c:	e3560000 	cmp	r6, #0
  1424a0:	1affffde 	bne	142420 <__pthread_exit+0xc4>
  1424a4:	eb000276 	bl	142e84 <__vm_unlock>
  1424a8:	e2845024 	add	r5, r4, #36	; 0x24
  1424ac:	ebffff35 	bl	142188 <__acquire_ptc>
  1424b0:	ebffff34 	bl	142188 <__acquire_ptc>
  1424b4:	ea000002 	b	1424c4 <__pthread_exit+0x168>
  1424b8:	e5943024 	ldr	r3, [r4, #36]	; 0x24
  1424bc:	e3530001 	cmp	r3, #1
  1424c0:	1a00000e 	bne	142500 <__pthread_exit+0x1a4>
  1424c4:	e3a00001 	mov	r0, #1
  1424c8:	e3a01000 	mov	r1, #0
  1424cc:	e1a02005 	mov	r2, r5
  1424d0:	e5983000 	ldr	r3, [r8]
  1424d4:	e12fff33 	blx	r3
  1424d8:	e1500001 	cmp	r0, r1
  1424dc:	1afffff5 	bne	1424b8 <__pthread_exit+0x15c>
  1424e0:	ea000008 	b	142508 <__pthread_exit+0x1ac>
  1424e4:	ebffff4c 	bl	14221c <__tl_unlock>
  1424e8:	e28d0008 	add	r0, sp, #8
  1424ec:	eb00046b 	bl	1436a0 <__restore_sigs>
  1424f0:	e1a00009 	mov	r0, r9
  1424f4:	ebfffe65 	bl	141e90 <__unlock>
  1424f8:	e3a00000 	mov	r0, #0
  1424fc:	ebffdb37 	bl	1391e0 <exit>
  142500:	e3530002 	cmp	r3, #2
  142504:	0a00000d 	beq	142540 <__pthread_exit+0x1e4>
  142508:	e1a00005 	mov	r0, r5
  14250c:	e3a01001 	mov	r1, #1
  142510:	ebffff04 	bl	142128 <__wake.constprop.2>
  142514:	e3a03000 	mov	r3, #0
  142518:	e1a00009 	mov	r0, r9
  14251c:	e584301c 	str	r3, [r4, #28]
  142520:	ebfffe5a 	bl	141e90 <__unlock>
  142524:	e3a00001 	mov	r0, #1
  142528:	ebffe81a 	bl	13c598 <get_rtt_syscall>
  14252c:	e2503000 	subs	r3, r0, #0
  142530:	0afffffb 	beq	142524 <__pthread_exit+0x1c8>
  142534:	e3a00000 	mov	r0, #0
  142538:	e12fff33 	blx	r3
  14253c:	eafffff8 	b	142524 <__pthread_exit+0x1c8>
  142540:	e5943030 	ldr	r3, [r4, #48]	; 0x30
  142544:	e1530001 	cmp	r3, r1
  142548:	0affffee 	beq	142508 <__pthread_exit+0x1ac>
  14254c:	e28d0008 	add	r0, sp, #8
  142550:	eb000436 	bl	143630 <__block_all_sigs>
  142554:	e5943054 	ldr	r3, [r4, #84]	; 0x54
  142558:	e3530000 	cmp	r3, #0
  14255c:	1a000004 	bne	142574 <__pthread_exit+0x218>
  142560:	eb000225 	bl	142dfc <__vm_wait>
  142564:	e5941034 	ldr	r1, [r4, #52]	; 0x34
  142568:	e5940030 	ldr	r0, [r4, #48]	; 0x30
  14256c:	eb0007ec 	bl	144524 <__unmapself>
  142570:	eaffffe4 	b	142508 <__pthread_exit+0x1ac>
  142574:	e59f0024 	ldr	r0, [pc, #36]	; 1425a0 <__pthread_exit+0x244>
  142578:	ebffe806 	bl	13c598 <get_rtt_syscall>
  14257c:	e2503000 	subs	r3, r0, #0
  142580:	0afffff6 	beq	142560 <__pthread_exit+0x204>
  142584:	e3a0100c 	mov	r1, #12
  142588:	e3a00000 	mov	r0, #0
  14258c:	e12fff33 	blx	r3
  142590:	eafffff2 	b	142560 <__pthread_exit+0x204>
  142594:	0014e3dc 	.word	0x0014e3dc
  142598:	00576e84 	.word	0x00576e84
  14259c:	0014e3d8 	.word	0x0014e3d8
  1425a0:	00000152 	.word	0x00000152

001425a4 <start>:
  1425a4:	e5902008 	ldr	r2, [r0, #8]
  1425a8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  1425ac:	e3520000 	cmp	r2, #0
  1425b0:	e1a08000 	mov	r8, r0
  1425b4:	0a000022 	beq	142644 <start+0xa0>
  1425b8:	e59f30d8 	ldr	r3, [pc, #216]	; 142698 <start+0xf4>
  1425bc:	e5926014 	ldr	r6, [r2, #20]
  1425c0:	e5930000 	ldr	r0, [r3]
  1425c4:	e12fff30 	blx	r0
  1425c8:	e2409078 	sub	r9, r0, #120	; 0x78
  1425cc:	e3a0009c 	mov	r0, #156	; 0x9c
  1425d0:	e599501c 	ldr	r5, [r9, #28]
  1425d4:	e2824018 	add	r4, r2, #24
  1425d8:	ebffe7ee 	bl	13c598 <get_rtt_syscall>
  1425dc:	e250a000 	subs	sl, r0, #0
  1425e0:	0a000004 	beq	1425f8 <start+0x54>
  1425e4:	e1a02004 	mov	r2, r4
  1425e8:	e1a01006 	mov	r1, r6
  1425ec:	e1a00005 	mov	r0, r5
  1425f0:	e12fff3a 	blx	sl
  1425f4:	e1a0a000 	mov	sl, r0
  1425f8:	e598500c 	ldr	r5, [r8, #12]
  1425fc:	e59f7098 	ldr	r7, [pc, #152]	; 14269c <start+0xf8>
  142600:	e26a6000 	rsb	r6, sl, #0
  142604:	e5954000 	ldr	r4, [r5]
  142608:	ea000002 	b	142618 <start+0x74>
  14260c:	e5953000 	ldr	r3, [r5]
  142610:	e1540003 	cmp	r4, r3
  142614:	1afffffa 	bne	142604 <start+0x60>
  142618:	e1a00004 	mov	r0, r4
  14261c:	e1a01006 	mov	r1, r6
  142620:	e1a02005 	mov	r2, r5
  142624:	e5973000 	ldr	r3, [r7]
  142628:	e12fff33 	blx	r3
  14262c:	e3500000 	cmp	r0, #0
  142630:	1afffff5 	bne	14260c <start+0x68>
  142634:	e3740002 	cmn	r4, #2
  142638:	0a000012 	beq	142688 <start+0xe4>
  14263c:	e35a0000 	cmp	sl, #0
  142640:	1a00000c 	bne	142678 <start+0xd4>
  142644:	e3a000af 	mov	r0, #175	; 0xaf
  142648:	ebffe7d2 	bl	13c598 <get_rtt_syscall>
  14264c:	e2504000 	subs	r4, r0, #0
  142650:	e2881010 	add	r1, r8, #16
  142654:	0a000003 	beq	142668 <start+0xc4>
  142658:	e3a03008 	mov	r3, #8
  14265c:	e3a02000 	mov	r2, #0
  142660:	e3a00002 	mov	r0, #2
  142664:	e12fff34 	blx	r4
  142668:	e5983000 	ldr	r3, [r8]
  14266c:	e5980004 	ldr	r0, [r8, #4]
  142670:	e12fff33 	blx	r3
  142674:	ebffff38 	bl	14235c <__pthread_exit>
  142678:	e3a03002 	mov	r3, #2
  14267c:	e3a00000 	mov	r0, #0
  142680:	e5893024 	str	r3, [r9, #36]	; 0x24
  142684:	ebffff34 	bl	14235c <__pthread_exit>
  142688:	e3a01001 	mov	r1, #1
  14268c:	e598000c 	ldr	r0, [r8, #12]
  142690:	ebfffea4 	bl	142128 <__wake.constprop.2>
  142694:	eaffffe8 	b	14263c <start+0x98>
  142698:	0014e3dc 	.word	0x0014e3dc
  14269c:	0014e3d8 	.word	0x0014e3d8

001426a0 <start_c11>:
  1426a0:	e5903000 	ldr	r3, [r0]
  1426a4:	e92d4010 	push	{r4, lr}
  1426a8:	e5900004 	ldr	r0, [r0, #4]
  1426ac:	e12fff33 	blx	r3
  1426b0:	ebffff29 	bl	14235c <__pthread_exit>

001426b4 <__do_cleanup_push>:
  1426b4:	e1a03000 	mov	r3, r0
  1426b8:	e59f2018 	ldr	r2, [pc, #24]	; 1426d8 <__do_cleanup_push+0x24>
  1426bc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  1426c0:	e5920000 	ldr	r0, [r2]
  1426c4:	e12fff30 	blx	r0
  1426c8:	e5102030 	ldr	r2, [r0, #-48]	; 0xffffffd0
  1426cc:	e5832008 	str	r2, [r3, #8]
  1426d0:	e5003030 	str	r3, [r0, #-48]	; 0xffffffd0
  1426d4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
  1426d8:	0014e3dc 	.word	0x0014e3dc

001426dc <__do_cleanup_pop>:
  1426dc:	e5903008 	ldr	r3, [r0, #8]
  1426e0:	e59f2010 	ldr	r2, [pc, #16]	; 1426f8 <__do_cleanup_pop+0x1c>
  1426e4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  1426e8:	e5920000 	ldr	r0, [r2]
  1426ec:	e12fff30 	blx	r0
  1426f0:	e5003030 	str	r3, [r0, #-48]	; 0xffffffd0
  1426f4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
  1426f8:	0014e3dc 	.word	0x0014e3dc

001426fc <__pthread_create>:
  1426fc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
  142700:	e24dd0dc 	sub	sp, sp, #220	; 0xdc
  142704:	e58d001c 	str	r0, [sp, #28]
  142708:	e58d2014 	str	r2, [sp, #20]
  14270c:	e1a09001 	mov	r9, r1
  142710:	e28d0034 	add	r0, sp, #52	; 0x34
  142714:	e3a02024 	mov	r2, #36	; 0x24
  142718:	e3a01000 	mov	r1, #0
  14271c:	e58d3018 	str	r3, [sp, #24]
  142720:	ebfffb4d 	bl	14145c <memset>
  142724:	e3e03000 	mvn	r3, #0
  142728:	e59f656c 	ldr	r6, [pc, #1388]	; 142c9c <__pthread_create+0x5a0>
  14272c:	e58d3028 	str	r3, [sp, #40]	; 0x28
  142730:	e5963000 	ldr	r3, [r6]
  142734:	e3530000 	cmp	r3, #0
  142738:	03a00026 	moveq	r0, #38	; 0x26
  14273c:	0a0000a3 	beq	1429d0 <__pthread_create+0x2d4>
  142740:	e59f3558 	ldr	r3, [pc, #1368]	; 142ca0 <__pthread_create+0x5a4>
  142744:	e5964004 	ldr	r4, [r6, #4]
  142748:	e5930000 	ldr	r0, [r3]
  14274c:	e12fff30 	blx	r0
  142750:	e3540000 	cmp	r4, #0
  142754:	e240a078 	sub	sl, r0, #120	; 0x78
  142758:	0a0000da 	beq	142ac8 <__pthread_create+0x3cc>
  14275c:	e2493001 	sub	r3, r9, #1
  142760:	e3730003 	cmn	r3, #3
  142764:	9a00009b 	bls	1429d8 <__pthread_create+0x2dc>
  142768:	ebfffe86 	bl	142188 <__acquire_ptc>
  14276c:	e59f2530 	ldr	r2, [pc, #1328]	; 142ca4 <__pthread_create+0x5a8>
  142770:	e59f3530 	ldr	r3, [pc, #1328]	; 142ca8 <__pthread_create+0x5ac>
  142774:	e5927000 	ldr	r7, [r2]
  142778:	e59d203c 	ldr	r2, [sp, #60]	; 0x3c
  14277c:	e5933000 	ldr	r3, [r3]
  142780:	e3520000 	cmp	r2, #0
  142784:	e58d7034 	str	r7, [sp, #52]	; 0x34
  142788:	e58d3038 	str	r3, [sp, #56]	; 0x38
  14278c:	e5960018 	ldr	r0, [r6, #24]
  142790:	0a00009e 	beq	142a10 <__pthread_create+0x314>
  142794:	e59f4510 	ldr	r4, [pc, #1296]	; 142cac <__pthread_create+0x5b0>
  142798:	e1a031a7 	lsr	r3, r7, #3
  14279c:	e5941000 	ldr	r1, [r4]
  1427a0:	e3c2500f 	bic	r5, r2, #15
  1427a4:	e0811000 	add	r1, r1, r0
  1427a8:	e3510b02 	cmp	r1, #2048	; 0x800
  1427ac:	23a0c000 	movcs	ip, #0
  1427b0:	33a0c001 	movcc	ip, #1
  1427b4:	e1530001 	cmp	r3, r1
  1427b8:	93a0c000 	movls	ip, #0
  1427bc:	e0423007 	sub	r3, r2, r7
  1427c0:	e35c0000 	cmp	ip, #0
  1427c4:	e58d3020 	str	r3, [sp, #32]
  1427c8:	1a000111 	bne	142c14 <__pthread_create+0x518>
  1427cc:	e2817eff 	add	r7, r1, #4080	; 0xff0
  1427d0:	e287700f 	add	r7, r7, #15
  1427d4:	e3c77eff 	bic	r7, r7, #4080	; 0xff0
  1427d8:	e3c7700f 	bic	r7, r7, #15
  1427dc:	e3a00000 	mov	r0, #0
  1427e0:	e3a01000 	mov	r1, #0
  1427e4:	e3e03000 	mvn	r3, #0
  1427e8:	e58d0008 	str	r0, [sp, #8]
  1427ec:	e58d100c 	str	r1, [sp, #12]
  1427f0:	e58d3000 	str	r3, [sp]
  1427f4:	e3a02003 	mov	r2, #3
  1427f8:	e3a03022 	mov	r3, #34	; 0x22
  1427fc:	e1a01007 	mov	r1, r7
  142800:	ebffeda8 	bl	13dea8 <__mmap>
  142804:	e3700001 	cmn	r0, #1
  142808:	e1a0b000 	mov	fp, r0
  14280c:	0a0000ed 	beq	142bc8 <__pthread_create+0x4cc>
  142810:	e5943000 	ldr	r3, [r4]
  142814:	e5960018 	ldr	r0, [r6, #24]
  142818:	e0473003 	sub	r3, r7, r3
  14281c:	e08b3003 	add	r3, fp, r3
  142820:	e3550000 	cmp	r5, #0
  142824:	e58d3024 	str	r3, [sp, #36]	; 0x24
  142828:	e2600000 	rsb	r0, r0, #0
  14282c:	0a000108 	beq	142c54 <__pthread_create+0x558>
  142830:	e3a08000 	mov	r8, #0
  142834:	e0830000 	add	r0, r3, r0
  142838:	eb000202 	bl	143048 <__copy_tls>
  14283c:	e1a04000 	mov	r4, r0
  142840:	e59d3040 	ldr	r3, [sp, #64]	; 0x40
  142844:	e5805038 	str	r5, [r0, #56]	; 0x38
  142848:	e3530000 	cmp	r3, #0
  14284c:	e59f345c 	ldr	r3, [pc, #1116]	; 142cb0 <__pthread_create+0x5b4>
  142850:	e5808040 	str	r8, [r0, #64]	; 0x40
  142854:	e580b030 	str	fp, [r0, #48]	; 0x30
  142858:	e5807034 	str	r7, [r0, #52]	; 0x34
  14285c:	e5840000 	str	r0, [r4]
  142860:	e5803060 	str	r3, [r0, #96]	; 0x60
  142864:	13a03002 	movne	r3, #2
  142868:	03a03001 	moveq	r3, #1
  14286c:	e59d2020 	ldr	r2, [sp, #32]
  142870:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
  142874:	e0452002 	sub	r2, r5, r2
  142878:	e5803024 	str	r3, [r0, #36]	; 0x24
  14287c:	e580203c 	str	r2, [r0, #60]	; 0x3c
  142880:	e59a2014 	ldr	r2, [sl, #20]
  142884:	e59d3044 	ldr	r3, [sp, #68]	; 0x44
  142888:	e5802014 	str	r2, [r0, #20]
  14288c:	e2802050 	add	r2, r0, #80	; 0x50
  142890:	e5802050 	str	r2, [r0, #80]	; 0x50
  142894:	e59d2014 	ldr	r2, [sp, #20]
  142898:	e3c55003 	bic	r5, r5, #3
  14289c:	e580104c 	str	r1, [r0, #76]	; 0x4c
  1428a0:	e5052018 	str	r2, [r5, #-24]	; 0xffffffe8
  1428a4:	e59d2018 	ldr	r2, [sp, #24]
  1428a8:	e3530000 	cmp	r3, #0
  1428ac:	128d3028 	addne	r3, sp, #40	; 0x28
  1428b0:	e5052014 	str	r2, [r5, #-20]	; 0xffffffec
  1428b4:	128d2034 	addne	r2, sp, #52	; 0x34
  1428b8:	15052010 	strne	r2, [r5, #-16]
  1428bc:	05053010 	streq	r3, [r5, #-16]
  1428c0:	e505300c 	str	r3, [r5, #-12]
  1428c4:	e28d0058 	add	r0, sp, #88	; 0x58
  1428c8:	eb000366 	bl	143668 <__block_app_sigs>
  1428cc:	e28d1058 	add	r1, sp, #88	; 0x58
  1428d0:	e3a02008 	mov	r2, #8
  1428d4:	e2450008 	sub	r0, r5, #8
  1428d8:	ebfff9a7 	bl	140f7c <memcpy>
  1428dc:	e5153004 	ldr	r3, [r5, #-4]
  1428e0:	e2458018 	sub	r8, r5, #24
  1428e4:	e3c33001 	bic	r3, r3, #1
  1428e8:	e5053004 	str	r3, [r5, #-4]
  1428ec:	ebfffe26 	bl	14218c <__tl_lock>
  1428f0:	e59f33bc 	ldr	r3, [pc, #956]	; 142cb4 <__pthread_create+0x5b8>
  1428f4:	e596c00c 	ldr	ip, [r6, #12]
  1428f8:	e3790001 	cmn	r9, #1
  1428fc:	e59f13b4 	ldr	r1, [pc, #948]	; 142cb8 <__pthread_create+0x5bc>
  142900:	e59f03b4 	ldr	r0, [pc, #948]	; 142cbc <__pthread_create+0x5c0>
  142904:	e2842078 	add	r2, r4, #120	; 0x78
  142908:	01a00003 	moveq	r0, r3
  14290c:	e284301c 	add	r3, r4, #28
  142910:	e28cc001 	add	ip, ip, #1
  142914:	e58d1008 	str	r1, [sp, #8]
  142918:	e58d2004 	str	r2, [sp, #4]
  14291c:	e58d3000 	str	r3, [sp]
  142920:	e1a01008 	mov	r1, r8
  142924:	e1a03008 	mov	r3, r8
  142928:	e59f2390 	ldr	r2, [pc, #912]	; 142cc0 <__pthread_create+0x5c4>
  14292c:	e586c00c 	str	ip, [r6, #12]
  142930:	eb0006ff 	bl	144534 <__clone>
  142934:	e3500000 	cmp	r0, #0
  142938:	ba0000a5 	blt	142bd4 <__pthread_create+0x4d8>
  14293c:	e59a300c 	ldr	r3, [sl, #12]
  142940:	e584a008 	str	sl, [r4, #8]
  142944:	e584300c 	str	r3, [r4, #12]
  142948:	e5834008 	str	r4, [r3, #8]
  14294c:	e5943008 	ldr	r3, [r4, #8]
  142950:	e583400c 	str	r4, [r3, #12]
  142954:	ebfffe30 	bl	14221c <__tl_unlock>
  142958:	e28d0058 	add	r0, sp, #88	; 0x58
  14295c:	eb00034f 	bl	1436a0 <__restore_sigs>
  142960:	ebfffe08 	bl	142188 <__acquire_ptc>
  142964:	e59d3044 	ldr	r3, [sp, #68]	; 0x44
  142968:	e3530000 	cmp	r3, #0
  14296c:	0a000014 	beq	1429c4 <__pthread_create+0x2c8>
  142970:	e59f534c 	ldr	r5, [pc, #844]	; 142cc4 <__pthread_create+0x5c8>
  142974:	ea000002 	b	142984 <__pthread_create+0x288>
  142978:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
  14297c:	e3730001 	cmn	r3, #1
  142980:	1a00000c 	bne	1429b8 <__pthread_create+0x2bc>
  142984:	e3e00000 	mvn	r0, #0
  142988:	e3e01001 	mvn	r1, #1
  14298c:	e28d2028 	add	r2, sp, #40	; 0x28
  142990:	e5953000 	ldr	r3, [r5]
  142994:	e12fff33 	blx	r3
  142998:	e3500000 	cmp	r0, #0
  14299c:	1afffff5 	bne	142978 <__pthread_create+0x27c>
  1429a0:	e1a03000 	mov	r3, r0
  1429a4:	e1a02001 	mov	r2, r1
  1429a8:	e28d0028 	add	r0, sp, #40	; 0x28
  1429ac:	e1a01003 	mov	r1, r3
  1429b0:	e3a03001 	mov	r3, #1
  1429b4:	ebfffd60 	bl	141f3c <__wait>
  1429b8:	e59d0028 	ldr	r0, [sp, #40]	; 0x28
  1429bc:	e3500000 	cmp	r0, #0
  1429c0:	1a000002 	bne	1429d0 <__pthread_create+0x2d4>
  1429c4:	e3a00000 	mov	r0, #0
  1429c8:	e59d301c 	ldr	r3, [sp, #28]
  1429cc:	e5834000 	str	r4, [r3]
  1429d0:	e28dd0dc 	add	sp, sp, #220	; 0xdc
  1429d4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  1429d8:	e1a0e009 	mov	lr, r9
  1429dc:	e28dc034 	add	ip, sp, #52	; 0x34
  1429e0:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
  1429e4:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
  1429e8:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
  1429ec:	e8ac000f 	stmia	ip!, {r0, r1, r2, r3}
  1429f0:	e59e3000 	ldr	r3, [lr]
  1429f4:	e58c3000 	str	r3, [ip]
  1429f8:	ebfffde2 	bl	142188 <__acquire_ptc>
  1429fc:	e59d203c 	ldr	r2, [sp, #60]	; 0x3c
  142a00:	e59d7034 	ldr	r7, [sp, #52]	; 0x34
  142a04:	e3520000 	cmp	r2, #0
  142a08:	e5960018 	ldr	r0, [r6, #24]
  142a0c:	1affff60 	bne	142794 <__pthread_create+0x98>
  142a10:	e59f5294 	ldr	r5, [pc, #660]	; 142cac <__pthread_create+0x5b0>
  142a14:	e3a01000 	mov	r1, #0
  142a18:	e5953000 	ldr	r3, [r5]
  142a1c:	e59d8038 	ldr	r8, [sp, #56]	; 0x38
  142a20:	e0833000 	add	r3, r3, r0
  142a24:	e2833eff 	add	r3, r3, #4080	; 0xff0
  142a28:	e283300f 	add	r3, r3, #15
  142a2c:	e0837007 	add	r7, r3, r7
  142a30:	e3a00000 	mov	r0, #0
  142a34:	e3e03000 	mvn	r3, #0
  142a38:	e59f4288 	ldr	r4, [pc, #648]	; 142cc8 <__pthread_create+0x5cc>
  142a3c:	e2888eff 	add	r8, r8, #4080	; 0xff0
  142a40:	e288800f 	add	r8, r8, #15
  142a44:	e0088004 	and	r8, r8, r4
  142a48:	e3580000 	cmp	r8, #0
  142a4c:	e0044007 	and	r4, r4, r7
  142a50:	e58d3000 	str	r3, [sp]
  142a54:	e58d0008 	str	r0, [sp, #8]
  142a58:	e58d100c 	str	r1, [sp, #12]
  142a5c:	e3a03022 	mov	r3, #34	; 0x22
  142a60:	e0847008 	add	r7, r4, r8
  142a64:	0a00007d 	beq	142c60 <__pthread_create+0x564>
  142a68:	e1a00002 	mov	r0, r2
  142a6c:	e1a01007 	mov	r1, r7
  142a70:	ebffed0c 	bl	13dea8 <__mmap>
  142a74:	e3700001 	cmn	r0, #1
  142a78:	e1a0b000 	mov	fp, r0
  142a7c:	0a000051 	beq	142bc8 <__pthread_create+0x4cc>
  142a80:	e0803008 	add	r3, r0, r8
  142a84:	e1a01004 	mov	r1, r4
  142a88:	e1a00003 	mov	r0, r3
  142a8c:	e3a02003 	mov	r2, #3
  142a90:	e58d3020 	str	r3, [sp, #32]
  142a94:	eb0002cb 	bl	1435c8 <__mprotect>
  142a98:	e3500000 	cmp	r0, #0
  142a9c:	1a000042 	bne	142bac <__pthread_create+0x4b0>
  142aa0:	e5953000 	ldr	r3, [r5]
  142aa4:	e5960018 	ldr	r0, [r6, #24]
  142aa8:	e0473003 	sub	r3, r7, r3
  142aac:	e08b3003 	add	r3, fp, r3
  142ab0:	e58d3024 	str	r3, [sp, #36]	; 0x24
  142ab4:	e2600000 	rsb	r0, r0, #0
  142ab8:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
  142abc:	e0835000 	add	r5, r3, r0
  142ac0:	e1a00005 	mov	r0, r5
  142ac4:	eaffff5b 	b	142838 <__pthread_create+0x13c>
  142ac8:	ebffeee1 	bl	13e654 <__ofl_lock>
  142acc:	e5903000 	ldr	r3, [r0]
  142ad0:	e3530000 	cmp	r3, #0
  142ad4:	0a000005 	beq	142af0 <__pthread_create+0x3f4>
  142ad8:	e593204c 	ldr	r2, [r3, #76]	; 0x4c
  142adc:	e3520000 	cmp	r2, #0
  142ae0:	b583404c 	strlt	r4, [r3, #76]	; 0x4c
  142ae4:	e5933038 	ldr	r3, [r3, #56]	; 0x38
  142ae8:	e3530000 	cmp	r3, #0
  142aec:	1afffff9 	bne	142ad8 <__pthread_create+0x3dc>
  142af0:	ebffeede 	bl	13e670 <__ofl_unlock>
  142af4:	e59f31d0 	ldr	r3, [pc, #464]	; 142ccc <__pthread_create+0x5d0>
  142af8:	e5933000 	ldr	r3, [r3]
  142afc:	e3530000 	cmp	r3, #0
  142b00:	0a000003 	beq	142b14 <__pthread_create+0x418>
  142b04:	e593204c 	ldr	r2, [r3, #76]	; 0x4c
  142b08:	e3520000 	cmp	r2, #0
  142b0c:	b3a02000 	movlt	r2, #0
  142b10:	b583204c 	strlt	r2, [r3, #76]	; 0x4c
  142b14:	e59f31b4 	ldr	r3, [pc, #436]	; 142cd0 <__pthread_create+0x5d4>
  142b18:	e5933000 	ldr	r3, [r3]
  142b1c:	e3530000 	cmp	r3, #0
  142b20:	0a000003 	beq	142b34 <__pthread_create+0x438>
  142b24:	e593204c 	ldr	r2, [r3, #76]	; 0x4c
  142b28:	e3520000 	cmp	r2, #0
  142b2c:	b3a02000 	movlt	r2, #0
  142b30:	b583204c 	strlt	r2, [r3, #76]	; 0x4c
  142b34:	e59f3198 	ldr	r3, [pc, #408]	; 142cd4 <__pthread_create+0x5d8>
  142b38:	e5933000 	ldr	r3, [r3]
  142b3c:	e3530000 	cmp	r3, #0
  142b40:	0a000003 	beq	142b54 <__pthread_create+0x458>
  142b44:	e593204c 	ldr	r2, [r3, #76]	; 0x4c
  142b48:	e3520000 	cmp	r2, #0
  142b4c:	b3a02000 	movlt	r2, #0
  142b50:	b583204c 	strlt	r2, [r3, #76]	; 0x4c
  142b54:	e3a03003 	mov	r3, #3
  142b58:	e3a04000 	mov	r4, #0
  142b5c:	e3a000af 	mov	r0, #175	; 0xaf
  142b60:	e58d402c 	str	r4, [sp, #44]	; 0x2c
  142b64:	e58d3030 	str	r3, [sp, #48]	; 0x30
  142b68:	ebffe68a 	bl	13c598 <get_rtt_syscall>
  142b6c:	e2505000 	subs	r5, r0, #0
  142b70:	0a000004 	beq	142b88 <__pthread_create+0x48c>
  142b74:	e1a02004 	mov	r2, r4
  142b78:	e28d102c 	add	r1, sp, #44	; 0x2c
  142b7c:	e3a03008 	mov	r3, #8
  142b80:	e3a00001 	mov	r0, #1
  142b84:	e12fff35 	blx	r5
  142b88:	e59f3148 	ldr	r3, [pc, #328]	; 142cd8 <__pthread_create+0x5dc>
  142b8c:	e58a304c 	str	r3, [sl, #76]	; 0x4c
  142b90:	ebfffd7c 	bl	142188 <__acquire_ptc>
  142b94:	e3a03001 	mov	r3, #1
  142b98:	e5863004 	str	r3, [r6, #4]
  142b9c:	e2493001 	sub	r3, r9, #1
  142ba0:	e3730003 	cmn	r3, #3
  142ba4:	8afffeef 	bhi	142768 <__pthread_create+0x6c>
  142ba8:	eaffff8a 	b	1429d8 <__pthread_create+0x2dc>
  142bac:	ebffd943 	bl	1390c0 <__errno_location>
  142bb0:	e5903000 	ldr	r3, [r0]
  142bb4:	e3530026 	cmp	r3, #38	; 0x26
  142bb8:	0affffb8 	beq	142aa0 <__pthread_create+0x3a4>
  142bbc:	e1a01007 	mov	r1, r7
  142bc0:	e1a0000b 	mov	r0, fp
  142bc4:	ebffed1d 	bl	13e040 <__munmap>
  142bc8:	ebfffd6e 	bl	142188 <__acquire_ptc>
  142bcc:	e3a0000b 	mov	r0, #11
  142bd0:	eaffff7e 	b	1429d0 <__pthread_create+0x2d4>
  142bd4:	ebfffd90 	bl	14221c <__tl_unlock>
  142bd8:	e28d0058 	add	r0, sp, #88	; 0x58
  142bdc:	eb0002af 	bl	1436a0 <__restore_sigs>
  142be0:	ebfffd68 	bl	142188 <__acquire_ptc>
  142be4:	e596300c 	ldr	r3, [r6, #12]
  142be8:	e35b0000 	cmp	fp, #0
  142bec:	e2433001 	sub	r3, r3, #1
  142bf0:	e586300c 	str	r3, [r6, #12]
  142bf4:	03a0000b 	moveq	r0, #11
  142bf8:	0affff74 	beq	1429d0 <__pthread_create+0x2d4>
  142bfc:	e1a01007 	mov	r1, r7
  142c00:	e1a0000b 	mov	r0, fp
  142c04:	ebffed0d 	bl	13e040 <__munmap>
  142c08:	e3a0000b 	mov	r0, #11
  142c0c:	e28dd0dc 	add	sp, sp, #220	; 0xdc
  142c10:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
  142c14:	e5943000 	ldr	r3, [r4]
  142c18:	e1a02001 	mov	r2, r1
  142c1c:	e0458003 	sub	r8, r5, r3
  142c20:	e0485000 	sub	r5, r8, r0
  142c24:	e1a00005 	mov	r0, r5
  142c28:	e3a01000 	mov	r1, #0
  142c2c:	e58d8024 	str	r8, [sp, #36]	; 0x24
  142c30:	ebfffa09 	bl	14145c <memset>
  142c34:	e3580000 	cmp	r8, #0
  142c38:	e1a03008 	mov	r3, r8
  142c3c:	0afffee6 	beq	1427dc <__pthread_create+0xe0>
  142c40:	e3a08000 	mov	r8, #0
  142c44:	e5960018 	ldr	r0, [r6, #24]
  142c48:	e1a0b008 	mov	fp, r8
  142c4c:	e0430000 	sub	r0, r3, r0
  142c50:	eafffef8 	b	142838 <__pthread_create+0x13c>
  142c54:	e1a08005 	mov	r8, r5
  142c58:	e58db020 	str	fp, [sp, #32]
  142c5c:	eaffff95 	b	142ab8 <__pthread_create+0x3bc>
  142c60:	e3a02003 	mov	r2, #3
  142c64:	e1a01007 	mov	r1, r7
  142c68:	e1a00008 	mov	r0, r8
  142c6c:	ebffec8d 	bl	13dea8 <__mmap>
  142c70:	e3700001 	cmn	r0, #1
  142c74:	e1a0b000 	mov	fp, r0
  142c78:	0affffd2 	beq	142bc8 <__pthread_create+0x4cc>
  142c7c:	e5953000 	ldr	r3, [r5]
  142c80:	e5960018 	ldr	r0, [r6, #24]
  142c84:	e0473003 	sub	r3, r7, r3
  142c88:	e08b3003 	add	r3, fp, r3
  142c8c:	e58d3024 	str	r3, [sp, #36]	; 0x24
  142c90:	e2600000 	rsb	r0, r0, #0
  142c94:	e58db020 	str	fp, [sp, #32]
  142c98:	eaffff86 	b	142ab8 <__pthread_create+0x3bc>
  142c9c:	00576e84 	.word	0x00576e84
  142ca0:	0014e3dc 	.word	0x0014e3dc
  142ca4:	0014e3e4 	.word	0x0014e3e4
  142ca8:	0014e3e0 	.word	0x0014e3e0
  142cac:	00150464 	.word	0x00150464
  142cb0:	00576eac 	.word	0x00576eac
  142cb4:	001426a0 	.word	0x001426a0
  142cb8:	00576ecc 	.word	0x00576ecc
  142cbc:	001425a4 	.word	0x001425a4
  142cc0:	007d0f00 	.word	0x007d0f00
  142cc4:	0014e3d8 	.word	0x0014e3d8
  142cc8:	fffff000 	.word	0xfffff000
  142ccc:	00150468 	.word	0x00150468
  142cd0:	0014e3d0 	.word	0x0014e3d0
  142cd4:	0014e338 	.word	0x0014e338
  142cd8:	0015046c 	.word	0x0015046c

00142cdc <__get_thread_map>:
  142cdc:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  142ce0:	e2504000 	subs	r4, r0, #0
  142ce4:	e24dd014 	sub	sp, sp, #20
  142ce8:	0a000002 	beq	142cf8 <__get_thread_map+0x1c>
  142cec:	e2840078 	add	r0, r4, #120	; 0x78
  142cf0:	e28dd014 	add	sp, sp, #20
  142cf4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  142cf8:	e3a06000 	mov	r6, #0
  142cfc:	e3a07000 	mov	r7, #0
  142d00:	e3e03000 	mvn	r3, #0
  142d04:	e58d6008 	str	r6, [sp, #8]
  142d08:	e58d700c 	str	r7, [sp, #12]
  142d0c:	e59f5074 	ldr	r5, [pc, #116]	; 142d88 <__get_thread_map+0xac>
  142d10:	e3a02003 	mov	r2, #3
  142d14:	e5951018 	ldr	r1, [r5, #24]
  142d18:	e58d3000 	str	r3, [sp]
  142d1c:	e3510000 	cmp	r1, #0
  142d20:	03a01078 	moveq	r1, #120	; 0x78
  142d24:	e3a03022 	mov	r3, #34	; 0x22
  142d28:	ebffec5e 	bl	13dea8 <__mmap>
  142d2c:	e2504000 	subs	r4, r0, #0
  142d30:	0a000012 	beq	142d80 <__get_thread_map+0xa4>
  142d34:	e59f3050 	ldr	r3, [pc, #80]	; 142d8c <__get_thread_map+0xb0>
  142d38:	e2855028 	add	r5, r5, #40	; 0x28
  142d3c:	e5932000 	ldr	r2, [r3]
  142d40:	e2843050 	add	r3, r4, #80	; 0x50
  142d44:	e5845060 	str	r5, [r4, #96]	; 0x60
  142d48:	e5844000 	str	r4, [r4]
  142d4c:	e5844008 	str	r4, [r4, #8]
  142d50:	e584400c 	str	r4, [r4, #12]
  142d54:	e5842014 	str	r2, [r4, #20]
  142d58:	e5843050 	str	r3, [r4, #80]	; 0x50
  142d5c:	e3a000e0 	mov	r0, #224	; 0xe0
  142d60:	ebffe60c 	bl	13c598 <get_rtt_syscall>
  142d64:	e3500000 	cmp	r0, #0
  142d68:	0a000000 	beq	142d70 <__get_thread_map+0x94>
  142d6c:	e12fff30 	blx	r0
  142d70:	e3a03000 	mov	r3, #0
  142d74:	e584001c 	str	r0, [r4, #28]
  142d78:	e5843020 	str	r3, [r4, #32]
  142d7c:	eaffffda 	b	142cec <__get_thread_map+0x10>
  142d80:	e1a00004 	mov	r0, r4
  142d84:	eaffffd9 	b	142cf0 <__get_thread_map+0x14>
  142d88:	00576e84 	.word	0x00576e84
  142d8c:	00576ed0 	.word	0x00576ed0

00142d90 <__put_thread_map>:
  142d90:	e3500000 	cmp	r0, #0
  142d94:	012fff1e 	bxeq	lr
  142d98:	e59f3010 	ldr	r3, [pc, #16]	; 142db0 <__put_thread_map+0x20>
  142d9c:	e2400078 	sub	r0, r0, #120	; 0x78
  142da0:	e5931018 	ldr	r1, [r3, #24]
  142da4:	e3510000 	cmp	r1, #0
  142da8:	03a01078 	moveq	r1, #120	; 0x78
  142dac:	eaffeca3 	b	13e040 <__munmap>
  142db0:	00576e84 	.word	0x00576e84

00142db4 <__pthread_init_run>:
  142db4:	e92d4070 	push	{r4, r5, r6, lr}
  142db8:	e1a05000 	mov	r5, r0
  142dbc:	e3a00000 	mov	r0, #0
  142dc0:	e1a06001 	mov	r6, r1
  142dc4:	ebffffc4 	bl	142cdc <__get_thread_map>
  142dc8:	e2504000 	subs	r4, r0, #0
  142dcc:	08bd8070 	popeq	{r4, r5, r6, pc}
  142dd0:	eb000582 	bl	1443e0 <__set_thread_area>
  142dd4:	e1a00006 	mov	r0, r6
  142dd8:	e12fff35 	blx	r5
  142ddc:	e59f3014 	ldr	r3, [pc, #20]	; 142df8 <__pthread_init_run+0x44>
  142de0:	e2440078 	sub	r0, r4, #120	; 0x78
  142de4:	e5931018 	ldr	r1, [r3, #24]
  142de8:	e8bd4070 	pop	{r4, r5, r6, lr}
  142dec:	e3510000 	cmp	r1, #0
  142df0:	03a01078 	moveq	r1, #120	; 0x78
  142df4:	eaffec91 	b	13e040 <__munmap>
  142df8:	00576e84 	.word	0x00576e84

00142dfc <__vm_wait>:
  142dfc:	e92d4070 	push	{r4, r5, r6, lr}
  142e00:	e59f402c 	ldr	r4, [pc, #44]	; 142e34 <__vm_wait+0x38>
  142e04:	e5942000 	ldr	r2, [r4]
  142e08:	e3520000 	cmp	r2, #0
  142e0c:	08bd8070 	popeq	{r4, r5, r6, pc}
  142e10:	e2845004 	add	r5, r4, #4
  142e14:	e3a03001 	mov	r3, #1
  142e18:	e1a01005 	mov	r1, r5
  142e1c:	e59f0010 	ldr	r0, [pc, #16]	; 142e34 <__vm_wait+0x38>
  142e20:	ebfffc45 	bl	141f3c <__wait>
  142e24:	e5942000 	ldr	r2, [r4]
  142e28:	e3520000 	cmp	r2, #0
  142e2c:	1afffff8 	bne	142e14 <__vm_wait+0x18>
  142e30:	e8bd8070 	pop	{r4, r5, r6, pc}
  142e34:	00150478 	.word	0x00150478

00142e38 <__vm_lock>:
  142e38:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  142e3c:	e59f6038 	ldr	r6, [pc, #56]	; 142e7c <__vm_lock+0x44>
  142e40:	e59f8038 	ldr	r8, [pc, #56]	; 142e80 <__vm_lock+0x48>
  142e44:	e1a07006 	mov	r7, r6
  142e48:	e5964000 	ldr	r4, [r6]
  142e4c:	e2845001 	add	r5, r4, #1
  142e50:	e1a00004 	mov	r0, r4
  142e54:	e1a01005 	mov	r1, r5
  142e58:	e1a02007 	mov	r2, r7
  142e5c:	e5983000 	ldr	r3, [r8]
  142e60:	e12fff33 	blx	r3
  142e64:	e3500000 	cmp	r0, #0
  142e68:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  142e6c:	e5963000 	ldr	r3, [r6]
  142e70:	e1540003 	cmp	r4, r3
  142e74:	0afffff5 	beq	142e50 <__vm_lock+0x18>
  142e78:	eafffff2 	b	142e48 <__vm_lock+0x10>
  142e7c:	00150478 	.word	0x00150478
  142e80:	0014e3d8 	.word	0x0014e3d8

00142e84 <__vm_unlock>:
  142e84:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  142e88:	e59f6098 	ldr	r6, [pc, #152]	; 142f28 <__vm_unlock+0xa4>
  142e8c:	e59f8098 	ldr	r8, [pc, #152]	; 142f2c <__vm_unlock+0xa8>
  142e90:	e1a07006 	mov	r7, r6
  142e94:	e5964000 	ldr	r4, [r6]
  142e98:	e2445001 	sub	r5, r4, #1
  142e9c:	ea000002 	b	142eac <__vm_unlock+0x28>
  142ea0:	e5963000 	ldr	r3, [r6]
  142ea4:	e1540003 	cmp	r4, r3
  142ea8:	1afffff9 	bne	142e94 <__vm_unlock+0x10>
  142eac:	e1a00004 	mov	r0, r4
  142eb0:	e1a01005 	mov	r1, r5
  142eb4:	e1a02007 	mov	r2, r7
  142eb8:	e5983000 	ldr	r3, [r8]
  142ebc:	e12fff33 	blx	r3
  142ec0:	e3500000 	cmp	r0, #0
  142ec4:	1afffff5 	bne	142ea0 <__vm_unlock+0x1c>
  142ec8:	e3540001 	cmp	r4, #1
  142ecc:	18bd81f0 	popne	{r4, r5, r6, r7, r8, pc}
  142ed0:	e5963004 	ldr	r3, [r6, #4]
  142ed4:	e3530000 	cmp	r3, #0
  142ed8:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  142edc:	e3a000f0 	mov	r0, #240	; 0xf0
  142ee0:	ebffe5ac 	bl	13c598 <get_rtt_syscall>
  142ee4:	e2503000 	subs	r3, r0, #0
  142ee8:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  142eec:	e3e02102 	mvn	r2, #-2147483648	; 0x80000000
  142ef0:	e3a01081 	mov	r1, #129	; 0x81
  142ef4:	e59f002c 	ldr	r0, [pc, #44]	; 142f28 <__vm_unlock+0xa4>
  142ef8:	e12fff33 	blx	r3
  142efc:	e3700026 	cmn	r0, #38	; 0x26
  142f00:	18bd81f0 	popne	{r4, r5, r6, r7, r8, pc}
  142f04:	e3a000f0 	mov	r0, #240	; 0xf0
  142f08:	ebffe5a2 	bl	13c598 <get_rtt_syscall>
  142f0c:	e2503000 	subs	r3, r0, #0
  142f10:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  142f14:	e1a01004 	mov	r1, r4
  142f18:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
  142f1c:	e3e02102 	mvn	r2, #-2147483648	; 0x80000000
  142f20:	e59f0000 	ldr	r0, [pc]	; 142f28 <__vm_unlock+0xa4>
  142f24:	e12fff13 	bx	r3
  142f28:	00150478 	.word	0x00150478
  142f2c:	0014e3d8 	.word	0x0014e3d8

00142f30 <time>:
  142f30:	e92d4010 	push	{r4, lr}
  142f34:	e1a04000 	mov	r4, r0
  142f38:	e24dd010 	sub	sp, sp, #16
  142f3c:	e1a0100d 	mov	r1, sp
  142f40:	e3a00000 	mov	r0, #0
  142f44:	eb000595 	bl	1445a0 <__clock_gettime>
  142f48:	e89d0003 	ldm	sp, {r0, r1}
  142f4c:	e3540000 	cmp	r4, #0
  142f50:	18840003 	stmne	r4, {r0, r1}
  142f54:	e28dd010 	add	sp, sp, #16
  142f58:	e8bd8010 	pop	{r4, pc}

00142f5c <__aio_close>:
  142f5c:	e12fff1e 	bx	lr

00142f60 <close>:
  142f60:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  142f64:	e24dd014 	sub	sp, sp, #20
  142f68:	ebfffffb 	bl	142f5c <__aio_close>
  142f6c:	e3a03000 	mov	r3, #0
  142f70:	e1a01000 	mov	r1, r0
  142f74:	e58d3008 	str	r3, [sp, #8]
  142f78:	e58d3004 	str	r3, [sp, #4]
  142f7c:	e58d3000 	str	r3, [sp]
  142f80:	e1a02003 	mov	r2, r3
  142f84:	e3a00006 	mov	r0, #6
  142f88:	ebfffbea 	bl	141f38 <__syscall_cp>
  142f8c:	e3700004 	cmn	r0, #4
  142f90:	03a00000 	moveq	r0, #0
  142f94:	e28dd014 	add	sp, sp, #20
  142f98:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  142f9c:	eaffe5b2 	b	13c66c <__syscall_ret>

00142fa0 <tolower>:
  142fa0:	e2403041 	sub	r3, r0, #65	; 0x41
  142fa4:	e3530019 	cmp	r3, #25
  142fa8:	93800020 	orrls	r0, r0, #32
  142fac:	e12fff1e 	bx	lr

00142fb0 <__tolower_l>:
  142fb0:	e2403041 	sub	r3, r0, #65	; 0x41
  142fb4:	e3530019 	cmp	r3, #25
  142fb8:	93800020 	orrls	r0, r0, #32
  142fbc:	e12fff1e 	bx	lr

00142fc0 <__init_tp>:
  142fc0:	e92d4010 	push	{r4, lr}
  142fc4:	e5800000 	str	r0, [r0]
  142fc8:	e1a04000 	mov	r4, r0
  142fcc:	e2800078 	add	r0, r0, #120	; 0x78
  142fd0:	eb000502 	bl	1443e0 <__set_thread_area>
  142fd4:	e3500000 	cmp	r0, #0
  142fd8:	ba000015 	blt	143034 <__init_tp+0x74>
  142fdc:	03a02001 	moveq	r2, #1
  142fe0:	059f3054 	ldreq	r3, [pc, #84]	; 14303c <__init_tp+0x7c>
  142fe4:	e3a00c01 	mov	r0, #256	; 0x100
  142fe8:	05832000 	streq	r2, [r3]
  142fec:	e3a03001 	mov	r3, #1
  142ff0:	e5843024 	str	r3, [r4, #36]	; 0x24
  142ff4:	ebffe567 	bl	13c598 <get_rtt_syscall>
  142ff8:	e2503000 	subs	r3, r0, #0
  142ffc:	0a00000a 	beq	14302c <__init_tp+0x6c>
  143000:	e59f0038 	ldr	r0, [pc, #56]	; 143040 <__init_tp+0x80>
  143004:	e12fff33 	blx	r3
  143008:	e59f2034 	ldr	r2, [pc, #52]	; 143044 <__init_tp+0x84>
  14300c:	e2843050 	add	r3, r4, #80	; 0x50
  143010:	e584001c 	str	r0, [r4, #28]
  143014:	e5844008 	str	r4, [r4, #8]
  143018:	e584400c 	str	r4, [r4, #12]
  14301c:	e5842060 	str	r2, [r4, #96]	; 0x60
  143020:	e5843050 	str	r3, [r4, #80]	; 0x50
  143024:	e3a00000 	mov	r0, #0
  143028:	e8bd8010 	pop	{r4, pc}
  14302c:	e1a00003 	mov	r0, r3
  143030:	eafffff4 	b	143008 <__init_tp+0x48>
  143034:	e3e00000 	mvn	r0, #0
  143038:	e8bd8010 	pop	{r4, pc}
  14303c:	00576e84 	.word	0x00576e84
  143040:	00576ecc 	.word	0x00576ecc
  143044:	00576eac 	.word	0x00576eac

00143048 <__copy_tls>:
  143048:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  14304c:	e59f808c 	ldr	r8, [pc, #140]	; 1430e0 <__copy_tls+0x98>
  143050:	e3e03077 	mvn	r3, #119	; 0x77
  143054:	e5982020 	ldr	r2, [r8, #32]
  143058:	e598601c 	ldr	r6, [r8, #28]
  14305c:	e1a07102 	lsl	r7, r2, #2
  143060:	e2277003 	eor	r7, r7, #3
  143064:	e1e07007 	mvn	r7, r7
  143068:	e5981018 	ldr	r1, [r8, #24]
  14306c:	e5984014 	ldr	r4, [r8, #20]
  143070:	e2466001 	sub	r6, r6, #1
  143074:	e0433000 	sub	r3, r3, r0
  143078:	e0066003 	and	r6, r6, r3
  14307c:	e0877001 	add	r7, r7, r1
  143080:	e3540000 	cmp	r4, #0
  143084:	e1a09000 	mov	r9, r0
  143088:	e0806006 	add	r6, r0, r6
  14308c:	e080a007 	add	sl, r0, r7
  143090:	0a00000d 	beq	1430cc <__copy_tls+0x84>
  143094:	e1a0b00a 	mov	fp, sl
  143098:	e2865078 	add	r5, r6, #120	; 0x78
  14309c:	e5943014 	ldr	r3, [r4, #20]
  1430a0:	e5941004 	ldr	r1, [r4, #4]
  1430a4:	e0853003 	add	r3, r5, r3
  1430a8:	e5ab3004 	str	r3, [fp, #4]!
  1430ac:	e5940014 	ldr	r0, [r4, #20]
  1430b0:	e5942008 	ldr	r2, [r4, #8]
  1430b4:	e0850000 	add	r0, r5, r0
  1430b8:	ebfff7af 	bl	140f7c <memcpy>
  1430bc:	e5944000 	ldr	r4, [r4]
  1430c0:	e3540000 	cmp	r4, #0
  1430c4:	1afffff4 	bne	14309c <__copy_tls+0x54>
  1430c8:	e5982020 	ldr	r2, [r8, #32]
  1430cc:	e7892007 	str	r2, [r9, r7]
  1430d0:	e1a00006 	mov	r0, r6
  1430d4:	e586a074 	str	sl, [r6, #116]	; 0x74
  1430d8:	e586a004 	str	sl, [r6, #4]
  1430dc:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  1430e0:	00576e84 	.word	0x00576e84

001430e4 <__init_tls>:
  1430e4:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
  1430e8:	e5901014 	ldr	r1, [r0, #20]
  1430ec:	e24dd00c 	sub	sp, sp, #12
  1430f0:	e3510000 	cmp	r1, #0
  1430f4:	e590600c 	ldr	r6, [r0, #12]
  1430f8:	0a000062 	beq	143288 <__init_tls+0x1a4>
  1430fc:	e3a04000 	mov	r4, #0
  143100:	e59f81a0 	ldr	r8, [pc, #416]	; 1432a8 <__init_tls+0x1c4>
  143104:	e1a02006 	mov	r2, r6
  143108:	e1a03004 	mov	r3, r4
  14310c:	e1a0e004 	mov	lr, r4
  143110:	e590c010 	ldr	ip, [r0, #16]
  143114:	e5987000 	ldr	r7, [r8]
  143118:	e59f918c 	ldr	r9, [pc, #396]	; 1432ac <__init_tls+0x1c8>
  14311c:	e59f518c 	ldr	r5, [pc, #396]	; 1432b0 <__init_tls+0x1cc>
  143120:	ea000007 	b	143144 <__init_tls+0x60>
  143124:	e3500002 	cmp	r0, #2
  143128:	1a00003c 	bne	143220 <__init_tls+0x13c>
  14312c:	e3550000 	cmp	r5, #0
  143130:	15923008 	ldrne	r3, [r2, #8]
  143134:	10453003 	subne	r3, r5, r3
  143138:	e2511001 	subs	r1, r1, #1
  14313c:	e082200c 	add	r2, r2, ip
  143140:	0a000007 	beq	143164 <__init_tls+0x80>
  143144:	e5920000 	ldr	r0, [r2]
  143148:	e3500006 	cmp	r0, #6
  14314c:	1afffff4 	bne	143124 <__init_tls+0x40>
  143150:	e5923008 	ldr	r3, [r2, #8]
  143154:	e2511001 	subs	r1, r1, #1
  143158:	e0463003 	sub	r3, r6, r3
  14315c:	e082200c 	add	r2, r2, ip
  143160:	1afffff7 	bne	143144 <__init_tls+0x60>
  143164:	e3540000 	cmp	r4, #0
  143168:	15887000 	strne	r7, [r8]
  14316c:	e35e0000 	cmp	lr, #0
  143170:	0a000044 	beq	143288 <__init_tls+0x1a4>
  143174:	e3a04001 	mov	r4, #1
  143178:	e59ec008 	ldr	ip, [lr, #8]
  14317c:	e59e1010 	ldr	r1, [lr, #16]
  143180:	e59f212c 	ldr	r2, [pc, #300]	; 1432b4 <__init_tls+0x1d0>
  143184:	e59e001c 	ldr	r0, [lr, #28]
  143188:	e083300c 	add	r3, r3, ip
  14318c:	e59fc124 	ldr	ip, [pc, #292]	; 1432b8 <__init_tls+0x1d4>
  143190:	e5821008 	str	r1, [r2, #8]
  143194:	e5823004 	str	r3, [r2, #4]
  143198:	e59e1014 	ldr	r1, [lr, #20]
  14319c:	e5820010 	str	r0, [r2, #16]
  1431a0:	e58c2014 	str	r2, [ip, #20]
  1431a4:	e58c4020 	str	r4, [ip, #32]
  1431a8:	e3500003 	cmp	r0, #3
  1431ac:	93a0e004 	movls	lr, #4
  1431b0:	e0833001 	add	r3, r3, r1
  1431b4:	e2404001 	sub	r4, r0, #1
  1431b8:	e2633000 	rsb	r3, r3, #0
  1431bc:	e0033004 	and	r3, r3, r4
  1431c0:	e0833001 	add	r3, r3, r1
  1431c4:	93a01087 	movls	r1, #135	; 0x87
  1431c8:	91a0000e 	movls	r0, lr
  1431cc:	e3c44007 	bic	r4, r4, #7
  1431d0:	e2844008 	add	r4, r4, #8
  1431d4:	82801083 	addhi	r1, r0, #131	; 0x83
  1431d8:	e5824014 	str	r4, [r2, #20]
  1431dc:	e0834004 	add	r4, r3, r4
  1431e0:	e0844001 	add	r4, r4, r1
  1431e4:	e3c44003 	bic	r4, r4, #3
  1431e8:	9582e010 	strls	lr, [r2, #16]
  1431ec:	e35400bc 	cmp	r4, #188	; 0xbc
  1431f0:	e58c001c 	str	r0, [ip, #28]
  1431f4:	e582300c 	str	r3, [r2, #12]
  1431f8:	e58c4018 	str	r4, [ip, #24]
  1431fc:	959f00b8 	ldrls	r0, [pc, #184]	; 1432bc <__init_tls+0x1d8>
  143200:	8a000013 	bhi	143254 <__init_tls+0x170>
  143204:	ebffff8f 	bl	143048 <__copy_tls>
  143208:	ebffff6c 	bl	142fc0 <__init_tp>
  14320c:	e3500000 	cmp	r0, #0
  143210:	aa000000 	bge	143218 <__init_tls+0x134>
  143214:	e7f000f0 	.word	0xe7f000f0
  143218:	e28dd00c 	add	sp, sp, #12
  14321c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  143220:	e3500007 	cmp	r0, #7
  143224:	01a0e002 	moveq	lr, r2
  143228:	0affffc2 	beq	143138 <__init_tls+0x54>
  14322c:	e1500009 	cmp	r0, r9
  143230:	1affffc0 	bne	143138 <__init_tls+0x54>
  143234:	e5920014 	ldr	r0, [r2, #20]
  143238:	e1500007 	cmp	r0, r7
  14323c:	9affffbd 	bls	143138 <__init_tls+0x54>
  143240:	e3500502 	cmp	r0, #8388608	; 0x800000
  143244:	31a07000 	movcc	r7, r0
  143248:	23a07502 	movcs	r7, #8388608	; 0x800000
  14324c:	e3a04001 	mov	r4, #1
  143250:	eaffffb8 	b	143138 <__init_tls+0x54>
  143254:	e3a000c0 	mov	r0, #192	; 0xc0
  143258:	ebffe4ce 	bl	13c598 <get_rtt_syscall>
  14325c:	e2505000 	subs	r5, r0, #0
  143260:	0a00000e 	beq	1432a0 <__init_tls+0x1bc>
  143264:	e3e03000 	mvn	r3, #0
  143268:	e3a00000 	mov	r0, #0
  14326c:	e58d3000 	str	r3, [sp]
  143270:	e1a01004 	mov	r1, r4
  143274:	e58d0004 	str	r0, [sp, #4]
  143278:	e3a03022 	mov	r3, #34	; 0x22
  14327c:	e3a02003 	mov	r2, #3
  143280:	e12fff35 	blx	r5
  143284:	eaffffde 	b	143204 <__init_tls+0x120>
  143288:	e59f2024 	ldr	r2, [pc, #36]	; 1432b4 <__init_tls+0x1d0>
  14328c:	e59fc024 	ldr	ip, [pc, #36]	; 1432b8 <__init_tls+0x1d4>
  143290:	e592100c 	ldr	r1, [r2, #12]
  143294:	e5923004 	ldr	r3, [r2, #4]
  143298:	e5920010 	ldr	r0, [r2, #16]
  14329c:	eaffffc1 	b	1431a8 <__init_tls+0xc4>
  1432a0:	e1a00005 	mov	r0, r5
  1432a4:	eaffffd6 	b	143204 <__init_tls+0x120>
  1432a8:	0014e3e4 	.word	0x0014e3e4
  1432ac:	6474e551 	.word	0x6474e551
  1432b0:	00000000 	.word	0x00000000
  1432b4:	00150540 	.word	0x00150540
  1432b8:	00576e84 	.word	0x00576e84
  1432bc:	00150484 	.word	0x00150484

001432c0 <__init_ssp>:
  1432c0:	e2501000 	subs	r1, r0, #0
  1432c4:	e92d4010 	push	{r4, lr}
  1432c8:	1a000009 	bne	1432f4 <__init_ssp+0x34>
  1432cc:	e59f3034 	ldr	r3, [pc, #52]	; 143308 <__init_ssp+0x48>
  1432d0:	e59f2034 	ldr	r2, [pc, #52]	; 14330c <__init_ssp+0x4c>
  1432d4:	e0010293 	mul	r1, r3, r2
  1432d8:	e5831000 	str	r1, [r3]
  1432dc:	e5933000 	ldr	r3, [r3]
  1432e0:	e59f2028 	ldr	r2, [pc, #40]	; 143310 <__init_ssp+0x50>
  1432e4:	e5920000 	ldr	r0, [r2]
  1432e8:	e12fff30 	blx	r0
  1432ec:	e5003064 	str	r3, [r0, #-100]	; 0xffffff9c
  1432f0:	e8bd8010 	pop	{r4, pc}
  1432f4:	e3a02004 	mov	r2, #4
  1432f8:	e59f0008 	ldr	r0, [pc, #8]	; 143308 <__init_ssp+0x48>
  1432fc:	ebfff71e 	bl	140f7c <memcpy>
  143300:	e59f3000 	ldr	r3, [pc]	; 143308 <__init_ssp+0x48>
  143304:	eafffff4 	b	1432dc <__init_ssp+0x1c>
  143308:	00576ed0 	.word	0x00576ed0
  14330c:	41c64e6d 	.word	0x41c64e6d
  143310:	0014e3dc 	.word	0x0014e3dc

00143314 <__stack_chk_fail>:
  143314:	e7f000f0 	.word	0xe7f000f0
  143318:	e12fff1e 	bx	lr

0014331c <_Exit>:
  14331c:	e92d4010 	push	{r4, lr}
  143320:	e1a04000 	mov	r4, r0
  143324:	e3a000f8 	mov	r0, #248	; 0xf8
  143328:	ebffe49a 	bl	13c598 <get_rtt_syscall>
  14332c:	e2503000 	subs	r3, r0, #0
  143330:	0a000001 	beq	14333c <_Exit+0x20>
  143334:	e1a00004 	mov	r0, r4
  143338:	e12fff33 	blx	r3
  14333c:	e3a00001 	mov	r0, #1
  143340:	ebffe494 	bl	13c598 <get_rtt_syscall>
  143344:	e2503000 	subs	r3, r0, #0
  143348:	0afffffb 	beq	14333c <_Exit+0x20>
  14334c:	eafffff8 	b	143334 <_Exit+0x18>

00143350 <abort>:
  143350:	e3a04000 	mov	r4, #0
  143354:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  143358:	e3a00006 	mov	r0, #6
  14335c:	e24dd024 	sub	sp, sp, #36	; 0x24
  143360:	ebffec24 	bl	13e3f8 <raise>
  143364:	e1a00004 	mov	r0, r4
  143368:	eb0000b0 	bl	143630 <__block_all_sigs>
  14336c:	e59f00b0 	ldr	r0, [pc, #176]	; 143424 <abort+0xd4>
  143370:	ebfffa6e 	bl	141d30 <__lock>
  143374:	e3a000ae 	mov	r0, #174	; 0xae
  143378:	e58d400c 	str	r4, [sp, #12]
  14337c:	e58d4010 	str	r4, [sp, #16]
  143380:	e58d4014 	str	r4, [sp, #20]
  143384:	e58d4018 	str	r4, [sp, #24]
  143388:	e58d401c 	str	r4, [sp, #28]
  14338c:	ebffe481 	bl	13c598 <get_rtt_syscall>
  143390:	e2505000 	subs	r5, r0, #0
  143394:	0a000004 	beq	1433ac <abort+0x5c>
  143398:	e1a02004 	mov	r2, r4
  14339c:	e28d100c 	add	r1, sp, #12
  1433a0:	e3a03008 	mov	r3, #8
  1433a4:	e3a00006 	mov	r0, #6
  1433a8:	e12fff35 	blx	r5
  1433ac:	e59f3074 	ldr	r3, [pc, #116]	; 143428 <abort+0xd8>
  1433b0:	e5930000 	ldr	r0, [r3]
  1433b4:	e12fff30 	blx	r0
  1433b8:	e510405c 	ldr	r4, [r0, #-92]	; 0xffffffa4
  1433bc:	e3a000ee 	mov	r0, #238	; 0xee
  1433c0:	ebffe474 	bl	13c598 <get_rtt_syscall>
  1433c4:	e2503000 	subs	r3, r0, #0
  1433c8:	0a000002 	beq	1433d8 <abort+0x88>
  1433cc:	e1a00004 	mov	r0, r4
  1433d0:	e3a01006 	mov	r1, #6
  1433d4:	e12fff33 	blx	r3
  1433d8:	e3a03020 	mov	r3, #32
  1433dc:	e3a05000 	mov	r5, #0
  1433e0:	e08d4003 	add	r4, sp, r3
  1433e4:	e3a000af 	mov	r0, #175	; 0xaf
  1433e8:	e58d5008 	str	r5, [sp, #8]
  1433ec:	e524301c 	str	r3, [r4, #-28]!	; 0xffffffe4
  1433f0:	ebffe468 	bl	13c598 <get_rtt_syscall>
  1433f4:	e2506000 	subs	r6, r0, #0
  1433f8:	0a000004 	beq	143410 <abort+0xc0>
  1433fc:	e1a02005 	mov	r2, r5
  143400:	e1a01004 	mov	r1, r4
  143404:	e3a03008 	mov	r3, #8
  143408:	e3a00001 	mov	r0, #1
  14340c:	e12fff36 	blx	r6
  143410:	e7f000f0 	.word	0xe7f000f0
  143414:	e3a00009 	mov	r0, #9
  143418:	ebffebf6 	bl	13e3f8 <raise>
  14341c:	e3a0007f 	mov	r0, #127	; 0x7f
  143420:	ebffffbd 	bl	14331c <_Exit>
  143424:	00576ed4 	.word	0x00576ed4
  143428:	0014e3dc 	.word	0x0014e3dc

0014342c <__expand_heap>:
  14342c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
  143430:	e59f2178 	ldr	r2, [pc, #376]	; 1435b0 <__expand_heap+0x184>
  143434:	e5903000 	ldr	r3, [r0]
  143438:	e24dd01c 	sub	sp, sp, #28
  14343c:	e1530002 	cmp	r3, r2
  143440:	8a000051 	bhi	14358c <__expand_heap+0x160>
  143444:	e59f7168 	ldr	r7, [pc, #360]	; 1435b4 <__expand_heap+0x188>
  143448:	e59f8168 	ldr	r8, [pc, #360]	; 1435b8 <__expand_heap+0x18c>
  14344c:	e5975000 	ldr	r5, [r7]
  143450:	e2634000 	rsb	r4, r3, #0
  143454:	e3550000 	cmp	r5, #0
  143458:	e0044008 	and	r4, r4, r8
  14345c:	e0844003 	add	r4, r4, r3
  143460:	e1a06000 	mov	r6, r0
  143464:	11e03005 	mvnne	r3, r5
  143468:	0a00003b 	beq	14355c <__expand_heap+0x130>
  14346c:	e1540003 	cmp	r4, r3
  143470:	2a00001d 	bcs	1434ec <__expand_heap+0xc0>
  143474:	e59f3140 	ldr	r3, [pc, #320]	; 1435bc <__expand_heap+0x190>
  143478:	e0848005 	add	r8, r4, r5
  14347c:	e5933010 	ldr	r3, [r3, #16]
  143480:	e3530502 	cmp	r3, #8388608	; 0x800000
  143484:	21a02003 	movcs	r2, r3
  143488:	33a02502 	movcc	r2, #8388608	; 0x800000
  14348c:	e2422502 	sub	r2, r2, #8388608	; 0x800000
  143490:	e1580002 	cmp	r8, r2
  143494:	81530005 	cmphi	r3, r5
  143498:	8a000013 	bhi	1434ec <__expand_heap+0xc0>
  14349c:	e28d3014 	add	r3, sp, #20
  1434a0:	e3530502 	cmp	r3, #8388608	; 0x800000
  1434a4:	21a02003 	movcs	r2, r3
  1434a8:	33a02502 	movcc	r2, #8388608	; 0x800000
  1434ac:	e2422502 	sub	r2, r2, #8388608	; 0x800000
  1434b0:	e1580002 	cmp	r8, r2
  1434b4:	81530005 	cmphi	r3, r5
  1434b8:	8a00000b 	bhi	1434ec <__expand_heap+0xc0>
  1434bc:	e3a0002d 	mov	r0, #45	; 0x2d
  1434c0:	ebffe434 	bl	13c598 <get_rtt_syscall>
  1434c4:	e2503000 	subs	r3, r0, #0
  1434c8:	0a000036 	beq	1435a8 <__expand_heap+0x17c>
  1434cc:	e1a00008 	mov	r0, r8
  1434d0:	e12fff33 	blx	r3
  1434d4:	e5972000 	ldr	r2, [r7]
  1434d8:	e0823004 	add	r3, r2, r4
  1434dc:	e1530000 	cmp	r3, r0
  1434e0:	05864000 	streq	r4, [r6]
  1434e4:	05870000 	streq	r0, [r7]
  1434e8:	0a000018 	beq	143550 <__expand_heap+0x124>
  1434ec:	e3a01a01 	mov	r1, #4096	; 0x1000
  1434f0:	e59f50c8 	ldr	r5, [pc, #200]	; 1435c0 <__expand_heap+0x194>
  1434f4:	e3a08000 	mov	r8, #0
  1434f8:	e5953000 	ldr	r3, [r5]
  1434fc:	e3a09000 	mov	r9, #0
  143500:	e1a030a3 	lsr	r3, r3, #1
  143504:	e1a01311 	lsl	r1, r1, r3
  143508:	e1510004 	cmp	r1, r4
  14350c:	21a04001 	movcs	r4, r1
  143510:	e3e03000 	mvn	r3, #0
  143514:	e3a02003 	mov	r2, #3
  143518:	e58d3000 	str	r3, [sp]
  14351c:	e58d8008 	str	r8, [sp, #8]
  143520:	e58d900c 	str	r9, [sp, #12]
  143524:	e3a03022 	mov	r3, #34	; 0x22
  143528:	e1a01004 	mov	r1, r4
  14352c:	e3a00000 	mov	r0, #0
  143530:	ebffea5c 	bl	13dea8 <__mmap>
  143534:	e3700001 	cmn	r0, #1
  143538:	e1a02000 	mov	r2, r0
  14353c:	03a02000 	moveq	r2, #0
  143540:	15953000 	ldrne	r3, [r5]
  143544:	15864000 	strne	r4, [r6]
  143548:	12833001 	addne	r3, r3, #1
  14354c:	15853000 	strne	r3, [r5]
  143550:	e1a00002 	mov	r0, r2
  143554:	e28dd01c 	add	sp, sp, #28
  143558:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  14355c:	e3a0002d 	mov	r0, #45	; 0x2d
  143560:	ebffe40c 	bl	13c598 <get_rtt_syscall>
  143564:	e2503000 	subs	r3, r0, #0
  143568:	0a00000c 	beq	1435a0 <__expand_heap+0x174>
  14356c:	e1a00005 	mov	r0, r5
  143570:	e12fff33 	blx	r3
  143574:	e2605000 	rsb	r5, r0, #0
  143578:	e0055008 	and	r5, r5, r8
  14357c:	e0855000 	add	r5, r5, r0
  143580:	e1e03005 	mvn	r3, r5
  143584:	e5875000 	str	r5, [r7]
  143588:	eaffffb7 	b	14346c <__expand_heap+0x40>
  14358c:	ebffd6cb 	bl	1390c0 <__errno_location>
  143590:	e3a0300c 	mov	r3, #12
  143594:	e3a02000 	mov	r2, #0
  143598:	e5803000 	str	r3, [r0]
  14359c:	eaffffeb 	b	143550 <__expand_heap+0x124>
  1435a0:	e3e03000 	mvn	r3, #0
  1435a4:	eafffff6 	b	143584 <__expand_heap+0x158>
  1435a8:	e1a00003 	mov	r0, r3
  1435ac:	eaffffc8 	b	1434d4 <__expand_heap+0xa8>
  1435b0:	7fffefff 	.word	0x7fffefff
  1435b4:	00150558 	.word	0x00150558
  1435b8:	00000fff 	.word	0x00000fff
  1435bc:	00576e84 	.word	0x00576e84
  1435c0:	0015055c 	.word	0x0015055c

001435c4 <frexpl>:
  1435c4:	ea000417 	b	144628 <frexp>

001435c8 <__mprotect>:
  1435c8:	e2811eff 	add	r1, r1, #4080	; 0xff0
  1435cc:	e92d4070 	push	{r4, r5, r6, lr}
  1435d0:	e281100f 	add	r1, r1, #15
  1435d4:	e59f5040 	ldr	r5, [pc, #64]	; 14361c <__mprotect+0x54>
  1435d8:	e0801001 	add	r1, r0, r1
  1435dc:	e0011005 	and	r1, r1, r5
  1435e0:	e0055000 	and	r5, r5, r0
  1435e4:	e3a0007d 	mov	r0, #125	; 0x7d
  1435e8:	e1a06002 	mov	r6, r2
  1435ec:	e0414005 	sub	r4, r1, r5
  1435f0:	ebffe3e8 	bl	13c598 <get_rtt_syscall>
  1435f4:	e2503000 	subs	r3, r0, #0
  1435f8:	0a000005 	beq	143614 <__mprotect+0x4c>
  1435fc:	e1a02006 	mov	r2, r6
  143600:	e1a01004 	mov	r1, r4
  143604:	e1a00005 	mov	r0, r5
  143608:	e12fff33 	blx	r3
  14360c:	e8bd4070 	pop	{r4, r5, r6, lr}
  143610:	eaffe415 	b	13c66c <__syscall_ret>
  143614:	e1a00003 	mov	r0, r3
  143618:	eafffffb 	b	14360c <__mprotect+0x44>
  14361c:	fffff000 	.word	0xfffff000

00143620 <wctomb>:
  143620:	e3500000 	cmp	r0, #0
  143624:	012fff1e 	bxeq	lr
  143628:	e3a02000 	mov	r2, #0
  14362c:	ea00042a 	b	1446dc <wcrtomb>

00143630 <__block_all_sigs>:
  143630:	e92d4010 	push	{r4, lr}
  143634:	e1a04000 	mov	r4, r0
  143638:	e3a000af 	mov	r0, #175	; 0xaf
  14363c:	ebffe3d5 	bl	13c598 <get_rtt_syscall>
  143640:	e250e000 	subs	lr, r0, #0
  143644:	08bd8010 	popeq	{r4, pc}
  143648:	e1a02004 	mov	r2, r4
  14364c:	e1a0c00e 	mov	ip, lr
  143650:	e8bd4010 	pop	{r4, lr}
  143654:	e3a03008 	mov	r3, #8
  143658:	e59f1004 	ldr	r1, [pc, #4]	; 143664 <__block_all_sigs+0x34>
  14365c:	e3a00000 	mov	r0, #0
  143660:	e12fff1c 	bx	ip
  143664:	0014d180 	.word	0x0014d180

00143668 <__block_app_sigs>:
  143668:	e92d4010 	push	{r4, lr}
  14366c:	e1a04000 	mov	r4, r0
  143670:	e3a000af 	mov	r0, #175	; 0xaf
  143674:	ebffe3c7 	bl	13c598 <get_rtt_syscall>
  143678:	e250e000 	subs	lr, r0, #0
  14367c:	08bd8010 	popeq	{r4, pc}
  143680:	e1a02004 	mov	r2, r4
  143684:	e1a0c00e 	mov	ip, lr
  143688:	e8bd4010 	pop	{r4, lr}
  14368c:	e3a03008 	mov	r3, #8
  143690:	e59f1004 	ldr	r1, [pc, #4]	; 14369c <__block_app_sigs+0x34>
  143694:	e3a00000 	mov	r0, #0
  143698:	e12fff1c 	bx	ip
  14369c:	0014d188 	.word	0x0014d188

001436a0 <__restore_sigs>:
  1436a0:	e92d4010 	push	{r4, lr}
  1436a4:	e1a04000 	mov	r4, r0
  1436a8:	e3a000af 	mov	r0, #175	; 0xaf
  1436ac:	ebffe3b9 	bl	13c598 <get_rtt_syscall>
  1436b0:	e250e000 	subs	lr, r0, #0
  1436b4:	08bd8010 	popeq	{r4, pc}
  1436b8:	e1a01004 	mov	r1, r4
  1436bc:	e1a0c00e 	mov	ip, lr
  1436c0:	e8bd4010 	pop	{r4, lr}
  1436c4:	e3a03008 	mov	r3, #8
  1436c8:	e3a02000 	mov	r2, #0
  1436cc:	e3a00002 	mov	r0, #2
  1436d0:	e12fff1c 	bx	ip

001436d4 <__lockfile>:
  1436d4:	e59f2124 	ldr	r2, [pc, #292]	; 143800 <__lockfile+0x12c>
  1436d8:	e590304c 	ldr	r3, [r0, #76]	; 0x4c
  1436dc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  1436e0:	e1a06000 	mov	r6, r0
  1436e4:	e5920000 	ldr	r0, [r2]
  1436e8:	e12fff30 	blx	r0
  1436ec:	e510805c 	ldr	r8, [r0, #-92]	; 0xffffffa4
  1436f0:	e3c33101 	bic	r3, r3, #1073741824	; 0x40000000
  1436f4:	e1530008 	cmp	r3, r8
  1436f8:	0a00003e 	beq	1437f8 <__lockfile+0x124>
  1436fc:	e59f7100 	ldr	r7, [pc, #256]	; 143804 <__lockfile+0x130>
  143700:	e286504c 	add	r5, r6, #76	; 0x4c
  143704:	ea000002 	b	143714 <__lockfile+0x40>
  143708:	e596304c 	ldr	r3, [r6, #76]	; 0x4c
  14370c:	e3530000 	cmp	r3, #0
  143710:	1a000008 	bne	143738 <__lockfile+0x64>
  143714:	e3a00000 	mov	r0, #0
  143718:	e1a01008 	mov	r1, r8
  14371c:	e1a02005 	mov	r2, r5
  143720:	e5973000 	ldr	r3, [r7]
  143724:	e12fff33 	blx	r3
  143728:	e3500000 	cmp	r0, #0
  14372c:	1afffff5 	bne	143708 <__lockfile+0x34>
  143730:	e3a00001 	mov	r0, #1
  143734:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
  143738:	e3888101 	orr	r8, r8, #1073741824	; 0x40000000
  14373c:	ea000002 	b	14374c <__lockfile+0x78>
  143740:	e596404c 	ldr	r4, [r6, #76]	; 0x4c
  143744:	e3540000 	cmp	r4, #0
  143748:	1a000007 	bne	14376c <__lockfile+0x98>
  14374c:	e3a00000 	mov	r0, #0
  143750:	e1a01008 	mov	r1, r8
  143754:	e1a02005 	mov	r2, r5
  143758:	e5973000 	ldr	r3, [r7]
  14375c:	e12fff33 	blx	r3
  143760:	e3500000 	cmp	r0, #0
  143764:	1afffff5 	bne	143740 <__lockfile+0x6c>
  143768:	eafffff0 	b	143730 <__lockfile+0x5c>
  14376c:	e3140101 	tst	r4, #1073741824	; 0x40000000
  143770:	e3849101 	orr	r9, r4, #1073741824	; 0x40000000
  143774:	0a000017 	beq	1437d8 <__lockfile+0x104>
  143778:	e3a000f0 	mov	r0, #240	; 0xf0
  14377c:	ebffe385 	bl	13c598 <get_rtt_syscall>
  143780:	e2504000 	subs	r4, r0, #0
  143784:	0afffff0 	beq	14374c <__lockfile+0x78>
  143788:	e3a03000 	mov	r3, #0
  14378c:	e1a02009 	mov	r2, r9
  143790:	e3a01080 	mov	r1, #128	; 0x80
  143794:	e1a00005 	mov	r0, r5
  143798:	e12fff34 	blx	r4
  14379c:	e3700026 	cmn	r0, #38	; 0x26
  1437a0:	1affffe9 	bne	14374c <__lockfile+0x78>
  1437a4:	e3a000f0 	mov	r0, #240	; 0xf0
  1437a8:	ebffe37a 	bl	13c598 <get_rtt_syscall>
  1437ac:	e2504000 	subs	r4, r0, #0
  1437b0:	0affffe5 	beq	14374c <__lockfile+0x78>
  1437b4:	e3a03000 	mov	r3, #0
  1437b8:	e1a02009 	mov	r2, r9
  1437bc:	e1a01003 	mov	r1, r3
  1437c0:	e1a00005 	mov	r0, r5
  1437c4:	e12fff34 	blx	r4
  1437c8:	eaffffdf 	b	14374c <__lockfile+0x78>
  1437cc:	e596304c 	ldr	r3, [r6, #76]	; 0x4c
  1437d0:	e1530004 	cmp	r3, r4
  1437d4:	1affffdc 	bne	14374c <__lockfile+0x78>
  1437d8:	e1a00004 	mov	r0, r4
  1437dc:	e1a01009 	mov	r1, r9
  1437e0:	e1a02005 	mov	r2, r5
  1437e4:	e5973000 	ldr	r3, [r7]
  1437e8:	e12fff33 	blx	r3
  1437ec:	e3500000 	cmp	r0, #0
  1437f0:	1afffff5 	bne	1437cc <__lockfile+0xf8>
  1437f4:	eaffffdf 	b	143778 <__lockfile+0xa4>
  1437f8:	e3a00000 	mov	r0, #0
  1437fc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
  143800:	0014e3dc 	.word	0x0014e3dc
  143804:	0014e3d8 	.word	0x0014e3d8

00143808 <__unlockfile>:
  143808:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  14380c:	e1a05000 	mov	r5, r0
  143810:	e59f7084 	ldr	r7, [pc, #132]	; 14389c <__unlockfile+0x94>
  143814:	e280604c 	add	r6, r0, #76	; 0x4c
  143818:	e595404c 	ldr	r4, [r5, #76]	; 0x4c
  14381c:	ea000002 	b	14382c <__unlockfile+0x24>
  143820:	e595304c 	ldr	r3, [r5, #76]	; 0x4c
  143824:	e1540003 	cmp	r4, r3
  143828:	1afffffa 	bne	143818 <__unlockfile+0x10>
  14382c:	e1a00004 	mov	r0, r4
  143830:	e3a01000 	mov	r1, #0
  143834:	e1a02006 	mov	r2, r6
  143838:	e5973000 	ldr	r3, [r7]
  14383c:	e12fff33 	blx	r3
  143840:	e1500001 	cmp	r0, r1
  143844:	1afffff5 	bne	143820 <__unlockfile+0x18>
  143848:	e3140101 	tst	r4, #1073741824	; 0x40000000
  14384c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  143850:	e3a000f0 	mov	r0, #240	; 0xf0
  143854:	ebffe34f 	bl	13c598 <get_rtt_syscall>
  143858:	e2503000 	subs	r3, r0, #0
  14385c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  143860:	e3a02001 	mov	r2, #1
  143864:	e3a01081 	mov	r1, #129	; 0x81
  143868:	e1a00006 	mov	r0, r6
  14386c:	e12fff33 	blx	r3
  143870:	e3700026 	cmn	r0, #38	; 0x26
  143874:	18bd81f0 	popne	{r4, r5, r6, r7, r8, pc}
  143878:	e3a000f0 	mov	r0, #240	; 0xf0
  14387c:	ebffe345 	bl	13c598 <get_rtt_syscall>
  143880:	e2503000 	subs	r3, r0, #0
  143884:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  143888:	e3a02001 	mov	r2, #1
  14388c:	e1a00006 	mov	r0, r6
  143890:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
  143894:	e1a01002 	mov	r1, r2
  143898:	e12fff13 	bx	r3
  14389c:	0014e3d8 	.word	0x0014e3d8

001438a0 <__overflow>:
  1438a0:	e92d4010 	push	{r4, lr}
  1438a4:	e5903010 	ldr	r3, [r0, #16]
  1438a8:	e24dd008 	sub	sp, sp, #8
  1438ac:	e3530000 	cmp	r3, #0
  1438b0:	e1a04000 	mov	r4, r0
  1438b4:	e5cd1007 	strb	r1, [sp, #7]
  1438b8:	0a000015 	beq	143914 <__overflow+0x74>
  1438bc:	e5942014 	ldr	r2, [r4, #20]
  1438c0:	e1520003 	cmp	r2, r3
  1438c4:	1a000009 	bne	1438f0 <__overflow+0x50>
  1438c8:	e5943024 	ldr	r3, [r4, #36]	; 0x24
  1438cc:	e1a00004 	mov	r0, r4
  1438d0:	e3a02001 	mov	r2, #1
  1438d4:	e28d1007 	add	r1, sp, #7
  1438d8:	e12fff33 	blx	r3
  1438dc:	e3500001 	cmp	r0, #1
  1438e0:	1a00000f 	bne	143924 <__overflow+0x84>
  1438e4:	e5dd0007 	ldrb	r0, [sp, #7]
  1438e8:	e28dd008 	add	sp, sp, #8
  1438ec:	e8bd8010 	pop	{r4, pc}
  1438f0:	e5dd0007 	ldrb	r0, [sp, #7]
  1438f4:	e5943050 	ldr	r3, [r4, #80]	; 0x50
  1438f8:	e1500003 	cmp	r0, r3
  1438fc:	0afffff1 	beq	1438c8 <__overflow+0x28>
  143900:	e2823001 	add	r3, r2, #1
  143904:	e5843014 	str	r3, [r4, #20]
  143908:	e5c20000 	strb	r0, [r2]
  14390c:	e28dd008 	add	sp, sp, #8
  143910:	e8bd8010 	pop	{r4, pc}
  143914:	eb00008c 	bl	143b4c <__towrite>
  143918:	e3500000 	cmp	r0, #0
  14391c:	05943010 	ldreq	r3, [r4, #16]
  143920:	0affffe5 	beq	1438bc <__overflow+0x1c>
  143924:	e3e00000 	mvn	r0, #0
  143928:	eaffffee 	b	1438e8 <__overflow+0x48>

0014392c <dummy>:
  14392c:	e12fff1e 	bx	lr

00143930 <__stdio_close>:
  143930:	e92d4010 	push	{r4, lr}
  143934:	e590003c 	ldr	r0, [r0, #60]	; 0x3c
  143938:	ebfffd87 	bl	142f5c <__aio_close>
  14393c:	e1a04000 	mov	r4, r0
  143940:	e3a00006 	mov	r0, #6
  143944:	ebffe313 	bl	13c598 <get_rtt_syscall>
  143948:	e2503000 	subs	r3, r0, #0
  14394c:	0a000003 	beq	143960 <__stdio_close+0x30>
  143950:	e1a00004 	mov	r0, r4
  143954:	e12fff33 	blx	r3
  143958:	e8bd4010 	pop	{r4, lr}
  14395c:	eaffe342 	b	13c66c <__syscall_ret>
  143960:	e1a00003 	mov	r0, r3
  143964:	eafffffb 	b	143958 <__stdio_close+0x28>

00143968 <__stdio_seek>:
  143968:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  14396c:	e590503c 	ldr	r5, [r0, #60]	; 0x3c
  143970:	e24dd014 	sub	sp, sp, #20
  143974:	e3a0008c 	mov	r0, #140	; 0x8c
  143978:	e1a07002 	mov	r7, r2
  14397c:	e1a06003 	mov	r6, r3
  143980:	ebffe304 	bl	13c598 <get_rtt_syscall>
  143984:	e2504000 	subs	r4, r0, #0
  143988:	0a00000e 	beq	1439c8 <__stdio_seek+0x60>
  14398c:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
  143990:	e1a02007 	mov	r2, r7
  143994:	e58d3000 	str	r3, [sp]
  143998:	e1a01006 	mov	r1, r6
  14399c:	e28d3008 	add	r3, sp, #8
  1439a0:	e1a00005 	mov	r0, r5
  1439a4:	e12fff34 	blx	r4
  1439a8:	ebffe32f 	bl	13c66c <__syscall_ret>
  1439ac:	e3500000 	cmp	r0, #0
  1439b0:	b3e00000 	mvnlt	r0, #0
  1439b4:	b3e01000 	mvnlt	r1, #0
  1439b8:	a28d1008 	addge	r1, sp, #8
  1439bc:	a8910003 	ldmge	r1, {r0, r1}
  1439c0:	e28dd014 	add	sp, sp, #20
  1439c4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  1439c8:	e1a00004 	mov	r0, r4
  1439cc:	eafffff5 	b	1439a8 <__stdio_seek+0x40>

001439d0 <__stdio_write>:
  1439d0:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
  1439d4:	e590301c 	ldr	r3, [r0, #28]
  1439d8:	e5905014 	ldr	r5, [r0, #20]
  1439dc:	e24dd014 	sub	sp, sp, #20
  1439e0:	e0455003 	sub	r5, r5, r3
  1439e4:	e88d0028 	stm	sp, {r3, r5}
  1439e8:	e1a06000 	mov	r6, r0
  1439ec:	e1a08002 	mov	r8, r2
  1439f0:	e3a07002 	mov	r7, #2
  1439f4:	e58d200c 	str	r2, [sp, #12]
  1439f8:	e58d1008 	str	r1, [sp, #8]
  1439fc:	e0855002 	add	r5, r5, r2
  143a00:	e1a0400d 	mov	r4, sp
  143a04:	ea00000d 	b	143a40 <__stdio_write+0x70>
  143a08:	e3500000 	cmp	r0, #0
  143a0c:	ba000020 	blt	143a94 <__stdio_write+0xc4>
  143a10:	e5943004 	ldr	r3, [r4, #4]
  143a14:	e0455000 	sub	r5, r5, r0
  143a18:	e1500003 	cmp	r0, r3
  143a1c:	80400003 	subhi	r0, r0, r3
  143a20:	8594300c 	ldrhi	r3, [r4, #12]
  143a24:	82844008 	addhi	r4, r4, #8
  143a28:	e5942000 	ldr	r2, [r4]
  143a2c:	e0433000 	sub	r3, r3, r0
  143a30:	e0820000 	add	r0, r2, r0
  143a34:	82477001 	subhi	r7, r7, #1
  143a38:	e5843004 	str	r3, [r4, #4]
  143a3c:	e5840000 	str	r0, [r4]
  143a40:	e3a00092 	mov	r0, #146	; 0x92
  143a44:	e596903c 	ldr	r9, [r6, #60]	; 0x3c
  143a48:	ebffe2d2 	bl	13c598 <get_rtt_syscall>
  143a4c:	e2503000 	subs	r3, r0, #0
  143a50:	0a00001c 	beq	143ac8 <__stdio_write+0xf8>
  143a54:	e1a00009 	mov	r0, r9
  143a58:	e1a02007 	mov	r2, r7
  143a5c:	e1a01004 	mov	r1, r4
  143a60:	e12fff33 	blx	r3
  143a64:	ebffe300 	bl	13c66c <__syscall_ret>
  143a68:	e1500005 	cmp	r0, r5
  143a6c:	1affffe5 	bne	143a08 <__stdio_write+0x38>
  143a70:	e1a00008 	mov	r0, r8
  143a74:	e596202c 	ldr	r2, [r6, #44]	; 0x2c
  143a78:	e5963030 	ldr	r3, [r6, #48]	; 0x30
  143a7c:	e586201c 	str	r2, [r6, #28]
  143a80:	e0823003 	add	r3, r2, r3
  143a84:	e5862014 	str	r2, [r6, #20]
  143a88:	e5863010 	str	r3, [r6, #16]
  143a8c:	e28dd014 	add	sp, sp, #20
  143a90:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  143a94:	e3a00000 	mov	r0, #0
  143a98:	e5963000 	ldr	r3, [r6]
  143a9c:	e3570002 	cmp	r7, #2
  143aa0:	e3833020 	orr	r3, r3, #32
  143aa4:	e5863000 	str	r3, [r6]
  143aa8:	e5860010 	str	r0, [r6, #16]
  143aac:	e586001c 	str	r0, [r6, #28]
  143ab0:	e5860014 	str	r0, [r6, #20]
  143ab4:	0afffff4 	beq	143a8c <__stdio_write+0xbc>
  143ab8:	e5940004 	ldr	r0, [r4, #4]
  143abc:	e0480000 	sub	r0, r8, r0
  143ac0:	e28dd014 	add	sp, sp, #20
  143ac4:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
  143ac8:	e1a00003 	mov	r0, r3
  143acc:	eaffffe4 	b	143a64 <__stdio_write+0x94>

00143ad0 <__stdout_write>:
  143ad0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
  143ad4:	e1a04000 	mov	r4, r0
  143ad8:	e5900000 	ldr	r0, [r0]
  143adc:	e59f3060 	ldr	r3, [pc, #96]	; 143b44 <__stdout_write+0x74>
  143ae0:	e3100040 	tst	r0, #64	; 0x40
  143ae4:	e24dd00c 	sub	sp, sp, #12
  143ae8:	e1a05001 	mov	r5, r1
  143aec:	e1a06002 	mov	r6, r2
  143af0:	e5843024 	str	r3, [r4, #36]	; 0x24
  143af4:	0a000005 	beq	143b10 <__stdout_write+0x40>
  143af8:	e1a02006 	mov	r2, r6
  143afc:	e1a01005 	mov	r1, r5
  143b00:	e1a00004 	mov	r0, r4
  143b04:	ebffffb1 	bl	1439d0 <__stdio_write>
  143b08:	e28dd00c 	add	sp, sp, #12
  143b0c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
  143b10:	e3a00036 	mov	r0, #54	; 0x36
  143b14:	e594703c 	ldr	r7, [r4, #60]	; 0x3c
  143b18:	ebffe29e 	bl	13c598 <get_rtt_syscall>
  143b1c:	e2503000 	subs	r3, r0, #0
  143b20:	0afffff4 	beq	143af8 <__stdout_write+0x28>
  143b24:	e1a0200d 	mov	r2, sp
  143b28:	e1a00007 	mov	r0, r7
  143b2c:	e59f1014 	ldr	r1, [pc, #20]	; 143b48 <__stdout_write+0x78>
  143b30:	e12fff33 	blx	r3
  143b34:	e3500000 	cmp	r0, #0
  143b38:	13e03000 	mvnne	r3, #0
  143b3c:	15843050 	strne	r3, [r4, #80]	; 0x50
  143b40:	eaffffec 	b	143af8 <__stdout_write+0x28>
  143b44:	001439d0 	.word	0x001439d0
  143b48:	00005413 	.word	0x00005413

00143b4c <__towrite>:
  143b4c:	e1a03000 	mov	r3, r0
  143b50:	e5901048 	ldr	r1, [r0, #72]	; 0x48
  143b54:	e5900000 	ldr	r0, [r0]
  143b58:	e2412001 	sub	r2, r1, #1
  143b5c:	e1822001 	orr	r2, r2, r1
  143b60:	e2101008 	ands	r1, r0, #8
  143b64:	e5832048 	str	r2, [r3, #72]	; 0x48
  143b68:	1a000009 	bne	143b94 <__towrite+0x48>
  143b6c:	e593c02c 	ldr	ip, [r3, #44]	; 0x2c
  143b70:	e5932030 	ldr	r2, [r3, #48]	; 0x30
  143b74:	e1a00001 	mov	r0, r1
  143b78:	e08c2002 	add	r2, ip, r2
  143b7c:	e5831008 	str	r1, [r3, #8]
  143b80:	e5831004 	str	r1, [r3, #4]
  143b84:	e583c01c 	str	ip, [r3, #28]
  143b88:	e583c014 	str	ip, [r3, #20]
  143b8c:	e5832010 	str	r2, [r3, #16]
  143b90:	e12fff1e 	bx	lr
  143b94:	e3800020 	orr	r0, r0, #32
  143b98:	e5830000 	str	r0, [r3]
  143b9c:	e3e00000 	mvn	r0, #0
  143ba0:	e12fff1e 	bx	lr

00143ba4 <__towrite_needs_stdio_exit>:
  143ba4:	ea000336 	b	144884 <__stdio_exit>

00143ba8 <locking_putc>:
  143ba8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  143bac:	e1a05001 	mov	r5, r1
  143bb0:	e1a04000 	mov	r4, r0
  143bb4:	e59f7110 	ldr	r7, [pc, #272]	; 143ccc <locking_putc+0x124>
  143bb8:	e281604c 	add	r6, r1, #76	; 0x4c
  143bbc:	ea000002 	b	143bcc <locking_putc+0x24>
  143bc0:	e595304c 	ldr	r3, [r5, #76]	; 0x4c
  143bc4:	e3530000 	cmp	r3, #0
  143bc8:	1a000021 	bne	143c54 <locking_putc+0xac>
  143bcc:	e3a00000 	mov	r0, #0
  143bd0:	e3e01103 	mvn	r1, #-1073741824	; 0xc0000000
  143bd4:	e1a02006 	mov	r2, r6
  143bd8:	e5973000 	ldr	r3, [r7]
  143bdc:	e12fff33 	blx	r3
  143be0:	e3500000 	cmp	r0, #0
  143be4:	1afffff5 	bne	143bc0 <locking_putc+0x18>
  143be8:	e5953050 	ldr	r3, [r5, #80]	; 0x50
  143bec:	e20480ff 	and	r8, r4, #255	; 0xff
  143bf0:	e1530008 	cmp	r3, r8
  143bf4:	0a00001c 	beq	143c6c <locking_putc+0xc4>
  143bf8:	e5953014 	ldr	r3, [r5, #20]
  143bfc:	e5952010 	ldr	r2, [r5, #16]
  143c00:	e1530002 	cmp	r3, r2
  143c04:	0a000018 	beq	143c6c <locking_putc+0xc4>
  143c08:	e2832001 	add	r2, r3, #1
  143c0c:	e5852014 	str	r2, [r5, #20]
  143c10:	e5c34000 	strb	r4, [r3]
  143c14:	e595404c 	ldr	r4, [r5, #76]	; 0x4c
  143c18:	ea000002 	b	143c28 <locking_putc+0x80>
  143c1c:	e595304c 	ldr	r3, [r5, #76]	; 0x4c
  143c20:	e1540003 	cmp	r4, r3
  143c24:	1afffffa 	bne	143c14 <locking_putc+0x6c>
  143c28:	e1a00004 	mov	r0, r4
  143c2c:	e3a01000 	mov	r1, #0
  143c30:	e1a02006 	mov	r2, r6
  143c34:	e5973000 	ldr	r3, [r7]
  143c38:	e12fff33 	blx	r3
  143c3c:	e1500001 	cmp	r0, r1
  143c40:	1afffff5 	bne	143c1c <locking_putc+0x74>
  143c44:	e3140101 	tst	r4, #1073741824	; 0x40000000
  143c48:	1a00000c 	bne	143c80 <locking_putc+0xd8>
  143c4c:	e1a00008 	mov	r0, r8
  143c50:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  143c54:	e1a00005 	mov	r0, r5
  143c58:	ebfffe9d 	bl	1436d4 <__lockfile>
  143c5c:	e5953050 	ldr	r3, [r5, #80]	; 0x50
  143c60:	e20480ff 	and	r8, r4, #255	; 0xff
  143c64:	e1530008 	cmp	r3, r8
  143c68:	1affffe2 	bne	143bf8 <locking_putc+0x50>
  143c6c:	e1a01008 	mov	r1, r8
  143c70:	e1a00005 	mov	r0, r5
  143c74:	ebffff09 	bl	1438a0 <__overflow>
  143c78:	e1a08000 	mov	r8, r0
  143c7c:	eaffffe4 	b	143c14 <locking_putc+0x6c>
  143c80:	e3a000f0 	mov	r0, #240	; 0xf0
  143c84:	ebffe243 	bl	13c598 <get_rtt_syscall>
  143c88:	e2503000 	subs	r3, r0, #0
  143c8c:	0affffee 	beq	143c4c <locking_putc+0xa4>
  143c90:	e3a02001 	mov	r2, #1
  143c94:	e3a01081 	mov	r1, #129	; 0x81
  143c98:	e1a00006 	mov	r0, r6
  143c9c:	e12fff33 	blx	r3
  143ca0:	e3700026 	cmn	r0, #38	; 0x26
  143ca4:	1affffe8 	bne	143c4c <locking_putc+0xa4>
  143ca8:	e3a000f0 	mov	r0, #240	; 0xf0
  143cac:	ebffe239 	bl	13c598 <get_rtt_syscall>
  143cb0:	e2503000 	subs	r3, r0, #0
  143cb4:	0affffe4 	beq	143c4c <locking_putc+0xa4>
  143cb8:	e3a02001 	mov	r2, #1
  143cbc:	e1a00006 	mov	r0, r6
  143cc0:	e1a01002 	mov	r1, r2
  143cc4:	e12fff33 	blx	r3
  143cc8:	eaffffdf 	b	143c4c <locking_putc+0xa4>
  143ccc:	0014e3d8 	.word	0x0014e3d8

00143cd0 <fputc>:
  143cd0:	e591204c 	ldr	r2, [r1, #76]	; 0x4c
  143cd4:	e1a03001 	mov	r3, r1
  143cd8:	e3520000 	cmp	r2, #0
  143cdc:	e1a0c000 	mov	ip, r0
  143ce0:	ba00001d 	blt	143d5c <fputc+0x8c>
  143ce4:	0a000017 	beq	143d48 <fputc+0x78>
  143ce8:	e59f10a8 	ldr	r1, [pc, #168]	; 143d98 <fputc+0xc8>
  143cec:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
  143cf0:	e5910000 	ldr	r0, [r1]
  143cf4:	e12fff30 	blx	r0
  143cf8:	e510105c 	ldr	r1, [r0, #-92]	; 0xffffffa4
  143cfc:	e3c22101 	bic	r2, r2, #1073741824	; 0x40000000
  143d00:	e1520001 	cmp	r2, r1
  143d04:	0a000003 	beq	143d18 <fputc+0x48>
  143d08:	e1a01003 	mov	r1, r3
  143d0c:	e1a0000c 	mov	r0, ip
  143d10:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  143d14:	eaffffa3 	b	143ba8 <locking_putc>
  143d18:	e5932050 	ldr	r2, [r3, #80]	; 0x50
  143d1c:	e20c00ff 	and	r0, ip, #255	; 0xff
  143d20:	e1500002 	cmp	r0, r2
  143d24:	0a000008 	beq	143d4c <fputc+0x7c>
  143d28:	e5932014 	ldr	r2, [r3, #20]
  143d2c:	e5931010 	ldr	r1, [r3, #16]
  143d30:	e1520001 	cmp	r2, r1
  143d34:	0a000004 	beq	143d4c <fputc+0x7c>
  143d38:	e2821001 	add	r1, r2, #1
  143d3c:	e5831014 	str	r1, [r3, #20]
  143d40:	e5c2c000 	strb	ip, [r2]
  143d44:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
  143d48:	eaffff96 	b	143ba8 <locking_putc>
  143d4c:	e1a01000 	mov	r1, r0
  143d50:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
  143d54:	e1a00003 	mov	r0, r3
  143d58:	eafffed0 	b	1438a0 <__overflow>
  143d5c:	e5912050 	ldr	r2, [r1, #80]	; 0x50
  143d60:	e20000ff 	and	r0, r0, #255	; 0xff
  143d64:	e1500002 	cmp	r0, r2
  143d68:	0a000007 	beq	143d8c <fputc+0xbc>
  143d6c:	e5912014 	ldr	r2, [r1, #20]
  143d70:	e5911010 	ldr	r1, [r1, #16]
  143d74:	e1520001 	cmp	r2, r1
  143d78:	0a000003 	beq	143d8c <fputc+0xbc>
  143d7c:	e2821001 	add	r1, r2, #1
  143d80:	e5831014 	str	r1, [r3, #20]
  143d84:	e5c2c000 	strb	ip, [r2]
  143d88:	e12fff1e 	bx	lr
  143d8c:	e1a01000 	mov	r1, r0
  143d90:	e1a00003 	mov	r0, r3
  143d94:	eafffec1 	b	1438a0 <__overflow>
  143d98:	0014e3dc 	.word	0x0014e3dc

00143d9c <fputs>:
  143d9c:	e92d4070 	push	{r4, r5, r6, lr}
  143da0:	e1a06001 	mov	r6, r1
  143da4:	e1a05000 	mov	r5, r0
  143da8:	ebfff63c 	bl	1416a0 <strlen>
  143dac:	e1a03006 	mov	r3, r6
  143db0:	e1a04000 	mov	r4, r0
  143db4:	e1a02000 	mov	r2, r0
  143db8:	e3a01001 	mov	r1, #1
  143dbc:	e1a00005 	mov	r0, r5
  143dc0:	eb000041 	bl	143ecc <fwrite>
  143dc4:	e0500004 	subs	r0, r0, r4
  143dc8:	13e00000 	mvnne	r0, #0
  143dcc:	e8bd8070 	pop	{r4, r5, r6, pc}

00143dd0 <__fwritex>:
  143dd0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  143dd4:	e5924010 	ldr	r4, [r2, #16]
  143dd8:	e1a05002 	mov	r5, r2
  143ddc:	e3540000 	cmp	r4, #0
  143de0:	e1a06000 	mov	r6, r0
  143de4:	e1a07001 	mov	r7, r1
  143de8:	0a000009 	beq	143e14 <__fwritex+0x44>
  143dec:	e5950014 	ldr	r0, [r5, #20]
  143df0:	e0444000 	sub	r4, r4, r0
  143df4:	e1540007 	cmp	r4, r7
  143df8:	2a00000b 	bcs	143e2c <__fwritex+0x5c>
  143dfc:	e1a02007 	mov	r2, r7
  143e00:	e1a01006 	mov	r1, r6
  143e04:	e5953024 	ldr	r3, [r5, #36]	; 0x24
  143e08:	e1a00005 	mov	r0, r5
  143e0c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
  143e10:	e12fff13 	bx	r3
  143e14:	e1a00002 	mov	r0, r2
  143e18:	ebffff4b 	bl	143b4c <__towrite>
  143e1c:	e3500000 	cmp	r0, #0
  143e20:	1a000027 	bne	143ec4 <__fwritex+0xf4>
  143e24:	e5954010 	ldr	r4, [r5, #16]
  143e28:	eaffffef 	b	143dec <__fwritex+0x1c>
  143e2c:	e5953050 	ldr	r3, [r5, #80]	; 0x50
  143e30:	e3530000 	cmp	r3, #0
  143e34:	ba00000d 	blt	143e70 <__fwritex+0xa0>
  143e38:	e3570000 	cmp	r7, #0
  143e3c:	0a00000b 	beq	143e70 <__fwritex+0xa0>
  143e40:	e2473001 	sub	r3, r7, #1
  143e44:	e7d62003 	ldrb	r2, [r6, r3]
  143e48:	e0863003 	add	r3, r6, r3
  143e4c:	e352000a 	cmp	r2, #10
  143e50:	1a000003 	bne	143e64 <__fwritex+0x94>
  143e54:	ea00000e 	b	143e94 <__fwritex+0xc4>
  143e58:	e5732001 	ldrb	r2, [r3, #-1]!
  143e5c:	e352000a 	cmp	r2, #10
  143e60:	0a00000c 	beq	143e98 <__fwritex+0xc8>
  143e64:	e1530006 	cmp	r3, r6
  143e68:	e0434006 	sub	r4, r3, r6
  143e6c:	1afffff9 	bne	143e58 <__fwritex+0x88>
  143e70:	e1a04007 	mov	r4, r7
  143e74:	e1a02004 	mov	r2, r4
  143e78:	e1a01006 	mov	r1, r6
  143e7c:	ebfff43e 	bl	140f7c <memcpy>
  143e80:	e5953014 	ldr	r3, [r5, #20]
  143e84:	e1a00007 	mov	r0, r7
  143e88:	e0834004 	add	r4, r3, r4
  143e8c:	e5854014 	str	r4, [r5, #20]
  143e90:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  143e94:	e1a04007 	mov	r4, r7
  143e98:	e5953024 	ldr	r3, [r5, #36]	; 0x24
  143e9c:	e1a02004 	mov	r2, r4
  143ea0:	e1a01006 	mov	r1, r6
  143ea4:	e1a00005 	mov	r0, r5
  143ea8:	e12fff33 	blx	r3
  143eac:	e1500004 	cmp	r0, r4
  143eb0:	38bd81f0 	popcc	{r4, r5, r6, r7, r8, pc}
  143eb4:	e0866004 	add	r6, r6, r4
  143eb8:	e5950014 	ldr	r0, [r5, #20]
  143ebc:	e0474004 	sub	r4, r7, r4
  143ec0:	eaffffeb 	b	143e74 <__fwritex+0xa4>
  143ec4:	e1a00004 	mov	r0, r4
  143ec8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00143ecc <fwrite>:
  143ecc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  143ed0:	e1a05003 	mov	r5, r3
  143ed4:	e593304c 	ldr	r3, [r3, #76]	; 0x4c
  143ed8:	e3510000 	cmp	r1, #0
  143edc:	e1a04002 	mov	r4, r2
  143ee0:	11a04002 	movne	r4, r2
  143ee4:	03a04000 	moveq	r4, #0
  143ee8:	e3530000 	cmp	r3, #0
  143eec:	e1a06001 	mov	r6, r1
  143ef0:	e0070192 	mul	r7, r2, r1
  143ef4:	aa000009 	bge	143f20 <fwrite+0x54>
  143ef8:	e1a02005 	mov	r2, r5
  143efc:	e1a01007 	mov	r1, r7
  143f00:	ebffffb2 	bl	143dd0 <__fwritex>
  143f04:	e1a08000 	mov	r8, r0
  143f08:	e1570008 	cmp	r7, r8
  143f0c:	0a000012 	beq	143f5c <fwrite+0x90>
  143f10:	e1a01006 	mov	r1, r6
  143f14:	e1a00008 	mov	r0, r8
  143f18:	ebffd2cf 	bl	138a5c <__udivsi3>
  143f1c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
  143f20:	e1a08000 	mov	r8, r0
  143f24:	e1a00005 	mov	r0, r5
  143f28:	ebfffde9 	bl	1436d4 <__lockfile>
  143f2c:	e1a02005 	mov	r2, r5
  143f30:	e1a09000 	mov	r9, r0
  143f34:	e1a01007 	mov	r1, r7
  143f38:	e1a00008 	mov	r0, r8
  143f3c:	ebffffa3 	bl	143dd0 <__fwritex>
  143f40:	e3590000 	cmp	r9, #0
  143f44:	e1a08000 	mov	r8, r0
  143f48:	0affffee 	beq	143f08 <fwrite+0x3c>
  143f4c:	e1a00005 	mov	r0, r5
  143f50:	ebfffe2c 	bl	143808 <__unlockfile>
  143f54:	e1570008 	cmp	r7, r8
  143f58:	1affffec 	bne	143f10 <fwrite+0x44>
  143f5c:	e1a00004 	mov	r0, r4
  143f60:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

00143f64 <memchr>:
  143f64:	e3100003 	tst	r0, #3
  143f68:	e20110ff 	and	r1, r1, #255	; 0xff
  143f6c:	0a000010 	beq	143fb4 <memchr+0x50>
  143f70:	e3520000 	cmp	r2, #0
  143f74:	0a000031 	beq	144040 <memchr+0xdc>
  143f78:	e5d03000 	ldrb	r3, [r0]
  143f7c:	e1530001 	cmp	r3, r1
  143f80:	0a00003e 	beq	144080 <memchr+0x11c>
  143f84:	e2803001 	add	r3, r0, #1
  143f88:	ea000005 	b	143fa4 <memchr+0x40>
  143f8c:	e3520000 	cmp	r2, #0
  143f90:	0a00002a 	beq	144040 <memchr+0xdc>
  143f94:	e5d3c000 	ldrb	ip, [r3]
  143f98:	e2833001 	add	r3, r3, #1
  143f9c:	e15c0001 	cmp	ip, r1
  143fa0:	0a000036 	beq	144080 <memchr+0x11c>
  143fa4:	e3130003 	tst	r3, #3
  143fa8:	e2422001 	sub	r2, r2, #1
  143fac:	e1a00003 	mov	r0, r3
  143fb0:	1afffff5 	bne	143f8c <memchr+0x28>
  143fb4:	e3520000 	cmp	r2, #0
  143fb8:	0a000020 	beq	144040 <memchr+0xdc>
  143fbc:	e5d03000 	ldrb	r3, [r0]
  143fc0:	e1530001 	cmp	r3, r1
  143fc4:	0a00002d 	beq	144080 <memchr+0x11c>
  143fc8:	e92d4070 	push	{r4, r5, r6, lr}
  143fcc:	e3520003 	cmp	r2, #3
  143fd0:	e0814401 	add	r4, r1, r1, lsl #8
  143fd4:	e0844804 	add	r4, r4, r4, lsl #16
  143fd8:	9a00001d 	bls	144054 <memchr+0xf0>
  143fdc:	e5903000 	ldr	r3, [r0]
  143fe0:	e59f60cc 	ldr	r6, [pc, #204]	; 1440b4 <memchr+0x150>
  143fe4:	e0233004 	eor	r3, r3, r4
  143fe8:	e083c006 	add	ip, r3, r6
  143fec:	e59f50c4 	ldr	r5, [pc, #196]	; 1440b8 <memchr+0x154>
  143ff0:	e1cc3003 	bic	r3, ip, r3
  143ff4:	e1130005 	tst	r3, r5
  143ff8:	1a000015 	bne	144054 <memchr+0xf0>
  143ffc:	e280e004 	add	lr, r0, #4
  144000:	ea000006 	b	144020 <memchr+0xbc>
  144004:	e59e3000 	ldr	r3, [lr]
  144008:	e28ee004 	add	lr, lr, #4
  14400c:	e0233004 	eor	r3, r3, r4
  144010:	e083c006 	add	ip, r3, r6
  144014:	e1cc3003 	bic	r3, ip, r3
  144018:	e1130005 	tst	r3, r5
  14401c:	1a000009 	bne	144048 <memchr+0xe4>
  144020:	e2422004 	sub	r2, r2, #4
  144024:	e3520003 	cmp	r2, #3
  144028:	e1a0000e 	mov	r0, lr
  14402c:	8afffff4 	bhi	144004 <memchr+0xa0>
  144030:	e3520000 	cmp	r2, #0
  144034:	1a000003 	bne	144048 <memchr+0xe4>
  144038:	e3a00000 	mov	r0, #0
  14403c:	e8bd8070 	pop	{r4, r5, r6, pc}
  144040:	e3a00000 	mov	r0, #0
  144044:	e12fff1e 	bx	lr
  144048:	e5d03000 	ldrb	r3, [r0]
  14404c:	e1510003 	cmp	r1, r3
  144050:	08bd8070 	popeq	{r4, r5, r6, pc}
  144054:	e0802002 	add	r2, r0, r2
  144058:	e2803001 	add	r3, r0, #1
  14405c:	ea000003 	b	144070 <memchr+0x10c>
  144060:	e5d3c000 	ldrb	ip, [r3]
  144064:	e2833001 	add	r3, r3, #1
  144068:	e15c0001 	cmp	ip, r1
  14406c:	08bd8070 	popeq	{r4, r5, r6, pc}
  144070:	e1520003 	cmp	r2, r3
  144074:	e1a00003 	mov	r0, r3
  144078:	1afffff8 	bne	144060 <memchr+0xfc>
  14407c:	eaffffed 	b	144038 <memchr+0xd4>
  144080:	e5d03000 	ldrb	r3, [r0]
  144084:	e1510003 	cmp	r1, r3
  144088:	012fff1e 	bxeq	lr
  14408c:	e0802002 	add	r2, r0, r2
  144090:	e2803001 	add	r3, r0, #1
  144094:	e1520003 	cmp	r2, r3
  144098:	e1a00003 	mov	r0, r3
  14409c:	0affffe7 	beq	144040 <memchr+0xdc>
  1440a0:	e5d3c000 	ldrb	ip, [r3]
  1440a4:	e2833001 	add	r3, r3, #1
  1440a8:	e15c0001 	cmp	ip, r1
  1440ac:	1afffff8 	bne	144094 <memchr+0x130>
  1440b0:	e12fff1e 	bx	lr
  1440b4:	fefefeff 	.word	0xfefefeff
  1440b8:	80808080 	.word	0x80808080

001440bc <__stpcpy>:
  1440bc:	e0203001 	eor	r3, r0, r1
  1440c0:	e3130003 	tst	r3, #3
  1440c4:	e92d4010 	push	{r4, lr}
  1440c8:	1a00001f 	bne	14414c <__stpcpy+0x90>
  1440cc:	e3110003 	tst	r1, #3
  1440d0:	0a00000e 	beq	144110 <__stpcpy+0x54>
  1440d4:	e5d13000 	ldrb	r3, [r1]
  1440d8:	e3530000 	cmp	r3, #0
  1440dc:	e5c03000 	strb	r3, [r0]
  1440e0:	08bd8010 	popeq	{r4, pc}
  1440e4:	e2813001 	add	r3, r1, #1
  1440e8:	e2802001 	add	r2, r0, #1
  1440ec:	ea000003 	b	144100 <__stpcpy+0x44>
  1440f0:	e4d31001 	ldrb	r1, [r3], #1
  1440f4:	e3510000 	cmp	r1, #0
  1440f8:	e4c21001 	strb	r1, [r2], #1
  1440fc:	08bd8010 	popeq	{r4, pc}
  144100:	e3130003 	tst	r3, #3
  144104:	e1a01003 	mov	r1, r3
  144108:	e1a00002 	mov	r0, r2
  14410c:	1afffff7 	bne	1440f0 <__stpcpy+0x34>
  144110:	e5913000 	ldr	r3, [r1]
  144114:	e59f405c 	ldr	r4, [pc, #92]	; 144178 <__stpcpy+0xbc>
  144118:	e59fe05c 	ldr	lr, [pc, #92]	; 14417c <__stpcpy+0xc0>
  14411c:	e0832004 	add	r2, r3, r4
  144120:	e1c22003 	bic	r2, r2, r3
  144124:	e112000e 	tst	r2, lr
  144128:	1a000007 	bne	14414c <__stpcpy+0x90>
  14412c:	e281c004 	add	ip, r1, #4
  144130:	e4803004 	str	r3, [r0], #4
  144134:	e1a0100c 	mov	r1, ip
  144138:	e49c3004 	ldr	r3, [ip], #4
  14413c:	e0832004 	add	r2, r3, r4
  144140:	e1c22003 	bic	r2, r2, r3
  144144:	e112000e 	tst	r2, lr
  144148:	0afffff8 	beq	144130 <__stpcpy+0x74>
  14414c:	e5d13000 	ldrb	r3, [r1]
  144150:	e3530000 	cmp	r3, #0
  144154:	e5c03000 	strb	r3, [r0]
  144158:	08bd8010 	popeq	{r4, pc}
  14415c:	e2803001 	add	r3, r0, #1
  144160:	e5f12001 	ldrb	r2, [r1, #1]!
  144164:	e1a00003 	mov	r0, r3
  144168:	e3520000 	cmp	r2, #0
  14416c:	e4c32001 	strb	r2, [r3], #1
  144170:	1afffffa 	bne	144160 <__stpcpy+0xa4>
  144174:	e8bd8010 	pop	{r4, pc}
  144178:	fefefeff 	.word	0xfefefeff
  14417c:	80808080 	.word	0x80808080

00144180 <__stpncpy>:
  144180:	e0203001 	eor	r3, r0, r1
  144184:	e3130003 	tst	r3, #3
  144188:	e92d4070 	push	{r4, r5, r6, lr}
  14418c:	1a000030 	bne	144254 <__stpncpy+0xd4>
  144190:	e3110003 	tst	r1, #3
  144194:	0a000044 	beq	1442ac <__stpncpy+0x12c>
  144198:	e3520000 	cmp	r2, #0
  14419c:	0a000040 	beq	1442a4 <__stpncpy+0x124>
  1441a0:	e5d13000 	ldrb	r3, [r1]
  1441a4:	e3530000 	cmp	r3, #0
  1441a8:	e5c03000 	strb	r3, [r0]
  1441ac:	0a00003c 	beq	1442a4 <__stpncpy+0x124>
  1441b0:	e2813001 	add	r3, r1, #1
  1441b4:	e2800001 	add	r0, r0, #1
  1441b8:	ea000005 	b	1441d4 <__stpncpy+0x54>
  1441bc:	e3520000 	cmp	r2, #0
  1441c0:	0a000032 	beq	144290 <__stpncpy+0x110>
  1441c4:	e4d31001 	ldrb	r1, [r3], #1
  1441c8:	e3510000 	cmp	r1, #0
  1441cc:	e4c01001 	strb	r1, [r0], #1
  1441d0:	0a00002e 	beq	144290 <__stpncpy+0x110>
  1441d4:	e3130003 	tst	r3, #3
  1441d8:	e2422001 	sub	r2, r2, #1
  1441dc:	e1a01003 	mov	r1, r3
  1441e0:	e1a04000 	mov	r4, r0
  1441e4:	1afffff4 	bne	1441bc <__stpncpy+0x3c>
  1441e8:	e3520000 	cmp	r2, #0
  1441ec:	0a000027 	beq	144290 <__stpncpy+0x110>
  1441f0:	e5d1c000 	ldrb	ip, [r1]
  1441f4:	e35c0000 	cmp	ip, #0
  1441f8:	0a000024 	beq	144290 <__stpncpy+0x110>
  1441fc:	e3520003 	cmp	r2, #3
  144200:	9a00002b 	bls	1442b4 <__stpncpy+0x134>
  144204:	e5913000 	ldr	r3, [r1]
  144208:	e59f60b0 	ldr	r6, [pc, #176]	; 1442c0 <__stpncpy+0x140>
  14420c:	e59f50b0 	ldr	r5, [pc, #176]	; 1442c4 <__stpncpy+0x144>
  144210:	e0830006 	add	r0, r3, r6
  144214:	e1c00003 	bic	r0, r0, r3
  144218:	e1100005 	tst	r0, r5
  14421c:	1a000024 	bne	1442b4 <__stpncpy+0x134>
  144220:	e281e004 	add	lr, r1, #4
  144224:	ea000004 	b	14423c <__stpncpy+0xbc>
  144228:	e49e3004 	ldr	r3, [lr], #4
  14422c:	e083c006 	add	ip, r3, r6
  144230:	e1ccc003 	bic	ip, ip, r3
  144234:	e11c0005 	tst	ip, r5
  144238:	1a000007 	bne	14425c <__stpncpy+0xdc>
  14423c:	e2422004 	sub	r2, r2, #4
  144240:	e4843004 	str	r3, [r4], #4
  144244:	e3520003 	cmp	r2, #3
  144248:	e1a00004 	mov	r0, r4
  14424c:	e1a0100e 	mov	r1, lr
  144250:	8afffff4 	bhi	144228 <__stpncpy+0xa8>
  144254:	e3520000 	cmp	r2, #0
  144258:	0a000011 	beq	1442a4 <__stpncpy+0x124>
  14425c:	e5d13000 	ldrb	r3, [r1]
  144260:	e3530000 	cmp	r3, #0
  144264:	e5c03000 	strb	r3, [r0]
  144268:	0a00000d 	beq	1442a4 <__stpncpy+0x124>
  14426c:	e2800001 	add	r0, r0, #1
  144270:	ea000003 	b	144284 <__stpncpy+0x104>
  144274:	e5f13001 	ldrb	r3, [r1, #1]!
  144278:	e3530000 	cmp	r3, #0
  14427c:	e4c03001 	strb	r3, [r0], #1
  144280:	0a000002 	beq	144290 <__stpncpy+0x110>
  144284:	e2522001 	subs	r2, r2, #1
  144288:	e1a04000 	mov	r4, r0
  14428c:	1afffff8 	bne	144274 <__stpncpy+0xf4>
  144290:	e3a01000 	mov	r1, #0
  144294:	e1a00004 	mov	r0, r4
  144298:	ebfff46f 	bl	14145c <memset>
  14429c:	e1a00004 	mov	r0, r4
  1442a0:	e8bd8070 	pop	{r4, r5, r6, pc}
  1442a4:	e1a04000 	mov	r4, r0
  1442a8:	eafffff8 	b	144290 <__stpncpy+0x110>
  1442ac:	e1a04000 	mov	r4, r0
  1442b0:	eaffffcc 	b	1441e8 <__stpncpy+0x68>
  1442b4:	e5c4c000 	strb	ip, [r4]
  1442b8:	e1a00004 	mov	r0, r4
  1442bc:	eaffffea 	b	14426c <__stpncpy+0xec>
  1442c0:	fefefeff 	.word	0xfefefeff
  1442c4:	80808080 	.word	0x80808080

001442c8 <strchr>:
  1442c8:	e92d4010 	push	{r4, lr}
  1442cc:	e1a04001 	mov	r4, r1
  1442d0:	eb000004 	bl	1442e8 <__strchrnul>
  1442d4:	e5d03000 	ldrb	r3, [r0]
  1442d8:	e20440ff 	and	r4, r4, #255	; 0xff
  1442dc:	e1540003 	cmp	r4, r3
  1442e0:	13a00000 	movne	r0, #0
  1442e4:	e8bd8010 	pop	{r4, pc}

001442e8 <__strchrnul>:
  1442e8:	e20110ff 	and	r1, r1, #255	; 0xff
  1442ec:	e3510000 	cmp	r1, #0
  1442f0:	e92d4070 	push	{r4, r5, r6, lr}
  1442f4:	e1a04000 	mov	r4, r0
  1442f8:	0a000031 	beq	1443c4 <__strchrnul+0xdc>
  1442fc:	e3100003 	tst	r0, #3
  144300:	0a00000e 	beq	144340 <__strchrnul+0x58>
  144304:	e5d02000 	ldrb	r2, [r0]
  144308:	e3520000 	cmp	r2, #0
  14430c:	0a00002f 	beq	1443d0 <__strchrnul+0xe8>
  144310:	e1510002 	cmp	r1, r2
  144314:	0a00002d 	beq	1443d0 <__strchrnul+0xe8>
  144318:	e2803001 	add	r3, r0, #1
  14431c:	ea000004 	b	144334 <__strchrnul+0x4c>
  144320:	e4d32001 	ldrb	r2, [r3], #1
  144324:	e3520000 	cmp	r2, #0
  144328:	08bd8070 	popeq	{r4, r5, r6, pc}
  14432c:	e1520001 	cmp	r2, r1
  144330:	08bd8070 	popeq	{r4, r5, r6, pc}
  144334:	e3130003 	tst	r3, #3
  144338:	e1a00003 	mov	r0, r3
  14433c:	1afffff7 	bne	144320 <__strchrnul+0x38>
  144340:	e590c000 	ldr	ip, [r0]
  144344:	e0815401 	add	r5, r1, r1, lsl #8
  144348:	e59f4088 	ldr	r4, [pc, #136]	; 1443d8 <__strchrnul+0xf0>
  14434c:	e0855805 	add	r5, r5, r5, lsl #16
  144350:	e025e00c 	eor	lr, r5, ip
  144354:	e08e2004 	add	r2, lr, r4
  144358:	e08c3004 	add	r3, ip, r4
  14435c:	e1c2200e 	bic	r2, r2, lr
  144360:	e1c3300c 	bic	r3, r3, ip
  144364:	e59f6070 	ldr	r6, [pc, #112]	; 1443dc <__strchrnul+0xf4>
  144368:	e1833002 	orr	r3, r3, r2
  14436c:	e1130006 	tst	r3, r6
  144370:	1a000008 	bne	144398 <__strchrnul+0xb0>
  144374:	e5b0c004 	ldr	ip, [r0, #4]!
  144378:	e02ce005 	eor	lr, ip, r5
  14437c:	e08e2004 	add	r2, lr, r4
  144380:	e08c3004 	add	r3, ip, r4
  144384:	e1c2200e 	bic	r2, r2, lr
  144388:	e1c3300c 	bic	r3, r3, ip
  14438c:	e1833002 	orr	r3, r3, r2
  144390:	e1130006 	tst	r3, r6
  144394:	0afffff6 	beq	144374 <__strchrnul+0x8c>
  144398:	e5d03000 	ldrb	r3, [r0]
  14439c:	e3530000 	cmp	r3, #0
  1443a0:	08bd8070 	popeq	{r4, r5, r6, pc}
  1443a4:	e1510003 	cmp	r1, r3
  1443a8:	08bd8070 	popeq	{r4, r5, r6, pc}
  1443ac:	e5f03001 	ldrb	r3, [r0, #1]!
  1443b0:	e3530000 	cmp	r3, #0
  1443b4:	08bd8070 	popeq	{r4, r5, r6, pc}
  1443b8:	e1530001 	cmp	r3, r1
  1443bc:	1afffffa 	bne	1443ac <__strchrnul+0xc4>
  1443c0:	e8bd8070 	pop	{r4, r5, r6, pc}
  1443c4:	ebfff4b5 	bl	1416a0 <strlen>
  1443c8:	e0840000 	add	r0, r4, r0
  1443cc:	e8bd8070 	pop	{r4, r5, r6, pc}
  1443d0:	e1a00004 	mov	r0, r4
  1443d4:	e8bd8070 	pop	{r4, r5, r6, pc}
  1443d8:	fefefeff 	.word	0xfefefeff
  1443dc:	80808080 	.word	0x80808080

001443e0 <__set_thread_area>:
  1443e0:	e59f3108 	ldr	r3, [pc, #264]	; 1444f0 <__set_thread_area+0x110>
  1443e4:	e92d4010 	push	{r4, lr}
  1443e8:	e5933000 	ldr	r3, [r3]
  1443ec:	e1a04000 	mov	r4, r0
  1443f0:	e3130902 	tst	r3, #32768	; 0x8000
  1443f4:	0a000017 	beq	144458 <__set_thread_area+0x78>
  1443f8:	e59f20f4 	ldr	r2, [pc, #244]	; 1444f4 <__set_thread_area+0x114>
  1443fc:	e59f10f4 	ldr	r1, [pc, #244]	; 1444f8 <__set_thread_area+0x118>
  144400:	e59f00f4 	ldr	r0, [pc, #244]	; 1444fc <__set_thread_area+0x11c>
  144404:	e59fc0f4 	ldr	ip, [pc, #244]	; 144500 <__set_thread_area+0x120>
  144408:	e59f30f4 	ldr	r3, [pc, #244]	; 144504 <__set_thread_area+0x124>
  14440c:	e5922010 	ldr	r2, [r2, #16]
  144410:	e580c000 	str	ip, [r0]
  144414:	e5831000 	str	r1, [r3]
  144418:	e5921000 	ldr	r1, [r2]
  14441c:	e3510000 	cmp	r1, #0
  144420:	0a000005 	beq	14443c <__set_thread_area+0x5c>
  144424:	e351000f 	cmp	r1, #15
  144428:	1a00001b 	bne	14449c <__set_thread_area+0xbc>
  14442c:	e5922004 	ldr	r2, [r2, #4]
  144430:	e5d21000 	ldrb	r1, [r2]
  144434:	e3510076 	cmp	r1, #118	; 0x76
  144438:	0a000021 	beq	1444c4 <__set_thread_area+0xe4>
  14443c:	e59f00c4 	ldr	r0, [pc, #196]	; 144508 <__set_thread_area+0x128>
  144440:	ebffe054 	bl	13c598 <get_rtt_syscall>
  144444:	e2503000 	subs	r3, r0, #0
  144448:	08bd8010 	popeq	{r4, pc}
  14444c:	e1a00004 	mov	r0, r4
  144450:	e8bd4010 	pop	{r4, lr}
  144454:	e12fff13 	bx	r3
  144458:	e3e03a0f 	mvn	r3, #61440	; 0xf000
  14445c:	e59f10a8 	ldr	r1, [pc, #168]	; 14450c <__set_thread_area+0x12c>
  144460:	e5132003 	ldr	r2, [r3, #-3]
  144464:	e59f30a4 	ldr	r3, [pc, #164]	; 144510 <__set_thread_area+0x130>
  144468:	e59f008c 	ldr	r0, [pc, #140]	; 1444fc <__set_thread_area+0x11c>
  14446c:	e5831000 	str	r1, [r3]
  144470:	e59fc09c 	ldr	ip, [pc, #156]	; 144514 <__set_thread_area+0x134>
  144474:	e59f3088 	ldr	r3, [pc, #136]	; 144504 <__set_thread_area+0x124>
  144478:	e2411040 	sub	r1, r1, #64	; 0x40
  14447c:	e3520001 	cmp	r2, #1
  144480:	e580c000 	str	ip, [r0]
  144484:	e5831000 	str	r1, [r3]
  144488:	da000009 	ble	1444b4 <__set_thread_area+0xd4>
  14448c:	e3520002 	cmp	r2, #2
  144490:	059f2080 	ldreq	r2, [pc, #128]	; 144518 <__set_thread_area+0x138>
  144494:	05832000 	streq	r2, [r3]
  144498:	eaffffe7 	b	14443c <__set_thread_area+0x5c>
  14449c:	e5b21008 	ldr	r1, [r2, #8]!
  1444a0:	e3510000 	cmp	r1, #0
  1444a4:	0affffe4 	beq	14443c <__set_thread_area+0x5c>
  1444a8:	e351000f 	cmp	r1, #15
  1444ac:	0affffde 	beq	14442c <__set_thread_area+0x4c>
  1444b0:	eafffff9 	b	14449c <__set_thread_area+0xbc>
  1444b4:	e7f000f0 	.word	0xe7f000f0
  1444b8:	e59f2058 	ldr	r2, [pc, #88]	; 144518 <__set_thread_area+0x138>
  1444bc:	e5832000 	str	r2, [r3]
  1444c0:	eaffffdd 	b	14443c <__set_thread_area+0x5c>
  1444c4:	e5d21001 	ldrb	r1, [r2, #1]
  1444c8:	e3510036 	cmp	r1, #54	; 0x36
  1444cc:	1affffda 	bne	14443c <__set_thread_area+0x5c>
  1444d0:	e5d22002 	ldrb	r2, [r2, #2]
  1444d4:	e2422030 	sub	r2, r2, #48	; 0x30
  1444d8:	e3520009 	cmp	r2, #9
  1444dc:	859f1038 	ldrhi	r1, [pc, #56]	; 14451c <__set_thread_area+0x13c>
  1444e0:	859f2038 	ldrhi	r2, [pc, #56]	; 144520 <__set_thread_area+0x140>
  1444e4:	85801000 	strhi	r1, [r0]
  1444e8:	85832000 	strhi	r2, [r3]
  1444ec:	eaffffd2 	b	14443c <__set_thread_area+0x5c>
  1444f0:	00576e80 	.word	0x00576e80
  1444f4:	00576e84 	.word	0x00576e84
  1444f8:	001420b8 	.word	0x001420b8
  1444fc:	0014e3d8 	.word	0x0014e3d8
  144500:	001420f8 	.word	0x001420f8
  144504:	0014e3d4 	.word	0x0014e3d4
  144508:	000f0005 	.word	0x000f0005
  14450c:	ffff0fe0 	.word	0xffff0fe0
  144510:	0014e3dc 	.word	0x0014e3dc
  144514:	ffff0fc0 	.word	0xffff0fc0
  144518:	00142090 	.word	0x00142090
  14451c:	001420d4 	.word	0x001420d4
  144520:	001420b0 	.word	0x001420b0

00144524 <__unmapself>:
  144524:	e3a07036 	mov	r7, #54	; 0x36
  144528:	ef000000 	svc	0x00000000
  14452c:	e3a07001 	mov	r7, #1
  144530:	ef000000 	svc	0x00000000

00144534 <__clone>:
  144534:	e92d00f0 	push	{r4, r5, r6, r7}
  144538:	e3a07082 	mov	r7, #130	; 0x82
  14453c:	e1a06003 	mov	r6, r3
  144540:	e1a05000 	mov	r5, r0
  144544:	e1a00002 	mov	r0, r2
  144548:	e3c1100f 	bic	r1, r1, #15
  14454c:	e59d2010 	ldr	r2, [sp, #16]
  144550:	e59d3014 	ldr	r3, [sp, #20]
  144554:	e59d4018 	ldr	r4, [sp, #24]
  144558:	e92d007f 	push	{r0, r1, r2, r3, r4, r5, r6}
  14455c:	e1a0000d 	mov	r0, sp
  144560:	ef000000 	svc	0x00000000
  144564:	e1100000 	tst	r0, r0
  144568:	0a000002 	beq	144578 <__clone+0x44>
  14456c:	e28dd01c 	add	sp, sp, #28
  144570:	e8bd00f0 	pop	{r4, r5, r6, r7}
  144574:	e12fff1e 	bx	lr
  144578:	e1a00006 	mov	r0, r6
  14457c:	e3150001 	tst	r5, #1
  144580:	1a000003 	bne	144594 <__clone+0x60>
  144584:	e1a0e00f 	mov	lr, pc
  144588:	e1a0f005 	mov	pc, r5
  14458c:	e3a07001 	mov	r7, #1
  144590:	ef000000 	svc	0x00000000
  144594:	e1a0e00f 	mov	lr, pc
  144598:	e12fff15 	bx	r5
  14459c:	eafffffa 	b	14458c <__clone+0x58>

001445a0 <__clock_gettime>:
  1445a0:	e92d4070 	push	{r4, r5, r6, lr}
  1445a4:	e1a04000 	mov	r4, r0
  1445a8:	e59f0074 	ldr	r0, [pc, #116]	; 144624 <__clock_gettime+0x84>
  1445ac:	e1a05001 	mov	r5, r1
  1445b0:	ebffdff8 	bl	13c598 <get_rtt_syscall>
  1445b4:	e2503000 	subs	r3, r0, #0
  1445b8:	0a000017 	beq	14461c <__clock_gettime+0x7c>
  1445bc:	e1a01005 	mov	r1, r5
  1445c0:	e1a00004 	mov	r0, r4
  1445c4:	e12fff33 	blx	r3
  1445c8:	e3700026 	cmn	r0, #38	; 0x26
  1445cc:	0a000001 	beq	1445d8 <__clock_gettime+0x38>
  1445d0:	e8bd4070 	pop	{r4, r5, r6, lr}
  1445d4:	eaffe024 	b	13c66c <__syscall_ret>
  1445d8:	e3540000 	cmp	r4, #0
  1445dc:	13e00015 	mvnne	r0, #21
  1445e0:	1afffffa 	bne	1445d0 <__clock_gettime+0x30>
  1445e4:	e3a0004e 	mov	r0, #78	; 0x4e
  1445e8:	ebffdfea 	bl	13c598 <get_rtt_syscall>
  1445ec:	e2503000 	subs	r3, r0, #0
  1445f0:	0a000002 	beq	144600 <__clock_gettime+0x60>
  1445f4:	e1a01004 	mov	r1, r4
  1445f8:	e1a00005 	mov	r0, r5
  1445fc:	e12fff33 	blx	r3
  144600:	e5953008 	ldr	r3, [r5, #8]
  144604:	e3a00000 	mov	r0, #0
  144608:	e0632283 	rsb	r2, r3, r3, lsl #5
  14460c:	e0833102 	add	r3, r3, r2, lsl #2
  144610:	e1a03183 	lsl	r3, r3, #3
  144614:	e5853008 	str	r3, [r5, #8]
  144618:	e8bd8070 	pop	{r4, r5, r6, pc}
  14461c:	e1a00003 	mov	r0, r3
  144620:	eaffffea 	b	1445d0 <__clock_gettime+0x30>
  144624:	00000107 	.word	0x00000107

00144628 <frexp>:
  144628:	e59fc09c 	ldr	ip, [pc, #156]	; 1446cc <frexp+0xa4>
  14462c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  144630:	e01c6a21 	ands	r6, ip, r1, lsr #20
  144634:	e1a04000 	mov	r4, r0
  144638:	e1a05001 	mov	r5, r1
  14463c:	1a000009 	bne	144668 <frexp+0x40>
  144640:	e1a07002 	mov	r7, r2
  144644:	e3a03000 	mov	r3, #0
  144648:	e3a02000 	mov	r2, #0
  14464c:	eb0002e1 	bl	1451d8 <__aeabi_dcmpeq>
  144650:	e3500000 	cmp	r0, #0
  144654:	0a000011 	beq	1446a0 <frexp+0x78>
  144658:	e5876000 	str	r6, [r7]
  14465c:	e1a00004 	mov	r0, r4
  144660:	e1a01005 	mov	r1, r5
  144664:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  144668:	e156000c 	cmp	r6, ip
  14466c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
  144670:	e3e00000 	mvn	r0, #0
  144674:	e0007004 	and	r7, r0, r4
  144678:	e3a04000 	mov	r4, #0
  14467c:	e59f104c 	ldr	r1, [pc, #76]	; 1446d0 <frexp+0xa8>
  144680:	e2463fff 	sub	r3, r6, #1020	; 0x3fc
  144684:	e0018005 	and	r8, r1, r5
  144688:	e59f5044 	ldr	r5, [pc, #68]	; 1446d4 <frexp+0xac>
  14468c:	e2433002 	sub	r3, r3, #2
  144690:	e5823000 	str	r3, [r2]
  144694:	e1870004 	orr	r0, r7, r4
  144698:	e1881005 	orr	r1, r8, r5
  14469c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  1446a0:	e59f3030 	ldr	r3, [pc, #48]	; 1446d8 <frexp+0xb0>
  1446a4:	e1a00004 	mov	r0, r4
  1446a8:	e1a01005 	mov	r1, r5
  1446ac:	e3a02000 	mov	r2, #0
  1446b0:	eb00017a 	bl	144ca0 <__aeabi_dmul>
  1446b4:	e1a02007 	mov	r2, r7
  1446b8:	ebffffda 	bl	144628 <frexp>
  1446bc:	e5973000 	ldr	r3, [r7]
  1446c0:	e2433040 	sub	r3, r3, #64	; 0x40
  1446c4:	e5873000 	str	r3, [r7]
  1446c8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
  1446cc:	000007ff 	.word	0x000007ff
  1446d0:	800fffff 	.word	0x800fffff
  1446d4:	3fe00000 	.word	0x3fe00000
  1446d8:	43f00000 	.word	0x43f00000

001446dc <wcrtomb>:
  1446dc:	e2502000 	subs	r2, r0, #0
  1446e0:	0a000025 	beq	14477c <wcrtomb+0xa0>
  1446e4:	e351007f 	cmp	r1, #127	; 0x7f
  1446e8:	9a000022 	bls	144778 <wcrtomb+0x9c>
  1446ec:	e59f0114 	ldr	r0, [pc, #276]	; 144808 <wcrtomb+0x12c>
  1446f0:	e92d4010 	push	{r4, lr}
  1446f4:	e5900000 	ldr	r0, [r0]
  1446f8:	e12fff30 	blx	r0
  1446fc:	e5100018 	ldr	r0, [r0, #-24]	; 0xffffffe8
  144700:	e1a03001 	mov	r3, r1
  144704:	e5900000 	ldr	r0, [r0]
  144708:	e1a0c002 	mov	ip, r2
  14470c:	e3500000 	cmp	r0, #0
  144710:	0a000025 	beq	1447ac <wcrtomb+0xd0>
  144714:	e3510b02 	cmp	r1, #2048	; 0x800
  144718:	3a00001a 	bcc	144788 <wcrtomb+0xac>
  14471c:	e2412a0e 	sub	r2, r1, #57344	; 0xe000
  144720:	e3510b36 	cmp	r1, #55296	; 0xd800
  144724:	23520a02 	cmpcs	r2, #8192	; 0x2000
  144728:	3a00002a 	bcc	1447d8 <wcrtomb+0xfc>
  14472c:	e2412801 	sub	r2, r1, #65536	; 0x10000
  144730:	e3520601 	cmp	r2, #1048576	; 0x100000
  144734:	2a000022 	bcs	1447c4 <wcrtomb+0xe8>
  144738:	e3e0e00f 	mvn	lr, #15
  14473c:	e3e0207f 	mvn	r2, #127	; 0x7f
  144740:	e18ee923 	orr	lr, lr, r3, lsr #18
  144744:	e203303f 	and	r3, r3, #63	; 0x3f
  144748:	e1823003 	orr	r3, r2, r3
  14474c:	e5cc3003 	strb	r3, [ip, #3]
  144750:	e3a03004 	mov	r3, #4
  144754:	e1a00701 	lsl	r0, r1, #14
  144758:	e1a01a01 	lsl	r1, r1, #20
  14475c:	e1820d20 	orr	r0, r2, r0, lsr #26
  144760:	e1821d21 	orr	r1, r2, r1, lsr #26
  144764:	e5cce000 	strb	lr, [ip]
  144768:	e5cc0001 	strb	r0, [ip, #1]
  14476c:	e5cc1002 	strb	r1, [ip, #2]
  144770:	e1a00003 	mov	r0, r3
  144774:	e8bd8010 	pop	{r4, pc}
  144778:	e5c21000 	strb	r1, [r2]
  14477c:	e3a03001 	mov	r3, #1
  144780:	e1a00003 	mov	r0, r3
  144784:	e12fff1e 	bx	lr
  144788:	e201203f 	and	r2, r1, #63	; 0x3f
  14478c:	e1e02c82 	mvn	r2, r2, lsl #25
  144790:	e3e0103f 	mvn	r1, #63	; 0x3f
  144794:	e1e02ca2 	mvn	r2, r2, lsr #25
  144798:	e1813323 	orr	r3, r1, r3, lsr #6
  14479c:	e5cc3000 	strb	r3, [ip]
  1447a0:	e5cc2001 	strb	r2, [ip, #1]
  1447a4:	e3a03002 	mov	r3, #2
  1447a8:	eafffff0 	b	144770 <wcrtomb+0x94>
  1447ac:	e2413cdf 	sub	r3, r1, #57088	; 0xdf00
  1447b0:	e2433080 	sub	r3, r3, #128	; 0x80
  1447b4:	e353007f 	cmp	r3, #127	; 0x7f
  1447b8:	95c21000 	strbls	r1, [r2]
  1447bc:	93a03001 	movls	r3, #1
  1447c0:	9affffea 	bls	144770 <wcrtomb+0x94>
  1447c4:	ebffd23d 	bl	1390c0 <__errno_location>
  1447c8:	e3a02054 	mov	r2, #84	; 0x54
  1447cc:	e3e03000 	mvn	r3, #0
  1447d0:	e5802000 	str	r2, [r0]
  1447d4:	eaffffe5 	b	144770 <wcrtomb+0x94>
  1447d8:	e3e0207f 	mvn	r2, #127	; 0x7f
  1447dc:	e3e0001f 	mvn	r0, #31
  1447e0:	e203e03f 	and	lr, r3, #63	; 0x3f
  1447e4:	e1a01a01 	lsl	r1, r1, #20
  1447e8:	e1803623 	orr	r3, r0, r3, lsr #12
  1447ec:	e1821d21 	orr	r1, r2, r1, lsr #26
  1447f0:	e182200e 	orr	r2, r2, lr
  1447f4:	e5cc3000 	strb	r3, [ip]
  1447f8:	e5cc1001 	strb	r1, [ip, #1]
  1447fc:	e5cc2002 	strb	r2, [ip, #2]
  144800:	e3a03003 	mov	r3, #3
  144804:	eaffffd9 	b	144770 <wcrtomb+0x94>
  144808:	0014e3dc 	.word	0x0014e3dc

0014480c <close_file>:
  14480c:	e92d4010 	push	{r4, lr}
  144810:	e2504000 	subs	r4, r0, #0
  144814:	e24dd008 	sub	sp, sp, #8
  144818:	0a000015 	beq	144874 <close_file+0x68>
  14481c:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
  144820:	e3530000 	cmp	r3, #0
  144824:	aa000014 	bge	14487c <close_file+0x70>
  144828:	e5942014 	ldr	r2, [r4, #20]
  14482c:	e594301c 	ldr	r3, [r4, #28]
  144830:	e1520003 	cmp	r2, r3
  144834:	0a000004 	beq	14484c <close_file+0x40>
  144838:	e3a02000 	mov	r2, #0
  14483c:	e5943024 	ldr	r3, [r4, #36]	; 0x24
  144840:	e1a01002 	mov	r1, r2
  144844:	e1a00004 	mov	r0, r4
  144848:	e12fff33 	blx	r3
  14484c:	e994000c 	ldmib	r4, {r2, r3}
  144850:	e1520003 	cmp	r2, r3
  144854:	0a000006 	beq	144874 <close_file+0x68>
  144858:	e3a01001 	mov	r1, #1
  14485c:	e0422003 	sub	r2, r2, r3
  144860:	e58d1000 	str	r1, [sp]
  144864:	e5941028 	ldr	r1, [r4, #40]	; 0x28
  144868:	e1a00004 	mov	r0, r4
  14486c:	e1a03fc2 	asr	r3, r2, #31
  144870:	e12fff31 	blx	r1
  144874:	e28dd008 	add	sp, sp, #8
  144878:	e8bd8010 	pop	{r4, pc}
  14487c:	ebfffb94 	bl	1436d4 <__lockfile>
  144880:	eaffffe8 	b	144828 <close_file+0x1c>

00144884 <__stdio_exit>:
  144884:	e92d4010 	push	{r4, lr}
  144888:	ebffe771 	bl	13e654 <__ofl_lock>
  14488c:	e5904000 	ldr	r4, [r0]
  144890:	e3540000 	cmp	r4, #0
  144894:	0a000004 	beq	1448ac <__stdio_exit+0x28>
  144898:	e1a00004 	mov	r0, r4
  14489c:	ebffffda 	bl	14480c <close_file>
  1448a0:	e5944038 	ldr	r4, [r4, #56]	; 0x38
  1448a4:	e3540000 	cmp	r4, #0
  1448a8:	1afffffa 	bne	144898 <__stdio_exit+0x14>
  1448ac:	e59f3020 	ldr	r3, [pc, #32]	; 1448d4 <__stdio_exit+0x50>
  1448b0:	e5930000 	ldr	r0, [r3]
  1448b4:	ebffffd4 	bl	14480c <close_file>
  1448b8:	e59f3018 	ldr	r3, [pc, #24]	; 1448d8 <__stdio_exit+0x54>
  1448bc:	e5930000 	ldr	r0, [r3]
  1448c0:	ebffffd1 	bl	14480c <close_file>
  1448c4:	e8bd4010 	pop	{r4, lr}
  1448c8:	e59f300c 	ldr	r3, [pc, #12]	; 1448dc <__stdio_exit+0x58>
  1448cc:	e5930000 	ldr	r0, [r3]
  1448d0:	eaffffcd 	b	14480c <close_file>
  1448d4:	00150468 	.word	0x00150468
  1448d8:	0014e3d0 	.word	0x0014e3d0
  1448dc:	0014e338 	.word	0x0014e338

001448e0 <__aeabi_drsub>:
  1448e0:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000
  1448e4:	ea000000 	b	1448ec <__adddf3>

001448e8 <__aeabi_dsub>:
  1448e8:	e2233102 	eor	r3, r3, #-2147483648	; 0x80000000

001448ec <__adddf3>:
  1448ec:	e92d4030 	push	{r4, r5, lr}
  1448f0:	e1a04081 	lsl	r4, r1, #1
  1448f4:	e1a05083 	lsl	r5, r3, #1
  1448f8:	e1340005 	teq	r4, r5
  1448fc:	01300002 	teqeq	r0, r2
  144900:	1194c000 	orrsne	ip, r4, r0
  144904:	1195c002 	orrsne	ip, r5, r2
  144908:	11f0cac4 	mvnsne	ip, r4, asr #21
  14490c:	11f0cac5 	mvnsne	ip, r5, asr #21
  144910:	0a000079 	beq	144afc <__adddf3+0x210>
  144914:	e1a04aa4 	lsr	r4, r4, #21
  144918:	e0745aa5 	rsbs	r5, r4, r5, lsr #21
  14491c:	b2655000 	rsblt	r5, r5, #0
  144920:	da000006 	ble	144940 <__adddf3+0x54>
  144924:	e0844005 	add	r4, r4, r5
  144928:	e0202002 	eor	r2, r0, r2
  14492c:	e0213003 	eor	r3, r1, r3
  144930:	e0220000 	eor	r0, r2, r0
  144934:	e0231001 	eor	r1, r3, r1
  144938:	e0202002 	eor	r2, r0, r2
  14493c:	e0213003 	eor	r3, r1, r3
  144940:	e3550036 	cmp	r5, #54	; 0x36
  144944:	88bd8030 	pophi	{r4, r5, pc}
  144948:	e3110102 	tst	r1, #-2147483648	; 0x80000000
  14494c:	e1a01601 	lsl	r1, r1, #12
  144950:	e3a0c601 	mov	ip, #1048576	; 0x100000
  144954:	e18c1621 	orr	r1, ip, r1, lsr #12
  144958:	0a000001 	beq	144964 <__adddf3+0x78>
  14495c:	e2700000 	rsbs	r0, r0, #0
  144960:	e2e11000 	rsc	r1, r1, #0
  144964:	e3130102 	tst	r3, #-2147483648	; 0x80000000
  144968:	e1a03603 	lsl	r3, r3, #12
  14496c:	e18c3623 	orr	r3, ip, r3, lsr #12
  144970:	0a000001 	beq	14497c <__adddf3+0x90>
  144974:	e2722000 	rsbs	r2, r2, #0
  144978:	e2e33000 	rsc	r3, r3, #0
  14497c:	e1340005 	teq	r4, r5
  144980:	0a000057 	beq	144ae4 <__adddf3+0x1f8>
  144984:	e2444001 	sub	r4, r4, #1
  144988:	e275e020 	rsbs	lr, r5, #32
  14498c:	ba000005 	blt	1449a8 <__adddf3+0xbc>
  144990:	e1a0ce12 	lsl	ip, r2, lr
  144994:	e0900532 	adds	r0, r0, r2, lsr r5
  144998:	e2a11000 	adc	r1, r1, #0
  14499c:	e0900e13 	adds	r0, r0, r3, lsl lr
  1449a0:	e0b11553 	adcs	r1, r1, r3, asr r5
  1449a4:	ea000006 	b	1449c4 <__adddf3+0xd8>
  1449a8:	e2455020 	sub	r5, r5, #32
  1449ac:	e28ee020 	add	lr, lr, #32
  1449b0:	e3520001 	cmp	r2, #1
  1449b4:	e1a0ce13 	lsl	ip, r3, lr
  1449b8:	238cc002 	orrcs	ip, ip, #2
  1449bc:	e0900553 	adds	r0, r0, r3, asr r5
  1449c0:	e0b11fc3 	adcs	r1, r1, r3, asr #31
  1449c4:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
  1449c8:	5a000002 	bpl	1449d8 <__adddf3+0xec>
  1449cc:	e27cc000 	rsbs	ip, ip, #0
  1449d0:	e2f00000 	rscs	r0, r0, #0
  1449d4:	e2e11000 	rsc	r1, r1, #0
  1449d8:	e3510601 	cmp	r1, #1048576	; 0x100000
  1449dc:	3a00000e 	bcc	144a1c <__adddf3+0x130>
  1449e0:	e3510602 	cmp	r1, #2097152	; 0x200000
  1449e4:	3a000006 	bcc	144a04 <__adddf3+0x118>
  1449e8:	e1b010a1 	lsrs	r1, r1, #1
  1449ec:	e1b00060 	rrxs	r0, r0
  1449f0:	e1a0c06c 	rrx	ip, ip
  1449f4:	e2844001 	add	r4, r4, #1
  1449f8:	e1a02a84 	lsl	r2, r4, #21
  1449fc:	e3720501 	cmn	r2, #4194304	; 0x400000
  144a00:	2a000055 	bcs	144b5c <__adddf3+0x270>
  144a04:	e35c0102 	cmp	ip, #-2147483648	; 0x80000000
  144a08:	01b0c0a0 	lsrseq	ip, r0, #1
  144a0c:	e2b00000 	adcs	r0, r0, #0
  144a10:	e0a11a04 	adc	r1, r1, r4, lsl #20
  144a14:	e1811005 	orr	r1, r1, r5
  144a18:	e8bd8030 	pop	{r4, r5, pc}
  144a1c:	e1b0c08c 	lsls	ip, ip, #1
  144a20:	e0b00000 	adcs	r0, r0, r0
  144a24:	e0a11001 	adc	r1, r1, r1
  144a28:	e3110601 	tst	r1, #1048576	; 0x100000
  144a2c:	e2444001 	sub	r4, r4, #1
  144a30:	1afffff3 	bne	144a04 <__adddf3+0x118>
  144a34:	e3310000 	teq	r1, #0
  144a38:	01a01000 	moveq	r1, r0
  144a3c:	03a00000 	moveq	r0, #0
  144a40:	e16f3f11 	clz	r3, r1
  144a44:	02833020 	addeq	r3, r3, #32
  144a48:	e243300b 	sub	r3, r3, #11
  144a4c:	e2532020 	subs	r2, r3, #32
  144a50:	aa000007 	bge	144a74 <__adddf3+0x188>
  144a54:	e292200c 	adds	r2, r2, #12
  144a58:	da000004 	ble	144a70 <__adddf3+0x184>
  144a5c:	e282c014 	add	ip, r2, #20
  144a60:	e262200c 	rsb	r2, r2, #12
  144a64:	e1a00c11 	lsl	r0, r1, ip
  144a68:	e1a01231 	lsr	r1, r1, r2
  144a6c:	ea000004 	b	144a84 <__adddf3+0x198>
  144a70:	e2822014 	add	r2, r2, #20
  144a74:	d262c020 	rsble	ip, r2, #32
  144a78:	e1a01211 	lsl	r1, r1, r2
  144a7c:	d1811c30 	orrle	r1, r1, r0, lsr ip
  144a80:	d1a00210 	lslle	r0, r0, r2
  144a84:	e0544003 	subs	r4, r4, r3
  144a88:	a0811a04 	addge	r1, r1, r4, lsl #20
  144a8c:	a1811005 	orrge	r1, r1, r5
  144a90:	a8bd8030 	popge	{r4, r5, pc}
  144a94:	e1e04004 	mvn	r4, r4
  144a98:	e254401f 	subs	r4, r4, #31
  144a9c:	aa00000d 	bge	144ad8 <__adddf3+0x1ec>
  144aa0:	e294400c 	adds	r4, r4, #12
  144aa4:	ca000005 	bgt	144ac0 <__adddf3+0x1d4>
  144aa8:	e2844014 	add	r4, r4, #20
  144aac:	e2642020 	rsb	r2, r4, #32
  144ab0:	e1a00430 	lsr	r0, r0, r4
  144ab4:	e1800211 	orr	r0, r0, r1, lsl r2
  144ab8:	e1851431 	orr	r1, r5, r1, lsr r4
  144abc:	e8bd8030 	pop	{r4, r5, pc}
  144ac0:	e264400c 	rsb	r4, r4, #12
  144ac4:	e2642020 	rsb	r2, r4, #32
  144ac8:	e1a00230 	lsr	r0, r0, r2
  144acc:	e1800411 	orr	r0, r0, r1, lsl r4
  144ad0:	e1a01005 	mov	r1, r5
  144ad4:	e8bd8030 	pop	{r4, r5, pc}
  144ad8:	e1a00431 	lsr	r0, r1, r4
  144adc:	e1a01005 	mov	r1, r5
  144ae0:	e8bd8030 	pop	{r4, r5, pc}
  144ae4:	e3340000 	teq	r4, #0
  144ae8:	e2233601 	eor	r3, r3, #1048576	; 0x100000
  144aec:	02211601 	eoreq	r1, r1, #1048576	; 0x100000
  144af0:	02844001 	addeq	r4, r4, #1
  144af4:	12455001 	subne	r5, r5, #1
  144af8:	eaffffa1 	b	144984 <__adddf3+0x98>
  144afc:	e1f0cac4 	mvns	ip, r4, asr #21
  144b00:	11f0cac5 	mvnsne	ip, r5, asr #21
  144b04:	0a000018 	beq	144b6c <__adddf3+0x280>
  144b08:	e1340005 	teq	r4, r5
  144b0c:	01300002 	teqeq	r0, r2
  144b10:	0a000003 	beq	144b24 <__adddf3+0x238>
  144b14:	e194c000 	orrs	ip, r4, r0
  144b18:	01a01003 	moveq	r1, r3
  144b1c:	01a00002 	moveq	r0, r2
  144b20:	e8bd8030 	pop	{r4, r5, pc}
  144b24:	e1310003 	teq	r1, r3
  144b28:	13a01000 	movne	r1, #0
  144b2c:	13a00000 	movne	r0, #0
  144b30:	18bd8030 	popne	{r4, r5, pc}
  144b34:	e1b0caa4 	lsrs	ip, r4, #21
  144b38:	1a000003 	bne	144b4c <__adddf3+0x260>
  144b3c:	e1b00080 	lsls	r0, r0, #1
  144b40:	e0b11001 	adcs	r1, r1, r1
  144b44:	23811102 	orrcs	r1, r1, #-2147483648	; 0x80000000
  144b48:	e8bd8030 	pop	{r4, r5, pc}
  144b4c:	e2944501 	adds	r4, r4, #4194304	; 0x400000
  144b50:	32811601 	addcc	r1, r1, #1048576	; 0x100000
  144b54:	38bd8030 	popcc	{r4, r5, pc}
  144b58:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
  144b5c:	e385147f 	orr	r1, r5, #2130706432	; 0x7f000000
  144b60:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
  144b64:	e3a00000 	mov	r0, #0
  144b68:	e8bd8030 	pop	{r4, r5, pc}
  144b6c:	e1f0cac4 	mvns	ip, r4, asr #21
  144b70:	11a01003 	movne	r1, r3
  144b74:	11a00002 	movne	r0, r2
  144b78:	01f0cac5 	mvnseq	ip, r5, asr #21
  144b7c:	11a03001 	movne	r3, r1
  144b80:	11a02000 	movne	r2, r0
  144b84:	e1904601 	orrs	r4, r0, r1, lsl #12
  144b88:	01925603 	orrseq	r5, r2, r3, lsl #12
  144b8c:	01310003 	teqeq	r1, r3
  144b90:	13811702 	orrne	r1, r1, #524288	; 0x80000
  144b94:	e8bd8030 	pop	{r4, r5, pc}

00144b98 <__aeabi_ui2d>:
  144b98:	e3300000 	teq	r0, #0
  144b9c:	03a01000 	moveq	r1, #0
  144ba0:	012fff1e 	bxeq	lr
  144ba4:	e92d4030 	push	{r4, r5, lr}
  144ba8:	e3a04b01 	mov	r4, #1024	; 0x400
  144bac:	e2844032 	add	r4, r4, #50	; 0x32
  144bb0:	e3a05000 	mov	r5, #0
  144bb4:	e3a01000 	mov	r1, #0
  144bb8:	eaffff9d 	b	144a34 <__adddf3+0x148>

00144bbc <__aeabi_i2d>:
  144bbc:	e3300000 	teq	r0, #0
  144bc0:	03a01000 	moveq	r1, #0
  144bc4:	012fff1e 	bxeq	lr
  144bc8:	e92d4030 	push	{r4, r5, lr}
  144bcc:	e3a04b01 	mov	r4, #1024	; 0x400
  144bd0:	e2844032 	add	r4, r4, #50	; 0x32
  144bd4:	e2105102 	ands	r5, r0, #-2147483648	; 0x80000000
  144bd8:	42600000 	rsbmi	r0, r0, #0
  144bdc:	e3a01000 	mov	r1, #0
  144be0:	eaffff93 	b	144a34 <__adddf3+0x148>

00144be4 <__aeabi_f2d>:
  144be4:	e1b02080 	lsls	r2, r0, #1
  144be8:	e1a011c2 	asr	r1, r2, #3
  144bec:	e1a01061 	rrx	r1, r1
  144bf0:	e1a00e02 	lsl	r0, r2, #28
  144bf4:	121234ff 	andsne	r3, r2, #-16777216	; 0xff000000
  144bf8:	133304ff 	teqne	r3, #-16777216	; 0xff000000
  144bfc:	1221130e 	eorne	r1, r1, #939524096	; 0x38000000
  144c00:	112fff1e 	bxne	lr
  144c04:	e3d224ff 	bics	r2, r2, #-16777216	; 0xff000000
  144c08:	012fff1e 	bxeq	lr
  144c0c:	e33304ff 	teq	r3, #-16777216	; 0xff000000
  144c10:	03811702 	orreq	r1, r1, #524288	; 0x80000
  144c14:	012fff1e 	bxeq	lr
  144c18:	e92d4030 	push	{r4, r5, lr}
  144c1c:	e3a04d0e 	mov	r4, #896	; 0x380
  144c20:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
  144c24:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
  144c28:	eaffff81 	b	144a34 <__adddf3+0x148>

00144c2c <__aeabi_ul2d>:
  144c2c:	e1902001 	orrs	r2, r0, r1
  144c30:	012fff1e 	bxeq	lr
  144c34:	e92d4030 	push	{r4, r5, lr}
  144c38:	e3a05000 	mov	r5, #0
  144c3c:	ea000006 	b	144c5c <__aeabi_l2d+0x1c>

00144c40 <__aeabi_l2d>:
  144c40:	e1902001 	orrs	r2, r0, r1
  144c44:	012fff1e 	bxeq	lr
  144c48:	e92d4030 	push	{r4, r5, lr}
  144c4c:	e2115102 	ands	r5, r1, #-2147483648	; 0x80000000
  144c50:	5a000001 	bpl	144c5c <__aeabi_l2d+0x1c>
  144c54:	e2700000 	rsbs	r0, r0, #0
  144c58:	e2e11000 	rsc	r1, r1, #0
  144c5c:	e3a04b01 	mov	r4, #1024	; 0x400
  144c60:	e2844032 	add	r4, r4, #50	; 0x32
  144c64:	e1b0cb21 	lsrs	ip, r1, #22
  144c68:	0affff5a 	beq	1449d8 <__adddf3+0xec>
  144c6c:	e3a02003 	mov	r2, #3
  144c70:	e1b0c1ac 	lsrs	ip, ip, #3
  144c74:	12822003 	addne	r2, r2, #3
  144c78:	e1b0c1ac 	lsrs	ip, ip, #3
  144c7c:	12822003 	addne	r2, r2, #3
  144c80:	e08221ac 	add	r2, r2, ip, lsr #3
  144c84:	e2623020 	rsb	r3, r2, #32
  144c88:	e1a0c310 	lsl	ip, r0, r3
  144c8c:	e1a00230 	lsr	r0, r0, r2
  144c90:	e1800311 	orr	r0, r0, r1, lsl r3
  144c94:	e1a01231 	lsr	r1, r1, r2
  144c98:	e0844002 	add	r4, r4, r2
  144c9c:	eaffff4d 	b	1449d8 <__adddf3+0xec>

00144ca0 <__aeabi_dmul>:
  144ca0:	e92d4070 	push	{r4, r5, r6, lr}
  144ca4:	e3a0c0ff 	mov	ip, #255	; 0xff
  144ca8:	e38ccc07 	orr	ip, ip, #1792	; 0x700
  144cac:	e01c4a21 	ands	r4, ip, r1, lsr #20
  144cb0:	101c5a23 	andsne	r5, ip, r3, lsr #20
  144cb4:	1134000c 	teqne	r4, ip
  144cb8:	1135000c 	teqne	r5, ip
  144cbc:	0b00006f 	bleq	144e80 <__aeabi_dmul+0x1e0>
  144cc0:	e0844005 	add	r4, r4, r5
  144cc4:	e0216003 	eor	r6, r1, r3
  144cc8:	e1c11a8c 	bic	r1, r1, ip, lsl #21
  144ccc:	e1c33a8c 	bic	r3, r3, ip, lsl #21
  144cd0:	e1905601 	orrs	r5, r0, r1, lsl #12
  144cd4:	11925603 	orrsne	r5, r2, r3, lsl #12
  144cd8:	e3811601 	orr	r1, r1, #1048576	; 0x100000
  144cdc:	e3833601 	orr	r3, r3, #1048576	; 0x100000
  144ce0:	0a00001c 	beq	144d58 <__aeabi_dmul+0xb8>
  144ce4:	e08ec290 	umull	ip, lr, r0, r2
  144ce8:	e3a05000 	mov	r5, #0
  144cec:	e0a5e291 	umlal	lr, r5, r1, r2
  144cf0:	e2062102 	and	r2, r6, #-2147483648	; 0x80000000
  144cf4:	e0a5e390 	umlal	lr, r5, r0, r3
  144cf8:	e3a06000 	mov	r6, #0
  144cfc:	e0a65391 	umlal	r5, r6, r1, r3
  144d00:	e33c0000 	teq	ip, #0
  144d04:	138ee001 	orrne	lr, lr, #1
  144d08:	e24440ff 	sub	r4, r4, #255	; 0xff
  144d0c:	e3560c02 	cmp	r6, #512	; 0x200
  144d10:	e2c44c03 	sbc	r4, r4, #768	; 0x300
  144d14:	2a000002 	bcs	144d24 <__aeabi_dmul+0x84>
  144d18:	e1b0e08e 	lsls	lr, lr, #1
  144d1c:	e0b55005 	adcs	r5, r5, r5
  144d20:	e0a66006 	adc	r6, r6, r6
  144d24:	e1821586 	orr	r1, r2, r6, lsl #11
  144d28:	e1811aa5 	orr	r1, r1, r5, lsr #21
  144d2c:	e1a00585 	lsl	r0, r5, #11
  144d30:	e1800aae 	orr	r0, r0, lr, lsr #21
  144d34:	e1a0e58e 	lsl	lr, lr, #11
  144d38:	e254c0fd 	subs	ip, r4, #253	; 0xfd
  144d3c:	835c0c07 	cmphi	ip, #1792	; 0x700
  144d40:	8a00000f 	bhi	144d84 <__aeabi_dmul+0xe4>
  144d44:	e35e0102 	cmp	lr, #-2147483648	; 0x80000000
  144d48:	01b0e0a0 	lsrseq	lr, r0, #1
  144d4c:	e2b00000 	adcs	r0, r0, #0
  144d50:	e0a11a04 	adc	r1, r1, r4, lsl #20
  144d54:	e8bd8070 	pop	{r4, r5, r6, pc}
  144d58:	e2066102 	and	r6, r6, #-2147483648	; 0x80000000
  144d5c:	e1861001 	orr	r1, r6, r1
  144d60:	e1800002 	orr	r0, r0, r2
  144d64:	e0211003 	eor	r1, r1, r3
  144d68:	e05440ac 	subs	r4, r4, ip, lsr #1
  144d6c:	c074500c 	rsbsgt	r5, r4, ip
  144d70:	c1811a04 	orrgt	r1, r1, r4, lsl #20
  144d74:	c8bd8070 	popgt	{r4, r5, r6, pc}
  144d78:	e3811601 	orr	r1, r1, #1048576	; 0x100000
  144d7c:	e3a0e000 	mov	lr, #0
  144d80:	e2544001 	subs	r4, r4, #1
  144d84:	ca000058 	bgt	144eec <__aeabi_dmul+0x24c>
  144d88:	e3740036 	cmn	r4, #54	; 0x36
  144d8c:	d3a00000 	movle	r0, #0
  144d90:	d2011102 	andle	r1, r1, #-2147483648	; 0x80000000
  144d94:	d8bd8070 	pople	{r4, r5, r6, pc}
  144d98:	e2644000 	rsb	r4, r4, #0
  144d9c:	e2544020 	subs	r4, r4, #32
  144da0:	aa000018 	bge	144e08 <__aeabi_dmul+0x168>
  144da4:	e294400c 	adds	r4, r4, #12
  144da8:	ca00000b 	bgt	144ddc <__aeabi_dmul+0x13c>
  144dac:	e2844014 	add	r4, r4, #20
  144db0:	e2645020 	rsb	r5, r4, #32
  144db4:	e1a03510 	lsl	r3, r0, r5
  144db8:	e1a00430 	lsr	r0, r0, r4
  144dbc:	e1800511 	orr	r0, r0, r1, lsl r5
  144dc0:	e2012102 	and	r2, r1, #-2147483648	; 0x80000000
  144dc4:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
  144dc8:	e0900fa3 	adds	r0, r0, r3, lsr #31
  144dcc:	e0a21431 	adc	r1, r2, r1, lsr r4
  144dd0:	e19ee083 	orrs	lr, lr, r3, lsl #1
  144dd4:	01c00fa3 	biceq	r0, r0, r3, lsr #31
  144dd8:	e8bd8070 	pop	{r4, r5, r6, pc}
  144ddc:	e264400c 	rsb	r4, r4, #12
  144de0:	e2645020 	rsb	r5, r4, #32
  144de4:	e1a03410 	lsl	r3, r0, r4
  144de8:	e1a00530 	lsr	r0, r0, r5
  144dec:	e1800411 	orr	r0, r0, r1, lsl r4
  144df0:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
  144df4:	e0900fa3 	adds	r0, r0, r3, lsr #31
  144df8:	e2a11000 	adc	r1, r1, #0
  144dfc:	e19ee083 	orrs	lr, lr, r3, lsl #1
  144e00:	01c00fa3 	biceq	r0, r0, r3, lsr #31
  144e04:	e8bd8070 	pop	{r4, r5, r6, pc}
  144e08:	e2645020 	rsb	r5, r4, #32
  144e0c:	e18ee510 	orr	lr, lr, r0, lsl r5
  144e10:	e1a03430 	lsr	r3, r0, r4
  144e14:	e1833511 	orr	r3, r3, r1, lsl r5
  144e18:	e1a00431 	lsr	r0, r1, r4
  144e1c:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
  144e20:	e1c00431 	bic	r0, r0, r1, lsr r4
  144e24:	e0800fa3 	add	r0, r0, r3, lsr #31
  144e28:	e19ee083 	orrs	lr, lr, r3, lsl #1
  144e2c:	01c00fa3 	biceq	r0, r0, r3, lsr #31
  144e30:	e8bd8070 	pop	{r4, r5, r6, pc}
  144e34:	e3340000 	teq	r4, #0
  144e38:	1a000008 	bne	144e60 <__aeabi_dmul+0x1c0>
  144e3c:	e2016102 	and	r6, r1, #-2147483648	; 0x80000000
  144e40:	e1b00080 	lsls	r0, r0, #1
  144e44:	e0a11001 	adc	r1, r1, r1
  144e48:	e3110601 	tst	r1, #1048576	; 0x100000
  144e4c:	02444001 	subeq	r4, r4, #1
  144e50:	0afffffa 	beq	144e40 <__aeabi_dmul+0x1a0>
  144e54:	e1811006 	orr	r1, r1, r6
  144e58:	e3350000 	teq	r5, #0
  144e5c:	112fff1e 	bxne	lr
  144e60:	e2036102 	and	r6, r3, #-2147483648	; 0x80000000
  144e64:	e1b02082 	lsls	r2, r2, #1
  144e68:	e0a33003 	adc	r3, r3, r3
  144e6c:	e3130601 	tst	r3, #1048576	; 0x100000
  144e70:	02455001 	subeq	r5, r5, #1
  144e74:	0afffffa 	beq	144e64 <__aeabi_dmul+0x1c4>
  144e78:	e1833006 	orr	r3, r3, r6
  144e7c:	e12fff1e 	bx	lr
  144e80:	e134000c 	teq	r4, ip
  144e84:	e00c5a23 	and	r5, ip, r3, lsr #20
  144e88:	1135000c 	teqne	r5, ip
  144e8c:	0a000006 	beq	144eac <__aeabi_dmul+0x20c>
  144e90:	e1906081 	orrs	r6, r0, r1, lsl #1
  144e94:	11926083 	orrsne	r6, r2, r3, lsl #1
  144e98:	1affffe5 	bne	144e34 <__aeabi_dmul+0x194>
  144e9c:	e0211003 	eor	r1, r1, r3
  144ea0:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
  144ea4:	e3a00000 	mov	r0, #0
  144ea8:	e8bd8070 	pop	{r4, r5, r6, pc}
  144eac:	e1906081 	orrs	r6, r0, r1, lsl #1
  144eb0:	01a00002 	moveq	r0, r2
  144eb4:	01a01003 	moveq	r1, r3
  144eb8:	11926083 	orrsne	r6, r2, r3, lsl #1
  144ebc:	0a00000f 	beq	144f00 <__aeabi_dmul+0x260>
  144ec0:	e134000c 	teq	r4, ip
  144ec4:	1a000001 	bne	144ed0 <__aeabi_dmul+0x230>
  144ec8:	e1906601 	orrs	r6, r0, r1, lsl #12
  144ecc:	1a00000b 	bne	144f00 <__aeabi_dmul+0x260>
  144ed0:	e135000c 	teq	r5, ip
  144ed4:	1a000003 	bne	144ee8 <__aeabi_dmul+0x248>
  144ed8:	e1926603 	orrs	r6, r2, r3, lsl #12
  144edc:	11a00002 	movne	r0, r2
  144ee0:	11a01003 	movne	r1, r3
  144ee4:	1a000005 	bne	144f00 <__aeabi_dmul+0x260>
  144ee8:	e0211003 	eor	r1, r1, r3
  144eec:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
  144ef0:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
  144ef4:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
  144ef8:	e3a00000 	mov	r0, #0
  144efc:	e8bd8070 	pop	{r4, r5, r6, pc}
  144f00:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
  144f04:	e381173e 	orr	r1, r1, #16252928	; 0xf80000
  144f08:	e8bd8070 	pop	{r4, r5, r6, pc}

00144f0c <__aeabi_ddiv>:
  144f0c:	e92d4070 	push	{r4, r5, r6, lr}
  144f10:	e3a0c0ff 	mov	ip, #255	; 0xff
  144f14:	e38ccc07 	orr	ip, ip, #1792	; 0x700
  144f18:	e01c4a21 	ands	r4, ip, r1, lsr #20
  144f1c:	101c5a23 	andsne	r5, ip, r3, lsr #20
  144f20:	1134000c 	teqne	r4, ip
  144f24:	1135000c 	teqne	r5, ip
  144f28:	0b00005c 	bleq	1450a0 <__aeabi_ddiv+0x194>
  144f2c:	e0444005 	sub	r4, r4, r5
  144f30:	e021e003 	eor	lr, r1, r3
  144f34:	e1925603 	orrs	r5, r2, r3, lsl #12
  144f38:	e1a01601 	lsl	r1, r1, #12
  144f3c:	0a00004b 	beq	145070 <__aeabi_ddiv+0x164>
  144f40:	e1a03603 	lsl	r3, r3, #12
  144f44:	e3a05201 	mov	r5, #268435456	; 0x10000000
  144f48:	e1853223 	orr	r3, r5, r3, lsr #4
  144f4c:	e1833c22 	orr	r3, r3, r2, lsr #24
  144f50:	e1a02402 	lsl	r2, r2, #8
  144f54:	e1855221 	orr	r5, r5, r1, lsr #4
  144f58:	e1855c20 	orr	r5, r5, r0, lsr #24
  144f5c:	e1a06400 	lsl	r6, r0, #8
  144f60:	e20e1102 	and	r1, lr, #-2147483648	; 0x80000000
  144f64:	e1550003 	cmp	r5, r3
  144f68:	01560002 	cmpeq	r6, r2
  144f6c:	e2a440fd 	adc	r4, r4, #253	; 0xfd
  144f70:	e2844c03 	add	r4, r4, #768	; 0x300
  144f74:	2a000001 	bcs	144f80 <__aeabi_ddiv+0x74>
  144f78:	e1b030a3 	lsrs	r3, r3, #1
  144f7c:	e1a02062 	rrx	r2, r2
  144f80:	e0566002 	subs	r6, r6, r2
  144f84:	e0c55003 	sbc	r5, r5, r3
  144f88:	e1b030a3 	lsrs	r3, r3, #1
  144f8c:	e1a02062 	rrx	r2, r2
  144f90:	e3a00601 	mov	r0, #1048576	; 0x100000
  144f94:	e3a0c702 	mov	ip, #524288	; 0x80000
  144f98:	e056e002 	subs	lr, r6, r2
  144f9c:	e0d5e003 	sbcs	lr, r5, r3
  144fa0:	20466002 	subcs	r6, r6, r2
  144fa4:	21a0500e 	movcs	r5, lr
  144fa8:	2180000c 	orrcs	r0, r0, ip
  144fac:	e1b030a3 	lsrs	r3, r3, #1
  144fb0:	e1a02062 	rrx	r2, r2
  144fb4:	e056e002 	subs	lr, r6, r2
  144fb8:	e0d5e003 	sbcs	lr, r5, r3
  144fbc:	20466002 	subcs	r6, r6, r2
  144fc0:	21a0500e 	movcs	r5, lr
  144fc4:	218000ac 	orrcs	r0, r0, ip, lsr #1
  144fc8:	e1b030a3 	lsrs	r3, r3, #1
  144fcc:	e1a02062 	rrx	r2, r2
  144fd0:	e056e002 	subs	lr, r6, r2
  144fd4:	e0d5e003 	sbcs	lr, r5, r3
  144fd8:	20466002 	subcs	r6, r6, r2
  144fdc:	21a0500e 	movcs	r5, lr
  144fe0:	2180012c 	orrcs	r0, r0, ip, lsr #2
  144fe4:	e1b030a3 	lsrs	r3, r3, #1
  144fe8:	e1a02062 	rrx	r2, r2
  144fec:	e056e002 	subs	lr, r6, r2
  144ff0:	e0d5e003 	sbcs	lr, r5, r3
  144ff4:	20466002 	subcs	r6, r6, r2
  144ff8:	21a0500e 	movcs	r5, lr
  144ffc:	218001ac 	orrcs	r0, r0, ip, lsr #3
  145000:	e195e006 	orrs	lr, r5, r6
  145004:	0a00000d 	beq	145040 <__aeabi_ddiv+0x134>
  145008:	e1a05205 	lsl	r5, r5, #4
  14500c:	e1855e26 	orr	r5, r5, r6, lsr #28
  145010:	e1a06206 	lsl	r6, r6, #4
  145014:	e1a03183 	lsl	r3, r3, #3
  145018:	e1833ea2 	orr	r3, r3, r2, lsr #29
  14501c:	e1a02182 	lsl	r2, r2, #3
  145020:	e1b0c22c 	lsrs	ip, ip, #4
  145024:	1affffdb 	bne	144f98 <__aeabi_ddiv+0x8c>
  145028:	e3110601 	tst	r1, #1048576	; 0x100000
  14502c:	1a000006 	bne	14504c <__aeabi_ddiv+0x140>
  145030:	e1811000 	orr	r1, r1, r0
  145034:	e3a00000 	mov	r0, #0
  145038:	e3a0c102 	mov	ip, #-2147483648	; 0x80000000
  14503c:	eaffffd5 	b	144f98 <__aeabi_ddiv+0x8c>
  145040:	e3110601 	tst	r1, #1048576	; 0x100000
  145044:	01811000 	orreq	r1, r1, r0
  145048:	03a00000 	moveq	r0, #0
  14504c:	e254c0fd 	subs	ip, r4, #253	; 0xfd
  145050:	835c0c07 	cmphi	ip, #1792	; 0x700
  145054:	8affff4a 	bhi	144d84 <__aeabi_dmul+0xe4>
  145058:	e055c003 	subs	ip, r5, r3
  14505c:	0056c002 	subseq	ip, r6, r2
  145060:	01b0c0a0 	lsrseq	ip, r0, #1
  145064:	e2b00000 	adcs	r0, r0, #0
  145068:	e0a11a04 	adc	r1, r1, r4, lsl #20
  14506c:	e8bd8070 	pop	{r4, r5, r6, pc}
  145070:	e20ee102 	and	lr, lr, #-2147483648	; 0x80000000
  145074:	e18e1621 	orr	r1, lr, r1, lsr #12
  145078:	e09440ac 	adds	r4, r4, ip, lsr #1
  14507c:	c074500c 	rsbsgt	r5, r4, ip
  145080:	c1811a04 	orrgt	r1, r1, r4, lsl #20
  145084:	c8bd8070 	popgt	{r4, r5, r6, pc}
  145088:	e3811601 	orr	r1, r1, #1048576	; 0x100000
  14508c:	e3a0e000 	mov	lr, #0
  145090:	e2544001 	subs	r4, r4, #1
  145094:	eaffff3a 	b	144d84 <__aeabi_dmul+0xe4>
  145098:	e185e006 	orr	lr, r5, r6
  14509c:	eaffff38 	b	144d84 <__aeabi_dmul+0xe4>
  1450a0:	e00c5a23 	and	r5, ip, r3, lsr #20
  1450a4:	e134000c 	teq	r4, ip
  1450a8:	0135000c 	teqeq	r5, ip
  1450ac:	0affff93 	beq	144f00 <__aeabi_dmul+0x260>
  1450b0:	e134000c 	teq	r4, ip
  1450b4:	1a000006 	bne	1450d4 <__aeabi_ddiv+0x1c8>
  1450b8:	e1904601 	orrs	r4, r0, r1, lsl #12
  1450bc:	1affff8f 	bne	144f00 <__aeabi_dmul+0x260>
  1450c0:	e135000c 	teq	r5, ip
  1450c4:	1affff87 	bne	144ee8 <__aeabi_dmul+0x248>
  1450c8:	e1a00002 	mov	r0, r2
  1450cc:	e1a01003 	mov	r1, r3
  1450d0:	eaffff8a 	b	144f00 <__aeabi_dmul+0x260>
  1450d4:	e135000c 	teq	r5, ip
  1450d8:	1a000004 	bne	1450f0 <__aeabi_ddiv+0x1e4>
  1450dc:	e1925603 	orrs	r5, r2, r3, lsl #12
  1450e0:	0affff6d 	beq	144e9c <__aeabi_dmul+0x1fc>
  1450e4:	e1a00002 	mov	r0, r2
  1450e8:	e1a01003 	mov	r1, r3
  1450ec:	eaffff83 	b	144f00 <__aeabi_dmul+0x260>
  1450f0:	e1906081 	orrs	r6, r0, r1, lsl #1
  1450f4:	11926083 	orrsne	r6, r2, r3, lsl #1
  1450f8:	1affff4d 	bne	144e34 <__aeabi_dmul+0x194>
  1450fc:	e1904081 	orrs	r4, r0, r1, lsl #1
  145100:	1affff78 	bne	144ee8 <__aeabi_dmul+0x248>
  145104:	e1925083 	orrs	r5, r2, r3, lsl #1
  145108:	1affff63 	bne	144e9c <__aeabi_dmul+0x1fc>
  14510c:	eaffff7b 	b	144f00 <__aeabi_dmul+0x260>

00145110 <__gedf2>:
  145110:	e3e0c000 	mvn	ip, #0
  145114:	ea000002 	b	145124 <__cmpdf2+0x4>

00145118 <__ledf2>:
  145118:	e3a0c001 	mov	ip, #1
  14511c:	ea000000 	b	145124 <__cmpdf2+0x4>

00145120 <__cmpdf2>:
  145120:	e3a0c001 	mov	ip, #1
  145124:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
  145128:	e1a0c081 	lsl	ip, r1, #1
  14512c:	e1f0cacc 	mvns	ip, ip, asr #21
  145130:	e1a0c083 	lsl	ip, r3, #1
  145134:	11f0cacc 	mvnsne	ip, ip, asr #21
  145138:	0a00000e 	beq	145178 <__cmpdf2+0x58>
  14513c:	e28dd004 	add	sp, sp, #4
  145140:	e190c081 	orrs	ip, r0, r1, lsl #1
  145144:	0192c083 	orrseq	ip, r2, r3, lsl #1
  145148:	11310003 	teqne	r1, r3
  14514c:	01300002 	teqeq	r0, r2
  145150:	03a00000 	moveq	r0, #0
  145154:	012fff1e 	bxeq	lr
  145158:	e3700000 	cmn	r0, #0
  14515c:	e1310003 	teq	r1, r3
  145160:	51510003 	cmppl	r1, r3
  145164:	01500002 	cmpeq	r0, r2
  145168:	21a00fc3 	asrcs	r0, r3, #31
  14516c:	31e00fc3 	mvncc	r0, r3, asr #31
  145170:	e3800001 	orr	r0, r0, #1
  145174:	e12fff1e 	bx	lr
  145178:	e1a0c081 	lsl	ip, r1, #1
  14517c:	e1f0cacc 	mvns	ip, ip, asr #21
  145180:	1a000001 	bne	14518c <__cmpdf2+0x6c>
  145184:	e190c601 	orrs	ip, r0, r1, lsl #12
  145188:	1a000004 	bne	1451a0 <__cmpdf2+0x80>
  14518c:	e1a0c083 	lsl	ip, r3, #1
  145190:	e1f0cacc 	mvns	ip, ip, asr #21
  145194:	1affffe8 	bne	14513c <__cmpdf2+0x1c>
  145198:	e192c603 	orrs	ip, r2, r3, lsl #12
  14519c:	0affffe6 	beq	14513c <__cmpdf2+0x1c>
  1451a0:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
  1451a4:	e12fff1e 	bx	lr

001451a8 <__aeabi_cdrcmple>:
  1451a8:	e1a0c000 	mov	ip, r0
  1451ac:	e1a00002 	mov	r0, r2
  1451b0:	e1a0200c 	mov	r2, ip
  1451b4:	e1a0c001 	mov	ip, r1
  1451b8:	e1a01003 	mov	r1, r3
  1451bc:	e1a0300c 	mov	r3, ip
  1451c0:	eaffffff 	b	1451c4 <__aeabi_cdcmpeq>

001451c4 <__aeabi_cdcmpeq>:
  1451c4:	e92d4001 	push	{r0, lr}
  1451c8:	ebffffd4 	bl	145120 <__cmpdf2>
  1451cc:	e3500000 	cmp	r0, #0
  1451d0:	43700000 	cmnmi	r0, #0
  1451d4:	e8bd8001 	pop	{r0, pc}

001451d8 <__aeabi_dcmpeq>:
  1451d8:	e52de008 	str	lr, [sp, #-8]!
  1451dc:	ebfffff8 	bl	1451c4 <__aeabi_cdcmpeq>
  1451e0:	03a00001 	moveq	r0, #1
  1451e4:	13a00000 	movne	r0, #0
  1451e8:	e49df008 	ldr	pc, [sp], #8

001451ec <__aeabi_dcmplt>:
  1451ec:	e52de008 	str	lr, [sp, #-8]!
  1451f0:	ebfffff3 	bl	1451c4 <__aeabi_cdcmpeq>
  1451f4:	33a00001 	movcc	r0, #1
  1451f8:	23a00000 	movcs	r0, #0
  1451fc:	e49df008 	ldr	pc, [sp], #8

00145200 <__aeabi_dcmple>:
  145200:	e52de008 	str	lr, [sp, #-8]!
  145204:	ebffffee 	bl	1451c4 <__aeabi_cdcmpeq>
  145208:	93a00001 	movls	r0, #1
  14520c:	83a00000 	movhi	r0, #0
  145210:	e49df008 	ldr	pc, [sp], #8

00145214 <__aeabi_dcmpge>:
  145214:	e52de008 	str	lr, [sp, #-8]!
  145218:	ebffffe2 	bl	1451a8 <__aeabi_cdrcmple>
  14521c:	93a00001 	movls	r0, #1
  145220:	83a00000 	movhi	r0, #0
  145224:	e49df008 	ldr	pc, [sp], #8

00145228 <__aeabi_dcmpgt>:
  145228:	e52de008 	str	lr, [sp, #-8]!
  14522c:	ebffffdd 	bl	1451a8 <__aeabi_cdrcmple>
  145230:	33a00001 	movcc	r0, #1
  145234:	23a00000 	movcs	r0, #0
  145238:	e49df008 	ldr	pc, [sp], #8

0014523c <__aeabi_d2iz>:
  14523c:	e1a02081 	lsl	r2, r1, #1
  145240:	e2922602 	adds	r2, r2, #2097152	; 0x200000
  145244:	2a00000c 	bcs	14527c <__aeabi_d2iz+0x40>
  145248:	5a000009 	bpl	145274 <__aeabi_d2iz+0x38>
  14524c:	e3e03e3e 	mvn	r3, #992	; 0x3e0
  145250:	e0532ac2 	subs	r2, r3, r2, asr #21
  145254:	9a00000a 	bls	145284 <__aeabi_d2iz+0x48>
  145258:	e1a03581 	lsl	r3, r1, #11
  14525c:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
  145260:	e1833aa0 	orr	r3, r3, r0, lsr #21
  145264:	e3110102 	tst	r1, #-2147483648	; 0x80000000
  145268:	e1a00233 	lsr	r0, r3, r2
  14526c:	12600000 	rsbne	r0, r0, #0
  145270:	e12fff1e 	bx	lr
  145274:	e3a00000 	mov	r0, #0
  145278:	e12fff1e 	bx	lr
  14527c:	e1900601 	orrs	r0, r0, r1, lsl #12
  145280:	1a000002 	bne	145290 <__aeabi_d2iz+0x54>
  145284:	e2110102 	ands	r0, r1, #-2147483648	; 0x80000000
  145288:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
  14528c:	e12fff1e 	bx	lr
  145290:	e3a00000 	mov	r0, #0
  145294:	e12fff1e 	bx	lr

00145298 <__aeabi_d2uiz>:
  145298:	e1b02081 	lsls	r2, r1, #1
  14529c:	2a00000a 	bcs	1452cc <__aeabi_d2uiz+0x34>
  1452a0:	e2922602 	adds	r2, r2, #2097152	; 0x200000
  1452a4:	2a00000a 	bcs	1452d4 <__aeabi_d2uiz+0x3c>
  1452a8:	5a000007 	bpl	1452cc <__aeabi_d2uiz+0x34>
  1452ac:	e3e03e3e 	mvn	r3, #992	; 0x3e0
  1452b0:	e0532ac2 	subs	r2, r3, r2, asr #21
  1452b4:	4a000008 	bmi	1452dc <__aeabi_d2uiz+0x44>
  1452b8:	e1a03581 	lsl	r3, r1, #11
  1452bc:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
  1452c0:	e1833aa0 	orr	r3, r3, r0, lsr #21
  1452c4:	e1a00233 	lsr	r0, r3, r2
  1452c8:	e12fff1e 	bx	lr
  1452cc:	e3a00000 	mov	r0, #0
  1452d0:	e12fff1e 	bx	lr
  1452d4:	e1900601 	orrs	r0, r0, r1, lsl #12
  1452d8:	1a000001 	bne	1452e4 <__aeabi_d2uiz+0x4c>
  1452dc:	e3e00000 	mvn	r0, #0
  1452e0:	e12fff1e 	bx	lr
  1452e4:	e3a00000 	mov	r0, #0
  1452e8:	e12fff1e 	bx	lr

001452ec <__aeabi_ldivmod>:
  1452ec:	e3530000 	cmp	r3, #0
  1452f0:	03520000 	cmpeq	r2, #0
  1452f4:	1a000007 	bne	145318 <__aeabi_ldivmod+0x2c>
  1452f8:	e3510000 	cmp	r1, #0
  1452fc:	b3a01102 	movlt	r1, #-2147483648	; 0x80000000
  145300:	b3a00000 	movlt	r0, #0
  145304:	ba000002 	blt	145314 <__aeabi_ldivmod+0x28>
  145308:	03500000 	cmpeq	r0, #0
  14530c:	13e01102 	mvnne	r1, #-2147483648	; 0x80000000
  145310:	13e00000 	mvnne	r0, #0
  145314:	eaffcee3 	b	138ea8 <__aeabi_idiv0>
  145318:	e24dd008 	sub	sp, sp, #8
  14531c:	e92d6000 	push	{sp, lr}
  145320:	e3510000 	cmp	r1, #0
  145324:	ba000006 	blt	145344 <__aeabi_ldivmod+0x58>
  145328:	e3530000 	cmp	r3, #0
  14532c:	ba000011 	blt	145378 <__aeabi_ldivmod+0x8c>
  145330:	eb000031 	bl	1453fc <__udivmoddi4>
  145334:	e59de004 	ldr	lr, [sp, #4]
  145338:	e28dd008 	add	sp, sp, #8
  14533c:	e8bd000c 	pop	{r2, r3}
  145340:	e12fff1e 	bx	lr
  145344:	e2700000 	rsbs	r0, r0, #0
  145348:	e0c11081 	sbc	r1, r1, r1, lsl #1
  14534c:	e3530000 	cmp	r3, #0
  145350:	ba000011 	blt	14539c <__aeabi_ldivmod+0xb0>
  145354:	eb000028 	bl	1453fc <__udivmoddi4>
  145358:	e59de004 	ldr	lr, [sp, #4]
  14535c:	e28dd008 	add	sp, sp, #8
  145360:	e8bd000c 	pop	{r2, r3}
  145364:	e2700000 	rsbs	r0, r0, #0
  145368:	e0c11081 	sbc	r1, r1, r1, lsl #1
  14536c:	e2722000 	rsbs	r2, r2, #0
  145370:	e0c33083 	sbc	r3, r3, r3, lsl #1
  145374:	e12fff1e 	bx	lr
  145378:	e2722000 	rsbs	r2, r2, #0
  14537c:	e0c33083 	sbc	r3, r3, r3, lsl #1
  145380:	eb00001d 	bl	1453fc <__udivmoddi4>
  145384:	e59de004 	ldr	lr, [sp, #4]
  145388:	e28dd008 	add	sp, sp, #8
  14538c:	e8bd000c 	pop	{r2, r3}
  145390:	e2700000 	rsbs	r0, r0, #0
  145394:	e0c11081 	sbc	r1, r1, r1, lsl #1
  145398:	e12fff1e 	bx	lr
  14539c:	e2722000 	rsbs	r2, r2, #0
  1453a0:	e0c33083 	sbc	r3, r3, r3, lsl #1
  1453a4:	eb000014 	bl	1453fc <__udivmoddi4>
  1453a8:	e59de004 	ldr	lr, [sp, #4]
  1453ac:	e28dd008 	add	sp, sp, #8
  1453b0:	e8bd000c 	pop	{r2, r3}
  1453b4:	e2722000 	rsbs	r2, r2, #0
  1453b8:	e0c33083 	sbc	r3, r3, r3, lsl #1
  1453bc:	e12fff1e 	bx	lr

001453c0 <__aeabi_uldivmod>:
  1453c0:	e3530000 	cmp	r3, #0
  1453c4:	03520000 	cmpeq	r2, #0
  1453c8:	1a000004 	bne	1453e0 <__aeabi_uldivmod+0x20>
  1453cc:	e3510000 	cmp	r1, #0
  1453d0:	03500000 	cmpeq	r0, #0
  1453d4:	13e01000 	mvnne	r1, #0
  1453d8:	13e00000 	mvnne	r0, #0
  1453dc:	eaffceb1 	b	138ea8 <__aeabi_idiv0>
  1453e0:	e24dd008 	sub	sp, sp, #8
  1453e4:	e92d6000 	push	{sp, lr}
  1453e8:	eb000003 	bl	1453fc <__udivmoddi4>
  1453ec:	e59de004 	ldr	lr, [sp, #4]
  1453f0:	e28dd008 	add	sp, sp, #8
  1453f4:	e8bd000c 	pop	{r2, r3}
  1453f8:	e12fff1e 	bx	lr

001453fc <__udivmoddi4>:
  1453fc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
  145400:	e1510003 	cmp	r1, r3
  145404:	e24dd008 	sub	sp, sp, #8
  145408:	01500002 	cmpeq	r0, r2
  14540c:	e1a09000 	mov	r9, r0
  145410:	e1a0a001 	mov	sl, r1
  145414:	e59d8028 	ldr	r8, [sp, #40]	; 0x28
  145418:	3a00003c 	bcc	145510 <__udivmoddi4+0x114>
  14541c:	e1a00002 	mov	r0, r2
  145420:	e3530000 	cmp	r3, #0
  145424:	e1a01003 	mov	r1, r3
  145428:	016f3f10 	clzeq	r3, r0
  14542c:	116f2f13 	clzne	r2, r3
  145430:	02832020 	addeq	r2, r3, #32
  145434:	e35a0000 	cmp	sl, #0
  145438:	016f3f19 	clzeq	r3, r9
  14543c:	116f3f1a 	clzne	r3, sl
  145440:	02833020 	addeq	r3, r3, #32
  145444:	e0423003 	sub	r3, r2, r3
  145448:	e243c020 	sub	ip, r3, #32
  14544c:	e1a07311 	lsl	r7, r1, r3
  145450:	e1877c10 	orr	r7, r7, r0, lsl ip
  145454:	e263e020 	rsb	lr, r3, #32
  145458:	e1877e30 	orr	r7, r7, r0, lsr lr
  14545c:	e1a06310 	lsl	r6, r0, r3
  145460:	e15a0007 	cmp	sl, r7
  145464:	01590006 	cmpeq	r9, r6
  145468:	2a000030 	bcs	145530 <__udivmoddi4+0x134>
  14546c:	e3a01000 	mov	r1, #0
  145470:	e3a02000 	mov	r2, #0
  145474:	e88d0006 	stm	sp, {r1, r2}
  145478:	e3530000 	cmp	r3, #0
  14547c:	0a000026 	beq	14551c <__udivmoddi4+0x120>
  145480:	e1b070a7 	lsrs	r7, r7, #1
  145484:	e1a06066 	rrx	r6, r6
  145488:	e1a02003 	mov	r2, r3
  14548c:	ea000007 	b	1454b0 <__udivmoddi4+0xb4>
  145490:	e0590006 	subs	r0, r9, r6
  145494:	e0ca1007 	sbc	r1, sl, r7
  145498:	e0904000 	adds	r4, r0, r0
  14549c:	e0a15001 	adc	r5, r1, r1
  1454a0:	e2949001 	adds	r9, r4, #1
  1454a4:	e2a5a000 	adc	sl, r5, #0
  1454a8:	e2522001 	subs	r2, r2, #1
  1454ac:	0a000006 	beq	1454cc <__udivmoddi4+0xd0>
  1454b0:	e15a0007 	cmp	sl, r7
  1454b4:	01590006 	cmpeq	r9, r6
  1454b8:	2afffff4 	bcs	145490 <__udivmoddi4+0x94>
  1454bc:	e0999009 	adds	r9, r9, r9
  1454c0:	e0aaa00a 	adc	sl, sl, sl
  1454c4:	e2522001 	subs	r2, r2, #1
  1454c8:	1afffff8 	bne	1454b0 <__udivmoddi4+0xb4>
  1454cc:	e89d00c0 	ldm	sp, {r6, r7}
  1454d0:	e1a02339 	lsr	r2, r9, r3
  1454d4:	e0966009 	adds	r6, r6, r9
  1454d8:	e1822e1a 	orr	r2, r2, sl, lsl lr
  1454dc:	e1a0133a 	lsr	r1, sl, r3
  1454e0:	e1822c3a 	orr	r2, r2, sl, lsr ip
  1454e4:	e0a7700a 	adc	r7, r7, sl
  1454e8:	e1a0a001 	mov	sl, r1
  1454ec:	e1a0131a 	lsl	r1, sl, r3
  1454f0:	e1811c12 	orr	r1, r1, r2, lsl ip
  1454f4:	e1a00312 	lsl	r0, r2, r3
  1454f8:	e0566000 	subs	r6, r6, r0
  1454fc:	e1811e32 	orr	r1, r1, r2, lsr lr
  145500:	e0c77001 	sbc	r7, r7, r1
  145504:	e1a09002 	mov	r9, r2
  145508:	e88d00c0 	stm	sp, {r6, r7}
  14550c:	ea000002 	b	14551c <__udivmoddi4+0x120>
  145510:	e3a03000 	mov	r3, #0
  145514:	e3a04000 	mov	r4, #0
  145518:	e88d0018 	stm	sp, {r3, r4}
  14551c:	e3580000 	cmp	r8, #0
  145520:	18880600 	stmne	r8, {r9, sl}
  145524:	e89d0003 	ldm	sp, {r0, r1}
  145528:	e28dd008 	add	sp, sp, #8
  14552c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
  145530:	e3a02001 	mov	r2, #1
  145534:	e1a01c12 	lsl	r1, r2, ip
  145538:	e1811e32 	orr	r1, r1, r2, lsr lr
  14553c:	e0599006 	subs	r9, r9, r6
  145540:	e1a02312 	lsl	r2, r2, r3
  145544:	e58d1004 	str	r1, [sp, #4]
  145548:	e0caa007 	sbc	sl, sl, r7
  14554c:	e58d2000 	str	r2, [sp]
  145550:	eaffffc8 	b	145478 <__udivmoddi4+0x7c>

00145554 <_init>:
  145554:	e92d4001 	push	{r0, lr}
  145558:	e8bd4001 	pop	{r0, lr}
  14555c:	e12fff1e 	bx	lr

00145560 <_fini>:
  145560:	e92d4001 	push	{r0, lr}
  145564:	e8bd4001 	pop	{r0, lr}
  145568:	e12fff1e 	bx	lr
  14556c:	706d6f63 	.word	0x706d6f63
  145570:	6974656c 	.word	0x6974656c
  145574:	00006e6f 	.word	0x00006e6f
  145578:	20746553 	.word	0x20746553
  14557c:	6c626f6e 	.word	0x6c626f6e
  145580:	696b636f 	.word	0x696b636f
  145584:	6520676e 	.word	0x6520676e
  145588:	726f7272 	.word	0x726f7272
  14558c:	00000021 	.word	0x00000021
  145590:	61657243 	.word	0x61657243
  145594:	6c206574 	.word	0x6c206574
  145598:	65747369 	.word	0x65747369
  14559c:	2064666e 	.word	0x2064666e
  1455a0:	6b636f73 	.word	0x6b636f73
  1455a4:	65207465 	.word	0x65207465
  1455a8:	726f7272 	.word	0x726f7272
  1455ac:	7325203a 	.word	0x7325203a
  1455b0:	72726528 	.word	0x72726528
  1455b4:	203a6f6e 	.word	0x203a6f6e
  1455b8:	0a296425 	.word	0x0a296425
  1455bc:	00000000 	.word	0x00000000
  1455c0:	73746553 	.word	0x73746553
  1455c4:	6f6b636f 	.word	0x6f6b636f
  1455c8:	72207470 	.word	0x72207470
  1455cc:	65737565 	.word	0x65737565
  1455d0:	20646461 	.word	0x20646461
  1455d4:	6c696166 	.word	0x6c696166
  1455d8:	00006465 	.word	0x00006465
  1455dc:	646e6942 	.word	0x646e6942
  1455e0:	636f7320 	.word	0x636f7320
  1455e4:	2074656b 	.word	0x2074656b
  1455e8:	6f727265 	.word	0x6f727265
  1455ec:	25203a72 	.word	0x25203a72
  1455f0:	72652873 	.word	0x72652873
  1455f4:	3a6f6e72 	.word	0x3a6f6e72
  1455f8:	29642520 	.word	0x29642520
  1455fc:	6466202c 	.word	0x6466202c
  145600:	0a64253d 	.word	0x0a64253d
  145604:	00000000 	.word	0x00000000
  145608:	7473694c 	.word	0x7473694c
  14560c:	73206e65 	.word	0x73206e65
  145610:	656b636f 	.word	0x656b636f
  145614:	72652074 	.word	0x72652074
  145618:	3a726f72 	.word	0x3a726f72
  14561c:	28732520 	.word	0x28732520
  145620:	6e727265 	.word	0x6e727265
  145624:	25203a6f 	.word	0x25203a6f
  145628:	000a2964 	.word	0x000a2964
  14562c:	61657243 	.word	0x61657243
  145630:	63206574 	.word	0x63206574
  145634:	6e65696c 	.word	0x6e65696c
  145638:	20646674 	.word	0x20646674
  14563c:	6b636f73 	.word	0x6b636f73
  145640:	65207465 	.word	0x65207465
  145644:	726f7272 	.word	0x726f7272
  145648:	7325203a 	.word	0x7325203a
  14564c:	72726528 	.word	0x72726528
  145650:	203a6f6e 	.word	0x203a6f6e
  145654:	0a296425 	.word	0x0a296425
  145658:	00000000 	.word	0x00000000
  14565c:	656c6573 	.word	0x656c6573
  145660:	65207463 	.word	0x65207463
  145664:	726f7272 	.word	0x726f7272
  145668:	00000000 	.word	0x00000000
  14566c:	746e6f63 	.word	0x746e6f63
  145670:	65756e69 	.word	0x65756e69
  145674:	00000000 	.word	0x00000000
  145678:	69745f75 	.word	0x69745f75
  14567c:	0072656d 	.word	0x0072656d
  145680:	5f6d7475 	.word	0x5f6d7475
  145684:	6574756d 	.word	0x6574756d
  145688:	00000078 	.word	0x00000078
  14568c:	00007325 	.word	0x00007325
  145690:	72657355 	.word	0x72657355
  145694:	3a505041 	.word	0x3a505041
  145698:	73252820 	.word	0x73252820
  14569c:	73612029 	.word	0x73612029
  1456a0:	74726573 	.word	0x74726573
  1456a4:	206e6f69 	.word	0x206e6f69
  1456a8:	6c696166 	.word	0x6c696166
  1456ac:	61206465 	.word	0x61206465
  1456b0:	75662074 	.word	0x75662074
  1456b4:	6974636e 	.word	0x6974636e
  1456b8:	253a6e6f 	.word	0x253a6e6f
  1456bc:	6c202c73 	.word	0x6c202c73
  1456c0:	20656e69 	.word	0x20656e69
  1456c4:	626d756e 	.word	0x626d756e
  1456c8:	253a7265 	.word	0x253a7265
  1456cc:	000a2064 	.word	0x000a2064
  1456d0:	6e616863 	.word	0x6e616863
  1456d4:	206c656e 	.word	0x206c656e
  1456d8:	30203d3e 	.word	0x30203d3e
  1456dc:	00000000 	.word	0x00000000
  1456e0:	5049776c 	.word	0x5049776c
  1456e4:	0074694b 	.word	0x0074694b
  1456e8:	61746164 	.word	0x61746164
  1456ec:	00646e49 	.word	0x00646e49
  1456f0:	6c207325 	.word	0x6c207325
  1456f4:	20656e69 	.word	0x20656e69
  1456f8:	73206425 	.word	0x73206425
  1456fc:	74646e65 	.word	0x74646e65
  145700:	7265206f 	.word	0x7265206f
  145704:	0a726f72 	.word	0x0a726f72
  145708:	00000000 	.word	0x00000000
  14570c:	5049776c 	.word	0x5049776c
  145710:	2074694b 	.word	0x2074694b
  145714:	67617355 	.word	0x67617355
  145718:	090a3a65 	.word	0x090a3a65
  14571c:	5049776c 	.word	0x5049776c
  145720:	2074694b 	.word	0x2074694b
  145724:	20202020 	.word	0x20202020
  145728:	20202020 	.word	0x20202020
  14572c:	20202020 	.word	0x20202020
  145730:	203a2020 	.word	0x203a2020
  145734:	6e757220 	.word	0x6e757220
  145738:	49776c20 	.word	0x49776c20
  14573c:	74694b50 	.word	0x74694b50
  145740:	6177202c 	.word	0x6177202c
  145744:	66207469 	.word	0x66207469
  145748:	6520726f 	.word	0x6520726f
  14574c:	65646874 	.word	0x65646874
  145750:	6f742076 	.word	0x6f742076
  145754:	74746120 	.word	0x74746120
  145758:	0a686361 	.word	0x0a686361
  14575c:	49776c09 	.word	0x49776c09
  145760:	74694b50 	.word	0x74694b50
  145764:	74746120 	.word	0x74746120
  145768:	20686361 	.word	0x20686361
  14576c:	653c2020 	.word	0x653c2020
  145770:	3a3e6874 	.word	0x3a3e6874
  145774:	74612020 	.word	0x74612020
  145778:	68636174 	.word	0x68636174
  14577c:	65687420 	.word	0x65687420
  145780:	76656420 	.word	0x76656420
  145784:	20656369 	.word	0x20656369
  145788:	6874653c 	.word	0x6874653c
  14578c:	6f74203e 	.word	0x6f74203e
  145790:	49776c20 	.word	0x49776c20
  145794:	74694b50 	.word	0x74694b50
  145798:	776c090a 	.word	0x776c090a
  14579c:	694b5049 	.word	0x694b5049
  1457a0:	65642074 	.word	0x65642074
  1457a4:	61747461 	.word	0x61747461
  1457a8:	3c206863 	.word	0x3c206863
  1457ac:	3e687465 	.word	0x3e687465
  1457b0:	6420203a 	.word	0x6420203a
  1457b4:	74612d65 	.word	0x74612d65
  1457b8:	68636174 	.word	0x68636174
  1457bc:	65687420 	.word	0x65687420
  1457c0:	76656420 	.word	0x76656420
  1457c4:	20656369 	.word	0x20656369
  1457c8:	6874653c 	.word	0x6874653c
  1457cc:	7266203e 	.word	0x7266203e
  1457d0:	6c206d6f 	.word	0x6c206d6f
  1457d4:	4b504977 	.word	0x4b504977
  1457d8:	090a7469 	.word	0x090a7469
  1457dc:	5049776c 	.word	0x5049776c
  1457e0:	2074694b 	.word	0x2074694b
  1457e4:	61666564 	.word	0x61666564
  1457e8:	20746c75 	.word	0x20746c75
  1457ec:	74653c20 	.word	0x74653c20
  1457f0:	203a3e68 	.word	0x203a3e68
  1457f4:	74657320 	.word	0x74657320
  1457f8:	74653c20 	.word	0x74653c20
  1457fc:	61203e68 	.word	0x61203e68
  145800:	68742073 	.word	0x68742073
  145804:	65642065 	.word	0x65642065
  145808:	6c756166 	.word	0x6c756166
  14580c:	65642074 	.word	0x65642074
  145810:	65636976 	.word	0x65636976
  145814:	776c090a 	.word	0x776c090a
  145818:	694b5049 	.word	0x694b5049
  14581c:	74732074 	.word	0x74732074
  145820:	73757461 	.word	0x73757461
  145824:	20202020 	.word	0x20202020
  145828:	20202020 	.word	0x20202020
  14582c:	7320203a 	.word	0x7320203a
  145830:	20776f68 	.word	0x20776f68
  145834:	20656874 	.word	0x20656874
  145838:	74617473 	.word	0x74617473
  14583c:	6f207375 	.word	0x6f207375
  145840:	75722066 	.word	0x75722066
  145844:	6e696e6e 	.word	0x6e696e6e
  145848:	776c2067 	.word	0x776c2067
  14584c:	494b5049 	.word	0x494b5049
  145850:	00000074 	.word	0x00000074
  145854:	5049776c 	.word	0x5049776c
  145858:	3a74694b 	.word	0x3a74694b
  14585c:	61747320 	.word	0x61747320
  145860:	20737472 	.word	0x20737472
  145864:	72206f74 	.word	0x72206f74
  145868:	61206e75 	.word	0x61206e75
  14586c:	68742073 	.word	0x68742073
  145870:	65732065 	.word	0x65732065
  145874:	72657672 	.word	0x72657672
  145878:	00000000 	.word	0x00000000
  14587c:	2e2e2e20 	.word	0x2e2e2e20
  145880:	6c696166 	.word	0x6c696166
  145884:	00216465 	.word	0x00216465
  145888:	2e2e2e20 	.word	0x2e2e2e20
  14588c:	70696b73 	.word	0x70696b73
  145890:	21646570 	.word	0x21646570
  145894:	726c4120 	.word	0x726c4120
  145898:	79646165 	.word	0x79646165
  14589c:	696e6920 	.word	0x696e6920
  1458a0:	6c616974 	.word	0x6c616974
  1458a4:	64657a69 	.word	0x64657a69
  1458a8:	00000000 	.word	0x00000000
  1458ac:	2e2e2e20 	.word	0x2e2e2e20
  1458b0:	63637573 	.word	0x63637573
  1458b4:	65646565 	.word	0x65646565
  1458b8:	00002164 	.word	0x00002164
  1458bc:	5049776c 	.word	0x5049776c
  1458c0:	3a74694b 	.word	0x3a74694b
  1458c4:	696e6920 	.word	0x696e6920
  1458c8:	74652074 	.word	0x74652074
  1458cc:	65642068 	.word	0x65642068
  1458d0:	2e2e2e76 	.word	0x2e2e2e76
  1458d4:	00000000 	.word	0x00000000
  1458d8:	63637573 	.word	0x63637573
  1458dc:	65646565 	.word	0x65646565
  1458e0:	00000064 	.word	0x00000064
  1458e4:	61747461 	.word	0x61747461
  1458e8:	00006863 	.word	0x00006863
  1458ec:	5049776c 	.word	0x5049776c
  1458f0:	3a74694b 	.word	0x3a74694b
  1458f4:	74746120 	.word	0x74746120
  1458f8:	20686361 	.word	0x20686361
  1458fc:	69766564 	.word	0x69766564
  145900:	25206563 	.word	0x25206563
  145904:	00000a73 	.word	0x00000a73
  145908:	6e6e6163 	.word	0x6e6e6163
  14590c:	6f20746f 	.word	0x6f20746f
  145910:	206e6570 	.word	0x206e6570
  145914:	61746164 	.word	0x61746164
  145918:	6168635f 	.word	0x6168635f
  14591c:	6c656e6e 	.word	0x6c656e6e
  145920:	6c70202c 	.word	0x6c70202c
  145924:	65736165 	.word	0x65736165
  145928:	6b616d20 	.word	0x6b616d20
  14592c:	75732065 	.word	0x75732065
  145930:	6c206572 	.word	0x6c206572
  145934:	4b504977 	.word	0x4b504977
  145938:	73207469 	.word	0x73207469
  14593c:	65767265 	.word	0x65767265
  145940:	73692072 	.word	0x73692072
  145944:	6e757220 	.word	0x6e757220
  145948:	676e696e 	.word	0x676e696e
  14594c:	00000021 	.word	0x00000021
  145950:	74616564 	.word	0x74616564
  145954:	68636174 	.word	0x68636174
  145958:	00000000 	.word	0x00000000
  14595c:	5049776c 	.word	0x5049776c
  145960:	3a74694b 	.word	0x3a74694b
  145964:	2d656420 	.word	0x2d656420
  145968:	61747461 	.word	0x61747461
  14596c:	64206863 	.word	0x64206863
  145970:	63697665 	.word	0x63697665
  145974:	73252065 	.word	0x73252065
  145978:	0000000a 	.word	0x0000000a
  14597c:	61666564 	.word	0x61666564
  145980:	00746c75 	.word	0x00746c75
  145984:	5049776c 	.word	0x5049776c
  145988:	3a74694b 	.word	0x3a74694b
  14598c:	74657320 	.word	0x74657320
  145990:	65687420 	.word	0x65687420
  145994:	66656420 	.word	0x66656420
  145998:	746c7561 	.word	0x746c7561
  14599c:	76656420 	.word	0x76656420
  1459a0:	20656369 	.word	0x20656369
  1459a4:	00007325 	.word	0x00007325
  1459a8:	74617473 	.word	0x74617473
  1459ac:	00007375 	.word	0x00007375
  1459b0:	5049776c 	.word	0x5049776c
  1459b4:	3a74694b 	.word	0x3a74694b
  1459b8:	65687420 	.word	0x65687420
  1459bc:	61747320 	.word	0x61747320
  1459c0:	20737574 	.word	0x20737574
  1459c4:	7420666f 	.word	0x7420666f
  1459c8:	61206568 	.word	0x61206568
  1459cc:	63617474 	.word	0x63617474
  1459d0:	20646568 	.word	0x20646568
  1459d4:	69766564 	.word	0x69766564
  1459d8:	20736563 	.word	0x20736563
  1459dc:	66207361 	.word	0x66207361
  1459e0:	6f6c6c6f 	.word	0x6f6c6c6f
  1459e4:	00007377 	.word	0x00007377

001459e8 <__func__.9579>:
  1459e8:	63617473 75725f6b 0000006e              stack_run...

001459f4 <__FUNCTION__.6247>:
  1459f4:	6e616863 5f6c656e 5f646d63 76636572     channel_cmd_recv
  145a04:	00000000                                ....

00145a08 <__FUNCTION__.6253>:
  145a08:	6e616863 5f6c656e 5f646d63 6c706572     channel_cmd_repl
  145a18:	00000079                                y...

00145a1c <__FUNCTION__.6242>:
  145a1c:	6e616863 5f6c656e 5f646d63 646e6573     channel_cmd_send
  145a2c:	00000000 3a207325 6c696146 206f7420     ....%s :Fail to 
  145a3c:	6f6c6c61 65746163 73206120 65726168     allocate a share
  145a4c:	656d2064 79726f6d 735f2021 6b5f6d68     d memory! _shm_k
  145a5c:	25207965 000a646c 20656854 6f6c6c61     ey %ld..The allo
  145a6c:	65746163 68732064 64657261 6d656d20     cated shared mem
  145a7c:	2079726f 73656f64 2074276e 65766168     ory doesn't have
  145a8c:	76206120 64696c61 64646120 73736572      a valid address
  145a9c:	00000021                                !...

00145aa0 <__func__.6282>:
  145aa0:	6e616863 5f6c656e 706d6f63 5f65736f     channel_compose_
  145ab0:	00646d63 6e616863 206c656e 30203d3e     cmd.channel >= 0
  145ac0:	00000000 68746575 7672735f 00000000     ....ueth_srv....
  145ad0:	68746575 746e695f 00000000 6e65706f     ueth_int....open
  145ae0:	20732520 6c696166 000a6465               %s failed..

00145aec <__FUNCTION__.5856>:
  145aec:	6e616863 5f6c656e 5f646d63 76636572     channel_cmd_recv
  145afc:	00000000                                ....

00145b00 <__FUNCTION__.5845>:
  145b00:	6e616863 5f6c656e 5f646d63 646e6573     channel_cmd_send
  145b10:	6365725f 00000076                       _recv...

00145b18 <unet_socket_ops>:
  145b18:	00108e10 00108e8c 00108eb8 00108ef0     ................
  145b28:	00108f20 00108f58 00108f94 00109044      ...X.......D...
  145b38:	001090d8 00109120 00109168 00109198     .... ...h.......
  145b48:	001091d0 001048d4 00000000              .....H......

00145b54 <unet_netdb_ops>:
  145b54:	00109278 001093b8 001093e8 00109428     x...........(...

00145b64 <unet_inet_family>:
  145b64:	00000002 00000002 00145b18 00145b54     .........[..T[..
  145b74:	6474656e 00007665                       netdev..

00145b7c <__FUNCTION__.7159>:
  145b7c:	5f6c6173 74656e75 74656e5f 5f766564     sal_unet_netdev_
  145b8c:	5f746573 695f6670 006f666e 20766564     set_pf_info.dev 
  145b9c:	52203d21 554e5f54 00004c4c 2d766564     != RT_NULL..dev-
  145bac:	7261703e 2e746e65 65707974 203d3d20     >parent.type == 
  145bbc:	4f5f5452 63656a62 6c435f74 5f737361     RT_Object_Class_
  145bcc:	69766544 00006563 69206f54 6974696e     Device..To initi
  145bdc:	7a696c61 65642065 65636976 2073253a     alize device:%s 
  145bec:	6c696166 202e6465 20656854 6f727265     failed. The erro
  145bfc:	6f632072 69206564 6c252073 00000a64     r code is %ld...

00145c0c <__FUNCTION__.6035>:
  145c0c:	68746575 7665645f 5f656369 65726e75     ueth_device_unre
  145c1c:	74736967 00007265                       gister..

00145c24 <__FUNCTION__.6044>:
  145c24:	68746575 7665645f 5f656369 74696e69     ueth_device_init
  145c34:	00000000                                ....

00145c38 <__FUNCTION__.6049>:
  145c38:	68746575 7665645f 5f656369 736f6c63     ueth_device_clos
  145c48:	00000065                                e...

00145c4c <__FUNCTION__.6055>:
  145c4c:	68746575 7665645f 5f656369 746e6f63     ueth_device_cont
  145c5c:	006c6f72 6474656e 00007665 656d616e     rol.netdev..name
  145c6c:	00000000 31335b1b 2f455b6d 6474656e     .....[31m[E/netd
  145c7c:	205d7665 00000000 20656854 7774656e     ev] ....The netw
  145c8c:	206b726f 65746e69 63616672 65642065     ork interface de
  145c9c:	65636976 29732528 746f6e20 70757320     vice(%s) not sup
  145cac:	74726f70 206f7420 20746573 74617473     port to set stat
  145cbc:	002e7375 6d305b1b 0000000a 20656854     us...[0m....The 
  145ccc:	7774656e 206b726f 65746e69 63616672     network interfac
  145cdc:	65642065 65636976 29732528 746f6e20     e device(%s) not
  145cec:	70757320 74726f70 206f7420 20746573      support to set 
  145cfc:	50434844 61747320 2e737574 00000000     DHCP status.....
  145d0c:	615f7069 00726464 20656854 7774656e     ip_addr.The netw
  145d1c:	206b726f 65746e69 63616672 65642065     ork interface de
  145d2c:	65636976 29732528 746f6e20 70757320     vice(%s) not sup
  145d3c:	74726f70 206f7420 20746573 61205049     port to set IP a
  145d4c:	65726464 002e7373 20656854 7774656e     ddress..The netw
  145d5c:	206b726f 65746e69 63616672 65642065     ork interface de
  145d6c:	65636976 29732528 43484420 61632050     vice(%s) DHCP ca
  145d7c:	69626170 7974696c 20736920 62616e65     pability is enab
  145d8c:	202c656c 20746f6e 70707573 2074726f     le, not support 
  145d9c:	20746573 61205049 65726464 002e7373     set IP address..
  145dac:	6d74656e 006b7361 20656854 7774656e     netmask.The netw
  145dbc:	206b726f 65746e69 63616672 65642065     ork interface de
  145dcc:	65636976 29732528 746f6e20 70757320     vice(%s) not sup
  145ddc:	74726f70 206f7420 20746573 6d74656e     port to set netm
  145dec:	206b7361 72646461 2e737365 00000000     ask address.....
  145dfc:	20656854 7774656e 206b726f 65746e69     The network inte
  145e0c:	63616672 65642065 65636976 29732528     rface device(%s)
  145e1c:	43484420 61632050 69626170 7974696c      DHCP capability
  145e2c:	20736920 62616e65 202c656c 20746f6e      is enable, not 
  145e3c:	70707573 2074726f 20746573 6d74656e     support set netm
  145e4c:	206b7361 72646461 2e737365 00000000     ask address.....
  145e5c:	00007767 20656854 7774656e 206b726f     gw..The network 
  145e6c:	65746e69 63616672 65642065 65636976     interface device
  145e7c:	29732528 746f6e20 70757320 74726f70     (%s) not support
  145e8c:	206f7420 20746573 65746167 20796177      to set gateway 
  145e9c:	72646461 2e737365 00000000 20656854     address.....The 
  145eac:	7774656e 206b726f 65746e69 63616672     network interfac
  145ebc:	65642065 65636976 29732528 43484420     e device(%s) DHC
  145ecc:	61632050 69626170 7974696c 20736920     P capability is 
  145edc:	62616e65 202c656c 20746f6e 70707573     enable, not supp
  145eec:	2074726f 20746573 65746167 20796177     ort set gateway 
  145efc:	72646461 2e737365 00000000 5f736e64     address.....dns_
  145f0c:	76726573 00007265 20656854 626d756e     server..The numb
  145f1c:	6f207265 4e442066 65732053 72657672     er of DNS server
  145f2c:	64252873 65732029 78652074 64656563     s(%d) set exceed
  145f3c:	68742073 616d2065 756d6978 756e206d     s the maximum nu
  145f4c:	7265626d 29642528 0000002e 20656854     mber(%d)....The 
  145f5c:	7774656e 206b726f 65746e69 63616672     network interfac
  145f6c:	65642065 65636976 29732528 746f6e20     e device(%s) not
  145f7c:	70757320 74726f70 206f7420 20746573      support to set 
  145f8c:	20534e44 76726573 61207265 65726464     DNS server addre
  145f9c:	002e7373 74617473 635f7375 626c6c61     ss..status_callb
  145fac:	006b6361 72646461 6c61635f 6361626c     ack.addr_callbac
  145fbc:	0000006b                                k...

00145fc0 <__FUNCTION__.6920>:
  145fc0:	6474656e 725f7665 73696765 00726574     netdev_register.

00145fd0 <__FUNCTION__.6929>:
  145fd0:	6474656e 755f7665 6765726e 65747369     netdev_unregiste
  145fe0:	00000072                                r...

00145fe4 <__FUNCTION__.6975>:
  145fe4:	6474656e 665f7665 6c696d61 65675f79     netdev_family_ge
  145ff4:	00000074                                t...

00145ff8 <__FUNCTION__.6982>:
  145ff8:	6474656e 735f7665 755f7465 00000070     netdev_set_up...

00146008 <__FUNCTION__.6986>:
  146008:	6474656e 735f7665 645f7465 006e776f     netdev_set_down.

00146018 <__FUNCTION__.6991>:
  146018:	6474656e 645f7665 5f706368 62616e65     netdev_dhcp_enab
  146028:	0064656c                                led.

0014602c <__FUNCTION__.6996>:
  14602c:	6474656e 735f7665 695f7465 64646170     netdev_set_ipadd
  14603c:	00000072                                r...

00146040 <__FUNCTION__.7001>:
  146040:	6474656e 735f7665 6e5f7465 616d7465     netdev_set_netma
  146050:	00006b73                                sk..

00146054 <__FUNCTION__.7006>:
  146054:	6474656e 735f7665 675f7465 00000077     netdev_set_gw...

00146064 <__FUNCTION__.7012>:
  146064:	6474656e 735f7665 645f7465 735f736e     netdev_set_dns_s
  146074:	65767265 00000072                       erver...

0014607c <__FUNCTION__.7017>:
  14607c:	6474656e 735f7665 735f7465 75746174     netdev_set_statu
  14608c:	61635f73 61626c6c 00006b63              s_callback..

00146098 <__FUNCTION__.7022>:
  146098:	6474656e 735f7665 615f7465 5f726464     netdev_set_addr_
  1460a8:	6c6c6163 6b636162 00000000              callback....

001460b4 <__FUNCTION__.7027>:
  1460b4:	6474656e 6c5f7665 6c5f776f 6c657665     netdev_low_level
  1460c4:	7465735f 6170695f 00726464              _set_ipaddr.

001460d0 <__FUNCTION__.7032>:
  1460d0:	6474656e 6c5f7665 6c5f776f 6c657665     netdev_low_level
  1460e0:	7465735f 74656e5f 6b73616d 00000000     _set_netmask....

001460f0 <__FUNCTION__.7037>:
  1460f0:	6474656e 6c5f7665 6c5f776f 6c657665     netdev_low_level
  146100:	7465735f 0077675f                       _set_gw.

00146108 <__FUNCTION__.7044>:
  146108:	6474656e 6c5f7665 6c5f776f 6c657665     netdev_low_level
  146118:	7465735f 736e645f 7265735f 00726576     _set_dns_server.
  146128:	00000030                                0...

0014612c <__FUNCTION__.5841>:
  14612c:	6474656e 695f7665 64613470 615f7264     netdev_ip4addr_a
  14613c:	006e6f74 31335b1b 2f455b6d 2e6c6173     ton..[31m[E/sal.
  14614c:	5d746b73 00000020 6d206f4e 726f6d65     skt] ...No memor
  14615c:	6f662079 6f732072 74656b63 62617420     y for socket tab
  14616c:	0a2e656c 00000000 6d305b1b 0000000a     le.......[0m....
  14617c:	5f6c6173 6b636f6c 00000000 32335b1b     sal_lock.....[32
  14618c:	2f495b6d 2e6c6173 5d746b73 00000020     m[I/sal.skt] ...
  14619c:	6b636f53 41207465 72747362 69746361     Socket Abstracti
  1461ac:	4c206e6f 72657961 696e6920 6c616974     on Layer initial
  1461bc:	20657a69 63637573 2e737365 00000000     ize success.....
  1461cc:	6b6e696c 2d74722e 65726874 6f2e6461     link.rt-thread.o
  1461dc:	00006772 20706553 32203620 00323230     rg..Sep  6 2022.
  1461ec:	00007325 006e614a 00626546 0072614d     %s..Jan.Feb.Mar.
  1461fc:	00727041 0079614d 006e754a 006c754a     Apr.May.Jun.Jul.
  14620c:	00677541 00706553 0074634f 00766f4e     Aug.Sep.Oct.Nov.
  14621c:	00636544 3e2d7473 6b636f73 5b737465     Dec.st->sockets[
  14622c:	6b636f73 2d5d7465 67616d3e 3d206369     socket]->magic =
  14623c:	4153203d 4f535f4c 54454b43 47414d5f     = SAL_SOCKET_MAG
  14624c:	00004349 00000030 20746f6e 646e6966     IC..0...not find
  14625c:	74656e20 6b726f77 746e6920 61667265      network interfa
  14626c:	64206563 63697665 79622065 6f727020     ce device by pro
  14627c:	6f636f74 6166206c 796c696d 29642528     tocol family(%d)
  14628c:	0000002e 6b636f73 203d2120 4e5f5452     ....sock != RT_N
  14629c:	004c4c55 2077654e 6b636f73 72207465     ULL.New socket r
  1462ac:	73696765 65726574 61662064 64656c69     egistered failed
  1462bc:	6572202c 6e727574 72726520 2520726f     , return error %
  1462cc:	00002e64 656d616e 00000000 204c4153     d...name....SAL 
  1462dc:	6b636f73 70207465 6f746f72 206c6f63     socket protocol 
  1462ec:	696d6166 6920796c 7475706e 69616620     family input fai
  1462fc:	2c64656c 74657220 206e7275 6f727265     led, return erro
  14630c:	64252072 0000002e                       r %d....

00146314 <__FUNCTION__.6969>:
  146314:	5f6c6173 5f746567 6b636f73 00007465     sal_get_socket..

00146324 <__FUNCTION__.6974>:
  146324:	5f6c6173 6b636f6c 00000000              sal_lock....

00146330 <__FUNCTION__.7032>:
  146330:	6b636f73 645f7465 74656c65 00000065     socket_delete...

00146340 <__FUNCTION__.7057>:
  146340:	5f6c6173 646e6962 00000000 6c207325     sal_bind....%s l
  146350:	20656e69 73206425 74646e65 7265206f     ine %d sendto er
  146360:	0a726f72 00000000                       ror.....

00146368 <__func__.6506>:
  146368:	74656e75 6e65735f 006f7464 20736664     unet_sendto.dfs 
  146378:	65726c61 20796461 74696e69 00000a2e     already init....
  146388:	6f6c7366 00006b63 6f6c6466 00006b63     fslock..fdlock..
  146398:	00000030 20534644 6e206466 69207765     0...DFS fd new i
  1463a8:	61662073 64656c69 6f432021 20646c75     s failed! Could 
  1463b8:	20746f6e 6e756f66 6e612064 706d6520     not found an emp
  1463c8:	66207974 6e652064 2e797274 00000000     ty fd entry.....
  1463d8:	20746466 4e203d21 004c4c55 735f6466     fdt != NULL.fd_s
  1463e8:	2d746f6c 67616d3e 3d206369 4644203d     lot->magic == DF
  1463f8:	44465f53 47414d5f 00004349              S_FD_MAGIC..

00146404 <__FUNCTION__.6409>:
  146404:	5f736664 6b636f6c 00000000              dfs_lock....

00146410 <__FUNCTION__.6417>:
  146410:	5f736664 6c5f6466 006b636f              dfs_fd_lock.

0014641c <__FUNCTION__.6470>:
  14641c:	5f746466 725f6466 61656c65 00006573     fdt_fd_release..
  14642c:	5f736664 0072676d                       dfs_mgr.

00146434 <_net_fops>:
  146434:	0010a3f0 0010a26c 0010a2e0 0010a368     ....l.......h...
  146444:	0010a448 7069776c 73797320 206d6574     H...lwip system 
  146454:	65726c61 20796461 74696e69 00000a2e     already init....
  146464:	656e6f64 00000000 6c696146 74206465     done....Failed t
  146474:	7263206f 65746165 6d657320 6f687061     o create semapho
  146484:	00006572 76726573 73656369 49776c2f     re..services/lwI
  146494:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  1464a4:	2f637273 68637261 7379732f 6372615f     src/arch/sys_arc
  1464b4:	00632e68 69706374 626d5f70 6d69745f     h.c.tcpip_mb_tim
  1464c4:	00007265 006d6573 64257325 00000000     er..sem.%s%d....
  1464d4:	0000756d 786f626d 00000000 6d5f7472     mu..mbox....rt_m
  1464e4:	65725f62 72207663 72757465 2064656e     b_recv returned 
  1464f4:	68746977 72726520 0021726f 3d212074     with error!.t !=
  146504:	5f545220 4c4c554e 00000000 7373410a      RT_NULL.....Ass
  146514:	69747265 203a6e6f 69206425 7325206e     ertion: %d in %s
  146524:	0000000a 00000030                       ....0...

0014652c <__FUNCTION__.7531>:
  14652c:	5f737973 65726874 6e5f6461 00007765     sys_thread_new..

0014653c <__FUNCTION__.7543>:
  14653c:	5f737973 68637261 7373615f 00747265     sys_arch_assert.
  14654c:	65657266 20676e69 6e6e6f63 74697720     freeing conn wit
  14655c:	74756f68 65726620 676e6965 62637020     hout freeing pcb
  14656c:	00000000 76726573 73656369 49776c2f     ....services/lwI
  14657c:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  14658c:	2f637273 2f697061 5f697061 2e62696c     src/api/api_lib.
  14659c:	00000063 6e6e6f63 73616820 206f6e20     c...conn has no 
  1465ac:	76636572 786f626d 00000000 6e6e6f63     recvmbox....conn
  1465bc:	63613e2d 74706563 786f626d 6f687320     ->acceptmbox sho
  1465cc:	6e646c75 65207427 74736978 00000000     uldn't exist....
  1465dc:	6e6e6f63 73616820 206f6e20 635f706f     conn has no op_c
  1465ec:	6c706d6f 64657465 00000000 6374656e     ompleted....netc
  1465fc:	5f6e6e6f 61746567 3a726464 766e6920     onn_getaddr: inv
  14660c:	64696c61 6e6f6320 0000006e 6374656e     alid conn...netc
  14661c:	5f6e6e6f 61746567 3a726464 766e6920     onn_getaddr: inv
  14662c:	64696c61 64646120 00000072 6374656e     alid addr...netc
  14663c:	5f6e6e6f 61746567 3a726464 766e6920     onn_getaddr: inv
  14664c:	64696c61 726f7020 00000074 6374656e     alid port...netc
  14665c:	5f6e6e6f 646e6962 6e69203a 696c6176     onn_bind: invali
  14666c:	6f632064 00006e6e 6374656e 5f6e6e6f     d conn..netconn_
  14667c:	6e6e6f63 3a746365 766e6920 64696c61     connect: invalid
  14668c:	6e6f6320 0000006e 6374656e 5f6e6e6f      conn...netconn_
  14669c:	63736964 656e6e6f 203a7463 61766e69     disconnect: inva
  1466ac:	2064696c 6e6e6f63 00000000 6374656e     lid conn....netc
  1466bc:	5f6e6e6f 7473696c 203a6e65 61766e69     onn_listen: inva
  1466cc:	2064696c 6e6e6f63 00000000 6374656e     lid conn....netc
  1466dc:	5f6e6e6f 65636361 203a7470 61766e69     onn_accept: inva
  1466ec:	2064696c 6e696f70 00726574 6374656e     lid pointer.netc
  1466fc:	5f6e6e6f 65636361 203a7470 61766e69     onn_accept: inva
  14670c:	2064696c 6e6e6f63 00000000 6374656e     lid conn....netc
  14671c:	5f6e6e6f 76636572 6e69203a 696c6176     onn_recv: invali
  14672c:	6f702064 65746e69 00000072 6374656e     d pointer...netc
  14673c:	5f6e6e6f 76636572 6e69203a 696c6176     onn_recv: invali
  14674c:	6f632064 00006e6e 6374656e 5f6e6e6f     d conn..netconn_
  14675c:	76636572 6e69203a 696c6176 65722064     recv: invalid re
  14676c:	626d7663 0000786f 20667562 4e203d21     cvmbox..buf != N
  14677c:	004c4c55 3d212070 4c554e20 0000004c     ULL.p != NULL...
  14678c:	6374656e 5f6e6e6f 646e6573 6e69203a     netconn_send: in
  14679c:	696c6176 6f632064 00006e6e 6374656e     valid conn..netc
  1467ac:	5f6e6e6f 74697277 69203a65 6c61766e     onn_write: inval
  1467bc:	63206469 006e6e6f 6374656e 5f6e6e6f     id conn.netconn_
  1467cc:	74697277 69203a65 6c61766e 63206469     write: invalid c
  1467dc:	2d6e6e6f 7079743e 00000065 6374656e     onn->type...netc
  1467ec:	5f6e6e6f 736f6c63 69203a65 6c61766e     onn_close: inval
  1467fc:	63206469 006e6e6f 6374656e 5f6e6e6f     id conn.netconn_
  14680c:	6e696f6a 61656c5f 675f6576 70756f72     join_leave_group
  14681c:	6e69203a 696c6176 6f632064 00006e6e     : invalid conn..
  14682c:	6374656e 5f6e6e6f 68746567 6274736f     netconn_gethostb
  14683c:	6d616e79 69203a65 6c61766e 6e206469     yname: invalid n
  14684c:	00656d61 6374656e 5f6e6e6f 68746567     ame.netconn_geth
  14685c:	6274736f 6d616e79 69203a65 6c61766e     ostbyname: inval
  14686c:	61206469 00726464 76726573 73656369     id addr.services
  14687c:	49776c2f 74694b50 69776c2f 2e322d70     /lwIPKit/lwip-2.
  14688c:	2f322e30 2f637273 2f697061 5f697061     0.2/src/api/api_
  14689c:	2e67736d 00000063 76636572 7064755f     msg.c...recv_udp
  1468ac:	73756d20 61682074 61206576 62637020      must have a pcb
  1468bc:	67726120 6e656d75 00000074 76636572      argument...recv
  1468cc:	7064755f 73756d20 61682074 61206576     _udp must have a
  1468dc:	7261206e 656d7567 0000746e 76636572     n argument..recv
  1468ec:	7064755f 6572203a 66207663 7720726f     _udp: recv for w
  1468fc:	676e6f72 62637020 00000021 76636572     rong pcb!...recv
  14690c:	7063745f 73756d20 61682074 61206576     _tcp must have a
  14691c:	62637020 67726120 6e656d75 00000074      pcb argument...
  14692c:	76636572 7063745f 73756d20 61682074     recv_tcp must ha
  14693c:	61206576 7261206e 656d7567 0000746e     ve an argument..
  14694c:	76636572 7063745f 6572203a 66207663     recv_tcp: recv f
  14695c:	7720726f 676e6f72 62637020 00000021     or wrong pcb!...
  14696c:	6e6e6f63 203d2120 4c4c554e 00000000     conn != NULL....
  14697c:	6e6e6f63 75633e2d 6e657272 736d5f74     conn->current_ms
  14698c:	3d212067 4c554e20 0000004c 76616e69     g != NULL...inav
  14699c:	2064696c 635f706f 6c706d6f 64657465     lid op_completed
  1469ac:	6d65735f 00000000 6e6e6f63 75633e2d     _sem....conn->cu
  1469bc:	6e657272 736d5f74 3d3d2067 4c554e20     rrent_msg == NUL
  1469cc:	0000004c 5f626370 3a77656e 62637020     L...pcb_new: pcb
  1469dc:	726c6120 79646165 6c6c6120 7461636f      already allocat
  1469ec:	00006465 6374656e 5f6e6e6f 6f6c6c61     ed..netconn_allo
  1469fc:	75203a63 6665646e 64656e69 74656e20     c: undefined net
  146a0c:	6e6e6f63 7079745f 00000065 20424350     conn_type...PCB 
  146a1c:	7473756d 20656220 6c616564 61636f6c     must be dealloca
  146a2c:	20646574 7374756f 20656469 73696874     ted outside this
  146a3c:	6e756620 6f697463 0000006e 76636572      function...recv
  146a4c:	786f626d 73756d20 65622074 61656420     mbox must be dea
  146a5c:	636f6c6c 64657461 66656220 2065726f     llocated before 
  146a6c:	6c6c6163 20676e69 73696874 6e756620     calling this fun
  146a7c:	6f697463 0000006e 65636361 626d7470     ction...acceptmb
  146a8c:	6d20786f 20747375 64206562 6c6c6165     ox must be deall
  146a9c:	7461636f 62206465 726f6665 61632065     ocated before ca
  146aac:	6e696c6c 68742067 66207369 74636e75     lling this funct
  146abc:	006e6f69 61766e69 2064696c 6e6e6f63     ion.invalid conn
  146acc:	00000000 73696874 20736920 20726f66     ....this is for 
  146adc:	20706374 6374656e 736e6e6f 6c6e6f20     tcp netconns onl
  146aec:	00000079 6e6e6f63 73756d20 65622074     y...conn must be
  146afc:	206e6920 74617473 454e2065 4e4f4354      in state NETCON
  146b0c:	4c435f4e 0045534f 20626370 65726c61     N_CLOSE.pcb alre
  146b1c:	20796461 736f6c63 00006465 736f6c43     ady closed..Clos
  146b2c:	20676e69 696c2061 6e657473 62637020     ing a listen pcb
  146b3c:	79616d20 746f6e20 69616620 0000216c      may not fail!..
  146b4c:	20727265 45203d21 4f5f5252 0000004b     err != ERR_OK...
  146b5c:	6374656e 206e6e6f 74617473 72652065     netconn state er
  146b6c:	00726f72 636f6c62 676e696b 6e6f6320     ror.blocking con
  146b7c:	7463656e 206e6920 676f7270 73736572     nect in progress
  146b8c:	00000000 65726c61 20796461 74697277     ....already writ
  146b9c:	20676e69 6320726f 69736f6c 0000676e     ing or closing..
  146bac:	74617473 00002165 6e6e6f63 74733e2d     state!..conn->st
  146bbc:	20657461 4e203d3d 4f435445 435f4e4e     ate == NETCONN_C
  146bcc:	454e4e4f 00005443 6e6f6328 633e2d6e     ONNECT..(conn->c
  146bdc:	65727275 6d5f746e 21206773 554e203d     urrent_msg != NU
  146bec:	20294c4c 63207c7c 2d6e6e6f 5f6e693e     LL) || conn->in_
  146bfc:	5f6e6f6e 636f6c62 676e696b 6e6f635f     non_blocking_con
  146c0c:	7463656e 00000000 636f6c62 676e696b     nect....blocking
  146c1c:	6e6f6320 7463656e 61747320 65206574      connect state e
  146c2c:	726f7272 00000000 61766e49 2064696c     rror....Invalid 
  146c3c:	6374656e 206e6e6f 65707974 00000000     netconn type....
  146c4c:	6e6e6f63 74733e2d 20657461 4e203d3d     conn->state == N
  146c5c:	4f435445 575f4e4e 45544952 00000000     ETCONN_WRITE....
  146c6c:	6e6e6f63 63703e2d 63742e62 3d212070     conn->pcb.tcp !=
  146c7c:	4c554e20 0000004c 6e6e6f63 72773e2d      NULL...conn->wr
  146c8c:	5f657469 7366666f 3c207465 6e6f6320     ite_offset < con
  146c9c:	633e2d6e 65727275 6d5f746e 3e2d6773     n->current_msg->
  146cac:	2e67736d 656c2e77 0000006e 7069776c     msg.w.len...lwip
  146cbc:	74656e5f 6e6e6f63 5f6f645f 74697277     _netconn_do_writ
  146ccc:	726f6d65 69203a65 6c61766e 6c206469     emore: invalid l
  146cdc:	74676e65 00002168 2d67736d 67736d3e     ength!..msg->msg
  146cec:	6c2e772e 21206e65 0030203d 61766e69     .w.len != 0.inva
  146cfc:	2064696c 6374656e 5f6e6e6f 65707974     lid netconn_type
  146d0c:	00000000                                ....

00146d10 <err_to_errno_table>:
  146d10:	00000000 0000000c 00000069 0000000b     ........i.......
  146d20:	00000071 00000073 00000016 0000000b     q...s...........
  146d30:	00000062 00000072 0000006a 0000006b     b...r...j...k...
  146d40:	ffffffff 00000067 00000068 0000006b     ....g...h...k...
  146d50:	00000005 76726573 73656369 49776c2f     ....services/lwI
  146d60:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  146d70:	2f637273 2f697061 6274656e 632e6675     src/api/netbuf.c
  146d80:	00000000 6274656e 615f6675 636f6c6c     ....netbuf_alloc
  146d90:	6e69203a 696c6176 75622064 00000066     : invalid buf...
  146da0:	63656863 6874206b 66207461 74737269     check that first
  146db0:	75627020 61632066 6f68206e 7320646c      pbuf can hold s
  146dc0:	00657a69 6274656e 665f6675 3a656572     ize.netbuf_free:
  146dd0:	766e6920 64696c61 66756220 00000000      invalid buf....
  146de0:	6274656e 725f6675 203a6665 61766e69     netbuf_ref: inva
  146df0:	2064696c 00667562 6274656e 635f6675     lid buf.netbuf_c
  146e00:	6e696168 6e69203a 696c6176 65682064     hain: invalid he
  146e10:	00006461 6274656e 635f6675 6e696168     ad..netbuf_chain
  146e20:	6e69203a 696c6176 61742064 00006c69     : invalid tail..
  146e30:	6274656e 645f6675 3a617461 766e6920     netbuf_data: inv
  146e40:	64696c61 66756220 00000000 6274656e     alid buf....netb
  146e50:	645f6675 3a617461 766e6920 64696c61     uf_data: invalid
  146e60:	74616420 72747061 00000000 6274656e      dataptr....netb
  146e70:	645f6675 3a617461 766e6920 64696c61     uf_data: invalid
  146e80:	6e656c20 00000000 6274656e 6e5f6675      len....netbuf_n
  146e90:	3a747865 766e6920 64696c61 66756220     ext: invalid buf
  146ea0:	00000000 6274656e 665f6675 74737269     ....netbuf_first
  146eb0:	6e69203a 696c6176 75622064 00000066     : invalid buf...
  146ec0:	656d616e 206e656c 74207369 6c206f6f     namelen is too l
  146ed0:	00676e6f 76726573 73656369 49776c2f     ong.services/lwI
  146ee0:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  146ef0:	2f637273 2f697061 6474656e 00632e62     src/api/netdb.c.
  146f00:	61746f74 69735f6c 3c20657a 454e203d     total_size <= NE
  146f10:	5f424454 4d454c45 5a49535f 70203a45     TDB_ELEM_SIZE: p
  146f20:	7361656c 65722065 74726f70 69687420     lease report thi
  146f30:	00002173 6377656e 206e6e6f 4e203d21     s!..newconn != N
  146f40:	004c4c55 76726573 73656369 49776c2f     ULL.services/lwI
  146f50:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  146f60:	2f637273 2f697061 6b636f73 2e737465     src/api/sockets.
  146f70:	00000063 61766e69 2064696c 6b636f73     c...invalid sock
  146f80:	69207465 7865646e 00000000 72646461     et index....addr
  146f90:	6c617620 62206469 61207475 6c726464      valid but addrl
  146fa0:	4e206e65 004c4c55 7069776c 6e69625f     en NULL.lwip_bin
  146fb0:	69203a64 6c61766e 61206469 65726464     d: invalid addre
  146fc0:	00007373 6b636f73 616c3e2d 61647473     ss..sock->lastda
  146fd0:	3d206174 554e203d 00004c4c 7069776c     ta == NULL..lwip
  146fe0:	6e6f635f 7463656e 6e69203a 696c6176     _connect: invali
  146ff0:	64612064 73657264 00000073 20667562     d address...buf 
  147000:	4e203d21 004c4c55 61766e69 2064696c     != NULL.invalid 
  147010:	79706f63 2c6e656c 6e656c20 756f7720     copylen, len wou
  147020:	7520646c 7265646e 776f6c66 00000000     ld underflow....
  147030:	7069776c 6e65735f 67736d64 6e69203a     lwip_sendmsg: in
  147040:	696c6176 736d2064 72646867 00000000     valid msghdr....
  147050:	7069776c 6e65735f 67736d64 6e69203a     lwip_sendmsg: in
  147060:	696c6176 736d2064 72646867 766f6920     valid msghdr iov
  147070:	00000000 7069776c 6e65735f 67736d64     ....lwip_sendmsg
  147080:	6e69203a 696c6176 736d2064 72646867     : invalid msghdr
  147090:	6d616e20 00000065 5f766f69 206e656c      name...iov_len 
  1470a0:	3175203c 00745f36 7069776c 6e65735f     < u16_t.lwip_sen
  1470b0:	3a6f7464 7a697320 756d2065 66207473     dto: size must f
  1470c0:	69207469 3175206e 00745f36 7069776c     it in u16_t.lwip
  1470d0:	6e65735f 3a6f7464 766e6920 64696c61     _sendto: invalid
  1470e0:	64646120 73736572 00000000 6165726e      address....nrea
  1470f0:	3e207964 0030203d 6b636f73 65733e2d     dy >= 0.sock->se
  147100:	7463656c 6961775f 676e6974 30203e20     lect_waiting > 0
  147110:	00000000 656c6573 635f7463 72702e62     ....select_cb.pr
  147120:	3d207665 554e203d 00004c4c 656c6573     ev == NULL..sele
  147130:	635f7463 72702e62 21207665 554e203d     ct_cb.prev != NU
  147140:	00004c4c 6e6b6e75 206e776f 6e657665     LL..unknown even
  147150:	00000074 69706374 68745f70 64616572     t...tcpip_thread
  147160:	6e69203a 696c6176 656d2064 67617373     : invalid messag
  147170:	00000065 76726573 73656369 49776c2f     e...services/lwI
  147180:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  147190:	2f637273 2f697061 69706374 00632e70     src/api/tcpip.c.
  1471a0:	61766e49 2064696c 786f626d 00000000     Invalid mbox....
  1471b0:	6c696166 74206465 7263206f 65746165     failed to create
  1471c0:	70637420 745f7069 61657268 626d2064      tcpip_thread mb
  1471d0:	0000786f 6c696166 74206465 7263206f     ox..failed to cr
  1471e0:	65746165 636f6c20 63745f6b 5f706970     eate lock_tcpip_
  1471f0:	65726f63 00000000 69706374 00000070     core....tcpip...
  147200:	7778797a 73747576 6f707172 6b6c6d6e     zyxwvutsrqponmlk
  147210:	6768696a 63646566 38396162 34353637     jihgfedcba987654
  147220:	30313233 34333231 38373635 63626139     3210123456789abc
  147230:	67666564 6b6a6968 6f6e6d6c 73727170     defghijklmnopqrs
  147240:	77767574 007a7978                       tuvwxyz.

00147248 <dns_mquery_v4group>:
  147248:	fb0000e0 20736e64 76726573 6f207265     ....dns server o
  147258:	6f207475 72612066 00796172 76726573     ut of array.serv
  147268:	73656369 49776c2f 74694b50 69776c2f     ices/lwIPKit/lwi
  147278:	2e322d70 2f322e30 2f637273 65726f63     p-2.0.2/src/core
  147288:	736e642f 0000632e 61727261 6e692079     /dns.c..array in
  147298:	20786564 2074756f 6220666f 646e756f     dex out of bound
  1472a8:	00000073 6e6b6e75 206e776f 5f736e64     s...unknown dns_
  1472b8:	6c626174 6e652065 20797274 74617473     table entry stat
  1472c8:	00003a65 656c6564 6d206574 00000065     e:..delete me...
  1472d8:	76726573 73656369 49776c2f 74694b50     services/lwIPKit
  1472e8:	69776c2f 2e322d70 2f322e30 2f637273     /lwip-2.0.2/src/
  1472f8:	65726f63 656e692f 68635f74 6d75736b     core/inet_chksum
  147308:	0000632e 5f574152 00424350              .c..RAW_PCB.

00147314 <memp_RAW_PCB>:
  147314:	0014730c 0014f0c0 0004001c 0018cd88     .s..............
  147324:	0014f0d0 5f504455 00424350              ....UDP_PCB.

00147330 <memp_UDP_PCB>:
  147330:	00147328 0014f0d4 00080028 0057581c     (s......(....XW.
  147340:	0014f0e4 5f504354 00424350              ....TCP_PCB.

0014734c <memp_TCP_PCB>:
  14734c:	00147344 0014f0e8 000800a4 00576008     Ds...........`W.
  14735c:	0014f0f8 5f504354 5f424350 5453494c     ....TCP_PCB_LIST
  14736c:	00004e45                                EN..

00147370 <memp_TCP_PCB_LISTEN>:
  147370:	00147360 0014f0fc 00080020 005752bc     `s...... ....RW.
  147380:	0014f10c 5f504354 00474553              ....TCP_SEG.

0014738c <memp_TCP_SEG>:
  14738c:	00147384 0014f110 20000010 0018ceac     .s......... ....
  14739c:	0014f120 53414552 54414453 00000041      ...REASSDATA...

001473ac <memp_REASSDATA>:
  1473ac:	001473a0 0014f124 000a0020 00575520     .s..$... ... UW.
  1473bc:	0014f134 47415246 5542505f 00000046     4...FRAG_PBUF...

001473cc <memp_FRAG_PBUF>:
  1473cc:	001473c0 0014f138 000f0018 00528eb4     .s..8.........R.
  1473dc:	0014f148 4254454e 00004655              H...NETBUF..

001473e8 <memp_NETBUF>:
  1473e8:	001473e0 0014f14c 08000010 00150764     .s..L.......d...
  1473f8:	0014f15c 4354454e 004e4e4f              \...NETCONN.

00147404 <memp_NETCONN>:
  147404:	001473fc 0014f160 00080040 00575ac0     .s..`...@....ZW.
  147414:	0014f170 49504354 534d5f50 50415f47     p...TCPIP_MSG_AP
  147424:	00000049                                I...

00147428 <memp_TCPIP_MSG_API>:
  147428:	00147418 0014f174 08000010 005292b4     .t..t.........R.
  147438:	0014f184 49504354 534d5f50 4e495f47     ....TCPIP_MSG_IN
  147448:	00544b50                                PKT.

0014744c <memp_TCPIP_MSG_INPKT>:
  14744c:	0014743c 0014f188 08000010 0016e768     <t..........h...
  14745c:	0014f198 5f505241 55455551 00000045     ....ARP_QUEUE...

0014746c <memp_ARP_QUEUE>:
  14746c:	00147460 0014f19c 001e0008 0018c76c     `t..........l...
  14747c:	0014f1ac 504d4749 4f52475f 00005055     ....IGMP_GROUP..

0014748c <memp_IGMP_GROUP>:
  14748c:	00147480 0014f1b0 00080010 00575e24     .t..........$^W.
  14749c:	0014f1c0 5f535953 454d4954 0054554f     ....SYS_TIMEOUT.

001474ac <memp_SYS_TIMEOUT>:
  1474ac:	001474a0 0014f1c4 00070010 0057668c     .t...........fW.
  1474bc:	0014f1d4 4454454e 00000042              ....NETDB...

001474c8 <memp_NETDB>:
  1474c8:	001474c0 0014f1d8 00010134 00150600     .t......4.......
  1474d8:	0014f1e8 46554250 4645525f 4d4f522f     ....PBUF_REF/ROM
  1474e8:	00000000                                ....

001474ec <memp_PBUF>:
  1474ec:	001474dc 0014f1ec 08000030 005472b8     .t......0....rT.
  1474fc:	0014f1fc 46554250 4f4f505f 0000004c     ....PBUF_POOL...

0014750c <memp_PBUF_POOL>:
  14750c:	00147500 0014f200 0800061c 00204eb0     .u...........N .
  14751c:	0014f210                                ....

00147520 <memp_pools>:
  147520:	00147314 00147330 0014734c 00147370     .s..0s..Ls..ps..
  147530:	0014738c 001473ac 001473cc 001473e8     .s...s...s...s..
  147540:	00147404 00147428 0014744c 0014746c     .t..(t..Lt..lt..
  147550:	0014748c 001474ac 001474c8 001474ec     .t...t...t...t..
  147560:	0014750c 76726573 73656369 49776c2f     .u..services/lwI
  147570:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  147580:	2f637273 65726f63 6d656d2f 00632e70     src/core/memp.c.
  147590:	65746564 64657463 6d656d20 766f2070     detected memp ov
  1475a0:	6c667265 6920776f 6f70206e 00206c6f     erflow in pool .
	...
  147610:	65746564 64657463 6d656d20 6e752070     detected memp un
  147620:	66726564 20776f6c 70206e69 206c6f6f     derflow in pool 
	...
  147690:	706d656d 6c616d5f 3a636f6c 6d656d20     memp_malloc: mem
  1476a0:	72702070 7265706f 6120796c 6e67696c     p properly align
  1476b0:	00006465 61766e69 2064696c 6c6f6f70     ed..invalid pool
  1476c0:	73656420 00000063 706d656d 6c616d5f      desc...memp_mal
  1476d0:	3a636f6c 70797420 203c2065 504d454d     loc: type < MEMP
  1476e0:	58414d5f 00000000 706d656d 6572665f     _MAX....memp_fre
  1476f0:	6d203a65 70206d65 65706f72 20796c72     e: mem properly 
  147700:	67696c61 0064656e 706d656d 6572665f     aligned.memp_fre
  147710:	74203a65 20657079 454d203c 4d5f504d     e: type < MEMP_M
  147720:	00005841 69206f4e 2074696e 636e7566     AX..No init func
  147730:	6e6f6974 76696720 00006e65 76726573     tion given..serv
  147740:	73656369 49776c2f 74694b50 69776c2f     ices/lwIPKit/lwi
  147750:	2e322d70 2f322e30 2f637273 65726f63     p-2.0.2/src/core
  147760:	74656e2f 632e6669 00000000 66206669     /netif.c....if f
  147770:	74737269 203d2120 4c4c554e 616c202c     irst != NULL, la
  147780:	6d207473 20747375 6f736c61 20656220     st must also be 
  147790:	4e203d21 004c4c55 75676f62 62702073     != NULL.bogus pb
  1477a0:	203a6675 206e656c 74203d21 6c5f746f     uf: len != tot_l
  1477b0:	62206e65 6e207475 20747865 4e203d3d     en but next == N
  1477c0:	214c4c55 00000000 756f6873 6e20646c     ULL!....should n
  1477d0:	6220746f 756e2065 73206c6c 65636e69     ot be null since
  1477e0:	72696620 21207473 616c203d 00217473      first != last!.
  1477f0:	66756270 6c6c615f 203a636f 20646162     pbuf_alloc: bad 
  147800:	66756270 79616c20 00007265 76726573     pbuf layer..serv
  147810:	73656369 49776c2f 74694b50 69776c2f     ices/lwIPKit/lwi
  147820:	2e322d70 2f322e30 2f637273 65726f63     p-2.0.2/src/core
  147830:	7562702f 00632e66 66756270 6c6c615f     /pbuf.c.pbuf_all
  147840:	203a636f 66756270 3e2d7020 6c796170     oc: pbuf p->payl
  147850:	2064616f 706f7270 796c7265 696c6120     oad properly ali
  147860:	64656e67 00000000 63656863 2d70206b     gned....check p-
  147870:	7961703e 64616f6c 70202b20 656c3e2d     >payload + p->le
  147880:	6f64206e 6e207365 6f20746f 66726576     n does not overf
  147890:	20776f6c 66756270 00000000 46554250     low pbuf....PBUF
  1478a0:	4f4f505f 55425f4c 5a495346 756d2045     _POOL_BUFSIZE mu
  1478b0:	62207473 69622065 72656767 61687420     st be bigger tha
  1478c0:	454d206e 4c415f4d 4d4e4749 00544e45     n MEM_ALIGNMENT.
  1478d0:	5f6d6572 206e656c 616d203c 31755f78     rem_len < max_u1
  1478e0:	00745f36 66756270 6c6c615f 203a636f     6_t.pbuf_alloc: 
  1478f0:	66756270 3e2d7120 6c796170 2064616f     pbuf q->payload 
  147900:	706f7270 796c7265 696c6120 64656e67     properly aligned
  147910:	00000000 66756270 6c6c615f 203a636f     ....pbuf_alloc: 
  147920:	66756270 61703e2d 616f6c79 72702064     pbuf->payload pr
  147930:	7265706f 6120796c 6e67696c 00006465     operly aligned..
  147940:	66756270 6c6c615f 203a636f 6f727265     pbuf_alloc: erro
  147950:	756f656e 79742073 00006570 66756270     neous type..pbuf
  147960:	6c6c615f 6465636f 7375635f 3a6d6f74     _alloced_custom:
  147970:	64616220 75627020 616c2066 00726579      bad pbuf layer.
  147980:	66756270 6165725f 636f6c6c 2070203a     pbuf_realloc: p 
  147990:	4e203d21 004c4c55 66756270 6165725f     != NULL.pbuf_rea
  1479a0:	636f6c6c 6173203a 7020656e 79743e2d     lloc: sane p->ty
  1479b0:	00006570 776f7267 6d203c20 755f7861     pe..grow < max_u
  1479c0:	745f3631 00000000 66756270 6165725f     16_t....pbuf_rea
  1479d0:	636f6c6c 2071203a 4e203d21 004c4c55     lloc: q != NULL.
  1479e0:	5f6d656d 6d697274 74657220 656e7275     mem_trim returne
  1479f0:	20712064 4e203d3d 004c4c55 3d212070     d q == NULL.p !=
  147a00:	4c554e20 0000004c 72636e69 6e656d65      NULL...incremen
  147a10:	616d5f74 74696e67 20656475 70203d3c     t_magnitude <= p
  147a20:	656c3e2d 0000006e 20646162 66756270     ->len...bad pbuf
  147a30:	70797420 00000065 66756270 6572665f      type...pbuf_fre
  147a40:	73203a65 20656e61 65707974 00000000     e: sane type....
  147a50:	66756270 6572665f 70203a65 65723e2d     pbuf_free: p->re
  147a60:	203e2066 00000030 3e2d6370 74737563     f > 0...pc->cust
  147a70:	665f6d6f 5f656572 636e7566 6e6f6974     om_free_function
  147a80:	203d2120 4c4c554e 00000000 66756270      != NULL....pbuf
  147a90:	66657220 65766f20 6f6c6672 00000077      ref overflow...
  147aa0:	21206828 554e203d 20294c4c 28202626     (h != NULL) && (
  147ab0:	3d212074 4c554e20 2820294c 676f7270     t != NULL) (prog
  147ac0:	6d6d6172 76207265 616c6f69 20736574     rammer violates 
  147ad0:	29495041 00000000 743e2d70 6c5f746f     API)....p->tot_l
  147ae0:	3d206e65 2d70203d 6e656c3e 666f2820     en == p->len (of
  147af0:	73616c20 62702074 69206675 6863206e      last pbuf in ch
  147b00:	296e6961 00000000 6e3e2d70 20747865     ain)....p->next 
  147b10:	4e203d3d 004c4c55 743e2d70 6c5f746f     == NULL.p->tot_l
  147b20:	3d206e65 2d70203d 6e656c3e 71202b20     en == p->len + q
  147b30:	6f743e2d 656c5f74 0000006e 743e2d70     ->tot_len...p->t
  147b40:	6c5f746f 3d206e65 2d70203d 6e656c3e     ot_len == p->len
  147b50:	00000000 66756270 706f635f 74203a79     ....pbuf_copy: t
  147b60:	65677261 6f6e2074 69622074 6e652067     arget not big en
  147b70:	6867756f 206f7420 646c6f68 756f7320     ough to hold sou
  147b80:	00656372 7366666f 745f7465 3d3c206f     rce.offset_to <=
  147b90:	745f7020 6c3e2d6f 00006e65 7366666f      p_to->len..offs
  147ba0:	665f7465 206d6f72 70203d3c 6f72665f     et_from <= p_fro
  147bb0:	6c3e2d6d 00006e65 6f745f70 203d2120     m->len..p_to != 
  147bc0:	4c4c554e 00000000 66756270 706f635f     NULL....pbuf_cop
  147bd0:	20292879 73656f64 746f6e20 6c6c6120     y() does not all
  147be0:	7020776f 656b6361 75712074 73657565     ow packet queues
  147bf0:	00000021 66756270 706f635f 61705f79     !...pbuf_copy_pa
  147c00:	61697472 69203a6c 6c61766e 62206469     rtial: invalid b
  147c10:	00006675 66756270 706f635f 61705f79     uf..pbuf_copy_pa
  147c20:	61697472 69203a6c 6c61766e 64206469     rtial: invalid d
  147c30:	70617461 00007274 66756270 6b61745f     ataptr..pbuf_tak
  147c40:	69203a65 6c61766e 62206469 00006675     e: invalid buf..
  147c50:	66756270 6b61745f 69203a65 6c61766e     pbuf_take: inval
  147c60:	64206469 70617461 00007274 66756270     id dataptr..pbuf
  147c70:	6b61745f 62203a65 6e206675 6c20746f     _take: buf not l
  147c80:	65677261 6f6e6520 00686775 66756270     arge enough.pbuf
  147c90:	6b61745f 69203a65 6c61766e 70206469     _take: invalid p
  147ca0:	00667562 20646964 20746f6e 79706f63     buf.did not copy
  147cb0:	6c6c6120 74616420 00000061 66756270      all data...pbuf
  147cc0:	706f635f 61662079 64656c69 00000000     _copy failed....
  147cd0:	20776172 20626370 76636572 6c616320     raw pcb recv cal
  147ce0:	6361626c 6c61206b 65726574 62702064     lback altered pb
  147cf0:	70206675 6f6c7961 70206461 746e696f     uf payload point
  147d00:	77207265 6f687469 65207475 6e697461     er without eatin
  147d10:	61702067 74656b63 00000000 76726573     g packet....serv
  147d20:	73656369 49776c2f 74694b50 69776c2f     ices/lwIPKit/lwi
  147d30:	2e322d70 2f322e30 2f637273 65726f63     p-2.0.2/src/core
  147d40:	7761722f 0000632e 276e6143 65722074     /raw.c..Can't re
  147d50:	726f7473 65682065 72656461 20657720     store header we 
  147d60:	7473756a 6d657220 6465766f 00000021     just removed!...
  147d70:	0a73250a 00000009 74696d78 6825203a     .%s.....xmit: %h
  147d80:	00090a75 76636572 6825203a 00090a75     u...recv: %hu...
  147d90:	203a7766 0a756825 00000009 706f7264     fw: %hu.....drop
  147da0:	6825203a 00090a75 656b6863 203a7272     : %hu...chkerr: 
  147db0:	0a756825 00000009 656e656c 203a7272     %hu.....lenerr: 
  147dc0:	0a756825 00000009 656d656d 203a7272     %hu.....memerr: 
  147dd0:	0a756825 00000009 72657472 25203a72     %hu.....rterr: %
  147de0:	090a7568 00000000 746f7270 3a727265     hu......proterr:
  147df0:	75682520 0000090a 6574706f 203a7272      %hu....opterr: 
  147e00:	0a756825 00000009 3a727265 75682520     %hu.....err: %hu
  147e10:	0000090a 68636163 74696865 6825203a     ....cachehit: %h
  147e20:	00000a75 765f7872 25203a31 090a7568     u...rx_v1: %hu..
  147e30:	00000000 675f7872 70756f72 6825203a     ....rx_group: %h
  147e40:	00090a75 675f7872 72656e65 203a6c61     u...rx_general: 
  147e50:	0a756825 00000009 725f7872 726f7065     %hu.....rx_repor
  147e60:	25203a74 090a7568 00000000 6a5f7874     t: %hu......tx_j
  147e70:	3a6e696f 75682520 0000090a 6c5f7874     oin: %hu....tx_l
  147e80:	65766165 6825203a 00090a75 725f7874     eave: %hu...tx_r
  147e90:	726f7065 25203a74 000a7568 4d454d0a     eport: %hu...MEM
  147ea0:	0a732520 00000009 69617661 25203a6c      %s.....avail: %
  147eb0:	090a756c 00000000 64657375 6c25203a     lu......used: %l
  147ec0:	00090a75 3a78616d 756c2520 0000090a     u...max: %lu....
  147ed0:	3a727265 756c2520 0000000a 5359530a     err: %lu.....SYS
  147ee0:	0000090a 2e6d6573 64657375 2520203a     ....sem.used:  %
  147ef0:	090a756c 00000000 2e6d6573 3a78616d     lu......sem.max:
  147f00:	25202020 090a756c 00000000 2e6d6573        %lu......sem.
  147f10:	3a727265 25202020 090a756c 00000000     err:   %lu......
  147f20:	6574756d 73752e78 203a6465 0a756c25     mutex.used: %lu.
  147f30:	00000009 6574756d 616d2e78 20203a78     ....mutex.max:  
  147f40:	0a756c25 00000009 6574756d 72652e78     %lu.....mutex.er
  147f50:	20203a72 0a756c25 00000009 786f626d     r:  %lu.....mbox
  147f60:	6573752e 20203a64 0a756c25 00000009     .used:  %lu.....
  147f70:	786f626d 78616d2e 2020203a 0a756c25     mbox.max:   %lu.
  147f80:	00000009 786f626d 7272652e 2020203a     ....mbox.err:   
  147f90:	0a756c25 00000000 4b4e494c 00000000     %lu.....LINK....
  147fa0:	41485445 00005052 465f5049 00474152     ETHARP..IP_FRAG.
  147fb0:	00005049 504d4749 00000000 504d4349     IP..IGMP....ICMP
  147fc0:	00000000 00504455 00504354 50414548     ....UDP.TCP.HEAP
  147fd0:	00000000 534f4c43 00004445 5453494c     ....CLOSED..LIST
  147fe0:	00004e45 5f4e5953 544e4553 00000000     EN..SYN_SENT....
  147ff0:	5f4e5953 44564352 00000000 41545345     SYN_RCVD....ESTA
  148000:	53494c42 00444548 5f4e4946 54494157     BLISHED.FIN_WAIT
  148010:	0000315f 5f4e4946 54494157 0000325f     _1..FIN_WAIT_2..
  148020:	534f4c43 41575f45 00005449 534f4c43     CLOSE_WAIT..CLOS
  148030:	00474e49 5453414c 4b43415f 00000000     ING.LAST_ACK....
  148040:	454d4954 4941575f 00000054              TIME_WAIT...

0014804c <tcp_state_str>:
  14804c:	00147fd4 00147fdc 00147fe4 00147ff0     ................
  14805c:	00147ffc 00148008 00148014 00148020     ............ ...
  14806c:	0014802c 00148034 00148040              ,...4...@...

00148078 <tcp_backoff>:
  148078:	04030201 07070605 07070707 00000007     ................

00148088 <tcp_persist_backoff>:
  148088:	180c0603 00786030                       ....0`x.

00148090 <tcp_pcb_lists>:
  148090:	00576a38 00576a3c 00576a30 00576a40     8jW.<jW.0jW.@jW.
  1480a0:	20626370 4e203d21 004c4c55 76726573     pcb != NULL.serv
  1480b0:	73656369 49776c2f 74694b50 69776c2f     ices/lwIPKit/lwi
  1480c0:	2e322d70 2f322e30 2f637273 65726f63     p-2.0.2/src/core
  1480d0:	7063742f 0000632e 2d626370 6174733e     /tcp.c..pcb->sta
  1480e0:	3d206574 494c203d 4e455453 00000000     te == LISTEN....
  1480f0:	2d626370 616c663e 26207367 5f465420     pcb->flags & TF_
  148100:	4c435852 4445534f 00000000 276e6f64     RXCLOSED....don'
  148110:	61632074 74206c6c 615f7063 74726f62     t call tcp_abort
  148120:	7063742f 6162615f 6e6f646e 726f6620     /tcp_abandon for
  148130:	73696c20 2d6e6574 73626370 00000000      listen-pcbs....
  148140:	5f706374 646e6962 6163203a 6e6f206e     tcp_bind: can on
  148150:	6220796c 20646e69 73206e69 65746174     ly bind in state
  148160:	4f4c4320 00444553 5f706374 7473696c      CLOSED.tcp_list
  148170:	203a6e65 20626370 65726c61 20796461     en: pcb already 
  148180:	6e6e6f63 65746365 00000064 5f77656e     connected...new_
  148190:	5f766372 5f6e6e61 20646e77 30203d3c     rcv_ann_wnd <= 0
  1481a0:	66666678 00000066 276e6f64 61632074     xffff...don't ca
  1481b0:	74206c6c 725f7063 65766365 6f662064     ll tcp_recved fo
  1481c0:	696c2072 6e657473 6263702d 00000073     r listen-pcbs...
  1481d0:	5f706374 76636572 203a6465 206e656c     tcp_recved: len 
  1481e0:	70617277 20646570 5f766372 0a646e77     wrapped rcv_wnd.
  1481f0:	00000000 5f706374 6e6e6f63 3a746365     ....tcp_connect:
  148200:	6e616320 6c6e6f20 6f632079 63656e6e      can only connec
  148210:	72662074 73206d6f 65746174 4f4c4320     t from state CLO
  148220:	00444553 5f706374 776f6c73 3a726d74     SED.tcp_slowtmr:
  148230:	74636120 20657669 2d626370 6174733e      active pcb->sta
  148240:	21206574 4c43203d 4445534f 0000000a     te != CLOSED....
  148250:	5f706374 776f6c73 3a726d74 74636120     tcp_slowtmr: act
  148260:	20657669 2d626370 6174733e 21206574     ive pcb->state !
  148270:	494c203d 4e455453 0000000a 5f706374     = LISTEN....tcp_
  148280:	776f6c73 3a726d74 74636120 20657669     slowtmr: active 
  148290:	2d626370 6174733e 21206574 4954203d     pcb->state != TI
  1482a0:	572d454d 0a544941 00000000 5f706374     ME-WAIT.....tcp_
  1482b0:	776f6c73 3a726d74 64696d20 20656c64     slowtmr: middle 
  1482c0:	20706374 74203d21 615f7063 76697463     tcp != tcp_activ
  1482d0:	63705f65 00007362 5f706374 776f6c73     e_pcbs..tcp_slow
  1482e0:	3a726d74 72696620 70207473 3d206263     tmr: first pcb =
  1482f0:	6374203d 63615f70 65766974 6263705f     = tcp_active_pcb
  148300:	00000073 5f706374 776f6c73 3a726d74     s...tcp_slowtmr:
  148310:	4d495420 41572d45 70205449 3e2d6263      TIME-WAIT pcb->
  148320:	74617473 3d3d2065 4d495420 41572d45     state == TIME-WA
  148330:	00005449 5f706374 776f6c73 3a726d74     IT..tcp_slowtmr:
  148340:	64696d20 20656c64 20706374 74203d21      middle tcp != t
  148350:	745f7063 63705f77 00007362 5f706374     cp_tw_pcbs..tcp_
  148360:	776f6c73 3a726d74 72696620 70207473     slowtmr: first p
  148370:	3d206263 6374203d 77745f70 6263705f     cb == tcp_tw_pcb
  148380:	00000073 61766e69 2064696c 74617473     s...invalid stat
  148390:	00000065 61766e69 2064696c 6b636f73     e...invalid sock
  1483a0:	73207465 65746174 726f6620 63657220     et state for rec
  1483b0:	61632076 61626c6c 00006b63 61766e69     v callback..inva
  1483c0:	2064696c 6b636f73 73207465 65746174     lid socket state
  1483d0:	726f6620 6e657320 61632074 61626c6c      for sent callba
  1483e0:	00006b63 61766e69 2064696c 6b636f73     ck..invalid sock
  1483f0:	73207465 65746174 726f6620 72726520     et state for err
  148400:	6c616320 6361626c 0000006b 61766e69      callback...inva
  148410:	2064696c 6b636f73 73207465 65746174     lid socket state
  148420:	726f6620 6c6f7020 0000006c 65736e75      for poll...unse
  148430:	7320746e 656d6765 2073746e 6b61656c     nt segments leak
  148440:	00676e69 63616e75 2064656b 6d676573     ing.unacked segm
  148450:	73746e65 61656c20 676e696b 00000000     ents leaking....
  148460:	65736f6f 65732071 6e656d67 6c207374     ooseq segments l
  148470:	696b6165 0000676e 6e3e2d70 20747865     eaking..p->next 
  148480:	4e203d21 004c4c55 76726573 73656369     != NULL.services
  148490:	49776c2f 74694b50 69776c2f 2e322d70     /lwIPKit/lwip-2.
  1484a0:	2f322e30 2f637273 65726f63 7063742f     0.2/src/core/tcp
  1484b0:	2e6e695f 00000063 6c3e2d70 3d206e65     _in.c...p->len =
  1484c0:	0030203d 743e2d70 6c5f746f 3d206e65     = 0.p->tot_len =
  1484d0:	2d70203d 78656e3e 743e2d74 6c5f746f     = p->next->tot_l
  1484e0:	00006e65 5f706374 75706e69 61203a74     en..tcp_input: a
  1484f0:	76697463 63702065 733e2d62 65746174     ctive pcb->state
  148500:	203d2120 534f4c43 00004445 5f706374      != CLOSED..tcp_
  148510:	75706e69 61203a74 76697463 63702065     input: active pc
  148520:	733e2d62 65746174 203d2120 454d4954     b->state != TIME
  148530:	4941572d 00000054 5f706374 75706e69     -WAIT...tcp_inpu
  148540:	61203a74 76697463 63702065 733e2d62     t: active pcb->s
  148550:	65746174 203d2120 5453494c 00004e45     tate != LISTEN..
  148560:	5f706374 75706e69 70203a74 3e2d6263     tcp_input: pcb->
  148570:	7478656e 203d2120 20626370 66656228     next != pcb (bef
  148580:	2065726f 68636163 00002965 5f706374     ore cache)..tcp_
  148590:	75706e69 70203a74 3e2d6263 7478656e     input: pcb->next
  1485a0:	203d2120 20626370 74666128 63207265      != pcb (after c
  1485b0:	65686361 00000029 5f706374 75706e69     ache)...tcp_inpu
  1485c0:	54203a74 2d454d49 54494157 62637020     t: TIME-WAIT pcb
  1485d0:	74733e2d 20657461 54203d3d 2d454d49     ->state == TIME-
  1485e0:	54494157 00000000 2d626370 6665723e     WAIT....pcb->ref
  1485f0:	64657375 7461645f 3d3d2061 4c554e20     used_data == NUL
  148600:	0000004c 5f706374 75706e69 70203a74     L...tcp_input: p
  148610:	3e2d6263 74617473 3d212065 4f4c4320     cb->state != CLO
  148620:	00444553 2d626370 646e733e 6575715f     SED.pcb->snd_que
  148630:	656c6575 203e206e 00000030 73206f6e     uelen > 0...no s
  148640:	656d6765 7420746e 7266206f 00006565     egment to free..
  148650:	2d626370 73696c3e 656e6574 613e2d72     pcb->listener->a
  148660:	70656363 3d212074 4c554e20 0000004c     ccept != NULL...
  148670:	5f706374 65636572 3a657669 6f727720     tcp_receive: wro
  148680:	7320676e 65746174 00000000 2d626370     ng state....pcb-
  148690:	646e733e 6575715f 656c6575 3d3e206e     >snd_queuelen >=
  1486a0:	75627020 6c635f66 6e286e65 2d747865      pbuf_clen(next-
  1486b0:	0029703e 5f706374 65636572 3a657669     >p).tcp_receive:
  1486c0:	6c617620 71206469 65756575 6e656c20      valid queue len
  1486d0:	00687467 65736e69 20702e67 4e203d21     gth.inseg.p != N
  1486e0:	004c4c55 61736e69 6f20656e 65736666     ULL.insane offse
  1486f0:	00002174 66756270 6f6f7420 6f687320     t!..pbuf too sho
  148700:	00217472 66756270 6165685f 20726564     rt!.pbuf_header 
  148710:	6c696166 00006465 5f706374 65636572     failed..tcp_rece
  148720:	3a657669 67657320 746e656d 746f6e20     ive: segment not
  148730:	69727420 64656d6d 726f6320 74636572      trimmed correct
  148740:	7420796c 6372206f 6e775f76 00000a64     ly to rcv_wnd...
  148750:	5f706374 65636572 3a657669 67657320     tcp_receive: seg
  148760:	746e656d 746f6e20 69727420 64656d6d     ment not trimmed
  148770:	726f6320 74636572 7420796c 6f6f206f      correctly to oo
  148780:	20716573 75657571 00000a65 5f706374     seq queue...tcp_
  148790:	65636572 3a657669 70637420 206e656c     receive: tcplen 
  1487a0:	6372203e 6e775f76 00000a64 5f706374     > rcv_wnd...tcp_
  1487b0:	65636572 3a657669 736f6f20 74207165     receive: ooseq t
  1487c0:	656c7063 203e206e 5f766372 0a646e77     cplen > rcv_wnd.
  1487d0:	00000000 63656863 6874206b 66207461     ....check that f
  1487e0:	74737269 75627020 61632066 6f68206e     irst pbuf can ho
  1487f0:	7320646c 63757274 63742074 64685f70     ld struct tcp_hd
  148800:	00000072 76726573 73656369 49776c2f     r...services/lwI
  148810:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  148820:	2f637273 65726f63 7063742f 74756f5f     src/core/tcp_out
  148830:	0000632e 743e2d70 6c5f746f 3e206e65     .c..p->tot_len >
  148840:	706f203d 6e656c74 00000000 6465656e     = optlen....need
  148850:	636e7520 6e696168 70206465 00667562      unchained pbuf.
  148860:	5f706374 74697277 70203a65 73667562     tcp_write: pbufs
  148870:	206e6f20 75657571 3e3d2065 20746120      on queue => at 
  148880:	7361656c 6e6f2074 75712065 20657565     least one queue 
  148890:	2d6e6f6e 74706d65 00000079 5f706374     non-empty...tcp_
  1488a0:	74697277 6e203a65 6270206f 20736675     write: no pbufs 
  1488b0:	71206e6f 65756575 203e3d20 68746f62     on queue => both
  1488c0:	65757120 20736575 74706d65 00000079      queues empty...
  1488d0:	5f706374 74697277 61203a65 3d206772     tcp_write: arg =
  1488e0:	554e203d 28204c4c 676f7270 6d6d6172     = NULL (programm
  1488f0:	76207265 616c6f69 20736574 29495041     er violates API)
  148900:	00000000 5f73736d 61636f6c 7369206c     ....mss_local is
  148910:	6f6f7420 616d7320 00006c6c 6f636e69      too small..inco
  148920:	7369736e 746e6574 65766f20 7a697372     nsistent oversiz
  148930:	73762065 7073202e 00656361 6f636e69     e vs. space.inco
  148940:	7369736e 746e6574 65766f20 7a697372     nsistent oversiz
  148950:	73762065 656c202e 0000006e 5f706374     e vs. len...tcp_
  148960:	74697277 52203a65 70204d4f 73667562     write: ROM pbufs
  148970:	6e616320 20746f6e 6f206562 73726576      cannot be overs
  148980:	64657a69 00000000 65736e75 6f5f746e     ized....unsent_o
  148990:	73726576 20657a69 6d73696d 68637461     versize mismatch
  1489a0:	63702820 753e2d62 6e65736e 73692074      (pcb->unsent is
  1489b0:	4c554e20 0000294c 5f706374 74697277      NULL)..tcp_writ
  1489c0:	63203a65 6b636568 61687420 69662074     e: check that fi
  1489d0:	20747372 66756270 6e616320 6c6f6820     rst pbuf can hol
  1489e0:	68742064 6f632065 656c706d 73206574     d the complete s
  1489f0:	656c6765 0000006e 7265766f 657a6973     eglen...oversize
  148a00:	203d3d20 00000030 76657270 6765735f      == 0...prev_seg
  148a10:	203d2120 4c4c554e 00000000 5f706374      != NULL....tcp_
  148a20:	74697277 63203a65 6f6e6e61 6f632074     write: cannot co
  148a30:	7461636e 74616e65 68772065 70206e65     ncatenate when p
  148a40:	3e2d6263 65736e75 6920746e 6d652073     cb->unsent is em
  148a50:	00797470 5f706374 74697277 65203a65     pty.tcp_write: e
  148a60:	6e657478 6e6f6973 20666f20 65666572     xtension of refe
  148a70:	636e6572 65722065 72697571 72207365     rence requires r
  148a80:	72656665 65636e65 00000000 5f706374     eference....tcp_
  148a90:	74697277 76203a65 64696c61 65757120     write: valid que
  148aa0:	6c206575 74676e65 00000068 5f706374     ue length...tcp_
  148ab0:	75716e65 5f657565 67616c66 6e203a73     enqueue_flags: n
  148ac0:	20646565 68746965 54207265 535f5043     eed either TCP_S
  148ad0:	6f204e59 43542072 49465f50 6e69204e     YN or TCP_FIN in
  148ae0:	616c6620 28207367 676f7270 6d6d6172      flags (programm
  148af0:	76207265 616c6f69 20736574 29495041     er violates API)
  148b00:	00000000 5f706374 75716e65 5f657565     ....tcp_enqueue_
  148b10:	67616c66 63203a73 6b636568 61687420     flags: check tha
  148b20:	69662074 20747372 66756270 6e616320     t first pbuf can
  148b30:	6c6f6820 706f2064 6e656c74 00000000      hold optlen....
  148b40:	2d676573 7063743e 20726468 20746f6e     seg->tcphdr not 
  148b50:	67696c61 0064656e 5f706374 75716e65     aligned.tcp_enqu
  148b60:	5f657565 67616c66 69203a73 6c61766e     eue_flags: inval
  148b70:	73206469 656d6765 6c20746e 74676e65     id segment lengt
  148b80:	00000068 5f706374 75716e65 5f657565     h...tcp_enqueue_
  148b90:	67616c66 69203a73 6c61766e 71206469     flags: invalid q
  148ba0:	65756575 6e656c20 00687467 276e6f64     ueue length.don'
  148bb0:	61632074 74206c6c 6f5f7063 75707475     t call tcp_outpu
  148bc0:	6f662074 696c2072 6e657473 6263702d     t for listen-pcb
  148bd0:	00000073 20545352 20746f6e 65707865     s...RST not expe
  148be0:	64657463 72656820 00002165              cted here!..

00148bec <lwip_cyclic_timers>:
  148bec:	000000fa 0011d1bc 000003e8 00132ec0     ................
  148bfc:	000003e8 0012db10 0000ea60 0012a750     ........`...P...
  148c0c:	000001f4 0012a884 00000064 00130ebc     ........d.......
  148c1c:	000003e8 00116cd8 76726573 73656369     .....l..services
  148c2c:	49776c2f 74694b50 69776c2f 2e322d70     /lwIPKit/lwip-2.
  148c3c:	2f322e30 2f637273 65726f63 6d69742f     0.2/src/core/tim
  148c4c:	74756f65 00632e73 5f737973 656d6974     eouts.c.sys_time
  148c5c:	3a74756f 6d697420 74756f65 203d2120     out: timeout != 
  148c6c:	4c4c554e 6f70202c 4d206c6f 5f504d45     NULL, pool MEMP_
  148c7c:	5f535953 454d4954 2054554f 65207369     SYS_TIMEOUT is e
  148c8c:	7974706d 00000000 66756270 6165685f     mpty....pbuf_hea
  148c9c:	20726564 6c696166 000a6465 76726573     der failed..serv
  148cac:	73656369 49776c2f 74694b50 69776c2f     ices/lwIPKit/lwi
  148cbc:	2e322d70 2f322e30 2f637273 65726f63     p-2.0.2/src/core
  148ccc:	7064752f 0000632e 63656863 6874206b     /udp.c..check th
  148cdc:	66207461 74737269 75627020 61632066     at first pbuf ca
  148cec:	6f68206e 7320646c 63757274 64752074     n hold struct ud
  148cfc:	64685f70 00000072                       p_hdr...

00148d04 <ethbroadcast>:
  148d04:	ffffffff 0000ffff                       ........

00148d0c <ethzero>:
	...
  148d14:	6974656e 683e2d66 64646177 656c5f72     netif->hwaddr_le
  148d24:	756d206e 62207473 20362065 20726f66     n must be 6 for 
  148d34:	65687465 74656e72 74756f5f 21747570     ethernet_output!
  148d44:	00000000 76726573 73656369 49776c2f     ....services/lwI
  148d54:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  148d64:	2f637273 6974656e 74652f66 6e726568     src/netif/ethern
  148d74:	632e7465 00000000 6974656e 00000066     et.c....netif...
  148d84:	74736f68 00000000 676e6970 7365725f     host....ping_res
  148d94:	00000070                                p...

00148d98 <lwip_netdev_ops>:
  148d98:	001291e8 00129218 00129248 00129314     ........H.......
  148da8:	00129350 001293b0 00000000 00129670     P...........p...
  148db8:	7069776c 74656e5f 00006669 6974656e     lwip_netif..neti
  148dc8:	3d212066 5f545220 4c4c554e 00000000     f != RT_NULL....
  148dd8:	6c6c616d 6e20636f 66697465 69616620     malloc netif fai
  148de8:	0a64656c 00000000 68747472 64616572     led.....rtthread
  148df8:	3230255f 32302578 00000078 69706374     _%02x%02x...tcpi
  148e08:	00000070 20766564 52203d21 554e5f54     p...dev != RT_NU
  148e18:	00004c4c 6d787265 00000062 75736572     LL..erxmb...resu
  148e28:	3d20746c 5452203d 4b4f455f 00000000     lt == RT_EOK....
  148e38:	00787265 6d787465 00000062 7774656e     erx.etxmb...netw
  148e48:	206b726f 65746e69 63616672 616e2065     ork interface na
  148e58:	7420656d 6c206f6f 21676e6f 00000a0d     me too long!....
  148e68:	7774656e 206b726f 65746e69 63616672     network interfac
  148e78:	25203a65 6f6e2073 6f662074 21646e75     e: %s not found!
  148e88:	00000a0d                                ....

00148e8c <__FUNCTION__.7805>:
  148e8c:	7069776c 74656e5f 5f766564 676e6970     lwip_netdev_ping
  148e9c:	00000000                                ....

00148ea0 <__FUNCTION__.7817>:
  148ea0:	6474656e 615f7665 00006464              netdev_add..

00148eac <__FUNCTION__.7826>:
  148eac:	6474656e 645f7665 00006c65              netdev_del..

00148eb8 <__FUNCTION__.7831>:
  148eb8:	6474656e 665f7665 7367616c 6e79735f     netdev_flags_syn
  148ec8:	00000063                                c...

00148ecc <__FUNCTION__.7837>:
  148ecc:	65687465 74656e72 6c5f6669 6f6b6e69     ethernetif_linko
  148edc:	75707475 00000074                       utput...

00148ee4 <__FUNCTION__.7869>:
  148ee4:	5f687465 69766564 6c5f6563 636b6e69     eth_device_linkc
  148ef4:	676e6168 00000065                       hange...

00148efc <__FUNCTION__.7893>:
  148efc:	5f687465 74737973 645f6d65 63697665     eth_system_devic
  148f0c:	6e695f65 705f7469 61766972 00006574     e_init_private..
  148f1c:	70636864 636e695f 6263705f 6665725f     dhcp_inc_pcb_ref
  148f2c:	6e756f63 3a292874 6d656d20 2079726f     count(): memory 
  148f3c:	6b61656c 00000000 76726573 73656369     leak....services
  148f4c:	49776c2f 74694b50 69776c2f 2e322d70     /lwIPKit/lwip-2.
  148f5c:	2f322e30 2f637273 65726f63 7670692f     0.2/src/core/ipv
  148f6c:	68642f34 632e7063 00000000 70636864     4/dhcp.c....dhcp
  148f7c:	6263705f 6665725f 6e756f63 3a292874     _pcb_refcount():
  148f8c:	66657220 6e756f63 72652074 00726f72      refcount error.
  148f9c:	6974656e 3d212066 4c554e20 0000004c     netif != NULL...
  148fac:	70636864 203d2120 4c4c554e 00000000     dhcp != NULL....
  148fbc:	6974656e 6c612066 64616572 61682079     netif already ha
  148fcc:	20612073 75727473 64207463 20706368     s a struct dhcp 
  148fdc:	00746573 6974656e 73692066 746f6e20     set.netif is not
  148fec:	2c707520 646c6f20 79747320 7020656c      up, old style p
  148ffc:	3f74726f 00000000 66756270 6f5f7020     ort?....pbuf p_o
  14900c:	77207475 276e7361 72662074 00646565     ut wasn't freed.
  14901c:	6c706572 61772079 74276e73 65726620     reply wasn't fre
  14902c:	00006465 70636864 6e69625f 6e203a64     ed..dhcp_bind: n
  14903c:	66697465 203d2120 4c4c554e 00000000     etif != NULL....
  14904c:	70636864 6e69625f 64203a64 20706368     dhcp_bind: dhcp 
  14905c:	4e203d21 004c4c55 70636864 6f74735f     != NULL.dhcp_sto
  14906c:	6e203a70 66697465 203d2120 4c4c554e     p: netif != NULL
  14907c:	00000000 70636864 74706f5f 3a6e6f69     ....dhcp_option:
  14908c:	63686420 6f3e2d70 6f697470 6f5f736e      dhcp->options_o
  14909c:	6c5f7475 2b206e65 2b203220 74706f20     ut_len + 2 + opt
  1490ac:	5f6e6f69 206e656c 44203d3c 5f504348     ion_len <= DHCP_
  1490bc:	4954504f 5f534e4f 004e454c 70636864     OPTIONS_LEN.dhcp
  1490cc:	74706f5f 5f6e6f69 65747962 6864203a     _option_byte: dh
  1490dc:	3e2d7063 6974706f 5f736e6f 5f74756f     cp->options_out_
  1490ec:	206e656c 4844203c 4f5f5043 4f495450     len < DHCP_OPTIO
  1490fc:	4c5f534e 00004e45 70636864 74706f5f     NS_LEN..dhcp_opt
  14910c:	5f6e6f69 726f6873 64203a74 2d706368     ion_short: dhcp-
  14911c:	74706f3e 736e6f69 74756f5f 6e656c5f     >options_out_len
  14912c:	32202b20 203d3c20 50434844 54504f5f      + 2 <= DHCP_OPT
  14913c:	534e4f49 4e454c5f 00000000 70636864     IONS_LEN....dhcp
  14914c:	74706f5f 5f6e6f69 676e6f6c 6864203a     _option_long: dh
  14915c:	3e2d7063 6974706f 5f736e6f 5f74756f     cp->options_out_
  14916c:	206e656c 2034202b 44203d3c 5f504348     len + 4 <= DHCP_
  14917c:	4954504f 5f534e4f 004e454c 50434844     OPTIONS_LEN.DHCP
  14918c:	6f68203a 616e7473 6920656d 6f742073     : hostname is to
  14919c:	6f6c206f 0021676e 206e656c 34203d3d     o long!.len == 4
  1491ac:	00000000 206e656c 64203d3e 646f6365     ....len >= decod
  1491bc:	656c5f65 0000006e 206e656c 34202525     e_len...len %% 4
  1491cc:	203d3d20 00000030 206e656c 31203d3d      == 0...len == 1
  1491dc:	00000000 7265766f 64616f6c 206e6920     ....overload in 
  1491ec:	656c6966 616e732f 0000656d 63656863     file/sname..chec
  1491fc:	6564206b 65646f63 7864695f 00000000     k decode_idx....
  14920c:	6f636564 6c5f6564 25206e65 20342025     decode_len %% 4 
  14921c:	30203d3d 00000000 61766e69 2064696c     == 0....invalid 
  14922c:	6f636564 6c5f6564 00006e65 7478656e     decode_len..next
  14923c:	75627020 61772066 756e2073 00006c6c      pbuf was null..
  14924c:	70636864 6572635f 5f657461 3a67736d     dhcp_create_msg:
  14925c:	74656e20 21206669 554e203d 00004c4c      netif != NULL..
  14926c:	70636864 6572635f 5f657461 3a67736d     dhcp_create_msg:
  14927c:	63686420 3d212070 4c554e20 0000004c      dhcp != NULL...
  14928c:	70636864 6572635f 5f657461 3a67736d     dhcp_create_msg:
  14929c:	63686420 703e2d70 74756f5f 203d3d20      dhcp->p_out == 
  1492ac:	4c4c554e 00000000 70636864 6572635f     NULL....dhcp_cre
  1492bc:	5f657461 3a67736d 63686420 6d3e2d70     ate_msg: dhcp->m
  1492cc:	6f5f6773 3d207475 554e203d 00004c4c     sg_out == NULL..
  1492dc:	70636864 6572635f 5f657461 3a67736d     dhcp_create_msg:
  1492ec:	65686320 74206b63 20746168 73726966      check that firs
  1492fc:	62702074 63206675 68206e61 20646c6f     t pbuf can hold 
  14930c:	75727473 64207463 5f706368 0067736d     struct dhcp_msg.
  14931c:	70636864 6c65645f 5f657465 3a67736d     dhcp_delete_msg:
  14932c:	63686420 3d212070 4c554e20 0000004c      dhcp != NULL...
  14933c:	70636864 6c65645f 5f657465 3a67736d     dhcp_delete_msg:
  14934c:	63686420 703e2d70 74756f5f 203d2120      dhcp->p_out != 
  14935c:	4c4c554e 00000000 70636864 6c65645f     NULL....dhcp_del
  14936c:	5f657465 3a67736d 63686420 6d3e2d70     ete_msg: dhcp->m
  14937c:	6f5f6773 21207475 554e203d 00004c4c     sg_out != NULL..
  14938c:	70636864 74706f5f 5f6e6f69 69617274     dhcp_option_trai
  14939c:	3a72656c 63686420 3d212070 4c554e20     ler: dhcp != NUL
  1493ac:	0000004c 70636864 74706f5f 5f6e6f69     L...dhcp_option_
  1493bc:	69617274 3a72656c 63686420 6d3e2d70     trailer: dhcp->m
  1493cc:	6f5f6773 21207475 554e203d 000a4c4c     sg_out != NULL..
  1493dc:	70636864 74706f5f 5f6e6f69 69617274     dhcp_option_trai
  1493ec:	3a72656c 63686420 6f3e2d70 6f697470     ler: dhcp->optio
  1493fc:	6f5f736e 6c5f7475 3c206e65 43484420     ns_out_len < DHC
  14940c:	504f5f50 4e4f4954 454c5f53 00000a4e     P_OPTIONS_LEN...
  14941c:	3d212071 4c554e20 0000004c 76726573     q != NULL...serv
  14942c:	73656369 49776c2f 74694b50 69776c2f     ices/lwIPKit/lwi
  14943c:	2e322d70 2f322e30 2f637273 65726f63     p-2.0.2/src/core
  14944c:	7670692f 74652f34 70726168 0000632e     /ipv4/etharp.c..
  14945c:	703e2d71 203d2120 4c4c554e 00000000     q->p != NULL....
  14946c:	703e2d72 203d2120 4c4c554e 00000000     r->p != NULL....
  14947c:	74617473 3d3d2065 48544520 5f505241     state == ETHARP_
  14948c:	54415453 45505f45 4e49444e 7c7c2047     STATE_PENDING ||
  14949c:	61747320 3e206574 5445203d 50524148      state >= ETHARP
  1494ac:	4154535f 535f4554 4c424154 00000045     _STATE_STABLE...
  1494bc:	5f707261 6c626174 5d695b65 3d20712e     arp_table[i].q =
  1494cc:	554e203d 00004c4c 203c2069 5f505241     = NULL..i < ARP_
  1494dc:	4c424154 49535f45 0000455a 5f707261     TABLE_SIZE..arp_
  1494ec:	6c626174 5d695b65 6174732e 3d206574     table[i].state =
  1494fc:	5445203d 50524148 4154535f 455f4554     = ETHARP_STATE_E
  14950c:	5954504d 00000000 6974656e 683e2d66     MPTY....netif->h
  14951c:	64646177 656c5f72 3d3d206e 48544520     waddr_len == ETH
  14952c:	4157485f 5f524444 004e454c 5f687465     _HWADDR_LEN.eth_
  14953c:	20746572 4e203d21 204c4c55 69202626     ret != NULL && i
  14954c:	65725f70 3d212074 4c554e20 0000004c     p_ret != NULL...
  14955c:	64617069 21207264 554e203d 00004c4c     ipaddr != NULL..
  14956c:	6974656e 3d212066 4c554e20 0000004c     netif != NULL...
  14957c:	5f687465 20746572 4e203d21 004c4c55     eth_ret != NULL.
  14958c:	5f707261 6c626174 72615b65 64695f70     arp_table[arp_id
  14959c:	732e5d78 65746174 203d3e20 41485445     x].state >= ETHA
  1495ac:	535f5052 45544154 4154535f 00454c42     RP_STATE_STABLE.
  1495bc:	5f707261 6c626174 5d695b65 6174732e     arp_table[i].sta
  1495cc:	3d206574 4550203d 4e49444e 726f2047     te == PENDING or
  1495dc:	41545320 00454c42 70206f6e 656b6361      STABLE.no packe
  1495ec:	75712074 73657565 6c6c6120 6465776f     t queues allowed
  1495fc:	00000021 63656863 6874206b 66207461     !...check that f
  14960c:	74737269 75627020 61632066 6f68206e     irst pbuf can ho
  14961c:	7320646c 63757274 74652074 70726168     ld struct etharp
  14962c:	7264685f 00000000 6974656e 683e2d66     _hdr....netif->h
  14963c:	64646177 656c5f72 756d206e 62207473     waddr_len must b
  14964c:	68742065 61732065 6120656d 54452073     e the same as ET
  14965c:	57485f48 52444441 4e454c5f 726f6620     H_HWADDR_LEN for
  14966c:	68746520 21707261 00000000 706d6369      etharp!....icmp
  14967c:	706e695f 203a7475 69766f6d 7220676e     _input: moving r
  14968c:	61703e2d 616f6c79 6f742064 6d636920     ->payload to icm
  14969c:	65682070 72656461 69616620 0a64656c     p header failed.
  1496ac:	00000000 76726573 73656369 49776c2f     ....services/lwI
  1496bc:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  1496cc:	2f637273 65726f63 7670692f 63692f34     src/core/ipv4/ic
  1496dc:	632e706d 00000000 706d6369 706e695f     mp.c....icmp_inp
  1496ec:	203a7475 74736572 6e69726f 726f2067     ut: restoring or
  1496fc:	6e696769 70206c61 61703e2d 616f6c79     iginal p->payloa
  14970c:	61662064 64656c69 0000000a 63656863     d failed....chec
  14971c:	6874206b 66207461 74737269 75627020     k that first pbu
  14972c:	61632066 6f68206e 6920646c 20706d63     f can hold icmp 
  14973c:	7373656d 00656761 76726573 73656369     message.services
  14974c:	49776c2f 74694b50 69776c2f 2e322d70     /lwIPKit/lwip-2.
  14975c:	2f322e30 2f637273 65726f63 7670692f     0.2/src/core/ipv
  14976c:	67692f34 632e706d 00000000 706d6769     4/igmp.c....igmp
  14977c:	6f6f6c5f 5f70756b 756f7267 66203a70     _lookup_group: f
  14978c:	74737269 6f726720 6d207075 20747375     irst group must 
  14979c:	61206562 79736c6c 6d657473 00000073     be allsystems...
  1497ac:	706d6769 6f6f6c5f 5f70756b 756f7267     igmp_lookup_grou
  1497bc:	61203a70 65206c6c 70656378 69662074     p: all except fi
  1497cc:	20747372 756f7267 756d2070 6e207473     rst group must n
  1497dc:	6220746f 6c612065 7379736c 736d6574     ot be allsystems
  1497ec:	00000000 706d6769 696f6a5f 6f72676e     ....igmp_joingro
  1497fc:	203a7075 65747461 2074706d 6a206f74     up: attempt to j
  14980c:	206e696f 2d6e6f6e 746c756d 73616369     oin non-multicas
  14981c:	64612074 73657264 00000073 706d6769     t address...igmp
  14982c:	696f6a5f 6f72676e 203a7075 65747461     _joingroup: atte
  14983c:	2074706d 6a206f74 206e696f 736c6c61     mpt to join alls
  14984c:	65747379 6120736d 65726464 00007373     ystems address..
  14985c:	706d6769 696f6a5f 6f72676e 6e5f7075     igmp_joingroup_n
  14986c:	66697465 7461203a 706d6574 6f742074     etif: attempt to
  14987c:	696f6a20 6f6e206e 756d2d6e 6369746c      join non-multic
  14988c:	20747361 72646461 00737365 706d6769     ast address.igmp
  14989c:	696f6a5f 6f72676e 6e5f7075 66697465     _joingroup_netif
  1498ac:	7461203a 706d6574 6f742074 696f6a20     : attempt to joi
  1498bc:	6c61206e 7379736c 736d6574 64646120     n allsystems add
  1498cc:	73736572 00000000 706d6769 696f6a5f     ress....igmp_joi
  1498dc:	6f72676e 6e5f7075 66697465 7461203a     ngroup_netif: at
  1498ec:	706d6574 6f742074 696f6a20 6e6f206e     tempt to join on
  1498fc:	6e6f6e20 4d47492d 656e2050 00666974      non-IGMP netif.
  14990c:	706d6769 61656c5f 72676576 3a70756f     igmp_leavegroup:
  14991c:	74746120 74706d65 206f7420 7661656c      attempt to leav
  14992c:	6f6e2065 756d2d6e 6369746c 20747361     e non-multicast 
  14993c:	72646461 00737365 706d6769 61656c5f     address.igmp_lea
  14994c:	72676576 3a70756f 74746120 74706d65     vegroup: attempt
  14995c:	206f7420 7661656c 6c612065 7379736c      to leave allsys
  14996c:	736d6574 64646120 73736572 00000000     tems address....
  14997c:	706d6769 61656c5f 72676576 5f70756f     igmp_leavegroup_
  14998c:	6974656e 61203a66 6d657474 74207470     netif: attempt t
  14999c:	656c206f 20657661 2d6e6f6e 746c756d     o leave non-mult
  1499ac:	73616369 64612074 73657264 00000073     icast address...
  1499bc:	706d6769 61656c5f 72676576 5f70756f     igmp_leavegroup_
  1499cc:	6974656e 61203a66 6d657474 74207470     netif: attempt t
  1499dc:	656c206f 20657661 736c6c61 65747379     o leave allsyste
  1499ec:	6120736d 65726464 00007373 706d6769     ms address..igmp
  1499fc:	61656c5f 72676576 5f70756f 6974656e     _leavegroup_neti
  149a0c:	61203a66 6d657474 74207470 656c206f     f: attempt to le
  149a1c:	20657661 6e206e6f 492d6e6f 20504d47     ave on non-IGMP 
  149a2c:	6974656e 00000066 706d6769 6e65735f     netif...igmp_sen
  149a3c:	63203a64 6b636568 61687420 69662074     d: check that fi
  149a4c:	20747372 66756270 6e616320 6c6f6820     rst pbuf can hol
  149a5c:	74732064 74637572 6d676920 736d5f70     d struct igmp_ms
  149a6c:	00000067 723e2d70 3d206665 0031203d     g...p->ref == 1.
  149a7c:	76726573 73656369 49776c2f 74694b50     services/lwIPKit
  149a8c:	69776c2f 2e322d70 2f322e30 2f637273     /lwip-2.0.2/src/
  149a9c:	65726f63 7670692f 70692f34 00632e34     core/ipv4/ip4.c.
  149aac:	63656863 6874206b 66207461 74737269     check that first
  149abc:	75627020 61632066 6f68206e 7320646c      pbuf can hold s
  149acc:	63757274 70692074 7264685f 00000000     truct ip_hdr....

00149adc <ip_addr_any>:
  149adc:	00000000                                ....

00149ae0 <ip_addr_broadcast>:
  149ae0:	ffffffff 61686e75 656c646e 00000064     ....unhandled...
  149af0:	76726573 73656369 49776c2f 74694b50     services/lwIPKit
  149b00:	69776c2f 2e322d70 2f322e30 2f637273     /lwip-2.0.2/src/
  149b10:	65726f63 7670692f 70692f34 64615f34     core/ipv4/ip4_ad
  149b20:	632e7264 00000000 76657270 203d2120     dr.c....prev != 
  149b30:	00727069 76726573 73656369 49776c2f     ipr.services/lwI
  149b40:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  149b50:	2f637273 65726f63 7670692f 70692f34     src/core/ipv4/ip
  149b60:	72665f34 632e6761 00000000 76657270     4_frag.c....prev
  149b70:	656e3e2d 3d207478 7069203d 00000072     ->next == ipr...
  149b80:	66756270 72665f73 20646565 6c63202b     pbufs_freed + cl
  149b90:	3c206e65 7830203d 66666666 00000000     en <= 0xffff....
  149ba0:	725f7069 73736165 7562705f 756f6366     ip_reass_pbufcou
  149bb0:	3e20746e 6c63203d 00006e65 696e6173     nt >= clen..sani
  149bc0:	63207974 6b636568 6e696c20 2064656b     ty check linked 
  149bd0:	7473696c 00000000 63656863 7266206b     list....check fr
  149be0:	656d6761 2073746e 276e6f64 766f2074     agments don't ov
  149bf0:	616c7265 00000070 70206f6e 69766572     erlap...no previ
  149c00:	2073756f 67617266 746e656d 6874202c     ous fragment, th
  149c10:	6d207369 20747375 74206562 66206568     is must be the f
  149c20:	74737269 61726620 6e656d67 00002174     irst fragment!..
  149c30:	696e6173 63207974 6b636568 00000000     sanity check....
  149c40:	696c6176 65746164 7461645f 61726761     validate_datagra
  149c50:	656e3a6d 705f7478 21667562 4c554e3d     m:next_pbuf!=NUL
  149c60:	0000004c 696c6176 65746164 7461645f     L...validate_dat
  149c70:	61726761 61643a6d 72676174 65206d61     agram:datagram e
  149c80:	3d21646e 61746164 6d617267 6e656c20     nd!=datagram len
  149c90:	00000000 3d212070 4c554e20 0000004c     ....p != NULL...
  149ca0:	20726370 4e203d21 004c4c55 20726370     pcr != NULL.pcr 
  149cb0:	70203d3d 00000000 5f347069 67617266     == p....ip4_frag
  149cc0:	64202928 2073656f 20746f6e 70707573     () does not supp
  149cd0:	2074726f 6f205049 6f697470 0000736e     ort IP options..
  149ce0:	665f7069 28676172 4d203a29 6c612046     ip_frag(): MF al
  149cf0:	64616572 65732079 00000074 73696874     ready set...this
  149d00:	65656e20 61207364 75627020 6e692066      needs a pbuf in
  149d10:	656e6f20 65697020 00216563 676e6970      one piece!.ping
  149d20:	7a69735f 73692065 6f6f7420 67696220     _size is too big
  149d30:	00000000 76726573 73656369 49776c2f     ....services/lwI
  149d40:	74694b50 69776c2f 2e322d70 2f322e30     PKit/lwip-2.0.2/
  149d50:	2f637273 73707061 6e69702f 69702f67     src/apps/ping/pi
  149d60:	632e676e 00000000 00003165 63616d65     ng.c....e1..emac
  149d70:	6e695f31 00007274 6d305b1b 642f445b     1_intr...[0m[D/d
  149d80:	652e7672 5d74656e 00000020 74656e65     rv.enet] ...enet
  149d90:	6c206425 206b6e69 00007075 6d305b1b     %d link up...[0m
  149da0:	0000000a 74656e65 6c206425 206b6e69     ....enet%d link 
  149db0:	6e776f64 00000000 31335b1b 2f455b6d     down.....[31m[E/
  149dc0:	2e767264 74656e65 0000205d 4f525245     drv.enet] ..ERRO
  149dd0:	61203a52 636f6c6c 6d656d20 746f6e20     R: alloc mem not
  149de0:	6f6e6520 20686775 20726f66 74656e65      enough for enet
  149df0:	69726420 00726576 4f525245 72203a52      driver.ERROR: r
  149e00:	75622078 70206666 20656761 6f6c6c61     x buff page allo
  149e10:	61662063 64656c69 00000000 4f525245     c failed....ERRO
  149e20:	74203a52 75622078 70206666 20656761     R: tx buff page 
  149e30:	6f6c6c61 61662063 64656c69 00000000     alloc failed....
  149e40:	4f525245 72203a52 64622078 67617020     ERROR: rx bd pag
  149e50:	6c612065 20636f6c 6c696166 00006465     e alloc failed..
  149e60:	4f525245 74203a52 64622078 67617020     ERROR: tx bd pag
  149e70:	6c612065 20636f6c 6c696166 00006465     e alloc failed..
  149e80:	51494e55 495f4555 73692044 25782520     UNIQUE_ID is %x%
  149e90:	00000078 51494e55 495f4555 68632044     x...UNIQUE_ID ch
  149ea0:	65676e61 206f7420 62203233 20737469     ange to 32 bits 
  149eb0:	00007825 00000070 2074656e 6f727265     %x..p...net erro
  149ec0:	65732072 6c20646e 74676e65 64252068     r send length %d
  149ed0:	63786520 20646565 2078616d 676e656c      exceed max leng
  149ee0:	00006874 2074656e 6f727265 65722072     th..net error re
  149ef0:	6c207663 74676e65 64252068 63786520     cv length %d exc
  149f00:	20646565 2078616d 676e656c 00006874     eed max length..
  149f10:	20687465 64616572 766e6920 64696c61     eth read invalid
  149f20:	72617020 74656d61 62207265 65666675      parameter buffe
  149f30:	70252072 7a697320 64252065 00000000     r %p size %d....
  149f40:	20687465 74697277 6e692065 696c6176     eth write invali
  149f50:	61702064 656d6172 20726574 66667562     d parameter buff
  149f60:	25207265 69732070 2520657a 00000064     er %p size %d...
  149f70:	65746e69 75707272 616d2074 20686374     interrput match 
  149f80:	65736162 64646120 72652072 00726f72     base addr error.
  149f90:	33335b1b 2f575b6d 2e767264 74656e65     .[33m[W/drv.enet
  149fa0:	0000205d 20594850 6b6e694c 776f6420     ] ..PHY Link dow
  149fb0:	70202c6e 7361656c 68632065 206b6365     n, please check 
  149fc0:	20656874 6c626163 6f632065 63656e6e     the cable connec
  149fd0:	6e6f6974 646e6120 6e696c20 6170206b     tion and link pa
  149fe0:	656e7472 65732072 6e697474 00002e67     rtner setting...

00149ff0 <_k_enet_ops>:
  149ff0:	00000000 00135440 00135488 001354c4     ....@T...T...T..
  14a000:	00135574 00134e74 32335b1b 2f495b6d     tU..tN...[32m[I/
  14a010:	2e767264 74656e65 0000205d 63616d65     drv.enet] ..emac
  14a020:	76656420 20656369 74696e69 63757320      device init suc
  14a030:	73736563 00000000 63616d65 76656420     cess....emac dev
  14a040:	20656369 74696e69 69616620 203a646c     ice init faild: 
  14a050:	00006425 6b6e696c 6425645f 00000000     %d..link_d%d....

0014a060 <__FUNCTION__.9268>:
  14a060:	695f7472 7536786d 74655f6c 78745f68     rt_imx6ul_eth_tx
  14a070:	00000000 45535341 45205452 524f5252     ....ASSERT ERROR
  14a080:	25202220 3a222073 6c696620 25222065      " %s ": file "%
  14a090:	4c202273 20656e69 22642522 6e756620     s" Line "%d" fun
  14a0a0:	6f697463 616e206e 2220656d 20227325     ction name "%s" 
  14a0b0:	0000000a                                ....

0014a0b4 <s_enetBases>:
  14a0b4:	00000000 02188000 020b4000 74736e69     .........@..inst
  14a0c4:	65636e61 41203c20 59415252 5a49535f     ance < ARRAY_SIZ
  14a0d4:	5f732845 74656e65 65736142 00002973     E(s_enetBases)..
  14a0e4:	666e6f63 00006769 646e6168 0000656c     config..handle..
  14a0f4:	66667562 6f437265 6769666e 00000000     bufferConfig....
  14a104:	66667562 6f437265 6769666e 78723e2d     bufferConfig->rx
  14a114:	74536442 41747261 41726464 6e67696c     BdStartAddrAlign
  14a124:	00000000 66667562 6f437265 6769666e     ....bufferConfig
  14a134:	78743e2d 74536442 41747261 41726464     ->txBdStartAddrA
  14a144:	6e67696c 00000000 66667562 6f437265     lign....bufferCo
  14a154:	6769666e 78723e2d 66667542 6c417265     nfig->rxBufferAl
  14a164:	006e6769 66667562 6f437265 6769666e     ign.bufferConfig
  14a174:	78743e2d 66667542 6c417265 006e6769     ->txBufferAlign.
  14a184:	4163616d 00726464 66667562 6f437265     macAddr.bufferCo
  14a194:	6769666e 78723e2d 66667542 657a6953     nfig->rxBuffSize
  14a1a4:	67696c41 3d3e206e 454e4520 58525f54     Align >= ENET_RX
  14a1b4:	4e494d5f 4655425f 53524546 00455a49     _MIN_BUFFERSIZE.
  14a1c4:	66667562 6f437265 6769666e 78743e2d     bufferConfig->tx
  14a1d4:	66667542 657a6953 67696c41 202a206e     BuffSizeAlign * 
  14a1e4:	66667562 6f437265 6769666e 78743e2d     bufferConfig->tx
  14a1f4:	754e6442 7265626d 28203e20 54454e45     BdNumber > (ENET
  14a204:	4152465f 4d5f454d 465f5841 454d4152     _FRAME_MAX_FRAME
  14a214:	204e454c 4e45202b 465f5445 454d4152     LEN + ENET_FRAME
  14a224:	414c565f 41545f4e 4e454c47 00000029     _VLAN_TAGLEN)...
  14a234:	66667562 6f437265 6769666e 78743e2d     bufferConfig->tx
  14a244:	66667542 657a6953 67696c41 202a206e     BuffSizeAlign * 
  14a254:	66667562 6f437265 6769666e 78743e2d     bufferConfig->tx
  14a264:	754e6442 7265626d 45203e20 5f54454e     BdNumber > ENET_
  14a274:	4d415246 414d5f45 52465f58 4c454d41     FRAME_MAX_FRAMEL
  14a284:	00004e45 66667562 6f437265 6769666e     EN..bufferConfig
  14a294:	78723e2d 66667542 657a6953 67696c41     ->rxBuffSizeAlig
  14a2a4:	202a206e 66667562 6f437265 6769666e     n * bufferConfig
  14a2b4:	78723e2d 754e6442 7265626d 63203e20     ->rxBdNumber > c
  14a2c4:	69666e6f 723e2d67 78614d78 6d617246     onfig->rxMaxFram
  14a2d4:	6e654c65 00000000 64427874 72617453     eLen....txBdStar
  14a2e4:	696c4174 00006e67 75427874 74536666     tAlign..txBuffSt
  14a2f4:	41747261 6e67696c 00000000 64427872     artAlign....rxBd
  14a304:	72617453 696c4174 00006e67 75427872     StartAlign..rxBu
  14a314:	74536666 41747261 6e67696c 00000000     ffStartAlign....
  14a324:	43637273 6b636f6c 007a485f 646e6168     srcClock_Hz.hand
  14a334:	3e2d656c 64427872 72727543 00746e65     le->rxBdCurrent.
  14a344:	72724565 7453726f 63697461 00000000     eErrorStatic....
  14a354:	676e656c 00006874 31335b1b 2f455b6d     length...[31m[E/
  14a364:	2e767264 74656e65 0000205d 6d617266     drv.enet] ..fram
  14a374:	72652065 30726f72 72756320 66667542     e error0 curBuff
  14a384:	63736544 2d706972 6e6f633e 6c6f7274     Descrip->control
  14a394:	25783020 20783430 676e656c 25206874      0x%04x length %
  14a3a4:	00000a64 6d305b1b 0000000a 6d617266     d....[0m....fram
  14a3b4:	72652065 31726f72 72756320 66667542     e error1 curBuff
  14a3c4:	63736544 2d706972 6e6f633e 6c6f7274     Descrip->control
  14a3d4:	25783020 20783430 676e656c 25206874      0x%04x length %
  14a3e4:	00000a64 646e6168 3e2d656c 64427874     d...handle->txBd
  14a3f4:	72727543 00746e65 61746164 00000000     Current.data....
  14a404:	676e656c 3c206874 4e45203d 465f5445     length <= ENET_F
  14a414:	454d4152 58414d5f 4152465f 454c454d     RAME_MAX_FRAMELE
  14a424:	0000004e 72646461 00737365              N...address.

0014a430 <__FUNCTION__.9236>:
  14a430:	54454e45 7465475f 74736e49 65636e61     ENET_GetInstance
  14a440:	00000000                                ....

0014a444 <__FUNCTION__.9241>:
  14a444:	54454e45 7465475f 61666544 43746c75     ENET_GetDefaultC
  14a454:	69666e6f 00000067                       onfig...

0014a45c <__FUNCTION__.9250>:
  14a45c:	54454e45 696e495f 00000074              ENET_Init...

0014a468 <__FUNCTION__.9259>:
  14a468:	54454e45 7465535f 6c6c6143 6b636162     ENET_SetCallback
  14a478:	00000000                                ....

0014a47c <__FUNCTION__.9288>:
  14a47c:	54454e45 7465535f 75427854 72656666     ENET_SetTxBuffer
  14a48c:	63736544 74706972 0073726f              Descriptors.

0014a498 <__FUNCTION__.9302>:
  14a498:	54454e45 7465535f 75427852 72656666     ENET_SetRxBuffer
  14a4a8:	63736544 74706972 0073726f              Descriptors.

0014a4b4 <__FUNCTION__.9324>:
  14a4b4:	54454e45 7465475f 4163614d 00726464     ENET_GetMacAddr.

0014a4c4 <__FUNCTION__.9331>:
  14a4c4:	54454e45 7465535f 00494d53              ENET_SetSMI.

0014a4d0 <__FUNCTION__.9371>:
  14a4d0:	54454e45 7465475f 72457852 66654272     ENET_GetRxErrBef
  14a4e0:	5265726f 46646165 656d6172 00000000     oreReadFrame....

0014a4f0 <__FUNCTION__.9383>:
  14a4f0:	54454e45 6165525f 61724664 0000656d     ENET_ReadFrame..

0014a500 <__FUNCTION__.9390>:
  14a500:	54454e45 6470555f 52657461 42646165     ENET_UpdateReadB
  14a510:	65666675 00007372                       uffers..

0014a518 <__FUNCTION__.9398>:
  14a518:	54454e45 6e65535f 61724664 0000656d     ENET_SendFrame..

0014a528 <__FUNCTION__.9407>:
  14a528:	54454e45 6464415f 746c754d 73616369     ENET_AddMulticas
  14a538:	6f724774 00007075                       tGroup..

0014a540 <__FUNCTION__.9422>:
  14a540:	54454e45 61654c5f 754d6576 6369746c     ENET_LeaveMultic
  14a550:	47747361 70756f72 00000000              astGroup....

0014a55c <__FUNCTION__.9439>:
  14a55c:	54454e45 6172545f 696d736e 51524974     ENET_TransmitIRQ
  14a56c:	646e6148 0072656c                       Handler.

0014a574 <__FUNCTION__.9446>:
  14a574:	54454e45 6365525f 65766965 48515249     ENET_ReceiveIRQH
  14a584:	6c646e61 00007265                       andler..

0014a58c <__FUNCTION__.9451>:
  14a58c:	54454e45 7272455f 5249726f 6e614851     ENET_ErrorIRQHan
  14a59c:	72656c64 00000000 76726573 73656369     dler....services
  14a5ac:	49776c2f 74694b50 7672642f 656e655f     /lwIPKit/drv_ene
  14a5bc:	72642f74 72657669 6c73662f 6970675f     t/driver/fsl_gpi
  14a5cc:	00632e6f 206e6970 3233203c 00000000     o.c.pin < 32....

0014a5dc <__func__.6332>:
  14a5dc:	4f495047 6972575f 69506574 74754f6e     GPIO_WritePinOut
  14a5ec:	00747570 61746164 00727450 74617473     put.dataPtr.stat
  14a5fc:	00007375 6c707564 00007865              us..duplex..

0014a608 <__FUNCTION__.8416>:
  14a608:	5f594850 64616552 00000000              PHY_Read....

0014a614 <__FUNCTION__.8434>:
  14a614:	5f594850 4c746547 536b6e69 75746174     PHY_GetLinkStatu
  14a624:	00000073                                s...

0014a628 <__FUNCTION__.8443>:
  14a628:	5f594850 4c746547 536b6e69 64656570     PHY_GetLinkSpeed
  14a638:	6c707544 00007865                       Duplex..

0014a640 <errid>:
  14a640:	19222154 0302010d 0c1c4b11 1d0b0410     T!"......K......
  14a650:	68271e12 71706f6e 06052062 1514130f     ..'hnopqb ......
  14a660:	0716081a 18172428 1b0e0a09 8323251f     ....($.......%#.
  14a670:	2a267d82 3e3d3c2b 4a47433f 5a59584d     .}&*+<=>?CGJMXYZ
  14a680:	5e5d5c5b 6361605f 67666564 6c6b6a69     [\]^_`acdefgijkl
  14a690:	79747372 487c7b7a 00000000              rstyz{|H....

0014a69c <errmsg>:
  14a69c:	656c6c49 206c6167 65747962 71657320     Illegal byte seq
  14a6ac:	636e6575 6f440065 6e69616d 72726520     uence.Domain err
  14a6bc:	5200726f 6c757365 6f6e2074 65722074     or.Result not re
  14a6cc:	73657270 61746e65 00656c62 20746f4e     presentable.Not 
  14a6dc:	74742061 65500079 73696d72 6e6f6973     a tty.Permission
  14a6ec:	6e656420 00646569 7265704f 6f697461      denied.Operatio
  14a6fc:	6f6e206e 65702074 74696d72 00646574     n not permitted.
  14a70c:	73206f4e 20686375 656c6966 20726f20     No such file or 
  14a71c:	65726964 726f7463 6f4e0079 63757320     directory.No suc
  14a72c:	72702068 7365636f 69460073 6520656c     h process.File e
  14a73c:	74736978 61560073 2065756c 206f6f74     xists.Value too 
  14a74c:	6772616c 6f662065 61642072 74206174     large for data t
  14a75c:	00657079 73206f4e 65636170 66656c20     ype.No space lef
  14a76c:	6e6f2074 76656420 00656369 2074754f     t on device.Out 
  14a77c:	6d20666f 726f6d65 65520079 72756f73     of memory.Resour
  14a78c:	62206563 00797375 65746e49 70757272     ce busy.Interrup
  14a79c:	20646574 74737973 63206d65 006c6c61     ted system call.
  14a7ac:	6f736552 65637275 6d657420 61726f70     Resource tempora
  14a7bc:	796c6972 616e7520 6c696176 656c6261     rily unavailable
  14a7cc:	766e4900 64696c61 65657320 7243006b     .Invalid seek.Cr
  14a7dc:	2d73736f 69766564 6c206563 006b6e69     oss-device link.
  14a7ec:	64616552 6c6e6f2d 69662079 7320656c     Read-only file s
  14a7fc:	65747379 6944006d 74636572 2079726f     ystem.Directory 
  14a80c:	20746f6e 74706d65 6f430079 63656e6e     not empty.Connec
  14a81c:	6e6f6974 73657220 62207465 65702079     tion reset by pe
  14a82c:	4f007265 61726570 6e6f6974 6d697420     er.Operation tim
  14a83c:	6f206465 43007475 656e6e6f 6f697463     ed out.Connectio
  14a84c:	6572206e 65737566 6f480064 69207473     n refused.Host i
  14a85c:	6f642073 48006e77 2074736f 75207369     s down.Host is u
  14a86c:	6165726e 62616863 4100656c 65726464     nreachable.Addre
  14a87c:	69207373 7375206e 72420065 6e656b6f     ss in use.Broken
  14a88c:	70697020 2f490065 7265204f 00726f72      pipe.I/O error.
  14a89c:	73206f4e 20686375 69766564 6f206563     No such device o
  14a8ac:	64612072 73657264 6c420073 206b636f     r address.Block 
  14a8bc:	69766564 72206563 69757165 00646572     device required.
  14a8cc:	73206f4e 20686375 69766564 4e006563     No such device.N
  14a8dc:	6120746f 72696420 6f746365 49007972     ot a directory.I
  14a8ec:	20612073 65726964 726f7463 65540079     s a directory.Te
  14a8fc:	66207478 20656c69 79737562 65784500     xt file busy.Exe
  14a90c:	6f662063 74616d72 72726520 4900726f     c format error.I
  14a91c:	6c61766e 61206469 6d756772 00746e65     nvalid argument.
  14a92c:	75677241 746e656d 73696c20 6f742074     Argument list to
  14a93c:	6f6c206f 5300676e 6f626d79 2063696c     o long.Symbolic 
  14a94c:	6b6e696c 6f6f6c20 69460070 616e656c     link loop.Filena
  14a95c:	7420656d 6c206f6f 00676e6f 206f6f54     me too long.Too 
  14a96c:	796e616d 65706f20 6966206e 2073656c     many open files 
  14a97c:	73206e69 65747379 6f4e006d 6c696620     in system.No fil
  14a98c:	65642065 69726373 726f7470 76612073     e descriptors av
  14a99c:	616c6961 00656c62 20646142 656c6966     ailable.Bad file
  14a9ac:	73656420 70697263 00726f74 63206f4e      descriptor.No c
  14a9bc:	646c6968 6f727020 73736563 64614200     hild process.Bad
  14a9cc:	64646120 73736572 6c694600 6f742065      address.File to
  14a9dc:	616c206f 00656772 206f6f54 796e616d     o large.Too many
  14a9ec:	6e696c20 4e00736b 6f6c206f 20736b63      links.No locks 
  14a9fc:	69617661 6c62616c 65520065 72756f73     available.Resour
  14aa0c:	64206563 6c646165 206b636f 6c756f77     ce deadlock woul
  14aa1c:	636f2064 00727563 74617453 6f6e2065     d occur.State no
  14aa2c:	65722074 65766f63 6c626172 72500065     t recoverable.Pr
  14aa3c:	6f697665 6f207375 72656e77 65696420     evious owner die
  14aa4c:	704f0064 74617265 206e6f69 636e6163     d.Operation canc
  14aa5c:	64656c65 6e754600 6f697463 6f6e206e     eled.Function no
  14aa6c:	6d692074 6d656c70 65746e65 6f4e0064     t implemented.No
  14aa7c:	73656d20 65676173 20666f20 69736564      message of desi
  14aa8c:	20646572 65707974 65644900 6669746e     red type.Identif
  14aa9c:	20726569 6f6d6572 00646576 69766544     ier removed.Devi
  14aaac:	6e206563 6120746f 72747320 006d6165     ce not a stream.
  14aabc:	64206f4e 20617461 69617661 6c62616c     No data availabl
  14aacc:	65440065 65636976 6d697420 74756f65     e.Device timeout
  14aadc:	74754f00 20666f20 65727473 20736d61     .Out of streams 
  14aaec:	6f736572 65637275 694c0073 68206b6e     resources.Link h
  14aafc:	62207361 206e6565 65766573 00646572     as been severed.
  14ab0c:	746f7250 6c6f636f 72726520 4200726f     Protocol error.B
  14ab1c:	6d206461 61737365 46006567 20656c69     ad message.File 
  14ab2c:	63736564 74706972 6920726f 6162206e     descriptor in ba
  14ab3c:	74732064 00657461 20746f4e 6f732061     d state.Not a so
  14ab4c:	74656b63 73654400 616e6974 6e6f6974     cket.Destination
  14ab5c:	64646120 73736572 71657220 65726975      address require
  14ab6c:	654d0064 67617373 6f742065 616c206f     d.Message too la
  14ab7c:	00656772 746f7250 6c6f636f 6f727720     rge.Protocol wro
  14ab8c:	7420676e 20657079 20726f66 6b636f73     ng type for sock
  14ab9c:	50007465 6f746f72 206c6f63 20746f6e     et.Protocol not 
  14abac:	69617661 6c62616c 72500065 636f746f     available.Protoc
  14abbc:	6e206c6f 7320746f 6f707075 64657472     ol not supported
  14abcc:	636f5300 2074656b 65707974 746f6e20     .Socket type not
  14abdc:	70757320 74726f70 4e006465 7320746f      supported.Not s
  14abec:	6f707075 64657472 6f725000 6f636f74     upported.Protoco
  14abfc:	6166206c 796c696d 746f6e20 70757320     l family not sup
  14ac0c:	74726f70 41006465 65726464 66207373     ported.Address f
  14ac1c:	6c696d61 6f6e2079 75732074 726f7070     amily not suppor
  14ac2c:	20646574 70207962 6f746f72 006c6f63     ted by protocol.
  14ac3c:	72646441 20737365 20746f6e 69617661     Address not avai
  14ac4c:	6c62616c 654e0065 726f7774 7369206b     lable.Network is
  14ac5c:	776f6420 654e006e 726f7774 6e75206b      down.Network un
  14ac6c:	63616572 6c626168 6f430065 63656e6e     reachable.Connec
  14ac7c:	6e6f6974 73657220 62207465 656e2079     tion reset by ne
  14ac8c:	726f7774 6f43006b 63656e6e 6e6f6974     twork.Connection
  14ac9c:	6f626120 64657472 206f4e00 66667562      aborted.No buff
  14acac:	73207265 65636170 61766120 62616c69     er space availab
  14acbc:	5300656c 656b636f 73692074 6e6f6320     le.Socket is con
  14accc:	7463656e 53006465 656b636f 6f6e2074     nected.Socket no
  14acdc:	6f632074 63656e6e 00646574 6e6e6143     t connected.Cann
  14acec:	7320746f 20646e65 65746661 6f732072     ot send after so
  14acfc:	74656b63 75687320 776f6474 704f006e     cket shutdown.Op
  14ad0c:	74617265 206e6f69 65726c61 20796461     eration already 
  14ad1c:	70206e69 72676f72 00737365 7265704f     in progress.Oper
  14ad2c:	6f697461 6e69206e 6f727020 73657267     ation in progres
  14ad3c:	74530073 20656c61 656c6966 6e616820     s.Stale file han
  14ad4c:	00656c64 6f6d6552 49206574 65204f2f     dle.Remote I/O e
  14ad5c:	726f7272 6f755100 65206174 65656378     rror.Quota excee
  14ad6c:	00646564 6d206f4e 75696465 6f66206d     ded.No medium fo
  14ad7c:	00646e75 6e6f7257 656d2067 6d756964     und.Wrong medium
  14ad8c:	70797420 754d0065 6869746c 6120706f      type.Multihop a
  14ad9c:	6d657474 64657470 206f4e00 6f727265     ttempted.No erro
  14adac:	6e692072 6d726f66 6f697461 0000006e     r information...
  14adbc:	65737341 6f697472 6166206e 64656c69     Assertion failed
  14adcc:	7325203a 73252820 7325203a 6425203a     : %s (%s: %s: %d
  14addc:	00000a29                                )...

0014ade0 <__FUNCTION__.6013>:
  14ade0:	63737973 5f6c6c61 74736572 5f747261     syscall_restart_
  14adf0:	63737973 006c6c61                       syscall.

0014adf8 <__FUNCTION__.6017>:
  14adf8:	63737973 5f6c6c61 74697865 00000000     syscall_exit....

0014ae08 <__FUNCTION__.6020>:
  14ae08:	63737973 5f6c6c61 6b726f66 00000000     syscall_fork....

0014ae18 <__FUNCTION__.6026>:
  14ae18:	63737973 5f6c6c61 64616572 00000000     syscall_read....

0014ae28 <__FUNCTION__.6032>:
  14ae28:	63737973 5f6c6c61 74697277 00000065     syscall_write...

0014ae38 <__FUNCTION__.6038>:
  14ae38:	63737973 5f6c6c61 6e65706f 00000000     syscall_open....

0014ae48 <__FUNCTION__.6042>:
  14ae48:	63737973 5f6c6c61 736f6c63 00000065     syscall_close...

0014ae58 <__FUNCTION__.6045>:
  14ae58:	63737973 5f6c6c61 61657263 00000074     syscall_creat...

0014ae68 <__FUNCTION__.6048>:
  14ae68:	63737973 5f6c6c61 6b6e696c 00000000     syscall_link....

0014ae78 <__FUNCTION__.6052>:
  14ae78:	63737973 5f6c6c61 696c6e75 00006b6e     syscall_unlink..

0014ae88 <__FUNCTION__.6058>:
  14ae88:	63737973 5f6c6c61 63657865 00006576     syscall_execve..

0014ae98 <__FUNCTION__.6062>:
  14ae98:	63737973 5f6c6c61 69646863 00000072     syscall_chdir...

0014aea8 <__FUNCTION__.6065>:
  14aea8:	63737973 5f6c6c61 6f6e6b6d 00000064     syscall_mknod...

0014aeb8 <__FUNCTION__.6068>:
  14aeb8:	63737973 5f6c6c61 6f6d6863 00000064     syscall_chmod...

0014aec8 <__FUNCTION__.6071>:
  14aec8:	63737973 5f6c6c61 6f68636c 00006e77     syscall_lchown..

0014aed8 <__FUNCTION__.6077>:
  14aed8:	63737973 5f6c6c61 6565736c 0000006b     syscall_lseek...

0014aee8 <__FUNCTION__.6080>:
  14aee8:	63737973 5f6c6c61 70746567 00006469     syscall_getpid..

0014aef8 <__FUNCTION__.6083>:
  14aef8:	63737973 5f6c6c61 6e756f6d 00000074     syscall_mount...

0014af08 <__FUNCTION__.6086>:
  14af08:	63737973 5f6c6c61 75746573 00006469     syscall_setuid..

0014af18 <__FUNCTION__.6089>:
  14af18:	63737973 5f6c6c61 75746567 00006469     syscall_getuid..

0014af28 <__FUNCTION__.6092>:
  14af28:	63737973 5f6c6c61 61727470 00006563     syscall_ptrace..

0014af38 <__FUNCTION__.6095>:
  14af38:	63737973 5f6c6c61 73756170 00000065     syscall_pause...

0014af48 <__FUNCTION__.6100>:
  14af48:	63737973 5f6c6c61 65636361 00007373     syscall_access..

0014af58 <__FUNCTION__.6103>:
  14af58:	63737973 5f6c6c61 6563696e 00000000     syscall_nice....

0014af68 <__FUNCTION__.6106>:
  14af68:	63737973 5f6c6c61 636e7973 00000000     syscall_sync....

0014af78 <__FUNCTION__.6111>:
  14af78:	63737973 5f6c6c61 6c6c696b 00000000     syscall_kill....

0014af88 <__FUNCTION__.6116>:
  14af88:	63737973 5f6c6c61 616e6572 0000656d     syscall_rename..

0014af98 <__FUNCTION__.6121>:
  14af98:	63737973 5f6c6c61 69646b6d 00000072     syscall_mkdir...

0014afa8 <__FUNCTION__.6125>:
  14afa8:	63737973 5f6c6c61 69646d72 00000072     syscall_rmdir...

0014afb8 <__FUNCTION__.6129>:
  14afb8:	63737973 5f6c6c61 00707564              syscall_dup.

0014afc4 <__FUNCTION__.6133>:
  14afc4:	63737973 5f6c6c61 65706970 00000000     syscall_pipe....

0014afd4 <__FUNCTION__.6136>:
  14afd4:	63737973 5f6c6c61 656d6974 00000073     syscall_times...

0014afe4 <__FUNCTION__.6140>:
  14afe4:	63737973 5f6c6c61 006b7262              syscall_brk.

0014aff0 <__FUNCTION__.6143>:
  14aff0:	63737973 5f6c6c61 67746573 00006469     syscall_setgid..

0014b000 <__FUNCTION__.6146>:
  14b000:	63737973 5f6c6c61 67746567 00006469     syscall_getgid..

0014b010 <__FUNCTION__.6149>:
  14b010:	63737973 5f6c6c61 65746567 00646975     syscall_geteuid.

0014b020 <__FUNCTION__.6152>:
  14b020:	63737973 5f6c6c61 65746567 00646967     syscall_getegid.

0014b030 <__FUNCTION__.6155>:
  14b030:	63737973 5f6c6c61 74636361 00000000     syscall_acct....

0014b040 <__FUNCTION__.6158>:
  14b040:	63737973 5f6c6c61 756f6d75 0032746e     syscall_umount2.

0014b050 <__FUNCTION__.6164>:
  14b050:	63737973 5f6c6c61 74636f69 0000006c     syscall_ioctl...

0014b060 <__FUNCTION__.6170>:
  14b060:	63737973 5f6c6c61 746e6366 0000006c     syscall_fcntl...

0014b070 <__FUNCTION__.6173>:
  14b070:	63737973 5f6c6c61 70746573 00646967     syscall_setpgid.

0014b080 <__FUNCTION__.6176>:
  14b080:	63737973 5f6c6c61 73616d75 0000006b     syscall_umask...

0014b090 <__FUNCTION__.6179>:
  14b090:	63737973 5f6c6c61 6f726863 0000746f     syscall_chroot..

0014b0a0 <__FUNCTION__.6182>:
  14b0a0:	63737973 5f6c6c61 61747375 00000074     syscall_ustat...

0014b0b0 <__FUNCTION__.6187>:
  14b0b0:	63737973 5f6c6c61 32707564 00000000     syscall_dup2....

0014b0c0 <__FUNCTION__.6190>:
  14b0c0:	63737973 5f6c6c61 70746567 00646970     syscall_getppid.

0014b0d0 <__FUNCTION__.6193>:
  14b0d0:	63737973 5f6c6c61 70746567 00707267     syscall_getpgrp.

0014b0e0 <__FUNCTION__.6196>:
  14b0e0:	63737973 5f6c6c61 73746573 00006469     syscall_setsid..

0014b0f0 <__FUNCTION__.6203>:
  14b0f0:	63737973 5f6c6c61 61676973 6f697463     syscall_sigactio
  14b100:	0000006e                                n...

0014b104 <__FUNCTION__.6206>:
  14b104:	63737973 5f6c6c61 72746573 64697565     syscall_setreuid
  14b114:	00000000                                ....

0014b118 <__FUNCTION__.6209>:
  14b118:	63737973 5f6c6c61 72746573 64696765     syscall_setregid
  14b128:	00000000                                ....

0014b12c <__FUNCTION__.6212>:
  14b12c:	63737973 5f6c6c61 73676973 65707375     syscall_sigsuspe
  14b13c:	0000646e                                nd..

0014b140 <__FUNCTION__.6215>:
  14b140:	63737973 5f6c6c61 70676973 69646e65     syscall_sigpendi
  14b150:	0000676e                                ng..

0014b154 <__FUNCTION__.6218>:
  14b154:	63737973 5f6c6c61 68746573 6e74736f     syscall_sethostn
  14b164:	00656d61                                ame.

0014b168 <__FUNCTION__.6223>:
  14b168:	63737973 5f6c6c61 72746573 696d696c     syscall_setrlimi
  14b178:	00000074                                t...

0014b17c <__FUNCTION__.6226>:
  14b17c:	63737973 5f6c6c61 72746567 67617375     syscall_getrusag
  14b18c:	00000065                                e...

0014b190 <__FUNCTION__.6229>:
  14b190:	63737973 5f6c6c61 74746567 6f656d69     syscall_gettimeo
  14b1a0:	79616466 00000000                       fday....

0014b1a8 <__FUNCTION__.6232>:
  14b1a8:	63737973 5f6c6c61 74746573 6f656d69     syscall_settimeo
  14b1b8:	79616466 00000000                       fday....

0014b1c0 <__FUNCTION__.6235>:
  14b1c0:	63737973 5f6c6c61 67746567 70756f72     syscall_getgroup
  14b1d0:	00000073                                s...

0014b1d4 <__FUNCTION__.6238>:
  14b1d4:	63737973 5f6c6c61 67746573 70756f72     syscall_setgroup
  14b1e4:	00000073                                s...

0014b1e8 <__FUNCTION__.6241>:
  14b1e8:	63737973 5f6c6c61 6c6d7973 006b6e69     syscall_symlink.

0014b1f8 <__FUNCTION__.6247>:
  14b1f8:	63737973 5f6c6c61 64616572 6b6e696c     syscall_readlink
  14b208:	00000000                                ....

0014b20c <__FUNCTION__.6250>:
  14b20c:	63737973 5f6c6c61 6c657375 00006269     syscall_uselib..

0014b21c <__FUNCTION__.6253>:
  14b21c:	63737973 5f6c6c61 70617773 00006e6f     syscall_swapon..

0014b22c <__FUNCTION__.6256>:
  14b22c:	63737973 5f6c6c61 6f626572 0000746f     syscall_reboot..

0014b23c <__FUNCTION__.6261>:
  14b23c:	63737973 5f6c6c61 6d6e756d 00007061     syscall_munmap..

0014b24c <__FUNCTION__.6264>:
  14b24c:	63737973 5f6c6c61 6e757274 65746163     syscall_truncate
  14b25c:	00000000                                ....

0014b260 <__FUNCTION__.6267>:
  14b260:	63737973 5f6c6c61 75727466 7461636e     syscall_ftruncat
  14b270:	00000065                                e...

0014b274 <__FUNCTION__.6270>:
  14b274:	63737973 5f6c6c61 6d686366 0000646f     syscall_fchmod..

0014b284 <__FUNCTION__.6273>:
  14b284:	63737973 5f6c6c61 6f686366 00006e77     syscall_fchown..

0014b294 <__FUNCTION__.6276>:
  14b294:	63737973 5f6c6c61 70746567 726f6972     syscall_getprior
  14b2a4:	00797469                                ity.

0014b2a8 <__FUNCTION__.6279>:
  14b2a8:	63737973 5f6c6c61 70746573 726f6972     syscall_setprior
  14b2b8:	00797469                                ity.

0014b2bc <__FUNCTION__.6285>:
  14b2bc:	63737973 5f6c6c61 74617473 00007366     syscall_statfs..

0014b2cc <__FUNCTION__.6291>:
  14b2cc:	63737973 5f6c6c61 61747366 00736674     syscall_fstatfs.

0014b2dc <__FUNCTION__.6294>:
  14b2dc:	63737973 5f6c6c61 6c737973 0000676f     syscall_syslog..

0014b2ec <__FUNCTION__.6297>:
  14b2ec:	63737973 5f6c6c61 69746573 656d6974     syscall_setitime
  14b2fc:	00000072                                r...

0014b300 <__FUNCTION__.6300>:
  14b300:	63737973 5f6c6c61 69746567 656d6974     syscall_getitime
  14b310:	00000072                                r...

0014b314 <__FUNCTION__.6305>:
  14b314:	63737973 5f6c6c61 74617473 00000000     syscall_stat....

0014b324 <__FUNCTION__.6310>:
  14b324:	63737973 5f6c6c61 6174736c 00000074     syscall_lstat...

0014b334 <__FUNCTION__.6315>:
  14b334:	63737973 5f6c6c61 61747366 00000074     syscall_fstat...

0014b344 <__FUNCTION__.6318>:
  14b344:	63737973 5f6c6c61 6e616876 00707567     syscall_vhangup.

0014b354 <__FUNCTION__.6321>:
  14b354:	63737973 5f6c6c61 74696177 00000034     syscall_wait4...

0014b364 <__FUNCTION__.6324>:
  14b364:	63737973 5f6c6c61 70617773 0066666f     syscall_swapoff.

0014b374 <__FUNCTION__.6327>:
  14b374:	63737973 5f6c6c61 69737973 006f666e     syscall_sysinfo.

0014b384 <__FUNCTION__.6331>:
  14b384:	63737973 5f6c6c61 6e797366 00000063     syscall_fsync...

0014b394 <__FUNCTION__.6334>:
  14b394:	63737973 5f6c6c61 72676973 72757465     syscall_sigretur
  14b3a4:	0000006e                                n...

0014b3a8 <__FUNCTION__.6337>:
  14b3a8:	63737973 5f6c6c61 6e6f6c63 00000065     syscall_clone...

0014b3b8 <__FUNCTION__.6340>:
  14b3b8:	63737973 5f6c6c61 64746573 69616d6f     syscall_setdomai
  14b3c8:	6d616e6e 00000065                       nname...

0014b3d0 <__FUNCTION__.6343>:
  14b3d0:	63737973 5f6c6c61 6d616e75 00000065     syscall_uname...

0014b3e0 <__FUNCTION__.6346>:
  14b3e0:	63737973 5f6c6c61 746a6461 78656d69     syscall_adjtimex
  14b3f0:	00000000                                ....

0014b3f4 <__FUNCTION__.6349>:
  14b3f4:	63737973 5f6c6c61 6f72706d 74636574     syscall_mprotect
  14b404:	00000000                                ....

0014b408 <__FUNCTION__.6356>:
  14b408:	63737973 5f6c6c61 70676973 6d636f72     syscall_sigprocm
  14b418:	006b7361                                ask.

0014b41c <__FUNCTION__.6359>:
  14b41c:	63737973 5f6c6c61 74696e69 646f6d5f     syscall_init_mod
  14b42c:	00656c75                                ule.

0014b430 <__FUNCTION__.6362>:
  14b430:	63737973 5f6c6c61 656c6564 6d5f6574     syscall_delete_m
  14b440:	6c75646f 00000065                       odule...

0014b448 <__FUNCTION__.6365>:
  14b448:	63737973 5f6c6c61 746f7571 6c746361     syscall_quotactl
  14b458:	00000000                                ....

0014b45c <__FUNCTION__.6368>:
  14b45c:	63737973 5f6c6c61 70746567 00646967     syscall_getpgid.

0014b46c <__FUNCTION__.6371>:
  14b46c:	63737973 5f6c6c61 64686366 00007269     syscall_fchdir..

0014b47c <__FUNCTION__.6374>:
  14b47c:	63737973 5f6c6c61 6c666462 00687375     syscall_bdflush.

0014b48c <__FUNCTION__.6377>:
  14b48c:	63737973 5f6c6c61 66737973 00000073     syscall_sysfs...

0014b49c <__FUNCTION__.6380>:
  14b49c:	63737973 5f6c6c61 73726570 6c616e6f     syscall_personal
  14b4ac:	00797469                                ity.

0014b4b0 <__FUNCTION__.6383>:
  14b4b0:	63737973 5f6c6c61 66746573 64697573     syscall_setfsuid
  14b4c0:	00000000                                ....

0014b4c4 <__FUNCTION__.6386>:
  14b4c4:	63737973 5f6c6c61 66746573 64696773     syscall_setfsgid
  14b4d4:	00000000                                ....

0014b4d8 <__FUNCTION__.6394>:
  14b4d8:	63737973 5f6c6c61 736c6c5f 006b6565     syscall__llseek.

0014b4e8 <__FUNCTION__.6400>:
  14b4e8:	63737973 5f6c6c61 64746567 73746e65     syscall_getdents
  14b4f8:	00000000                                ....

0014b4fc <__FUNCTION__.6408>:
  14b4fc:	63737973 5f6c6c61 77656e5f 656c6573     syscall__newsele
  14b50c:	00007463                                ct..

0014b510 <__FUNCTION__.6411>:
  14b510:	63737973 5f6c6c61 636f6c66 0000006b     syscall_flock...

0014b520 <__FUNCTION__.6414>:
  14b520:	63737973 5f6c6c61 6e79736d 00000063     syscall_msync...

0014b530 <__FUNCTION__.6422>:
  14b530:	63737973 5f6c6c61 64616572 00000076     syscall_readv...

0014b540 <__FUNCTION__.6434>:
  14b540:	63737973 5f6c6c61 74697277 00007665     syscall_writev..

0014b550 <__FUNCTION__.6441>:
  14b550:	63737973 5f6c6c61 73746567 00006469     syscall_getsid..

0014b560 <__FUNCTION__.6444>:
  14b560:	63737973 5f6c6c61 74616466 6e797361     syscall_fdatasyn
  14b570:	00000063                                c...

0014b574 <__FUNCTION__.6447>:
  14b574:	63737973 5f6c6c61 7379735f 006c7463     syscall__sysctl.

0014b584 <__FUNCTION__.6450>:
  14b584:	63737973 5f6c6c61 636f6c6d 0000006b     syscall_mlock...

0014b594 <__FUNCTION__.6453>:
  14b594:	63737973 5f6c6c61 6c6e756d 006b636f     syscall_munlock.

0014b5a4 <__FUNCTION__.6456>:
  14b5a4:	63737973 5f6c6c61 636f6c6d 6c6c616b     syscall_mlockall
  14b5b4:	00000000                                ....

0014b5b8 <__FUNCTION__.6459>:
  14b5b8:	63737973 5f6c6c61 6c6e756d 616b636f     syscall_munlocka
  14b5c8:	00006c6c                                ll..

0014b5cc <__FUNCTION__.6464>:
  14b5cc:	63737973 5f6c6c61 65686373 65735f64     syscall_sched_se
  14b5dc:	72617074 00006d61                       tparam..

0014b5e4 <__FUNCTION__.6469>:
  14b5e4:	63737973 5f6c6c61 65686373 65675f64     syscall_sched_ge
  14b5f4:	72617074 00006d61                       tparam..

0014b5fc <__FUNCTION__.6475>:
  14b5fc:	63737973 5f6c6c61 65686373 65735f64     syscall_sched_se
  14b60c:	68637374 6c756465 00007265              tscheduler..

0014b618 <__FUNCTION__.6481>:
  14b618:	63737973 5f6c6c61 65686373 65675f64     syscall_sched_ge
  14b628:	68637374 6c756465 00007265              tscheduler..

0014b634 <__FUNCTION__.6484>:
  14b634:	63737973 5f6c6c61 65686373 69795f64     syscall_sched_yi
  14b644:	00646c65                                eld.

0014b648 <__FUNCTION__.6488>:
  14b648:	63737973 5f6c6c61 65686373 65675f64     syscall_sched_ge
  14b658:	72705f74 69726f69 6d5f7974 00007861     t_priority_max..

0014b668 <__FUNCTION__.6492>:
  14b668:	63737973 5f6c6c61 65686373 65675f64     syscall_sched_ge
  14b678:	72705f74 69726f69 6d5f7974 00006e69     t_priority_min..

0014b688 <__FUNCTION__.6495>:
  14b688:	63737973 5f6c6c61 65686373 72725f64     syscall_sched_rr
  14b698:	7465675f 746e695f 61767265 0000006c     _get_interval...

0014b6a8 <__FUNCTION__.6500>:
  14b6a8:	63737973 5f6c6c61 6f6e616e 65656c73     syscall_nanoslee
  14b6b8:	00000070                                p...

0014b6bc <__FUNCTION__.6508>:
  14b6bc:	63737973 5f6c6c61 6d65726d 00007061     syscall_mremap..

0014b6cc <__FUNCTION__.6511>:
  14b6cc:	63737973 5f6c6c61 72746573 69757365     syscall_setresui
  14b6dc:	00000064                                d...

0014b6e0 <__FUNCTION__.6514>:
  14b6e0:	63737973 5f6c6c61 72746567 69757365     syscall_getresui
  14b6f0:	00000064                                d...

0014b6f4 <__FUNCTION__.6520>:
  14b6f4:	63737973 5f6c6c61 6c6c6f70 00000000     syscall_poll....

0014b704 <__FUNCTION__.6523>:
  14b704:	63737973 5f6c6c61 7373666e 63767265     syscall_nfsservc
  14b714:	00006c74                                tl..

0014b718 <__FUNCTION__.6526>:
  14b718:	63737973 5f6c6c61 72746573 69677365     syscall_setresgi
  14b728:	00000064                                d...

0014b72c <__FUNCTION__.6529>:
  14b72c:	63737973 5f6c6c61 72746567 69677365     syscall_getresgi
  14b73c:	00000064                                d...

0014b740 <__FUNCTION__.6532>:
  14b740:	63737973 5f6c6c61 74637270 0000006c     syscall_prctl...

0014b750 <__FUNCTION__.6535>:
  14b750:	63737973 5f6c6c61 735f7472 65726769     syscall_rt_sigre
  14b760:	6e727574 00000000                       turn....

0014b768 <__FUNCTION__.6543>:
  14b768:	63737973 5f6c6c61 735f7472 63616769     syscall_rt_sigac
  14b778:	6e6f6974 00000000                       tion....

0014b780 <__FUNCTION__.6551>:
  14b780:	63737973 5f6c6c61 735f7472 72706769     syscall_rt_sigpr
  14b790:	616d636f 00006b73                       ocmask..

0014b798 <__FUNCTION__.6554>:
  14b798:	63737973 5f6c6c61 735f7472 65706769     syscall_rt_sigpe
  14b7a8:	6e69646e 00000067                       nding...

0014b7b0 <__FUNCTION__.6557>:
  14b7b0:	63737973 5f6c6c61 735f7472 69746769     syscall_rt_sigti
  14b7c0:	7764656d 00746961                       medwait.

0014b7c8 <__FUNCTION__.6560>:
  14b7c8:	63737973 5f6c6c61 735f7472 75716769     syscall_rt_sigqu
  14b7d8:	69657565 006f666e                       eueinfo.

0014b7e0 <__FUNCTION__.6563>:
  14b7e0:	63737973 5f6c6c61 735f7472 75736769     syscall_rt_sigsu
  14b7f0:	6e657073 00000064                       spend...

0014b7f8 <__FUNCTION__.6566>:
  14b7f8:	63737973 5f6c6c61 61657270 00343664     syscall_pread64.

0014b808 <__FUNCTION__.6569>:
  14b808:	63737973 5f6c6c61 69727770 34366574     syscall_pwrite64
  14b818:	00000000                                ....

0014b81c <__FUNCTION__.6572>:
  14b81c:	63737973 5f6c6c61 776f6863 0000006e     syscall_chown...

0014b82c <__FUNCTION__.6577>:
  14b82c:	63737973 5f6c6c61 63746567 00006477     syscall_getcwd..

0014b83c <__FUNCTION__.6580>:
  14b83c:	63737973 5f6c6c61 67706163 00007465     syscall_capget..

0014b84c <__FUNCTION__.6583>:
  14b84c:	63737973 5f6c6c61 73706163 00007465     syscall_capset..

0014b85c <__FUNCTION__.6586>:
  14b85c:	63737973 5f6c6c61 61676973 7473746c     syscall_sigaltst
  14b86c:	006b6361                                ack.

0014b870 <__FUNCTION__.6589>:
  14b870:	63737973 5f6c6c61 646e6573 656c6966     syscall_sendfile
  14b880:	00000000                                ....

0014b884 <__FUNCTION__.6592>:
  14b884:	63737973 5f6c6c61 726f6676 0000006b     syscall_vfork...

0014b894 <__FUNCTION__.6597>:
  14b894:	63737973 5f6c6c61 74656775 6d696c72     syscall_ugetrlim
  14b8a4:	00007469                                it..

0014b8a8 <__FUNCTION__.6606>:
  14b8a8:	63737973 5f6c6c61 70616d6d 00000032     syscall_mmap2...

0014b8b8 <__FUNCTION__.6609>:
  14b8b8:	63737973 5f6c6c61 6e757274 65746163     syscall_truncate
  14b8c8:	00003436                                64..

0014b8cc <__FUNCTION__.6612>:
  14b8cc:	63737973 5f6c6c61 75727466 7461636e     syscall_ftruncat
  14b8dc:	00343665                                e64.

0014b8e0 <__FUNCTION__.6617>:
  14b8e0:	63737973 5f6c6c61 74617473 00003436     syscall_stat64..

0014b8f0 <__FUNCTION__.6622>:
  14b8f0:	63737973 5f6c6c61 6174736c 00343674     syscall_lstat64.

0014b900 <__FUNCTION__.6627>:
  14b900:	63737973 5f6c6c61 61747366 00343674     syscall_fstat64.

0014b910 <__FUNCTION__.6630>:
  14b910:	63737973 5f6c6c61 6f68636c 32336e77     syscall_lchown32
  14b920:	00000000                                ....

0014b924 <__FUNCTION__.6633>:
  14b924:	63737973 5f6c6c61 75746567 32336469     syscall_getuid32
  14b934:	00000000                                ....

0014b938 <__FUNCTION__.6636>:
  14b938:	63737973 5f6c6c61 67746567 32336469     syscall_getgid32
  14b948:	00000000                                ....

0014b94c <__FUNCTION__.6639>:
  14b94c:	63737973 5f6c6c61 65746567 33646975     syscall_geteuid3
  14b95c:	00000032                                2...

0014b960 <__FUNCTION__.6642>:
  14b960:	63737973 5f6c6c61 65746567 33646967     syscall_getegid3
  14b970:	00000032                                2...

0014b974 <__FUNCTION__.6645>:
  14b974:	63737973 5f6c6c61 72746573 64697565     syscall_setreuid
  14b984:	00003233                                32..

0014b988 <__FUNCTION__.6648>:
  14b988:	63737973 5f6c6c61 72746573 64696765     syscall_setregid
  14b998:	00003233                                32..

0014b99c <__FUNCTION__.6651>:
  14b99c:	63737973 5f6c6c61 67746567 70756f72     syscall_getgroup
  14b9ac:	00323373                                s32.

0014b9b0 <__FUNCTION__.6654>:
  14b9b0:	63737973 5f6c6c61 67746573 70756f72     syscall_setgroup
  14b9c0:	00323373                                s32.

0014b9c4 <__FUNCTION__.6657>:
  14b9c4:	63737973 5f6c6c61 6f686366 32336e77     syscall_fchown32
  14b9d4:	00000000                                ....

0014b9d8 <__FUNCTION__.6660>:
  14b9d8:	63737973 5f6c6c61 72746573 69757365     syscall_setresui
  14b9e8:	00323364                                d32.

0014b9ec <__FUNCTION__.6663>:
  14b9ec:	63737973 5f6c6c61 72746567 69757365     syscall_getresui
  14b9fc:	00323364                                d32.

0014ba00 <__FUNCTION__.6666>:
  14ba00:	63737973 5f6c6c61 72746573 69677365     syscall_setresgi
  14ba10:	00323364                                d32.

0014ba14 <__FUNCTION__.6669>:
  14ba14:	63737973 5f6c6c61 72746567 69677365     syscall_getresgi
  14ba24:	00323364                                d32.

0014ba28 <__FUNCTION__.6672>:
  14ba28:	63737973 5f6c6c61 776f6863 0032336e     syscall_chown32.

0014ba38 <__FUNCTION__.6675>:
  14ba38:	63737973 5f6c6c61 75746573 32336469     syscall_setuid32
  14ba48:	00000000                                ....

0014ba4c <__FUNCTION__.6678>:
  14ba4c:	63737973 5f6c6c61 67746573 32336469     syscall_setgid32
  14ba5c:	00000000                                ....

0014ba60 <__FUNCTION__.6681>:
  14ba60:	63737973 5f6c6c61 66746573 64697573     syscall_setfsuid
  14ba70:	00003233                                32..

0014ba74 <__FUNCTION__.6684>:
  14ba74:	63737973 5f6c6c61 66746573 64696773     syscall_setfsgid
  14ba84:	00003233                                32..

0014ba88 <__FUNCTION__.6690>:
  14ba88:	63737973 5f6c6c61 64746567 73746e65     syscall_getdents
  14ba98:	00003436                                64..

0014ba9c <__FUNCTION__.6693>:
  14ba9c:	63737973 5f6c6c61 6f766970 6f725f74     syscall_pivot_ro
  14baac:	0000746f                                ot..

0014bab0 <__FUNCTION__.6696>:
  14bab0:	63737973 5f6c6c61 636e696d 0065726f     syscall_mincore.

0014bac0 <__FUNCTION__.6702>:
  14bac0:	63737973 5f6c6c61 7664616d 00657369     syscall_madvise.

0014bad0 <__FUNCTION__.6708>:
  14bad0:	63737973 5f6c6c61 746e6366 0034366c     syscall_fcntl64.

0014bae0 <__FUNCTION__.6711>:
  14bae0:	63737973 5f6c6c61 74746567 00006469     syscall_gettid..

0014baf0 <__FUNCTION__.6714>:
  14baf0:	63737973 5f6c6c61 64616572 61656861     syscall_readahea
  14bb00:	00000064                                d...

0014bb04 <__FUNCTION__.6717>:
  14bb04:	63737973 5f6c6c61 78746573 72747461     syscall_setxattr
  14bb14:	00000000                                ....

0014bb18 <__FUNCTION__.6720>:
  14bb18:	63737973 5f6c6c61 7465736c 74746178     syscall_lsetxatt
  14bb28:	00000072                                r...

0014bb2c <__FUNCTION__.6723>:
  14bb2c:	63737973 5f6c6c61 74657366 74746178     syscall_fsetxatt
  14bb3c:	00000072                                r...

0014bb40 <__FUNCTION__.6726>:
  14bb40:	63737973 5f6c6c61 78746567 72747461     syscall_getxattr
  14bb50:	00000000                                ....

0014bb54 <__FUNCTION__.6729>:
  14bb54:	63737973 5f6c6c61 7465676c 74746178     syscall_lgetxatt
  14bb64:	00000072                                r...

0014bb68 <__FUNCTION__.6732>:
  14bb68:	63737973 5f6c6c61 74656766 74746178     syscall_fgetxatt
  14bb78:	00000072                                r...

0014bb7c <__FUNCTION__.6735>:
  14bb7c:	63737973 5f6c6c61 7473696c 74746178     syscall_listxatt
  14bb8c:	00000072                                r...

0014bb90 <__FUNCTION__.6738>:
  14bb90:	63737973 5f6c6c61 73696c6c 74617874     syscall_llistxat
  14bba0:	00007274                                tr..

0014bba4 <__FUNCTION__.6741>:
  14bba4:	63737973 5f6c6c61 73696c66 74617874     syscall_flistxat
  14bbb4:	00007274                                tr..

0014bbb8 <__FUNCTION__.6744>:
  14bbb8:	63737973 5f6c6c61 6f6d6572 61786576     syscall_removexa
  14bbc8:	00727474                                ttr.

0014bbcc <__FUNCTION__.6747>:
  14bbcc:	63737973 5f6c6c61 6d65726c 7865766f     syscall_lremovex
  14bbdc:	72747461 00000000                       attr....

0014bbe4 <__FUNCTION__.6750>:
  14bbe4:	63737973 5f6c6c61 6d657266 7865766f     syscall_fremovex
  14bbf4:	72747461 00000000                       attr....

0014bbfc <__FUNCTION__.6755>:
  14bbfc:	63737973 5f6c6c61 6c696b74 0000006c     syscall_tkill...

0014bc0c <__FUNCTION__.6758>:
  14bc0c:	63737973 5f6c6c61 646e6573 656c6966     syscall_sendfile
  14bc1c:	00003436                                64..

0014bc20 <__FUNCTION__.6767>:
  14bc20:	63737973 5f6c6c61 65747566 00000078     syscall_futex...

0014bc30 <__FUNCTION__.6773>:
  14bc30:	63737973 5f6c6c61 65686373 65735f64     syscall_sched_se
  14bc40:	66666174 74696e69 00000079              taffinity...

0014bc4c <__FUNCTION__.6776>:
  14bc4c:	63737973 5f6c6c61 65686373 65675f64     syscall_sched_ge
  14bc5c:	66666174 74696e69 00000079              taffinity...

0014bc68 <__FUNCTION__.6779>:
  14bc68:	63737973 5f6c6c61 735f6f69 70757465     syscall_io_setup
  14bc78:	00000000                                ....

0014bc7c <__FUNCTION__.6782>:
  14bc7c:	63737973 5f6c6c61 645f6f69 72747365     syscall_io_destr
  14bc8c:	0000796f                                oy..

0014bc90 <__FUNCTION__.6785>:
  14bc90:	63737973 5f6c6c61 675f6f69 76657465     syscall_io_getev
  14bca0:	73746e65 00000000                       ents....

0014bca8 <__FUNCTION__.6788>:
  14bca8:	63737973 5f6c6c61 735f6f69 696d6275     syscall_io_submi
  14bcb8:	00000074                                t...

0014bcbc <__FUNCTION__.6791>:
  14bcbc:	63737973 5f6c6c61 635f6f69 65636e61     syscall_io_cance
  14bccc:	0000006c                                l...

0014bcd0 <__FUNCTION__.6795>:
  14bcd0:	63737973 5f6c6c61 74697865 6f72675f     syscall_exit_gro
  14bce0:	00007075                                up..

0014bce4 <__FUNCTION__.6798>:
  14bce4:	63737973 5f6c6c61 6b6f6f6c 645f7075     syscall_lookup_d
  14bcf4:	6b6f6f63 00006569                       cookie..

0014bcfc <__FUNCTION__.6801>:
  14bcfc:	63737973 5f6c6c61 6c6f7065 72635f6c     syscall_epoll_cr
  14bd0c:	65746165 00000000                       eate....

0014bd14 <__FUNCTION__.6804>:
  14bd14:	63737973 5f6c6c61 6c6f7065 74635f6c     syscall_epoll_ct
  14bd24:	0000006c                                l...

0014bd28 <__FUNCTION__.6807>:
  14bd28:	63737973 5f6c6c61 6c6f7065 61775f6c     syscall_epoll_wa
  14bd38:	00007469                                it..

0014bd3c <__FUNCTION__.6810>:
  14bd3c:	63737973 5f6c6c61 616d6572 69665f70     syscall_remap_fi
  14bd4c:	705f656c 73656761 00000000              le_pages....

0014bd58 <__FUNCTION__.6814>:
  14bd58:	63737973 5f6c6c61 5f746573 5f646974     syscall_set_tid_
  14bd68:	72646461 00737365                       address.

0014bd70 <__FUNCTION__.6817>:
  14bd70:	63737973 5f6c6c61 656d6974 72635f72     syscall_timer_cr
  14bd80:	65746165 00000000                       eate....

0014bd88 <__FUNCTION__.6820>:
  14bd88:	63737973 5f6c6c61 656d6974 65735f72     syscall_timer_se
  14bd98:	6d697474 00000065                       ttime...

0014bda0 <__FUNCTION__.6823>:
  14bda0:	63737973 5f6c6c61 656d6974 65675f72     syscall_timer_ge
  14bdb0:	6d697474 00000065                       ttime...

0014bdb8 <__FUNCTION__.6826>:
  14bdb8:	63737973 5f6c6c61 656d6974 65675f72     syscall_timer_ge
  14bdc8:	65766f74 6e757272 00000000              toverrun....

0014bdd4 <__FUNCTION__.6829>:
  14bdd4:	63737973 5f6c6c61 656d6974 65645f72     syscall_timer_de
  14bde4:	6574656c 00000000                       lete....

0014bdec <__FUNCTION__.6834>:
  14bdec:	63737973 5f6c6c61 636f6c63 65735f6b     syscall_clock_se
  14bdfc:	6d697474 00000065                       ttime...

0014be04 <__FUNCTION__.6839>:
  14be04:	63737973 5f6c6c61 636f6c63 65675f6b     syscall_clock_ge
  14be14:	6d697474 00000065                       ttime...

0014be1c <__FUNCTION__.6844>:
  14be1c:	63737973 5f6c6c61 636f6c63 65675f6b     syscall_clock_ge
  14be2c:	73657274 00000000                       tres....

0014be34 <__FUNCTION__.6847>:
  14be34:	63737973 5f6c6c61 636f6c63 616e5f6b     syscall_clock_na
  14be44:	6c736f6e 00706565                       nosleep.

0014be4c <__FUNCTION__.6853>:
  14be4c:	63737973 5f6c6c61 74617473 34367366     syscall_statfs64
  14be5c:	00000000                                ....

0014be60 <__FUNCTION__.6859>:
  14be60:	63737973 5f6c6c61 61747366 36736674     syscall_fstatfs6
  14be70:	00000034                                4...

0014be74 <__FUNCTION__.6862>:
  14be74:	63737973 5f6c6c61 696b6774 00006c6c     syscall_tgkill..

0014be84 <__FUNCTION__.6865>:
  14be84:	63737973 5f6c6c61 6d697475 00007365     syscall_utimes..

0014be94 <__FUNCTION__.6868>:
  14be94:	63737973 5f6c6c61 5f6d7261 76646166     syscall_arm_fadv
  14bea4:	36657369 34365f34 00000000              ise64_64....

0014beb0 <__FUNCTION__.6871>:
  14beb0:	63737973 5f6c6c61 63696370 69666e6f     syscall_pciconfi
  14bec0:	6f695f67 65736162 00000000              g_iobase....

0014becc <__FUNCTION__.6874>:
  14becc:	63737973 5f6c6c61 63696370 69666e6f     syscall_pciconfi
  14bedc:	65725f67 00006461                       g_read..

0014bee4 <__FUNCTION__.6877>:
  14bee4:	63737973 5f6c6c61 63696370 69666e6f     syscall_pciconfi
  14bef4:	72775f67 00657469                       g_write.

0014befc <__FUNCTION__.6880>:
  14befc:	63737973 5f6c6c61 6f5f716d 006e6570     syscall_mq_open.

0014bf0c <__FUNCTION__.6883>:
  14bf0c:	63737973 5f6c6c61 755f716d 6e696c6e     syscall_mq_unlin
  14bf1c:	0000006b                                k...

0014bf20 <__FUNCTION__.6886>:
  14bf20:	63737973 5f6c6c61 745f716d 64656d69     syscall_mq_timed
  14bf30:	646e6573 00000000                       send....

0014bf38 <__FUNCTION__.6889>:
  14bf38:	63737973 5f6c6c61 745f716d 64656d69     syscall_mq_timed
  14bf48:	65636572 00657669                       receive.

0014bf50 <__FUNCTION__.6892>:
  14bf50:	63737973 5f6c6c61 6e5f716d 6669746f     syscall_mq_notif
  14bf60:	00000079                                y...

0014bf64 <__FUNCTION__.6895>:
  14bf64:	63737973 5f6c6c61 675f716d 65737465     syscall_mq_getse
  14bf74:	74746174 00000072                       tattr...

0014bf7c <__FUNCTION__.6898>:
  14bf7c:	63737973 5f6c6c61 74696177 00006469     syscall_waitid..

0014bf8c <__FUNCTION__.6904>:
  14bf8c:	63737973 5f6c6c61 6b636f73 00007465     syscall_socket..

0014bf9c <__FUNCTION__.6910>:
  14bf9c:	63737973 5f6c6c61 646e6962 00000000     syscall_bind....

0014bfac <__FUNCTION__.6916>:
  14bfac:	63737973 5f6c6c61 6e6e6f63 00746365     syscall_connect.

0014bfbc <__FUNCTION__.6921>:
  14bfbc:	63737973 5f6c6c61 7473696c 00006e65     syscall_listen..

0014bfcc <__FUNCTION__.6927>:
  14bfcc:	63737973 5f6c6c61 65636361 00007470     syscall_accept..

0014bfdc <__FUNCTION__.6933>:
  14bfdc:	63737973 5f6c6c61 73746567 6e6b636f     syscall_getsockn
  14bfec:	00656d61                                ame.

0014bff0 <__FUNCTION__.6939>:
  14bff0:	63737973 5f6c6c61 70746567 6e726565     syscall_getpeern
  14c000:	00656d61                                ame.

0014c004 <__FUNCTION__.6942>:
  14c004:	63737973 5f6c6c61 6b636f73 61707465     syscall_socketpa
  14c014:	00007269                                ir..

0014c018 <__FUNCTION__.6949>:
  14c018:	63737973 5f6c6c61 646e6573 00000000     syscall_send....

0014c028 <__FUNCTION__.6958>:
  14c028:	63737973 5f6c6c61 646e6573 00006f74     syscall_sendto..

0014c038 <__FUNCTION__.6965>:
  14c038:	63737973 5f6c6c61 76636572 00000000     syscall_recv....

0014c048 <__FUNCTION__.6974>:
  14c048:	63737973 5f6c6c61 76636572 6d6f7266     syscall_recvfrom
  14c058:	00000000                                ....

0014c05c <__FUNCTION__.6977>:
  14c05c:	63737973 5f6c6c61 74756873 6e776f64     syscall_shutdown
  14c06c:	00000000                                ....

0014c070 <__FUNCTION__.6985>:
  14c070:	63737973 5f6c6c61 73746573 6f6b636f     syscall_setsocko
  14c080:	00007470                                pt..

0014c084 <__FUNCTION__.6993>:
  14c084:	63737973 5f6c6c61 73746567 6f6b636f     syscall_getsocko
  14c094:	00007470                                pt..

0014c098 <__FUNCTION__.6996>:
  14c098:	63737973 5f6c6c61 646e6573 0067736d     syscall_sendmsg.

0014c0a8 <__FUNCTION__.6999>:
  14c0a8:	63737973 5f6c6c61 76636572 0067736d     syscall_recvmsg.

0014c0b8 <__FUNCTION__.7002>:
  14c0b8:	63737973 5f6c6c61 6f6d6573 00000070     syscall_semop...

0014c0c8 <__FUNCTION__.7005>:
  14c0c8:	63737973 5f6c6c61 676d6573 00007465     syscall_semget..

0014c0d8 <__FUNCTION__.7008>:
  14c0d8:	63737973 5f6c6c61 636d6573 00006c74     syscall_semctl..

0014c0e8 <__FUNCTION__.7011>:
  14c0e8:	63737973 5f6c6c61 7367736d 0000646e     syscall_msgsnd..

0014c0f8 <__FUNCTION__.7014>:
  14c0f8:	63737973 5f6c6c61 7267736d 00007663     syscall_msgrcv..

0014c108 <__FUNCTION__.7017>:
  14c108:	63737973 5f6c6c61 6767736d 00007465     syscall_msgget..

0014c118 <__FUNCTION__.7020>:
  14c118:	63737973 5f6c6c61 6367736d 00006c74     syscall_msgctl..

0014c128 <__FUNCTION__.7026>:
  14c128:	63737973 5f6c6c61 616d6873 00000074     syscall_shmat...

0014c138 <__FUNCTION__.7030>:
  14c138:	63737973 5f6c6c61 646d6873 00000074     syscall_shmdt...

0014c148 <__FUNCTION__.7036>:
  14c148:	63737973 5f6c6c61 676d6873 00007465     syscall_shmget..

0014c158 <__FUNCTION__.7042>:
  14c158:	63737973 5f6c6c61 636d6873 00006c74     syscall_shmctl..

0014c168 <__FUNCTION__.7045>:
  14c168:	63737973 5f6c6c61 5f646461 0079656b     syscall_add_key.

0014c178 <__FUNCTION__.7048>:
  14c178:	63737973 5f6c6c61 75716572 5f747365     syscall_request_
  14c188:	0079656b                                key.

0014c18c <__FUNCTION__.7051>:
  14c18c:	63737973 5f6c6c61 6379656b 00006c74     syscall_keyctl..

0014c19c <__FUNCTION__.7054>:
  14c19c:	63737973 5f6c6c61 746d6573 64656d69     syscall_semtimed
  14c1ac:	0000706f                                op..

0014c1b0 <__FUNCTION__.7057>:
  14c1b0:	63737973 5f6c6c61 72657376 00726576     syscall_vserver.

0014c1c0 <__FUNCTION__.7060>:
  14c1c0:	63737973 5f6c6c61 72706f69 735f6f69     syscall_ioprio_s
  14c1d0:	00007465                                et..

0014c1d4 <__FUNCTION__.7063>:
  14c1d4:	63737973 5f6c6c61 72706f69 675f6f69     syscall_ioprio_g
  14c1e4:	00007465                                et..

0014c1e8 <__FUNCTION__.7066>:
  14c1e8:	63737973 5f6c6c61 746f6e69 5f796669     syscall_inotify_
  14c1f8:	74696e69 00000000                       init....

0014c200 <__FUNCTION__.7069>:
  14c200:	63737973 5f6c6c61 746f6e69 5f796669     syscall_inotify_
  14c210:	5f646461 63746177 00000068              add_watch...

0014c21c <__FUNCTION__.7072>:
  14c21c:	63737973 5f6c6c61 746f6e69 5f796669     syscall_inotify_
  14c22c:	775f6d72 68637461 00000000              rm_watch....

0014c238 <__FUNCTION__.7075>:
  14c238:	63737973 5f6c6c61 6e69626d 00000064     syscall_mbind...

0014c248 <__FUNCTION__.7078>:
  14c248:	63737973 5f6c6c61 5f746567 706d656d     syscall_get_memp
  14c258:	63696c6f 00000079                       olicy...

0014c260 <__FUNCTION__.7081>:
  14c260:	63737973 5f6c6c61 5f746573 706d656d     syscall_set_memp
  14c270:	63696c6f 00000079                       olicy...

0014c278 <__FUNCTION__.7084>:
  14c278:	63737973 5f6c6c61 6e65706f 00007461     syscall_openat..

0014c288 <__FUNCTION__.7087>:
  14c288:	63737973 5f6c6c61 69646b6d 00746172     syscall_mkdirat.

0014c298 <__FUNCTION__.7090>:
  14c298:	63737973 5f6c6c61 6f6e6b6d 00746164     syscall_mknodat.

0014c2a8 <__FUNCTION__.7093>:
  14c2a8:	63737973 5f6c6c61 6f686366 74616e77     syscall_fchownat
  14c2b8:	00000000                                ....

0014c2bc <__FUNCTION__.7096>:
  14c2bc:	63737973 5f6c6c61 69747566 6173656d     syscall_futimesa
  14c2cc:	00000074                                t...

0014c2d0 <__FUNCTION__.7099>:
  14c2d0:	63737973 5f6c6c61 61747366 36746174     syscall_fstatat6
  14c2e0:	00000034                                4...

0014c2e4 <__FUNCTION__.7102>:
  14c2e4:	63737973 5f6c6c61 696c6e75 74616b6e     syscall_unlinkat
  14c2f4:	00000000                                ....

0014c2f8 <__FUNCTION__.7105>:
  14c2f8:	63737973 5f6c6c61 616e6572 7461656d     syscall_renameat
  14c308:	00000000                                ....

0014c30c <__FUNCTION__.7108>:
  14c30c:	63737973 5f6c6c61 6b6e696c 00007461     syscall_linkat..

0014c31c <__FUNCTION__.7111>:
  14c31c:	63737973 5f6c6c61 6c6d7973 616b6e69     syscall_symlinka
  14c32c:	00000074                                t...

0014c330 <__FUNCTION__.7114>:
  14c330:	63737973 5f6c6c61 64616572 6b6e696c     syscall_readlink
  14c340:	00007461                                at..

0014c344 <__FUNCTION__.7117>:
  14c344:	63737973 5f6c6c61 6d686366 7461646f     syscall_fchmodat
  14c354:	00000000                                ....

0014c358 <__FUNCTION__.7120>:
  14c358:	63737973 5f6c6c61 63636166 61737365     syscall_faccessa
  14c368:	00000074                                t...

0014c36c <__FUNCTION__.7123>:
  14c36c:	63737973 5f6c6c61 6c657370 36746365     syscall_pselect6
  14c37c:	00000000                                ....

0014c380 <__FUNCTION__.7126>:
  14c380:	63737973 5f6c6c61 6c6f7070 0000006c     syscall_ppoll...

0014c390 <__FUNCTION__.7129>:
  14c390:	63737973 5f6c6c61 68736e75 00657261     syscall_unshare.

0014c3a0 <__FUNCTION__.7132>:
  14c3a0:	63737973 5f6c6c61 5f746573 75626f72     syscall_set_robu
  14c3b0:	6c5f7473 00747369                       st_list.

0014c3b8 <__FUNCTION__.7135>:
  14c3b8:	63737973 5f6c6c61 5f746567 75626f72     syscall_get_robu
  14c3c8:	6c5f7473 00747369                       st_list.

0014c3d0 <__FUNCTION__.7138>:
  14c3d0:	63737973 5f6c6c61 696c7073 00006563     syscall_splice..

0014c3e0 <__FUNCTION__.7141>:
  14c3e0:	63737973 5f6c6c61 5f6d7261 636e7973     syscall_arm_sync
  14c3f0:	6c69665f 61725f65 0065676e              _file_range.

0014c3fc <__FUNCTION__.7144>:
  14c3fc:	63737973 5f6c6c61 00656574              syscall_tee.

0014c408 <__FUNCTION__.7147>:
  14c408:	63737973 5f6c6c61 70736d76 6563696c     syscall_vmsplice
  14c418:	00000000                                ....

0014c41c <__FUNCTION__.7150>:
  14c41c:	63737973 5f6c6c61 65766f6d 6761705f     syscall_move_pag
  14c42c:	00007365                                es..

0014c430 <__FUNCTION__.7153>:
  14c430:	63737973 5f6c6c61 63746567 00007570     syscall_getcpu..

0014c440 <__FUNCTION__.7156>:
  14c440:	63737973 5f6c6c61 6c6f7065 77705f6c     syscall_epoll_pw
  14c450:	00746961                                ait.

0014c454 <__FUNCTION__.7159>:
  14c454:	63737973 5f6c6c61 6578656b 6f6c5f63     syscall_kexec_lo
  14c464:	00006461                                ad..

0014c468 <__FUNCTION__.7162>:
  14c468:	63737973 5f6c6c61 6d697475 61736e65     syscall_utimensa
  14c478:	00000074                                t...

0014c47c <__FUNCTION__.7165>:
  14c47c:	63737973 5f6c6c61 6e676973 64666c61     syscall_signalfd
  14c48c:	00000000                                ....

0014c490 <__FUNCTION__.7168>:
  14c490:	63737973 5f6c6c61 656d6974 5f646672     syscall_timerfd_
  14c4a0:	61657263 00006574                       create..

0014c4a8 <__FUNCTION__.7171>:
  14c4a8:	63737973 5f6c6c61 6e657665 00646674     syscall_eventfd.

0014c4b8 <__FUNCTION__.7174>:
  14c4b8:	63737973 5f6c6c61 6c6c6166 7461636f     syscall_fallocat
  14c4c8:	00000065                                e...

0014c4cc <__FUNCTION__.7177>:
  14c4cc:	63737973 5f6c6c61 656d6974 5f646672     syscall_timerfd_
  14c4dc:	74746573 00656d69                       settime.

0014c4e4 <__FUNCTION__.7180>:
  14c4e4:	63737973 5f6c6c61 656d6974 5f646672     syscall_timerfd_
  14c4f4:	74746567 00656d69                       gettime.

0014c4fc <__FUNCTION__.7183>:
  14c4fc:	63737973 5f6c6c61 6e676973 64666c61     syscall_signalfd
  14c50c:	00000034                                4...

0014c510 <__FUNCTION__.7186>:
  14c510:	63737973 5f6c6c61 6e657665 32646674     syscall_eventfd2
  14c520:	00000000                                ....

0014c524 <__FUNCTION__.7189>:
  14c524:	63737973 5f6c6c61 6c6f7065 72635f6c     syscall_epoll_cr
  14c534:	65746165 00000031                       eate1...

0014c53c <__FUNCTION__.7192>:
  14c53c:	63737973 5f6c6c61 33707564 00000000     syscall_dup3....

0014c54c <__FUNCTION__.7195>:
  14c54c:	63737973 5f6c6c61 65706970 00000032     syscall_pipe2...

0014c55c <__FUNCTION__.7198>:
  14c55c:	63737973 5f6c6c61 746f6e69 5f796669     syscall_inotify_
  14c56c:	74696e69 00000031                       init1...

0014c574 <__FUNCTION__.7201>:
  14c574:	63737973 5f6c6c61 61657270 00007664     syscall_preadv..

0014c584 <__FUNCTION__.7204>:
  14c584:	63737973 5f6c6c61 69727770 00766574     syscall_pwritev.

0014c594 <__FUNCTION__.7207>:
  14c594:	63737973 5f6c6c61 745f7472 67697367     syscall_rt_tgsig
  14c5a4:	75657571 666e6965 0000006f              queueinfo...

0014c5b0 <__FUNCTION__.7210>:
  14c5b0:	63737973 5f6c6c61 66726570 6576655f     syscall_perf_eve
  14c5c0:	6f5f746e 006e6570                       nt_open.

0014c5c8 <__FUNCTION__.7213>:
  14c5c8:	63737973 5f6c6c61 76636572 67736d6d     syscall_recvmmsg
  14c5d8:	00000000                                ....

0014c5dc <__FUNCTION__.7216>:
  14c5dc:	63737973 5f6c6c61 65636361 00347470     syscall_accept4.

0014c5ec <__FUNCTION__.7219>:
  14c5ec:	63737973 5f6c6c61 6f6e6166 79666974     syscall_fanotify
  14c5fc:	696e695f 00000074                       _init...

0014c604 <__FUNCTION__.7222>:
  14c604:	63737973 5f6c6c61 6f6e6166 79666974     syscall_fanotify
  14c614:	72616d5f 0000006b                       _mark...

0014c61c <__FUNCTION__.7230>:
  14c61c:	63737973 5f6c6c61 696c7270 3674696d     syscall_prlimit6
  14c62c:	00000034                                4...

0014c630 <__FUNCTION__.7233>:
  14c630:	63737973 5f6c6c61 656d616e 5f6f745f     syscall_name_to_
  14c640:	646e6168 615f656c 00000074              handle_at...

0014c64c <__FUNCTION__.7236>:
  14c64c:	63737973 5f6c6c61 6e65706f 5f79625f     syscall_open_by_
  14c65c:	646e6168 615f656c 00000074              handle_at...

0014c668 <__FUNCTION__.7239>:
  14c668:	63737973 5f6c6c61 636f6c63 64615f6b     syscall_clock_ad
  14c678:	6d69746a 00000065                       jtime...

0014c680 <__FUNCTION__.7242>:
  14c680:	63737973 5f6c6c61 636e7973 00007366     syscall_syncfs..

0014c690 <__FUNCTION__.7245>:
  14c690:	63737973 5f6c6c61 646e6573 67736d6d     syscall_sendmmsg
  14c6a0:	00000000                                ....

0014c6a4 <__FUNCTION__.7248>:
  14c6a4:	63737973 5f6c6c61 6e746573 00000073     syscall_setns...

0014c6b4 <__FUNCTION__.7251>:
  14c6b4:	63737973 5f6c6c61 636f7270 5f737365     syscall_process_
  14c6c4:	725f6d76 76646165 00000000              vm_readv....

0014c6d0 <__FUNCTION__.7254>:
  14c6d0:	63737973 5f6c6c61 636f7270 5f737365     syscall_process_
  14c6e0:	775f6d76 65746972 00000076              vm_writev...

0014c6ec <__FUNCTION__.7257>:
  14c6ec:	63737973 5f6c6c61 706d636b 00000000     syscall_kcmp....

0014c6fc <__FUNCTION__.7260>:
  14c6fc:	63737973 5f6c6c61 696e6966 6f6d5f74     syscall_finit_mo
  14c70c:	656c7564 00000000                       dule....

0014c714 <__FUNCTION__.7263>:
  14c714:	63737973 5f6c6c61 65686373 65735f64     syscall_sched_se
  14c724:	74746174 00000072                       tattr...

0014c72c <__FUNCTION__.7266>:
  14c72c:	63737973 5f6c6c61 65686373 65675f64     syscall_sched_ge
  14c73c:	74746174 00000072                       tattr...

0014c744 <__FUNCTION__.7269>:
  14c744:	63737973 5f6c6c61 616e6572 7461656d     syscall_renameat
  14c754:	00000032                                2...

0014c758 <__FUNCTION__.7272>:
  14c758:	63737973 5f6c6c61 63636573 00706d6f     syscall_seccomp.

0014c768 <__FUNCTION__.7278>:
  14c768:	63737973 5f6c6c61 72746567 6f646e61     syscall_getrando
  14c778:	0000006d                                m...

0014c77c <__FUNCTION__.7281>:
  14c77c:	63737973 5f6c6c61 666d656d 72635f64     syscall_memfd_cr
  14c78c:	65746165 00000000                       eate....

0014c794 <__FUNCTION__.7284>:
  14c794:	63737973 5f6c6c61 00667062              syscall_bpf.

0014c7a0 <__FUNCTION__.7287>:
  14c7a0:	63737973 5f6c6c61 63657865 74616576     syscall_execveat
  14c7b0:	00000000                                ....

0014c7b4 <__FUNCTION__.7290>:
  14c7b4:	63737973 5f6c6c61 72657375 6c756166     syscall_userfaul
  14c7c4:	00646674                                tfd.

0014c7c8 <__FUNCTION__.7293>:
  14c7c8:	63737973 5f6c6c61 626d656d 69727261     syscall_membarri
  14c7d8:	00007265                                er..

0014c7dc <__FUNCTION__.7296>:
  14c7dc:	63737973 5f6c6c61 636f6c6d 0000326b     syscall_mlock2..

0014c7ec <__FUNCTION__.7299>:
  14c7ec:	63737973 5f6c6c61 79706f63 6c69665f     syscall_copy_fil
  14c7fc:	61725f65 0065676e                       e_range.

0014c804 <__FUNCTION__.7302>:
  14c804:	63737973 5f6c6c61 61657270 00327664     syscall_preadv2.

0014c814 <__FUNCTION__.7305>:
  14c814:	63737973 5f6c6c61 69727770 32766574     syscall_pwritev2
  14c824:	00000000                                ....

0014c828 <__FUNCTION__.7308>:
  14c828:	63737973 5f6c6c61 79656b70 72706d5f     syscall_pkey_mpr
  14c838:	6365746f 00000074                       otect...

0014c840 <__FUNCTION__.7311>:
  14c840:	63737973 5f6c6c61 79656b70 6c6c615f     syscall_pkey_all
  14c850:	0000636f                                oc..

0014c854 <__FUNCTION__.7314>:
  14c854:	63737973 5f6c6c61 79656b70 6572665f     syscall_pkey_fre
  14c864:	00000065                                e...

0014c868 <__FUNCTION__.7317>:
  14c868:	63737973 5f6c6c61 74617473 00000078     syscall_statx...

0014c878 <__FUNCTION__.7320>:
  14c878:	63737973 5f6c6c61 71657372 00000000     syscall_rseq....

0014c888 <__FUNCTION__.7323>:
  14c888:	63737973 5f6c6c61 705f6f69 65746567     syscall_io_pgete
  14c898:	746e6576 00000073 335b1a0a 5b206d34     vents.....[34m [
  14c8a8:	64202020 7973206f 6c616373 203a5d6c        do syscall]: 
  14c8b8:	6d305b1b 00000000                       .[0m....

0014c8c0 <syscall_table>:
  14c8c0:	0013b224 0013b480 0013c4b8 0013bf20     $........... ...
  14c8d0:	0013bee8 0013beb0 0013b458 00000000     ........X.......
  14c8e0:	0013b208 0013b1ec 0013b430 0013be78     ........0...x...
  14c8f0:	0013b408 00000000 0013b1d0 0013b1b4     ................
  14c900:	0013b198 00000000 00000000 0013c520     ............ ...
  14c910:	0013c498 0013b17c 00000000 0013b160     ....|.......`...
  14c920:	0013b144 00000000 0013b128 00000000     D.......(.......
  14c930:	00000000 0013b10c 00000000 00000000     ................
  14c940:	00000000 0013b898 0013b0f0 00000000     ................
  14c950:	0013b0d4 0013b868 0013b838 0013b808     ....h...8.......
  14c960:	0013b3e0 0013b3b8 0013b390 0013b0b8     ................
  14c970:	00000000 0013b368 0013b09c 0013b080     ....h...........
  14c980:	00000000 0013b064 0013b048 0013b02c     ....d...H...,...
  14c990:	0013b010 00000000 0013c4d8 0013be40     ............@...
  14c9a0:	00000000 0013aff4 00000000 00000000     ................
  14c9b0:	0013afd8 0013afbc 0013afa0 0013b7d8     ................
  14c9c0:	0013af84 0013af68 0013c478 0013c108     ....h...x.......
	...
  14c9d8:	0013af4c 0013af30 0013af14 0013aef8     L...0...........
  14c9e8:	0013aedc 0013b7a8 00000000 0013aec0     ................
  14c9f8:	0013aea4 0013ae88 0013ae6c 0013ae50     ........l...P...
  14ca08:	00000000 0013ae34 00000000 0013be08     ....4...........
  14ca18:	0013ae18 0013adfc 0013ade0 00000000     ................
  14ca28:	00000000 0013b778 0013adc4 0013ada8     ....x...........
  14ca38:	0013ad8c 0013ad70 0013ad54 0013ad38     ....p...T...8...
  14ca48:	00000000 0013ad1c 0013ad00 00000000     ................
  14ca58:	00000000 0013ace4 0013acc8 0013acac     ................
  14ca68:	0013b748 0013b718 0013ac90 00000000     H...............
  14ca78:	00000000 0013ac74 00000000 00000000     ....t...........
  14ca88:	0013ac58 0013ac3c 0013ac20 00000000     X...<... .......
  14ca98:	0013b340 0013ac04 0013abe8 0013abcc     @...............
  14caa8:	0013abb0 00000000 0013ab94 0013ab78     ............x...
  14cab8:	0013c0c0 00000000 0013ab5c 0013ab40     ........\...@...
  14cac8:	00000000 0013ab24 0013ab08 0013aaec     ....$...........
  14cad8:	0013aad0 0013aab4 0013aa98 00000000     ................
  14cae8:	0013aa7c 0013aa60 0013c290 0013bdd0     |...`...........
  14caf8:	0013c240 0013aa44 0013aa28 0013bd2c     @...D...(...,...
  14cb08:	0013bc88 0013aa0c 0013a9f0 0013a9d4     ................
  14cb18:	0013a9b8 0013a99c 0013a980 0013a964     ............d...
  14cb28:	0013b6e8 0013b6b8 0013bc50 0013bc18     ........P.......
  14cb38:	0013a948 0013b318 0013b2f0 0013a92c     H...........,...
  14cb48:	0013b688 0013c1f0 0013a910 0013a8f4     ................
	...
  14cb60:	0013bbe0 0013a8d8 0013a8bc 0013a8a0     ................
  14cb70:	0013a884 0013a868 0013c078 0013c030     ....h...x...0...
  14cb80:	0013a84c 0013a830 0013a814 0013a7f8     L...0...........
  14cb90:	0013a7dc 0013a7c0 0013a7a4 0013b658     ............X...
  14cba0:	0013a788 0013a76c 0013a750 0013a734     ....l...P...4...
	...
  14cbb8:	0013c458 0013b628 0013c3e8 0013a718     X...(...........
  14cbc8:	0013a6fc 0013b5f8 0013b5c8 0013b598     ................
  14cbd8:	0013a6e0 0013a6c4 0013a6a8 0013a68c     ................
  14cbe8:	0013a670 0013a654 0013a638 0013a61c     p...T...8.......
  14cbf8:	0013a600 0013a5e4 0013a5c8 0013a5ac     ................
  14cc08:	0013a590 0013a574 0013a558 0013a53c     ....t...X...<...
  14cc18:	0013a520 0013a504 0013a4e8 0013bba8      ...............
  14cc28:	0013a4cc 0013a4b0 0013bb70 0013bb38     ........p...8...
	...
  14cc40:	0013c438 0013a494 0013a478 0013a45c     8.......x...\...
  14cc50:	0013a440 0013a424 0013a408 0013a3ec     @...$...........
  14cc60:	0013a3d0 0013a3b4 0013a398 0013a37c     ............|...
  14cc70:	0013a360 0013a344 0013b568 0013a328     `...D...h...(...
  14cc80:	0013c394 0013bb00 0013a30c 0013a2f0     ................
  14cc90:	0013a2d4 0013a2b8 0013a29c 0013a280     ................
  14cca0:	0013b2c8 0013a264 0013a248 0013a22c     ....d...H...,...
  14ccb0:	0013a210 0013a1f4 00000000 00000000     ................
  14ccc0:	0013b2a0 0013a1d8 0013a1bc 0013a1a0     ................
  14ccd0:	0013a184 0013a168 0013b538 0013b508     ....h...8.......
  14cce0:	0013b4d8 0013a14c 0013a130 0013a114     ....L...0.......
  14ccf0:	0013a0f8 0013a0dc 0013a0c0 0013a0a4     ................
  14cd00:	0013a088 0013a06c 0013a050 0013a034     ....l...P...4...
  14cd10:	0013a018 00139ffc 00139fe0 00139fc4     ................
  14cd20:	00139fa8 0013bac8 0013ba90 0013ba58     ............X...
  14cd30:	0013b4a8 0013ba20 0013b9e8 0013b9b0     .... ...........
  14cd40:	00139f8c 0013bfe8 0013c340 0013bfa0     ........@.......
  14cd50:	0013c2ec 00139f70 0013c1a0 0013c150     ....p.......P...
  14cd60:	00139f54 00139f38 00139f1c 00139f00     T...8...........
  14cd70:	00139ee4 00139ec8 00139eac 00139e90     ................
  14cd80:	00139e74 0013b974 0013b274 0013b938     t...t...t...8...
  14cd90:	0013b900 00139e58 00139e3c 00139e20     ....X...<... ...
  14cda0:	00139e04 00139de8 00139dcc 00139db0     ................
  14cdb0:	00139d94 00139d78 00139d5c 00139d40     ....x...\...@...
  14cdc0:	00139d24 00139d08 00139cec 00139cd0     $...............
  14cdd0:	00139cb4 00139c98 00139c7c 00139c60     ........|...`...
  14cde0:	00139c44 00139c28 00139c0c 00139bf0     D...(...........
  14cdf0:	00139bd4 00139bb8 00139b9c 00139b80     ................
  14ce00:	00139b64 00139b48 00139b2c 00139b10     d...H...,.......
  14ce10:	00139af4 00139ad8 00139abc 00139aa0     ................
  14ce20:	00139a84 00139a68 00139a4c 00139a30     ....h...L...0...
  14ce30:	00139a14 001399f8 001399dc 001399c0     ................
  14ce40:	001399a4 00139988 0013996c 00139950     ........l...P...
  14ce50:	00139934 00139918 001398fc 001398e0     4...............
  14ce60:	001398c4 001398a8 0013988c 00139870     ............p...
  14ce70:	00139854 00139838 0013981c 00139800     T...8...........
  14ce80:	001397e4 0013bf58 001397c8 001397ac     ....X...........
  14ce90:	00139790 00139774 00139758 0013973c     ....t...X...<...
  14cea0:	00139720 00139704 001396e8 001396cc      ...............
  14ceb0:	001396b0 00139694 00139678 0013965c     ........x...\...
  14cec0:	0013b8c8 00139640 00139624 00139608     ....@...$.......
  14ced0:	001395ec 001395d0 001395b4 00139598     ................
  14cee0:	0013957c 00139560 00139544 00139528     |...`...D...(...
  14cef0:	0013950c 001394f0 001394d4 001394b8     ................
  14cf00:	335b1b0a 5b206d31 74706d65 79732079     ..[31m [empty sy
  14cf10:	6c616373 203a5d6c 6d305b1b 00000000     scall]: .[0m....

0014cf20 <bin_tab>:
  14cf20:	23222120 25252424 27272626 28282828      !"#$$%%&&''((((
  14cf30:	29292929 2a2a2a2a 2b2b2b2b 2c2c2c2c     ))))****++++,,,,
  14cf40:	2c2c2c2c 2d2d2d2d 2d2d2d2d 2e2e2e2e     ,,,,--------....
  14cf50:	2e2e2e2e 2f2f2f2f 2f2f2f2f              ....////////

0014cf5c <stderr>:
  14cf5c:	0014e2a8                                ....

0014cf60 <stdout>:
  14cf60:	0014e340 20202b2d 30583020 00000078     @...-+   0X0x...
  14cf70:	6c756e28 0000296c 2b58302d 30205830     (null)..-0X+0X 0
  14cf80:	78302d58 2078302b 00007830 00666e69     X-0x+0x 0x..inf.
  14cf90:	00464e49 006e616e 004e414e 0000002e     INF.nan.NAN.....

0014cfa0 <states>:
  14cfa0:	000a0019 00191919 05000000 00000000     ................
  14cfb0:	00090000 0b000000 00000000 00000000     ................
  14cfc0:	0a110019 03191919 0100070a 180b091b     ................
  14cfd0:	06090000 0b00000b 00190600 19190000     ................
  14cfe0:	00000019 00000000 00000000 00000000     ................
  14cff0:	00000e00 00000000 00190000 19190d0a     ................
  14d000:	000d0019 09000200 0000000e 000e0009     ................
  14d010:	00000e00 00000000 00000000 00000000     ................
	...
  14d028:	0c000000 00000000 00000000 13000000     ................
  14d038:	00000000 00000013 000c0900 00000000     ................
  14d048:	0c00000c 00000000 00000000 00000000     ................
	...
  14d064:	00001000 00000000 00000000 00000f00     ................
  14d074:	000f0400 09000000 00000010 00100000     ................
  14d084:	00001000 00000000 00000000 00000000     ................
	...
  14d09c:	12000000 00000000 00000000 11000000     ................
  14d0ac:	00000000 00000011 00120900 00000000     ................
  14d0bc:	12000012 001a0000 1a1a0000 0000001a     ................
	...
  14d0e0:	001a0000 1a1a0000 0000001a 09000000     ................
	...
  14d110:	14000000 00000000 00000000 17000000     ................
  14d120:	00000000 00000017 00140900 00000000     ................
  14d130:	14000014 00000000 00000000 00000000     ................
	...
  14d14c:	00001600 00000000 00000000 00001500     ................
  14d15c:	00150000 09000000 00000016 00160000     ................
  14d16c:	00001600                                ....

0014d170 <xdigits>:
  14d170:	33323130 37363534 42413938 46454443     0123456789ABCDEF

0014d180 <all_mask>:
  14d180:	ffffffff ffffffff                       ........

0014d188 <app_mask>:
  14d188:	7fffffff fffffffc                       ........

0014d190 <__EH_FRAME_BEGIN__>:
  14d190:	00000000                                ....
